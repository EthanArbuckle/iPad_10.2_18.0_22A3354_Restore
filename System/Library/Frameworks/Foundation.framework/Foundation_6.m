double closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;

  if (specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(a1, a2))
  {
    outlined retain of Morphology._CustomPronoun(a3);
    swift_getAtKeyPath();
    outlined release of Morphology._CustomPronoun(a3);
    if (v8)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x1E0DEA968];
      swift_release();
      *(_QWORD *)a4 = v7;
      *(_QWORD *)(a4 + 8) = v8;
      return result;
    }
    swift_release();
  }
  result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v2)(_QWORD *__return_ptr, id, uint64_t);
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v2 = *(void (**)(_QWORD *__return_ptr, id, uint64_t))(a1 + 32);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  swift_retain();
  v2(v14, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  v6 = v15;
  if (!v15)
    return 0;
  v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

void __swiftcall Morphology.CustomPronoun.init()(Foundation::Morphology::CustomPronoun *__return_ptr retstr)
{
  retstr->_pronoun.possessiveAdjectiveForm = 0u;
  retstr->_pronoun.reflexiveForm = 0u;
  retstr->_pronoun.objectForm = 0u;
  retstr->_pronoun.possessiveForm = 0u;
  retstr->_pronoun.subjectForm = 0u;
}

id static Morphology.CustomPronoun.isSupported(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)(a1, a2, (uint64_t)off_1E0F10D10, (SEL *)&selRef_isSupportedForLanguage_);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v5;
  id v6;

  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, *a4, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  return v6;
}

uint64_t static Morphology.CustomPronoun.requiredKeys(forLanguage:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_requiredKeysForLanguage_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v2 = swift_dynamicCastClass();
    if (v2)
    {
      v3 = v2;

    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v1, sel_copy);
      v4 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v3 = specialized _arrayForceCast<A, B>(_:)(v4);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  v5 = specialized Sequence.compactMap<A>(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t (*Morphology.CustomPronoun.subjectForm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.subjectForm.modify;
}

uint64_t Morphology.CustomPronoun.subjectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.objectForm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.objectForm.modify;
}

uint64_t Morphology.CustomPronoun.objectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveForm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 32) = v4;
    *(_QWORD *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 32) = v4;
    *(_QWORD *)(v3 + 40) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveAdjectiveForm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 56);
  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveAdjectiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 48) = v4;
    *(_QWORD *)(v3 + 56) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 48) = v4;
    *(_QWORD *)(v3 + 56) = v2;
  }
  return result;
}

uint64_t (*Morphology.CustomPronoun.reflexiveForm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 72);
  *a1 = *(_QWORD *)(v1 + 64);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.reflexiveForm.modify;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 64) = v4;
    *(_QWORD *)(v3 + 72) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 64) = v4;
    *(_QWORD *)(v3 + 72) = v2;
  }
  return result;
}

uint64_t Morphology.CustomPronoun.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v36);
  __swift_project_boxed_opaque_existential_1(v36, v36[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v9 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1(v9);
  }
  else
  {
    v37 = 0;
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v12 = v11;
    v37 = 1;
    swift_bridgeObjectRetain();
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v15 = v14;
    v33 = v13;
    v34 = v10;
    v37 = 2;
    swift_bridgeObjectRetain();
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v18 = v17;
    v31 = v16;
    v32 = a2;
    v37 = 3;
    swift_bridgeObjectRetain();
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v21 = v20;
    v30 = v19;
    v37 = 4;
    swift_bridgeObjectRetain();
    v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v22;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1(v35);
    v28 = v32;
    *v32 = v34;
    v28[1] = v12;
    v28[2] = v33;
    v28[3] = v15;
    v28[4] = v31;
    v28[5] = v18;
    v28[6] = v30;
    v28[7] = v21;
    v28[8] = v26;
    v28[9] = v24;
  }
  return result;
}

uint64_t Morphology.CustomPronoun.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[10];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13[7] = v1[3];
  v13[8] = v7;
  v8 = v1[4];
  v13[5] = v1[5];
  v13[6] = v8;
  v9 = v1[6];
  v13[3] = v1[7];
  v13[4] = v9;
  v10 = v1[8];
  v13[1] = v1[9];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  v11 = v13[9];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v11)
  {
    v17 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v16 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v15 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Morphology._CustomPronoun.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void Morphology._CustomPronoun.hash(into:)()
{
  _QWORD *v0;

  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3])
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5])
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7])
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v0[9])
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v0[7])
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v0[9])
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_11:
  Hasher._combine(_:)(0);
}

uint64_t static Morphology.CustomPronoun.== infix(_:_:)(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}

Swift::Int Morphology.CustomPronoun.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[5];
  v4 = v0[7];
  v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5)
      goto LABEL_6;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Morphology.CustomPronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.CustomPronoun(_QWORD *a1)
{
  return Morphology.CustomPronoun.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CustomPronoun()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[5];
  v4 = v0[7];
  v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5)
      goto LABEL_6;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v4)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CustomPronoun(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}

Swift::Int Morphology._CustomPronoun.hashValue.getter()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3])
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5])
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7])
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v0[9])
      goto LABEL_6;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v0[7])
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v0[9])
    goto LABEL_11;
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B2FA5C + 4 * byte_1820DBB44[*v0]))(0x467463656A627573, 0xEB000000006D726FLL);
}

uint64_t sub_181B2FA5C()
{
  return 0x6F467463656A626FLL;
}

uint64_t sub_181B2FA78()
{
  return 0x6973736573736F70;
}

unint64_t sub_181B2FA9C()
{
  return 0xD000000000000017;
}

uint64_t sub_181B2FAB8()
{
  return 0x766978656C666572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology._CustomPronoun.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Morphology._CustomPronoun.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology._CustomPronoun.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  return CodingKey.debugDescription.getter();
}

__n128 protocol witness for Decodable.init(from:) in conformance Morphology._CustomPronoun@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  specialized Morphology._CustomPronoun.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology._CustomPronoun(_QWORD *a1)
{
  return Morphology._CustomPronoun.encode(to:)(a1);
}

uint64_t Morphology.Pronoun.pronoun.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Morphology.Pronoun.pronoun.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Morphology.Pronoun.pronoun.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.morphology.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;

  v2 = *(_BYTE *)(v1 + 18);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 36);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 20) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.morphology.setter(__int16 *a1)
{
  uint64_t v1;
  __int16 v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 2);
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_BYTE *)a1 + 20);
  result = swift_bridgeObjectRelease();
  *(_WORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 18) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  *(_DWORD *)(v1 + 32) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v1 + 36) = v6;
  return result;
}

uint64_t (*Morphology.Pronoun.morphology.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Morphology.Pronoun.dependentMorphology.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_DWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 60);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t Morphology.Pronoun.dependentMorphology.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_BYTE *)a1 + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 60) = v5;
  *(_DWORD *)(v1 + 56) = v4;
  return result;
}

uint64_t (*Morphology.Pronoun.dependentMorphology.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void __swiftcall Morphology.Pronoun.init(pronoun:morphology:dependentMorphology:)(Foundation::Morphology::Pronoun *__return_ptr retstr, Swift::String pronoun, Foundation::Morphology morphology, Foundation::Morphology_optional dependentMorphology)
{
  __int16 v4;
  Foundation::Morphology::GrammaticalNumber v5;
  void *v6;
  Foundation::Morphology::Definiteness v7;
  int v8;
  Foundation::Morphology::Definiteness v9;

  v4 = **(_WORD **)&morphology.grammaticalGender.value;
  v5 = *(_BYTE *)(*(_QWORD *)&morphology.grammaticalGender.value + 2);
  v6 = *(void **)(*(_QWORD *)&morphology.grammaticalGender.value + 8);
  v7 = *(_BYTE *)(*(_QWORD *)&morphology.grammaticalGender.value + 20);
  v8 = *((_DWORD *)morphology.customPronouns._rawValue + 4);
  v9 = *((_BYTE *)morphology.customPronouns._rawValue + 20);
  retstr->pronoun = pronoun;
  *(_WORD *)&retstr->morphology.grammaticalGender.value = v4;
  retstr->morphology.number.value = v5;
  retstr->morphology.customPronouns._rawValue = v6;
  *(_DWORD *)&retstr->morphology.grammaticalCase.value = *(_DWORD *)(*(_QWORD *)&morphology.grammaticalGender.value
                                                                   + 16);
  retstr->morphology.definiteness.value = v7;
  *(_OWORD *)&retstr->dependentMorphology.value.grammaticalGender.value = *(_OWORD *)morphology.customPronouns._rawValue;
  retstr->dependentMorphology.value.definiteness.value = v9;
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.value = v8;
}

uint64_t Morphology.Pronoun.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v2 + 16);
  v5 = *(unsigned __int8 *)(v2 + 17);
  v6 = *(unsigned __int8 *)(v2 + 18);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(unsigned __int8 *)(v2 + 32);
  v9 = *(unsigned __int8 *)(v2 + 33);
  v10 = *(unsigned __int8 *)(v2 + 34);
  v13 = *(unsigned __int8 *)(v2 + 35);
  v16 = *(unsigned __int8 *)(v2 + 36);
  v17 = *(_QWORD *)(v2 + 40);
  v12 = *(_QWORD *)(v2 + 48);
  v14 = *(unsigned int *)(v2 + 56);
  v15 = *(unsigned __int8 *)(v2 + 60);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v5 != 14)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if ((_DWORD)v6 != 6)
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if ((_DWORD)v5 == 14)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if ((_DWORD)v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  if ((_DWORD)v8 == 14)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v9 != 3)
      goto LABEL_10;
LABEL_13:
    Hasher._combine(_:)(0);
    if ((_DWORD)v10 != 3)
      goto LABEL_11;
    goto LABEL_14;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8 + 1);
  if ((_DWORD)v9 == 3)
    goto LABEL_13;
LABEL_10:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v9 + 1);
  if ((_DWORD)v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    goto LABEL_15;
  }
LABEL_14:
  Hasher._combine(_:)(0);
LABEL_15:
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v16 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)(a1, v17, v12, (v14 | (v15 << 32)) & 0xFFFFFFFFFFLL);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.Pronoun.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6F6C6F6870726F6DLL;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0x6E756F6E6F7270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.Pronoun.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.Pronoun.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.Pronoun.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Morphology.Pronoun.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint8x8_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int32 v30;
  char v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.Pronoun.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v1 + 16);
  v23 = *(unsigned __int8 *)(v1 + 17);
  v24 = v8;
  v22 = *(unsigned __int8 *)(v1 + 18);
  v21 = *(_QWORD *)(v1 + 24);
  v2.i32[0] = *(_DWORD *)(v1 + 32);
  v25 = *(unsigned __int8 *)(v1 + 36);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v19 = *(unsigned __int8 *)(v1 + 60);
  v20 = v9;
  v11 = *(unsigned int *)(v1 + 56);
  v17 = v10;
  v18 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v28) = 0;
  v12 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    v13 = v18;
    v14 = v19;
    LOBYTE(v28) = v24;
    BYTE1(v28) = v23;
    BYTE2(v28) = v22;
    v15 = v20;
    v29 = v21;
    v30 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    v31 = v25;
    v27 = 1;
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28 = v15;
    v29 = v17;
    v31 = (v13 | (unint64_t)(v14 << 32)) >> 32;
    v30 = v13;
    v27 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Morphology.Pronoun.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[72];

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 17);
  v3 = *(unsigned __int8 *)(v0 + 18);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 33);
  v7 = *(unsigned __int8 *)(v0 + 34);
  v10 = *(unsigned __int8 *)(v0 + 35);
  v13 = *(unsigned __int8 *)(v0 + 36);
  v14 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v12 = *(unsigned __int8 *)(v0 + 60);
  v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1);
  }
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Morphology.Pronoun.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int32 v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int32 v29;
  unsigned __int8 v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.Pronoun.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v27) = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v24 = v10;
    v26 = 1;
    v14 = lazy protocol witness table accessor for type Morphology and conformance Morphology();
    swift_bridgeObjectRetain();
    v25.i64[0] = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = BYTE1(v27);
    v21 = v27;
    v19 = BYTE2(v27);
    v3.i32[0] = v29;
    v22 = v30;
    v26 = 2;
    v23 = v28;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v25 = (int16x8_t)vmovl_u8(v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = v27;
    v15 = v28;
    v17 = v29;
    v18 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v24;
    *(_QWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v21;
    *(_BYTE *)(a2 + 17) = v20;
    *(_BYTE *)(a2 + 18) = v19;
    *(_QWORD *)(a2 + 24) = v23;
    *(_DWORD *)(a2 + 32) = vmovn_s16(v25).u32[0];
    *(_BYTE *)(a2 + 36) = v22;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v15;
    *(_BYTE *)(a2 + 60) = v18;
    *(_DWORD *)(a2 + 56) = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Pronoun()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[72];

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 17);
  v3 = *(unsigned __int8 *)(v0 + 18);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 33);
  v7 = *(unsigned __int8 *)(v0 + 34);
  v10 = *(unsigned __int8 *)(v0 + 35);
  v13 = *(unsigned __int8 *)(v0 + 36);
  v14 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v12 = *(unsigned __int8 *)(v0 + 60);
  v11 = *(unsigned int *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v15, v4);
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 + 1);
  }
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v10 & 1) + 1);
  }
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v13 & 1) + 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)((uint64_t)v15, v14, v9, (v11 | (v12 << 32)) & 0xFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Pronoun@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.Pronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Pronoun(_QWORD *a1)
{
  return Morphology.Pronoun.encode(to:)(a1);
}

BOOL Morphology.isUnspecified.getter()
{
  uint64_t v0;

  return *(_BYTE *)v0 == 3
      && *(_BYTE *)(v0 + 2) == 6
      && *(_BYTE *)(v0 + 1) == 14
      && *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) == 0;
}

void one-time initialization function for user()
{
  id v0;
  __int16 v1;
  char v2;
  uint64_t v3;
  int v4;
  char v5;

  v0 = objc_msgSend((id)objc_opt_self(), sel_userMorphology);
  static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v0, (uint64_t)&v1);

  static Morphology.user = v1;
  byte_1EDC412F2 = v2;
  qword_1EDC412F8 = v3;
  dword_1EDC41300 = v4;
  byte_1EDC41304 = v5;
}

void static Morphology._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  id v4;
  unint64_t v5;
  char v6;
  id v7;
  char v8;
  char v9;
  id v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  id v15;
  char v16;
  char v17;
  char v18;

  v3 = 6;
  if (a1)
  {
    v4 = a1;
    v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender);
    if (v5 >= 4)
      v6 = 3;
    else
      v6 = 0x2010003u >> (8 * v5);
    v7 = objc_msgSend(v4, sel_number);
    if ((unint64_t)v7 >= 7)
      v3 = 6;
    else
      v3 = 0x5040302010006uLL >> (8 * v7);
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
    v8 = v18;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
    v9 = v17;
    v10 = objc_msgSend(v4, sel_determination);
    if (v10 == (id)2)
      v11 = 1;
    else
      v11 = 2;
    if (v10 == (id)1)
      v12 = 0;
    else
      v12 = v11;
    v13 = (unint64_t)objc_msgSend(v4, sel_pronounType);
    if (v13 >= 4)
      v14 = 3;
    else
      v14 = 0x2010003u >> (8 * v13);
    v15 = objc_msgSend(v4, sel_definiteness);

    if (v15 == (id)2)
      v16 = 1;
    else
      v16 = 2;
    if (v15 == (id)1)
      v16 = 0;
  }
  else
  {
    v9 = 14;
    v16 = 2;
    v12 = 2;
    v14 = 3;
    v8 = 14;
    v6 = 3;
  }
  *(_BYTE *)a2 = v6;
  *(_BYTE *)(a2 + 1) = v8;
  *(_BYTE *)(a2 + 2) = v3;
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DEE9E0];
  *(_BYTE *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 17) = 3;
  *(_BYTE *)(a2 + 18) = v14;
  *(_BYTE *)(a2 + 19) = v12;
  *(_BYTE *)(a2 + 20) = v16;
}

uint64_t static Morphology.user.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;

  if (one-time initialization token for user != -1)
    swift_once();
  v2 = byte_1EDC412F2;
  v3 = qword_1EDC412F8;
  v4 = byte_1EDC41304;
  *(_WORD *)a1 = static Morphology.user;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = dword_1EDC41300;
  *(_BYTE *)(a1 + 20) = v4;
  return swift_bridgeObjectRetain();
}

void __swiftcall NSMorphologyCustomPronoun.init(_:)(NSMorphologyCustomPronoun *__return_ptr retstr, Foundation::Morphology::_CustomPronoun *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BYTE v10[16];
  _BYTE v11[16];
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined init with take of String?((uint64_t)a2, (uint64_t)v14);
  outlined init with take of String?((uint64_t)v14, (uint64_t)v15);
  if (v15[1])
    v4 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v4 = 0;
  v5 = v3;
  objc_msgSend(v5, sel_setSubjectForm_, v4);

  outlined init with take of String?((uint64_t)&a2->objectForm, (uint64_t)v13);
  outlined init with take of String?((uint64_t)v13, (uint64_t)v16);
  if (v16[1])
    v6 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v6 = 0;
  objc_msgSend(v5, sel_setObjectForm_, v6);

  outlined init with take of String?((uint64_t)&a2->possessiveForm, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)v17);
  if (v17[1])
    v7 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v7 = 0;
  objc_msgSend(v5, sel_setPossessiveForm_, v7);

  outlined init with take of String?((uint64_t)&a2->possessiveAdjectiveForm, (uint64_t)v11);
  outlined init with take of String?((uint64_t)v11, (uint64_t)v18);
  if (v18[1])
    v8 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v8 = 0;
  objc_msgSend(v5, sel_setPossessiveAdjectiveForm_, v8);

  outlined init with take of String?((uint64_t)&a2->reflexiveForm, (uint64_t)v10);
  outlined init with take of String?((uint64_t)v10, (uint64_t)v19);
  if (v19[1])
    v9 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v9 = 0;
  outlined release of Morphology._CustomPronoun((uint64_t)a2);
  objc_msgSend(v5, sel_setReflexiveForm_, v9);

}

Foundation::Morphology __swiftcall Morphology.init(_:)(NSMorphology_optional *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v5;
  char v6;
  id v7;
  char v8;
  char v9;
  id v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  Foundation::Morphology result;

  v2 = v1;
  v3 = 6;
  if (a1)
  {
    v5 = (unint64_t)-[NSMorphology_optional grammaticalGender](a1, sel_grammaticalGender);
    if (v5 >= 4)
      v6 = 3;
    else
      v6 = 0x2010003u >> (8 * v5);
    v7 = -[NSMorphology_optional number](a1, sel_number);
    if ((unint64_t)v7 >= 7)
      v3 = 6;
    else
      v3 = 0x5040302010006uLL >> (8 * v7);
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)-[NSMorphology_optional partOfSpeech](a1, sel_partOfSpeech));
    v8 = v20;
    Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)-[NSMorphology_optional grammaticalCase](a1, sel_grammaticalCase));
    v9 = v19;
    v10 = -[NSMorphology_optional determination](a1, sel_determination);
    if (v10 == (id)2)
      v11 = 1;
    else
      v11 = 2;
    if (v10 == (id)1)
      v12 = 0;
    else
      v12 = v11;
    v13 = (unint64_t)-[NSMorphology_optional pronounType](a1, sel_pronounType);
    if (v13 >= 4)
      v14 = 3;
    else
      v14 = 0x2010003u >> (8 * v13);
    v15 = -[NSMorphology_optional definiteness](a1, sel_definiteness);

    if (v15 == (id)2)
      v18 = 1;
    else
      v18 = 2;
    if (v15 == (id)1)
      v18 = 0;
  }
  else
  {
    v9 = 14;
    v18 = 2;
    v12 = 2;
    v14 = 3;
    v8 = 14;
    v6 = 3;
  }
  *(_BYTE *)v2 = v6;
  *(_BYTE *)(v2 + 1) = v8;
  *(_BYTE *)(v2 + 2) = v3;
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DEE9E0];
  *(_BYTE *)(v2 + 16) = v9;
  *(_BYTE *)(v2 + 17) = 3;
  *(_BYTE *)(v2 + 18) = v14;
  *(_BYTE *)(v2 + 19) = v12;
  *(_BYTE *)(v2 + 20) = v18;
  result.grammaticalCase = (Foundation::Morphology::GrammaticalCase_optional)v17;
  result.grammaticalPerson = (Foundation::Morphology::GrammaticalPerson_optional)SBYTE1(v17);
  result.pronounType = (Foundation::Morphology::PronounType_optional)SBYTE2(v17);
  result.determination = (Foundation::Morphology::Determination_optional)SBYTE3(v17);
  result.definiteness = (Foundation::Morphology::Definiteness_optional)SBYTE4(v17);
  result.customPronouns._rawValue = v16;
  result.grammaticalGender = (Foundation::Morphology::GrammaticalGender_optional)a1;
  result.partOfSpeech = (Foundation::Morphology::PartOfSpeech_optional)SBYTE1(a1);
  result.number = (Foundation::Morphology::GrammaticalNumber_optional)SBYTE2(a1);
  *(_DWORD *)result.gap3 = *(_DWORD *)((char *)&a1 + 3);
  result.gap3[4] = HIBYTE(a1);
  return result;
}

void __swiftcall NSMorphology.init(_:)(NSMorphology *__return_ptr retstr, Foundation::Morphology a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;

  v2 = **(unsigned __int8 **)&a2.grammaticalGender.value;
  v3 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 1);
  v4 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 2);
  v5 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 18);
  v7 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 19);
  v8 = *(unsigned __int8 *)(*(_QWORD *)&a2.grammaticalGender.value + 20);
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v10 = v9;
  if (v2 != 3)
  {
    objc_msgSend(v9, sel_setGrammaticalGender_, v2 + 1);
    if ((_DWORD)v4 == 6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = v9;
  if ((_DWORD)v4 != 6)
LABEL_5:
    objc_msgSend(v10, sel_setNumber_, v4 + 1);
LABEL_6:
  if ((_DWORD)v3 == 14)
  {
    if ((_DWORD)v5 == 14)
      goto LABEL_8;
  }
  else
  {
    objc_msgSend(v10, sel_setPartOfSpeech_, v3 + 1);
    if ((_DWORD)v5 == 14)
    {
LABEL_8:
      if (v7 == 2)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  objc_msgSend(v10, sel_setGrammaticalCase_, v5 + 1);
  if (v7 == 2)
  {
LABEL_9:
    if ((_DWORD)v6 == 3)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  objc_msgSend(v10, sel_setDetermination_, (v7 & 1) + 1);
  if ((_DWORD)v6 != 3)
LABEL_10:
    objc_msgSend(v10, sel_setPronounType_, v6 + 1);
LABEL_11:
  swift_bridgeObjectRelease();
  if (v8 != 2)
  {
    if ((v8 & 1) != 0)
      v12 = 2;
    else
      v12 = 1;
    objc_msgSend(v10, sel_setDefiniteness_, v12);
  }

}

void __swiftcall Morphology._bridgeToObjectiveC()(NSMorphology *__return_ptr retstr)
{
  __int16 *v1;
  __int16 v2;
  char v3;
  uint64_t v4;
  char v5;
  NSMorphology *v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  Foundation::Morphology v12;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 2);
  v4 = *((_QWORD *)v1 + 1);
  v5 = *((_BYTE *)v1 + 20);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = *((_DWORD *)v1 + 4);
  v11 = v5;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v12.grammaticalGender.value = &v7;
  NSMorphology.init(_:)(v6, v12);
}

void __swiftcall Morphology.CustomPronoun._bridgeToObjectiveC()(NSMorphologyCustomPronoun *__return_ptr retstr)
{
  Swift::String_optional *v1;
  Swift::String_optional v2;
  Swift::String_optional v3;
  NSMorphologyCustomPronoun *v4;
  Foundation::Morphology::_CustomPronoun v5;

  v2 = v1[3];
  v5.possessiveForm = v1[2];
  v5.possessiveAdjectiveForm = v2;
  v5.reflexiveForm = v1[4];
  v3 = v1[1];
  v5.subjectForm = *v1;
  v5.objectForm = v3;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v5);
  NSMorphologyCustomPronoun.init(_:)(v4, &v5);
}

void static Morphology.CustomPronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a2[8];
  v29 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  v4 = a1;
  v5 = objc_msgSend(v4, sel_subjectForm, v28, v29);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v31 = v8;
    v32 = (uint64_t)v7;

  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    v10 = v9;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v30 = 0;
    v12 = 0;
  }
  v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {

    v25 = 0;
    v27 = 0;
  }
  *a2 = v32;
  a2[1] = v31;
  a2[2] = (uint64_t)v30;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
}

uint64_t static Morphology.CustomPronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a2[8];
  v30 = a2[9];
  outlined consume of Morphology.CustomPronoun?(*a2, a2[1]);
  v4 = a1;
  v5 = objc_msgSend(v4, sel_subjectForm, v29, v30);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v32 = v8;
    v33 = (uint64_t)v7;

  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v9 = objc_msgSend(v4, sel_objectForm);
  if (v9)
  {
    v10 = v9;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v31 = 0;
    v12 = 0;
  }
  v13 = objc_msgSend(v4, sel_possessiveForm);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(v4, sel_possessiveAdjectiveForm);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(v4, sel_reflexiveForm);
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {

    v25 = 0;
    v27 = 0;
  }
  *a2 = v33;
  a2[1] = v32;
  a2[2] = (uint64_t)v31;
  a2[3] = v12;
  a2[4] = (uint64_t)v15;
  a2[5] = v17;
  a2[6] = (uint64_t)v20;
  a2[7] = v22;
  a2[8] = (uint64_t)v25;
  a2[9] = v27;
  return 1;
}

double static Morphology.CustomPronoun._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  __int128 v5;
  __int128 v6;
  double result;
  _OWORD v8[4];
  __int128 v9;

  v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.CustomPronoun()
{
  Swift::String_optional *v0;
  Swift::String_optional v1;
  Swift::String_optional v2;
  NSMorphologyCustomPronoun *v3;
  Foundation::Morphology::_CustomPronoun v4;

  v1 = v0[3];
  v4.possessiveForm = v0[2];
  v4.possessiveAdjectiveForm = v1;
  v4.reflexiveForm = v0[4];
  v2 = v0[1];
  v4.subjectForm = *v0;
  v4.objectForm = v2;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphologyCustomPronoun);
  outlined retain of Morphology._CustomPronoun((uint64_t)&v4);
  NSMorphologyCustomPronoun.init(_:)(v3, &v4);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.CustomPronoun@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  __int128 v5;
  __int128 v6;
  double result;
  _OWORD v8[4];
  __int128 v9;

  v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  v5 = v8[1];
  *a2 = v8[0];
  a2[1] = v5;
  v6 = v8[3];
  a2[2] = v8[2];
  a2[3] = v6;
  result = *(double *)&v9;
  a2[4] = v9;
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun(void *a1, uint64_t a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  double result;
  _OWORD v8[4];
  __int128 v9;

  outlined consume of Morphology.CustomPronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a2 + 64) = v9;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.CustomPronoun(void *a1, uint64_t a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];

  outlined consume of Morphology.CustomPronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v8);
  v5 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v5;
  v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v8[4];
  return 1;
}

__n128 protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology._CustomPronoun@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[5];

  v4 = a1;
  specialized Morphology._CustomPronoun.init(_:)(a1, v7);
  v5 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v7[4];
  result = (__n128)v7[1];
  *(_OWORD *)a2 = v7[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

NSMorphologyPronoun __swiftcall Morphology.Pronoun._bridgeToObjectiveC()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int16 v3;
  Foundation::Morphology::GrammaticalNumber v4;
  void *v5;
  Foundation::Morphology::Definiteness v6;
  void *v7;
  uint64_t v8;
  Foundation::Morphology::Definiteness v9;
  int v10;
  Foundation::Morphology::Pronoun v11;

  v2 = *(_QWORD *)v0;
  v1 = *(void **)(v0 + 8);
  v3 = *(_WORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 18);
  v5 = *(void **)(v0 + 24);
  v6 = *(_BYTE *)(v0 + 36);
  v8 = *(_QWORD *)(v0 + 40);
  v7 = *(void **)(v0 + 48);
  v10 = *(_DWORD *)(v0 + 56);
  v9 = *(_BYTE *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v11.pronoun._countAndFlagsBits = v2;
  v11.pronoun._object = v1;
  *(_WORD *)&v11.morphology.grammaticalGender.value = v3;
  v11.morphology.number.value = v4;
  v11.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v11.morphology.grammaticalCase.value = *(_DWORD *)(v0 + 32);
  v11.morphology.definiteness.value = v6;
  *(_QWORD *)&v11.dependentMorphology.value.grammaticalGender.value = v8;
  v11.dependentMorphology.value.customPronouns._rawValue = v7;
  v11.dependentMorphology.value.definiteness.value = v9;
  *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NSMorphologyPronoun.init(_:)(&v11);
}

double static Morphology.Pronoun._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *object;
  void *rawValue;
  int v6;
  Foundation::Morphology::Definiteness value;
  unint64_t v8;
  unint64_t v9;
  double result;
  Foundation::Morphology::Pronoun v11;
  NSMorphologyPronoun v12;

  outlined consume of Morphology.Pronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  value = v11.dependentMorphology.value.definiteness.value;
  v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(_QWORD *)a2 = v11.pronoun._countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = rawValue;
  *(_QWORD *)(a2 + 32) = v9;
  result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t static Morphology.Pronoun._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *object;
  void *rawValue;
  int v6;
  Foundation::Morphology::Definiteness value;
  unint64_t v8;
  unint64_t v9;
  Foundation::Morphology::Pronoun v11;
  NSMorphologyPronoun v12;

  outlined consume of Morphology.Pronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  value = v11.dependentMorphology.value.definiteness.value;
  v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(_QWORD *)a2 = v11.pronoun._countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = rawValue;
  *(_QWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1;
}

void static Morphology.Pronoun._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  NSMorphologyPronoun v3;

  if (a1)
  {
    v3.super.isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }
  else
  {
    __break(1u);
  }
}

unint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology.Pronoun()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int16 v3;
  Foundation::Morphology::GrammaticalNumber v4;
  void *v5;
  Foundation::Morphology::Definiteness v6;
  void *v7;
  uint64_t v8;
  Foundation::Morphology::Definiteness v9;
  int v11;
  Foundation::Morphology::Pronoun v12;

  v2 = *(_QWORD *)v0;
  v1 = *(void **)(v0 + 8);
  v3 = *(_WORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 18);
  v5 = *(void **)(v0 + 24);
  v6 = *(_BYTE *)(v0 + 36);
  v8 = *(_QWORD *)(v0 + 40);
  v7 = *(void **)(v0 + 48);
  v11 = *(_DWORD *)(v0 + 56);
  v9 = *(_BYTE *)(v0 + 60);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  v12.pronoun._countAndFlagsBits = v2;
  v12.pronoun._object = v1;
  *(_WORD *)&v12.morphology.grammaticalGender.value = v3;
  v12.morphology.number.value = v4;
  v12.morphology.customPronouns._rawValue = v5;
  *(_DWORD *)&v12.morphology.grammaticalCase.value = *(_DWORD *)(v0 + 32);
  v12.morphology.definiteness.value = v6;
  *(_QWORD *)&v12.dependentMorphology.value.grammaticalGender.value = v8;
  v12.dependentMorphology.value.customPronouns._rawValue = v7;
  v12.dependentMorphology.value.definiteness.value = v9;
  *(_DWORD *)&v12.dependentMorphology.value.grammaticalCase.value = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (unint64_t)NSMorphologyPronoun.init(_:)(&v12);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun(void *a1, uint64_t a2)
{
  void *object;
  void *rawValue;
  int v6;
  Foundation::Morphology::Definiteness value;
  unint64_t v8;
  unint64_t v9;
  double result;
  Foundation::Morphology::Pronoun v11;
  NSMorphologyPronoun v12;

  outlined consume of Morphology.Pronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  value = v11.dependentMorphology.value.definiteness.value;
  v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(_QWORD *)a2 = v11.pronoun._countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = rawValue;
  *(_QWORD *)(a2 + 32) = v9;
  result = *(double *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Morphology.Pronoun(void *a1, uint64_t a2)
{
  void *object;
  void *rawValue;
  int v6;
  Foundation::Morphology::Definiteness value;
  unint64_t v8;
  unint64_t v9;
  Foundation::Morphology::Pronoun v11;
  NSMorphologyPronoun v12;

  outlined consume of Morphology.Pronoun?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v12.super.isa = (Class)a1;
  Morphology.Pronoun.init(_:)(&v11, v12);
  object = v11.pronoun._object;
  rawValue = v11.morphology.customPronouns._rawValue;
  v6 = *(_DWORD *)&v11.dependentMorphology.value.grammaticalCase.value;
  value = v11.dependentMorphology.value.definiteness.value;
  v8 = *(unsigned __int16 *)&v11.morphology.grammaticalGender.value | ((unint64_t)v11.morphology.number.value << 16);
  v9 = *(unsigned int *)&v11.morphology.grammaticalCase.value | ((unint64_t)v11.morphology.definiteness.value << 32);
  *(_QWORD *)a2 = v11.pronoun._countAndFlagsBits;
  *(_QWORD *)(a2 + 8) = object;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = rawValue;
  *(_QWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v11.dependentMorphology.value.grammaticalGender.value;
  *(_BYTE *)(a2 + 60) = value;
  *(_DWORD *)(a2 + 56) = v6;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Morphology.Pronoun(void *a1@<X0>, Foundation::Morphology::Pronoun *a2@<X8>)
{
  NSMorphologyPronoun v3;

  if (a1)
  {
    v3.super.isa = (Class)a1;
    Morphology.Pronoun.init(_:)(a2, v3);
  }
  else
  {
    __break(1u);
  }
}

NSInflectionRule __swiftcall InflectionRule._bridgeToObjectiveC()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  uint64x2_t v8;
  int16x8_t v9;
  NSMorphology *v10;
  void *v11;
  void *v12;
  id v13;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  unsigned __int32 v18;
  Foundation::Morphology v19;

  v1 = v0[1];
  if (!v1)
    return (NSInflectionRule)objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  v2 = *((unsigned int *)v0 + 4);
  v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
  v4 = *v0;
  v5 = (unint64_t)*v0 >> 8;
  v6 = (unint64_t)*v0 >> 16;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  v15[0] = v4;
  v15[1] = v5;
  v15[2] = v6;
  v16 = v1;
  v17 = v2;
  v7.i64[0] = 0xFFFFFFFFFFLL;
  v7.i64[1] = 0xFFFFFFFFFFLL;
  v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
  v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_182064D90);
  *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_182064D80));
  *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = v8.i16[0];
  v9.i16[3] = v8.i16[2];
  v18 = vmovn_s16(v9).u32[0];
  swift_bridgeObjectRetain();
  *(_QWORD *)&v19.grammaticalGender.value = v15;
  NSMorphology.init(_:)(v10, v19);
  v12 = v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

  return (NSInflectionRule)v13;
}

void static InflectionRule._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  unsigned __int16 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;

  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_automaticRule);
  v7 = v6;
  if (!a1)
  {

    goto LABEL_8;
  }
  if (v6)
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    v8 = v5;
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

LABEL_8:
      v15 = 0;
      v14 = 0;
      v16 = 0;
      goto LABEL_9;
    }
  }
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = v5;
    v13 = objc_msgSend(v11, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v13, (uint64_t)&v18);

    v14 = v20;
    v15 = v18 | ((unint64_t)v19 << 16);
    v16 = v21 | ((unint64_t)v22 << 32);
LABEL_9:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 20) = BYTE4(v16);
    return;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance InflectionRule()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  uint64x2_t v8;
  int16x8_t v9;
  NSMorphology *v10;
  void *v11;
  void *v12;
  id v13;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  unsigned __int32 v18;
  Foundation::Morphology v19;

  v1 = v0[1];
  if (!v1)
    return objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  v2 = *((unsigned int *)v0 + 4);
  v3 = v2 | ((unint64_t)*((unsigned __int8 *)v0 + 20) << 32);
  v4 = *v0;
  v5 = (unint64_t)*v0 >> 8;
  v6 = (unint64_t)*v0 >> 16;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  v15[0] = v4;
  v15[1] = v5;
  v15[2] = v6;
  v16 = v1;
  v17 = v2;
  v7.i64[0] = 0xFFFFFFFFFFLL;
  v7.i64[1] = 0xFFFFFFFFFFLL;
  v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v3), v7);
  v9 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_182064D90);
  *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_182064D80));
  *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
  v9.i16[1] = v9.i16[2];
  v9.i16[2] = v8.i16[0];
  v9.i16[3] = v8.i16[2];
  v18 = vmovn_s16(v9).u32[0];
  swift_bridgeObjectRetain();
  *(_QWORD *)&v19.grammaticalGender.value = v15;
  NSMorphology.init(_:)(v10, v19);
  v12 = v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSInflectionRuleExplicit), sel_initWithMorphology_, v11);

  return v13;
}

unint64_t static Morphology._forceBridgeFromObjectiveC(_:result:)(NSMorphology_optional *a1, uint64_t a2)
{
  NSMorphology_optional *v4;
  unint64_t result;
  unsigned __int16 v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  char v10;

  swift_bridgeObjectRelease();
  v4 = a1;
  result = (unint64_t)Morphology.init(_:)(a1);
  *(_QWORD *)a2 = v6 | ((unint64_t)v7 << 16);
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Morphology()
{
  __int16 *v0;
  __int16 v1;
  char v2;
  uint64_t v3;
  char v4;
  NSMorphology *v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  Foundation::Morphology v11;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_BYTE *)v0 + 20);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  v6 = v1;
  v7 = v2;
  v8 = v3;
  v9 = *((_DWORD *)v0 + 4);
  v10 = v4;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v11.grammaticalGender.value = &v6;
  NSMorphology.init(_:)(v5, v11);
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Morphology(NSMorphology_optional *a1, uint64_t a2)
{
  NSMorphology_optional *v4;
  unint64_t result;
  unsigned __int16 v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  char v10;

  swift_bridgeObjectRelease();
  v4 = a1;
  result = (unint64_t)Morphology.init(_:)(a1);
  *(_QWORD *)a2 = v6 | ((unint64_t)v7 << 16);
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t specialized static Morphology._CustomPronoun.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1[1];
  v5 = a2[1];
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    v9 = a1[3];
    v10 = a2[3];
    if (v9)
    {
      if (!v10)
        return 0;
      if (a1[2] != a2[2] || v9 != v10)
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v11 & 1) == 0)
          return result;
      }
    }
    else if (v10)
    {
      return 0;
    }
    v12 = a1[5];
    v13 = a2[5];
    if (v12)
    {
      if (!v13)
        return 0;
      if (a1[4] != a2[4] || v12 != v13)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    v15 = a1[7];
    v16 = a2[7];
    if (v15)
    {
      if (!v16)
        return 0;
      if (a1[6] != a2[6] || v15 != v16)
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
    }
    else if (v16)
    {
      return 0;
    }
    v18 = a1[9];
    v19 = a2[9];
    if (v18)
    {
      if (v19 && (a1[8] == a2[8] && v18 == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        return 1;
    }
    else if (!v19)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Morphology.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = a1[16];
  v8 = a1[17];
  v9 = a1[18];
  v10 = a1[19];
  v11 = a1[20];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = *((_QWORD *)a2 + 1);
  v16 = a2[16];
  v17 = a2[17];
  v18 = a2[18];
  v19 = a2[19];
  v20 = a2[20];
  if (v3 == 3)
  {
    if (v12 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v12 == 3 || v3 != v12)
      return result;
  }
  if (v4 == 14)
  {
    if (v13 != 14)
      return 0;
  }
  else
  {
    result = 0;
    if (v13 == 14 || v4 != v13)
      return result;
  }
  if (v5 == 6)
  {
    if (v14 != 6)
      return 0;
  }
  else
  {
    result = 0;
    if (v14 == 6 || v5 != v14)
      return result;
  }
  if ((specialized static Dictionary<>.== infix(_:_:)(v6, v15) & 1) == 0)
    return 0;
  if (v7 == 14)
  {
    if (v16 != 14)
      return 0;
  }
  else
  {
    result = 0;
    if (v16 == 14 || v7 != v16)
      return result;
  }
  if (v8 == 3)
  {
    if (v17 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v17 == 3 || v8 != v17)
      return result;
  }
  if (v9 == 3)
  {
    if (v18 != 3)
      return 0;
LABEL_32:
    if (v10 == 2)
    {
      if (v19 != 2)
        return 0;
    }
    else if (v19 == 2 || ((v19 ^ v10) & 1) != 0)
    {
      return 0;
    }
    if (v11 == 2)
    {
      if (v20 != 2)
        return 0;
    }
    else if (v20 == 2 || ((v20 ^ v11) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  result = 0;
  if (v18 != 3 && v9 == v18)
    goto LABEL_32;
  return result;
}

BOOL specialized static Morphology.Pronoun.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2;
  uint8x8_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  _BOOL8 result;
  int8x16_t v16;
  uint64x2_t v17;
  int16x8_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  _BYTE v31[5];
  uint64_t v32;
  uint64_t v33;
  unsigned __int32 v34;
  char v35;

  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 17);
  v6 = *(_BYTE *)(a1 + 18);
  v7 = *(_QWORD *)(a1 + 24);
  v2.i32[0] = *(_DWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 36);
  v27 = *(_QWORD *)(a1 + 48);
  v24 = *(unsigned __int8 *)(a1 + 60);
  v25 = *(_QWORD *)(a1 + 40);
  v23 = *(unsigned int *)(a1 + 56);
  v9 = *(_BYTE *)(a2 + 16);
  v10 = *(_BYTE *)(a2 + 17);
  v11 = *(_BYTE *)(a2 + 18);
  v12 = *(_QWORD *)(a2 + 24);
  v3.i32[0] = *(_DWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 36);
  v26 = *(_QWORD *)(a2 + 48);
  v21 = *(unsigned __int8 *)(a2 + 60);
  v22 = *(_QWORD *)(a2 + 40);
  v20 = *(unsigned int *)(a2 + 56);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    LOBYTE(v32) = v4;
    BYTE1(v32) = v5;
    BYTE2(v32) = v6;
    v33 = v7;
    v34 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    v35 = v8;
    LOBYTE(v28) = v9;
    HIBYTE(v28) = v10;
    v29 = v11;
    v30 = v12;
    *(_DWORD *)v31 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    v31[4] = v13;
    if ((specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28) & 1) != 0)
    {
      if (v27)
      {
        v32 = v25;
        v33 = v27;
        v34 = v23;
        v35 = (v23 | (unint64_t)(v24 << 32)) >> 32;
        if (v26)
        {
          v16.i64[0] = 0xFFFFFFFFFFLL;
          v16.i64[1] = 0xFFFFFFFFFFLL;
          v17 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v20 | (unint64_t)(v21 << 32)), v16);
          v18 = (int16x8_t)vshlq_u64(v17, (uint64x2_t)xmmword_182064D90);
          v28 = v22;
          v29 = BYTE2(v22);
          v30 = v26;
          v31[0] = v20;
          *(int32x2_t *)v17.i8 = vmovn_s64((int64x2_t)vshlq_u64(v17, (uint64x2_t)xmmword_182064D80));
          *(int32x2_t *)v18.i8 = vmovn_s64((int64x2_t)v18);
          v18.i16[1] = v18.i16[2];
          v18.i16[2] = v17.i16[0];
          v18.i16[3] = v17.i16[2];
          *(_DWORD *)&v31[1] = vmovn_s16(v18).u32[0];
          swift_bridgeObjectRetain_n();
          v19 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v32, (unsigned __int8 *)&v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v19 & 1) != 0;
        }
        swift_bridgeObjectRetain();
      }
      else if (!v26)
      {
        return 1;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return result;
}

uint64_t specialized static InflectionRule.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = a1[1];
  v3 = a2[1];
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v3)
    return 0;
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 20);
  v6 = *((unsigned int *)a2 + 4);
  v7 = *((unsigned __int8 *)a1 + 20);
  v8 = *((unsigned int *)a1 + 4);
  v9 = *a1;
  v10 = *a2;
  if (*a1 == 3)
  {
    if (v10 != 3)
      return 0;
  }
  else if (v10 == 3 || v9 != v4)
  {
    return 0;
  }
  v12 = *a2 & 0xFF00;
  if ((*a1 & 0xFF00) == 0xE00)
  {
    if (v12 != 3584)
      return 0;
  }
  else if (v12 == 3584 || (((unsigned __int16)v9 ^ (unsigned __int16)v4) & 0xFF00) != 0)
  {
    return 0;
  }
  v13 = v4 & 0xFF0000;
  if ((v9 & 0xFF0000) == 0x60000)
  {
    if (v13 != 393216)
      return 0;
  }
  else if (v13 == 393216 || ((v9 ^ v4) & 0xFF0000) != 0)
  {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if ((specialized static Dictionary<>.== infix(_:_:)(v2, v3) & 1) == 0)
    goto LABEL_44;
  v14 = v8 | (v7 << 32);
  if (v8 == 14)
  {
    if (v6 != 14)
      goto LABEL_44;
  }
  else if (v6 == 14 || v8 != v6)
  {
    goto LABEL_44;
  }
  if (BYTE1(v8) == 3)
  {
    if (BYTE1(v6) != 3)
      goto LABEL_44;
  }
  else if (BYTE1(v6) == 3 || BYTE1(v8) != BYTE1(v6))
  {
    goto LABEL_44;
  }
  if (BYTE2(v8) == 3)
  {
    if (BYTE2(v6) != 3)
      goto LABEL_44;
  }
  else if (BYTE2(v6) == 3 || BYTE2(v8) != BYTE2(v6))
  {
    goto LABEL_44;
  }
  v15 = v6 & 0xFF000000;
  if ((v8 & 0xFF000000) == 0x2000000)
  {
    if (v15 == 0x2000000)
      goto LABEL_41;
LABEL_44:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return 0;
  }
  if (v15 == 0x2000000 || ((v8 ^ v6) & 0x1000000) != 0)
    goto LABEL_44;
LABEL_41:
  v16 = v6 | (v5 << 32);
  if (HIDWORD(v14) == 2)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) != 2)
      return 0;
  }
  else
  {
    v17 = v14;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (BYTE4(v16) == 2 || ((v17 ^ v16) & 0x100000000) != 0)
      return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.CodingKeys, &type metadata for Morphology.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.CodingKeys, &type metadata for Morphology.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.CodingKeys, &type metadata for Morphology.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.CodingKeys, &type metadata for Morphology.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CodingKeys and conformance Morphology.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalCase, &type metadata for Morphology.GrammaticalCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalCase, &type metadata for Morphology.GrammaticalCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalCase, &type metadata for Morphology.GrammaticalCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PartOfSpeech, &type metadata for Morphology.PartOfSpeech);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PartOfSpeech, &type metadata for Morphology.PartOfSpeech);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech;
  if (!lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PartOfSpeech, &type metadata for Morphology.PartOfSpeech);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalNumber, &type metadata for Morphology.GrammaticalNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalNumber, &type metadata for Morphology.GrammaticalNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalNumber, &type metadata for Morphology.GrammaticalNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun, &type metadata for Morphology._CustomPronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun, &type metadata for Morphology._CustomPronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun, &type metadata for Morphology._CustomPronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalPerson, &type metadata for Morphology.GrammaticalPerson);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalPerson, &type metadata for Morphology.GrammaticalPerson);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalPerson, &type metadata for Morphology.GrammaticalPerson);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PronounType, &type metadata for Morphology.PronounType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PronounType, &type metadata for Morphology.PronounType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType;
  if (!lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.PronounType, &type metadata for Morphology.PronounType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.PronounType and conformance Morphology.PronounType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Determination, &type metadata for Morphology.Determination);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Determination, &type metadata for Morphology.Determination);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination;
  if (!lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Determination, &type metadata for Morphology.Determination);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Determination and conformance Morphology.Determination);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Definiteness, &type metadata for Morphology.Definiteness);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Definiteness, &type metadata for Morphology.Definiteness);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness;
  if (!lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Definiteness, &type metadata for Morphology.Definiteness);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Definiteness and conformance Morphology.Definiteness);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology and conformance Morphology()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology and conformance Morphology;
  if (!lazy protocol witness table cache variable for type Morphology and conformance Morphology)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology, &type metadata for Morphology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology and conformance Morphology);
  }
  return result;
}

uint64_t outlined copy of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_181B33194()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Morphology.setCustomPronoun(_:forLanguage:)(a1, a2, v3 + 16, a3);
}

unint64_t lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys, &unk_1E0F15F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys, &unk_1E0F15F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys, &unk_1E0F15F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology._CustomPronoun.CodingKeys, &unk_1E0F15F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_1E0F162B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_1E0F162B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_1E0F162B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun.CodingKeys, &unk_1E0F162B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun.CodingKeys and conformance Morphology.Pronoun.CodingKeys);
  }
  return result;
}

uint64_t specialized Morphology._CustomPronoun.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v39 = 0;
    v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11 = v10;
    v38 = 1;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v14 = v13;
    v32 = v12;
    v33 = v9;
    v37 = 2;
    swift_bridgeObjectRetain();
    v34 = v14;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17 = v16;
    v30 = v15;
    v31 = a2;
    v36 = 3;
    swift_bridgeObjectRetain();
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v20 = v19;
    v29 = v18;
    v35 = 4;
    swift_bridgeObjectRetain();
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v23 = v22;
    v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25 = v21;
    v24(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v34;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v28 = v31;
    *v31 = v33;
    v28[1] = v11;
    v28[2] = v32;
    v28[3] = v26;
    v28[4] = v30;
    v28[5] = v17;
    v28[6] = v29;
    v28[7] = v20;
    v28[8] = v25;
    v28[9] = v23;
  }
  return result;
}

uint64_t specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x467463656A627573 && a2 == 0xEB000000006D726FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6973736573736F70 && a2 == 0xEE006D726F466576
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000017 && a2 == 0x8000000182308070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x766978656C666572 && a2 == 0xED00006D726F4665
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return swift_getKeyPath();
  }
  else
  {
    return 0;
  }
}

unint64_t specialized Morphology.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Morphology.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t specialized Morphology._CustomPronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x467463656A627573 && a2 == 0xEB000000006D726FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F467463656A626FLL && a2 == 0xEA00000000006D72
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973736573736F70 && a2 == 0xEE006D726F466576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000182308070
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x766978656C666572 && a2 == 0xED00006D726F4665)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized Morphology.Pronoun.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E756F6E6F7270 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6C6F6870726F6DLL && a2 == 0xEA00000000007967
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000182308090)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void specialized Morphology._CustomPronoun.init(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_subjectForm);
    if (v4)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v31 = v7;
      v32 = v6;

    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v18 = objc_msgSend(v3, sel_objectForm);
    if (v18)
    {
      v19 = v18;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v15 = v20;

    }
    else
    {
      v30 = 0;
      v15 = 0;
    }
    v21 = objc_msgSend(v3, sel_possessiveForm);
    if (v21)
    {
      v22 = v21;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v13 = v23;

    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v24 = objc_msgSend(v3, sel_possessiveAdjectiveForm);
    if (v24)
    {
      v25 = v24;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v11 = v26;

    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v27 = objc_msgSend(v3, sel_reflexiveForm);
    if (v27)
    {
      v28 = v27;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v9 = v29;

    }
    else
    {

      v8 = 0;
      v9 = 0;
    }
    v17 = v31;
    v16 = v32;
    v14 = v30;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v8;
  a2[9] = v9;
}

uint64_t outlined consume of Morphology.Pronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized static InflectionRule._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  Swift::String v17;
  unsigned __int16 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;

  outlined consume of AttributedString.AttributeRunBoundaries?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    v8 = v5;
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

      v10 = 0;
      v11 = 0;
      v12 = 0;
LABEL_6:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 20) = BYTE4(v12);
      return;
    }
  }
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    v14 = (void *)v13;
    v15 = v5;
    v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v18);

    v11 = v20;
    v10 = v18 | ((unint64_t)v19 << 16);
    v12 = v21 | ((unint64_t)v22 << 32);
    goto LABEL_6;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static InflectionRule._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t result;
  Swift::String v18;
  unsigned __int16 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;

  outlined consume of AttributedString.AttributeRunBoundaries?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_automaticRule);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
    v8 = v5;
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

      v10 = 0;
      v11 = 0;
      v12 = 0;
LABEL_6:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 20) = BYTE4(v12);
      return 1;
    }
  }
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    v14 = (void *)v13;
    v15 = v5;
    v16 = objc_msgSend(v14, sel_morphology);
    static Morphology._unconditionallyBridgeFromObjectiveC(_:)(v16, (uint64_t)&v19);

    v11 = v21;
    v10 = v19 | ((unint64_t)v20 << 16);
    v12 = v22 | ((unint64_t)v23 << 32);
    goto LABEL_6;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInflectionRule?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  int v10;
  id v11;
  char v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;

  swift_bridgeObjectRelease();
  v4 = a1;
  v5 = (unint64_t)objc_msgSend(v4, sel_grammaticalGender) - 1;
  if (v5 >= 3)
    v5 = 3;
  v6 = (char *)objc_msgSend(v4, sel_number, v5);
  if ((unint64_t)(v6 - 1) >= 6)
    v7 = 393216;
  else
    v7 = (_QWORD)(v6 - 1) << 16;
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_partOfSpeech));
  Morphology.PartOfSpeech.init(rawValue:)((Swift::Int)objc_msgSend(v4, sel_grammaticalCase));
  v8 = objc_msgSend(v4, sel_determination);
  v9 = (unint64_t)objc_msgSend(v4, sel_pronounType);
  if (v8 == (id)2)
    v10 = 0x1000000;
  else
    v10 = 0x2000000;
  v11 = objc_msgSend(v4, sel_definiteness);

  v12 = 2;
  if (v11 == (id)2)
    v12 = 1;
  v13 = ((0x2010003u >> (8 * v9)) & 3) << 16;
  if (v9 >= 4)
    v13 = 196608;
  if (v8 == (id)1)
    v14 = 0;
  else
    v14 = v10;
  v15 = v19 | v14 | v13;
  v16 = MEMORY[0x1E0DEE9E0];
  if (v11 == (id)1)
    v12 = 0;
  *(_QWORD *)a2 = v18 | ((unint64_t)v20 << 8) | v7;
  *(_QWORD *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 16) = v15 | 0x300;
  return 1;
}

unint64_t lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionRule, &type metadata for InflectionRule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule;
  if (!lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionRule, &type metadata for InflectionRule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionRule and conformance InflectionRule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun;
  if (!lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.CustomPronoun, &type metadata for Morphology.CustomPronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.CustomPronoun and conformance Morphology.CustomPronoun);
  }
  return result;
}

uint64_t sub_181B34714@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181B34720(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_181B34760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181B3476C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_181B347AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181B347B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_181B347F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181B34804(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  return result;
}

uint64_t sub_181B34844@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181B34850(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 64) = v4;
  *(_QWORD *)(a2 + 72) = v3;
  return result;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Morphology(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology()
{
  return &type metadata for Morphology;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalGender()
{
  return &type metadata for Morphology.GrammaticalGender;
}

ValueMetadata *type metadata accessor for Morphology.PartOfSpeech()
{
  return &type metadata for Morphology.PartOfSpeech;
}

uint64_t storeEnumTagSinglePayload for Morphology.GrammaticalNumber(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181B349C4 + 4 * byte_1820DBB4E[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181B349F8 + 4 * byte_1820DBB49[v4]))();
}

uint64_t sub_181B349F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B34A08);
  return result;
}

uint64_t sub_181B34A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B34A1CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181B34A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalNumber()
{
  return &type metadata for Morphology.GrammaticalNumber;
}

uint64_t getEnumTagSinglePayload for Morphology.PartOfSpeech(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.PartOfSpeech(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_181B34B20 + 4 * byte_1820DBB58[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_181B34B54 + 4 * byte_1820DBB53[v4]))();
}

uint64_t sub_181B34B54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34B5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B34B64);
  return result;
}

uint64_t sub_181B34B70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B34B78);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_181B34B7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34B84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalCase()
{
  return &type metadata for Morphology.GrammaticalCase;
}

ValueMetadata *type metadata accessor for Morphology.GrammaticalPerson()
{
  return &type metadata for Morphology.GrammaticalPerson;
}

ValueMetadata *type metadata accessor for Morphology.PronounType()
{
  return &type metadata for Morphology.PronounType;
}

ValueMetadata *type metadata accessor for Morphology.Determination()
{
  return &type metadata for Morphology.Determination;
}

uint64_t storeEnumTagSinglePayload for Morphology.Determination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B34C20 + 4 * byte_1820DBB62[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B34C54 + 4 * byte_1820DBB5D[v4]))();
}

uint64_t sub_181B34C54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34C5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B34C64);
  return result;
}

uint64_t sub_181B34C70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B34C78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B34C7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B34C84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.Definiteness()
{
  return &type metadata for Morphology.Definiteness;
}

uint64_t initializeBufferWithCopyOfBuffer for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for Morphology(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for InflectionRule(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InflectionRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for InflectionRule(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InflectionRule()
{
  return &type metadata for InflectionRule;
}

ValueMetadata *type metadata accessor for Morphology.CustomPronoun()
{
  return &type metadata for Morphology.CustomPronoun;
}

uint64_t destroy for Morphology.Pronoun()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Morphology.Pronoun(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.Pronoun(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 61))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.Pronoun(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 61) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 61) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology.Pronoun()
{
  return &type metadata for Morphology.Pronoun;
}

uint64_t storeEnumTagSinglePayload for Morphology.GrammaticalGender(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181B35234 + 4 * byte_1820DBB6C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181B35268 + 4 * byte_1820DBB67[v4]))();
}

uint64_t sub_181B35268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B35270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B35278);
  return result;
}

uint64_t sub_181B35284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B3528CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181B35290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B35298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Morphology.Pronoun.CodingKeys()
{
  return &unk_1E0F162B0;
}

uint64_t storeEnumTagSinglePayload for Morphology._CustomPronoun.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181B35300 + 4 * byte_1820DBB76[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181B35334 + 4 * byte_1820DBB71[v4]))();
}

uint64_t sub_181B35334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B3533C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B35344);
  return result;
}

uint64_t sub_181B35350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B35358);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181B3535C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B35364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Morphology._CustomPronoun.CodingKeys()
{
  return &unk_1E0F15F50;
}

uint64_t destroy for Morphology.CustomPronoun()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Morphology.CustomPronoun(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Morphology.CustomPronoun(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Morphology.CustomPronoun(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Morphology.CustomPronoun(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Morphology.CustomPronoun(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Morphology._CustomPronoun()
{
  return &type metadata for Morphology._CustomPronoun;
}

uint64_t storeEnumTagSinglePayload for Morphology.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_181B3569C + 4 * byte_1820DBB80[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_181B356D0 + 4 * byte_1820DBB7B[v4]))();
}

uint64_t sub_181B356D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B356D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B356E0);
  return result;
}

uint64_t sub_181B356EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B356F4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_181B356F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B35700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Morphology.CodingKeys()
{
  return &type metadata for Morphology.CodingKeys;
}

uint64_t outlined consume of Morphology.CustomPronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Morphology._CustomPronoun(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Morphology._CustomPronoun(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _TimeZoneGMTICU.localizedName(for:locale:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = a1;
  v5 = *a2;
  v4 = a2[1];
  v6 = a1 < 6;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain();
  v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8);
  swift_bridgeObjectRelease();
  v10 = v9[2];
  if (v5)
  {
    ObjectType = swift_getObjectType();
    v12 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
    swift_unknownObjectRetain();
    v12(ObjectType, v4);
    swift_unknownObjectRelease();
    if (!(v10 >> 31))
      goto LABEL_3;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 >> 31)
    goto LABEL_12;
LABEL_3:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v13 = udat_open();
  swift_release();
  v14 = 0;
  if (v13)
  {
    v15 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062, 0xE400000000000000);
    if ((v6 & v3) != 0)
      v16 = 1;
    else
      v16 = v15[2];
    if (v16 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v16 <= 0x7FFFFFFF)
      {
        udat_applyPattern();
        v14 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
        swift_release();
        udat_close();
        goto LABEL_10;
      }
LABEL_14:
      __break(1u);
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_10:
  swift_release();
  return v14;
}

uint64_t _TimeZoneGMTICU.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneGMTICU()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneGMTICU()
{
  uint64_t v0;

  return specialized static _TimeZoneGMT.abbreviation(for:)(*(_QWORD *)(v0 + 16));
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneGMTICU()
{
  return 0.0;
}

void protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneGMTICU(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t @objc static NSCalendar._resetCurrent()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static CalendarCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

uint64_t _NSSwiftCalendar.debugDescription.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  objc_super v13;
  __int128 v14;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  v14 = *(_OWORD *)(v2 + 16);
  v3 = Calendar.description.getter();
  v5 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  v6 = objc_msgSendSuper2(&v13, sel_debugDescription);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)&v14 = v7;
  *((_QWORD *)&v14 + 1) = v9;
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v3;
  v11._object = v5;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

void @objc _NSSwiftCalendar.firstWeekday.setter(char *a1, uint64_t a2, uint64_t a3, void (*a4)(os_unfair_lock_s *))
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  char *v8;

  v5 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____NSSwiftCalendar__lock];
  v6 = v5 + 4;
  v7 = v5 + 8;
  v8 = a1;
  os_unfair_lock_lock(v7);
  a4(v6);
  os_unfair_lock_unlock(v7);

}

__C::_NSRange __swiftcall _NSSwiftCalendar.minimumRange(of:)(NSCalendarUnit of)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  __C::_NSRange result;
  char v13;
  char v14;

  _fromNSCalendarUnit(_:)(of, &v14);
  v2 = v14;
  if (v14 != 18)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
    v4 = *(_QWORD *)(v3 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
    ObjectType = swift_getObjectType();
    v13 = v2;
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 128))(&v13, ObjectType, v4);
    v8 = v7;
    LOBYTE(v4) = v9;
    swift_unknownObjectRelease();
    if ((v4 & 1) == 0)
    {
      v10 = v8 - v6;
      if (!__OFSUB__(v8, v6))
        goto LABEL_7;
      __break(1u);
    }
  }
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  v11 = v6;
  result.length = v10;
  result.location = v11;
  return result;
}

uint64_t _NSSwiftCalendar._components(in:from:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = v3;
  v7 = *a2;
  v8 = *(_QWORD *)&v4[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  v18 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  v20 = *a1;
  v21 = v18;
  v19 = v7;
  Calendar.dateComponents(in:from:)(&v20, (double *)&v19, a3);
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + OBJC_IVAR____NSSwiftCalendar__lock);
    v11 = (os_unfair_lock_s *)(v10 + 32);
    v12 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);

  }
  else
  {
    type metadata accessor for _CalendarBridged();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v4;
    v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    v15 = v4;
  }
  swift_unknownObjectRelease();
  *a3 = v13;
  a3[1] = v14;
  result = a3[2];
  if (result)
  {
    v17 = a3[3];
    *(_QWORD *)&v21 = a3[2];
    *((_QWORD *)&v21 + 1) = v17;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v21);
  }
  return result;
}

uint64_t _NSSwiftCalendar.nextWeekendStart(_:interval:options:after:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  id v12;
  Foundation::Date startingAfter[2];
  uint64_t v15;
  __int128 v16;
  double v17;
  uint64_t v18;
  unsigned __int8 v19;

  v7 = *a4;
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  *(_OWORD *)&startingAfter[0]._time = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  v16 = *(_OWORD *)&startingAfter[0]._time;
  v15 = v7;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  v9 = v19;
  if ((v19 & 1) == 0)
  {
    v10 = v18;
    if (a1)
    {
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v17);
      v12 = v11;
      *a1 = v11;
    }
    if (a2)
      *a2 = v10;
  }
  return v9 ^ 1u;
}

Swift::Int _NSSwiftCalendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::Int result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  char v25;
  uint64_t ObjectType;
  void (*v27)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  __int128 v33[18];
  double v34[36];
  _OWORD __src[18];
  _OWORD v36[18];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  _OWORD __dst[19];

  v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v7 = static _SetStorage.allocate(capacity:)();
  v8 = 0;
  v9 = v7 + 56;
  do
  {
    v13 = outlined read-only object #0 of _NSSwiftCalendar.date(_:matchesComponents:)[v8 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v13);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
    v19 = 1 << v16;
    v20 = *(_QWORD *)(v7 + 48);
    if (((1 << v16) & v18) != 0)
    {
      if (*(unsigned __int8 *)(v20 + v16) == (_DWORD)v13)
        goto LABEL_4;
      v21 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v21;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
          break;
        if (*(unsigned __int8 *)(v20 + v16) == (_DWORD)v13)
          goto LABEL_4;
      }
    }
    *(_QWORD *)(v9 + 8 * v17) = v19 | v18;
    *(_BYTE *)(v20 + v16) = v13;
    v10 = *(_QWORD *)(v7 + 16);
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_27;
    }
    *(_QWORD *)(v7 + 16) = v12;
LABEL_4:
    ++v8;
  }
  while (v8 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v7);
  outlined release of DateComponents((uint64_t)__dst);
  *(_QWORD *)&v36[0] = v5;
  *((_QWORD *)&v36[0] + 1) = v6;
  v22 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v22, __src);
  v23 = 1.59271755e13;
  if (v3 <= 1.59271755e13)
    v23 = v3;
  v24 = fmax(v23, -2.11845067e11);
  v34[0] = v24;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v34, &v37);
  swift_release();
  v25 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    result = outlined retain of DateComponents((uint64_t)__dst);
  }
  else
  {
    *(_QWORD *)&__src[0] = 4;
    ObjectType = swift_getObjectType();
    v34[0] = v24;
    v27 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t))(v6 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v27(v36, __src, v34, ObjectType, v6);
    result = outlined release of DateComponents((uint64_t)v36);
    HIBYTE(v70) = BYTE9(v36[17]);
  }
  v28 = *(_QWORD *)&__dst[10];
  v29 = v55;
  v30 = v56 ^ 1 | BYTE8(__dst[10]);
  if ((v56 & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0)
    goto LABEL_24;
  v31 = v55 - *(_QWORD *)&__dst[10];
  if (!__OFSUB__(v55, *(_QWORD *)&__dst[10]))
  {
    if (v31 < 0)
      v31 = *(_QWORD *)&__dst[10] - v55;
    if ((unint64_t)v31 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)&v36[2] = v39;
      BYTE8(v36[2]) = v40;
      *(_QWORD *)&v36[3] = v41;
      BYTE8(v36[3]) = v42;
      *(_QWORD *)&v36[4] = v43;
      BYTE8(v36[4]) = v44;
      *(_QWORD *)&v36[5] = v45;
      BYTE8(v36[5]) = v46;
      *(_QWORD *)&v36[6] = v47;
      BYTE8(v36[6]) = v48;
      *(_QWORD *)&v36[7] = v49;
      BYTE8(v36[7]) = v50;
      *(_QWORD *)&v36[8] = v51;
      BYTE8(v36[8]) = v52;
      *(_QWORD *)&v36[9] = v53;
      BYTE8(v36[9]) = v54;
      *(_QWORD *)&v36[10] = v29;
      *(_QWORD *)&v36[11] = v57;
      BYTE8(v36[11]) = v58;
      *(_QWORD *)&v36[12] = v59;
      BYTE8(v36[12]) = v60;
      *(_QWORD *)&v36[13] = v61;
      BYTE8(v36[13]) = v62;
      *(_QWORD *)&v36[14] = v63;
      BYTE8(v36[14]) = v64;
      *(_QWORD *)&v36[15] = v65;
      BYTE8(v36[15]) = v66;
      BYTE8(v36[16]) = v68;
      WORD4(v36[17]) = v70;
      *(_QWORD *)&v36[16] = v67;
      *(_QWORD *)&v36[17] = v69;
      v36[0] = v37;
      v36[1] = v38;
      BYTE8(v36[10]) = 0;
      outlined release of DateComponents((uint64_t)v36);
      swift_unknownObjectRelease();
      return 0;
    }
    v29 = 0;
    v28 = 0;
    v30 = 0;
LABEL_24:
    *(_QWORD *)&__src[2] = *(_QWORD *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(_QWORD *)&__src[3] = *(_QWORD *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(_QWORD *)&__src[4] = *(_QWORD *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(_QWORD *)&__src[10] = v28;
    BYTE8(__src[10]) = v30;
    *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
    *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
    BYTE9(__src[17]) = v25;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v34, __src, 0x11AuLL);
    *(_QWORD *)&v36[2] = v39;
    BYTE8(v36[2]) = v40;
    *(_QWORD *)&v36[3] = v41;
    BYTE8(v36[3]) = v42;
    *(_QWORD *)&v36[4] = v43;
    BYTE8(v36[4]) = v44;
    *(_QWORD *)&v36[5] = v45;
    BYTE8(v36[5]) = v46;
    *(_QWORD *)&v36[6] = v47;
    BYTE8(v36[6]) = v48;
    *(_QWORD *)&v36[7] = v49;
    BYTE8(v36[7]) = v50;
    *(_QWORD *)&v36[8] = v51;
    BYTE8(v36[8]) = v52;
    *(_QWORD *)&v36[9] = v53;
    BYTE8(v36[9]) = v54;
    *(_QWORD *)&v36[10] = v29;
    BYTE8(v36[10]) = v56;
    *(_QWORD *)&v36[11] = v57;
    BYTE8(v36[11]) = v58;
    *(_QWORD *)&v36[12] = v59;
    BYTE8(v36[12]) = v60;
    *(_QWORD *)&v36[13] = v61;
    BYTE8(v36[13]) = v62;
    *(_QWORD *)&v36[14] = v63;
    BYTE8(v36[14]) = v64;
    *(_QWORD *)&v36[15] = v65;
    BYTE8(v36[15]) = v66;
    BYTE8(v36[16]) = v68;
    WORD4(v36[17]) = v70;
    *(_QWORD *)&v36[16] = v67;
    *(_QWORD *)&v36[17] = v69;
    v36[0] = v37;
    v36[1] = v38;
    memcpy(v33, v36, 0x11AuLL);
    v32 = specialized static DateComponents.== infix(_:_:)((uint64_t)v34, v33);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v36);
    swift_unknownObjectRelease();
    return v32;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _NSSwiftCalendar.getEra(_:year:month:day:from:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v10 = *a5;
  v11 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  v29 = v17;
  v19 = 15;
  v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    v12 = v21;
    if (v22)
      v12 = 0;
    *a1 = v12;
  }
  if (a2)
  {
    v13 = v23;
    if (v24)
      v13 = 0;
    *a2 = v13;
  }
  if (a3)
  {
    v14 = v25;
    if (v26)
      v14 = 0;
    *a3 = v14;
  }
  if (a4)
  {
    v15 = v27;
    if (v28)
      v15 = 0;
    *a4 = v15;
  }
  return outlined release of DateComponents((uint64_t)v20);
}

uint64_t _NSSwiftCalendar.getEra(_:yearForWeekOfYear:weekOfYear:weekday:from:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v10 = *a5;
  v11 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  v29 = v17;
  v19 = 6273;
  v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    v12 = v21;
    if (v22)
      v12 = 0;
    *a1 = v12;
  }
  if (a2)
  {
    v13 = v27;
    if (v28)
      v13 = 0;
    *a2 = v13;
  }
  if (a3)
  {
    if (v26)
      v14 = 0;
    else
      v14 = v25;
    *a3 = v14;
  }
  if (a4)
  {
    v15 = v23;
    if (v24)
      v15 = 0;
    *a4 = v15;
  }
  return outlined release of DateComponents((uint64_t)v20);
}

uint64_t _NSSwiftCalendar.range(ofWeekendStart:interval:containing:)(_QWORD *a1, uint64_t *a2, double *a3)
{
  uint64_t v3;
  double v6;
  uint64_t v7;
  __darwin_time_t tv_sec;
  uint64_t result;
  uint64_t tv_nsec;
  id v11;
  id v12;
  Foundation::Date startingAfter[2];
  Foundation::Date startingAftera[2];
  double v15;
  __int128 v16;
  timespec __tp;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&startingAfter[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  v16 = *(_OWORD *)&startingAfter[0]._time;
  v15 = v6;
  Calendar.nextWeekend(startingAfter:direction:)(startingAfter[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if (v18 == 1)
    return 0;
  tv_sec = __tp.tv_sec;
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&startingAftera[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  v16 = *(_OWORD *)&startingAftera[0]._time;
  v15 = *(double *)&tv_sec;
  Calendar.nextWeekend(startingAfter:direction:)(startingAftera[0], (Foundation::Calendar::SearchDirection)&v15);
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0)
    return 0;
  result = 0;
  if (v6 >= *(double *)&__tp.tv_sec)
  {
    tv_nsec = __tp.tv_nsec;
    if (v6 < *(double *)&__tp.tv_nsec + *(double *)&__tp.tv_sec)
    {
      if (a1)
      {
        v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *(double *)&__tp.tv_sec);
        v12 = v11;
        *a1 = v11;
      }
      if (a2)
        *a2 = tv_nsec;
      return 1;
    }
  }
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matchingHour:minute:second:options:)(Foundation::Date after, Swift::Int matchingHour, Swift::Int minute, Swift::Int second, NSCalendarOptions options)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  Swift::Double v15;
  __int128 v16;
  BOOL v17;
  BOOL v18;
  char v19;
  __int128 __dst[18];
  uint64_t v21;
  __int128 v22;
  _BYTE __src[288];
  Foundation::Date_optional result;

  v8 = v5;
  v9 = v6;
  v10 = *(_QWORD *)matchingHour;
  if ((v5 & 0x400) != 0)
  {
    v11 = 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    v11 = 1;
  }
  else if ((v5 & 0x100) != 0)
  {
    v11 = 2;
  }
  else if ((v5 & 2) != 0)
  {
    v11 = 3;
  }
  else
  {
    v11 = 0;
  }
  v12 = (v5 & 0x3000) == 0x2000;
  __dst[0] = 0uLL;
  v22 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v22, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, minute, 0, second, 0, options, 0, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v13 = *(_QWORD *)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 32));
  v16 = *(_OWORD *)(v13 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 32));
  v22 = v16;
  v21 = v10;
  memcpy(__dst, __src, 0x11AuLL);
  v19 = v11;
  v18 = v12;
  v17 = (v8 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v21, __dst, &v19, (char *)&v18, (char *)&v17, v9);
  swift_unknownObjectRelease();
  v14 = outlined release of DateComponents((uint64_t)__src);
  result.value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingUnit:value:of:options:)(NSCalendarUnit bySettingUnit, Swift::Int value, Foundation::Date of, NSCalendarOptions options)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  Swift::Double v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t __dst[36];
  __int128 __src;
  char v16[40];
  Foundation::Date_optional result;

  v6 = v4;
  v7 = *(_QWORD *)options;
  v8 = _fromNSCalendarUnit(_:)(bySettingUnit, v16);
  v10 = v16[0];
  if (v16[0] != 18)
  {
    v11 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
    v12 = *(_OWORD *)(v11 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
    __src = v12;
    __dst[0] = qword_1820DCED8[v10];
    v13 = v7;
    Calendar._dateComponents(_:from:)(__dst, (double *)&v13, v16);
    outlined release of DateComponents((uint64_t)v16);
    swift_unknownObjectRelease();
    __asm { BR              X9 }
  }
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  result.value = *(Foundation::Date *)&v9;
  result.is_nil = v8;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)(Swift::Int era, Swift::Int year, Swift::Int month, Swift::Int day, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t ObjectType;
  char v13;
  Swift::Double v14;
  __int128 __dst[18];
  uint64_t v16[2];
  _BYTE __src[288];
  Foundation::Date_optional result;

  __dst[0] = 0uLL;
  v16[0] = 0;
  v16[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v16, era, 0, year, 0, month, 0, (uint64_t)__src, day, 0, hour, 0, minute, 0, second, 0, nanosecond, 0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  v11 = *(_QWORD *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 176))(__dst, ObjectType, v11);
  swift_unknownObjectRelease();
  v13 = outlined release of DateComponents((uint64_t)__src);
  result.value = *(Foundation::Date *)&v14;
  result.is_nil = v13;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(era:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:)(Swift::Int era, Swift::Int yearForWeekOfYear, Swift::Int weekOfYear, Swift::Int weekday, Swift::Int hour, Swift::Int minute, Swift::Int second, Swift::Int nanosecond)
{
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t ObjectType;
  char v13;
  Swift::Double v14;
  __int128 __dst[18];
  uint64_t v16[2];
  _BYTE __src[288];
  Foundation::Date_optional result;

  __dst[0] = 0uLL;
  v16[0] = 0;
  v16[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v16, era, 0, 0, 1, 0, 1, (uint64_t)__src, 0, 1, hour, 0, minute, 0, second, 0, nanosecond, 0,
    weekday,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    weekOfYear,
    0,
    yearForWeekOfYear,
    0);
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____NSSwiftCalendar__lock);
  v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  v11 = *(_QWORD *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 176))(__dst, ObjectType, v11);
  swift_unknownObjectRelease();
  v13 = outlined release of DateComponents((uint64_t)__src);
  result.value = *(Foundation::Date *)&v14;
  result.is_nil = v13;
  return result;
}

id @objc _NSSwiftCalendar.date(era:year:month:day:hour:minute:second:nanosecond:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(double *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v17;
  id v18;
  double v20;
  char v21;

  v17 = a1;
  a11(&v20, a3, a4, a5, a6, a7, a8, a9, a10);

  if ((v21 & 1) != 0)
    v18 = 0;
  else
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
  return v18;
}

id _NSSwiftCalendar.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized _NSSwiftCalendar._enumerateDatesStarting(after:matching:options:using:)(double *a1, const void *a2, __int16 a3, uint64_t a4, void *aBlock)
{
  char v6;
  double v8;
  char v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  BOOL v16;
  BOOL v17;
  unsigned __int8 v18;
  _BYTE __dst[288];
  double v20;
  __int128 v21;

  v6 = a3;
  v8 = *a1;
  if ((a3 & 2) != 0)
    v9 = 3;
  else
    v9 = 0;
  if ((a3 & 0x100) != 0)
    v10 = 2;
  else
    v10 = v9;
  if ((a3 & 0x200) != 0)
    v11 = 1;
  else
    v11 = v10;
  if ((a3 & 0x400) != 0)
    v12 = 0;
  else
    v12 = v11;
  v13 = (a3 & 0x3000) == 0x2000;
  v14 = *(_QWORD *)(a4 + OBJC_IVAR____NSSwiftCalendar__lock);
  _Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 32));
  v15 = *(_OWORD *)(v14 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 32));
  v21 = v15;
  v20 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  v18 = v12;
  v17 = v13;
  v16 = (v6 & 4) != 0;
  _Block_copy(aBlock);
  specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v20, __dst, &v18, (unsigned __int8 *)&v17, (unsigned __int8 *)&v16, (uint64_t *)&v21, (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))aBlock);
  _Block_release(aBlock);
  swift_unknownObjectRelease();
  _Block_release(aBlock);
}

_QWORD *AttributedString.UnicodeScalarView.index(after:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD v16[6];

  v4 = *result >> 10;
  v5 = v2[5] >> 10;
  if (v4 >= v2[1] >> 10 && v5 >= v4)
  {
    v7 = *v2;
    v8 = *(_OWORD *)(*v2 + 32);
    v16[3] = *(_OWORD *)(*v2 + 16);
    v16[4] = v8;
    v16[5] = *(_OWORD *)(v7 + 48);
    BigString.unicodeScalars.getter();
    v9 = BigString.UnicodeScalarView.index(after:)();
    v11 = v10;
    v13 = v12;
    v15 = v14;
    result = (_QWORD *)outlined release of Locale((uint64_t)v16);
    if (v5 >= v9 >> 10)
    {
      *a2 = v9;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v15;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedString.UnicodeScalarView.index(before:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD v16[6];

  v4 = *result >> 10;
  v5 = v2[1] >> 10;
  if (v4 >= v5 && v2[5] >> 10 >= v4)
  {
    v7 = *v2;
    v8 = *(_OWORD *)(*v2 + 32);
    v16[3] = *(_OWORD *)(*v2 + 16);
    v16[4] = v8;
    v16[5] = *(_OWORD *)(v7 + 48);
    BigString.unicodeScalars.getter();
    v9 = BigString.UnicodeScalarView.index(before:)();
    v11 = v10;
    v13 = v12;
    v15 = v14;
    result = (_QWORD *)outlined release of Locale((uint64_t)v16);
    if (v5 <= v9 >> 10)
    {
      *a2 = v9;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v15;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedString.UnicodeScalarView.index(_:offsetBy:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v18[6];

  v4 = *result >> 10;
  v5 = v2[1] >> 10;
  v6 = v2[5] >> 10;
  if (v4 >= v5 && v6 >= v4)
  {
    v8 = *v2;
    v9 = *(_OWORD *)(*v2 + 32);
    v18[3] = *(_OWORD *)(*v2 + 16);
    v18[4] = v9;
    v18[5] = *(_OWORD *)(v8 + 48);
    BigString.unicodeScalars.getter();
    v10 = BigString.UnicodeScalarView.index(_:offsetBy:)();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    result = (_QWORD *)outlined release of Locale((uint64_t)v18);
    if (v10 >> 10 >= v5 && v6 >= v10 >> 10)
    {
      *a2 = v10;
      a2[1] = v12;
      a2[2] = v14;
      a2[3] = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[3];
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    v11 = v18;
    result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      return 1;
    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v6)
    goto LABEL_23;
  v13 = *(_QWORD *)(v2 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_21;
  v8 = v12 + 1;
  if (v12 + 1 >= v6)
    goto LABEL_23;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 2;
  if (v12 + 2 >= v6)
    goto LABEL_23;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 3;
  if (v12 + 3 >= v6)
    goto LABEL_23;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return 0;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  v8 = v14;
  if (v13)
  {
LABEL_21:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[48];
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  BigString.init()();
  v22[0] = 0;
  MEMORY[0x186DA9E90](v22, 8);
  v2 = v22[0];
  type metadata accessor for AttributedString.Guts();
  v3 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v3 + 16) = v18;
    *(_OWORD *)(v3 + 32) = v19;
    *(_OWORD *)(v3 + 48) = v20;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v2;
    v5 = BigString.startIndex.getter();
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = BigString.endIndex.getter();
    v27 = v5;
    v28 = v7;
    v29 = v9;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v21);
    outlined release of Locale((uint64_t)v22);
    result = swift_release();
    *(_QWORD *)a1 = v3;
    v16 = v24;
    *(_OWORD *)(a1 + 8) = v23;
    *(_OWORD *)(a1 + 24) = v16;
    v17 = v26;
    *(_OWORD *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 72) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double AttributedString.unicodeScalars.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[48];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = *v1;
  v4 = *(_OWORD *)(*v1 + 32);
  v28 = *(_OWORD *)(*v1 + 16);
  v29 = v4;
  v30 = *(_OWORD *)(v3 + 48);
  v20 = BigString.startIndex.getter();
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = BigString.endIndex.getter();
  v25 = v8;
  v26 = v9;
  v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(_QWORD *)a1 = v3;
  v11 = v17;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 24) = v11;
  result = *(double *)&v18;
  v13 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

double key path getter for AttributedString.unicodeScalars : AttributedString@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[48];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = *a1;
  v4 = *(_OWORD *)(*a1 + 32);
  v28 = *(_OWORD *)(*a1 + 16);
  v29 = v4;
  v30 = *(_OWORD *)(v3 + 48);
  v20 = BigString.startIndex.getter();
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = BigString.endIndex.getter();
  v25 = v8;
  v26 = v9;
  v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(_QWORD *)a2 = v3;
  v11 = v17;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v11;
  result = *(double *)&v18;
  v13 = v19;
  *(_OWORD *)(a2 + 40) = v18;
  *(_OWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t key path setter for AttributedString.unicodeScalars : AttributedString(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[9];
  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  v5 = *(_OWORD *)(a1 + 3);
  v6 = *(_OWORD *)(a1 + 5);
  v7 = *(_OWORD *)(a1 + 7);
  v8 = v1;
  swift_retain();
  return AttributedString.unicodeScalars.setter(&v3);
}

uint64_t AttributedString.unicodeScalars.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  _BYTE v61[48];
  _BYTE v62[48];
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[48];
  _BYTE v69[48];
  _QWORD v70[8];
  _OWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[7];

  v2 = v1;
  v51 = a1[2];
  v52 = a1[1];
  v49 = a1[4];
  v50 = a1[3];
  v47 = a1[6];
  v48 = a1[5];
  v54 = a1[7];
  v55 = (_OWORD *)*a1;
  v53 = a1[8];
  v3 = *(_OWORD *)(*(_QWORD *)v1 + 16);
  v4 = *(_OWORD *)(*(_QWORD *)v1 + 48);
  v97[4] = *(_OWORD *)(*(_QWORD *)v1 + 32);
  v97[5] = v4;
  v97[3] = v3;
  v56 = BigString.startIndex.getter();
  v58 = BigString.endIndex.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD **)v1;
    v6 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v7 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v97[1] = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v97[2] = v7;
    v97[0] = v6;
    v8 = v5[8];
    v9 = v5[9];
    v10 = v5[10];
    v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v97);
    swift_unknownObjectRetain();
    *(_QWORD *)v2 = AttributedString.Guts.init(string:runs:)(v97, v8, v9, v10, v11);
    swift_release();
  }
  v12 = *(_OWORD **)v2;
  v13 = *(_OWORD *)(*(_QWORD *)v2 + 32);
  v94 = *(_OWORD *)(*(_QWORD *)v2 + 16);
  v95 = v13;
  v96 = v12[3];
  v86 = BigString.startIndex.getter();
  v87 = v14;
  v88 = v15;
  v89 = v16;
  v90 = BigString.endIndex.getter();
  v91 = v17;
  v92 = v18;
  v93 = v19;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v61);
  outlined release of Locale((uint64_t)v62);
  swift_release();
  v20 = v63;
  v21 = v64;
  v59 = v12;
  if (one-time initialization token for currentIdentity != -1)
    swift_once();
  v22 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v23 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v23);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v22, (uint64_t *)v71);
  os_unfair_lock_unlock(v23);
  swift_release();
  v24 = *(_QWORD *)&v71[0];
  v60 = *(_QWORD *)&v71[0];
  BigString.init()();
  *(_QWORD *)&v71[0] = 0;
  MEMORY[0x186DA9E90](v71, 8);
  v25 = *(_QWORD *)&v71[0];
  type metadata accessor for AttributedString.Guts();
  v26 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v27 = v66;
  *(_OWORD *)(v26 + 16) = v65;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = v67;
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 88) = v25;
  *(_QWORD *)v2 = v26;
  swift_release();
  if (v56 >> 10 < v20 >> 10 || v21 >> 10 < v58 >> 10)
    goto LABEL_11;
  v28 = v12 + 1;
  v29 = v12[2];
  v83 = v12[1];
  v84 = v29;
  v85 = v12[3];
  BigString.unicodeScalars.getter();
  v30 = BigString.UnicodeScalarView.index(roundingDown:)();
  v32 = v31;
  v57 = v24;
  v34 = v33;
  v36 = v35;
  outlined release of Locale((uint64_t)v68);
  v37 = v28[1];
  v80 = *v28;
  v81 = v37;
  v82 = v28[2];
  BigString.unicodeScalars.getter();
  v38 = BigString.UnicodeScalarView.index(roundingDown:)();
  v40 = v39;
  v42 = v41;
  v44 = v43;
  outlined release of Locale((uint64_t)v69);
  v70[0] = v30;
  v70[1] = v32;
  v70[2] = v34;
  v70[3] = v36;
  v70[4] = v38;
  v70[5] = v40;
  v70[6] = v42;
  v70[7] = v44;
  v45 = v55[2];
  v71[0] = v55[1];
  v71[1] = v45;
  v71[2] = v55[3];
  v72 = v52;
  v73 = v51;
  v74 = v50;
  v75 = v49;
  v76 = v48;
  v77 = v47;
  v78 = v54;
  v79 = v53;
  swift_unknownObjectRetain();
  swift_retain();
  specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v70, (uint64_t)v71);
  swift_unknownObjectRelease();
  swift_release();
  if (v60 == v57)
  {
    *(_QWORD *)v2 = v59;
    swift_release();
    return swift_release();
  }
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.unicodeScalars.modify(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;

  v2 = v1;
  v4 = (char *)malloc(0x1D8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 57) = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 32);
    v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 19) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 20) = v7;
    *((_OWORD *)v4 + 21) = v6;
    v8 = v5[8];
    v9 = v5[9];
    v11 = v5[10];
    v10 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 304));
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 19, v8, v9, v11, v10);
    swift_release();
  }
  v35 = v2;
  v12 = *v2;
  v14 = *(_OWORD *)(*v2 + 32);
  v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 25) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 26) = v14;
  *((_OWORD *)v4 + 27) = v13;
  v15 = BigString.startIndex.getter();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = BigString.endIndex.getter();
  *((_QWORD *)v4 + 24) = v15;
  *((_QWORD *)v4 + 25) = v17;
  *((_QWORD *)v4 + 26) = v19;
  *((_QWORD *)v4 + 27) = v21;
  *((_QWORD *)v4 + 28) = v22;
  *((_QWORD *)v4 + 29) = v23;
  *((_QWORD *)v4 + 30) = v24;
  *((_QWORD *)v4 + 31) = v25;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)(v4 + 352));
  outlined release of Locale((uint64_t)v4);
  swift_release();
  *((_QWORD *)v4 + 14) = v12;
  v26 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v4 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v4 + 136) = v26;
  v27 = *((_OWORD *)v4 + 6);
  *(_OWORD *)(v4 + 152) = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v4 + 168) = v27;
  if (one-time initialization token for currentIdentity != -1)
    swift_once();
  v28 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v29 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v28, &v36);
  os_unfair_lock_unlock(v29);
  swift_release();
  v30 = v36;
  *((_QWORD *)v4 + 58) = v36;
  *((_QWORD *)v4 + 23) = v30;
  BigString.init()();
  *((_QWORD *)v4 + 56) = 0;
  MEMORY[0x186DA9E90](v4 + 448, 8);
  v31 = *((_QWORD *)v4 + 56);
  type metadata accessor for AttributedString.Guts();
  v32 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v34 = *((_OWORD *)v4 + 17);
    *(_OWORD *)(v32 + 16) = *((_OWORD *)v4 + 16);
    *(_OWORD *)(v32 + 32) = v34;
    *(_OWORD *)(v32 + 48) = *((_OWORD *)v4 + 18);
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = 0;
    *(_QWORD *)(v32 + 80) = 0;
    *(_QWORD *)(v32 + 88) = v31;
    *v35 = v32;
    swift_release();
    return (uint64_t)AttributedString.unicodeScalars.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString.unicodeScalars.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 184) == *(_QWORD *)(*a1 + 464))
  {
    **(_QWORD **)(v1 + 456) = *(_QWORD *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

_QWORD *AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(_QWORD *result, __int128 *a2, ValueMetadata *a3)
{
  _QWORD *v3;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44[48];
  char v45[48];
  char v46[48];
  char v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[21];

  if (*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v3[5] >> 10 < result[4] >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v5 = (_OWORD *)*v3;
  v6 = *(_OWORD *)(*v3 + 32);
  v59[17] = *(_OWORD *)(*v3 + 16);
  v59[18] = v6;
  v59[19] = v5[3];
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  outlined release of Locale((uint64_t)v44);
  v14 = v5[2];
  v59[14] = v5[1];
  v59[15] = v14;
  v59[16] = v5[3];
  BigString.unicodeScalars.getter();
  v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  outlined release of Locale((uint64_t)v45);
  *(_QWORD *)&v52 = v7;
  *((_QWORD *)&v52 + 1) = v9;
  v53 = v11;
  v54 = v13;
  v55 = v15;
  v56 = v17;
  v57 = v19;
  v58 = v21;
  if (a3 == &type metadata for AttributedString.UnicodeScalarView)
  {
    v22 = *(_QWORD *)a2;
    v23 = *(_OWORD *)(*(_QWORD *)a2 + 32);
    v35 = *(_OWORD *)(*(_QWORD *)a2 + 16);
    v36 = v23;
    v24 = *(__int128 *)((char *)a2 + 8);
    v37 = *(_OWORD *)(v22 + 48);
    v38 = v24;
    v25 = *(__int128 *)((char *)a2 + 40);
    v39 = *(__int128 *)((char *)a2 + 24);
    v40 = v25;
    v41 = *(__int128 *)((char *)a2 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)&v52, (uint64_t)&v35);
    swift_unknownObjectRelease();
    return (_QWORD *)swift_release();
  }
  else if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>) == a3)
  {
    v26 = a2[3];
    v37 = a2[2];
    v38 = v26;
    v27 = a2[8];
    v28 = a2[6];
    v42 = a2[7];
    v43 = v27;
    v29 = a2[5];
    v39 = a2[4];
    v40 = v29;
    v41 = v28;
    v30 = a2[1];
    v35 = *a2;
    v36 = v30;
    v59[7] = v35;
    v59[8] = v30;
    v59[9] = v37;
    v59[10] = v38;
    v31 = (_OWORD *)v39;
    v32 = *(_OWORD *)(v39 + 32);
    v59[11] = *(_OWORD *)(v39 + 16);
    v59[12] = v32;
    v59[13] = *(_OWORD *)(v39 + 48);
    BigString.unicodeScalars.getter();
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v46);
    outlined release of Locale((uint64_t)v47);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    v33 = v31[2];
    v59[0] = v31[1];
    v59[1] = v33;
    v59[2] = v31[3];
    v59[3] = v48;
    v59[4] = v49;
    v59[5] = v50;
    v59[6] = v51;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)&v52, (uint64_t)v59);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v35);
    return (_QWORD *)swift_unknownObjectRelease();
  }
  else
  {
    return (_QWORD *)AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(&v52, a2, (uint64_t)a3);
  }
}

__n128 AttributedString.UnicodeScalarView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.UnicodeScalarView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.UnicodeScalarView._count.getter()
{
  uint64_t v0;

  swift_unknownObjectRetain();
  v0 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

_QWORD *AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X2>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21[48];
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = *result >> 10;
  v6 = v3[1] >> 10;
  v7 = v3[5] >> 10;
  v8 = *a2 >> 10;
  if (v7 < v8 || v8 < v6 || v5 < v6 || v7 < v5)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v12 = *v3;
  v13 = *(_OWORD *)(*v3 + 32);
  v22 = *(_OWORD *)(*v3 + 16);
  v23 = v13;
  v24 = *(_OWORD *)(v12 + 48);
  BigString.unicodeScalars.getter();
  v14 = BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = (_QWORD *)outlined release of Locale((uint64_t)v21);
  if (v20 == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 2;
    return result;
  }
  if (v14 >> 10 < v6 || v7 < v14 >> 10)
    goto LABEL_18;
  *a3 = v14;
  a3[1] = v16;
  a3[2] = v18;
  a3[3] = v20;
  return result;
}

_QWORD *AttributedString.UnicodeScalarView._distance(from:to:)(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[6];

  v3 = *result >> 10;
  v4 = v2[1] >> 10;
  v5 = v2[5] >> 10;
  v6 = *a2 >> 10;
  if (v5 >= v6 && v6 >= v4 && v3 >= v4 && v5 >= v3)
  {
    v10 = *v2;
    v11 = *(_OWORD *)(*v2 + 32);
    v13[3] = *(_OWORD *)(*v2 + 16);
    v13[4] = v11;
    v13[5] = *(_OWORD *)(v10 + 48);
    BigString.unicodeScalars.getter();
    v12 = BigString.UnicodeScalarView.distance(from:to:)();
    outlined release of Locale((uint64_t)v13);
    return (_QWORD *)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *AttributedString.UnicodeScalarView.subscript.getter(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v7[6];

  v2 = *result >> 10;
  if (v2 < v1[1] >> 10 || v2 >= v1[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1;
    v5 = *(_OWORD *)(*v1 + 32);
    v7[3] = *(_OWORD *)(*v1 + 16);
    v7[4] = v5;
    v7[5] = *(_OWORD *)(v4 + 48);
    BigString.unicodeScalars.getter();
    v6 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v7);
    return (_QWORD *)v6;
  }
  return result;
}

__int128 *AttributedString.UnicodeScalarView.subscript.getter@<X0>(__int128 *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v5 = (_OWORD *)*v2;
  v4 = v2[1];
  v6 = v2[5];
  v7 = result[1];
  v30 = *result;
  v31 = v7;
  v8 = result[3];
  v32 = result[2];
  v33 = v8;
  v9 = v6 >> 10;
  if ((unint64_t)v30 >> 10 >= v4 >> 10 && v9 >= (unint64_t)v32 >> 10)
  {
    v11 = v5[2];
    v34 = v5[1];
    v35 = v11;
    v36 = v5[3];
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)&v20);
    result = (__int128 *)outlined release of Locale((uint64_t)v21);
    v12 = v22;
    v13 = v23;
    v14 = v24;
    v15 = v25;
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = v29;
    a2[8] = v5;
    a2[9] = v12;
    a2[10] = v13;
    a2[11] = v14;
    a2[12] = v15;
    a2[13] = v16;
    a2[14] = v17;
    a2[15] = v18;
    a2[16] = v19;
    a2[17] = 0;
    *a2 = v12;
    a2[1] = v13;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    a2[5] = v17;
    a2[6] = v18;
    a2[7] = v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.UnicodeScalarView(unint64_t *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[6];

  v2 = *result >> 10;
  v3 = v1[1] >> 10;
  if (v2 >= v3 && v1[5] >> 10 >= v2)
  {
    v5 = result;
    v6 = *v1;
    v7 = *(_OWORD *)(*v1 + 32);
    v15[3] = *(_OWORD *)(*v1 + 16);
    v15[4] = v7;
    v15[5] = *(_OWORD *)(v6 + 48);
    BigString.unicodeScalars.getter();
    v8 = BigString.UnicodeScalarView.index(before:)();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    result = (unint64_t *)outlined release of Locale((uint64_t)v15);
    if (v3 <= v8 >> 10)
    {
      *v5 = v8;
      v5[1] = v10;
      v5[2] = v12;
      v5[3] = v14;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView(void (**a1)(void **a1), _QWORD *a2))(void **a1)
{
  _QWORD *v2;
  void (*result)(void **);
  unint64_t v6;
  void (*v8)(void **);
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  result = (void (*)(void **))malloc(0x64uLL);
  *a1 = result;
  v6 = *a2 >> 10;
  if (v6 < v2[1] >> 10 || v6 >= v2[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = (uint64_t)result + 48;
    v11 = *(_OWORD *)(*v2 + 32);
    v10 = *(_OWORD *)(*v2 + 48);
    *(_OWORD *)result = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)result + 1) = v11;
    *((_OWORD *)result + 2) = v10;
    BigString.unicodeScalars.getter();
    v12 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale(v9);
    *((_DWORD *)v8 + 24) = v12;
    return protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView;
  }
  return result;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView(void **a1)
{
  free(*a1);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v9;
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.UnicodeScalarView()
{
  uint64_t v0;

  return (*(_QWORD *)(v0 + 40) ^ *(_QWORD *)(v0 + 8)) < 0x400uLL;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.UnicodeScalarView()
{
  uint64_t v0;

  swift_unknownObjectRetain();
  v0 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.UnicodeScalarView(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 3;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.UnicodeScalarView(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;

  v2 = *result >> 10;
  if (v2 < *a2 >> 10 || v2 >= a2[4] >> 10)
    __break(1u);
  return result;
}

{
  unint64_t v2;

  v2 = *result >> 10;
  if (v2 < *a2 >> 10 || a2[4] >> 10 < v2)
    __break(1u);
  return result;
}

{
  if (*result >> 10 < *a2 >> 10 || a2[4] >> 10 < result[4] >> 10)
    __break(1u);
  return result;
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.UnicodeScalarView(unint64_t *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[6];

  v2 = *result >> 10;
  v3 = v1[5] >> 10;
  if (v2 >= v1[1] >> 10 && v3 >= v2)
  {
    v5 = result;
    v6 = *v1;
    v7 = *(_OWORD *)(*v1 + 32);
    v15[3] = *(_OWORD *)(*v1 + 16);
    v15[4] = v7;
    v15[5] = *(_OWORD *)(v6 + 48);
    BigString.unicodeScalars.getter();
    v8 = BigString.UnicodeScalarView.index(after:)();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    result = (unint64_t *)outlined release of Locale((uint64_t)v15);
    if (v3 >= v8 >> 10)
    {
      *v5 = v8;
      v5[1] = v10;
      v5[2] = v12;
      v5[3] = v14;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.UnicodeScalarView()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _OWORD v5[5];

  v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath(a1, a2);
}

Swift::Void __swiftcall AttributedString.UnicodeScalarView._ensureUniqueReference()()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15[3];
  _BYTE v16[40];

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = (_QWORD *)*v0;
    v3 = *(_OWORD *)(*v0 + 16);
    v4 = *(_OWORD *)(*v0 + 48);
    v13 = *(_OWORD *)(*v0 + 32);
    v14 = v4;
    v12 = v3;
    v5 = v2[8];
    v6 = v2[9];
    v7 = v2[10];
    v8 = v2[11];
    type metadata accessor for AttributedString.Guts();
    v9 = swift_allocObject();
    v10 = BigString.isEmpty.getter();
    if (v5)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v12);
      swift_unknownObjectRelease();
    }
    else
    {
      v15[0] = v12;
      v15[1] = v13;
      v15[2] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
      outlined retain of Locale((uint64_t)v16);
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v5);
    swift_unknownObjectRelease();
    if (v5)
    {
      swift_unknownObjectRelease();
      if ((((v7 == 0) ^ v10) & 1) == 0)
      {
LABEL_7:
        v11 = v13;
        *(_OWORD *)(v9 + 16) = v12;
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = v14;
        *(_QWORD *)(v9 + 64) = v5;
        *(_QWORD *)(v9 + 72) = v6;
        *(_QWORD *)(v9 + 80) = v7;
        *(_QWORD *)(v9 + 88) = v8;
        *v1 = v9;
        swift_release();
        return;
      }
    }
    else if ((v10 & 1) != 0)
    {
      goto LABEL_7;
    }
    __break(1u);
  }
}

unint64_t AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)(__int128 *a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *, __int128 *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char Enum;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  unsigned __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  __int128 v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  unint64_t v219;
  int64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  int64_t v226;
  uint64_t v227;
  int64_t v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  __int128 v245;
  __int128 v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  int64_t v250;
  int64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  int64_t v257;
  unint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  int64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  int64_t v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  unint64_t v281;
  __int128 v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  int64_t v306;
  __int128 v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int64_t v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int64_t v344;
  int64_t v345;
  int64_t v346;
  int v347;
  int v348;
  uint64_t v349;
  int64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  int64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  int64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  char v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  int64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char v419;
  char v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  unint64_t v451;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  __int128 *v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v463;
  uint64_t *v464;
  __int128 v465;
  char v466;
  __int128 v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 v478;
  uint64_t v479;
  unsigned __int128 v480;
  uint64_t v481;
  int v482;
  int64_t v483;
  int64_t v484;
  int64_t v485;
  int64_t v486;
  uint64_t v487;
  unsigned __int128 v488;
  unsigned __int128 v489;
  unsigned __int128 v490;
  unsigned __int128 v491;
  uint64_t v492;
  __int128 v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int64_t v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  _OWORD v507[5];
  __int128 v508;
  unsigned __int128 v509;
  __int128 v510;
  __int128 v511;
  _BYTE v512[24];
  __int128 v513;
  __int128 v514;
  __int128 v515;
  uint64_t v516;
  _OWORD v517[5];
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  _BYTE v523[32];
  uint64_t v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  uint64_t v543;
  char v544[48];
  unint64_t v545[4];
  uint64_t v546;
  uint64_t v547[4];
  uint64_t v548;
  char v549[48];
  __int128 v550;
  __int128 v551;
  __int128 v552;
  char v553[48];
  char v554[48];
  char v555[48];
  char v556[48];
  char v557[48];
  char v558[48];
  char v559[48];
  char v560[48];
  char v561[48];
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  _OWORD v574[2];
  uint64_t v575;
  _OWORD v576[2];
  uint64_t v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  _OWORD v612[2];
  uint64_t v613;
  _OWORD v614[2];
  uint64_t v615;
  _OWORD v616[2];
  uint64_t v617;

  v5 = (uint64_t)v4;
  v6 = *v4;
  v7 = *(_QWORD *)a1 >> 11;
  v458 = a1;
  v459 = *v4;
  v487 = *((_QWORD *)a1 + 4) >> 11;
  v471 = v7;
  v455 = v487 - v7;
  if (v487 == v7)
  {
    v446 = *(_QWORD *)a1 >> 11;
    v477 = v446;
    goto LABEL_186;
  }
  v464 = *(uint64_t **)a1;
  v450 = v4;
  *(_QWORD *)&v534 = *(_QWORD *)a1 >> 11;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(v6 + 72);
  v11 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88);
  swift_unknownObjectRetain_n();
  v12 = specialized Rope.find<A>(at:in:preferEnd:)(v7, 0, v8, v9, v11, v10);
  v14 = v13;
  v16 = v15;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v12, v14, v16, v8, v9, v11, v10);
  swift_unknownObjectRelease_n();
  v17 = *(_QWORD *)(v6 + 64);
  v18 = *(_QWORD *)(v6 + 72);
  v20 = *(_QWORD *)(v6 + 80);
  v19 = *(_QWORD *)(v6 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v12, v14, v16, v17, v18, v20, v19);
  v492 = v21;
  swift_unknownObjectRelease();
  v22 = swift_bridgeObjectRetain();
  v23 = specialized _NativeDictionary.filter(_:)(v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v25 = 0;
  *(_QWORD *)&v599 = result;
  v26 = 1 << *(_BYTE *)(v23 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v5 = v23 + 64;
  v28 = v27 & *(_QWORD *)(v23 + 64);
  v29 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v31 = v30 | (v25 << 6);
      goto LABEL_7;
    }
    v35 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_475:
      swift_release();
      v5 = v492 + 64;
      v404 = *(_QWORD *)(v492 + 64);
      v405 = 1 << *(_BYTE *)(v492 + 32);
      result = swift_bridgeObjectRelease();
      v406 = 0;
      v407 = -1;
      if (v405 < 64)
        v407 = ~(-1 << v405);
      v408 = v407 & v404;
      v409 = (unint64_t)(v405 + 63) >> 6;
      v476 = v492 + 64;
      v486 = v409;
      v470 = v409 - 5;
      v461 = v409 - 1;
      while (!v408)
      {
        v415 = v406 + 1;
        if (__OFADD__(v406, 1))
          goto LABEL_598;
        if (v415 < v486)
        {
          v416 = *(_QWORD *)(v476 + 8 * v415);
          if (v416)
            goto LABEL_487;
          if ((uint64_t)(v406 + 2) >= v486)
          {
            ++v406;
          }
          else
          {
            v416 = *(_QWORD *)(v476 + 8 * (v406 + 2));
            if (v416)
            {
              v415 = v406 + 2;
              goto LABEL_487;
            }
            if ((uint64_t)(v406 + 3) >= v486)
            {
              v406 += 2;
            }
            else
            {
              v416 = *(_QWORD *)(v476 + 8 * (v406 + 3));
              if (v416)
              {
                v415 = v406 + 3;
LABEL_487:
                v408 = (v416 - 1) & v416;
                v411 = __clz(__rbit64(v416)) + (v415 << 6);
                v406 = v415;
LABEL_483:
                v412 = *(_QWORD *)(v492 + 56);
                v413 = (_QWORD *)(*(_QWORD *)(v492 + 48) + 16 * v411);
                v414 = v413[1];
                *(_QWORD *)&v508 = *v413;
                *((_QWORD *)&v508 + 1) = v414;
                outlined init with copy of AttributedString._AttributeValue(v412 + 72 * v411, (uint64_t)&v509);
                swift_bridgeObjectRetain();
                goto LABEL_493;
              }
              v415 = v406 + 4;
              if ((uint64_t)(v406 + 4) >= v486)
              {
                v406 += 3;
              }
              else
              {
                v416 = *(_QWORD *)(v476 + 8 * v415);
                if (v416)
                  goto LABEL_487;
                while (v470 != v406)
                {
                  v416 = *(_QWORD *)(v492 + 104 + 8 * v406++);
                  if (v416)
                  {
                    v415 = v406 + 4;
                    goto LABEL_487;
                  }
                }
                v406 = v461;
              }
            }
          }
        }
        v408 = 0;
        v511 = 0u;
        memset(v512, 0, sizeof(v512));
        v509 = 0u;
        v510 = 0u;
        v508 = 0u;
LABEL_493:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v508, (uint64_t)&v525);
        v110 = *((_QWORD *)&v525 + 1);
        if (!*((_QWORD *)&v525 + 1))
          goto LABEL_517;
        v417 = v525;
        *(_OWORD *)v523 = v528;
        *(_OWORD *)&v523[16] = v529;
        v524 = v530;
        v521 = v526;
        v522 = v527;
        v5 = *((_QWORD *)&v528 + 1);
        v418 = v529;
        if ((_QWORD)v529 == 1)
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
LABEL_479:
          swift_bridgeObjectRelease();
          goto LABEL_480;
        }
        v508 = *(_OWORD *)&v523[8];
        v518 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v5, v418);
        v419 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v5, v418);
        if ((v419 & 1) == 0)
          goto LABEL_479;
        specialized Dictionary.subscript.getter(v417, v110, v25, (uint64_t)&v518);
        swift_bridgeObjectRelease();
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
        if (*((_QWORD *)&v509 + 1))
        {
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
          if (!*((_QWORD *)&v513 + 1))
            goto LABEL_555;
          v504 = v514;
          v505 = v515;
          v506 = v516;
          v502 = *(_OWORD *)&v512[8];
          v503 = v513;
          v420 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
          outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v420 & 1) == 0)
            goto LABEL_557;
        }
        else
        {
          if (*((_QWORD *)&v513 + 1))
            goto LABEL_556;
          outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        }
LABEL_480:
        result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
      }
      v410 = __clz(__rbit64(v408));
      v408 &= v408 - 1;
      v411 = v410 | (v406 << 6);
      goto LABEL_483;
    }
    if (v35 >= v29)
      goto LABEL_27;
    v36 = *(_QWORD *)(v5 + 8 * v35);
    ++v25;
    if (!v36)
    {
      v25 = v35 + 1;
      if (v35 + 1 >= v29)
        goto LABEL_27;
      v36 = *(_QWORD *)(v5 + 8 * v25);
      if (!v36)
      {
        v25 = v35 + 2;
        if (v35 + 2 >= v29)
          goto LABEL_27;
        v36 = *(_QWORD *)(v5 + 8 * v25);
        if (!v36)
        {
          v25 = v35 + 3;
          if (v35 + 3 >= v29)
            goto LABEL_27;
          v36 = *(_QWORD *)(v5 + 8 * v25);
          if (!v36)
          {
            v25 = v35 + 4;
            if (v35 + 4 >= v29)
              goto LABEL_27;
            v36 = *(_QWORD *)(v5 + 8 * v25);
            if (!v36)
              break;
          }
        }
      }
    }
LABEL_26:
    v28 = (v36 - 1) & v36;
    v31 = __clz(__rbit64(v36)) + (v25 << 6);
LABEL_7:
    v32 = (unint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v31);
    v33 = *v32;
    v34 = v32[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v508, v33, v34);
    result = swift_bridgeObjectRelease();
  }
  v37 = v35 + 5;
  if (v37 < v29)
  {
    v36 = *(_QWORD *)(v5 + 8 * v37);
    if (!v36)
    {
      while (1)
      {
        v25 = v37 + 1;
        if (__OFADD__(v37, 1))
          break;
        if (v25 >= v29)
          goto LABEL_27;
        v36 = *(_QWORD *)(v5 + 8 * v25);
        ++v37;
        if (v36)
          goto LABEL_26;
      }
LABEL_576:
      __break(1u);
LABEL_577:
      __break(1u);
LABEL_578:
      __break(1u);
LABEL_579:
      __break(1u);
      goto LABEL_580;
    }
    v25 = v37;
    goto LABEL_26;
  }
LABEL_27:
  swift_release();
  v38 = v599;
  *(_QWORD *)&v525 = v599;
  if (specialized Range.isEmpty.getter(0, v471))
  {
    v39 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v39, 0, (unint64_t *)&v541);
    v40 = v541;
    v41 = v542;
    v42 = v543;
  }
  else
  {
    v43 = *(_QWORD *)(v6 + 64);
    v44 = *(_QWORD *)(v6 + 72);
    v45 = *(_QWORD *)(v6 + 80);
    v46 = *(_QWORD *)(v6 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v43, v44, v45, v46, &v541);
    v478 = v541;
    v465 = v542;
    v42 = v543;
    swift_unknownObjectRelease();
    v41 = v465;
    v40 = v478;
  }
  v599 = v40;
  v600 = v41;
  v47 = *(_QWORD *)(v6 + 64);
  v48 = *(_QWORD *)(v6 + 72);
  v49 = *(_QWORD *)(v6 + 80);
  v50 = *(_QWORD *)(v6 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v466 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v47, v48, v49, v50, (uint64_t *)&v508);
  v52 = v510;
  swift_unknownObjectRelease();
  if (v52 >= v42 || !*(_QWORD *)(v38 + 16))
  {
LABEL_84:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v525 = v487;
    v97 = *(_QWORD *)(v6 + 64);
    v98 = *(_QWORD *)(v6 + 72);
    v99 = *(_QWORD *)(v6 + 80);
    v100 = *(_QWORD *)(v6 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v487 - 1, v466 & 1, v97, v98, v99, v100, (uint64_t *)&v508);
    v493 = v508;
    v480 = v509;
    v101 = v510;
    swift_unknownObjectRelease();
    v612[0] = v493;
    v612[1] = v480;
    v613 = v101;
    v102 = *(_QWORD *)(v6 + 64);
    v103 = *(_QWORD *)(v6 + 72);
    v104 = *(_QWORD *)(v6 + 80);
    v105 = *(_QWORD *)(v6 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.subscript.getter((unint64_t)v612, v102, v103, v104, v105);
    v107 = v106;
    swift_unknownObjectRelease();
    v108 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v107);
    v481 = v109;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110 = *(_QWORD *)(v108 + 16);
    swift_bridgeObjectRetain();
    result = Set.init(minimumCapacity:)();
    v111 = 0;
    *(_QWORD *)&v599 = result;
    v112 = 1 << *(_BYTE *)(v108 + 32);
    v113 = -1;
    if (v112 < 64)
      v113 = ~(-1 << v112);
    v5 = v108 + 64;
    v114 = v113 & *(_QWORD *)(v108 + 64);
    v115 = (unint64_t)(v112 + 63) >> 6;
    while (1)
    {
      if (v114)
      {
        v116 = __clz(__rbit64(v114));
        v114 &= v114 - 1;
        v117 = v116 | (v111 << 6);
        goto LABEL_88;
      }
      v120 = v111 + 1;
      if (__OFADD__(v111, 1))
      {
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v306 = 0;
        v344 = 0;
        v346 = 0;
        v347 = 0;
        goto LABEL_331;
      }
      if (v120 >= v115)
        break;
      v121 = *(_QWORD *)(v5 + 8 * v120);
      ++v111;
      if (!v121)
      {
        v111 = v120 + 1;
        if (v120 + 1 >= v115)
          break;
        v121 = *(_QWORD *)(v5 + 8 * v111);
        if (!v121)
        {
          v111 = v120 + 2;
          if (v120 + 2 >= v115)
            break;
          v121 = *(_QWORD *)(v5 + 8 * v111);
          if (!v121)
          {
            v111 = v120 + 3;
            if (v120 + 3 >= v115)
              break;
            v121 = *(_QWORD *)(v5 + 8 * v111);
            if (!v121)
            {
              v111 = v120 + 4;
              if (v120 + 4 >= v115)
                break;
              v121 = *(_QWORD *)(v5 + 8 * v111);
              if (!v121)
              {
                v122 = v120 + 5;
                if (v122 >= v115)
                  break;
                v121 = *(_QWORD *)(v5 + 8 * v122);
                if (!v121)
                {
                  while (1)
                  {
                    v111 = v122 + 1;
                    if (__OFADD__(v122, 1))
                      break;
                    if (v111 >= v115)
                      goto LABEL_108;
                    v121 = *(_QWORD *)(v5 + 8 * v111);
                    ++v122;
                    if (v121)
                      goto LABEL_107;
                  }
LABEL_580:
                  __break(1u);
LABEL_581:
                  __break(1u);
LABEL_582:
                  __break(1u);
LABEL_583:
                  __break(1u);
LABEL_584:
                  __break(1u);
LABEL_585:
                  __break(1u);
LABEL_586:
                  __break(1u);
LABEL_587:
                  __break(1u);
LABEL_588:
                  __break(1u);
LABEL_589:
                  __break(1u);
LABEL_590:
                  __break(1u);
LABEL_591:
                  __break(1u);
LABEL_592:
                  __break(1u);
LABEL_593:
                  __break(1u);
LABEL_594:
                  __break(1u);
LABEL_595:
                  __break(1u);
LABEL_596:
                  __break(1u);
LABEL_597:
                  __break(1u);
LABEL_598:
                  __break(1u);
LABEL_599:
                  __break(1u);
LABEL_600:
                  __break(1u);
LABEL_601:
                  __break(1u);
LABEL_602:
                  if (!v5)
                    __break(1u);
LABEL_604:
                  __break(1u);
LABEL_605:
                  if (!v5)
                    __break(1u);
LABEL_607:
                  __break(1u);
                  return result;
                }
                v111 = v122;
              }
            }
          }
        }
      }
LABEL_107:
      v114 = (v121 - 1) & v121;
      v117 = __clz(__rbit64(v121)) + (v111 << 6);
LABEL_88:
      v118 = (uint64_t *)(*(_QWORD *)(v108 + 48) + 16 * v117);
      v110 = *v118;
      v119 = v118[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v508, v110, v119);
      result = swift_bridgeObjectRelease();
    }
LABEL_108:
    swift_release();
    *(_QWORD *)&v521 = v599;
    v123 = *(_OWORD *)(v6 + 32);
    v609 = *(_OWORD *)(v6 + 16);
    v610 = v123;
    v611 = *(_OWORD *)(v6 + 48);
    BigString.utf8.getter();
    v124 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v544);
    if (v124 < v487)
    {
LABEL_572:
      __break(1u);
      goto LABEL_573;
    }
    v494 = v124;
    v125 = *(_QWORD *)(v6 + 64);
    v126 = *(_QWORD *)(v6 + 72);
    v127 = *(_QWORD *)(v6 + 80);
    v128 = *(_QWORD *)(v6 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v487, v466 & 1, v125, v126, v127, v128, (uint64_t *)&v508);
    v467 = v508;
    v130 = *((_QWORD *)&v509 + 1);
    v129 = v509;
    v5 = v510;
    swift_unknownObjectRelease();
    v508 = v467;
    v509 = __PAIR128__(v130, v129);
    v131 = v487;
    v132 = v494;
    *(_QWORD *)&v510 = v5;
    v464 = &v546;
    while (2)
    {
      if (v131 == v132)
      {
        AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)v6, v131, v545);
        v136 = &v546;
      }
      else
      {
        v137 = *(_QWORD *)(v6 + 72);
        v138 = *(_QWORD *)(v6 + 80);
        v139 = *(_QWORD *)(v6 + 88);
        v140 = swift_unknownObjectRetain();
        v141 = v137;
        v132 = v494;
        AttributedString._InternalRuns.endIndex.getter(v140, v141, v138, v139, v547);
        swift_unknownObjectRelease();
        v136 = &v548;
      }
      if (v5 >= *v136 || !*(_QWORD *)(v521 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        result = swift_bridgeObjectRelease();
        if ((uint64_t)v525 < (uint64_t)v534)
        {
LABEL_573:
          __break(1u);
LABEL_574:
          __break(1u);
LABEL_575:
          __break(1u);
          goto LABEL_576;
        }
        v477 = v525;
        v446 = v534;
        v5 = (uint64_t)v450;
LABEL_186:
        v172 = *(_OWORD *)(v6 + 32);
        v606 = *(_OWORD *)(v6 + 16);
        v607 = v172;
        v608 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        v495 = BigString.UTF8View.count.getter();
        outlined release of Locale((uint64_t)v549);
        v173 = *(_OWORD *)(v6 + 32);
        v534 = *(_OWORD *)(v6 + 16);
        v535 = v173;
        v174 = *(_OWORD *)(v5 + 8);
        v536 = *(_OWORD *)(v6 + 48);
        v537 = v174;
        v175 = *(_OWORD *)(v5 + 40);
        v538 = *(_OWORD *)(v5 + 24);
        v539 = v175;
        v540 = *(_OWORD *)(v5 + 56);
        swift_unknownObjectRetain();
        BigString.init()();
        v176 = v551;
        *(_OWORD *)(v6 + 16) = v550;
        *(_OWORD *)(v6 + 32) = v176;
        *(_OWORD *)(v6 + 48) = v552;
        swift_unknownObjectRelease();
        a4(&v534, v458);
        v603 = v538;
        v604 = v539;
        v605 = v540;
        v599 = v534;
        v600 = v535;
        v602 = v537;
        v601 = v536;
        v177 = v537;
        v178 = v538;
        v179 = v539;
        v181 = *((_QWORD *)&v540 + 1);
        v180 = v540;
        BigSubstring.UnicodeScalarView.base.getter();
        v182 = v563;
        *(_OWORD *)(v459 + 16) = v562;
        *(_OWORD *)(v459 + 32) = v182;
        *(_OWORD *)(v459 + 48) = v564;
        swift_unknownObjectRelease();
        v183 = v180;
        v61 = v459;
        specialized Range.init(uncheckedBounds:)(v177, *((uint64_t *)&v177 + 1), v178, *((uint64_t *)&v178 + 1), v179, *((uint64_t *)&v179 + 1), v183, v181, &v508);
        v184 = v509;
        *(_OWORD *)(v5 + 8) = v508;
        *(_OWORD *)(v5 + 24) = v184;
        v185 = v511;
        *(_OWORD *)(v5 + 40) = v510;
        *(_OWORD *)(v5 + 56) = v185;
        v186 = *(_OWORD *)(v459 + 32);
        v596 = *(_OWORD *)(v459 + 16);
        v597 = v186;
        v598 = *(_OWORD *)(v459 + 48);
        BigString.utf8.getter();
        v187 = BigString.UTF8View.count.getter();
        result = outlined release of Locale((uint64_t)v553);
        v188 = v187 - v495;
        if (__OFSUB__(v187, v495))
        {
          __break(1u);
        }
        else
        {
          v189 = v455 + v188;
          if (!__OFADD__(v455, v188))
          {
            v5 = v459 + 16;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v471, v487, v189, a2, a3);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v190 = *(_OWORD *)(v459 + 32);
            v593 = *(_OWORD *)(v459 + 16);
            v594 = v190;
            v458 = (__int128 *)(v459 + 16);
            v595 = *(_OWORD *)(v459 + 48);
            BigString.utf8.getter();
            v191 = BigString.UTF8View.count.getter();
            result = outlined release of Locale((uint64_t)v554);
            v192 = v191 - v495;
            if (!__OFSUB__(v191, v495))
            {
              if (!__OFADD__(v477, v192))
              {
                if (v477 + v192 >= v446)
                {
                  v193 = *(_QWORD *)(v459 + 80);
                  if (!*(_QWORD *)(v459 + 64))
                  {
                    v231 = swift_unknownObjectRetain();
                    specialized Rope._endPath.getter(v231);
                    swift_unknownObjectRelease();
                    return swift_unknownObjectRelease();
                  }
                  v445 = v477 + v192;
                  v194 = swift_unknownObjectRetain_n();
                  specialized Rope._endPath.getter(v194);
                  swift_unknownObjectRelease_n();
                  if (!v193)
                    return swift_unknownObjectRelease();
                  v195 = *(_OWORD *)(v459 + 32);
                  v590 = *v458;
                  v591 = v195;
                  v592 = *(_OWORD *)(v459 + 48);
                  BigString.utf8.getter();
                  BigString.startIndex.getter();
                  v196 = BigString.UTF8View.index(_:offsetBy:)();
                  v198 = v197;
                  v200 = v199;
                  v5 = v201;
                  outlined release of Locale((uint64_t)v555);
                  v202 = *(_OWORD *)(v459 + 32);
                  v587 = *v458;
                  v588 = v202;
                  v589 = *(_OWORD *)(v459 + 48);
                  result = BigString.utf8.getter();
                  if (__OFSUB__(v445, v446))
                    goto LABEL_577;
                  v203 = BigString.UTF8View.index(_:offsetBy:)();
                  v205 = v204;
                  v207 = v206;
                  v209 = v208;
                  outlined release of Locale((uint64_t)v556);
                  specialized Range.init(uncheckedBounds:)(v196, v198, v200, v5, v203, v205, v207, v209, &v508);
                  v210 = v508;
                  v444 = v510;
                  *(_QWORD *)&v517[0] = MEMORY[0x1E0DEE9E0];
                  v211 = *(_OWORD *)(v459 + 32);
                  v584 = *v458;
                  v585 = v211;
                  v586 = *(_OWORD *)(v459 + 48);
                  BigString.unicodeScalars.getter();
                  v443 = v210;
                  v212 = BigString.UnicodeScalarView.index(roundingDown:)();
                  v214 = v213;
                  v5 = v215;
                  v217 = v216;
                  outlined release of Locale((uint64_t)v557);
                  v218 = *(_OWORD *)(v459 + 32);
                  v581 = *v458;
                  v582 = v218;
                  v583 = *(_OWORD *)(v459 + 48);
                  BigString.unicodeScalars.getter();
                  v219 = BigString.UnicodeScalarView.index(roundingUp:)();
                  result = outlined release of Locale((uint64_t)v558);
                  *(_QWORD *)&v518 = v212;
                  *((_QWORD *)&v518 + 1) = v214;
                  *(_QWORD *)&v519 = v5;
                  *((_QWORD *)&v519 + 1) = v217;
                  v66 = v212 >> 11;
                  v60 = v219 >> 11;
                  if (v219 >> 11 < v212 >> 11)
                    goto LABEL_578;
                  v5 = *(_QWORD *)(v459 + 64);
                  if (v5)
                    v220 = *(_QWORD *)(v459 + 80);
                  else
                    v220 = 0;
                  if (v220 < v66)
                    goto LABEL_579;
                  v221 = *(_QWORD *)(v459 + 72);
                  v62 = *(_QWORD *)(v459 + 88);
                  if (!v5 || v66 >= *(_QWORD *)(v459 + 80) || !*(_WORD *)(v5 + 16))
                  {
                    swift_retain_n();
                    v232 = swift_unknownObjectRetain_n();
                    v233 = specialized Rope._endPath.getter(v232);
                    swift_unknownObjectRelease();
                    v58 = 0;
                    v63 = 0;
                    if (v5)
                      goto LABEL_229;
                    swift_release();
                    v234 = 0;
                    v235 = v66;
                    goto LABEL_230;
                  }
                  v487 = *(_QWORD *)(v459 + 72);
                  v496 = v60;
                  v65 = *(unsigned __int8 *)(v5 + 18);
                  if (*(_BYTE *)(v5 + 18))
                  {
                    swift_unknownObjectRetain_n();
                    result = swift_retain_n();
                    v63 = v212 >> 11;
                    v222 = v5;
                    while (1)
                    {
                      v224 = *(unsigned __int16 *)(v222 + 16);
                      if (!*(_WORD *)(v222 + 16))
                        goto LABEL_205;
                      v225 = *(_QWORD *)(v222 + 40);
                      v226 = v63 - v225;
                      if (__OFSUB__(v63, v225))
                        goto LABEL_552;
                      if (__OFADD__(v226, 1))
                        goto LABEL_553;
                      if (v226 + 1 <= 0)
                      {
                        v224 = 0;
                        goto LABEL_206;
                      }
                      if ((_DWORD)v224 == 1)
                      {
                        v63 -= v225;
                        goto LABEL_205;
                      }
                      v227 = *(_QWORD *)(v222 + 64);
                      v71 = __OFSUB__(v226, v227);
                      v228 = v226 - v227;
                      if (v71)
                        goto LABEL_574;
                      if (__OFADD__(v228, 1))
                        goto LABEL_575;
                      if (v228 + 1 < 1)
                      {
                        v224 = 1;
                        v63 = v226;
                        goto LABEL_206;
                      }
                      if ((_DWORD)v224 == 2)
                      {
                        v63 = v228;
LABEL_205:
                        if (!v63)
                          goto LABEL_206;
                        __break(1u);
LABEL_552:
                        __break(1u);
LABEL_553:
                        __break(1u);
                        goto LABEL_554;
                      }
                      v229 = (_QWORD *)(v222 + 88);
                      v230 = 2;
                      while (1)
                      {
                        if (v224 == v230)
                        {
                          __break(1u);
LABEL_542:
                          __break(1u);
LABEL_543:
                          __break(1u);
LABEL_544:
                          __break(1u);
                          goto LABEL_545;
                        }
                        v63 = v228 - *v229;
                        if (__OFSUB__(v228, *v229))
                          goto LABEL_542;
                        if (__OFADD__(v63, 1))
                          goto LABEL_543;
                        if (v63 + 1 < 1)
                          break;
                        ++v230;
                        v229 += 3;
                        v228 = v63;
                        if (v224 == v230)
                          goto LABEL_205;
                      }
                      v224 = v230;
                      v63 = v228;
LABEL_206:
                      v223 = (4 * *(_BYTE *)(v222 + 18) + 8) & 0x3C;
                      v65 = ((-15 << v223) - 1) & v65 | (v224 << v223);
                      v58 = *(_QWORD *)(v222 + 24 + 24 * v224);
                      swift_unknownObjectRetain();
                      result = swift_unknownObjectRelease();
                      v222 = v58;
                      if (!*(_BYTE *)(v58 + 18))
                        goto LABEL_316;
                    }
                  }
                  swift_unknownObjectRetain_n();
                  result = swift_retain_n();
                  v63 = v212 >> 11;
                  v58 = v5;
LABEL_316:
                  v331 = *(unsigned __int16 *)(v58 + 16);
                  if (*(_WORD *)(v58 + 16))
                  {
                    v332 = *(_QWORD *)(v58 + 24);
                    v333 = v63 - v332;
                    v61 = v459;
                    if (__OFSUB__(v63, v332))
                      goto LABEL_594;
                    if (__OFADD__(v333, 1))
                      goto LABEL_595;
                    if (v333 + 1 <= 0)
                      goto LABEL_342;
                    if ((_DWORD)v331 == 1)
                    {
                      v63 -= v332;
                    }
                    else
                    {
                      v349 = *(_QWORD *)(v58 + 48);
                      v71 = __OFSUB__(v333, v349);
                      v350 = v333 - v349;
                      if (v71)
                        goto LABEL_600;
                      if (__OFADD__(v350, 1))
                        goto LABEL_601;
                      if (v350 + 1 < 1)
                      {
                        v331 = 1;
                        v63 = v333;
                        goto LABEL_519;
                      }
                      if ((_DWORD)v331 != 2)
                      {
                        v402 = (_QWORD *)(v58 + 72);
                        v403 = 2;
                        while (1)
                        {
                          if (v331 == v403)
                            goto LABEL_588;
                          v63 = v350 - *v402;
                          if (__OFSUB__(v350, *v402))
                            goto LABEL_589;
                          if (__OFADD__(v63, 1))
                            goto LABEL_590;
                          if (v63 + 1 < 1)
                            break;
                          ++v403;
                          v402 += 3;
                          v350 = v63;
                          if (v331 == v403)
                            goto LABEL_323;
                        }
                        v331 = v403;
                        v63 = v350;
                        goto LABEL_519;
                      }
                      v63 = v350;
                    }
                  }
                  else
                  {
                    v61 = v459;
                  }
LABEL_323:
                  if (!v63)
                    goto LABEL_519;
                  __break(1u);
                  goto LABEL_325;
                }
                goto LABEL_564;
              }
LABEL_563:
              __break(1u);
LABEL_564:
              __break(1u);
LABEL_565:
              __break(1u);
LABEL_566:
              __break(1u);
LABEL_567:
              __break(1u);
LABEL_568:
              __break(1u);
LABEL_569:
              __break(1u);
LABEL_570:
              __break(1u);
LABEL_571:
              __break(1u);
              goto LABEL_572;
            }
LABEL_562:
            __break(1u);
            goto LABEL_563;
          }
        }
        __break(1u);
        goto LABEL_562;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v508, v131, v132, (_QWORD *)v6, (uint64_t *)&v521, v108, v481, (uint64_t)&v525);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v142 = v508;
      v143 = v509;
      v144 = v510;
      v145 = *(_QWORD *)(v6 + 64);
      v146 = *(_QWORD *)(v6 + 72);
      v147 = *(_QWORD *)(v6 + 80);
      v148 = *(_QWORD *)(v6 + 88);
      v599 = v508;
      *(_QWORD *)&v600 = v509;
      v149 = *((_QWORD *)&v509 + 1) + 1;
      if (__OFADD__(*((_QWORD *)&v509 + 1), 1))
        goto LABEL_523;
      swift_unknownObjectRetain();
      v150 = specialized Rope.subscript.getter(v142, *((unint64_t *)&v142 + 1), v143, v145, v146, v147, v148);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v144 + v150;
      if (__OFADD__(v144, v150))
        goto LABEL_524;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v599, v145, v146, v147, v148);
      swift_unknownObjectRelease_n();
      v132 = v494;
      if (v5 < v494)
      {
        v133 = *((_QWORD *)&v599 + 1);
        v134 = v599;
        v135 = v600;
        v131 = v487;
      }
      else
      {
        v151 = *(_QWORD *)(v459 + 64);
        v149 = *(_QWORD *)(v459 + 72);
        v5 = *(_QWORD *)(v459 + 80);
        v134 = *(_QWORD *)(v459 + 88);
        v131 = v487;
        if (v487 == v494)
        {
          if (v151)
            v152 = *(_QWORD *)(v459 + 80);
          else
            v152 = 0;
          if (v152 < v487)
          {
LABEL_546:
            __break(1u);
LABEL_547:
            __break(1u);
LABEL_548:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_549:
            outlined destroy of Any?((uint64_t)&v508, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_550:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
            goto LABEL_558;
          }
          if (v151 && v487 < v5 && *(_WORD *)(v151 + 16))
          {
            v153 = *(unsigned __int8 *)(v151 + 18);
            if (*(_BYTE *)(v151 + 18))
            {
              swift_unknownObjectRetain_n();
              v154 = v487;
              v110 = v151;
              while (1)
              {
                v156 = *(unsigned __int16 *)(v110 + 16);
                if (!*(_WORD *)(v110 + 16))
                  goto LABEL_131;
                v157 = *(_QWORD *)(v110 + 40);
                v158 = v154 - v157;
                if (__OFSUB__(v154, v157))
                  goto LABEL_526;
                if (__OFADD__(v158, 1))
                  goto LABEL_527;
                if (v158 + 1 <= 0)
                {
                  v156 = 0;
                }
                else
                {
                  if ((_DWORD)v156 == 1)
                  {
                    v154 -= v157;
                    goto LABEL_131;
                  }
                  v159 = *(_QWORD *)(v110 + 64);
                  v71 = __OFSUB__(v158, v159);
                  v160 = v158 - v159;
                  if (v71)
                    goto LABEL_544;
                  if (__OFADD__(v160, 1))
                  {
LABEL_545:
                    __break(1u);
                    goto LABEL_546;
                  }
                  if (v160 + 1 < 1)
                  {
                    v156 = 1;
                    v154 = v158;
                  }
                  else
                  {
                    if ((_DWORD)v156 == 2)
                    {
                      v154 = v160;
LABEL_131:
                      if (v154)
                        goto LABEL_525;
                      goto LABEL_132;
                    }
                    v161 = (_QWORD *)(v110 + 88);
                    v162 = 2;
                    while (1)
                    {
                      if (v156 == v162)
                        goto LABEL_514;
                      v154 = v160 - *v161;
                      if (__OFSUB__(v160, *v161))
                        goto LABEL_515;
                      if (__OFADD__(v154, 1))
                        goto LABEL_516;
                      if (v154 + 1 < 1)
                        break;
                      ++v162;
                      v161 += 3;
                      v160 = v154;
                      if (v156 == v162)
                        goto LABEL_131;
                    }
                    v156 = v162;
                    v154 = v160;
                  }
                }
LABEL_132:
                v155 = (4 * *(_BYTE *)(v110 + 18) + 8) & 0x3C;
                v153 = ((-15 << v155) - 1) & v153 | (v156 << v155);
                v135 = *(_QWORD *)(v110 + 24 + 24 * v156);
                swift_unknownObjectRetain();
                result = swift_unknownObjectRelease();
                v110 = v135;
                if (!*(_BYTE *)(v135 + 18))
                  goto LABEL_161;
              }
            }
            result = swift_unknownObjectRetain_n();
            v154 = v487;
            v135 = v151;
LABEL_161:
            v165 = *(unsigned __int16 *)(v135 + 16);
            if (!*(_WORD *)(v135 + 16))
              goto LABEL_180;
            v166 = *(_QWORD *)(v135 + 24);
            v167 = v154 - v166;
            if (__OFSUB__(v154, v166))
              goto LABEL_582;
            if (__OFADD__(v167, 1))
              goto LABEL_583;
            if (v167 + 1 <= 0)
            {
              v165 = 0;
            }
            else
            {
              if ((_DWORD)v165 == 1)
              {
                v154 -= v166;
                goto LABEL_180;
              }
              v168 = *(_QWORD *)(v135 + 48);
              v71 = __OFSUB__(v167, v168);
              v169 = v167 - v168;
              if (v71)
                goto LABEL_591;
              if (__OFADD__(v169, 1))
                goto LABEL_592;
              if (v169 + 1 < 1)
              {
                v165 = 1;
                v154 = v167;
              }
              else
              {
                if ((_DWORD)v165 == 2)
                {
                  v154 = v169;
LABEL_180:
                  if (v154)
                    goto LABEL_581;
                  goto LABEL_181;
                }
                v170 = (_QWORD *)(v135 + 72);
                v171 = 2;
                while (1)
                {
                  if (v165 == v171)
                    goto LABEL_569;
                  v154 = v169 - *v170;
                  if (__OFSUB__(v169, *v170))
                    goto LABEL_570;
                  if (__OFADD__(v154, 1))
                    goto LABEL_571;
                  if (v154 + 1 < 1)
                    break;
                  ++v171;
                  v170 += 3;
                  v169 = v154;
                  if (v165 == v171)
                    goto LABEL_180;
                }
                v165 = v171;
                v154 = v169;
              }
            }
LABEL_181:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v133 = v153 & 0xFFFFFFFFFFFFF0FFLL | (v165 << 8);
            v132 = v494;
LABEL_156:
            swift_unknownObjectRetain();
            v149 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v134, v133, v135, v151, v149);
            swift_unknownObjectRelease_n();
            v5 = v487 - v154;
            if (__OFSUB__(v487, v154))
              goto LABEL_547;
            goto LABEL_111;
          }
          v164 = swift_unknownObjectRetain_n();
          v133 = specialized Rope._endPath.getter(v164);
          swift_unknownObjectRelease();
          v135 = 0;
          v154 = 0;
          if (v151)
            goto LABEL_156;
          v149 = 0;
          v5 = v487;
        }
        else
        {
          v163 = swift_unknownObjectRetain();
          v133 = specialized Rope._endPath.getter(v163);
          if (v151)
          {
            swift_unknownObjectRelease();
            v135 = 0;
          }
          else
          {
            v135 = 0;
            v149 = 0;
            v5 = 0;
          }
        }
      }
LABEL_111:
      *(_QWORD *)&v508 = v134;
      *((_QWORD *)&v508 + 1) = v133;
      *(_QWORD *)&v509 = v135;
      *((_QWORD *)&v509 + 1) = v149;
      *(_QWORD *)&v510 = v5;
      v6 = v459;
      continue;
    }
  }
  v479 = v23;
  while (1)
  {
    v53 = v599;
    v54 = (_QWORD *)v6;
    v55 = *((_QWORD *)&v599 + 1);
    v56 = v600;
    v57 = v54[8];
    v58 = v54[10];
    v5 = v54[11];
    v59 = swift_unknownObjectRetain();
    result = specialized Rope._endPath.getter(v59);
    if (!v57)
      break;
    result = swift_unknownObjectRelease();
    if (v42 == v58)
      goto LABEL_35;
LABEL_57:
    v76 = *(_QWORD *)(v459 + 64);
    v77 = *(_QWORD *)(v459 + 72);
    v5 = *(_QWORD *)(v459 + 80);
    v78 = *(_QWORD *)(v459 + 88);
    *(_QWORD *)&v508 = v53;
    *((_QWORD *)&v508 + 1) = v55;
    *(_QWORD *)&v509 = v56;
    v79 = *((_QWORD *)&v56 + 1) - 1;
    if (__OFSUB__(*((_QWORD *)&v56 + 1), 1))
      goto LABEL_565;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(before:)((uint64_t)&v508, v76, v77, v5, v78);
    v80 = *((_QWORD *)&v508 + 1);
    v62 = v508;
    v58 = v509;
    v81 = specialized Rope.subscript.getter(v508, *((unint64_t *)&v508 + 1), v509, v76, v77, v5, v78);
    v5 = v82;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v83 = v42 - v81;
    if (__OFSUB__(v42, v81))
      goto LABEL_566;
    v64 = v471;
    v84 = v479;
LABEL_82:
    *(_QWORD *)&v599 = v62;
    *((_QWORD *)&v599 + 1) = v80;
    *(_QWORD *)&v600 = v58;
    *((_QWORD *)&v600 + 1) = v79;
    *(_QWORD *)&v601 = v83;
    swift_retain();
    swift_bridgeObjectRetain();
    v6 = v459;
    specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v599, 0, v64, (_QWORD *)v459, (uint64_t *)&v525, v84, v492, (uint64_t)&v534);
    swift_bridgeObjectRelease();
    swift_release();
    v42 = v601;
    v92 = *(_QWORD *)(v459 + 64);
    v93 = *(_QWORD *)(v459 + 72);
    v94 = *(_QWORD *)(v459 + 80);
    v95 = *(_QWORD *)(v459 + 88);
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v466 & 1, v92, v93, v94, v95, (uint64_t *)&v508);
    v96 = v510;
    swift_unknownObjectRelease();
    if (v96 >= v42 || !*(_QWORD *)(v525 + 16))
      goto LABEL_84;
  }
  if (v42)
    goto LABEL_57;
LABEL_35:
  v60 = *(_QWORD *)(v459 + 64);
  v61 = *(_QWORD *)(v459 + 72);
  v63 = *(_QWORD *)(v459 + 80);
  v62 = *(_QWORD *)(v459 + 88);
  if (!v60)
  {
    v64 = v471;
    if ((unint64_t)v464 >= 0x800)
      goto LABEL_584;
    goto LABEL_61;
  }
  v64 = v471;
  if (v63 < v471)
    goto LABEL_568;
  if (!*(_WORD *)(v60 + 16))
  {
LABEL_61:
    swift_unknownObjectRetain_n();
    v80 = specialized Rope._endPath.getter(v60);
    result = swift_unknownObjectRelease();
    v58 = 0;
    v5 = 0;
    if (!v60)
    {
      v79 = 0;
LABEL_81:
      v84 = v479;
      v83 = v64 - v5;
      if (__OFSUB__(v64, v5))
        goto LABEL_567;
      goto LABEL_82;
    }
LABEL_62:
    swift_unknownObjectRetain();
    v79 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v80, v58, v60, v61);
    result = swift_unknownObjectRelease_n();
    goto LABEL_81;
  }
  v65 = *(unsigned __int8 *)(v60 + 18);
  if (!*(_BYTE *)(v60 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v5 = v471;
    v58 = v60;
LABEL_64:
    v85 = *(unsigned __int16 *)(v58 + 16);
    if (!*(_WORD *)(v58 + 16))
      goto LABEL_605;
    v86 = *(_QWORD *)(v58 + 24);
    v71 = __OFSUB__(v5, v86);
    v87 = v5 - v86;
    if (v71)
      goto LABEL_585;
    if (v87 <= 0)
    {
      v90 = 0;
    }
    else
    {
      if ((_DWORD)v85 == 1)
        goto LABEL_607;
      v88 = *(_QWORD *)(v58 + 48);
      v5 = v87 - v88;
      if (__OFSUB__(v87, v88))
        goto LABEL_586;
      if (v5 >= 1)
      {
        if ((_DWORD)v85 == 2)
          goto LABEL_607;
        v89 = (_QWORD *)(v58 + 72);
        v90 = 2;
        while (v85 != v90)
        {
          v91 = v5 - *v89;
          if (__OFSUB__(v5, *v89))
            goto LABEL_534;
          if (v91 < 1)
            goto LABEL_79;
          ++v90;
          v89 += 3;
          v5 = v91;
          if (v85 == v90)
            goto LABEL_607;
        }
        __break(1u);
LABEL_534:
        __break(1u);
LABEL_535:
        __break(1u);
LABEL_536:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_537:
        outlined destroy of Any?((uint64_t)&v508, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_538:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
        goto LABEL_539;
      }
      v5 = v87;
      v90 = 1;
    }
LABEL_79:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v80 = v65 & 0xFFFFFFFFFFFFF0FFLL | (v90 << 8);
    v64 = v471;
    goto LABEL_62;
  }
  result = swift_unknownObjectRetain_n();
  v5 = v471;
  v66 = v60;
  while (1)
  {
    v69 = *(unsigned __int16 *)(v66 + 16);
    if (!*(_WORD *)(v66 + 16))
      goto LABEL_602;
    v70 = *(_QWORD *)(v66 + 40);
    v71 = __OFSUB__(v5, v70);
    v72 = v5 - v70;
    if (v71)
      goto LABEL_528;
    if (v72 > 0)
      break;
    v67 = 0;
LABEL_41:
    v68 = (4 * *(_BYTE *)(v66 + 18) + 8) & 0x3C;
    v65 = ((-15 << v68) - 1) & v65 | (v67 << v68);
    v58 = *(_QWORD *)(v66 + 24 + 24 * v67);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    v66 = v58;
    if (!*(_BYTE *)(v58 + 18))
      goto LABEL_64;
  }
  if ((_DWORD)v69 == 1)
    goto LABEL_604;
  v73 = *(_QWORD *)(v66 + 64);
  v5 = v72 - v73;
  if (__OFSUB__(v72, v73))
    goto LABEL_535;
  if (v5 < 1)
  {
    v5 = v72;
    v67 = 1;
    goto LABEL_41;
  }
  if ((_DWORD)v69 == 2)
    goto LABEL_604;
  v74 = (_QWORD *)(v66 + 88);
  v67 = 2;
  while (v69 != v67)
  {
    v75 = v5 - *v74;
    if (__OFSUB__(v5, *v74))
      goto LABEL_341;
    if (v75 < 1)
      goto LABEL_41;
    ++v67;
    v74 += 3;
    v5 = v75;
    if (v69 == v67)
      goto LABEL_604;
  }
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  v331 = 0;
LABEL_519:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v233 = v65 & 0xFFFFFFFFFFFFF0FFLL | (v331 << 8);
  v221 = v487;
LABEL_229:
  swift_unknownObjectRetain();
  v234 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v233, v58, v5, v221);
  swift_release();
  swift_unknownObjectRelease_n();
  v235 = v66 - v63;
  if (__OFSUB__(v66, v63))
  {
    __break(1u);
LABEL_522:
    __break(1u);
LABEL_523:
    __break(1u);
LABEL_524:
    __break(1u);
LABEL_525:
    __break(1u);
LABEL_526:
    __break(1u);
LABEL_527:
    __break(1u);
LABEL_528:
    __break(1u);
LABEL_529:
    __break(1u);
LABEL_530:
    outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_531:
    outlined destroy of Any?((uint64_t)&v508, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_532:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
LABEL_539:
    swift_release();
    v66 = (int64_t)v464;
    goto LABEL_540;
  }
LABEL_230:
  *(_QWORD *)&v521 = v61;
  *((_QWORD *)&v521 + 1) = v66;
  *(_QWORD *)&v522 = v60;
  *((_QWORD *)&v522 + 1) = v62;
  *(_QWORD *)v523 = v233;
  *(_QWORD *)&v523[8] = v58;
  *(_QWORD *)&v523[16] = v234;
  *(_QWORD *)&v523[24] = v235;
  specialized IndexingIterator.next()();
  if (!v236)
  {
    v265 = MEMORY[0x1E0DEE9E0];
    goto LABEL_271;
  }
  v237 = v236;
  v5 = (uint64_t)v458;
  while (1)
  {
    v239 = *(_OWORD *)(v5 + 16);
    v571 = *(_OWORD *)v5;
    v572 = v239;
    v573 = *(_OWORD *)(v5 + 32);
    BigString.utf8.getter();
    v240 = v518;
    v464 = (uint64_t *)*((_QWORD *)&v519 + 1);
    v451 = BigString.UTF8View.index(_:offsetBy:)();
    v447 = v241;
    v448 = v242;
    v449 = v243;
    outlined release of Locale((uint64_t)v559);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v244 = specialized Sequence.contains(where:)(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v244 & 1) != 0 && v451 >> 10 > v240 >> 10)
      break;
LABEL_232:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v518, v451, v447, v449, v448);
    specialized IndexingIterator.next()();
    v237 = v238;
    if (!v238)
      goto LABEL_270;
  }
  v468 = v237 + 64;
  while (2)
  {
    v245 = *(_OWORD *)(v5 + 16);
    v568 = *(_OWORD *)v5;
    v569 = v245;
    v570 = *(_OWORD *)(v5 + 32);
    BigString.unicodeScalars.getter();
    v482 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v560);
    v246 = *(_OWORD *)(v5 + 16);
    v565 = *(_OWORD *)v5;
    v566 = v246;
    v567 = *(_OWORD *)(v5 + 32);
    BigString.unicodeScalars.getter();
    v472 = BigString.UnicodeScalarView.index(after:)();
    v464 = v247;
    outlined release of Locale((uint64_t)v561);
    v248 = 1 << *(_BYTE *)(v237 + 32);
    if (v248 < 64)
      v249 = ~(-1 << v248);
    else
      v249 = -1;
    v5 = v249 & *(_QWORD *)(v237 + 64);
    v250 = (unint64_t)(v248 + 63) >> 6;
    swift_bridgeObjectRetain();
    v251 = 0;
LABEL_242:
    if (v5)
    {
      v252 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v253 = v252 | (v251 << 6);
      goto LABEL_244;
    }
    v257 = v251 + 1;
    if (!__OFADD__(v251, 1))
    {
      if (v257 >= v250)
      {
        v259 = v251;
      }
      else
      {
        v258 = *(_QWORD *)(v468 + 8 * v257);
        if (v258)
        {
LABEL_248:
          v5 = (v258 - 1) & v258;
          v253 = __clz(__rbit64(v258)) + (v257 << 6);
          v251 = v257;
LABEL_244:
          v254 = *(_QWORD *)(v237 + 56);
          v255 = (_QWORD *)(*(_QWORD *)(v237 + 48) + 16 * v253);
          v256 = v255[1];
          *(_QWORD *)&v525 = *v255;
          *((_QWORD *)&v525 + 1) = v256;
          outlined init with copy of AttributedString._AttributeValue(v254 + 72 * v253, (uint64_t)&v526);
          swift_bridgeObjectRetain();
LABEL_251:
          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v525, (uint64_t)&v508);
          v260 = *((_QWORD *)&v508 + 1);
          if (!*((_QWORD *)&v508 + 1))
          {
            swift_release();
            v5 = (uint64_t)v458;
            v240 = v472;
            if (v451 >> 10 <= v472 >> 10)
              goto LABEL_232;
            continue;
          }
          v261 = v508;
          v262 = *((_QWORD *)&v511 + 1);
          v263 = *(_QWORD *)v512;
          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v511 + 1), *(uint64_t *)v512);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v509);
          if (v263 != 1)
          {
            *(_QWORD *)&v525 = v262;
            *((_QWORD *)&v525 + 1) = v263;
            v264 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v262, v263);
            if ((v264 & 0x100000000) == 0 && v482 != (_DWORD)v264)
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v261, v260, v240, v472, (uint64_t *)v517);
          }
          swift_bridgeObjectRelease();
          goto LABEL_242;
        }
        v259 = v251 + 1;
        if (v251 + 2 < v250)
        {
          v258 = *(_QWORD *)(v468 + 8 * (v251 + 2));
          if (v258)
          {
            v257 = v251 + 2;
            goto LABEL_248;
          }
          v259 = v251 + 2;
          if (v251 + 3 < v250)
          {
            v258 = *(_QWORD *)(v468 + 8 * (v251 + 3));
            if (v258)
            {
              v257 = v251 + 3;
              goto LABEL_248;
            }
            v257 = v251 + 4;
            v259 = v251 + 3;
            if (v251 + 4 < v250)
            {
              v258 = *(_QWORD *)(v468 + 8 * v257);
              if (v258)
                goto LABEL_248;
              while (v250 - 5 != v251)
              {
                v258 = *(_QWORD *)(v237 + 104 + 8 * v251++);
                if (v258)
                {
                  v257 = v251 + 4;
                  goto LABEL_248;
                }
              }
              v259 = v250 - 1;
            }
          }
        }
      }
      v5 = 0;
      v530 = 0;
      v528 = 0u;
      v529 = 0u;
      v526 = 0u;
      v527 = 0u;
      v251 = v259;
      v525 = 0u;
      goto LABEL_251;
    }
    break;
  }
  __break(1u);
LABEL_270:
  v265 = *(_QWORD *)&v517[0];
LABEL_271:
  swift_release();
  v266 = 0;
  v267 = v265 + 64;
  v268 = 1 << *(_BYTE *)(v265 + 32);
  v269 = -1;
  if (v268 < 64)
    v269 = ~(-1 << v268);
  v270 = v269 & *(_QWORD *)(v265 + 64);
  v497 = (unint64_t)(v268 + 63) >> 6;
  while (2)
  {
    if (v270)
    {
      v271 = __clz(__rbit64(v270));
      v270 &= v270 - 1;
      v272 = v271 | (v266 << 6);
      goto LABEL_287;
    }
    v71 = __OFADD__(v266++, 1);
    if (v71)
      goto LABEL_529;
    if (v266 >= v497)
    {
LABEL_296:
      swift_release();
      v533 = 1;
      v281 = v443 >> 10;
      v66 = v444 >> 10;
      if (v443 >> 10 != v444 >> 10)
      {
        v307 = v458[1];
        v578 = *v458;
        v579 = v307;
        v580 = v458[2];
        result = BigString.startIndex.getter();
        if (v281 > result >> 10)
        {
          if (__OFSUB__(v446, 1))
            goto LABEL_597;
          v308 = *(_QWORD *)(v459 + 64);
          v309 = *(_QWORD *)(v459 + 72);
          v310 = *(_QWORD *)(v459 + 80);
          v311 = *(_QWORD *)(v459 + 88);
          v312 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
          swift_unknownObjectRetain();
          v312 &= 1u;
          AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v446 - 1, v312, v308, v309, v310, v311, (uint64_t *)&v508);
          v490 = v509;
          v500 = v508;
          v313 = v510;
          swift_unknownObjectRelease();
          v576[0] = v500;
          v576[1] = v490;
          v577 = v313;
          v314 = *(_QWORD *)(v459 + 64);
          v315 = *(_QWORD *)(v459 + 72);
          v316 = *(_QWORD *)(v459 + 80);
          v317 = *(_QWORD *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v446, v312, v314, v315, v316, v317, (uint64_t *)&v508);
          v491 = v509;
          v501 = v508;
          v318 = v510;
          swift_unknownObjectRelease();
          v574[0] = v501;
          v574[1] = v491;
          v575 = v318;
          v319 = *(_QWORD *)(v459 + 64);
          v320 = *(_QWORD *)(v459 + 72);
          v321 = *(_QWORD *)(v459 + 80);
          v322 = *(_QWORD *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.subscript.getter((unint64_t)v576, v319, v320, v321, v322);
          v62 = v323;
          swift_unknownObjectRelease();
          v58 = *(_QWORD *)(v459 + 64);
          v324 = *(_QWORD *)(v459 + 72);
          v325 = *(_QWORD *)(v459 + 80);
          v326 = *(_QWORD *)(v459 + 88);
          swift_unknownObjectRetain();
          AttributedString._InternalRuns.subscript.getter((unint64_t)v574, v58, v324, v325, v326);
          v328 = v327;
          swift_unknownObjectRelease();
          LODWORD(v58) = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v62);
          v496 = v328;
          LODWORD(result) = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v328);
          if ((v58 & 1) != 0 || (result & 1) != 0)
          {
LABEL_325:
            if (((v58 ^ result) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_540:
              v421 = *v458;
              v422 = v458[2];
              v517[1] = v458[1];
              v517[2] = v422;
              v517[0] = v421;
              v423 = *v458;
              v519 = v458[1];
              v520 = v422;
              v518 = v423;
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v518, (uint64_t)v614);
              outlined retain of Locale((uint64_t)v614);
              v424 = BigString.index(before:)();
              v426 = v425;
              v428 = v427;
              v430 = v429;
              outlined release of Locale((uint64_t)v517);
              AttributedString.Guts._paragraphExtending(from:)(v424, v426, v428, v430, (uint64_t)&v525);
              v110 = Range<>._utf8OffsetRange.getter();
              v306 = v431;
              v533 = 0;
LABEL_310:
              v329 = v458[1];
              v507[0] = *v458;
              v507[1] = v329;
              v507[2] = v458[2];
              if (v66 >= (unint64_t)BigString.endIndex.getter() >> 10)
                goto LABEL_330;
              if ((v533 & 1) != 0)
              {
                v330 = v445;
                if (v445 < 1)
                  goto LABEL_330;
              }
              else
              {
                v330 = v445;
                if (v306 >= v445)
                  goto LABEL_330;
              }
              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v330 - 1, v330) & 1) != 0)
              {
                v334 = *v458;
                v335 = v458[2];
                v503 = v458[1];
                v504 = v335;
                v502 = v334;
                v336 = *v458;
                v522 = v458[1];
                *(_OWORD *)v523 = v335;
                v521 = v336;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v521, (uint64_t)v616);
                outlined retain of Locale((uint64_t)v616);
                v337 = BigString.index(before:)();
                v339 = v338;
                v341 = v340;
                v343 = v342;
                outlined release of Locale((uint64_t)&v502);
                AttributedString.Guts._paragraphExtending(from:)(v337, v339, v341, v343, (uint64_t)&v508);
                v344 = Range<>._utf8OffsetRange.getter();
                v346 = v345;
                v347 = 1;
                goto LABEL_331;
              }
LABEL_330:
              v344 = 0;
              v346 = 0;
              v347 = 0;
              goto LABEL_331;
            }
            v464 = (uint64_t *)v66;
            v473 = v62 + 64;
            v351 = 1 << *(_BYTE *)(v62 + 32);
            v352 = -1;
            if (v351 < 64)
              v352 = ~(-1 << v351);
            v353 = v352 & *(_QWORD *)(v62 + 64);
            v354 = (unint64_t)(v351 + 63) >> 6;
            v454 = v354 - 1;
            result = swift_bridgeObjectRetain();
            v5 = 0;
            v483 = v354;
            v460 = v354 - 5;
            while (!v353)
            {
              v360 = v5 + 1;
              if (__OFADD__(v5, 1))
                goto LABEL_587;
              if (v360 < v483)
              {
                v361 = *(_QWORD *)(v473 + 8 * v360);
                if (v361)
                  goto LABEL_362;
                if (v5 + 2 >= v483)
                {
                  ++v5;
                }
                else
                {
                  v361 = *(_QWORD *)(v473 + 8 * (v5 + 2));
                  if (v361)
                  {
                    v360 = v5 + 2;
                    goto LABEL_362;
                  }
                  if (v5 + 3 >= v483)
                  {
                    v5 += 2;
                  }
                  else
                  {
                    v361 = *(_QWORD *)(v473 + 8 * (v5 + 3));
                    if (v361)
                    {
                      v360 = v5 + 3;
LABEL_362:
                      v353 = (v361 - 1) & v361;
                      v356 = __clz(__rbit64(v361)) + (v360 << 6);
                      v5 = v360;
LABEL_358:
                      v357 = *(_QWORD *)(v62 + 56);
                      v358 = (_QWORD *)(*(_QWORD *)(v62 + 48) + 16 * v356);
                      v359 = v358[1];
                      *(_QWORD *)&v508 = *v358;
                      *((_QWORD *)&v508 + 1) = v359;
                      outlined init with copy of AttributedString._AttributeValue(v357 + 72 * v356, (uint64_t)&v509);
                      swift_bridgeObjectRetain();
                      goto LABEL_368;
                    }
                    v360 = v5 + 4;
                    if (v5 + 4 >= v483)
                    {
                      v5 += 3;
                    }
                    else
                    {
                      v361 = *(_QWORD *)(v473 + 8 * v360);
                      if (v361)
                        goto LABEL_362;
                      while (v460 != v5)
                      {
                        v361 = *(_QWORD *)(v62 + 104 + 8 * v5++);
                        if (v361)
                        {
                          v360 = v5 + 4;
                          goto LABEL_362;
                        }
                      }
                      v5 = v454;
                    }
                  }
                }
              }
              v353 = 0;
              v511 = 0u;
              memset(v512, 0, sizeof(v512));
              v509 = 0u;
              v510 = 0u;
              v508 = 0u;
LABEL_368:
              outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v508, (uint64_t)&v525);
              v362 = *((_QWORD *)&v525 + 1);
              if (!*((_QWORD *)&v525 + 1))
              {
                swift_release();
                v368 = *(_QWORD *)(v496 + 64);
                v369 = 1 << *(_BYTE *)(v496 + 32);
                result = swift_bridgeObjectRelease();
                v370 = 0;
                v371 = -1;
                if (v369 < 64)
                  v371 = ~(-1 << v369);
                v5 = v371 & v368;
                v372 = (unint64_t)(v369 + 63) >> 6;
                v456 = v372 - 1;
                v474 = v496 + 64;
                v484 = v372;
                v469 = v372 - 5;
                while (!v5)
                {
                  while (1)
                  {
                    v378 = v370 + 1;
                    if (__OFADD__(v370, 1))
                      goto LABEL_593;
                    if (v378 < v484)
                    {
                      v379 = *(_QWORD *)(v474 + 8 * v378);
                      if (v379)
                        goto LABEL_399;
                      if ((uint64_t)(v370 + 2) >= v484)
                      {
                        ++v370;
                      }
                      else
                      {
                        v379 = *(_QWORD *)(v474 + 8 * (v370 + 2));
                        if (v379)
                        {
                          v378 = v370 + 2;
                          goto LABEL_399;
                        }
                        if ((uint64_t)(v370 + 3) >= v484)
                        {
                          v370 += 2;
                        }
                        else
                        {
                          v379 = *(_QWORD *)(v474 + 8 * (v370 + 3));
                          if (v379)
                          {
                            v378 = v370 + 3;
LABEL_399:
                            v5 = (v379 - 1) & v379;
                            v374 = __clz(__rbit64(v379)) + (v378 << 6);
                            v370 = v378;
LABEL_395:
                            v375 = *(_QWORD *)(v496 + 56);
                            v376 = (_QWORD *)(*(_QWORD *)(v496 + 48) + 16 * v374);
                            v377 = v376[1];
                            *(_QWORD *)&v508 = *v376;
                            *((_QWORD *)&v508 + 1) = v377;
                            outlined init with copy of AttributedString._AttributeValue(v375 + 72 * v374, (uint64_t)&v509);
                            swift_bridgeObjectRetain();
                            goto LABEL_405;
                          }
                          v378 = v370 + 4;
                          if ((uint64_t)(v370 + 4) >= v484)
                          {
                            v370 += 3;
                          }
                          else
                          {
                            v379 = *(_QWORD *)(v474 + 8 * v378);
                            if (v379)
                              goto LABEL_399;
                            while (v469 != v370)
                            {
                              v379 = *(_QWORD *)(v496 + 104 + 8 * v370++);
                              if (v379)
                              {
                                v378 = v370 + 4;
                                goto LABEL_399;
                              }
                            }
                            v370 = v456;
                          }
                        }
                      }
                    }
                    v5 = 0;
                    v511 = 0u;
                    memset(v512, 0, sizeof(v512));
                    v509 = 0u;
                    v510 = 0u;
                    v508 = 0u;
LABEL_405:
                    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v508, (uint64_t)&v525);
                    v110 = *((_QWORD *)&v525 + 1);
                    if (!*((_QWORD *)&v525 + 1))
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v306 = 0;
                      goto LABEL_310;
                    }
                    v380 = v525;
                    *(_OWORD *)v523 = v528;
                    *(_OWORD *)&v523[16] = v529;
                    v524 = v530;
                    v521 = v526;
                    v522 = v527;
                    v381 = *((_QWORD *)&v528 + 1);
                    v382 = v529;
                    if ((_QWORD)v529 == 1)
                      break;
                    v508 = *(_OWORD *)&v523[8];
                    v518 = 0uLL;
                    outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
                    outlined copy of AttributedString.AttributeRunBoundaries?(v381, v382);
                    v383 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
                    swift_bridgeObjectRelease();
                    outlined consume of AttributedString.AttributeRunBoundaries?(v381, v382);
                    if ((v383 & 1) == 0)
                      goto LABEL_392;
                    specialized Dictionary.subscript.getter(v380, v110, v62, (uint64_t)&v518);
                    swift_bridgeObjectRelease();
                    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
                    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
                    outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
                    if (*((_QWORD *)&v509 + 1))
                    {
                      outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
                      if (!*((_QWORD *)&v513 + 1))
                        goto LABEL_536;
                      v504 = v514;
                      v505 = v515;
                      v506 = v516;
                      v502 = *(_OWORD *)&v512[8];
                      v503 = v513;
                      v384 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
                      outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
                      outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
                      outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      if ((v384 & 1) == 0)
                        goto LABEL_538;
                    }
                    else
                    {
                      if (*((_QWORD *)&v513 + 1))
                        goto LABEL_537;
                      outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    }
                    result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
                    if (v5)
                      goto LABEL_394;
                  }
                  outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1);
                  outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
LABEL_392:
                  swift_bridgeObjectRelease();
                  result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
                }
LABEL_394:
                v373 = __clz(__rbit64(v5));
                v5 &= v5 - 1;
                v374 = v373 | (v370 << 6);
                goto LABEL_395;
              }
              v363 = v525;
              *(_OWORD *)v523 = v528;
              *(_OWORD *)&v523[16] = v529;
              v524 = v530;
              v521 = v526;
              v522 = v527;
              v364 = *((_QWORD *)&v528 + 1);
              v365 = v529;
              if ((_QWORD)v529 == 1)
              {
                outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1);
                outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
LABEL_354:
                swift_bridgeObjectRelease();
                goto LABEL_355;
              }
              v508 = *(_OWORD *)&v523[8];
              v518 = 0uLL;
              outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
              outlined copy of AttributedString.AttributeRunBoundaries?(v364, v365);
              v366 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
              swift_bridgeObjectRelease();
              outlined consume of AttributedString.AttributeRunBoundaries?(v364, v365);
              if ((v366 & 1) == 0)
                goto LABEL_354;
              specialized Dictionary.subscript.getter(v363, v362, v496, (uint64_t)&v518);
              swift_bridgeObjectRelease();
              outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
              outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
              outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
              if (*((_QWORD *)&v509 + 1))
              {
                outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
                if (!*((_QWORD *)&v513 + 1))
                  goto LABEL_530;
                v504 = v514;
                v505 = v515;
                v506 = v516;
                v502 = *(_OWORD *)&v512[8];
                v503 = v513;
                v367 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
                outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v367 & 1) == 0)
                  goto LABEL_532;
              }
              else
              {
                if (*((_QWORD *)&v513 + 1))
                  goto LABEL_531;
                outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              }
LABEL_355:
              result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
            }
            v355 = __clz(__rbit64(v353));
            v353 &= v353 - 1;
            v356 = v355 | (v5 << 6);
            goto LABEL_358;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v110 = 0;
        v306 = 0;
        goto LABEL_310;
      }
      v282 = v458[1];
      v578 = *v458;
      v579 = v282;
      v580 = v458[2];
      if (v281 <= (unint64_t)BigString.startIndex.getter() >> 10
        || (result = BigString.endIndex.getter(), v281 >= result >> 10))
      {
LABEL_303:
        v110 = 0;
        v306 = 0;
        goto LABEL_330;
      }
      if (__OFSUB__(v446, 1))
        goto LABEL_599;
      v283 = *(_QWORD *)(v459 + 64);
      v284 = *(_QWORD *)(v459 + 72);
      v285 = *(_QWORD *)(v459 + 80);
      v286 = *(_QWORD *)(v459 + 88);
      v287 = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
      swift_unknownObjectRetain();
      v287 &= 1u;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v446 - 1, v287, v283, v284, v285, v286, (uint64_t *)&v508);
      v488 = v509;
      v498 = v508;
      v288 = v510;
      swift_unknownObjectRelease();
      v616[0] = v498;
      v616[1] = v488;
      v617 = v288;
      v289 = *(_QWORD *)(v459 + 64);
      v290 = *(_QWORD *)(v459 + 72);
      v291 = *(_QWORD *)(v459 + 80);
      v292 = *(_QWORD *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v446, v287, v289, v290, v291, v292, (uint64_t *)&v508);
      v489 = v509;
      v499 = v508;
      v293 = v510;
      swift_unknownObjectRelease();
      v614[0] = v499;
      v614[1] = v489;
      v615 = v293;
      v294 = *(_QWORD *)(v459 + 64);
      v295 = *(_QWORD *)(v459 + 72);
      v296 = *(_QWORD *)(v459 + 80);
      v297 = *(_QWORD *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)v616, v294, v295, v296, v297);
      v25 = v298;
      swift_unknownObjectRelease();
      v299 = *(_QWORD *)(v459 + 64);
      v300 = *(_QWORD *)(v459 + 72);
      v301 = *(_QWORD *)(v459 + 80);
      v5 = *(_QWORD *)(v459 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.subscript.getter((unint64_t)v614, v299, v300, v301, v5);
      v303 = v302;
      swift_unknownObjectRelease();
      v304 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v25);
      v492 = v303;
      v305 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v303);
      if ((v304 & 1) == 0 && (v305 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_303;
      }
      if (((v304 ^ v305) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_559;
      }
      v475 = v25 + 64;
      v385 = 1 << *(_BYTE *)(v25 + 32);
      v386 = -1;
      if (v385 < 64)
        v386 = ~(-1 << v385);
      v387 = v386 & *(_QWORD *)(v25 + 64);
      v388 = (unint64_t)(v385 + 63) >> 6;
      v457 = v388 - 1;
      result = swift_bridgeObjectRetain();
      v389 = 0;
      v485 = v388;
      v463 = v388 - 5;
      while (!v387)
      {
        v395 = v389 + 1;
        if (__OFADD__(v389, 1))
          goto LABEL_596;
        if (v395 < v485)
        {
          v396 = *(_QWORD *)(v475 + 8 * v395);
          if (v396)
            goto LABEL_441;
          if ((uint64_t)(v389 + 2) >= v485)
          {
            ++v389;
          }
          else
          {
            v396 = *(_QWORD *)(v475 + 8 * (v389 + 2));
            if (v396)
            {
              v395 = v389 + 2;
              goto LABEL_441;
            }
            if ((uint64_t)(v389 + 3) >= v485)
            {
              v389 += 2;
            }
            else
            {
              v396 = *(_QWORD *)(v475 + 8 * (v389 + 3));
              if (v396)
              {
                v395 = v389 + 3;
LABEL_441:
                v387 = (v396 - 1) & v396;
                v391 = __clz(__rbit64(v396)) + (v395 << 6);
                v389 = v395;
LABEL_437:
                v392 = *(_QWORD *)(v25 + 56);
                v393 = (_QWORD *)(*(_QWORD *)(v25 + 48) + 16 * v391);
                v394 = v393[1];
                *(_QWORD *)&v508 = *v393;
                *((_QWORD *)&v508 + 1) = v394;
                outlined init with copy of AttributedString._AttributeValue(v392 + 72 * v391, (uint64_t)&v509);
                swift_bridgeObjectRetain();
                goto LABEL_447;
              }
              v395 = v389 + 4;
              if ((uint64_t)(v389 + 4) >= v485)
              {
                v389 += 3;
              }
              else
              {
                v396 = *(_QWORD *)(v475 + 8 * v395);
                if (v396)
                  goto LABEL_441;
                while (v463 != v389)
                {
                  v396 = *(_QWORD *)(v25 + 104 + 8 * v389++);
                  if (v396)
                  {
                    v395 = v389 + 4;
                    goto LABEL_441;
                  }
                }
                v389 = v457;
              }
            }
          }
        }
        v387 = 0;
        v511 = 0u;
        memset(v512, 0, sizeof(v512));
        v509 = 0u;
        v510 = 0u;
        v508 = 0u;
LABEL_447:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v508, (uint64_t)&v525);
        v397 = *((_QWORD *)&v525 + 1);
        if (!*((_QWORD *)&v525 + 1))
          goto LABEL_475;
        v398 = v525;
        *(_OWORD *)v523 = v528;
        *(_OWORD *)&v523[16] = v529;
        v524 = v530;
        v521 = v526;
        v522 = v527;
        v5 = *((_QWORD *)&v528 + 1);
        v399 = v529;
        if ((_QWORD)v529 == 1)
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
LABEL_433:
          swift_bridgeObjectRelease();
          goto LABEL_434;
        }
        v508 = *(_OWORD *)&v523[8];
        v518 = 0uLL;
        outlined copy of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
        outlined copy of AttributedString.AttributeRunBoundaries?(v5, v399);
        v400 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v5, v399);
        if ((v400 & 1) == 0)
          goto LABEL_433;
        specialized Dictionary.subscript.getter(v398, v397, v492, (uint64_t)&v518);
        swift_bridgeObjectRelease();
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
        outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
        if (*((_QWORD *)&v509 + 1))
        {
          outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
          if (!*((_QWORD *)&v513 + 1))
            goto LABEL_548;
          v504 = v514;
          v505 = v515;
          v506 = v516;
          v502 = *(_OWORD *)&v512[8];
          v503 = v513;
          v401 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v507, (uint64_t)&v502);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
          outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v401 & 1) == 0)
            goto LABEL_550;
        }
        else
        {
          if (*((_QWORD *)&v513 + 1))
            goto LABEL_549;
          outlined destroy of Any?((uint64_t)&v508, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        }
LABEL_434:
        result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
      }
      v390 = __clz(__rbit64(v387));
      v387 &= v387 - 1;
      v391 = v390 | (v389 << 6);
      goto LABEL_437;
    }
    v273 = *(_QWORD *)(v267 + 8 * v266);
    if (v273)
    {
LABEL_286:
      v270 = (v273 - 1) & v273;
      v272 = __clz(__rbit64(v273)) + (v266 << 6);
LABEL_287:
      v275 = (unint64_t *)(*(_QWORD *)(v265 + 48) + 16 * v272);
      v276 = *v275;
      v5 = v275[1];
      v277 = *(_QWORD *)(*(_QWORD *)(v265 + 56) + 8 * v272);
      v278 = specialized Array.count.getter(v277);
      if (v278)
      {
        v279 = v278;
        if (v278 < 1)
          goto LABEL_522;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v280 = (uint64_t *)(v277 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v276, v5, *(v280 - 1), *v280, 0);
          v280 += 2;
          --v279;
        }
        while (v279);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  v274 = v266 + 1;
  if (v266 + 1 >= v497)
    goto LABEL_296;
  v273 = *(_QWORD *)(v267 + 8 * v274);
  if (v273)
    goto LABEL_285;
  v274 = v266 + 2;
  if (v266 + 2 >= v497)
    goto LABEL_296;
  v273 = *(_QWORD *)(v267 + 8 * v274);
  if (v273)
    goto LABEL_285;
  v274 = v266 + 3;
  if (v266 + 3 >= v497)
    goto LABEL_296;
  v273 = *(_QWORD *)(v267 + 8 * v274);
  if (v273)
  {
LABEL_285:
    v266 = v274;
    goto LABEL_286;
  }
  while (1)
  {
    v266 = v274 + 1;
    if (__OFADD__(v274, 1))
      break;
    if (v266 >= v497)
      goto LABEL_296;
    v273 = *(_QWORD *)(v267 + 8 * v266);
    ++v274;
    if (v273)
      goto LABEL_286;
  }
LABEL_554:
  __break(1u);
LABEL_555:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
LABEL_556:
  outlined destroy of Any?((uint64_t)&v508, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)v517, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v518, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_557:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
LABEL_558:
  swift_release();
LABEL_559:
  v432 = *v458;
  v433 = v458[2];
  v522 = v458[1];
  *(_OWORD *)v523 = v433;
  v521 = v432;
  v434 = *v458;
  v526 = v458[1];
  v527 = v433;
  v525 = v434;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v525, (uint64_t)&v518);
  outlined retain of Locale((uint64_t)&v518);
  v435 = BigString.index(before:)();
  v437 = v436;
  v439 = v438;
  v441 = v440;
  outlined release of Locale((uint64_t)&v521);
  AttributedString.Guts._paragraphExtending(from:)(v435, v437, v439, v441, (uint64_t)&v508);
  v110 = Range<>._utf8OffsetRange.getter();
  v306 = v442;
  v344 = 0;
  v346 = 0;
  v347 = 0;
  v533 = 0;
LABEL_331:
  if ((v533 & 1) == 0 && v446 < v306)
  {
    v532 = 0;
    v531 = 0;
    AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v531, v110, v446, v306);
  }
  if (v445 < v346)
    v348 = v347;
  else
    v348 = 0;
  if (v348 == 1)
  {
    v532 = 0;
    v531 = 0;
    AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v531, v344, v445, v346);
  }
  return swift_unknownObjectRelease();
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t result;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char v39;
  int64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int Enum;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *i;
  __int128 v169;
  _OWORD *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  uint64_t v194;
  unint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  int64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 *v240;
  uint64_t v241;
  __int128 v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  unint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int64_t v258;
  int64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  int64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  int64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  int64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  unint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int64_t v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int64_t v326;
  int64_t v327;
  int64_t v328;
  int v329;
  int v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  __int128 v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 *v351;
  uint64_t v352;
  unint64_t v353;
  __int128 *v354;
  unint64_t *v355;
  uint64_t v356;
  __int128 v357;
  unint64_t v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  int64_t v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  uint64_t v378;
  __int128 v379;
  _OWORD v380[2];
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  uint64_t v388;
  int64_t v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  char v397[112];
  char v398[48];
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  char v402[48];
  unint64_t v403[4];
  uint64_t v404;
  uint64_t v405[4];
  uint64_t v406;
  char v407[48];
  __int128 v408;
  __int128 v409;
  __int128 v410;
  _BYTE v411[48];
  _BYTE v412[48];
  char v413[48];
  char v414[48];
  char v415[48];
  char v416[48];
  char v417[48];
  char v418[48];
  char v419[48];
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  _OWORD v432[2];
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  _OWORD v437[2];
  __int128 v438;
  _OWORD v439[3];
  _QWORD v440[5];
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  _OWORD v447[12];
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  _OWORD v461[2];
  uint64_t v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  uint64_t v469;
  __int128 *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  _BYTE v483[40];
  _BYTE v484[56];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 16);
    v8 = *(_OWORD *)(*v2 + 32);
    v479 = *(_OWORD *)(*v2 + 48);
    v478 = v8;
    v477 = v7;
    v9 = v6[8];
    v10 = v6[9];
    v11 = v6[10];
    v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    v13 = swift_allocObject();
    v14 = BigString.isEmpty.getter();
    if (v9)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v477);
      swift_unknownObjectRelease();
    }
    else
    {
      outlined retain of Locale((uint64_t)&v477);
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_unknownObjectRelease();
      if ((((v11 == 0) ^ v14) & 1) == 0)
      {
LABEL_7:
        v15 = v478;
        *(_OWORD *)(v13 + 16) = v477;
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = v479;
        *(_QWORD *)(v13 + 64) = v9;
        *(_QWORD *)(v13 + 72) = v10;
        *(_QWORD *)(v13 + 80) = v11;
        *(_QWORD *)(v13 + 88) = v12;
        *v3 = v13;
        swift_release();
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_251;
  }
LABEL_8:
  v16 = *v3;
  v17 = v3[1];
  v18 = (__int128 *)v3[2];
  v19 = v3[3];
  v20 = v3[4];
  v21 = v3[5];
  v22 = v3[6];
  v23 = v3[7];
  v24 = v3[8];
  v25 = *(_OWORD *)(*v3 + 32);
  v466 = *(_OWORD *)(*v3 + 16);
  v467 = v25;
  v468 = *(_OWORD *)(v16 + 48);
  v351 = v18;
  v352 = v17;
  v469 = v17;
  v470 = v18;
  v349 = v20;
  v350 = v19;
  v471 = v19;
  v472 = v20;
  v347 = v22;
  v348 = v21;
  v473 = v21;
  v474 = v22;
  v343 = v24;
  v345 = v23;
  v475 = v23;
  v476 = v24;
  outlined retain of Locale(a2);
  swift_unknownObjectRetain();
  BigSubstring.UnicodeScalarView.subscript.getter();
  swift_unknownObjectRelease();
  v341 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  v354 = (__int128 *)a2;
  outlined release of Locale(a2);
  outlined release of Locale((uint64_t)v397);
  v26 = *v3;
  v27 = *(_OWORD *)(*v3 + 32);
  v463 = *(_OWORD *)(*v3 + 16);
  v464 = v27;
  v465 = *(_OWORD *)(v26 + 48);
  result = BigString.isEmpty.getter();
  v362 = v3;
  v355 = (unint64_t *)a1;
  if ((result & 1) != 0)
  {
    v29 = 0;
    v338 = MEMORY[0x1E0DEE9E0];
    goto LABEL_41;
  }
  v30 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= 0x800uLL && (*(_QWORD *)(a1 + 32) ^ v30) <= 0x3FF)
  {
    BigString.utf8.getter();
    v30 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v398);
  }
  v31 = *(_QWORD *)(v26 + 64);
  v32 = *(_QWORD *)(v26 + 80);
  if (v31)
    v33 = *(_QWORD *)(v26 + 80);
  else
    v33 = 0;
  v34 = v30 >> 11;
  if (v33 < (uint64_t)(v30 >> 11))
    goto LABEL_368;
  v35 = *(_QWORD *)(v26 + 72);
  v36 = *(_QWORD *)(v26 + 88);
  if (v31 && v34 < v32 && *(_WORD *)(v31 + 16))
  {
    v370 = *(_QWORD *)(v26 + 72);
    v37 = *(unsigned __int8 *)(v31 + 18);
    if (*(_BYTE *)(v31 + 18))
    {
      result = swift_unknownObjectRetain_n();
      v29 = -15;
      v38 = v31;
      while (1)
      {
        v40 = *(unsigned __int16 *)(v38 + 16);
        if (!*(_WORD *)(v38 + 16))
          goto LABEL_23;
        v41 = *(_QWORD *)(v38 + 40);
        v42 = __OFSUB__(v34, v41);
        v43 = v34 - v41;
        if (v42)
          goto LABEL_354;
        if (__OFADD__(v43, 1))
        {
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }
        if (v43 + 1 >= 1)
          break;
        v40 = 0;
LABEL_24:
        v39 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        v37 = ((-15 << v39) - 1) & v37 | (v40 << v39);
        a1 = *(_QWORD *)(v38 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v38 = a1;
        if (!*(_BYTE *)(a1 + 18))
          goto LABEL_295;
      }
      if ((_DWORD)v40 != 1)
      {
        v44 = (uint64_t *)(v38 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v34 = v43 - v46;
          if (__OFSUB__(v43, v46))
            goto LABEL_336;
          if (__OFADD__(v34, 1))
            goto LABEL_337;
          if (v34 + 1 < 1)
            break;
          ++v45;
          v43 = v34;
          if (v40 == v45)
            goto LABEL_23;
        }
        v40 = v45;
        v34 = v43;
        goto LABEL_24;
      }
      v34 = v43;
LABEL_23:
      if (v34)
        goto LABEL_353;
      goto LABEL_24;
    }
    swift_unknownObjectRetain_n();
    a1 = v31;
LABEL_295:
    result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v34, 0, (_WORD *)(a1 + 16), (uint64_t *)(a1 + 24));
    if (result < 0)
      goto LABEL_382;
    v314 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v48 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v314 << 8);
    v35 = v370;
    goto LABEL_39;
  }
  v47 = swift_unknownObjectRetain_n();
  v48 = specialized Rope._endPath.getter(v47);
  swift_unknownObjectRelease();
  a1 = 0;
  v29 = 0;
  v49 = 0;
  if (v31)
  {
LABEL_39:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v36, v48, a1, v31, v35);
    swift_unknownObjectRelease_n();
    v29 = 0;
    v49 = a1;
  }
  v50 = *(_QWORD *)(v26 + 64);
  v51 = *(_QWORD *)(v26 + 72);
  v52 = *(_QWORD *)(v26 + 80);
  v53 = *(_QWORD *)(v26 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v36, v48, v49, v50, v51, v52, v53);
  swift_unknownObjectRelease();
  v54 = swift_bridgeObjectRetain();
  v338 = specialized _NativeDictionary.filter(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v3 = v362;
LABEL_41:
  a1 = *v3;
  v55 = v354;
  v56 = *v355 >> 11;
  v371 = v355[4] >> 11;
  v364 = v56;
  v339 = v371 - v56;
  if (v371 == v56)
  {
    v337 = *v355 >> 11;
    v358 = v337;
LABEL_162:
    v169 = *(_OWORD *)(a1 + 32);
    v455 = *(_OWORD *)(a1 + 16);
    v456 = v169;
    v457 = *(_OWORD *)(a1 + 48);
    BigString.utf8.getter();
    v368 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v407);
    v170 = (_OWORD *)*v3;
    v171 = *(_OWORD *)(*v3 + 32);
    v390 = *(_OWORD *)(*v3 + 16);
    v391 = v171;
    v392 = v170[3];
    *(_QWORD *)&v393 = v352;
    *((_QWORD *)&v393 + 1) = v351;
    *(_QWORD *)&v394 = v350;
    *((_QWORD *)&v394 + 1) = v349;
    *(_QWORD *)&v395 = v348;
    *((_QWORD *)&v395 + 1) = v347;
    *(_QWORD *)&v396 = v345;
    *((_QWORD *)&v396 + 1) = v343;
    swift_unknownObjectRetain();
    BigString.init()();
    v172 = v409;
    v170[1] = v408;
    v170[2] = v172;
    v170[3] = v410;
    swift_unknownObjectRelease();
    if ((v341 & 1) == 0)
    {
      v173 = v55[5];
      v452 = v55[4];
      v453 = v173;
      v454 = v55[6];
      v174 = v55[1];
      v448 = *v55;
      v449 = v174;
      v175 = v55[2];
      v451 = v55[3];
      v450 = v175;
      outlined retain of Locale((uint64_t)v55);
      lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView();
      BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    }
    v176 = (_OWORD *)*v3;
    v452 = v394;
    v453 = v395;
    v454 = v396;
    v448 = v390;
    v449 = v391;
    v451 = v393;
    v450 = v392;
    v177 = v393;
    v178 = v394;
    v179 = v395;
    v180 = v396;
    BigSubstring.UnicodeScalarView.base.getter();
    v181 = v421;
    v176[1] = v420;
    v176[2] = v181;
    v176[3] = v422;
    swift_unknownObjectRelease();
    specialized Range.init(uncheckedBounds:)(v177, *((uint64_t *)&v177 + 1), v178, *((uint64_t *)&v178 + 1), v179, *((uint64_t *)&v179 + 1), v180, *((uint64_t *)&v180 + 1), &v379);
    v182 = v380[0];
    *(_OWORD *)(v362 + 1) = v379;
    *(_OWORD *)(v362 + 3) = v182;
    v183 = v381;
    *(_OWORD *)(v362 + 5) = v380[1];
    *(_OWORD *)(v362 + 7) = v183;
    v184 = *v362;
    v185 = *(_OWORD *)(*v362 + 32);
    v447[9] = *(_OWORD *)(*v362 + 16);
    v447[10] = v185;
    v447[11] = *(_OWORD *)(v184 + 48);
    BigString.utf8.getter();
    v31 = (uint64_t)v411;
    v186 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v411);
    v187 = v186 - v368;
    if (__OFSUB__(v186, v368))
      goto LABEL_360;
    v188 = v339 + v187;
    if (__OFADD__(v339, v187))
      goto LABEL_361;
    swift_bridgeObjectRetain();
    v189 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v364, v371, v188, v338, v189);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = *v362;
    v190 = *(_OWORD *)(*v362 + 32);
    v447[6] = *(_OWORD *)(*v362 + 16);
    v447[7] = v190;
    v447[8] = *(_OWORD *)(v32 + 48);
    BigString.utf8.getter();
    v31 = (uint64_t)v412;
    v191 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v412);
    v192 = v191 - v368;
    if (__OFSUB__(v191, v368))
      goto LABEL_362;
    v42 = __OFADD__(v358, v192);
    v193 = v358 + v192;
    if (v42)
      goto LABEL_363;
    if (v193 < (uint64_t)v337)
      goto LABEL_364;
    v194 = *(_QWORD *)(v32 + 80);
    if (!*(_QWORD *)(v32 + 64))
    {
      v233 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v233);
      swift_unknownObjectRelease();
      goto LABEL_206;
    }
    *(_QWORD *)&v336 = v193;
    v195 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v195);
    swift_unknownObjectRelease_n();
    if (!v194)
      goto LABEL_206;
    v196 = *(_OWORD *)(v32 + 32);
    v447[3] = *(_OWORD *)(v32 + 16);
    v447[4] = v196;
    v447[5] = *(_OWORD *)(v32 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v197 = BigString.UTF8View.index(_:offsetBy:)();
    v199 = v198;
    v201 = v200;
    v203 = v202;
    outlined release of Locale((uint64_t)v413);
    v204 = *(_OWORD *)(v32 + 32);
    v447[0] = *(_OWORD *)(v32 + 16);
    v447[1] = v204;
    v447[2] = *(_OWORD *)(v32 + 48);
    v31 = (uint64_t)v447;
    result = BigString.utf8.getter();
    if (__OFSUB__((_QWORD)v336, v337))
      goto LABEL_375;
    v205 = BigString.UTF8View.index(_:offsetBy:)();
    v207 = v206;
    v209 = v208;
    v211 = v210;
    outlined release of Locale((uint64_t)v414);
    specialized Range.init(uncheckedBounds:)(v197, v199, v201, v203, v205, v207, v209, v211, v440);
    *(_QWORD *)&v439[0] = MEMORY[0x1E0DEE9E0];
    v212 = *(_OWORD *)(v32 + 32);
    v444 = *(_OWORD *)(v32 + 16);
    v445 = v212;
    v446 = *(_OWORD *)(v32 + 48);
    BigString.unicodeScalars.getter();
    v334 = v440[0];
    v213 = BigString.UnicodeScalarView.index(roundingDown:)();
    v215 = v214;
    v217 = v216;
    v219 = v218;
    outlined release of Locale((uint64_t)v415);
    v220 = *(_OWORD *)(v32 + 32);
    v441 = *(_OWORD *)(v32 + 16);
    v442 = v220;
    v351 = (__int128 *)(v32 + 16);
    v443 = *(_OWORD *)(v32 + 48);
    BigString.unicodeScalars.getter();
    v333 = v440[4];
    v31 = BigString.UnicodeScalarView.index(roundingUp:)();
    result = outlined release of Locale((uint64_t)v416);
    *(_QWORD *)&v480 = v213;
    *((_QWORD *)&v480 + 1) = v215;
    *(_QWORD *)&v481 = v217;
    *((_QWORD *)&v481 + 1) = v219;
    v38 = v213 >> 11;
    a1 = (unint64_t)v31 >> 11;
    if ((unint64_t)v31 >> 11 < v213 >> 11)
      goto LABEL_376;
    v31 = *(_QWORD *)(v32 + 64);
    if (v31)
      v221 = *(_QWORD *)(v32 + 80);
    else
      v221 = 0;
    if (v221 < v38)
      goto LABEL_377;
    v222 = *(_QWORD *)(v32 + 72);
    v36 = *(_QWORD *)(v32 + 88);
    v348 = v32;
    if (!v31 || v38 >= *(_QWORD *)(v32 + 80) || !*(_WORD *)(v31 + 16))
    {
      swift_retain_n();
      v234 = swift_unknownObjectRetain_n();
      v235 = specialized Rope._endPath.getter(v234);
      swift_unknownObjectRelease();
      v29 = 0;
      v223 = 0;
      if (!v31)
        goto LABEL_341;
      goto LABEL_208;
    }
    *(_QWORD *)&v366 = *(_QWORD *)(v32 + 72);
    v37 = *(unsigned __int8 *)(v31 + 18);
    if (!*(_BYTE *)(v31 + 18))
    {
      swift_unknownObjectRetain_n();
      result = swift_retain_n();
      v223 = v38;
      v29 = v31;
LABEL_298:
      v105 = *(unsigned __int16 *)(v29 + 16);
      if (!*(_WORD *)(v29 + 16))
        goto LABEL_304;
      v315 = *(_QWORD *)(v29 + 24);
      v106 = v223 - v315;
      if (__OFSUB__(v223, v315))
        goto LABEL_386;
      if (__OFADD__(v106, 1))
        goto LABEL_387;
      if (v106 + 1 <= 0)
      {
        v105 = 0;
      }
      else
      {
        if ((_DWORD)v105 != 1)
          goto LABEL_322;
        v223 -= v315;
LABEL_304:
        if (v223)
        {
          __break(1u);
LABEL_306:
          if (v29 < (uint64_t)v336)
            goto LABEL_307;
LABEL_309:
          LOBYTE(v38) = 0;
          goto LABEL_310;
        }
      }
      goto LABEL_340;
    }
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v223 = v38;
    v224 = v31;
    while (1)
    {
      v226 = *(unsigned __int16 *)(v224 + 16);
      if (!*(_WORD *)(v224 + 16))
        goto LABEL_183;
      v227 = *(_QWORD *)(v224 + 40);
      v228 = v223 - v227;
      if (__OFSUB__(v223, v227))
        goto LABEL_357;
      if (__OFADD__(v228, 1))
        goto LABEL_358;
      if (v228 + 1 <= 0)
      {
        v226 = 0;
      }
      else
      {
        if ((_DWORD)v226 == 1)
        {
          v223 -= v227;
          goto LABEL_183;
        }
        v229 = *(_QWORD *)(v224 + 64);
        v42 = __OFSUB__(v228, v229);
        v230 = v228 - v229;
        if (v42)
          goto LABEL_372;
        if (__OFADD__(v230, 1))
          goto LABEL_373;
        if (v230 + 1 < 1)
        {
          v226 = 1;
          v223 = v228;
        }
        else
        {
          if ((_DWORD)v226 == 2)
          {
            v223 = v230;
LABEL_183:
            if (v223)
              goto LABEL_356;
            goto LABEL_184;
          }
          v231 = (_QWORD *)(v224 + 88);
          v232 = 2;
          while (1)
          {
            if (v226 == v232)
              goto LABEL_350;
            v223 = v230 - *v231;
            if (__OFSUB__(v230, *v231))
              goto LABEL_351;
            if (__OFADD__(v223, 1))
              goto LABEL_352;
            if (v223 + 1 < 1)
              break;
            ++v232;
            v231 += 3;
            v230 = v223;
            if (v226 == v232)
              goto LABEL_183;
          }
          v226 = v232;
          v223 = v230;
        }
      }
LABEL_184:
      v225 = (4 * *(_BYTE *)(v224 + 18) + 8) & 0x3C;
      v37 = ((-15 << v225) - 1) & v37 | (v226 << v225);
      v29 = *(_QWORD *)(v224 + 24 + 24 * v226);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v224 = v29;
      if (!*(_BYTE *)(v29 + 18))
        goto LABEL_298;
    }
  }
  v337 = *v355;
  *(_QWORD *)&v379 = *v355 >> 11;
  v57 = *(_QWORD *)(a1 + 64);
  v58 = *(_QWORD *)(a1 + 72);
  v60 = *(_QWORD *)(a1 + 80);
  v59 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain_n();
  v37 = specialized Rope.find<A>(at:in:preferEnd:)(v56, 0, v57, v58, v60, v59);
  v62 = v61;
  v64 = v63;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v37, v62, v64, v57, v58, v60, v59);
  swift_unknownObjectRelease_n();
  v65 = *(_QWORD *)(a1 + 64);
  v66 = *(_QWORD *)(a1 + 72);
  v68 = *(_QWORD *)(a1 + 80);
  v67 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v37, v62, v64, v65, v66, v68, v67);
  v31 = v69;
  v356 = v70;
  swift_unknownObjectRelease();
  v71 = swift_bridgeObjectRetain();
  v72 = specialized _NativeDictionary.filter(_:)(v71);
  swift_bridgeObjectRelease_n();
  v36 = *(_QWORD *)(v72 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v38 = 0;
  *(_QWORD *)&v390 = result;
  v73 = 1 << *(_BYTE *)(v72 + 32);
  v43 = -1;
  if (v73 < 64)
    v43 = ~(-1 << v73);
  v74 = v72 + 64;
  v32 = v43 & *(_QWORD *)(v72 + 64);
  v75 = (unint64_t)(v73 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      v76 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v77 = v76 | (v38 << 6);
      goto LABEL_47;
    }
    v40 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      v105 = v43;
      v223 = v40;
      goto LABEL_340;
    }
    if (v40 >= v75)
      goto LABEL_67;
    v79 = *(_QWORD *)(v74 + 8 * v40);
    ++v38;
    if (!v79)
    {
      v38 = v40 + 1;
      if (v40 + 1 >= v75)
        goto LABEL_67;
      v79 = *(_QWORD *)(v74 + 8 * v38);
      if (!v79)
      {
        v38 = v40 + 2;
        if (v40 + 2 >= v75)
          goto LABEL_67;
        v79 = *(_QWORD *)(v74 + 8 * v38);
        if (!v79)
        {
          v38 = v40 + 3;
          if (v40 + 3 >= v75)
            goto LABEL_67;
          v79 = *(_QWORD *)(v74 + 8 * v38);
          if (!v79)
          {
            v38 = v40 + 4;
            if (v40 + 4 >= v75)
              goto LABEL_67;
            v79 = *(_QWORD *)(v74 + 8 * v38);
            if (!v79)
              break;
          }
        }
      }
    }
LABEL_66:
    v32 = (v79 - 1) & v79;
    v77 = __clz(__rbit64(v79)) + (v38 << 6);
LABEL_47:
    v78 = (uint64_t *)(*(_QWORD *)(v72 + 48) + 16 * v77);
    v36 = *v78;
    v37 = v78[1];
    swift_bridgeObjectRetain();
    v31 = (uint64_t)&v390;
    specialized Set._Variant.insert(_:)((unint64_t *)&v448, v36, v37);
    result = swift_bridgeObjectRelease();
  }
  v80 = v40 + 5;
  if (v80 < v75)
  {
    v79 = *(_QWORD *)(v74 + 8 * v80);
    if (!v79)
    {
      while (1)
      {
        v38 = v80 + 1;
        if (__OFADD__(v80, 1))
          break;
        if (v38 >= v75)
          goto LABEL_67;
        v79 = *(_QWORD *)(v74 + 8 * v38);
        ++v80;
        if (v79)
          goto LABEL_66;
      }
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
      goto LABEL_378;
    }
    v38 = v80;
    goto LABEL_66;
  }
LABEL_67:
  v359 = v72;
  swift_release();
  v81 = v390;
  *(_QWORD *)&v373 = v390;
  if (v337 > 0x7FF)
  {
    v86 = *(_QWORD *)(a1 + 64);
    v87 = *(_QWORD *)(a1 + 72);
    v88 = *(_QWORD *)(a1 + 80);
    v89 = *(_QWORD *)(a1 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v86, v87, v88, v89, &v399);
    v366 = v399;
    v336 = v400;
    v85 = v401;
    swift_unknownObjectRelease();
    v84 = v336;
    v83 = v366;
  }
  else
  {
    v82 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v82, 0, (unint64_t *)&v399);
    v83 = v399;
    v84 = v400;
    v85 = v401;
  }
  v90 = v371;
  v390 = v83;
  v391 = v84;
  *(_QWORD *)&v392 = v85;
  v91 = *(_QWORD *)(a1 + 64);
  v92 = *(_QWORD *)(a1 + 72);
  v93 = *(_QWORD *)(a1 + 80);
  v94 = *(_QWORD *)(a1 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v366) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v91, v92, v93, v94, (uint64_t *)&v448);
  v96 = v450;
  swift_unknownObjectRelease();
  if (v96 < v85 && *(_QWORD *)(v81 + 16))
  {
    while (1)
    {
      v32 = *((_QWORD *)&v390 + 1);
      v97 = v390;
      v98 = v391;
      v99 = *(_QWORD *)(a1 + 64);
      v100 = *(_QWORD *)(a1 + 80);
      v101 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v101);
      if (v99)
      {
        result = swift_unknownObjectRelease();
        if (v85 != v100)
          goto LABEL_96;
      }
      else if (v85)
      {
LABEL_96:
        v115 = *(_QWORD *)(a1 + 64);
        v114 = *(_QWORD *)(a1 + 72);
        v116 = *(_QWORD *)(a1 + 80);
        v31 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)&v448 = v97;
        *((_QWORD *)&v448 + 1) = v32;
        *(_QWORD *)&v449 = v98;
        v117 = *((_QWORD *)&v98 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v98 + 1), 1))
          goto LABEL_365;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v448, v115, v114, v116, v31);
        v118 = *((_QWORD *)&v448 + 1);
        v32 = v449;
        v104 = v448;
        v119 = specialized Rope.subscript.getter(v448, *((unint64_t *)&v448 + 1), v449, v115, v114, v116, v31);
        v31 = v120;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v121 = v85 - v119;
        if (__OFSUB__(v85, v119))
          goto LABEL_366;
        v105 = v364;
        v37 = v359;
        goto LABEL_124;
      }
      v102 = *(_QWORD *)(a1 + 64);
      v103 = *(_QWORD *)(a1 + 72);
      v31 = *(_QWORD *)(a1 + 80);
      v104 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v336 = v31;
      if (v102)
      {
        v335 = *(_QWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        v105 = v364;
        v37 = v359;
        if (v31 < v364)
          goto LABEL_369;
        if (*(_WORD *)(v102 + 16))
        {
          v36 = *(unsigned __int8 *)(v102 + 18);
          if (*(_BYTE *)(v102 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v31 = v364;
            v29 = v102;
            while (1)
            {
              v108 = *(unsigned __int16 *)(v29 + 16);
              if (!*(_WORD *)(v29 + 16))
                goto LABEL_392;
              v109 = *(_QWORD *)(v29 + 40);
              v42 = __OFSUB__(v31, v109);
              v110 = v31 - v109;
              if (v42)
                goto LABEL_345;
              if (v110 <= 0)
              {
                v106 = 0;
              }
              else
              {
                if ((_DWORD)v108 == 1)
                  goto LABEL_394;
                v111 = *(_QWORD *)(v29 + 64);
                v31 = v110 - v111;
                if (__OFSUB__(v110, v111))
                  goto LABEL_349;
                if (v31 >= 1)
                {
                  if ((_DWORD)v108 == 2)
                    goto LABEL_394;
                  v112 = (_QWORD *)(v29 + 88);
                  v106 = 2;
                  while (v108 != v106)
                  {
                    v113 = v31 - *v112;
                    if (__OFSUB__(v31, *v112))
                      goto LABEL_321;
                    if (v113 < 1)
                      goto LABEL_80;
                    ++v106;
                    v112 += 3;
                    v31 = v113;
                    if (v108 == v106)
                      goto LABEL_394;
                  }
                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  v331 = *(_QWORD *)(v29 + 48);
                  v42 = __OFSUB__(v106, v331);
                  v40 = v106 - v331;
                  if (v42)
                    goto LABEL_390;
                  if (__OFADD__(v40, 1))
                    goto LABEL_391;
                  if (v40 + 1 >= 1)
                  {
                    if ((_DWORD)v105 != 2)
                    {
                      v332 = (_QWORD *)(v29 + 72);
                      v43 = 2;
                      while (v105 != v43)
                      {
                        v223 = v40 - *v332;
                        if (__OFSUB__(v40, *v332))
                          goto LABEL_384;
                        if (__OFADD__(v223, 1))
                          goto LABEL_385;
                        if (v223 + 1 < 1)
                          goto LABEL_339;
                        ++v43;
                        v332 += 3;
                        v40 = v223;
                        if (v105 == v43)
                          goto LABEL_304;
                      }
                      goto LABEL_383;
                    }
                    v223 = v40;
                    goto LABEL_304;
                  }
                  v105 = 1;
                  v223 = v106;
LABEL_340:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v235 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v105 << 8);
                  v222 = v366;
                  if (!v31)
                  {
LABEL_341:
                    result = swift_release();
                    v236 = 0;
                    v237 = v38 - v223;
                    if (!__OFSUB__(v38, v223))
                    {
LABEL_209:
                      *(_QWORD *)&v385 = v32;
                      *((_QWORD *)&v385 + 1) = v38;
                      *(_QWORD *)&v386 = a1;
                      *((_QWORD *)&v386 + 1) = v36;
                      *(_QWORD *)&v387 = v235;
                      *((_QWORD *)&v387 + 1) = v29;
                      v388 = v236;
                      v389 = v237;
                      specialized IndexingIterator.next()();
                      if (v238)
                      {
                        v239 = v238;
                        v240 = v351;
                        while (1)
                        {
                          v242 = v240[1];
                          v429 = *v240;
                          v430 = v242;
                          v431 = v240[2];
                          BigString.utf8.getter();
                          v243 = v480;
                          v244 = BigString.UTF8View.index(_:offsetBy:)();
                          v246 = v245;
                          v248 = v247;
                          v250 = v249;
                          outlined release of Locale((uint64_t)v417);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v251 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v239);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v346 = v248;
                          v342 = v246;
                          v344 = v250;
                          v340 = v244;
                          if ((v251 & 1) != 0)
                          {
                            v353 = v244 >> 10;
                            if (v244 >> 10 > v243 >> 10)
                              break;
                          }
LABEL_211:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v480, v340, v342, v346, v344);
                          specialized IndexingIterator.next()();
                          v239 = v241;
                          if (!v241)
                            goto LABEL_253;
                        }
                        v252 = v243;
                        v361 = v239 + 64;
LABEL_216:
                        v253 = v240[1];
                        v426 = *v240;
                        v427 = v253;
                        v428 = v240[2];
                        BigString.unicodeScalars.getter();
                        v369 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v418);
                        v254 = v240[1];
                        v423 = *v240;
                        v424 = v254;
                        v425 = v240[2];
                        BigString.unicodeScalars.getter();
                        v363 = v252;
                        v365 = BigString.UnicodeScalarView.index(after:)();
                        outlined release of Locale((uint64_t)v419);
                        v255 = 1 << *(_BYTE *)(v239 + 32);
                        if (v255 < 64)
                          v256 = ~(-1 << v255);
                        else
                          v256 = -1;
                        v257 = v256 & *(_QWORD *)(v239 + 64);
                        v258 = (unint64_t)(v255 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v259 = 0;
                        while (1)
                        {
                          if (v257)
                          {
                            v260 = __clz(__rbit64(v257));
                            v257 &= v257 - 1;
                            v261 = v260 | (v259 << 6);
                            goto LABEL_223;
                          }
                          v265 = v259 + 1;
                          if (__OFADD__(v259, 1))
                            break;
                          if (v265 >= v258)
                            goto LABEL_232;
                          v266 = *(_QWORD *)(v361 + 8 * v265);
                          if (v266)
                            goto LABEL_227;
                          if (v259 + 2 >= v258)
                          {
                            ++v259;
LABEL_232:
                            v257 = 0;
                            v378 = 0;
                            v376 = 0u;
                            v377 = 0u;
                            v374 = 0u;
                            v375 = 0u;
                            v373 = 0u;
                            goto LABEL_233;
                          }
                          v266 = *(_QWORD *)(v361 + 8 * (v259 + 2));
                          if (v266)
                          {
                            v265 = v259 + 2;
                            goto LABEL_227;
                          }
                          if (v259 + 3 >= v258)
                          {
                            v259 += 2;
                            goto LABEL_232;
                          }
                          v266 = *(_QWORD *)(v361 + 8 * (v259 + 3));
                          if (v266)
                          {
                            v265 = v259 + 3;
                            goto LABEL_227;
                          }
                          v265 = v259 + 4;
                          if (v259 + 4 >= v258)
                          {
                            v259 += 3;
                            goto LABEL_232;
                          }
                          v266 = *(_QWORD *)(v361 + 8 * v265);
                          if (v266)
                            goto LABEL_227;
                          do
                          {
                            if (v258 - 5 == v259)
                            {
                              v259 = v258 - 1;
                              goto LABEL_232;
                            }
                            v266 = *(_QWORD *)(v239 + 104 + 8 * v259++);
                          }
                          while (!v266);
                          v265 = v259 + 4;
LABEL_227:
                          v257 = (v266 - 1) & v266;
                          v261 = __clz(__rbit64(v266)) + (v265 << 6);
                          v259 = v265;
LABEL_223:
                          v262 = *(_QWORD *)(v239 + 56);
                          v263 = (_QWORD *)(*(_QWORD *)(v239 + 48) + 16 * v261);
                          v264 = v263[1];
                          *(_QWORD *)&v373 = *v263;
                          *((_QWORD *)&v373 + 1) = v264;
                          outlined init with copy of AttributedString._AttributeValue(v262 + 72 * v261, (uint64_t)&v374);
                          swift_bridgeObjectRetain();
LABEL_233:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v373, (uint64_t)&v379);
                          v267 = *((_QWORD *)&v379 + 1);
                          if (!*((_QWORD *)&v379 + 1))
                          {
                            swift_release();
                            v240 = v351;
                            v252 = v365;
                            if (v353 <= v365 >> 10)
                              goto LABEL_211;
                            goto LABEL_216;
                          }
                          v268 = v379;
                          v270 = *((_QWORD *)&v381 + 1);
                          v269 = v382;
                          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v381 + 1), v382);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)v380);
                          if (v269 != 1)
                          {
                            *(_QWORD *)&v373 = v270;
                            *((_QWORD *)&v373 + 1) = v269;
                            v271 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v270, v269);
                            if ((v271 & 0x100000000) == 0 && v369 != (_DWORD)v271)
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v268, v267, v363, v365, (uint64_t *)v439);
                          }
                          swift_bridgeObjectRelease();
                        }
                        __break(1u);
LABEL_253:
                        v272 = *(_QWORD *)&v439[0];
LABEL_254:
                        result = swift_release();
                        v273 = 0;
                        v274 = v272 + 64;
                        v275 = 1 << *(_BYTE *)(v272 + 32);
                        v276 = -1;
                        if (v275 < 64)
                          v276 = ~(-1 << v275);
                        v277 = v276 & *(_QWORD *)(v272 + 64);
                        v372 = (unint64_t)(v275 + 63) >> 6;
                        v31 = v348;
                        while (1)
                        {
                          if (v277)
                          {
                            v278 = __clz(__rbit64(v277));
                            v277 &= v277 - 1;
                            v279 = v278 | (v273 << 6);
                          }
                          else
                          {
                            v42 = __OFADD__(v273++, 1);
                            if (v42)
                              goto LABEL_346;
                            if (v273 >= v372)
                            {
LABEL_279:
                              swift_release();
                              a1 = v337;
                              v288 = v334 >> 10;
                              if (specialized Range.isEmpty.getter())
                              {
                                v289 = v351[1];
                                v385 = *v351;
                                v386 = v289;
                                v387 = v351[2];
                                if (v288 > (unint64_t)BigString.startIndex.getter() >> 10)
                                {
                                  v31 = (uint64_t)&v385;
                                  if (v288 < (unint64_t)BigString.endIndex.getter() >> 10)
                                  {
                                    result = v337 - 1;
                                    if (__OFSUB__(v337, 1))
                                      goto LABEL_389;
                                    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v337) & 1) != 0)
                                    {
                                      v290 = *v351;
                                      v291 = v351[2];
                                      v481 = v351[1];
                                      v482 = v291;
                                      v480 = v290;
                                      v292 = *v351;
                                      v374 = v351[1];
                                      v375 = v291;
                                      v373 = v292;
                                      outlined init with take of any PredicateExpression<Self.Output == B1>(&v373, (uint64_t)v439);
                                      outlined retain of Locale((uint64_t)v439);
                                      v293 = BigString.index(before:)();
                                      v295 = v294;
                                      v297 = v296;
                                      v299 = v298;
                                      outlined release of Locale((uint64_t)&v480);
                                      AttributedString.Guts._paragraphExtending(from:)(v293, v295, v297, v299, (uint64_t)&v379);
                                      v36 = Range<>._utf8OffsetRange.getter();
                                      v29 = v300;
                                      goto LABEL_309;
                                    }
                                  }
                                }
                                goto LABEL_206;
                              }
                              v301 = v351[1];
                              v439[0] = *v351;
                              v439[1] = v301;
                              v439[2] = v351[2];
                              v31 = (uint64_t)v439;
                              if (v288 <= (unint64_t)BigString.startIndex.getter() >> 10)
                                goto LABEL_289;
                              result = v337 - 1;
                              if (__OFSUB__(v337, 1))
                                goto LABEL_388;
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v337) & 1) != 0)
                              {
                                v302 = *v351;
                                v303 = v351[1];
                                v438 = v351[2];
                                v437[1] = v303;
                                v437[0] = v302;
                                v304 = *v351;
                                v481 = v351[1];
                                v482 = v438;
                                v480 = v304;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v480, (uint64_t)v483);
                                outlined retain of Locale((uint64_t)v483);
                                v305 = BigString.index(before:)();
                                v307 = v306;
                                v309 = v308;
                                v311 = v310;
                                outlined release of Locale((uint64_t)v437);
                                AttributedString.Guts._paragraphExtending(from:)(v305, v307, v309, v311, (uint64_t)&v373);
                                v36 = Range<>._utf8OffsetRange.getter();
                                v29 = v312;
                                LOBYTE(v38) = 0;
                              }
                              else
                              {
LABEL_289:
                                v36 = 0;
                                v29 = 0;
                                LOBYTE(v38) = 1;
                              }
                              v313 = v351[1];
                              v434 = *v351;
                              v435 = v313;
                              v436 = v351[2];
                              if (v333 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                if ((v38 & 1) == 0)
                                  goto LABEL_306;
                                if ((uint64_t)v336 < 1)
                                {
LABEL_206:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  return swift_unknownObjectRelease();
                                }
LABEL_307:
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v336 - 1, v336) & 1) != 0)
                                {
                                  v316 = *v351;
                                  v317 = v351[1];
                                  v433 = v351[2];
                                  v432[1] = v317;
                                  v432[0] = v316;
                                  v318 = *v351;
                                  v386 = v351[1];
                                  v387 = v433;
                                  v385 = v318;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v385, (uint64_t)v484);
                                  outlined retain of Locale((uint64_t)v484);
                                  v319 = BigString.index(before:)();
                                  v321 = v320;
                                  v323 = v322;
                                  v325 = v324;
                                  outlined release of Locale((uint64_t)v432);
                                  AttributedString.Guts._paragraphExtending(from:)(v319, v321, v323, v325, (uint64_t)&v379);
                                  v326 = Range<>._utf8OffsetRange.getter();
                                  v328 = v327;
                                  v329 = 1;
                                  goto LABEL_311;
                                }
                              }
LABEL_310:
                              v326 = 0;
                              v328 = 0;
                              v329 = 0;
LABEL_311:
                              if ((v38 & 1) == 0 && a1 < v29)
                              {
                                v383 = 0;
                                v384 = 0;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v383, v36, a1, v29);
                              }
                              if ((uint64_t)v336 < v328)
                                v330 = v329;
                              else
                                v330 = 0;
                              if (v330 == 1)
                              {
                                v383 = 0;
                                v384 = 0;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v383, v326, v336, v328);
                              }
                              goto LABEL_206;
                            }
                            v280 = *(_QWORD *)(v274 + 8 * v273);
                            if (!v280)
                            {
                              v281 = v273 + 1;
                              if (v273 + 1 >= v372)
                                goto LABEL_279;
                              v280 = *(_QWORD *)(v274 + 8 * v281);
                              if (!v280)
                              {
                                v281 = v273 + 2;
                                if (v273 + 2 >= v372)
                                  goto LABEL_279;
                                v280 = *(_QWORD *)(v274 + 8 * v281);
                                if (!v280)
                                {
                                  v281 = v273 + 3;
                                  if (v273 + 3 >= v372)
                                    goto LABEL_279;
                                  v280 = *(_QWORD *)(v274 + 8 * v281);
                                  if (!v280)
                                  {
                                    while (1)
                                    {
                                      v273 = v281 + 1;
                                      if (__OFADD__(v281, 1))
                                        goto LABEL_359;
                                      if (v273 >= v372)
                                        goto LABEL_279;
                                      v280 = *(_QWORD *)(v274 + 8 * v273);
                                      ++v281;
                                      if (v280)
                                        goto LABEL_269;
                                    }
                                  }
                                }
                              }
                              v273 = v281;
                            }
LABEL_269:
                            v277 = (v280 - 1) & v280;
                            v279 = __clz(__rbit64(v280)) + (v273 << 6);
                          }
                          v282 = (unint64_t *)(*(_QWORD *)(v272 + 48) + 16 * v279);
                          v284 = *v282;
                          v283 = v282[1];
                          v285 = *(_QWORD *)(*(_QWORD *)(v272 + 56) + 8 * v279);
                          result = specialized Array.count.getter(v285);
                          if (result)
                          {
                            v286 = result;
                            if (result < 1)
                              goto LABEL_344;
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v287 = (uint64_t *)(v285 + 40);
                            do
                            {
                              AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v284, v283, *(v287 - 1), *v287, 0);
                              v287 += 2;
                              --v286;
                            }
                            while (v286);
                            swift_bridgeObjectRelease();
                            result = swift_bridgeObjectRelease();
                          }
                        }
                      }
LABEL_251:
                      v272 = MEMORY[0x1E0DEE9E0];
                      goto LABEL_254;
                    }
LABEL_343:
                    __break(1u);
LABEL_344:
                    __break(1u);
LABEL_345:
                    __break(1u);
LABEL_346:
                    __break(1u);
LABEL_347:
                    __break(1u);
LABEL_348:
                    __break(1u);
LABEL_349:
                    __break(1u);
LABEL_350:
                    __break(1u);
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }
LABEL_208:
                  swift_unknownObjectRetain();
                  v236 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v36, v235, v29, v31, v222);
                  swift_release();
                  result = swift_unknownObjectRelease_n();
                  v237 = v38 - v223;
                  if (!__OFSUB__(v38, v223))
                    goto LABEL_209;
                  goto LABEL_343;
                }
                v31 = v110;
                v106 = 1;
              }
LABEL_80:
              v107 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
              v36 = ((-15 << v107) - 1) & v36 | (v106 << v107);
              v32 = *(_QWORD *)(v29 + 24 + 24 * v106);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v29 = v32;
              if (!*(_BYTE *)(v32 + 18))
                goto LABEL_107;
            }
          }
          result = swift_unknownObjectRetain_n();
          v31 = v364;
          v32 = v102;
LABEL_107:
          v122 = *(unsigned __int16 *)(v32 + 16);
          if (!*(_WORD *)(v32 + 16))
            goto LABEL_395;
          v123 = *(_QWORD *)(v32 + 24);
          v42 = __OFSUB__(v31, v123);
          v124 = v31 - v123;
          if (v42)
            goto LABEL_380;
          v103 = v335;
          if (v124 <= 0)
          {
            v127 = 0;
          }
          else
          {
            if ((_DWORD)v122 == 1)
              goto LABEL_397;
            v125 = *(_QWORD *)(v32 + 48);
            v31 = v124 - v125;
            if (__OFSUB__(v124, v125))
              goto LABEL_381;
            if (v31 >= 1)
            {
              if ((_DWORD)v122 == 2)
                goto LABEL_397;
              v126 = (_QWORD *)(v32 + 72);
              v127 = 2;
              while (v122 != v127)
              {
                v128 = v31 - *v126;
                if (__OFSUB__(v31, *v126))
                  goto LABEL_348;
                if (v128 < 1)
                  goto LABEL_122;
                ++v127;
                v126 += 3;
                v31 = v128;
                if (v122 == v127)
                  goto LABEL_397;
              }
              goto LABEL_347;
            }
            v31 = v124;
            v127 = 1;
          }
LABEL_122:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v118 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
LABEL_103:
          swift_unknownObjectRetain();
          v117 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v118, v32, v102, v103);
          result = swift_unknownObjectRelease_n();
          v121 = v105 - v31;
          if (__OFSUB__(v105, v31))
            goto LABEL_367;
          goto LABEL_124;
        }
        v103 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        v105 = v364;
        v37 = v359;
        if (v337 >= 0x800)
          goto LABEL_379;
      }
      swift_unknownObjectRetain_n();
      v118 = specialized Rope._endPath.getter(v102);
      swift_unknownObjectRelease();
      v32 = 0;
      v31 = 0;
      if (v102)
        goto LABEL_103;
      v117 = 0;
      v121 = v105;
LABEL_124:
      *(_QWORD *)&v390 = v104;
      *((_QWORD *)&v390 + 1) = v118;
      *(_QWORD *)&v391 = v32;
      *((_QWORD *)&v391 + 1) = v117;
      *(_QWORD *)&v392 = v121;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v390, 0, v105, (_QWORD *)a1, (uint64_t *)&v373, v37, v356, (uint64_t)&v379);
      swift_bridgeObjectRelease();
      swift_release();
      v85 = v392;
      v129 = *(_QWORD *)(a1 + 64);
      v130 = *(_QWORD *)(a1 + 72);
      v131 = *(_QWORD *)(a1 + 80);
      v132 = *(_QWORD *)(a1 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v366 & 1, v129, v130, v131, v132, (uint64_t *)&v448);
      v133 = v450;
      swift_unknownObjectRelease();
      if (v133 >= v85 || !*(_QWORD *)(v373 + 16))
      {
        swift_release();
        v90 = v371;
        goto LABEL_128;
      }
    }
  }
  swift_release();
LABEL_128:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v390 = v90;
  v134 = *(_QWORD *)(a1 + 64);
  v135 = *(_QWORD *)(a1 + 72);
  v136 = *(_QWORD *)(a1 + 80);
  v37 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v90 - 1, v366 & 1, v134, v135, v136, v37, (uint64_t *)&v448);
  v357 = v449;
  v360 = v448;
  v137 = v450;
  swift_unknownObjectRelease();
  v461[0] = v360;
  v461[1] = v357;
  v462 = v137;
  v138 = *(_QWORD *)(a1 + 64);
  v139 = *(_QWORD *)(a1 + 72);
  v140 = *(_QWORD *)(a1 + 80);
  v141 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v461, v138, v139, v140, v141);
  v143 = v142;
  swift_unknownObjectRelease();
  v36 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v143);
  v29 = v144;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v36 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v32 = 0;
  *(_QWORD *)&v373 = result;
  v145 = 1 << *(_BYTE *)(v36 + 32);
  v43 = -1;
  if (v145 < 64)
    v43 = ~(-1 << v145);
  v146 = v36 + 64;
  v147 = v43 & *(_QWORD *)(v36 + 64);
  v38 = (unint64_t)(v145 + 63) >> 6;
  while (1)
  {
    if (v147)
    {
      v148 = __clz(__rbit64(v147));
      v147 &= v147 - 1;
      v149 = v148 | (v32 << 6);
      goto LABEL_132;
    }
    v40 = v32 + 1;
    if (__OFADD__(v32, 1))
      goto LABEL_338;
    if (v40 >= v38)
    {
LABEL_152:
      swift_release();
      v154 = *(_OWORD *)(a1 + 32);
      v458 = *(_OWORD *)(a1 + 16);
      v459 = v154;
      v460 = *(_OWORD *)(a1 + 48);
      BigString.utf8.getter();
      v31 = BigString.UTF8View.count.getter();
      result = outlined release of Locale((uint64_t)v402);
      if (v31 < v371)
        goto LABEL_370;
      v155 = *(_QWORD *)(a1 + 64);
      v156 = *(_QWORD *)(a1 + 72);
      v157 = *(_QWORD *)(a1 + 80);
      v158 = *(_QWORD *)(a1 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      v159 = v158;
      v160 = v371;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v371, v366 & 1, v155, v156, v157, v159, (uint64_t *)&v448);
      v367 = v448;
      v161 = v449;
      v162 = v450;
      swift_unknownObjectRelease();
      v448 = v367;
      v449 = v161;
      *(_QWORD *)&v450 = v162;
      if (v371 != v31)
        goto LABEL_157;
LABEL_158:
      AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)a1, v160, v403);
      for (i = &v404; v162 < *i && *(_QWORD *)(v373 + 16); i = &v406)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v448, v160, v31, (_QWORD *)a1, (uint64_t *)&v373, v36, v29, (uint64_t)&v390);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((_QWORD *)a1, v160, v31, (uint64_t *)&v448);
        v162 = v450;
        if (v160 == v31)
          goto LABEL_158;
LABEL_157:
        v163 = *(_QWORD *)(a1 + 72);
        v164 = *(_QWORD *)(a1 + 80);
        v165 = *(_QWORD *)(a1 + 88);
        v166 = swift_unknownObjectRetain();
        v167 = v165;
        v160 = v371;
        AttributedString._InternalRuns.endIndex.getter(v166, v163, v164, v167, v405);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_bridgeObjectRelease();
      if ((uint64_t)v390 < (uint64_t)v379)
        goto LABEL_371;
      v358 = v390;
      v337 = v379;
      v3 = v362;
      v55 = v354;
      goto LABEL_162;
    }
    v152 = *(_QWORD *)(v146 + 8 * v40);
    ++v32;
    if (!v152)
    {
      v32 = v40 + 1;
      if (v40 + 1 >= v38)
        goto LABEL_152;
      v152 = *(_QWORD *)(v146 + 8 * v32);
      if (!v152)
      {
        v32 = v40 + 2;
        if (v40 + 2 >= v38)
          goto LABEL_152;
        v152 = *(_QWORD *)(v146 + 8 * v32);
        if (!v152)
        {
          v32 = v40 + 3;
          if (v40 + 3 >= v38)
            goto LABEL_152;
          v152 = *(_QWORD *)(v146 + 8 * v32);
          if (!v152)
          {
            v32 = v40 + 4;
            if (v40 + 4 >= v38)
              goto LABEL_152;
            v152 = *(_QWORD *)(v146 + 8 * v32);
            if (!v152)
              break;
          }
        }
      }
    }
LABEL_151:
    v147 = (v152 - 1) & v152;
    v149 = __clz(__rbit64(v152)) + (v32 << 6);
LABEL_132:
    v150 = (unint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v149);
    v151 = *v150;
    v37 = v150[1];
    swift_bridgeObjectRetain();
    v31 = (uint64_t)&v373;
    specialized Set._Variant.insert(_:)((unint64_t *)&v448, v151, v37);
    result = swift_bridgeObjectRelease();
  }
  v153 = v40 + 5;
  if (v153 >= v38)
    goto LABEL_152;
  v152 = *(_QWORD *)(v146 + 8 * v153);
  if (v152)
  {
    v32 = v153;
    goto LABEL_151;
  }
  while (1)
  {
    v32 = v153 + 1;
    if (__OFADD__(v153, 1))
      break;
    if (v32 >= v38)
      goto LABEL_152;
    v152 = *(_QWORD *)(v146 + 8 * v32);
    ++v153;
    if (v152)
      goto LABEL_151;
  }
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  if (!v31)
    __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  if (!v31)
    __break(1u);
LABEL_397:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  __int128 v74;
  unsigned __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char Enum;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  int64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *i;
  __int128 v159;
  uint64_t v160;
  _OWORD *v161;
  unsigned __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  __int128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 *v223;
  uint64_t v224;
  __int128 v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  unint64_t v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int64_t v241;
  int64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  int64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  int64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int64_t v306;
  int64_t v307;
  int64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  __int128 *v323;
  unint64_t v324;
  unsigned __int128 v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  __int128 v331;
  int64_t v332;
  uint64_t v333;
  unint64_t v335;
  uint64_t v336;
  unsigned __int128 v337;
  char v338;
  __int128 v339;
  unint64_t v340;
  _QWORD *v341;
  __int128 v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  int64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  __int128 v365;
  unsigned __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  char v372[48];
  __int128 v373;
  unsigned __int128 v374;
  uint64_t v375;
  char v376[48];
  unint64_t v377[4];
  uint64_t v378;
  uint64_t v379[4];
  uint64_t v380;
  char v381[48];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  char v385[48];
  char v386[48];
  char v387[48];
  char v388[48];
  char v389[48];
  char v390[48];
  char v391[48];
  char v392[48];
  char v393[48];
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _OWORD v406[2];
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  _OWORD v411[2];
  __int128 v412;
  _OWORD v413[3];
  _QWORD v414[5];
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  unsigned __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  _OWORD v446[2];
  uint64_t v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  _BYTE v461[40];
  _BYTE v462[56];

  v5 = v1;
  v6 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = *(_QWORD **)v1;
    v8 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v9 = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v453 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v452 = v9;
    v451 = v8;
    v10 = v7[8];
    v11 = v7[9];
    v12 = v7[10];
    v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    v14 = swift_allocObject();
    v15 = BigString.isEmpty.getter();
    if (v10)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v451);
      swift_unknownObjectRelease();
      v2 = v10;
    }
    else
    {
      outlined retain of Locale((uint64_t)&v451);
      v2 = 0;
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v10);
    swift_unknownObjectRelease();
    if (v10)
    {
      swift_unknownObjectRelease();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_7:
        v16 = v452;
        *(_OWORD *)(v14 + 16) = v451;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v453;
        *(_QWORD *)(v14 + 64) = v10;
        *(_QWORD *)(v14 + 72) = v11;
        *(_QWORD *)(v14 + 80) = v12;
        *(_QWORD *)(v14 + 88) = v13;
        *(_QWORD *)v5 = v14;
        swift_release();
        v6 = a1;
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v15 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_8:
  v4 = *(_QWORD *)v5;
  v17 = *(_OWORD *)(*(_QWORD *)v5 + 32);
  v448 = *(_OWORD *)(*(_QWORD *)v5 + 16);
  v449 = v17;
  v450 = *(_OWORD *)(v4 + 48);
  result = BigString.isEmpty.getter();
  v328 = v5;
  if ((result & 1) != 0)
  {
    v19 = 0;
    v317 = MEMORY[0x1E0DEE9E0];
    goto LABEL_26;
  }
  v20 = *v6;
  if (*v6 >= 0x800 && (v6[4] ^ v20) <= 0x3FF)
  {
    v2 = v6[2];
    BigString.utf8.getter();
    v20 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v372);
  }
  v15 = *(_QWORD *)(v4 + 64);
  v3 = *(_QWORD *)(v4 + 80);
  if (v15)
    v21 = *(_QWORD *)(v4 + 80);
  else
    v21 = 0;
  v13 = v20 >> 11;
  if (v21 < (uint64_t)(v20 >> 11))
    goto LABEL_401;
  v12 = *(_QWORD *)(v4 + 72);
  v10 = *(_QWORD *)(v4 + 88);
  if (!v15 || (v13 < v3 ? (v22 = *(unsigned __int16 *)(v15 + 16) == 0) : (v22 = 1), v22))
  {
    v23 = swift_unknownObjectRetain_n();
    v24 = specialized Rope._endPath.getter(v23);
    swift_unknownObjectRelease();
    v5 = 0;
    v19 = 0;
    v25 = 0;
    if (!v15)
      goto LABEL_25;
LABEL_24:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v24, v5, v15, v12);
    swift_unknownObjectRelease_n();
    v19 = 0;
    v25 = v5;
    goto LABEL_25;
  }
LABEL_41:
  v345 = v12;
  v40 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v19 = -15;
    v2 = 24;
    v41 = v15;
    while (1)
    {
      v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16))
        goto LABEL_44;
      v44 = *(_QWORD *)(v41 + 40);
      v45 = __OFSUB__(v13, v44);
      v46 = v13 - v44;
      if (v45)
        goto LABEL_386;
      if (__OFADD__(v46, 1))
      {
LABEL_387:
        __break(1u);
LABEL_388:
        __break(1u);
LABEL_389:
        __break(1u);
LABEL_390:
        __break(1u);
LABEL_391:
        __break(1u);
LABEL_392:
        __break(1u);
LABEL_393:
        __break(1u);
LABEL_394:
        __break(1u);
LABEL_395:
        __break(1u);
LABEL_396:
        __break(1u);
LABEL_397:
        __break(1u);
LABEL_398:
        __break(1u);
LABEL_399:
        __break(1u);
LABEL_400:
        __break(1u);
LABEL_401:
        __break(1u);
LABEL_402:
        __break(1u);
LABEL_403:
        __break(1u);
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
LABEL_408:
        __break(1u);
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
        goto LABEL_411;
      }
      if (v46 + 1 >= 1)
        break;
      v43 = 0;
LABEL_45:
      v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      v40 = ((-15 << v42) - 1) & v40 | (v43 << v42);
      v5 = *(_QWORD *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v41 = v5;
      if (!*(_BYTE *)(v5 + 18))
        goto LABEL_74;
    }
    if ((_DWORD)v43 != 1)
    {
      v47 = (uint64_t *)(v41 + 64);
      v48 = 1;
      while (1)
      {
        v49 = *v47;
        v47 += 3;
        v13 = v46 - v49;
        if (__OFSUB__(v46, v49))
          goto LABEL_368;
        if (__OFADD__(v13, 1))
          goto LABEL_369;
        if (v13 + 1 < 1)
          break;
        ++v48;
        v46 = v13;
        if (v43 == v48)
          goto LABEL_44;
      }
      v43 = v48;
      v13 = v46;
      goto LABEL_45;
    }
    v13 = v46;
LABEL_44:
    if (v13)
      goto LABEL_385;
    goto LABEL_45;
  }
  swift_unknownObjectRetain_n();
  v5 = v15;
LABEL_74:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v13, 0, (_WORD *)(v5 + 16), (uint64_t *)(v5 + 24));
  if (result < 0)
    goto LABEL_415;
  v57 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v19 = 0;
  v24 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v57 << 8);
  v25 = v5;
  v12 = v345;
  if (v15)
    goto LABEL_24;
LABEL_25:
  v26 = *(_QWORD *)(v4 + 64);
  v27 = *(_QWORD *)(v4 + 72);
  v28 = *(_QWORD *)(v4 + 80);
  v29 = *(_QWORD *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v10, v24, v25, v26, v27, v28, v29);
  swift_unknownObjectRelease();
  v30 = swift_bridgeObjectRetain();
  v317 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v5 = v328;
  v6 = a1;
LABEL_26:
  v3 = *(_QWORD *)v5;
  v324 = *v6;
  v31 = *v6 >> 11;
  v32 = v6[4] >> 11;
  v327 = v32 - v31;
  if (v32 == v31)
  {
    v316 = v324 >> 11;
    v33 = v324 >> 11;
LABEL_198:
    v159 = *(_OWORD *)(v3 + 32);
    v440 = *(_OWORD *)(v3 + 16);
    v441 = v159;
    v442 = *(_OWORD *)(v3 + 48);
    BigString.utf8.getter();
    v160 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v381);
    v161 = *(_OWORD **)v5;
    v162 = *(_OWORD *)(*(_QWORD *)v5 + 32);
    v365 = *(_OWORD *)(*(_QWORD *)v5 + 16);
    v366 = v162;
    v163 = *(_OWORD *)(v5 + 8);
    v367 = v161[3];
    v368 = v163;
    v164 = *(_OWORD *)(v5 + 40);
    v369 = *(_OWORD *)(v5 + 24);
    v370 = v164;
    v371 = *(_OWORD *)(v5 + 56);
    swift_unknownObjectRetain();
    BigString.init()();
    v165 = v383;
    v161[1] = v382;
    v161[2] = v165;
    v161[3] = v384;
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Unicode.Scalar> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Unicode.Scalar>, MEMORY[0x1E0DEC778]);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    v2 = *(_QWORD *)v5;
    v437 = v369;
    v438 = v370;
    v439 = v371;
    v433 = v365;
    v434 = v366;
    v436 = v368;
    v435 = v367;
    v457 = v371;
    v456 = v370;
    v454 = v368;
    v455 = v369;
    BigSubstring.UnicodeScalarView.base.getter();
    v166 = v395;
    *(_OWORD *)(v2 + 16) = v394;
    *(_OWORD *)(v2 + 32) = v166;
    *(_OWORD *)(v2 + 48) = v396;
    swift_unknownObjectRelease();
    v167 = v455;
    *(_OWORD *)(v5 + 8) = v454;
    *(_OWORD *)(v5 + 24) = v167;
    v168 = v457;
    *(_OWORD *)(v5 + 40) = v456;
    *(_OWORD *)(v5 + 56) = v168;
    v169 = *(_QWORD *)v5;
    v170 = *(_OWORD *)(*(_QWORD *)v5 + 32);
    v430 = *(_OWORD *)(*(_QWORD *)v5 + 16);
    v431 = v170;
    v432 = *(_OWORD *)(v169 + 48);
    BigString.utf8.getter();
    v171 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v385);
    v172 = v171 - v160;
    if (__OFSUB__(v171, v160))
      goto LABEL_393;
    v173 = v327 + v172;
    if (__OFADD__(v327, v172))
      goto LABEL_394;
    swift_bridgeObjectRetain();
    v2 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v31, v32, v173, v317, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174 = *(_QWORD *)v5;
    v175 = *(_OWORD *)(*(_QWORD *)v5 + 32);
    v427 = *(_OWORD *)(*(_QWORD *)v5 + 16);
    v428 = v175;
    v429 = *(_OWORD *)(v174 + 48);
    BigString.utf8.getter();
    v176 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v386);
    v177 = v176 - v160;
    if (__OFSUB__(v176, v160))
      goto LABEL_395;
    v45 = __OFADD__(v33, v177);
    v178 = v33 + v177;
    if (v45)
      goto LABEL_396;
    if (v178 < v316)
      goto LABEL_397;
    v179 = *(_QWORD *)(v174 + 80);
    if (!*(_QWORD *)(v174 + 64))
    {
      v217 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v217);
      swift_unknownObjectRelease();
      goto LABEL_240;
    }
    v315 = v178;
    v180 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v180);
    swift_unknownObjectRelease_n();
    if (!v179)
      goto LABEL_240;
    v322 = (_QWORD *)v174;
    v181 = (__int128 *)(v174 + 16);
    v182 = *(_OWORD *)(v174 + 32);
    v424 = *(_OWORD *)(v174 + 16);
    v425 = v182;
    v426 = *(_OWORD *)(v174 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v183 = BigString.UTF8View.index(_:offsetBy:)();
    v2 = v184;
    v186 = v185;
    v188 = v187;
    outlined release of Locale((uint64_t)v387);
    v189 = *(_OWORD *)(v174 + 32);
    v421 = *(_OWORD *)(v174 + 16);
    v422 = v189;
    v423 = *(_OWORD *)(v174 + 48);
    result = BigString.utf8.getter();
    if (__OFSUB__(v315, v316))
      goto LABEL_408;
    v190 = BigString.UTF8View.index(_:offsetBy:)();
    v192 = v191;
    v194 = v193;
    v196 = v195;
    outlined release of Locale((uint64_t)v388);
    specialized Range.init(uncheckedBounds:)(v183, v2, v186, v188, v190, v192, v194, v196, v414);
    *(_QWORD *)&v413[0] = MEMORY[0x1E0DEE9E0];
    v197 = v181[1];
    v418 = *v181;
    v419 = v197;
    v420 = v181[2];
    BigString.unicodeScalars.getter();
    v314 = v414[0];
    v198 = BigString.UnicodeScalarView.index(roundingDown:)();
    v200 = v199;
    v2 = v201;
    v203 = v202;
    outlined release of Locale((uint64_t)v389);
    v204 = v181[1];
    v415 = *v181;
    v416 = v204;
    v323 = v181;
    v417 = v181[2];
    BigString.unicodeScalars.getter();
    v313 = v414[4];
    v205 = BigString.UnicodeScalarView.index(roundingUp:)();
    result = outlined release of Locale((uint64_t)v390);
    *(_QWORD *)&v458 = v198;
    *((_QWORD *)&v458 + 1) = v200;
    *(_QWORD *)&v459 = v2;
    *((_QWORD *)&v459 + 1) = v203;
    v13 = v198 >> 11;
    v3 = v205 >> 11;
    if (v205 >> 11 < v198 >> 11)
      goto LABEL_409;
    v5 = (uint64_t)v322;
    v15 = v322[8];
    v89 = v322[10];
    if (v15)
      v206 = v322[10];
    else
      v206 = 0;
    if (v206 < v13)
      goto LABEL_410;
    v207 = v322[9];
    v10 = v322[11];
    if (!v15 || v13 >= v89 || !*(_WORD *)(v15 + 16))
    {
      swift_retain_n();
      v218 = swift_unknownObjectRetain_n();
      v2 = specialized Rope._endPath.getter(v218);
      swift_unknownObjectRelease();
      v19 = 0;
      v208 = 0;
      if (!v15)
        goto LABEL_373;
      goto LABEL_242;
    }
    v341 = (_QWORD *)v322[9];
    v40 = *(unsigned __int8 *)(v15 + 18);
    if (!*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      result = swift_retain_n();
      v208 = v13;
      v19 = v15;
LABEL_327:
      v2 = *(unsigned __int16 *)(v19 + 16);
      if (!*(_WORD *)(v19 + 16))
      {
        v5 = (uint64_t)v322;
        goto LABEL_334;
      }
      v295 = *(_QWORD *)(v19 + 24);
      v53 = v208 - v295;
      v5 = (uint64_t)v322;
      if (__OFSUB__(v208, v295))
        goto LABEL_421;
      if (__OFADD__(v53, 1))
        goto LABEL_422;
      if (v53 + 1 <= 0)
      {
        v2 = 0;
      }
      else
      {
        if ((_DWORD)v2 != 1)
          goto LABEL_352;
        v208 -= v295;
LABEL_334:
        if (v208)
        {
          __break(1u);
LABEL_336:
          if (v19 < v315)
            goto LABEL_337;
LABEL_339:
          LOBYTE(v89) = 0;
          goto LABEL_340;
        }
      }
      goto LABEL_372;
    }
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v208 = v13;
    v2 = v15;
    while (1)
    {
      v210 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16))
        goto LABEL_217;
      v211 = *(_QWORD *)(v2 + 40);
      v212 = v208 - v211;
      if (__OFSUB__(v208, v211))
        goto LABEL_390;
      if (__OFADD__(v212, 1))
        goto LABEL_391;
      if (v212 + 1 <= 0)
      {
        v210 = 0;
      }
      else
      {
        if ((_DWORD)v210 == 1)
        {
          v208 -= v211;
          goto LABEL_217;
        }
        v213 = *(_QWORD *)(v2 + 64);
        v45 = __OFSUB__(v212, v213);
        v214 = v212 - v213;
        if (v45)
          goto LABEL_406;
        if (__OFADD__(v214, 1))
          goto LABEL_407;
        if (v214 + 1 < 1)
        {
          v210 = 1;
          v208 = v212;
        }
        else
        {
          if ((_DWORD)v210 == 2)
          {
            v208 = v214;
LABEL_217:
            if (v208)
              goto LABEL_389;
            goto LABEL_218;
          }
          v215 = (_QWORD *)(v2 + 88);
          v216 = 2;
          while (1)
          {
            if (v210 == v216)
              goto LABEL_382;
            v208 = v214 - *v215;
            if (__OFSUB__(v214, *v215))
              goto LABEL_383;
            if (__OFADD__(v208, 1))
              goto LABEL_384;
            if (v208 + 1 < 1)
              break;
            ++v216;
            v215 += 3;
            v214 = v208;
            if (v210 == v216)
              goto LABEL_217;
          }
          v210 = v216;
          v208 = v214;
        }
      }
LABEL_218:
      v209 = (4 * *(_BYTE *)(v2 + 18) + 8) & 0x3C;
      v40 = ((-15 << v209) - 1) & v40 | (v210 << v209);
      v19 = *(_QWORD *)(v2 + 24 + 24 * v210);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v2 = v19;
      if (!*(_BYTE *)(v19 + 18))
        goto LABEL_327;
    }
  }
  v353 = v324 >> 11;
  v10 = *(_QWORD *)(v3 + 64);
  v2 = *(_QWORD *)(v3 + 80);
  if (v10)
    v34 = *(_QWORD *)(v3 + 80);
  else
    v34 = 0;
  if (v34 < v31)
    goto LABEL_402;
  v35 = *(_QWORD *)(v3 + 72);
  v15 = *(_QWORD *)(v3 + 88);
  v332 = v324 >> 11;
  v344 = v32;
  if (!v10)
    goto LABEL_38;
  if (*(_WORD *)(v10 + 16))
    v36 = v31 < v2;
  else
    v36 = 0;
  if (!v36)
  {
    swift_unknownObjectRetain();
LABEL_38:
    v37 = swift_unknownObjectRetain();
    v38 = specialized Rope._endPath.getter(v37);
    swift_unknownObjectRelease();
    v39 = 0;
    goto LABEL_80;
  }
  v336 = *(_QWORD *)(v3 + 72);
  v341 = *(_QWORD **)(v3 + 80);
  v5 = *(unsigned __int8 *)(v10 + 18);
  if (*(_BYTE *)(v10 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v2 = -15;
    v40 = 24;
    v13 = v31;
    v50 = v10;
    while (1)
    {
      v51 = *(unsigned __int16 *)(v50 + 16);
      if (*(_WORD *)(v50 + 16))
      {
        v53 = 0;
        v54 = (uint64_t *)(v50 + 40);
        while (1)
        {
          v55 = *v54;
          v54 += 3;
          v56 = v13 - v55;
          if (__OFSUB__(v13, v55))
          {
            __break(1u);
LABEL_358:
            __break(1u);
            goto LABEL_359;
          }
          if (__OFADD__(v56, 1))
            goto LABEL_358;
          if (v56 + 1 < 1)
            break;
          ++v53;
          v13 = v56;
          if (v51 == v53)
            goto LABEL_71;
        }
        v51 = v53;
      }
      else
      {
        v56 = v13;
LABEL_71:
        if (v56)
          goto LABEL_388;
        v13 = 0;
      }
      v52 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
      v5 = ((-15 << v52) - 1) & v5 | (v51 << v52);
      v39 = *(_QWORD *)(v50 + 24 + 24 * v51);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v50 = v39;
      if (!*(_BYTE *)(v39 + 18))
        goto LABEL_78;
    }
  }
  swift_unknownObjectRetain_n();
  v13 = v31;
  v39 = v10;
LABEL_78:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v13, 0, (_WORD *)(v39 + 16), (uint64_t *)(v39 + 24));
  if (result < 0)
    goto LABEL_417;
  v58 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v38 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v58 << 8);
  v2 = (uint64_t)v341;
  v35 = v336;
LABEL_80:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v15, v38, v39, v10, v35, v2, v15);
  swift_unknownObjectRelease_n();
  v59 = *(_QWORD *)(v3 + 64);
  v60 = *(_QWORD *)(v3 + 72);
  v2 = *(_QWORD *)(v3 + 80);
  v61 = *(_QWORD *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v15, v38, v39, v59, v60, v2, v61);
  v63 = v62;
  swift_unknownObjectRelease();
  v64 = swift_bridgeObjectRetain();
  v10 = specialized _NativeDictionary.filter(_:)(v64);
  swift_bridgeObjectRelease_n();
  v15 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v65 = 0;
  *(_QWORD *)&v365 = result;
  v66 = 1 << *(_BYTE *)(v10 + 32);
  v46 = -1;
  if (v66 < 64)
    v46 = ~(-1 << v66);
  v40 = v10 + 64;
  v5 = v46 & *(_QWORD *)(v10 + 64);
  v13 = (unint64_t)(v66 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v67 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v68 = v67 | (v65 << 6);
      goto LABEL_84;
    }
    v43 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      v2 = v46;
      v208 = v43;
      goto LABEL_372;
    }
    if (v43 >= v13)
      goto LABEL_104;
    v70 = *(_QWORD *)(v40 + 8 * v43);
    ++v65;
    if (!v70)
    {
      v65 = v43 + 1;
      if (v43 + 1 >= v13)
        goto LABEL_104;
      v70 = *(_QWORD *)(v40 + 8 * v65);
      if (!v70)
      {
        v65 = v43 + 2;
        if (v43 + 2 >= v13)
          goto LABEL_104;
        v70 = *(_QWORD *)(v40 + 8 * v65);
        if (!v70)
        {
          v65 = v43 + 3;
          if (v43 + 3 >= v13)
            goto LABEL_104;
          v70 = *(_QWORD *)(v40 + 8 * v65);
          if (!v70)
          {
            v65 = v43 + 4;
            if (v43 + 4 >= v13)
              goto LABEL_104;
            v70 = *(_QWORD *)(v40 + 8 * v65);
            if (!v70)
              break;
          }
        }
      }
    }
LABEL_103:
    v5 = (v70 - 1) & v70;
    v68 = __clz(__rbit64(v70)) + (v65 << 6);
LABEL_84:
    v69 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v68);
    v19 = *v69;
    v2 = v69[1];
    swift_bridgeObjectRetain();
    v15 = (uint64_t)&v365;
    specialized Set._Variant.insert(_:)((unint64_t *)&v433, v19, v2);
    result = swift_bridgeObjectRelease();
  }
  v71 = v43 + 5;
  if (v71 < v13)
  {
    v70 = *(_QWORD *)(v40 + 8 * v71);
    if (!v70)
    {
      while (1)
      {
        v65 = v71 + 1;
        if (__OFADD__(v71, 1))
          break;
        if (v65 >= v13)
          goto LABEL_104;
        v70 = *(_QWORD *)(v40 + 8 * v65);
        ++v71;
        if (v70)
          goto LABEL_103;
      }
LABEL_411:
      __break(1u);
      goto LABEL_412;
    }
    v65 = v71;
    goto LABEL_103;
  }
LABEL_104:
  swift_release();
  v72 = v365;
  *(_QWORD *)&v347 = v365;
  v330 = v10;
  if (v324 > 0x7FF)
  {
    v78 = *(_QWORD *)(v3 + 64);
    v79 = *(_QWORD *)(v3 + 72);
    v80 = *(_QWORD *)(v3 + 80);
    v81 = *(_QWORD *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v78, v79, v80, v81, &v373);
    v337 = v374;
    v342 = v373;
    v76 = (_QWORD *)v3;
    v77 = v375;
    swift_unknownObjectRelease();
    v75 = v337;
    v74 = v342;
  }
  else
  {
    v73 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v73, 0, (unint64_t *)&v373);
    v74 = v373;
    v75 = v374;
    v76 = (_QWORD *)v3;
    v77 = v375;
  }
  v365 = v74;
  v366 = v75;
  *(_QWORD *)&v367 = v77;
  v82 = v76[8];
  v83 = v76[9];
  v84 = v76[10];
  v85 = v76[11];
  v341 = v76;
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v338 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v82, v83, v84, v85, (uint64_t *)&v433);
  v87 = v435;
  swift_unknownObjectRelease();
  if (v87 < v77 && *(_QWORD *)(v72 + 16))
  {
    v323 = (__int128 *)v63;
    do
    {
      v89 = *((_QWORD *)&v365 + 1);
      v88 = v365;
      v90 = v366;
      v91 = v341[8];
      v2 = v341[9];
      v92 = v341[10];
      v93 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v93);
      if (v91)
      {
        result = swift_unknownObjectRelease();
        if (v77 != v92)
          goto LABEL_134;
      }
      else if (v77)
      {
LABEL_134:
        v104 = v341[8];
        v105 = v341[9];
        v2 = v341[10];
        v106 = v341[11];
        *(_QWORD *)&v433 = v88;
        *((_QWORD *)&v433 + 1) = v89;
        *(_QWORD *)&v434 = v90;
        v107 = *((_QWORD *)&v90 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v90 + 1), 1))
          goto LABEL_398;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v433, v104, v105, v2, v106);
        v108 = *((_QWORD *)&v433 + 1);
        v89 = v434;
        v95 = v433;
        v109 = specialized Rope.subscript.getter(v433, *((unint64_t *)&v433 + 1), v434, v104, v105, v2, v106);
        v2 = v110;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v111 = v77 - v109;
        if (__OFSUB__(v77, v109))
          goto LABEL_399;
        v10 = v324 >> 11;
        v63 = (uint64_t)v323;
        v3 = (int64_t)v341;
        goto LABEL_162;
      }
      v3 = (int64_t)v341;
      v40 = v341[8];
      v94 = v341[9];
      v95 = v341[11];
      if (v40)
      {
        v96 = v341[9];
        v13 = v341[11];
        v10 = v324 >> 11;
        v5 = -15;
        if (v341[10] < v332)
          goto LABEL_403;
        if (*(_WORD *)(v40 + 16))
        {
          v15 = *(unsigned __int8 *)(v40 + 18);
          if (*(_BYTE *)(v40 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v2 = v324 >> 11;
            v19 = v40;
            while (1)
            {
              v98 = *(unsigned __int16 *)(v19 + 16);
              if (!*(_WORD *)(v19 + 16))
                goto LABEL_427;
              v99 = *(_QWORD *)(v19 + 40);
              v45 = __OFSUB__(v2, v99);
              v100 = v2 - v99;
              if (v45)
                goto LABEL_377;
              if (v100 <= 0)
              {
                v53 = 0;
              }
              else
              {
                if ((_DWORD)v98 == 1)
                  goto LABEL_429;
                v101 = *(_QWORD *)(v19 + 64);
                v2 = v100 - v101;
                if (__OFSUB__(v100, v101))
                  goto LABEL_381;
                if (v2 >= 1)
                {
                  if ((_DWORD)v98 == 2)
                    goto LABEL_429;
                  v102 = (_QWORD *)(v19 + 88);
                  v53 = 2;
                  while (v98 != v53)
                  {
                    v103 = v2 - *v102;
                    if (__OFSUB__(v2, *v102))
                      goto LABEL_351;
                    if (v103 < 1)
                      goto LABEL_118;
                    ++v53;
                    v102 += 3;
                    v2 = v103;
                    if (v98 == v53)
                      goto LABEL_429;
                  }
                  __break(1u);
LABEL_351:
                  __break(1u);
LABEL_352:
                  v311 = *(_QWORD *)(v19 + 48);
                  v45 = __OFSUB__(v53, v311);
                  v43 = v53 - v311;
                  if (v45)
                    goto LABEL_425;
                  if (__OFADD__(v43, 1))
                    goto LABEL_426;
                  if (v43 + 1 >= 1)
                  {
                    if ((_DWORD)v2 != 2)
                    {
                      v312 = (_QWORD *)(v19 + 72);
                      v46 = 2;
                      while (v2 != v46)
                      {
                        v208 = v43 - *v312;
                        if (__OFSUB__(v43, *v312))
                          goto LABEL_419;
                        if (__OFADD__(v208, 1))
                          goto LABEL_420;
                        if (v208 + 1 < 1)
                          goto LABEL_371;
                        ++v46;
                        v312 += 3;
                        v43 = v208;
                        if (v2 == v46)
                          goto LABEL_334;
                      }
                      goto LABEL_418;
                    }
                    v208 = v43;
                    goto LABEL_334;
                  }
LABEL_359:
                  v2 = 1;
                  v208 = v53;
LABEL_372:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v2 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v2 << 8);
                  v207 = (uint64_t)v341;
                  if (!v15)
                  {
LABEL_373:
                    result = swift_release();
                    v219 = 0;
                    v220 = v13 - v208;
                    if (!__OFSUB__(v13, v208))
                    {
LABEL_243:
                      *(_QWORD *)&v360 = v5;
                      *((_QWORD *)&v360 + 1) = v13;
                      *(_QWORD *)&v361 = v3;
                      *((_QWORD *)&v361 + 1) = v10;
                      *(_QWORD *)&v362 = v2;
                      *((_QWORD *)&v362 + 1) = v19;
                      v363 = v219;
                      v364 = v220;
                      specialized IndexingIterator.next()();
                      if (v221)
                      {
                        v222 = v221;
                        v223 = v323;
                        while (1)
                        {
                          v225 = v223[1];
                          v403 = *v223;
                          v404 = v225;
                          v405 = v223[2];
                          BigString.utf8.getter();
                          v226 = v458;
                          v329 = v459;
                          v227 = BigString.UTF8View.index(_:offsetBy:)();
                          v229 = v228;
                          v2 = v230;
                          v232 = v231;
                          outlined release of Locale((uint64_t)v391);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v233 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v222);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v321 = v2;
                          v319 = v229;
                          v320 = v232;
                          v318 = v227;
                          if ((v233 & 1) != 0)
                          {
                            v326 = v227 >> 10;
                            if (v227 >> 10 > v226 >> 10)
                              break;
                          }
LABEL_245:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v458, v318, v319, v321, v320);
                          specialized IndexingIterator.next()();
                          v222 = v224;
                          if (!v224)
                            goto LABEL_285;
                        }
                        v234 = v226;
                        v333 = v222 + 64;
LABEL_250:
                        v235 = v223[1];
                        v400 = *v223;
                        v401 = v235;
                        v402 = v223[2];
                        BigString.unicodeScalars.getter();
                        v2 = v329;
                        v343 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v392);
                        v236 = v223[1];
                        v397 = *v223;
                        v398 = v236;
                        v399 = v223[2];
                        BigString.unicodeScalars.getter();
                        v335 = v234;
                        v340 = BigString.UnicodeScalarView.index(after:)();
                        v329 = v237;
                        outlined release of Locale((uint64_t)v393);
                        v238 = 1 << *(_BYTE *)(v222 + 32);
                        if (v238 < 64)
                          v239 = ~(-1 << v238);
                        else
                          v239 = -1;
                        v240 = v239 & *(_QWORD *)(v222 + 64);
                        v241 = (unint64_t)(v238 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v242 = 0;
                        while (1)
                        {
                          if (v240)
                          {
                            v243 = __clz(__rbit64(v240));
                            v240 &= v240 - 1;
                            v244 = v243 | (v242 << 6);
                            goto LABEL_257;
                          }
                          v248 = v242 + 1;
                          if (__OFADD__(v242, 1))
                            break;
                          if (v248 >= v241)
                            goto LABEL_266;
                          v249 = *(_QWORD *)(v333 + 8 * v248);
                          if (v249)
                            goto LABEL_261;
                          if (v242 + 2 >= v241)
                          {
                            ++v242;
LABEL_266:
                            v240 = 0;
                            v352 = 0;
                            v350 = 0u;
                            v351 = 0u;
                            v348 = 0u;
                            v349 = 0u;
                            v347 = 0u;
                            goto LABEL_267;
                          }
                          v249 = *(_QWORD *)(v333 + 8 * (v242 + 2));
                          if (v249)
                          {
                            v248 = v242 + 2;
                            goto LABEL_261;
                          }
                          if (v242 + 3 >= v241)
                          {
                            v242 += 2;
                            goto LABEL_266;
                          }
                          v249 = *(_QWORD *)(v333 + 8 * (v242 + 3));
                          if (v249)
                          {
                            v248 = v242 + 3;
                            goto LABEL_261;
                          }
                          v248 = v242 + 4;
                          if (v242 + 4 >= v241)
                          {
                            v242 += 3;
                            goto LABEL_266;
                          }
                          v249 = *(_QWORD *)(v333 + 8 * v248);
                          if (v249)
                            goto LABEL_261;
                          do
                          {
                            if (v241 - 5 == v242)
                            {
                              v242 = v241 - 1;
                              goto LABEL_266;
                            }
                            v249 = *(_QWORD *)(v222 + 104 + 8 * v242++);
                          }
                          while (!v249);
                          v248 = v242 + 4;
LABEL_261:
                          v240 = (v249 - 1) & v249;
                          v244 = __clz(__rbit64(v249)) + (v248 << 6);
                          v242 = v248;
LABEL_257:
                          v245 = *(_QWORD *)(v222 + 56);
                          v246 = (_QWORD *)(*(_QWORD *)(v222 + 48) + 16 * v244);
                          v247 = v246[1];
                          *(_QWORD *)&v347 = *v246;
                          *((_QWORD *)&v347 + 1) = v247;
                          outlined init with copy of AttributedString._AttributeValue(v245 + 72 * v244, (uint64_t)&v348);
                          swift_bridgeObjectRetain();
LABEL_267:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v347, (uint64_t)&v353);
                          v250 = v354;
                          if (!v354)
                          {
                            swift_release();
                            v223 = v323;
                            v234 = v340;
                            if (v326 <= v340 >> 10)
                              goto LABEL_245;
                            goto LABEL_250;
                          }
                          v251 = v353;
                          v252 = v356;
                          v2 = v357;
                          outlined copy of AttributedString.AttributeRunBoundaries?(v356, v357);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v355);
                          if (v2 != 1)
                          {
                            *(_QWORD *)&v347 = v252;
                            *((_QWORD *)&v347 + 1) = v2;
                            v253 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v252, v2);
                            if ((v253 & 0x100000000) == 0 && v343 != (_DWORD)v253)
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v251, v250, v335, v340, (uint64_t *)v413);
                          }
                          swift_bridgeObjectRelease();
                        }
                        __break(1u);
LABEL_285:
                        v254 = *(_QWORD *)&v413[0];
                      }
                      else
                      {
                        v254 = MEMORY[0x1E0DEE9E0];
                      }
                      result = swift_release();
                      v255 = 0;
                      v256 = v254 + 64;
                      v257 = 1 << *(_BYTE *)(v254 + 32);
                      v258 = -1;
                      if (v257 < 64)
                        v258 = ~(-1 << v257);
                      v259 = v258 & *(_QWORD *)(v254 + 64);
                      v346 = (unint64_t)(v257 + 63) >> 6;
                      while (1)
                      {
                        if (v259)
                        {
                          v260 = __clz(__rbit64(v259));
                          v259 &= v259 - 1;
                          v261 = v260 | (v255 << 6);
                        }
                        else
                        {
                          v45 = __OFADD__(v255++, 1);
                          if (v45)
                            goto LABEL_378;
                          if (v255 >= v346)
                          {
LABEL_311:
                            swift_release();
                            v5 = v316;
                            v269 = v314 >> 10;
                            if (specialized Range.isEmpty.getter())
                            {
                              v270 = v323[1];
                              v360 = *v323;
                              v361 = v270;
                              v362 = v323[2];
                              if (v269 > (unint64_t)BigString.startIndex.getter() >> 10
                                && v269 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                result = v316 - 1;
                                if (__OFSUB__(v316, 1))
                                  goto LABEL_424;
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v316) & 1) != 0)
                                {
                                  v271 = *v323;
                                  v272 = v323[2];
                                  v459 = v323[1];
                                  v460 = v272;
                                  v458 = v271;
                                  v273 = *v323;
                                  v348 = v323[1];
                                  v349 = v272;
                                  v347 = v273;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v347, (uint64_t)v413);
                                  outlined retain of Locale((uint64_t)v413);
                                  v274 = BigString.index(before:)();
                                  v276 = v275;
                                  v278 = v277;
                                  v280 = v279;
                                  outlined release of Locale((uint64_t)&v458);
                                  AttributedString.Guts._paragraphExtending(from:)(v274, v276, v278, v280, (uint64_t)&v353);
                                  v10 = Range<>._utf8OffsetRange.getter();
                                  v19 = v281;
                                  goto LABEL_339;
                                }
                              }
                              goto LABEL_240;
                            }
                            v282 = v323[1];
                            v413[0] = *v323;
                            v413[1] = v282;
                            v413[2] = v323[2];
                            if (v269 <= (unint64_t)BigString.startIndex.getter() >> 10)
                              goto LABEL_321;
                            result = v316 - 1;
                            if (__OFSUB__(v316, 1))
                              goto LABEL_423;
                            if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v316) & 1) != 0)
                            {
                              v283 = *v323;
                              v284 = v323[1];
                              v412 = v323[2];
                              v411[1] = v284;
                              v411[0] = v283;
                              v285 = *v323;
                              v459 = v323[1];
                              v460 = v412;
                              v458 = v285;
                              outlined init with take of any PredicateExpression<Self.Output == B1>(&v458, (uint64_t)v461);
                              outlined retain of Locale((uint64_t)v461);
                              v286 = BigString.index(before:)();
                              v288 = v287;
                              v290 = v289;
                              v292 = v291;
                              outlined release of Locale((uint64_t)v411);
                              AttributedString.Guts._paragraphExtending(from:)(v286, v288, v290, v292, (uint64_t)&v347);
                              v10 = Range<>._utf8OffsetRange.getter();
                              v19 = v293;
                              LOBYTE(v89) = 0;
                            }
                            else
                            {
LABEL_321:
                              v10 = 0;
                              v19 = 0;
                              LOBYTE(v89) = 1;
                            }
                            v294 = v323[1];
                            v408 = *v323;
                            v409 = v294;
                            v410 = v323[2];
                            if (v313 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                            {
                              if ((v89 & 1) == 0)
                                goto LABEL_336;
                              if (v315 < 1)
                              {
LABEL_240:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                return swift_unknownObjectRelease();
                              }
LABEL_337:
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v315 - 1, v315) & 1) != 0)
                              {
                                v296 = *v323;
                                v297 = v323[1];
                                v407 = v323[2];
                                v406[1] = v297;
                                v406[0] = v296;
                                v298 = *v323;
                                v361 = v323[1];
                                v362 = v407;
                                v360 = v298;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v360, (uint64_t)v462);
                                outlined retain of Locale((uint64_t)v462);
                                v299 = BigString.index(before:)();
                                v301 = v300;
                                v303 = v302;
                                v305 = v304;
                                outlined release of Locale((uint64_t)v406);
                                AttributedString.Guts._paragraphExtending(from:)(v299, v301, v303, v305, (uint64_t)&v353);
                                v306 = Range<>._utf8OffsetRange.getter();
                                v308 = v307;
                                v309 = 1;
                                goto LABEL_341;
                              }
                            }
LABEL_340:
                            v306 = 0;
                            v308 = 0;
                            v309 = 0;
LABEL_341:
                            if ((v89 & 1) == 0 && v5 < v19)
                            {
                              v358 = 0;
                              v359 = 0;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v358, v10, v5, v19);
                            }
                            if (v315 < v308)
                              v310 = v309;
                            else
                              v310 = 0;
                            if (v310 == 1)
                            {
                              v358 = 0;
                              v359 = 0;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v358, v306, v315, v308);
                            }
                            goto LABEL_240;
                          }
                          v262 = *(_QWORD *)(v256 + 8 * v255);
                          if (!v262)
                          {
                            v263 = v255 + 1;
                            if (v255 + 1 >= v346)
                              goto LABEL_311;
                            v262 = *(_QWORD *)(v256 + 8 * v263);
                            if (!v262)
                            {
                              v263 = v255 + 2;
                              if (v255 + 2 >= v346)
                                goto LABEL_311;
                              v262 = *(_QWORD *)(v256 + 8 * v263);
                              if (!v262)
                              {
                                v263 = v255 + 3;
                                if (v255 + 3 >= v346)
                                  goto LABEL_311;
                                v262 = *(_QWORD *)(v256 + 8 * v263);
                                if (!v262)
                                {
                                  while (1)
                                  {
                                    v255 = v263 + 1;
                                    if (__OFADD__(v263, 1))
                                      goto LABEL_392;
                                    if (v255 >= v346)
                                      goto LABEL_311;
                                    v262 = *(_QWORD *)(v256 + 8 * v255);
                                    ++v263;
                                    if (v262)
                                      goto LABEL_301;
                                  }
                                }
                              }
                            }
                            v255 = v263;
                          }
LABEL_301:
                          v259 = (v262 - 1) & v262;
                          v261 = __clz(__rbit64(v262)) + (v255 << 6);
                        }
                        v264 = (unint64_t *)(*(_QWORD *)(v254 + 48) + 16 * v261);
                        v266 = *v264;
                        v265 = v264[1];
                        v2 = *(_QWORD *)(*(_QWORD *)(v254 + 56) + 8 * v261);
                        result = specialized Array.count.getter(v2);
                        if (result)
                        {
                          v267 = result;
                          if (result < 1)
                            goto LABEL_376;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v268 = (uint64_t *)(v2 + 40);
                          do
                          {
                            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v266, v265, *(v268 - 1), *v268, 0);
                            v268 += 2;
                            --v267;
                          }
                          while (v267);
                          swift_bridgeObjectRelease();
                          result = swift_bridgeObjectRelease();
                        }
                      }
                    }
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
LABEL_383:
                    __break(1u);
LABEL_384:
                    __break(1u);
LABEL_385:
                    __break(1u);
LABEL_386:
                    __break(1u);
                    goto LABEL_387;
                  }
LABEL_242:
                  swift_unknownObjectRetain();
                  v219 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v2, v19, v15, v207);
                  swift_release();
                  result = swift_unknownObjectRelease_n();
                  v220 = v13 - v208;
                  if (!__OFSUB__(v13, v208))
                    goto LABEL_243;
                  goto LABEL_375;
                }
                v2 = v100;
                v53 = 1;
              }
LABEL_118:
              v97 = (4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C;
              v15 = ((-15 << v97) - 1) & v15 | (v53 << v97);
              v89 = *(_QWORD *)(v19 + 24 + 24 * v53);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v19 = v89;
              if (!*(_BYTE *)(v89 + 18))
                goto LABEL_145;
            }
          }
          result = swift_unknownObjectRetain_n();
          v2 = v324 >> 11;
          v89 = v40;
LABEL_145:
          v112 = *(unsigned __int16 *)(v89 + 16);
          if (!*(_WORD *)(v89 + 16))
            goto LABEL_430;
          v113 = *(_QWORD *)(v89 + 24);
          v45 = __OFSUB__(v2, v113);
          v114 = v2 - v113;
          if (v45)
            goto LABEL_414;
          v95 = v13;
          v94 = v96;
          if (v114 <= 0)
          {
            v117 = 0;
            v63 = (uint64_t)v323;
          }
          else
          {
            v63 = (uint64_t)v323;
            if ((_DWORD)v112 == 1)
              goto LABEL_432;
            v115 = *(_QWORD *)(v89 + 48);
            v2 = v114 - v115;
            if (__OFSUB__(v114, v115))
              goto LABEL_416;
            if (v2 >= 1)
            {
              if ((_DWORD)v112 == 2)
                goto LABEL_432;
              v116 = (_QWORD *)(v89 + 72);
              v117 = 2;
              while (v112 != v117)
              {
                v118 = v2 - *v116;
                if (__OFSUB__(v2, *v116))
                  goto LABEL_380;
                if (v118 < 1)
                  goto LABEL_160;
                ++v117;
                v116 += 3;
                v2 = v118;
                if (v112 == v117)
                  goto LABEL_432;
              }
              goto LABEL_379;
            }
            v2 = v114;
            v117 = 1;
          }
LABEL_160:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v108 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v117 << 8);
LABEL_141:
          swift_unknownObjectRetain();
          v107 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v95, v108, v89, v40, v94);
          result = swift_unknownObjectRelease_n();
          v111 = v10 - v2;
          if (__OFSUB__(v10, v2))
            goto LABEL_400;
          goto LABEL_162;
        }
        v95 = v341[11];
        v94 = v341[9];
        v63 = (uint64_t)v323;
      }
      else
      {
        v10 = v324 >> 11;
        if (v324 >= 0x800)
          goto LABEL_413;
      }
      swift_unknownObjectRetain_n();
      v108 = specialized Rope._endPath.getter(v40);
      swift_unknownObjectRelease();
      v89 = 0;
      v2 = 0;
      if (v40)
        goto LABEL_141;
      v107 = 0;
      v111 = v10;
LABEL_162:
      *(_QWORD *)&v365 = v95;
      *((_QWORD *)&v365 + 1) = v108;
      *(_QWORD *)&v366 = v89;
      *((_QWORD *)&v366 + 1) = v107;
      *(_QWORD *)&v367 = v111;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v365, 0, v10, (_QWORD *)v3, (uint64_t *)&v347, v330, v63, (uint64_t)&v353);
      swift_bridgeObjectRelease();
      swift_release();
      v119 = (_QWORD *)v3;
      v77 = v367;
      v120 = v119[8];
      v121 = v119[9];
      v122 = v119[10];
      v123 = v119[11];
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v338 & 1, v120, v121, v122, v123, (uint64_t *)&v433);
      v124 = v435;
      swift_unknownObjectRelease();
    }
    while (v124 < v77 && *(_QWORD *)(v347 + 16));
  }
  swift_release();
  v3 = (int64_t)v341;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v365 = v344;
  v125 = v341[8];
  v126 = v341[9];
  v127 = v341[10];
  v40 = v341[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v344 - 1, v338 & 1, v125, v126, v127, v40, (uint64_t *)&v433);
  v331 = v433;
  v325 = v434;
  v128 = v435;
  swift_unknownObjectRelease();
  v446[0] = v331;
  v446[1] = v325;
  v447 = v128;
  v129 = v341[8];
  v130 = v341[9];
  v131 = v341[10];
  v132 = v341[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v446, v129, v130, v131, v132);
  v134 = v133;
  v2 = v135;
  swift_unknownObjectRelease();
  v10 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v134);
  v19 = v136;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v5 = 0;
  *(_QWORD *)&v347 = result;
  v137 = 1 << *(_BYTE *)(v10 + 32);
  v46 = -1;
  if (v137 < 64)
    v46 = ~(-1 << v137);
  v13 = v10 + 64;
  v138 = v46 & *(_QWORD *)(v10 + 64);
  v139 = (unint64_t)(v137 + 63) >> 6;
  while (1)
  {
    if (v138)
    {
      v140 = __clz(__rbit64(v138));
      v138 &= v138 - 1;
      v141 = v140 | (v5 << 6);
      goto LABEL_168;
    }
    v43 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_370;
    if (v43 >= v139)
    {
LABEL_188:
      swift_release();
      v145 = *((_OWORD *)v341 + 2);
      v443 = *((_OWORD *)v341 + 1);
      v444 = v145;
      v445 = *((_OWORD *)v341 + 3);
      BigString.utf8.getter();
      v146 = BigString.UTF8View.count.getter();
      result = outlined release of Locale((uint64_t)v376);
      if (v146 < v344)
        goto LABEL_404;
      v2 = v341[8];
      v147 = v341[9];
      v148 = v341[10];
      v149 = v341[11];
      swift_unknownObjectRetain();
      swift_retain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v344, v338 & 1, v2, v147, v148, v149, (uint64_t *)&v433);
      v339 = v433;
      v151 = *((_QWORD *)&v434 + 1);
      v150 = v434;
      v152 = v435;
      swift_unknownObjectRelease();
      v433 = v339;
      v434 = __PAIR128__(v151, v150);
      v32 = v344;
      *(_QWORD *)&v435 = v152;
      if (v344 != v146)
        goto LABEL_193;
LABEL_194:
      AttributedString._InternalRunsSlice.startIndex.getter(v341, v32, v377);
      for (i = &v378; v152 < *i && !specialized Set.isEmpty.getter(v347); i = &v380)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v433, v32, v146, v341, (uint64_t *)&v347, v10, v19, (uint64_t)&v365);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v341, v32, v146, (uint64_t *)&v433);
        v152 = v435;
        if (v32 == v146)
          goto LABEL_194;
LABEL_193:
        v2 = v341[8];
        v153 = v341[9];
        v154 = v341[10];
        v155 = v341[11];
        v156 = swift_unknownObjectRetain();
        v157 = v154;
        v32 = v344;
        AttributedString._InternalRuns.endIndex.getter(v156, v153, v157, v155, v379);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_bridgeObjectRelease();
      v33 = v365;
      v316 = v353;
      if ((uint64_t)v365 < v353)
        goto LABEL_405;
      v5 = v328;
      v31 = v332;
      goto LABEL_198;
    }
    v143 = *(_QWORD *)(v13 + 8 * v43);
    ++v5;
    if (!v143)
    {
      v5 = v43 + 1;
      if (v43 + 1 >= v139)
        goto LABEL_188;
      v143 = *(_QWORD *)(v13 + 8 * v5);
      if (!v143)
      {
        v5 = v43 + 2;
        if (v43 + 2 >= v139)
          goto LABEL_188;
        v143 = *(_QWORD *)(v13 + 8 * v5);
        if (!v143)
        {
          v5 = v43 + 3;
          if (v43 + 3 >= v139)
            goto LABEL_188;
          v143 = *(_QWORD *)(v13 + 8 * v5);
          if (!v143)
          {
            v5 = v43 + 4;
            if (v43 + 4 >= v139)
              goto LABEL_188;
            v143 = *(_QWORD *)(v13 + 8 * v5);
            if (!v143)
              break;
          }
        }
      }
    }
LABEL_187:
    v138 = (v143 - 1) & v143;
    v141 = __clz(__rbit64(v143)) + (v5 << 6);
LABEL_168:
    v142 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v141);
    v2 = *v142;
    v40 = v142[1];
    swift_bridgeObjectRetain();
    v15 = (uint64_t)&v347;
    specialized Set._Variant.insert(_:)((unint64_t *)&v433, v2, v40);
    result = swift_bridgeObjectRelease();
  }
  v144 = v43 + 5;
  if (v144 >= v139)
    goto LABEL_188;
  v143 = *(_QWORD *)(v13 + 8 * v144);
  if (v143)
  {
    v5 = v144;
    goto LABEL_187;
  }
  while (1)
  {
    v5 = v144 + 1;
    if (__OFADD__(v144, 1))
      break;
    if (v5 >= v139)
      goto LABEL_188;
    v143 = *(_QWORD *)(v13 + 8 * v5);
    ++v144;
    if (v143)
      goto LABEL_187;
  }
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  if (!v2)
    __break(1u);
LABEL_429:
  __break(1u);
LABEL_430:
  if (!v2)
    __break(1u);
LABEL_432:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(unint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char v45;
  int64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char Enum;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  int64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *i;
  __int128 v160;
  uint64_t v161;
  _OWORD *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  __int128 *v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  unint64_t v208;
  int64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  int64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 *v226;
  uint64_t v227;
  __int128 v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  unint64_t v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int64_t v244;
  int64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  int64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  unint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int64_t v309;
  int64_t v310;
  int64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  unint64_t v340;
  uint64_t v341;
  __int128 v342;
  char v343;
  __int128 v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  int64_t v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  uint64_t v367;
  int64_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  char v376[48];
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  char v380[48];
  unint64_t v381[4];
  uint64_t v382;
  uint64_t v383[4];
  uint64_t v384;
  char v385[48];
  __int128 v386;
  __int128 v387;
  __int128 v388;
  char v389[48];
  char v390[48];
  char v391[48];
  char v392[48];
  char v393[48];
  char v394[48];
  char v395[48];
  char v396[48];
  char v397[48];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  _OWORD v410[2];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  _OWORD v415[2];
  __int128 v416;
  _OWORD v417[3];
  _QWORD v418[5];
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  _OWORD v450[2];
  uint64_t v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  _BYTE v465[40];
  _BYTE v466[56];

  v5 = v2;
  v7 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = *(_QWORD **)v2;
    v9 = *(_OWORD *)(*(_QWORD *)v2 + 16);
    v10 = *(_OWORD *)(*(_QWORD *)v2 + 32);
    v457 = *(_OWORD *)(*(_QWORD *)v2 + 48);
    v456 = v10;
    v455 = v9;
    v11 = v8[8];
    v12 = v8[9];
    v13 = v8[10];
    v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    v15 = swift_allocObject();
    v16 = BigString.isEmpty.getter();
    if (v11)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v455);
      swift_unknownObjectRelease();
      v3 = v11;
    }
    else
    {
      outlined retain of Locale((uint64_t)&v455);
      v3 = 0;
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_unknownObjectRelease();
      if ((((v13 == 0) ^ v16) & 1) == 0)
      {
LABEL_7:
        v17 = v456;
        *(_OWORD *)(v15 + 16) = v455;
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = v457;
        *(_QWORD *)(v15 + 64) = v11;
        *(_QWORD *)(v15 + 72) = v12;
        *(_QWORD *)(v15 + 80) = v13;
        *(_QWORD *)(v15 + 88) = v14;
        *(_QWORD *)v5 = v15;
        swift_release();
        v7 = a1;
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_40;
  }
LABEL_8:
  v332 = a2;
  v4 = *(_QWORD *)v5;
  v18 = *(_OWORD *)(*(_QWORD *)v5 + 32);
  v452 = *(_OWORD *)(*(_QWORD *)v5 + 16);
  v453 = v18;
  v454 = *(_OWORD *)(v4 + 48);
  result = BigString.isEmpty.getter();
  v20 = MEMORY[0x1E0DEE9E0];
  v331 = v5;
  if ((result & 1) != 0)
    goto LABEL_25;
  v21 = *v7;
  if (*v7 >= 0x800 && (v7[4] ^ v21) <= 0x3FF)
  {
    v3 = v7[2];
    BigString.utf8.getter();
    v21 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v376);
  }
  v16 = *(_QWORD *)(v4 + 64);
  if (v16)
    v22 = *(_QWORD *)(v4 + 80);
  else
    v22 = 0;
  v14 = v21 >> 11;
  if (v22 < (uint64_t)(v21 >> 11))
  {
LABEL_400:
    __break(1u);
    goto LABEL_401;
  }
  v13 = *(_QWORD *)(v4 + 72);
  v11 = *(_QWORD *)(v4 + 88);
  if (v16)
  {
    if (v14 < *(_QWORD *)(v4 + 80) && *(_WORD *)(v16 + 16) != 0)
    {
LABEL_40:
      v349 = v13;
      v42 = *(unsigned __int8 *)(v16 + 18);
      if (*(_BYTE *)(v16 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v43 = -15;
        v3 = 24;
        v44 = v16;
        while (1)
        {
          v46 = *(unsigned __int16 *)(v44 + 16);
          if (!*(_WORD *)(v44 + 16))
            goto LABEL_43;
          v47 = *(_QWORD *)(v44 + 40);
          v48 = __OFSUB__(v14, v47);
          v49 = v14 - v47;
          if (v48)
            goto LABEL_385;
          if (__OFADD__(v49, 1))
          {
LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
LABEL_389:
            __break(1u);
LABEL_390:
            __break(1u);
LABEL_391:
            __break(1u);
LABEL_392:
            __break(1u);
            goto LABEL_393;
          }
          if (v49 + 1 >= 1)
            break;
          v46 = 0;
LABEL_44:
          v45 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
          v42 = ((-15 << v45) - 1) & v42 | (v46 << v45);
          v5 = *(_QWORD *)(v44 + 24 + 24 * v46);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v44 = v5;
          if (!*(_BYTE *)(v5 + 18))
            goto LABEL_73;
        }
        if ((_DWORD)v46 != 1)
        {
          v50 = (uint64_t *)(v44 + 64);
          v51 = 1;
          while (1)
          {
            v52 = *v50;
            v50 += 3;
            v14 = v49 - v52;
            if (__OFSUB__(v49, v52))
              goto LABEL_367;
            if (__OFADD__(v14, 1))
              goto LABEL_368;
            if (v14 + 1 < 1)
              break;
            ++v51;
            v49 = v14;
            if (v46 == v51)
              goto LABEL_43;
          }
          v46 = v51;
          v14 = v49;
          goto LABEL_44;
        }
        v14 = v49;
LABEL_43:
        if (v14)
          goto LABEL_384;
        goto LABEL_44;
      }
      swift_unknownObjectRetain_n();
      v5 = v16;
LABEL_73:
      result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v14, 0, (_WORD *)(v5 + 16), (uint64_t *)(v5 + 24));
      if (result < 0)
        goto LABEL_414;
      v60 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v25 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v60 << 8);
      v26 = v5;
      v13 = v349;
      if (!v16)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  v24 = swift_unknownObjectRetain_n();
  v25 = specialized Rope._endPath.getter(v24);
  swift_unknownObjectRelease();
  v5 = 0;
  v26 = 0;
  if (v16)
  {
LABEL_23:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v25, v5, v16, v13);
    swift_unknownObjectRelease_n();
    v26 = v5;
  }
LABEL_24:
  v27 = *(_QWORD *)(v4 + 64);
  v28 = *(_QWORD *)(v4 + 72);
  v29 = *(_QWORD *)(v4 + 80);
  v30 = *(_QWORD *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v25, v26, v27, v28, v29, v30);
  v3 = v31;
  swift_unknownObjectRelease();
  v32 = swift_bridgeObjectRetain();
  v20 = specialized _NativeDictionary.filter(_:)(v32);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v5 = v331;
  v7 = a1;
LABEL_25:
  v33 = *(_QWORD *)v5;
  v328 = *v7;
  v34 = *v7 >> 11;
  v35 = v7[4] >> 11;
  v346 = v34;
  v329 = v35 - v34;
  if (v35 == v34)
  {
    v36 = v328 >> 11;
    goto LABEL_198;
  }
  v357 = v328 >> 11;
  v11 = *(_QWORD *)(v33 + 64);
  v3 = *(_QWORD *)(v33 + 80);
  if (v11)
    v37 = *(_QWORD *)(v33 + 80);
  else
    v37 = 0;
  if (v37 < v34)
  {
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }
  v38 = *(_QWORD *)(v33 + 72);
  v16 = *(_QWORD *)(v33 + 88);
  v348 = v35;
  v320 = v20;
  if (!v11)
    goto LABEL_37;
  if (*(_WORD *)(v11 + 16))
    v39 = v34 < v3;
  else
    v39 = 0;
  if (!v39)
  {
    swift_unknownObjectRetain();
LABEL_37:
    v40 = swift_unknownObjectRetain();
    v41 = specialized Rope._endPath.getter(v40);
    swift_unknownObjectRelease();
    v5 = 0;
    goto LABEL_79;
  }
  v341 = *(_QWORD *)(v33 + 72);
  v43 = *(_QWORD *)(v33 + 80);
  v53 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v3 = -15;
    v42 = 24;
    v44 = v11;
    while (1)
    {
      v54 = *(unsigned __int16 *)(v44 + 16);
      if (*(_WORD *)(v44 + 16))
      {
        v56 = 0;
        v57 = (uint64_t *)(v44 + 40);
        while (1)
        {
          v58 = *v57;
          v57 += 3;
          v59 = v34 - v58;
          if (__OFSUB__(v34, v58))
          {
            __break(1u);
LABEL_357:
            __break(1u);
            goto LABEL_358;
          }
          if (__OFADD__(v59, 1))
            goto LABEL_357;
          if (v59 + 1 < 1)
            break;
          ++v56;
          v34 = v59;
          if (v54 == v56)
            goto LABEL_70;
        }
        v54 = v56;
      }
      else
      {
        v59 = v34;
LABEL_70:
        if (v59)
          goto LABEL_387;
        v34 = 0;
      }
      v55 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
      v53 = ((-15 << v55) - 1) & v53 | (v54 << v55);
      v5 = *(_QWORD *)(v44 + 24 + 24 * v54);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v44 = v5;
      if (!*(_BYTE *)(v5 + 18))
        goto LABEL_77;
    }
  }
  swift_unknownObjectRetain_n();
  v5 = v11;
LABEL_77:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v34, 0, (_WORD *)(v5 + 16), (uint64_t *)(v5 + 24));
  if (result < 0)
    goto LABEL_416;
  v61 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v41 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v61 << 8);
  v3 = v43;
  v38 = v341;
LABEL_79:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v16, v41, v5, v11, v38, v3, v16);
  swift_unknownObjectRelease_n();
  v62 = *(_QWORD *)(v33 + 64);
  v63 = *(_QWORD *)(v33 + 72);
  v3 = *(_QWORD *)(v33 + 80);
  v64 = *(_QWORD *)(v33 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v16, v41, v5, v62, v63, v3, v64);
  v336 = v65;
  swift_unknownObjectRelease();
  v66 = swift_bridgeObjectRetain();
  v43 = 0;
  v11 = specialized _NativeDictionary.filter(_:)(v66);
  swift_bridgeObjectRelease_n();
  v16 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v44 = 0;
  *(_QWORD *)&v369 = result;
  v67 = 1 << *(_BYTE *)(v11 + 32);
  v49 = -1;
  if (v67 < 64)
    v49 = ~(-1 << v67);
  v42 = v11 + 64;
  v5 = v49 & *(_QWORD *)(v11 + 64);
  v68 = (unint64_t)(v67 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v69 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v70 = v69 | (v44 << 6);
      goto LABEL_83;
    }
    v46 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
LABEL_367:
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      v3 = v49;
      v211 = v46;
      goto LABEL_371;
    }
    if (v46 >= v68)
      goto LABEL_103;
    v72 = *(_QWORD *)(v42 + 8 * v46);
    ++v44;
    if (!v72)
    {
      v44 = v46 + 1;
      if (v46 + 1 >= v68)
        goto LABEL_103;
      v72 = *(_QWORD *)(v42 + 8 * v44);
      if (!v72)
      {
        v44 = v46 + 2;
        if (v46 + 2 >= v68)
          goto LABEL_103;
        v72 = *(_QWORD *)(v42 + 8 * v44);
        if (!v72)
        {
          v44 = v46 + 3;
          if (v46 + 3 >= v68)
            goto LABEL_103;
          v72 = *(_QWORD *)(v42 + 8 * v44);
          if (!v72)
          {
            v44 = v46 + 4;
            if (v46 + 4 >= v68)
              goto LABEL_103;
            v72 = *(_QWORD *)(v42 + 8 * v44);
            if (!v72)
              break;
          }
        }
      }
    }
LABEL_102:
    v5 = (v72 - 1) & v72;
    v70 = __clz(__rbit64(v72)) + (v44 << 6);
LABEL_83:
    v71 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v70);
    v43 = *v71;
    v3 = v71[1];
    swift_bridgeObjectRetain();
    v16 = (uint64_t)&v369;
    specialized Set._Variant.insert(_:)((unint64_t *)&v437, v43, v3);
    result = swift_bridgeObjectRelease();
  }
  v73 = v46 + 5;
  if (v73 < v68)
  {
    v72 = *(_QWORD *)(v42 + 8 * v73);
    if (!v72)
    {
      while (1)
      {
        v44 = v73 + 1;
        if (__OFADD__(v73, 1))
          break;
        if (v44 >= v68)
          goto LABEL_103;
        v72 = *(_QWORD *)(v42 + 8 * v44);
        ++v73;
        if (v72)
          goto LABEL_102;
      }
LABEL_410:
      __break(1u);
      goto LABEL_411;
    }
    v44 = v73;
    goto LABEL_102;
  }
LABEL_103:
  swift_release();
  v74 = v369;
  *(_QWORD *)&v351 = v369;
  v334 = v11;
  if (v328 > 0x7FF)
  {
    v79 = *(_QWORD *)(v33 + 64);
    v80 = *(_QWORD *)(v33 + 72);
    v81 = *(_QWORD *)(v33 + 80);
    v82 = *(_QWORD *)(v33 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v79, v80, v81, v82, &v377);
    v342 = v377;
    v326 = v378;
    v78 = v379;
    swift_unknownObjectRelease();
    v77 = v326;
    v76 = v342;
  }
  else
  {
    v75 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v75, 0, (unint64_t *)&v377);
    v76 = v377;
    v77 = v378;
    v78 = v379;
  }
  v83 = v348;
  v369 = v76;
  v370 = v77;
  *(_QWORD *)&v371 = v78;
  v84 = *(_QWORD *)(v33 + 64);
  v85 = *(_QWORD *)(v33 + 72);
  v86 = *(_QWORD *)(v33 + 80);
  v87 = *(_QWORD *)(v33 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v343 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v84, v85, v86, v87, (uint64_t *)&v437);
  v89 = v439;
  swift_unknownObjectRelease();
  if (v89 < v78 && *(_QWORD *)(v74 + 16))
  {
    while (1)
    {
      v5 = *((_QWORD *)&v369 + 1);
      v90 = v369;
      v91 = v370;
      v92 = *(_QWORD *)(v33 + 64);
      v3 = *(_QWORD *)(v33 + 72);
      v93 = *(_QWORD *)(v33 + 80);
      v94 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v94);
      if (v92)
      {
        result = swift_unknownObjectRelease();
        if (v78 != v93)
          goto LABEL_132;
      }
      else if (v78)
      {
LABEL_132:
        v104 = *(_QWORD *)(v33 + 64);
        v105 = *(_QWORD *)(v33 + 72);
        v3 = *(_QWORD *)(v33 + 80);
        v106 = *(_QWORD *)(v33 + 88);
        *(_QWORD *)&v437 = v90;
        *((_QWORD *)&v437 + 1) = v5;
        *(_QWORD *)&v438 = v91;
        v107 = *((_QWORD *)&v91 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v91 + 1), 1))
          goto LABEL_397;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v437, v104, v105, v3, v106);
        v108 = *((_QWORD *)&v437 + 1);
        v5 = v438;
        v109 = v437;
        v110 = specialized Rope.subscript.getter(v437, *((unint64_t *)&v437 + 1), v438, v104, v105, v3, v106);
        v3 = v111;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v112 = v78 - v110;
        if (__OFSUB__(v78, v110))
          goto LABEL_398;
        v113 = v346;
        v96 = v109;
        goto LABEL_160;
      }
      v42 = *(_QWORD *)(v33 + 64);
      v95 = *(_QWORD *)(v33 + 72);
      v96 = *(_QWORD *)(v33 + 88);
      if (v42)
      {
        v327 = *(_QWORD *)(v33 + 72);
        v44 = *(_QWORD *)(v33 + 88);
        v3 = v346;
        v11 = *(_QWORD *)(v33 + 80);
        if (v11 < v346)
          goto LABEL_402;
        if (*(_WORD *)(v42 + 16))
        {
          v16 = *(unsigned __int8 *)(v42 + 18);
          if (*(_BYTE *)(v42 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v43 = v42;
            while (1)
            {
              v98 = *(unsigned __int16 *)(v43 + 16);
              if (!*(_WORD *)(v43 + 16))
                goto LABEL_426;
              v99 = *(_QWORD *)(v43 + 40);
              v48 = __OFSUB__(v3, v99);
              v100 = v3 - v99;
              if (v48)
                goto LABEL_376;
              if (v100 <= 0)
              {
                v56 = 0;
              }
              else
              {
                if ((_DWORD)v98 == 1)
                  goto LABEL_428;
                v101 = *(_QWORD *)(v43 + 64);
                v3 = v100 - v101;
                if (__OFSUB__(v100, v101))
                  goto LABEL_380;
                if (v3 >= 1)
                {
                  if ((_DWORD)v98 == 2)
                    goto LABEL_428;
                  v102 = (_QWORD *)(v43 + 88);
                  v56 = 2;
                  while (v98 != v56)
                  {
                    v103 = v3 - *v102;
                    if (__OFSUB__(v3, *v102))
                      goto LABEL_350;
                    if (v103 < 1)
                      goto LABEL_116;
                    ++v56;
                    v102 += 3;
                    v3 = v103;
                    if (v98 == v56)
                      goto LABEL_428;
                  }
                  __break(1u);
LABEL_350:
                  __break(1u);
LABEL_351:
                  v314 = *(_QWORD *)(v43 + 48);
                  v48 = __OFSUB__(v56, v314);
                  v46 = v56 - v314;
                  if (v48)
                    goto LABEL_424;
                  if (__OFADD__(v46, 1))
                    goto LABEL_425;
                  if (v46 + 1 >= 1)
                  {
                    if ((_DWORD)v3 != 2)
                    {
                      v315 = (_QWORD *)(v43 + 72);
                      v49 = 2;
                      while (v3 != v49)
                      {
                        v211 = v46 - *v315;
                        if (__OFSUB__(v46, *v315))
                          goto LABEL_418;
                        if (__OFADD__(v211, 1))
                          goto LABEL_419;
                        if (v211 + 1 < 1)
                          goto LABEL_370;
                        ++v49;
                        v315 += 3;
                        v46 = v211;
                        if (v3 == v49)
                          goto LABEL_333;
                      }
                      goto LABEL_417;
                    }
                    v211 = v46;
                    goto LABEL_333;
                  }
LABEL_358:
                  v3 = 1;
                  v211 = v56;
LABEL_371:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v3 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v3 << 8);
                  v210 = v346;
                  if (!v16)
                  {
LABEL_372:
                    result = swift_release();
                    v222 = 0;
                    v223 = v44 - v211;
                    if (!__OFSUB__(v44, v211))
                    {
LABEL_243:
                      *(_QWORD *)&v364 = v325;
                      *((_QWORD *)&v364 + 1) = v44;
                      *(_QWORD *)&v365 = v5;
                      *((_QWORD *)&v365 + 1) = v11;
                      *(_QWORD *)&v366 = v3;
                      *((_QWORD *)&v366 + 1) = v43;
                      v367 = v222;
                      v368 = v223;
                      specialized IndexingIterator.next()();
                      if (v224)
                      {
                        v225 = v224;
                        v226 = (__int128 *)v328;
                        while (1)
                        {
                          v228 = v226[1];
                          v407 = *v226;
                          v408 = v228;
                          v409 = v226[2];
                          BigString.utf8.getter();
                          v229 = v462;
                          v333 = v463;
                          v230 = BigString.UTF8View.index(_:offsetBy:)();
                          v232 = v231;
                          v3 = v233;
                          v235 = v234;
                          outlined release of Locale((uint64_t)v395);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v236 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v225);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v324 = v3;
                          v322 = v232;
                          v323 = v235;
                          v321 = v230;
                          if ((v236 & 1) != 0)
                          {
                            v330 = v230 >> 10;
                            if (v230 >> 10 > v229 >> 10)
                              break;
                          }
LABEL_245:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v462, v321, v322, v324, v323);
                          specialized IndexingIterator.next()();
                          v225 = v227;
                          if (!v227)
                            goto LABEL_285;
                        }
                        v237 = v229;
                        v338 = v225 + 64;
LABEL_250:
                        v238 = v226[1];
                        v404 = *v226;
                        v405 = v238;
                        v406 = v226[2];
                        BigString.unicodeScalars.getter();
                        v3 = v333;
                        v347 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v396);
                        v239 = v226[1];
                        v401 = *v226;
                        v402 = v239;
                        v403 = v226[2];
                        BigString.unicodeScalars.getter();
                        v340 = v237;
                        v345 = BigString.UnicodeScalarView.index(after:)();
                        v333 = v240;
                        outlined release of Locale((uint64_t)v397);
                        v241 = 1 << *(_BYTE *)(v225 + 32);
                        if (v241 < 64)
                          v242 = ~(-1 << v241);
                        else
                          v242 = -1;
                        v243 = v242 & *(_QWORD *)(v225 + 64);
                        v244 = (unint64_t)(v241 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v245 = 0;
                        while (1)
                        {
                          if (v243)
                          {
                            v246 = __clz(__rbit64(v243));
                            v243 &= v243 - 1;
                            v247 = v246 | (v245 << 6);
                            goto LABEL_257;
                          }
                          v251 = v245 + 1;
                          if (__OFADD__(v245, 1))
                            break;
                          if (v251 >= v244)
                            goto LABEL_266;
                          v252 = *(_QWORD *)(v338 + 8 * v251);
                          if (v252)
                            goto LABEL_261;
                          if (v245 + 2 >= v244)
                          {
                            ++v245;
LABEL_266:
                            v243 = 0;
                            v356 = 0;
                            v354 = 0u;
                            v355 = 0u;
                            v352 = 0u;
                            v353 = 0u;
                            v351 = 0u;
                            goto LABEL_267;
                          }
                          v252 = *(_QWORD *)(v338 + 8 * (v245 + 2));
                          if (v252)
                          {
                            v251 = v245 + 2;
                            goto LABEL_261;
                          }
                          if (v245 + 3 >= v244)
                          {
                            v245 += 2;
                            goto LABEL_266;
                          }
                          v252 = *(_QWORD *)(v338 + 8 * (v245 + 3));
                          if (v252)
                          {
                            v251 = v245 + 3;
                            goto LABEL_261;
                          }
                          v251 = v245 + 4;
                          if (v245 + 4 >= v244)
                          {
                            v245 += 3;
                            goto LABEL_266;
                          }
                          v252 = *(_QWORD *)(v338 + 8 * v251);
                          if (v252)
                            goto LABEL_261;
                          do
                          {
                            if (v244 - 5 == v245)
                            {
                              v245 = v244 - 1;
                              goto LABEL_266;
                            }
                            v252 = *(_QWORD *)(v225 + 104 + 8 * v245++);
                          }
                          while (!v252);
                          v251 = v245 + 4;
LABEL_261:
                          v243 = (v252 - 1) & v252;
                          v247 = __clz(__rbit64(v252)) + (v251 << 6);
                          v245 = v251;
LABEL_257:
                          v248 = *(_QWORD *)(v225 + 56);
                          v249 = (_QWORD *)(*(_QWORD *)(v225 + 48) + 16 * v247);
                          v250 = v249[1];
                          *(_QWORD *)&v351 = *v249;
                          *((_QWORD *)&v351 + 1) = v250;
                          outlined init with copy of AttributedString._AttributeValue(v248 + 72 * v247, (uint64_t)&v352);
                          swift_bridgeObjectRetain();
LABEL_267:
                          outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v351, (uint64_t)&v357);
                          v253 = v358;
                          if (!v358)
                          {
                            swift_release();
                            v226 = (__int128 *)v328;
                            v237 = v345;
                            if (v330 <= v345 >> 10)
                              goto LABEL_245;
                            goto LABEL_250;
                          }
                          v254 = v357;
                          v255 = v360;
                          v3 = v361;
                          outlined copy of AttributedString.AttributeRunBoundaries?(v360, v361);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v359);
                          if (v3 != 1)
                          {
                            *(_QWORD *)&v351 = v255;
                            *((_QWORD *)&v351 + 1) = v3;
                            v256 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v255, v3);
                            if ((v256 & 0x100000000) == 0 && v347 != (_DWORD)v256)
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v254, v253, v340, v345, (uint64_t *)v417);
                          }
                          swift_bridgeObjectRelease();
                        }
                        __break(1u);
LABEL_285:
                        v257 = *(_QWORD *)&v417[0];
                      }
                      else
                      {
                        v257 = MEMORY[0x1E0DEE9E0];
                      }
                      result = swift_release();
                      v258 = 0;
                      v259 = v257 + 64;
                      v260 = 1 << *(_BYTE *)(v257 + 32);
                      v261 = -1;
                      if (v260 < 64)
                        v261 = ~(-1 << v260);
                      v262 = v261 & *(_QWORD *)(v257 + 64);
                      v350 = (unint64_t)(v260 + 63) >> 6;
                      while (1)
                      {
                        if (v262)
                        {
                          v263 = __clz(__rbit64(v262));
                          v262 &= v262 - 1;
                          v264 = v263 | (v258 << 6);
                        }
                        else
                        {
                          v48 = __OFADD__(v258++, 1);
                          if (v48)
                            goto LABEL_377;
                          if (v258 >= v350)
                          {
LABEL_311:
                            swift_release();
                            v3 = v317;
                            v272 = v317 >> 10;
                            if (specialized Range.isEmpty.getter())
                            {
                              v273 = *(_OWORD *)(v328 + 16);
                              v364 = *(_OWORD *)v328;
                              v365 = v273;
                              v366 = *(_OWORD *)(v328 + 32);
                              if (v272 > (unint64_t)BigString.startIndex.getter() >> 10
                                && v272 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                result = v318 - 1;
                                if (__OFSUB__(v318, 1))
                                  goto LABEL_423;
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v318) & 1) != 0)
                                {
                                  v274 = *(_OWORD *)v328;
                                  v275 = *(_OWORD *)(v328 + 32);
                                  v463 = *(_OWORD *)(v328 + 16);
                                  v464 = v275;
                                  v462 = v274;
                                  v276 = *(_OWORD *)v328;
                                  v352 = *(_OWORD *)(v328 + 16);
                                  v353 = v275;
                                  v351 = v276;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v351, (uint64_t)v417);
                                  outlined retain of Locale((uint64_t)v417);
                                  v277 = BigString.index(before:)();
                                  v279 = v278;
                                  v281 = v280;
                                  v283 = v282;
                                  outlined release of Locale((uint64_t)&v462);
                                  AttributedString.Guts._paragraphExtending(from:)(v277, v279, v281, v283, (uint64_t)&v357);
                                  v11 = Range<>._utf8OffsetRange.getter();
                                  v43 = v284;
                                  goto LABEL_338;
                                }
                              }
                              goto LABEL_240;
                            }
                            v285 = *(_OWORD *)(v328 + 16);
                            v417[0] = *(_OWORD *)v328;
                            v417[1] = v285;
                            v417[2] = *(_OWORD *)(v328 + 32);
                            if (v272 <= (unint64_t)BigString.startIndex.getter() >> 10)
                              goto LABEL_321;
                            result = v318 - 1;
                            if (__OFSUB__(v318, 1))
                              goto LABEL_422;
                            if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v318) & 1) != 0)
                            {
                              v286 = *(_OWORD *)v328;
                              v287 = *(_OWORD *)(v328 + 16);
                              v416 = *(_OWORD *)(v328 + 32);
                              v415[1] = v287;
                              v415[0] = v286;
                              v288 = *(_OWORD *)v328;
                              v463 = *(_OWORD *)(v328 + 16);
                              v464 = v416;
                              v462 = v288;
                              outlined init with take of any PredicateExpression<Self.Output == B1>(&v462, (uint64_t)v465);
                              outlined retain of Locale((uint64_t)v465);
                              v289 = BigString.index(before:)();
                              v291 = v290;
                              v293 = v292;
                              v295 = v294;
                              outlined release of Locale((uint64_t)v415);
                              AttributedString.Guts._paragraphExtending(from:)(v289, v291, v293, v295, (uint64_t)&v351);
                              v11 = Range<>._utf8OffsetRange.getter();
                              v43 = v296;
                              LOBYTE(v44) = 0;
                            }
                            else
                            {
LABEL_321:
                              v11 = 0;
                              v43 = 0;
                              LOBYTE(v44) = 1;
                            }
                            v297 = *(_OWORD *)(v328 + 16);
                            v412 = *(_OWORD *)v328;
                            v413 = v297;
                            v414 = *(_OWORD *)(v328 + 32);
                            if (v316 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                            {
                              if ((v44 & 1) == 0)
                                goto LABEL_335;
                              if (v319 < 1)
                              {
LABEL_240:
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                return swift_unknownObjectRelease();
                              }
LABEL_336:
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v319 - 1, v319) & 1) != 0)
                              {
                                v299 = *(_OWORD *)v328;
                                v300 = *(_OWORD *)(v328 + 16);
                                v411 = *(_OWORD *)(v328 + 32);
                                v410[1] = v300;
                                v410[0] = v299;
                                v301 = *(_OWORD *)v328;
                                v365 = *(_OWORD *)(v328 + 16);
                                v366 = v411;
                                v364 = v301;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v364, (uint64_t)v466);
                                outlined retain of Locale((uint64_t)v466);
                                v302 = BigString.index(before:)();
                                v304 = v303;
                                v306 = v305;
                                v308 = v307;
                                outlined release of Locale((uint64_t)v410);
                                AttributedString.Guts._paragraphExtending(from:)(v302, v304, v306, v308, (uint64_t)&v357);
                                v309 = Range<>._utf8OffsetRange.getter();
                                v311 = v310;
                                v312 = 1;
                                goto LABEL_340;
                              }
                            }
LABEL_339:
                            v309 = 0;
                            v311 = 0;
                            v312 = 0;
LABEL_340:
                            if ((v44 & 1) == 0 && v318 < v43)
                            {
                              v362 = 0;
                              v363 = 0;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v362, v11, v318, v43);
                            }
                            if (v319 < v311)
                              v313 = v312;
                            else
                              v313 = 0;
                            if (v313 == 1)
                            {
                              v362 = 0;
                              v363 = 0;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v362, v309, v319, v311);
                            }
                            goto LABEL_240;
                          }
                          v265 = *(_QWORD *)(v259 + 8 * v258);
                          if (!v265)
                          {
                            v266 = v258 + 1;
                            if (v258 + 1 >= v350)
                              goto LABEL_311;
                            v265 = *(_QWORD *)(v259 + 8 * v266);
                            if (!v265)
                            {
                              v266 = v258 + 2;
                              if (v258 + 2 >= v350)
                                goto LABEL_311;
                              v265 = *(_QWORD *)(v259 + 8 * v266);
                              if (!v265)
                              {
                                v266 = v258 + 3;
                                if (v258 + 3 >= v350)
                                  goto LABEL_311;
                                v265 = *(_QWORD *)(v259 + 8 * v266);
                                if (!v265)
                                {
                                  while (1)
                                  {
                                    v258 = v266 + 1;
                                    if (__OFADD__(v266, 1))
                                      goto LABEL_391;
                                    if (v258 >= v350)
                                      goto LABEL_311;
                                    v265 = *(_QWORD *)(v259 + 8 * v258);
                                    ++v266;
                                    if (v265)
                                      goto LABEL_301;
                                  }
                                }
                              }
                            }
                            v258 = v266;
                          }
LABEL_301:
                          v262 = (v265 - 1) & v265;
                          v264 = __clz(__rbit64(v265)) + (v258 << 6);
                        }
                        v267 = (unint64_t *)(*(_QWORD *)(v257 + 48) + 16 * v264);
                        v269 = *v267;
                        v268 = v267[1];
                        v3 = *(_QWORD *)(*(_QWORD *)(v257 + 56) + 8 * v264);
                        result = specialized Array.count.getter(v3);
                        if (result)
                        {
                          v270 = result;
                          if (result < 1)
                            goto LABEL_375;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v271 = (uint64_t *)(v3 + 40);
                          do
                          {
                            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v269, v268, *(v271 - 1), *v271, 0);
                            v271 += 2;
                            --v270;
                          }
                          while (v270);
                          swift_bridgeObjectRelease();
                          result = swift_bridgeObjectRelease();
                        }
                      }
                    }
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
LABEL_383:
                    __break(1u);
LABEL_384:
                    __break(1u);
LABEL_385:
                    __break(1u);
                    goto LABEL_386;
                  }
LABEL_242:
                  swift_unknownObjectRetain();
                  v222 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v3, v43, v16, v210);
                  swift_release();
                  result = swift_unknownObjectRelease_n();
                  v223 = v44 - v211;
                  if (!__OFSUB__(v44, v211))
                    goto LABEL_243;
                  goto LABEL_374;
                }
                v3 = v100;
                v56 = 1;
              }
LABEL_116:
              v97 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
              v16 = ((-15 << v97) - 1) & v16 | (v56 << v97);
              v5 = *(_QWORD *)(v43 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v43 = v5;
              if (!*(_BYTE *)(v5 + 18))
                goto LABEL_141;
            }
          }
          result = swift_unknownObjectRetain_n();
          v5 = v42;
LABEL_141:
          v114 = *(unsigned __int16 *)(v5 + 16);
          if (!*(_WORD *)(v5 + 16))
            goto LABEL_429;
          v115 = *(_QWORD *)(v5 + 24);
          v48 = __OFSUB__(v3, v115);
          v116 = v3 - v115;
          if (v48)
            goto LABEL_413;
          v95 = v327;
          if (v116 <= 0)
          {
            v119 = 0;
          }
          else
          {
            if ((_DWORD)v114 == 1)
              goto LABEL_431;
            v117 = *(_QWORD *)(v5 + 48);
            v3 = v116 - v117;
            if (__OFSUB__(v116, v117))
              goto LABEL_415;
            if (v3 >= 1)
            {
              if ((_DWORD)v114 == 2)
                goto LABEL_431;
              v118 = (_QWORD *)(v5 + 72);
              v119 = 2;
              while (v114 != v119)
              {
                v120 = v3 - *v118;
                if (__OFSUB__(v3, *v118))
                  goto LABEL_379;
                if (v120 < 1)
                  goto LABEL_156;
                ++v119;
                v118 += 3;
                v3 = v120;
                if (v114 == v119)
                  goto LABEL_431;
              }
              goto LABEL_378;
            }
            v3 = v116;
            v119 = 1;
          }
LABEL_156:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v108 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
          goto LABEL_139;
        }
        v95 = *(_QWORD *)(v33 + 72);
      }
      else if (v328 >= 0x800)
      {
        goto LABEL_412;
      }
      swift_unknownObjectRetain_n();
      v108 = specialized Rope._endPath.getter(v42);
      result = swift_unknownObjectRelease();
      v5 = 0;
      v3 = 0;
      if (!v42)
      {
        v107 = 0;
        goto LABEL_158;
      }
LABEL_139:
      swift_unknownObjectRetain();
      v107 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v96, v108, v5, v42, v95);
      result = swift_unknownObjectRelease_n();
LABEL_158:
      v112 = v346 - v3;
      if (__OFSUB__(v346, v3))
        goto LABEL_399;
      v113 = v346;
LABEL_160:
      *(_QWORD *)&v369 = v96;
      *((_QWORD *)&v369 + 1) = v108;
      *(_QWORD *)&v370 = v5;
      *((_QWORD *)&v370 + 1) = v107;
      *(_QWORD *)&v371 = v112;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v369, 0, v113, (_QWORD *)v33, (uint64_t *)&v351, v334, v336, (uint64_t)&v357);
      swift_bridgeObjectRelease();
      swift_release();
      v78 = v371;
      v121 = *(_QWORD *)(v33 + 64);
      v122 = *(_QWORD *)(v33 + 72);
      v123 = *(_QWORD *)(v33 + 80);
      v124 = *(_QWORD *)(v33 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v343 & 1, v121, v122, v123, v124, (uint64_t *)&v437);
      v125 = v439;
      swift_unknownObjectRelease();
      if (v125 >= v78 || !*(_QWORD *)(v351 + 16))
      {
        swift_release();
        v83 = v348;
        goto LABEL_164;
      }
    }
  }
  swift_release();
LABEL_164:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v369 = v83;
  v126 = *(_QWORD *)(v33 + 64);
  v127 = *(_QWORD *)(v33 + 72);
  v128 = *(_QWORD *)(v33 + 80);
  v42 = *(_QWORD *)(v33 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v83 - 1, v343 & 1, v126, v127, v128, v42, (uint64_t *)&v437);
  v335 = v438;
  v337 = v437;
  v129 = v439;
  swift_unknownObjectRelease();
  v450[0] = v337;
  v450[1] = v335;
  v451 = v129;
  v130 = *(_QWORD *)(v33 + 64);
  v131 = *(_QWORD *)(v33 + 72);
  v132 = *(_QWORD *)(v33 + 80);
  v133 = *(_QWORD *)(v33 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v450, v130, v131, v132, v133);
  v135 = v134;
  v3 = v136;
  swift_unknownObjectRelease();
  v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v135);
  v43 = v137;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v5 = 0;
  *(_QWORD *)&v351 = result;
  v138 = 1 << *(_BYTE *)(v11 + 32);
  v49 = -1;
  if (v138 < 64)
    v49 = ~(-1 << v138);
  v139 = v11 + 64;
  v140 = v49 & *(_QWORD *)(v11 + 64);
  v44 = (unint64_t)(v138 + 63) >> 6;
  while (1)
  {
    if (v140)
    {
      v141 = __clz(__rbit64(v140));
      v140 &= v140 - 1;
      v142 = v141 | (v5 << 6);
      goto LABEL_168;
    }
    v46 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_369;
    if (v46 >= v44)
    {
LABEL_188:
      swift_release();
      v146 = *(_OWORD *)(v33 + 32);
      v447 = *(_OWORD *)(v33 + 16);
      v448 = v146;
      v449 = *(_OWORD *)(v33 + 48);
      BigString.utf8.getter();
      v147 = BigString.UTF8View.count.getter();
      result = outlined release of Locale((uint64_t)v380);
      if (v147 < v348)
      {
LABEL_403:
        __break(1u);
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
        goto LABEL_407;
      }
      v3 = *(_QWORD *)(v33 + 64);
      v148 = *(_QWORD *)(v33 + 72);
      v149 = *(_QWORD *)(v33 + 80);
      v150 = *(_QWORD *)(v33 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      v151 = v150;
      v35 = v348;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v348, v343 & 1, v3, v148, v149, v151, (uint64_t *)&v437);
      v344 = v437;
      v152 = v438;
      v153 = v439;
      swift_unknownObjectRelease();
      v437 = v344;
      v438 = v152;
      *(_QWORD *)&v439 = v153;
      if (v348 != v147)
        goto LABEL_193;
LABEL_194:
      AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)v33, v35, v381);
      for (i = &v382; v153 < *i && !specialized Set.isEmpty.getter(v351); i = &v384)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v437, v35, v147, (_QWORD *)v33, (uint64_t *)&v351, v11, v43, (uint64_t)&v369);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((_QWORD *)v33, v35, v147, (uint64_t *)&v437);
        v153 = v439;
        if (v35 == v147)
          goto LABEL_194;
LABEL_193:
        v3 = *(_QWORD *)(v33 + 64);
        v154 = *(_QWORD *)(v33 + 72);
        v155 = *(_QWORD *)(v33 + 80);
        v156 = *(_QWORD *)(v33 + 88);
        v157 = swift_unknownObjectRetain();
        v158 = v156;
        v35 = v348;
        AttributedString._InternalRuns.endIndex.getter(v157, v154, v155, v158, v383);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_bridgeObjectRelease();
      v34 = v357;
      v36 = v369;
      if ((uint64_t)v369 < v357)
        goto LABEL_404;
      v20 = v320;
      v5 = v331;
LABEL_198:
      v160 = *(_OWORD *)(v33 + 32);
      v444 = *(_OWORD *)(v33 + 16);
      v445 = v160;
      v446 = *(_OWORD *)(v33 + 48);
      BigString.utf8.getter();
      v161 = BigString.UTF8View.count.getter();
      outlined release of Locale((uint64_t)v385);
      v162 = *(_OWORD **)v5;
      v163 = *(_OWORD *)(*(_QWORD *)v5 + 32);
      v369 = *(_OWORD *)(*(_QWORD *)v5 + 16);
      v370 = v163;
      v164 = *(_OWORD *)(v5 + 8);
      v371 = v162[3];
      v372 = v164;
      v165 = *(_OWORD *)(v5 + 40);
      v373 = *(_OWORD *)(v5 + 24);
      v374 = v165;
      v375 = *(_OWORD *)(v5 + 56);
      swift_unknownObjectRetain();
      BigString.init()();
      v166 = v387;
      v162[1] = v386;
      v162[2] = v166;
      v162[3] = v388;
      swift_unknownObjectRelease();
      LODWORD(v437) = v332;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<Unicode.Scalar> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>, MEMORY[0x1E0DEC648]);
      BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
      v167 = *(_OWORD **)v5;
      v441 = v373;
      v442 = v374;
      v443 = v375;
      v437 = v369;
      v438 = v370;
      v440 = v372;
      v439 = v371;
      v458 = v372;
      v459 = v373;
      v460 = v374;
      v461 = v375;
      BigSubstring.UnicodeScalarView.base.getter();
      v168 = v399;
      v167[1] = v398;
      v167[2] = v168;
      v167[3] = v400;
      swift_unknownObjectRelease();
      v169 = v459;
      *(_OWORD *)(v5 + 8) = v458;
      *(_OWORD *)(v5 + 24) = v169;
      v170 = v461;
      *(_OWORD *)(v5 + 40) = v460;
      *(_OWORD *)(v5 + 56) = v170;
      v171 = *(_QWORD *)v5;
      v172 = *(_OWORD *)(*(_QWORD *)v5 + 32);
      v434 = *(_OWORD *)(*(_QWORD *)v5 + 16);
      v435 = v172;
      v436 = *(_OWORD *)(v171 + 48);
      BigString.utf8.getter();
      v173 = BigString.UTF8View.count.getter();
      result = outlined release of Locale((uint64_t)v389);
      v174 = v173 - v161;
      if (__OFSUB__(v173, v161))
        goto LABEL_392;
      v175 = v329 + v174;
      if (__OFADD__(v329, v174))
      {
LABEL_393:
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRetain();
        v3 = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v346, v35, v175, v20, v3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v176 = *(_QWORD *)v5;
        v177 = *(_OWORD *)(*(_QWORD *)v5 + 32);
        v431 = *(_OWORD *)(*(_QWORD *)v5 + 16);
        v432 = v177;
        v433 = *(_OWORD *)(v176 + 48);
        BigString.utf8.getter();
        v178 = BigString.UTF8View.count.getter();
        result = outlined release of Locale((uint64_t)v390);
        v179 = v178 - v161;
        if (!__OFSUB__(v178, v161))
        {
          v48 = __OFADD__(v36, v179);
          v180 = v36 + v179;
          if (!v48)
          {
            if (v180 >= v34)
            {
              v325 = v176;
              v181 = *(_QWORD *)(v176 + 80);
              if (!*(_QWORD *)(v176 + 64))
              {
                v220 = swift_unknownObjectRetain();
                specialized Rope._endPath.getter(v220);
                swift_unknownObjectRelease();
                goto LABEL_240;
              }
              v318 = v34;
              v319 = v180;
              v182 = swift_unknownObjectRetain_n();
              specialized Rope._endPath.getter(v182);
              swift_unknownObjectRelease_n();
              if (!v181)
                goto LABEL_240;
              v183 = (__int128 *)(v176 + 16);
              v184 = *(_OWORD *)(v176 + 32);
              v428 = *(_OWORD *)(v176 + 16);
              v429 = v184;
              v430 = *(_OWORD *)(v176 + 48);
              BigString.utf8.getter();
              BigString.startIndex.getter();
              v185 = BigString.UTF8View.index(_:offsetBy:)();
              v3 = v186;
              v188 = v187;
              v190 = v189;
              outlined release of Locale((uint64_t)v391);
              v191 = *(_OWORD *)(v325 + 32);
              v425 = *(_OWORD *)(v325 + 16);
              v426 = v191;
              v427 = *(_OWORD *)(v325 + 48);
              result = BigString.utf8.getter();
              if (!__OFSUB__(v319, v34))
              {
                v192 = BigString.UTF8View.index(_:offsetBy:)();
                v194 = v193;
                v195 = v183;
                v197 = v196;
                v199 = v198;
                outlined release of Locale((uint64_t)v392);
                specialized Range.init(uncheckedBounds:)(v185, v3, v188, v190, v192, v194, v197, v199, v418);
                *(_QWORD *)&v417[0] = MEMORY[0x1E0DEE9E0];
                v200 = v195[1];
                v422 = *v195;
                v423 = v200;
                v424 = v195[2];
                BigString.unicodeScalars.getter();
                v317 = v418[0];
                v201 = BigString.UnicodeScalarView.index(roundingDown:)();
                v203 = v202;
                v3 = v204;
                v206 = v205;
                outlined release of Locale((uint64_t)v393);
                v207 = v195[1];
                v419 = *v195;
                v420 = v207;
                v328 = (unint64_t)v195;
                v421 = v195[2];
                BigString.unicodeScalars.getter();
                v316 = v418[4];
                v208 = BigString.UnicodeScalarView.index(roundingUp:)();
                result = outlined release of Locale((uint64_t)v394);
                *(_QWORD *)&v462 = v201;
                *((_QWORD *)&v462 + 1) = v203;
                *(_QWORD *)&v463 = v3;
                *((_QWORD *)&v463 + 1) = v206;
                v44 = v201 >> 11;
                v5 = v208 >> 11;
                if (v208 >> 11 >= v201 >> 11)
                {
                  v16 = *(_QWORD *)(v325 + 64);
                  if (v16)
                    v209 = *(_QWORD *)(v325 + 80);
                  else
                    v209 = 0;
                  if (v209 >= v44)
                  {
                    v210 = *(_QWORD *)(v325 + 72);
                    v11 = *(_QWORD *)(v325 + 88);
                    if (!v16 || v44 >= *(_QWORD *)(v325 + 80) || !*(_WORD *)(v16 + 16))
                    {
                      swift_retain_n();
                      v221 = swift_unknownObjectRetain_n();
                      v3 = specialized Rope._endPath.getter(v221);
                      swift_unknownObjectRelease();
                      v43 = 0;
                      v211 = 0;
                      if (!v16)
                        goto LABEL_372;
                      goto LABEL_242;
                    }
                    v346 = *(_QWORD *)(v325 + 72);
                    v42 = *(unsigned __int8 *)(v16 + 18);
                    if (!*(_BYTE *)(v16 + 18))
                    {
                      swift_unknownObjectRetain_n();
                      result = swift_retain_n();
                      v211 = v44;
                      v43 = v16;
LABEL_327:
                      v3 = *(unsigned __int16 *)(v43 + 16);
                      if (!*(_WORD *)(v43 + 16))
                        goto LABEL_333;
                      v298 = *(_QWORD *)(v43 + 24);
                      v56 = v211 - v298;
                      if (__OFSUB__(v211, v298))
                        goto LABEL_420;
                      if (__OFADD__(v56, 1))
                        goto LABEL_421;
                      if (v56 + 1 <= 0)
                      {
                        v3 = 0;
                      }
                      else
                      {
                        if ((_DWORD)v3 != 1)
                          goto LABEL_351;
                        v211 -= v298;
LABEL_333:
                        if (v211)
                        {
                          __break(1u);
LABEL_335:
                          if (v43 < v319)
                            goto LABEL_336;
LABEL_338:
                          LOBYTE(v44) = 0;
                          goto LABEL_339;
                        }
                      }
                      goto LABEL_371;
                    }
                    swift_unknownObjectRetain_n();
                    result = swift_retain_n();
                    v211 = v44;
                    v3 = v16;
                    while (1)
                    {
                      v213 = *(unsigned __int16 *)(v3 + 16);
                      if (!*(_WORD *)(v3 + 16))
                        goto LABEL_217;
                      v214 = *(_QWORD *)(v3 + 40);
                      v215 = v211 - v214;
                      if (__OFSUB__(v211, v214))
                        goto LABEL_389;
                      if (__OFADD__(v215, 1))
                        goto LABEL_390;
                      if (v215 + 1 <= 0)
                      {
                        v213 = 0;
                      }
                      else
                      {
                        if ((_DWORD)v213 == 1)
                        {
                          v211 -= v214;
                          goto LABEL_217;
                        }
                        v216 = *(_QWORD *)(v3 + 64);
                        v48 = __OFSUB__(v215, v216);
                        v217 = v215 - v216;
                        if (v48)
                          goto LABEL_405;
                        if (__OFADD__(v217, 1))
                          goto LABEL_406;
                        if (v217 + 1 < 1)
                        {
                          v213 = 1;
                          v211 = v215;
                        }
                        else
                        {
                          if ((_DWORD)v213 == 2)
                          {
                            v211 = v217;
LABEL_217:
                            if (v211)
                              goto LABEL_388;
                            goto LABEL_218;
                          }
                          v218 = (_QWORD *)(v3 + 88);
                          v219 = 2;
                          while (1)
                          {
                            if (v213 == v219)
                              goto LABEL_381;
                            v211 = v217 - *v218;
                            if (__OFSUB__(v217, *v218))
                              goto LABEL_382;
                            if (__OFADD__(v211, 1))
                              goto LABEL_383;
                            if (v211 + 1 < 1)
                              break;
                            ++v219;
                            v218 += 3;
                            v217 = v211;
                            if (v213 == v219)
                              goto LABEL_217;
                          }
                          v213 = v219;
                          v211 = v217;
                        }
                      }
LABEL_218:
                      v212 = (4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C;
                      v42 = ((-15 << v212) - 1) & v42 | (v213 << v212);
                      v43 = *(_QWORD *)(v3 + 24 + 24 * v213);
                      swift_unknownObjectRetain();
                      result = swift_unknownObjectRelease();
                      v3 = v43;
                      if (!*(_BYTE *)(v43 + 18))
                        goto LABEL_327;
                    }
                  }
LABEL_409:
                  __break(1u);
                  goto LABEL_410;
                }
LABEL_408:
                __break(1u);
                goto LABEL_409;
              }
LABEL_407:
              __break(1u);
              goto LABEL_408;
            }
            goto LABEL_396;
          }
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
          goto LABEL_400;
        }
      }
      __break(1u);
      goto LABEL_395;
    }
    v144 = *(_QWORD *)(v139 + 8 * v46);
    ++v5;
    if (!v144)
    {
      v5 = v46 + 1;
      if (v46 + 1 >= v44)
        goto LABEL_188;
      v144 = *(_QWORD *)(v139 + 8 * v5);
      if (!v144)
      {
        v5 = v46 + 2;
        if (v46 + 2 >= v44)
          goto LABEL_188;
        v144 = *(_QWORD *)(v139 + 8 * v5);
        if (!v144)
        {
          v5 = v46 + 3;
          if (v46 + 3 >= v44)
            goto LABEL_188;
          v144 = *(_QWORD *)(v139 + 8 * v5);
          if (!v144)
          {
            v5 = v46 + 4;
            if (v46 + 4 >= v44)
              goto LABEL_188;
            v144 = *(_QWORD *)(v139 + 8 * v5);
            if (!v144)
              break;
          }
        }
      }
    }
LABEL_187:
    v140 = (v144 - 1) & v144;
    v142 = __clz(__rbit64(v144)) + (v5 << 6);
LABEL_168:
    v143 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v142);
    v3 = *v143;
    v42 = v143[1];
    swift_bridgeObjectRetain();
    v16 = (uint64_t)&v351;
    specialized Set._Variant.insert(_:)((unint64_t *)&v437, v3, v42);
    result = swift_bridgeObjectRelease();
  }
  v145 = v46 + 5;
  if (v145 >= v44)
    goto LABEL_188;
  v144 = *(_QWORD *)(v139 + 8 * v145);
  if (v144)
  {
    v5 = v145;
    goto LABEL_187;
  }
  while (1)
  {
    v5 = v145 + 1;
    if (__OFADD__(v145, 1))
      break;
    if (v5 >= v44)
      goto LABEL_188;
    v144 = *(_QWORD *)(v139 + 8 * v5);
    ++v145;
    if (v144)
      goto LABEL_187;
  }
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  if (!v3)
    __break(1u);
LABEL_428:
  __break(1u);
LABEL_429:
  if (!v3)
    __break(1u);
LABEL_431:
  __break(1u);
  return result;
}

uint64_t AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  _OWORD v51[6];
  _OWORD v52[15];

  AttributedString.UnicodeScalarView._ensureUniqueReference()();
  if (a3 == MEMORY[0x1E0D12ED0])
  {
    v7 = a2[6];
    v8 = a2[4];
    v52[5] = a2[5];
    v52[6] = v7;
    v9 = a2[2];
    v52[3] = a2[3];
    v52[4] = v8;
    v10 = *a2;
    v52[1] = a2[1];
    v52[2] = v9;
    v52[0] = v10;
    v11 = *v3;
    v12 = *(_OWORD *)(*v3 + 32);
    v52[7] = *(_OWORD *)(*v3 + 16);
    v52[8] = v12;
    v13 = *(_OWORD *)(v3 + 1);
    v52[9] = *(_OWORD *)(v11 + 48);
    v52[10] = v13;
    v14 = *(_OWORD *)(v3 + 5);
    v52[11] = *(_OWORD *)(v3 + 3);
    v52[12] = v14;
    v52[13] = *(_OWORD *)(v3 + 7);
    outlined retain of Locale((uint64_t)v52);
    swift_unknownObjectRetain();
    BigSubstring.UnicodeScalarView.subscript.getter();
    swift_unknownObjectRelease();
    BigSubstring.UnicodeScalarView.isIdentical(to:)();
    outlined release of Locale((uint64_t)v52);
    outlined release of Locale((uint64_t)&v50);
  }
  v15 = *v3;
  v16 = *(_OWORD *)(*v3 + 32);
  v51[3] = *(_OWORD *)(*v3 + 16);
  v51[4] = v16;
  v51[5] = *(_OWORD *)(v15 + 48);
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v18 = MEMORY[0x1E0DEE9E0];
LABEL_25:
    MEMORY[0x1E0C80A78](result);
    AttributedString.UnicodeScalarView._mutateStringContents(in:attributes:with:)(a1, v18, MEMORY[0x1E0DEE9E8], (void (*)(__int128 *, __int128 *))partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= 0x800uLL && (*((_QWORD *)a1 + 4) ^ v19) <= 0x3FF)
  {
    BigString.utf8.getter();
    v19 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v51);
  }
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v19 >> 11;
  if (v20)
    v22 = *(_QWORD *)(v15 + 80);
  else
    v22 = 0;
  if (v22 < v21)
    goto LABEL_66;
  v23 = *(_QWORD *)(v15 + 72);
  v24 = *(_QWORD *)(v15 + 88);
  if (!v20 || (v21 < *(_QWORD *)(v15 + 80) ? (v25 = *(unsigned __int16 *)(v20 + 16) == 0) : (v25 = 1), v25))
  {
    v26 = swift_unknownObjectRetain_n();
    v27 = specialized Rope._endPath.getter(v26);
    result = swift_unknownObjectRelease();
    v28 = v23;
    v29 = 0;
    if (!v20)
    {
LABEL_20:
      if (v24 != *(_QWORD *)(v15 + 88))
        goto LABEL_67;
      if (v29)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v30 = *(_QWORD *)(v15 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v27, v30);
        swift_unknownObjectRelease();
      }
      v31 = swift_bridgeObjectRetain();
      v18 = specialized _NativeDictionary.filter(_:)(v31);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      goto LABEL_25;
    }
LABEL_19:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v24, v27, v29, v20, v28);
    result = swift_unknownObjectRelease_n();
    goto LABEL_20;
  }
  v47 = *(_QWORD *)(v15 + 72);
  v48 = *(_QWORD *)(v15 + 88);
  v49 = a1;
  v32 = *(unsigned __int8 *)(v20 + 18);
  if (*(_BYTE *)(v20 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v29 = v20;
    while (1)
    {
      v34 = *(unsigned __int16 *)(v29 + 16);
      if (*(_WORD *)(v29 + 16))
      {
        v35 = *(_QWORD *)(v29 + 40);
        v36 = __OFSUB__(v21, v35);
        v37 = v21 - v35;
        if (v36)
          goto LABEL_64;
        if (__OFADD__(v37, 1))
          goto LABEL_65;
        if (v37 + 1 < 1)
        {
          v34 = 0;
          goto LABEL_30;
        }
        if ((_DWORD)v34 != 1)
        {
          v38 = (uint64_t *)(v29 + 64);
          v39 = 1;
          while (1)
          {
            v40 = *v38;
            v38 += 3;
            v21 = v37 - v40;
            if (__OFSUB__(v37, v40))
              break;
            if (__OFADD__(v21, 1))
              goto LABEL_62;
            if (v21 + 1 < 1)
            {
              v34 = v39;
              v21 = v37;
              goto LABEL_30;
            }
            ++v39;
            v37 = v21;
            if (v34 == v39)
              goto LABEL_29;
          }
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        v21 = v37;
      }
LABEL_29:
      if (v21)
        goto LABEL_63;
LABEL_30:
      v33 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
      v32 = ((-15 << v33) - 1) & v32 | (v34 << v33);
      v29 = *(_QWORD *)(v29 + 24 + 24 * v34);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      if (!*(_BYTE *)(v29 + 18))
      {
        v41 = v32 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_46;
      }
    }
  }
  result = swift_unknownObjectRetain_n();
  v41 = 0;
  v29 = v20;
LABEL_46:
  v42 = *(unsigned __int16 *)(v29 + 16);
  a1 = v49;
  if (!*(_WORD *)(v29 + 16))
    goto LABEL_56;
  v43 = *(_QWORD *)(v29 + 24);
  v36 = __OFSUB__(v21, v43);
  v21 -= v43;
  if (v36)
    goto LABEL_70;
  if (!__OFADD__(v21, 1))
  {
    if (v21 + 1 < 1)
      goto LABEL_58;
    if ((_DWORD)v42 != 1)
    {
      v44 = (uint64_t *)(v29 + 48);
      v45 = 1;
      do
      {
        v46 = *v44;
        v44 += 3;
        v36 = __OFSUB__(v21, v46);
        v21 -= v46;
        if (v36)
          goto LABEL_68;
        if (__OFADD__(v21, 1))
          goto LABEL_69;
        if (v21 + 1 < 1)
        {
          v42 = v45;
          goto LABEL_60;
        }
      }
      while (v42 != ++v45);
    }
LABEL_56:
    if (!v21)
    {
LABEL_60:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v27 = v41 | (v42 << 8);
      v24 = v48;
      v28 = v47;
      goto LABEL_19;
    }
    __break(1u);
LABEL_58:
    v42 = 0;
    goto LABEL_60;
  }
LABEL_71:
  __break(1u);
  return result;
}

void closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _BYTE *v10;
  uint64_t v11;

  v9 = MEMORY[0x1E0C80A78](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a5, v9);
    BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.UnicodeScalarView(_QWORD *a1, __int128 *a2, ValueMetadata *a3)
{
  AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(a1, a2, a3);
  return (*((uint64_t (**)(__int128 *, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.UnicodeScalarView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a2, a3);
}

_QWORD *protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.UnicodeScalarView(int *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v2 = *a1;
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  v7[0] = v1[5];
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v7[0];
  v7[5] = v3;
  v7[6] = v4;
  v7[7] = v5;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v7, v2);
}

_QWORD *protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.UnicodeScalarView(int *a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v2 = *a1;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v7[0] = *a2;
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v7[0];
  v7[5] = v3;
  v7[6] = v4;
  v7[7] = v5;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v7, v2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.UnicodeScalarView(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a2[1], a2[2], a2[3], a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.UnicodeScalarView@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result;

  result = specialized RangeReplaceableCollection.remove(at:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

_QWORD *protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.UnicodeScalarView(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  return specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v4);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance AttributedString.UnicodeScalarView(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.UnicodeScalarView(_DWORD *a1@<X8>)
{
  int v2;

  specialized RangeReplaceableCollection.removeFirst()();
  *a1 = v2;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance AttributedString.UnicodeScalarView(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;

  if ((result & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2 >> 10 < *(_QWORD *)(v1 + 8) >> 10)
    {
      __break(1u);
    }
    else
    {
      v3 = *(_QWORD *)(v1 + 64);
      v4 = *(_QWORD *)(v1 + 32);
      v5 = *(_QWORD *)(v1 + 8);
      v6 = *(_OWORD *)(v1 + 16);
      v7 = v4;
      v8 = v2;
      v9 = *(_OWORD *)(v1 + 48);
      v10 = v3;
      return (uint64_t)specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(&v5);
    }
  }
  else
  {
    swift_release();
    return AttributedString.UnicodeScalarView.init()(v1);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.UnicodeScalarView(uint64_t (*a1)(uint64_t *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

uint64_t outlined retain of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of Slice<AttributedString.UnicodeScalarView>(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.UnicodeScalarView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.UnicodeScalarView>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.UnicodeScalarView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.UnicodeScalarView>, MEMORY[0x1E0DEC908]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.UnicodeScalarView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<AttributedString.UnicodeScalarView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.UnicodeScalarView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView, MEMORY[0x1E0DEDE50]);
}

uint64_t assignWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.UnicodeScalarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.UnicodeScalarView()
{
  return &type metadata for AttributedString.UnicodeScalarView;
}

void partial apply for closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #1 in AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[2]);
}

unint64_t lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0D12ED8], MEMORY[0x1E0D12ED0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView);
  }
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.expression.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.ExpressionEvaluate.input.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;
  int *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = TupleTypeMetadata;
  v5 = *(_QWORD *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_9;
      if ((unint64_t)&v8[-v10] < 0x20)
        goto LABEL_9;
      v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v10 + 16);
      v12 = v8 + 16;
      v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        v15 = v5 - v9;
        v16 = 8 * v9;
        v17 = &v8[8 * v9];
        v18 = (uint64_t *)(v10 + v16);
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v6 = TupleTypeMetadata;
  }
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))(v22, v2 + *(int *)(v3 + 68), v6, v20);
  if (v5)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v26 = (int *)(v6 + 32);
    v27 = v5;
    do
    {
      if (v5 == 1)
        v28 = 0;
      else
        v28 = *v26;
      v30 = *v25++;
      v29 = v30;
      v31 = *a2++;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

void PredicateExpressions.ExpressionEvaluate.init(expression:input:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD v29[14];

  v29[4] = a9;
  v29[5] = a5 & 0xFFFFFFFFFFFFFFFELL;
  v29[6] = a2;
  if (a3 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v19 = 0;
      if (a3 < 4)
        goto LABEL_9;
      if ((unint64_t)&v18[-v16] < 0x20)
        goto LABEL_9;
      v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v20 = (__int128 *)(v16 + 16);
      v21 = v18 + 16;
      v22 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v19 != a3)
      {
LABEL_9:
        v24 = a3 - v19;
        v25 = 8 * v19;
        v26 = &v18[8 * v19];
        v27 = (uint64_t *)(v16 + v25);
        do
        {
          v28 = *v27++;
          *(_QWORD *)v26 = v28;
          v26 += 8;
          --v24;
        }
        while (v24);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v29[7] = TupleTypeMetadata;
  v29[0] = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v29[8] = a3;
  v29[9] = a4;
  v29[10] = a5;
  v29[11] = a6;
  v29[12] = a7;
  v29[13] = a8;
  type metadata accessor for PredicateExpressions.ExpressionEvaluate();
}

void type metadata accessor for PredicateExpressions.ExpressionEvaluate()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t PredicateExpressions.ExpressionEvaluate.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t result;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = 8 * v4;
  v79 = v4;
  v65 = a3;
  v74 = a1;
  if (v4 == 1)
  {
    v68 = &v60;
    v72 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v67 = *(_QWORD *)(v72 - 8);
    MEMORY[0x1E0C80A78](a1);
    v78 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v8 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
    v9 = (char *)&v60 - v8;
    if (v4)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v4 != v10)
      {
LABEL_9:
        v16 = v4 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v68 = &v60;
    v72 = TupleTypeMetadata;
    v67 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v78 = (char *)&v60 - v22;
    v77 = (char *)&v60;
    MEMORY[0x1E0C80A78](v23);
    if (v4)
    {
      v24 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
      v26 = (uint64_t *)((char *)&v60 - v8);
      v27 = v79;
      do
      {
        v24 += 8;
        v25 += 8;
        *v26++ = swift_getAssociatedTypeWitness();
        --v27;
      }
      while (v27);
    }
    v4 = v79;
    AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }
  v70 = &v60;
  v71 = AssociatedTypeWitness;
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v77 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = &v60;
  MEMORY[0x1E0C80A78](v29);
  if (v4)
  {
    v30 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v31 = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
    v32 = (uint64_t *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    v33 = v79;
    do
    {
      v30 += 8;
      v31 += 8;
      *v32++ = swift_getAssociatedTypeWitness();
      --v33;
    }
    while (v33);
  }
  v34 = v79;
  v35 = type metadata accessor for Expression(0, v79, (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(a2 + 40));
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v60 - v38;
  v40 = v75;
  v41 = *v74;
  v80 = *v74;
  v42 = v76;
  result = (*(uint64_t (**)(uint64_t *, _QWORD, __n128))(*(_QWORD *)(a2 + 48) + 16))(&v80, *(_QWORD *)(a2 + 24), v37);
  if (!v42)
  {
    v61 = v39;
    v62 = v36;
    v63 = v35;
    v64 = &v60;
    v44 = MEMORY[0x1E0C80A78](result);
    v76 = (uint64_t *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    v45 = (*(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v67 + 16))(v78, v40 + *(int *)(a2 + 68), v72, v44);
    if (v34)
    {
      v73 = v41;
      v48 = 0;
      v49 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      v74 = (uint64_t *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      v75 = v49;
      v50 = 32;
      do
      {
        if (v34 == 1)
          v51 = (uint64_t)v77;
        else
          v51 = (uint64_t)&v77[*(int *)(v71 + v50)];
        v52 = *(_QWORD *)(v75 + 8 * v48);
        v53 = v74[v48];
        v54 = *(_QWORD *)(v52 - 8);
        v55 = MEMORY[0x1E0C80A78](v45);
        v57 = (char *)&v60 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v54 + 16))(v57, v55);
        v80 = v73;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(&v80, v52, v53);
        v45 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v57, v52);
        v76[v48++] = v51;
        v50 += 16;
        v34 = v79;
      }
      while (v79 != v48);
    }
    v58 = v63;
    v59 = v61;
    Expression.evaluate(_:)(v76, v63, v46, v47, v65);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v58);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v77, v71);
    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v78, v72);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ExpressionEvaluate.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_evaluate<A, B, C>(_:_:)(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t, __n128);
  uint64_t v35;
  char *v36;
  int *v37;
  char **v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = a7;
  v51 = a8;
  v48 = a5;
  v49 = a6;
  v12 = TupleTypeMetadata;
  v46 = a9;
  v13 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v14 = 8 * a3;
  if (a3 == 1)
  {
    v15 = *v13;
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v16 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v17 = 0;
      if (a3 < 4)
        goto LABEL_9;
      if ((unint64_t)(v16 - (char *)v13) < 0x20)
        goto LABEL_9;
      v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (__int128 *)(v13 + 2);
      v19 = v16 + 16;
      v20 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != a3)
      {
LABEL_9:
        v22 = a3 - v17;
        v23 = v17;
        v24 = &v16[8 * v17];
        v25 = &v13[v23];
        do
        {
          v26 = *v25++;
          *(_QWORD *)v24 = v26;
          v24 += 8;
          --v22;
        }
        while (v22);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v15 = TupleTypeMetadata;
  }
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v28 = (char *)v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[1] = v45;
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v33 + 16);
  v47 = a4;
  v35 = v34(v32, v12, a4, v30);
  v45[0] = v45;
  MEMORY[0x1E0C80A78](v35);
  v36 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v37 = (int *)(v15 + 32);
    v38 = (char **)((char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v39 = a3;
    do
    {
      if (a3 == 1)
        v40 = 0;
      else
        v40 = *v37;
      v42 = *v13++;
      v41 = v42;
      v43 = &v28[v40];
      v44 = *a2++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v43, v44);
      *v38++ = v43;
      v37 += 4;
      --v39;
    }
    while (v39);
  }
  PredicateExpressions.ExpressionEvaluate.init(expression:input:)((uint64_t)v32, (uint64_t)v36, a3, v47, v48, v49, v50, v51, v46);
}

uint64_t PredicateExpressions.ExpressionEvaluate.description.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v2._object = (void *)0x8000000182308600;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    MEMORY[0x1E0C80A78](v4);
    v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_8;
      if ((unint64_t)&v7[-v9] < 0x20)
        goto LABEL_8;
      v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = (__int128 *)(v9 + 16);
      v11 = v7 + 16;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        v14 = v5 - v8;
        v15 = 8 * v8;
        v16 = &v7[8 * v8];
        v17 = (uint64_t *)(v9 + v15);
        do
        {
          v18 = *v17++;
          *(_QWORD *)v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    swift_getTupleTypeMetadata();
  }
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.encode(to:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v47 = a4;
  v7 = (_QWORD *)TupleTypeMetadata;
  v8 = *(_QWORD *)(a2 + 16);
  v44 = a6;
  v45 = v8;
  if (v8 == 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4)
        goto LABEL_9;
      if ((unint64_t)&v12[-v14] < 0x20)
        goto LABEL_9;
      v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v14 + 16);
      v16 = v12 + 16;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v10 != v13)
      {
LABEL_9:
        v19 = v10 - v13;
        v20 = 8 * v13;
        v21 = &v12[8 * v13];
        v22 = (uint64_t *)(v14 + v20);
        do
        {
          v23 = *v22++;
          *(_QWORD *)v21 = v23;
          v21 += 8;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v9 = TupleTypeMetadata;
  }
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
  v27 = v46;
  v28 = v50;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v28)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v27 + *(int *)(a2 + 68), v9);
  v41 = (uint64_t)&v41;
  v42 = v9;
  if (v45)
  {
    v31 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v32 = v45;
    v33 = v44 & 0xFFFFFFFFFFFFFFFELL;
    v34 = 32;
    v43 = v26;
    v44 = v24;
    while (1)
    {
      v46 = v32;
      v50 = 0;
      v47 = &v41;
      v35 = *v31;
      v36 = *(_QWORD *)(*v31 - 8);
      v37 = MEMORY[0x1E0C80A78](v30);
      v39 = (char *)&v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v36 + 16))(v39, v37);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
      v40 = v50;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v40)
        break;
      v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      v34 += 16;
      v33 += 8;
      ++v31;
      v32 = v46 - 1;
      v26 = v43;
      v24 = v44;
      if (v46 == 1)
        goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  }
LABEL_18:
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

void PredicateExpressions.ExpressionEvaluate<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  uint64_t TupleTypeMetadata;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[24];

  v33[7] = a7;
  v12 = a3;
  v33[4] = a8;
  v33[13] = a4 & 0xFFFFFFFFFFFFFFFELL;
  v33[23] = a2;
  if (a2 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v15)
    {
      v19 = 0;
      if (v15 < 4)
        goto LABEL_9;
      if ((unint64_t)&v18[-v16] < 0x20)
        goto LABEL_9;
      v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      v20 = (__int128 *)(v16 + 16);
      v21 = v18 + 16;
      v22 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v19 != v15)
      {
LABEL_9:
        v24 = v15 - v19;
        v25 = 8 * v19;
        v26 = &v18[8 * v19];
        v27 = (uint64_t *)(v16 + v25);
        do
        {
          v28 = *v27++;
          *(_QWORD *)v26 = v28;
          v26 += 8;
          --v24;
        }
        while (v24);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v12 = a3;
  }
  v33[5] = TupleTypeMetadata;
  v33[10] = v33;
  v33[12] = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v33[14] = (char *)v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[9] = v33;
  MEMORY[0x1E0C80A78](v30);
  v33[6] = (char *)v33 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[15] = v32;
  v33[16] = v12;
  v33[17] = a4;
  v33[18] = a5;
  v33[19] = a6;
  v33[20] = a9;
  type metadata accessor for PredicateExpressions.ExpressionEvaluate();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[4];
  _QWORD v22[4];

  v5 = *a3;
  v6 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_QWORD *)&v12[8 * i] = *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8 * i) + 16);
    MEMORY[0x1E0C80A78](v9);
    v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = 0;
    do
    {
      *(_QWORD *)&v17[8 * v18] = *(_QWORD *)(*(_QWORD *)(v15 + 8 * v18) + 24);
      ++v18;
    }
    while (v14 != v18);
  }
  else
  {
    MEMORY[0x1E0C80A78](v9);
    v17 = (char *)v21 - v19;
  }
  v22[0] = v7;
  v22[1] = v8;
  v22[2] = v12;
  v22[3] = v17;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>, a2, v22);
  v21[0] = v7;
  v21[1] = v8;
  v21[2] = v12;
  v21[3] = v17;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>, a2, v21);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.ExpressionEvaluate<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], *(_QWORD *)(a3 - 8), a4, a2[7]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.ExpressionEvaluate<>.encode(to:)(a1, a2, a3, *(uint64_t **)(a3 - 16), a5, *(_QWORD *)(a3 - 32));
}

uint64_t type metadata completion function for PredicateExpressions.ExpressionEvaluate(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];

  result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(result - 8) + 64;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      result = swift_checkMetadataState();
      if (v4 > 0x3F)
        return result;
LABEL_14:
      v20[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_11;
      if ((unint64_t)&v7[-v9] < 0x20)
        goto LABEL_11;
      v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = (__int128 *)(v9 + 16);
      v11 = v7 + 16;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_11:
        v14 = v5 - v8;
        v15 = 8 * v8;
        v16 = &v7[8 * v8];
        v17 = (uint64_t *)(v9 + v15);
        do
        {
          v18 = *v17++;
          *(_QWORD *)v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    result = swift_getTupleTypeMetadata();
    if (v19 <= 0x3F)
      goto LABEL_14;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ExpressionEvaluate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))(a1, a2);
    v8 = *(int *)(a3 + 68);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    if (*(_QWORD *)(a3 + 16) == 1)
    {
      TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v7);
      v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
      {
        v16 = 0;
        v17 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4)
          goto LABEL_11;
        if ((unint64_t)&v15[-v17] < 0x20)
          goto LABEL_11;
        v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v18 = (__int128 *)(v17 + 16);
        v19 = v15 + 16;
        v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          v22 = v13 - v16;
          v23 = 8 * v16;
          v24 = &v15[8 * v16];
          v25 = (uint64_t *)(v17 + v23);
          do
          {
            v26 = *v25++;
            *(_QWORD *)v24 = v26;
            v24 += 8;
            --v22;
          }
          while (v22);
        }
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, char *))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(v9, v10);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  v5 = *(int *)(a2 + 68);
  if (*(_QWORD *)(a2 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v4);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        v16 = v7 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  v7 = *(int *)(a3 + 68);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  v7 = *(int *)(a3 + 68);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 24))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  v7 = *(int *)(a3 + 68);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ExpressionEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  v7 = *(int *)(a3 + 68);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 40))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B46434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a1, a2);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_11;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_11;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_11:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 68), a2);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ExpressionEvaluate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B46590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, a2, a2);
  if (*(_QWORD *)(a4 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4)
        goto LABEL_11;
      if ((unint64_t)&v12[-v14] < 0x20)
        goto LABEL_11;
      v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v14 + 16);
      v16 = v12 + 16;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v10 != v13)
      {
LABEL_11:
        v19 = v10 - v13;
        v20 = 8 * v13;
        v21 = &v12[8 * v13];
        v22 = (uint64_t *)(v14 + v20);
        do
        {
          v23 = *v22++;
          *(_QWORD *)v21 = v23;
          v21 += 8;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a1 + *(int *)(a4 + 68), a2, a2);
}

void static String.StandardComparator.localizedStandard.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 833;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.localized.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static String.StandardComparator.lexical.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
}

unint64_t one-time initialization function for validAlgorithms()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  char v4;
  uint64_t v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String.StandardComparator, Selector)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_182065B80;
  *(_QWORD *)(inited + 32) = 833;
  *(_WORD *)(inited + 40) = 1;
  *(_QWORD *)(inited + 48) = sel_localizedStandardCompare_;
  *(_QWORD *)(inited + 56) = 833;
  *(_WORD *)(inited + 64) = 257;
  *(_QWORD *)(inited + 72) = sel_localizedStandardCompare_;
  *(_QWORD *)(inited + 80) = 0;
  *(_WORD *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = sel_localizedCompare_;
  *(_QWORD *)(inited + 104) = 0;
  *(_WORD *)(inited + 112) = 257;
  *(_QWORD *)(inited + 120) = sel_localizedCompare_;
  *(_QWORD *)(inited + 128) = 0;
  *(_WORD *)(inited + 136) = 0;
  *(_QWORD *)(inited + 144) = sel_compare_;
  *(_QWORD *)(inited + 152) = 0;
  *(_WORD *)(inited + 160) = 256;
  *(_QWORD *)(inited + 168) = sel_compare_;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String.StandardComparator, Selector>);
  v1 = static _DictionaryStorage.allocate(capacity:)();
  v2 = *(_QWORD *)(inited + 32);
  v3 = *(unsigned __int8 *)(inited + 40);
  v4 = *(_BYTE *)(inited + 41);
  v5 = *(_QWORD *)(inited + 48);
  if (v4)
    v6 = 256;
  else
    v6 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 32), v6 | v3);
  if ((v8 & 1) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v9 = v1 + 64;
  *(_QWORD *)(v1 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v10 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v10 = v2;
  *(_BYTE *)(v10 + 8) = v3;
  *(_BYTE *)(v10 + 9) = v4;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v5;
  v11 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v1 + 16) = v13;
  v14 = *(_QWORD *)(inited + 56);
  v15 = *(unsigned __int8 *)(inited + 64);
  v16 = *(_BYTE *)(inited + 65);
  v17 = *(_QWORD *)(inited + 72);
  if (v16)
    v18 = 256;
  else
    v18 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 56), v18 | v15);
  if ((v19 & 1) != 0)
    goto LABEL_34;
  *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v20 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v20 = v14;
  *(_BYTE *)(v20 + 8) = v15;
  *(_BYTE *)(v20 + 9) = v16;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v17;
  v21 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v21, 1);
  v22 = v21 + 1;
  if (v12)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(_QWORD *)(v1 + 16) = v22;
  v23 = *(_QWORD *)(inited + 80);
  v24 = *(unsigned __int8 *)(inited + 88);
  v25 = *(_BYTE *)(inited + 89);
  v26 = *(_QWORD *)(inited + 96);
  if (v25)
    v27 = 256;
  else
    v27 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 80), v27 | v24);
  if ((v28 & 1) != 0)
    goto LABEL_36;
  *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v29 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v29 = v23;
  *(_BYTE *)(v29 + 8) = v24;
  *(_BYTE *)(v29 + 9) = v25;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v26;
  v30 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v30, 1);
  v31 = v30 + 1;
  if (v12)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  *(_QWORD *)(v1 + 16) = v31;
  v32 = *(_QWORD *)(inited + 104);
  v33 = *(unsigned __int8 *)(inited + 112);
  v34 = *(_BYTE *)(inited + 113);
  v35 = *(_QWORD *)(inited + 120);
  if (v34)
    v36 = 256;
  else
    v36 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 104), v36 | v33);
  if ((v37 & 1) != 0)
    goto LABEL_38;
  *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v38 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v38 = v32;
  *(_BYTE *)(v38 + 8) = v33;
  *(_BYTE *)(v38 + 9) = v34;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v35;
  v39 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v39, 1);
  v40 = v39 + 1;
  if (v12)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_QWORD *)(v1 + 16) = v40;
  v41 = *(_QWORD *)(inited + 128);
  v42 = *(unsigned __int8 *)(inited + 136);
  v43 = *(_BYTE *)(inited + 137);
  v44 = *(_QWORD *)(inited + 144);
  if (v43)
    v45 = 256;
  else
    v45 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 128), v45 | v42);
  if ((v46 & 1) != 0)
    goto LABEL_40;
  *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v47 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v47 = v41;
  *(_BYTE *)(v47 + 8) = v42;
  *(_BYTE *)(v47 + 9) = v43;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v44;
  v48 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v48, 1);
  v49 = v48 + 1;
  if (v12)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  *(_QWORD *)(v1 + 16) = v49;
  v50 = *(_QWORD *)(inited + 152);
  v51 = *(unsigned __int8 *)(inited + 160);
  v52 = *(_BYTE *)(inited + 161);
  v53 = *(_QWORD *)(inited + 168);
  if (v52)
    v54 = 256;
  else
    v54 = 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(inited + 152), v54 | v51);
  if ((v55 & 1) != 0)
    goto LABEL_42;
  *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v56 = *(_QWORD *)(v1 + 48) + 16 * result;
  *(_QWORD *)v56 = v50;
  *(_BYTE *)(v56 + 8) = v51;
  *(_BYTE *)(v56 + 9) = v52;
  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * result) = v53;
  v57 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v57, 1);
  v58 = v57 + 1;
  if (!v12)
  {
    *(_QWORD *)(v1 + 16) = v58;
    result = swift_bridgeObjectRelease();
    static String.StandardComparator.validAlgorithms = (_UNKNOWN *)v1;
    return result;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.StandardComparator.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.StandardComparator.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.StandardComparator.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEB0000000064657ALL;
  v5 = 0x696C61636F4C7369;
  if (v2 != 1)
  {
    v5 = 0x726564726FLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x736E6F6974706FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.StandardComparator.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696C61636F4C7369;
  if (*v0 != 1)
    v1 = 0x726564726FLL;
  if (*v0)
    return v1;
  else
    return 0x736E6F6974706FLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.StandardComparator.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of String.StandardComparator.CodingKeys.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.StandardComparator.CodingKeys()
{
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.StandardComparator.CodingKeys()
{
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t String.StandardComparator.order.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t String.StandardComparator.order.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*String.StandardComparator.order.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.StandardComparator.init(_:order:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *(_BYTE *)(result + 8);
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_BYTE *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 9) = a2 & 1;
  return result;
}

uint64_t String.StandardComparator.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::UInt v9;
  char v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  ValueMetadata *v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.StandardComparator.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v27) = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v25;
    if (one-time initialization token for validAlgorithms != -1)
    {
      v22 = v25;
      swift_once();
      v11 = v22;
    }
    if (*((_QWORD *)static String.StandardComparator.validAlgorithms + 2)
      && (!v11 ? (v12 = 0) : (v12 = 256),
          LODWORD(v24) = v11,
          specialized __RawDictionaryStorage.find<A>(_:)(v9, v12 & 0xFFFFFFFE | v10 & 1),
          (v13 & 1) != 0))
    {
      v14 = v5;
      v15 = v24;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
      *(_QWORD *)a2 = v9;
      *(_BYTE *)(a2 + 8) = v10 & 1;
      *(_BYTE *)(a2 + 9) = v15;
    }
    else
    {
      v16 = type metadata accessor for DecodingError();
      swift_allocError();
      v18 = v17;
      v24 = KeyedDecodingContainer.codingPath.getter();
      v25 = 0;
      v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      v25 = 0xD000000000000014;
      v26 = 0x8000000182308620;
      v27 = &type metadata for String.StandardComparator;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.StandardComparator.Type);
      v19._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 0xD00000000000001ALL;
      v20._object = (void *)0x8000000182308640;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC458], v16);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator.CodingKeys, &type metadata for String.StandardComparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator.CodingKeys, &type metadata for String.StandardComparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator.CodingKeys, &type metadata for String.StandardComparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator.CodingKeys, &type metadata for String.StandardComparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SortOrder and conformance SortOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortOrder and conformance SortOrder;
  if (!lazy protocol witness table cache variable for type SortOrder and conformance SortOrder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for SortOrder, &type metadata for SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortOrder and conformance SortOrder);
  }
  return result;
}

NSComparisonResult __swiftcall String.StandardComparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  unint64_t *v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSComparisonResult result;
  uint64_t v10;
  uint64_t v11;
  NSComparisonResult v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  NSComparisonResult v32;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  NSComparisonResult v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int v55;

  v3 = *v2;
  v4 = *((unsigned __int8 *)v2 + 9);
  if (*((_BYTE *)v2 + 8) != 1)
  {
    swift_bridgeObjectRetain();
    v17 = Substring.init<A>(_:)();
    v19 = v18;
    v21 = v20;
    v23 = v22;
    swift_bridgeObjectRetain();
    v24 = Substring.init<A>(_:)();
    v28 = v24;
    v29 = v25;
    v30 = v27;
    if (!v3)
    {
      if (v21 == v26 && v23 == v27 && v17 >> 16 == v24 >> 16 && v19 >> 16 == v25 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v32 = NSOrderedDescending;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v4)
            return 1;
          else
            return -1;
        }
        v48 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v48 & 1) != 0)
        {
LABEL_56:
          v49 = NSOrderedDescending;
          if (v32 == NSOrderedDescending)
            v50 = -1;
          else
            v50 = v32;
          if (v32 != NSOrderedAscending)
            v49 = v50;
          if ((v4 & 1) != 0)
            return v49;
          else
            return v32;
        }
      }
      v32 = NSOrderedSame;
      goto LABEL_56;
    }
    if ((v3 & 2) != 0)
    {
      v36 = v24;
      v37 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52 = v21;
      v31 = v19;
      v38 = v37;
      v28 = v36;
      v32 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v36, v29, v38, v30, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v17, v19, v52, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v32)
        goto LABEL_13;
    }
    else
    {
      v51 = v21;
      v31 = v19;
      v32 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v24, v25, v26, v27, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v17, v19, v51, v23);
      if (v32)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = NSOrderedSame;
      goto LABEL_56;
    }
    v39 = v31 >> 14;
    v40 = v17 >> 14;
    if (v17 >> 14 >= v39 || v29 >> 14 <= v28 >> 14)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v40 == v39)
      {
        if ((v28 ^ v29) >> 14)
          v32 = NSOrderedAscending;
        else
          v32 = NSOrderedSame;
      }
      else
      {
        v32 = NSOrderedDescending;
      }
      goto LABEL_56;
    }
    v54 = v29 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = Substring.UnicodeScalarView.subscript.getter();
    v42 = Substring.UnicodeScalarView.subscript.getter();
    if (v41 == v42)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      v40 = v17 >> 14;
      if (v17 >> 14 >= v39 || v54 <= v28 >> 14)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      v43 = Substring.UnicodeScalarView.subscript.getter();
      v44 = Substring.UnicodeScalarView.subscript.getter();
      if (v43 == v44)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          v40 = v17 >> 14;
          if (v17 >> 14 >= v39 || v54 <= v28 >> 14)
            goto LABEL_50;
          v53 = Substring.UnicodeScalarView.subscript.getter();
          v45 = Substring.UnicodeScalarView.subscript.getter();
          v46 = v53;
          if (v53 != v45)
          {
            v47 = v45;
            goto LABEL_47;
          }
        }
      }
      v47 = v44;
    }
    else
    {
      v47 = v42;
      v46 = v41;
LABEL_47:
      v43 = v46;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v43 >= v47)
      v32 = (unint64_t)(v47 < v43);
    else
      v32 = NSOrderedAscending;
    goto LABEL_56;
  }
  v55 = *((unsigned __int8 *)v2 + 9);
  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v6 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  v11 = v10 - result;
  if (!__OFSUB__(v10, result))
  {
    v12 = result;
    ObjectType = swift_getObjectType();
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 496);
    swift_unknownObjectRetain();
    v15 = (void *)v14(ObjectType, v6);
    swift_unknownObjectRelease();
    v16 = objc_msgSend(v7, sel_compare_options_range_locale_, v8, v3, v12, v11, v15);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v55)
    {
      if (v16 == (id)-1)
      {
        return 1;
      }
      else if (v16 == (id)1)
      {
        return -1;
      }
    }
    return (NSComparisonResult)v16;
  }
  __break(1u);
  return result;
}

void String.StandardComparator.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt v2;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t String.StandardComparator.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.StandardComparator.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v1 + 8);
  v11 = *(unsigned __int8 *)(v1 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.StandardComparator.CodingKeys and conformance String.StandardComparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v8 = v11;
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = v8;
    v13 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL static String.StandardComparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(_QWORD *)a1 != *(_QWORD *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

Swift::Int String.StandardComparator.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.StandardComparator(uint64_t *a1, Swift::String *a2)
{
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v2 = (void *)a1[1];
  v3 = *a2;
  v4._countAndFlagsBits = *a1;
  v4._object = v2;
  return String.StandardComparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.StandardComparator()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.StandardComparator(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.StandardComparator())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.StandardComparator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.StandardComparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.StandardComparator(_QWORD *a1)
{
  return String.StandardComparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.StandardComparator()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance String.StandardComparator()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt v2;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 9);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.StandardComparator()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String.StandardComparator(uint64_t a1, uint64_t a2)
{
  return ((*(_QWORD *)a1 != *(_QWORD *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.Comparator.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.Comparator.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance String.Comparator.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance String.Comparator.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String.Comparator.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x656C61636F6CLL;
  if (v2 != 1)
  {
    v5 = 0x726564726FLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x736E6F6974706FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.Comparator.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C61636F6CLL;
  if (*v0 != 1)
    v1 = 0x726564726FLL;
  if (*v0)
    return v1;
  else
    return 0x736E6F6974706FLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.Comparator.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of String.Comparator.CodingKeys.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.Comparator.CodingKeys()
{
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.Comparator.CodingKeys()
{
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t String.Comparator.options.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t String.Comparator.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

uint64_t String.Comparator.order.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t String.Comparator.order.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*String.Comparator.order.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 String.Comparator.init(options:locale:order:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __n128 result;

  *(_QWORD *)a4 = a1;
  result = *a2;
  *(__n128 *)(a4 + 8) = *a2;
  *(_BYTE *)(a4 + 24) = a3 & 1;
  return result;
}

uint64_t String.Comparator.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 9);
  if (one-time initialization token for cache != -1)
    swift_once();
  result = LocaleCache.current.getter();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t String.Comparator.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.Comparator.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v15) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v17 = 1;
  lazy protocol witness table accessor for type Locale? and conformance <A> A?(&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, (uint64_t (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale, MEMORY[0x1E0DEE9A0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10 = v15;
  v14 = v16;
  v17 = 2;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v15;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_unknownObjectRelease();
}

NSComparisonResult __swiftcall String.Comparator.compare(_:_:)(Swift::String a1, Swift::String a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSComparisonResult result;
  uint64_t v8;
  uint64_t v9;
  NSComparisonResult v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  NSComparisonResult v14;
  NSComparisonResult v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int i;
  unsigned int v42;
  char v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;

  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 16);
  v51 = *(_BYTE *)(v2 + 24);
  if (!*(_QWORD *)(v2 + 8))
  {
    swift_bridgeObjectRetain();
    v16 = Substring.init<A>(_:)();
    v18 = v17;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRetain();
    v23 = Substring.init<A>(_:)();
    v27 = v23;
    v28 = v24;
    v29 = v26;
    if (!v3)
    {
      v30 = v16 >> 16;
      v31 = v18 >> 16;
      if (v20 == v25 && v22 == v26 && v30 == v23 >> 16 && v31 == v24 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v14 = NSOrderedDescending;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = NSOrderedAscending;
          goto LABEL_4;
        }
        v43 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
          goto LABEL_4;
      }
      v14 = NSOrderedSame;
      goto LABEL_4;
    }
    if ((v3 & 2) != 0)
    {
      v44 = (v3 & 0x200) != 0;
      v48 = (v3 >> 6) & 1;
      v47 = v3 & 1;
      v45 = (v3 >> 8) & 1;
      v35 = (v3 >> 7) & 1;
      v36 = v3;
      v3 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = v3;
      LOWORD(v3) = v36;
      v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v27, v28, v37, v29, v45, v35, v47, v48, v44, v16, v18, v20, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
        goto LABEL_15;
    }
    else
    {
      v14 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v23, v24, v25, v26, (v3 >> 8) & 1, (v3 >> 7) & 1, v3 & 1, (v3 >> 6) & 1, (v3 & 0x200) != 0, v16, v18, v20, v22);
      if (v14)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    if ((v3 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = NSOrderedSame;
      goto LABEL_4;
    }
    v38 = v18 >> 14;
    v39 = v16 >> 14;
    if (v16 >> 14 >= v18 >> 14 || v28 >> 14 <= v27 >> 14)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39 == v38)
      {
        if ((v27 ^ v28) >> 14)
          v14 = NSOrderedAscending;
        else
          v14 = NSOrderedSame;
      }
      else
      {
        v14 = NSOrderedDescending;
      }
      goto LABEL_4;
    }
    v46 = v28 >> 14;
    v49 = v18 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = Substring.UnicodeScalarView.subscript.getter();
    i = Substring.UnicodeScalarView.subscript.getter();
    if (v40 == i)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      v39 = v16 >> 14;
      if (v16 >> 14 >= v49 || v46 <= v27 >> 14)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = v18 >> 14;
        goto LABEL_47;
      }
      v40 = Substring.UnicodeScalarView.subscript.getter();
      for (i = Substring.UnicodeScalarView.subscript.getter(); v40 == i; i = Substring.UnicodeScalarView.subscript.getter())
      {
        Substring.UnicodeScalarView.formIndex(after:)();
        Substring.UnicodeScalarView.formIndex(after:)();
        v39 = v16 >> 14;
        if (v16 >> 14 >= v49 || v46 <= v27 >> 14)
          goto LABEL_46;
        v40 = Substring.UnicodeScalarView.subscript.getter();
      }
    }
    v42 = i;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v40 >= v42)
      v14 = (unint64_t)(v42 < v40);
    else
      v14 = NSOrderedAscending;
    goto LABEL_4;
  }
  v50 = *(_QWORD *)v2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_unknownObjectRetain();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  v9 = v8 - result;
  if (__OFSUB__(v8, result))
  {
    __break(1u);
    return result;
  }
  v10 = result;
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 496);
  swift_unknownObjectRetain();
  v13 = (void *)v12(ObjectType, v4);
  swift_unknownObjectRelease();
  v14 = (NSComparisonResult)objc_msgSend(v5, sel_compare_options_range_locale_, v6, v50, v10, v9, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

LABEL_4:
  if ((v51 & 1) != 0)
  {
    if (v14 == NSOrderedDescending)
      v15 = NSOrderedAscending;
    else
      v15 = v14;
    if (v14 == NSOrderedAscending)
      return 1;
    else
      return v15;
  }
  return v14;
}

void String.Comparator.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  void *v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[152];

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(*(_QWORD *)v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    if ((v7(ObjectType, v4) & 1) != 0)
    {
      v8 = 1;
LABEL_7:
      Hasher._combine(_:)(v8);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
    swift_unknownObjectRetain();
    v9(v62, ObjectType, v4);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
    {
      v8 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      v10 = 0;
    }
    else
    {
      v10 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    v11 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v47)
            goto LABEL_17;
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          v14 = v48;
          if (!v48)
            goto LABEL_18;
          goto LABEL_25;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v14 = v48;
        if (!v48)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          v15 = v49;
          if (!v49)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_27:
          v17 = v50;
          v18 = v51;
          v20 = v52;
          v19 = v53;
          v21 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v22 = v18;
            v23 = v20;
            v24 = v19;
            v25 = v21;
            v26 = v17;
            _CFObject.hash(into:)();
            v42 = v17;
            if (v18)
              goto LABEL_29;
          }
          else
          {
            Hasher._combine(_:)(0);
            v31 = v21;
            v32 = v18;
            v33 = v20;
            v34 = v19;
            v42 = 0;
            if (v18)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v27 = v18;
              _CFObject.hash(into:)();

              if (v20)
                goto LABEL_30;
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v20;
            _CFObject.hash(into:)();

            if (v19)
              goto LABEL_31;
            goto LABEL_36;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
LABEL_37:
            Hasher._combine(_:)(0);
            v30 = 0;
LABEL_38:

            v35 = v55;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              v36 = v56;
              if (v56)
                goto LABEL_40;
            }
            else
            {
              Hasher._combine(_:)(0);
              v36 = v56;
              if (v56)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v60 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v61 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v41 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }
LABEL_44:
                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }
            Hasher._combine(_:)(0);
            if (v57)
              goto LABEL_41;
            goto LABEL_44;
          }
LABEL_36:
          Hasher._combine(_:)(0);
          if (v21)
            goto LABEL_32;
          goto LABEL_37;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        v15 = v49;
        if (!v49)
          goto LABEL_19;
        goto LABEL_26;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      v16 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      v16 = v44;
    }
    outlined retain of LocalePreferences(v16);
    if (!v46)
      goto LABEL_16;
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v5);
}

uint64_t String.Comparator.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.Comparator.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = v8;
  v15 = *(unsigned __int8 *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v9 = v15;
    v13 = v12;
    v14 = v11;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?, (uint64_t (*)(void))lazy protocol witness table accessor for type Locale and conformance Locale, MEMORY[0x1E0DEE988]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = v9;
    v16 = 2;
    lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int String.Comparator.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  _QWORD v61[18];
  _BYTE v62[144];
  _BYTE v63[144];
  _BYTE v64[80];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if ((v6(ObjectType, v3) & 1) != 0)
    {
      v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_58:
      swift_unknownObjectRelease_n();
      goto LABEL_59;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v61, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
    {
      v7 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      v9 = 0;
    }
    else
    {
      v9 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v9);
    v10 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v46)
            goto LABEL_17;
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          v13 = v47;
          if (!v47)
            goto LABEL_18;
          goto LABEL_25;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v13 = v47;
        if (!v47)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          v14 = v48;
          if (!v48)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
          swift_bridgeObjectRelease();
LABEL_27:
          v17 = v49;
          v16 = v50;
          v19 = v51;
          v18 = v52;
          v20 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v21 = v16;
            v22 = v19;
            v23 = v18;
            v24 = v20;
            v25 = v17;
            _CFObject.hash(into:)();
            if (v16)
              goto LABEL_29;
          }
          else
          {
            Hasher._combine(_:)(0);
            v30 = v20;
            v31 = v16;
            v32 = v19;
            v33 = v18;
            if (v16)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v26 = v16;
              _CFObject.hash(into:)();

              if (v19)
                goto LABEL_30;
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v27 = v19;
            _CFObject.hash(into:)();

            if (v18)
              goto LABEL_31;
            goto LABEL_36;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v18;
            _CFObject.hash(into:)();

            if (v20)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v29 = v20;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
LABEL_37:
            Hasher._combine(_:)(0);
            v29 = 0;
LABEL_38:

            v34 = v54;
            if (v34)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
              swift_bridgeObjectRelease();
              v35 = v55;
              if (v55)
                goto LABEL_40;
            }
            else
            {
              Hasher._combine(_:)(0);
              v35 = v55;
              if (v55)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v36 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v59 == 2)
                  {
                    v38 = 0;
                  }
                  else
                  {
                    v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v38);
                  if (v60 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    v39 = v40;
                  }
                  Hasher._combine(_:)(v39);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }
LABEL_44:
                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }
            Hasher._combine(_:)(0);
            if (v56)
              goto LABEL_41;
            goto LABEL_44;
          }
LABEL_36:
          Hasher._combine(_:)(0);
          if (v20)
            goto LABEL_32;
          goto LABEL_37;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
        swift_bridgeObjectRelease();
        v14 = v48;
        if (!v48)
          goto LABEL_19;
        goto LABEL_26;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      v15 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      v15 = v43;
    }
    outlined retain of LocalePreferences(v15);
    if (!v45)
      goto LABEL_16;
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
LABEL_59:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

NSComparisonResult protocol witness for SortComparator.compare(_:_:) in conformance String.Comparator(uint64_t *a1, Swift::String *a2)
{
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v2 = (void *)a1[1];
  v3 = *a2;
  v4._countAndFlagsBits = *a1;
  v4._object = v2;
  return String.Comparator.compare(_:_:)(v4, v3);
}

uint64_t protocol witness for SortComparator.order.getter in conformance String.Comparator()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t protocol witness for SortComparator.order.setter in conformance String.Comparator(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance String.Comparator())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.Comparator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.Comparator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.Comparator(_QWORD *a1)
{
  return String.Comparator.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Comparator()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[80];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
    swift_unknownObjectRetain_n();
    if ((v6(ObjectType, v3) & 1) != 0)
    {
      v7 = 1;
LABEL_7:
      Hasher._combine(_:)(v7);
LABEL_57:
      swift_unknownObjectRelease_n();
      goto LABEL_58;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v8(v59, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
    {
      v7 = 0;
      goto LABEL_7;
    }
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
    Hasher._combine(_:)(1u);
    if (v41 == 2)
    {
      v9 = 0;
    }
    else
    {
      v9 = v41 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v9);
    v10 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v12 = v10 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v44)
            goto LABEL_17;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          v13 = v45;
          if (!v45)
            goto LABEL_18;
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v13 = v45;
        if (!v45)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          v14 = v46;
          if (!v46)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_26;
          }
LABEL_25:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
          swift_bridgeObjectRelease();
LABEL_26:
          v16 = v47;
          v15 = v48;
          v18 = v49;
          v17 = v50;
          v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v20 = v15;
            v21 = v18;
            v22 = v17;
            v23 = v19;
            v24 = v16;
            _CFObject.hash(into:)();
            if (v15)
              goto LABEL_28;
          }
          else
          {
            Hasher._combine(_:)(0);
            v29 = v19;
            v30 = v15;
            v31 = v18;
            v32 = v17;
            if (v15)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v25 = v15;
              _CFObject.hash(into:)();

              if (v18)
                goto LABEL_29;
              goto LABEL_34;
            }
          }
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_29:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v26 = v18;
            _CFObject.hash(into:)();

            if (v17)
              goto LABEL_30;
            goto LABEL_35;
          }
LABEL_34:
          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_37;
            }
LABEL_36:
            Hasher._combine(_:)(0);
            v28 = 0;
LABEL_37:

            v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
              swift_bridgeObjectRelease();
              v34 = v53;
              if (v53)
                goto LABEL_39;
            }
            else
            {
              Hasher._combine(_:)(0);
              v34 = v53;
              if (v53)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v57 == 2)
                  {
                    v37 = 0;
                  }
                  else
                  {
                    v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    v38 = 0;
                  }
                  else
                  {
                    v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    v38 = v39;
                  }
                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_57;
                }
LABEL_43:
                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }
            Hasher._combine(_:)(0);
            if (v54)
              goto LABEL_40;
            goto LABEL_43;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19)
            goto LABEL_31;
          goto LABEL_36;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
        swift_bridgeObjectRelease();
        v14 = v46;
        if (!v46)
          goto LABEL_19;
        goto LABEL_25;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    outlined retain of LocalePreferences(&v41);
    if (!v43)
      goto LABEL_16;
    goto LABEL_22;
  }
  Hasher._combine(_:)(0);
LABEL_58:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(833, a1);
}

uint64_t static SortComparator<>.localized.getter@<X0>(uint64_t a1@<X8>)
{
  return static SortComparator<>.localizedStandard.getter(0, a1);
}

uint64_t static SortComparator<>.localizedStandard.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  result = LocaleCache.current.getter();
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v37 = a3;
  v11 = type metadata accessor for Unicode.Scalar.Properties();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v38 = a4;
  v36 = a4 >> 14;
  if (a4 >> 14 > v15 >> 14)
  {
    v33 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v34 = a6 & 0xFFFFFFFFFFFFFFLL;
    v16 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000) == 0)
      LOBYTE(v16) = 1;
    v17 = 4 << v16;
    v32[0] = a5 & 0xFFFFFFFFFFFFLL;
    v32[1] = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0)
      v18 = HIBYTE(a6) & 0xF;
    else
      v18 = a5 & 0xFFFFFFFFFFFFLL;
    v35 = v18;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(v15, v37, v38, a5, a6);
      if ((a6 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a6 & 0x2000000000000000) != 0)
        {
          v39 = a5;
          v40 = v34;
        }
        else if ((a5 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      Unicode.Scalar.properties.getter();
      v19 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
      v21 = v20;
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      if ((v21 & 1) != 0)
        return a2;
      if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        return result;
      }
      if (v19 <= -9.22337204e18)
        goto LABEL_44;
      if (v19 >= 9.22337204e18)
        goto LABEL_45;
      v23 = 10 * a2;
      if ((unsigned __int128)(a2 * (__int128)10) >> 64 != (10 * a2) >> 63)
        return a2;
      v24 = v23 + (uint64_t)v19;
      if (__OFADD__(v23, (uint64_t)v19))
        return a2;
      v25 = *a1;
      v26 = *a1 & 0xC;
      if (v26 != v17 && (v25 & 1) != 0)
        break;
      if (v26 == v17)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a5, a6);
        v25 = result;
      }
      if (v35 <= v25 >> 16)
        goto LABEL_47;
      if ((v25 & 1) != 0)
        goto LABEL_31;
      v25 = v25 & 0xC | _StringGuts.scalarAlignSlow(_:)(v25, a5, a6) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_32:
        v27 = v25 >> 16;
        if ((a6 & 0x2000000000000000) != 0)
        {
          v39 = a5;
          v40 = v34;
          v29 = *((unsigned __int8 *)&v39 + v27);
        }
        else
        {
          v28 = v33;
          if ((a5 & 0x1000000000000000) == 0)
            v28 = _StringObject.sharedUTF8.getter();
          v29 = *(unsigned __int8 *)(v28 + v27);
        }
        v30 = (char)v29;
        v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0)
          LOBYTE(v31) = 1;
        v15 = ((v27 + v31) << 16) | 5;
        goto LABEL_9;
      }
LABEL_8:
      v15 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = v15;
      a2 = v24;
      if (v36 <= v15 >> 14)
        return a2;
    }
    if (v35 <= v25 >> 16)
      goto LABEL_46;
LABEL_31:
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_8;
  }
  return a2;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  v4 = 4 * v3;
  if ((unint64_t)(4 * v3) > *(_QWORD *)result >> 14)
  {
    v5 = (_QWORD *)result;
    do
    {
      v6 = String.subscript.getter();
      v8 = Character.isExtendCharacter.getter(v6, v7);
      result = swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
        break;
      result = String.index(after:)();
      *v5 = result;
    }
    while (v4 > result >> 14);
  }
  return result;
}

{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v3 = a3 >> 14;
  if (a3 >> 14 > *(_QWORD *)result >> 14)
  {
    v4 = (_QWORD *)result;
    v5 = Substring.subscript.getter();
    v7 = Character.isExtendCharacter.getter(v5, v6);
    result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
      do
      {
        result = Substring.index(after:)();
        v8 = result;
        if (v3 <= result >> 14)
          break;
        v9 = Substring.subscript.getter();
        v11 = Character.isExtendCharacter.getter(v9, v10);
        result = swift_bridgeObjectRelease();
      }
      while ((v11 & 1) != 0);
      *v4 = v8;
    }
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a3) & 0xF;
  else
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  result = *a1;
  if (4 * v4 > result >> 14)
  {
    v8 = (a2 >> 59) & 1;
    if ((a3 & 0x1000000000000000) == 0)
      LOBYTE(v8) = 1;
    v9 = 4 << v8;
    v20 = a3 & 0xFFFFFFFFFFFFFFLL;
    v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((result & 0xC) == v9 || (result & 1) == 0)
      {
        if ((result & 0xC) == v9)
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
        if (result >> 16 >= v4)
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
        if ((result & 1) == 0)
          _StringGuts.scalarAlignSlow(_:)(result, a2, a3);
      }
      else if (result >> 16 >= v4)
      {
        goto LABEL_53;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a3 & 0x2000000000000000) != 0)
        {
          v21 = a2;
          v22 = v20;
        }
        else if ((a2 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        result = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(result) > 0xEu)
        return result;
      v12 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      if (!v12 || ((*(unsigned __int8 *)(v12 + ((unsigned __int16)result >> 3)) >> (result & 7)) & 1) == 0)
        return result;
      v13 = *a1;
      v14 = *a1 & 0xC;
      if (v14 != v9 && (v13 & 1) != 0)
        break;
      if (v14 == v9)
      {
        v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a2, a3);
        if (v4 <= v13 >> 16)
          goto LABEL_55;
      }
      else if (v4 <= v13 >> 16)
      {
        goto LABEL_55;
      }
      if ((v13 & 1) != 0)
        goto LABEL_37;
      v13 = v13 & 0xC | _StringGuts.scalarAlignSlow(_:)(v13, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a3 & 0x1000000000000000) == 0)
      {
LABEL_38:
        v15 = v13 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          v21 = a2;
          v22 = v20;
          v17 = *((unsigned __int8 *)&v21 + v15);
        }
        else
        {
          v16 = v10;
          if ((a2 & 0x1000000000000000) == 0)
            v16 = _StringObject.sharedUTF8.getter();
          v17 = *(unsigned __int8 *)(v16 + v15);
        }
        v18 = (char)v17;
        v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0)
          LOBYTE(v19) = 1;
        result = ((v15 + v19) << 16) | 5;
        goto LABEL_9;
      }
LABEL_8:
      result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = result;
      if (4 * v4 <= result >> 14)
        return result;
    }
    if (v4 <= v13 >> 16)
      goto LABEL_54;
LABEL_37:
    if ((a3 & 0x1000000000000000) == 0)
      goto LABEL_38;
    goto LABEL_8;
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v6;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3 >> 14;
  result = *a1;
  if (a3 >> 14 > result >> 14)
  {
    v24 = a5 & 0xFFFFFFFFFFFFFFLL;
    v12 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v13 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v13) = 1;
    v14 = 4 << v13;
    if ((a5 & 0x2000000000000000) != 0)
      v15 = HIBYTE(a5) & 0xF;
    else
      v15 = a4 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      _StringGuts.validateScalarIndex(_:in:)(result, a2, a3, a4, a5);
      if ((a5 & 0x1000000000000000) != 0)
      {
        result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v25 = a4;
          v26 = v24;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        result = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(result) > 0xEu)
        return result;
      v16 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_0 + BYTE2(result));
      if (!v16 || ((*(unsigned __int8 *)(v16 + ((unsigned __int16)result >> 3)) >> (result & 7)) & 1) == 0)
        return result;
      v17 = *a1;
      v18 = *a1 & 0xC;
      if (v18 != v14 && (v17 & 1) != 0)
        break;
      if (v18 == v14)
      {
        v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(*a1, a4, a5);
        if (v15 <= v17 >> 16)
          goto LABEL_40;
      }
      else if (v15 <= v17 >> 16)
      {
        goto LABEL_40;
      }
      if ((v17 & 1) != 0)
        goto LABEL_26;
      v17 = v17 & 0xC | _StringGuts.scalarAlignSlow(_:)(v17, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v19 = v17 >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          v25 = a4;
          v26 = v24;
          v21 = *((unsigned __int8 *)&v25 + v19);
        }
        else
        {
          v20 = v12;
          if ((a4 & 0x1000000000000000) == 0)
            v20 = _StringObject.sharedUTF8.getter();
          v21 = *(unsigned __int8 *)(v20 + v19);
        }
        v22 = (char)v21;
        v23 = __clz(v21 ^ 0xFF) - 24;
        if (v22 >= 0)
          LOBYTE(v23) = 1;
        result = ((v19 + v23) << 16) | 5;
        goto LABEL_8;
      }
LABEL_7:
      result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_8:
      *a1 = result;
      if (v6 <= result >> 14)
        return result;
    }
    if (v15 <= v17 >> 16)
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }
LABEL_26:
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_27;
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  double v33;
  char v34;
  char v35;
  uint64_t result;
  char *v37;
  double v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _QWORD v114[5];
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;

  v137 = a8;
  v128 = a7;
  v140 = a6;
  v127 = a5;
  v18 = a12;
  v17 = a13;
  v119 = type metadata accessor for Unicode.Scalar.Properties();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v116 = (char *)v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v117 = (char *)v114 - v21;
  v149 = a1;
  v150 = a10;
  v146 = 0;
  v147 = 0xE000000000000000;
  v148 = 15;
  v143 = 0;
  v144 = 0xE000000000000000;
  v130 = a11;
  v145 = 15;
  v134 = a10;
  v22 = a10;
  v136 = a1;
  v138 = 0;
  v139 = a11 >> 14;
  v129 = a10 >> 14;
  if (a10 >> 14 < a11 >> 14)
  {
    v23 = v136;
    v135 = a2 >> 14;
    if (a2 >> 14 > v136 >> 14)
    {
      v138 = 0;
      v114[4] = HIBYTE(a13) & 0xF;
      v126 = a9;
      v123 = a13 & 0xFFFFFFFFFFFFFFLL;
      v122 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v114[3] = a12 & 0xFFFFFFFFFFFFLL;
      v114[2] = HIBYTE(a4) & 0xF;
      v121 = a4 & 0xFFFFFFFFFFFFFFLL;
      v120 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v114[1] = a3 & 0xFFFFFFFFFFFFLL;
      v125 = v127 | v140 | v128;
      v22 = v134;
      v115 = a2;
      v132 = a13;
      v133 = a3;
      v131 = a12;
      v124 = a4;
      while (1)
      {
        v24 = HIBYTE(v147) & 0xF;
        if ((v147 & 0x2000000000000000) == 0)
          v24 = v146 & 0xFFFFFFFFFFFFLL;
        if (v24)
        {
          v25 = specialized _StringCompareOptionsIterableBuffer.current.getter(v146, v147, v148);
          specialized _StringCompareOptionsIterableBuffer.advance()();
        }
        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v22, v134, v130, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
            v26 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v17 & 0x2000000000000000) != 0)
            {
              v141 = v18;
              v142 = v123;
            }
            else if ((v18 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            v26 = _decodeScalar(_:startingAt:)();
          }
          v25 = v26;
        }
        v27 = HIBYTE(v144) & 0xF;
        if ((v144 & 0x2000000000000000) == 0)
          v27 = v143 & 0xFFFFFFFFFFFFLL;
        if (v27)
        {
          v28 = specialized _StringCompareOptionsIterableBuffer.current.getter(v143, v144, v145);
          specialized _StringCompareOptionsIterableBuffer.advance()();
          if ((v137 & 1) == 0)
            break;
        }
        else
        {
          _StringGuts.validateScalarIndex(_:in:)(v23, v136, a2, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            v29 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((a4 & 0x2000000000000000) != 0)
            {
              v141 = a3;
              v142 = v121;
            }
            else if ((a3 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            v29 = _decodeScalar(_:startingAt:)();
          }
          v28 = v29;
          if ((v137 & 1) == 0)
            break;
        }
        v30 = v146 & 0xFFFFFFFFFFFFLL;
        if ((v147 & 0x2000000000000000) != 0)
          v30 = HIBYTE(v147) & 0xF;
        if (v30)
          break;
        v31 = v143 & 0xFFFFFFFFFFFFLL;
        if ((v144 & 0x2000000000000000) != 0)
          v31 = HIBYTE(v144) & 0xF;
        if (v31)
          break;
        v32 = v117;
        Unicode.Scalar.properties.getter();
        v33 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        v35 = v34;
        v114[0] = *(_QWORD *)(v118 + 8);
        result = ((uint64_t (*)(char *, uint64_t))v114[0])(v32, v119);
        if ((v35 & 1) != 0)
          break;
        if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
          return result;
        }
        if (v33 <= -9.22337204e18)
          goto LABEL_196;
        if (v33 >= 9.22337204e18)
          goto LABEL_197;
        v37 = v116;
        Unicode.Scalar.properties.getter();
        v38 = COERCE_DOUBLE(Unicode.Scalar.Properties.numericValue.getter());
        v40 = v39;
        result = ((uint64_t (*)(char *, uint64_t))v114[0])(v37, v119);
        if ((v40 & 1) != 0)
          break;
        if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
          goto LABEL_198;
        if (v38 <= -9.22337204e18)
          goto LABEL_199;
        if (v38 >= 9.22337204e18)
          goto LABEL_200;
        v41 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(&v150, 0, v134, v130, v18, v17);
        v42 = specialized _StringCompareOptionsIterable.consumeNumbers(from:initialValue:)(&v149, 0, v136, a2, a3, a4);
        if (v41 != v42)
        {
          if (v41 < v42)
            v111 = -1;
          else
            v111 = v42 < v41;
          goto LABEL_182;
        }
        if ((v126 & 1) != 0)
        {
          v43 = String.UnicodeScalarView.distance(from:to:)(v134, v150, v18, v17);
          v44 = String.UnicodeScalarView.distance(from:to:)(v136, v149, a3, a4);
          if (v43 != v44)
          {
            if (v43 < v44)
              v109 = -1;
            else
              v109 = v44 < v43;
            v138 = v109;
          }
        }
LABEL_153:
        v22 = v150;
        if (v139 > v150 >> 14)
        {
          v23 = v149;
          if (v135 > v149 >> 14)
            continue;
        }
        goto LABEL_168;
      }
      if ((v140 & 1) != 0 && v129 < v150 >> 14)
      {
        v45 = v146 & 0xFFFFFFFFFFFFLL;
        if ((v147 & 0x2000000000000000) != 0)
          v45 = HIBYTE(v147) & 0xF;
        if (v45)
        {
          v46 = 0;
        }
        else
        {
          v47 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v25), 5);
          v46 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v25, v47, 0x700030005);
          if (v46)
            v25 = v28;
          else
            v25 = v25;
        }
        v48 = v143 & 0xFFFFFFFFFFFFLL;
        if ((v144 & 0x2000000000000000) != 0)
          v48 = HIBYTE(v144) & 0xF;
        if (!v48)
        {
          v49 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v28), 5);
          if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v28, v49, 0x700030005))
          {
            if (!v46)
              Substring.UnicodeScalarView.formIndex(before:)();
            goto LABEL_117;
          }
        }
        if (v46)
          Substring.UnicodeScalarView.formIndex(before:)();
      }
      if ((_DWORD)v25 == (_DWORD)v28)
      {
LABEL_117:
        v88 = v146;
        v87 = v147;
        v89 = HIBYTE(v147) & 0xF;
        if ((v147 & 0x2000000000000000) == 0)
          v89 = v146 & 0xFFFFFFFFFFFFLL;
        if (v89 && v148 >> 14 == 4 * v89)
        {
          swift_bridgeObjectRelease();
          v88 = 0;
          v87 = 0xE000000000000000;
          v146 = 0;
          v147 = 0xE000000000000000;
          v148 = 15;
        }
        v91 = v143;
        v90 = v144;
        v92 = HIBYTE(v144) & 0xF;
        if ((v144 & 0x2000000000000000) == 0)
          v92 = v143 & 0xFFFFFFFFFFFFLL;
        if (v92)
        {
          v18 = v131;
          v17 = v132;
          if (v145 >> 14 == 4 * v92)
          {
            swift_bridgeObjectRelease();
            v91 = 0;
            v90 = 0xE000000000000000;
            v143 = 0;
            v144 = 0xE000000000000000;
            v145 = 15;
          }
        }
        else
        {
          v18 = v131;
          v17 = v132;
        }
        v93 = HIBYTE(v87) & 0xF;
        if ((v87 & 0x2000000000000000) == 0)
          v93 = v88 & 0xFFFFFFFFFFFFLL;
        a3 = v133;
        if (!v93)
        {
          v94 = _StringGuts.validateScalarIndex(_:)(v150, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
            v100 = String.UnicodeScalarView._foreignIndex(after:)();
          }
          else
          {
            v95 = v94 >> 16;
            if ((v17 & 0x2000000000000000) != 0)
            {
              v141 = v18;
              v142 = v123;
              v97 = *((unsigned __int8 *)&v141 + v95);
            }
            else
            {
              v96 = v122;
              if ((v18 & 0x1000000000000000) == 0)
                v96 = _StringObject.sharedUTF8.getter();
              v97 = *(unsigned __int8 *)(v96 + v95);
            }
            v98 = (char)v97;
            v99 = __clz(v97 ^ 0xFF) - 24;
            if (v98 >= 0)
              LOBYTE(v99) = 1;
            v100 = ((v95 + v99) << 16) | 5;
          }
          v150 = v100;
        }
        v101 = HIBYTE(v90) & 0xF;
        if ((v90 & 0x2000000000000000) == 0)
          v101 = v91 & 0xFFFFFFFFFFFFLL;
        if (!v101)
        {
          v102 = _StringGuts.validateScalarIndex(_:)(v149, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            v149 = String.UnicodeScalarView._foreignIndex(after:)();
          }
          else
          {
            v103 = v102 >> 16;
            if ((a4 & 0x2000000000000000) != 0)
            {
              v141 = a3;
              v142 = v121;
              v105 = *((unsigned __int8 *)&v141 + v103);
            }
            else
            {
              v104 = v120;
              if ((a3 & 0x1000000000000000) == 0)
                v104 = _StringObject.sharedUTF8.getter();
              v105 = *(unsigned __int8 *)(v104 + v103);
            }
            v106 = (char)v105;
            v107 = __clz(v105 ^ 0xFF) - 24;
            if (v106 >= 0)
              LOBYTE(v107) = 1;
            v149 = ((v103 + v107) << 16) | 5;
          }
        }
        goto LABEL_153;
      }
      if ((v125 & 1) == 0)
      {
        if (v25 < v28)
          v111 = -1;
        else
          v111 = v28 < v25;
LABEL_182:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v111;
      }
      if ((v126 & 1) != 0 && !v138)
      {
        if (v25 >= v28)
          v50 = v28 < v25;
        else
          v50 = -1;
        v138 = v50;
      }
      v52 = v146;
      v51 = v147;
      v53 = v147 & 0x2000000000000000;
      v54 = HIBYTE(v147) & 0xF;
      v55 = v146 & 0xFFFFFFFFFFFFLL;
      if ((v147 & 0x2000000000000000) != 0)
        v56 = HIBYTE(v147) & 0xF;
      else
        v56 = v146 & 0xFFFFFFFFFFFFLL;
      if (v56)
      {
        v57 = v147;
      }
      else
      {
        v58 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v127 & 1, v140 & 1, v128 & 1, v25);
        v57 = v59;
        v60 = specialized Collection.first.getter(v58, v59);
        if ((v60 & 0x100000000) != 0)
        {
          swift_bridgeObjectRelease();
          v57 = v51;
        }
        else
        {
          v61 = v60;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v146 = v58;
          v147 = v57;
          v148 = 15;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          swift_bridgeObjectRelease();
          v53 = v57 & 0x2000000000000000;
          v54 = HIBYTE(v57) & 0xF;
          v55 = v58 & 0xFFFFFFFFFFFFLL;
          LODWORD(v25) = v61;
          v52 = v58;
        }
        a2 = v115;
      }
      if (!v53)
        v54 = v55;
      v63 = v143;
      v62 = v144;
      v64 = v144 & 0x2000000000000000;
      v65 = HIBYTE(v144) & 0xF;
      v66 = v143 & 0xFFFFFFFFFFFFLL;
      if (!v54)
      {
        if (v64 ? HIBYTE(v144) & 0xF : v143 & 0xFFFFFFFFFFFFLL)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v25 >= v28)
            return v28 < v25;
          else
            return -1;
        }
      }
      if (v64)
        v68 = HIBYTE(v144) & 0xF;
      else
        v68 = v143 & 0xFFFFFFFFFFFFLL;
      if (v68)
      {
        if (v54)
          goto LABEL_93;
      }
      else
      {
        if (v54 && (_DWORD)v25 == (_DWORD)v28)
          goto LABEL_96;
        v81 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(v127 & 1, v140 & 1, v128 & 1, v28);
        v83 = v82;
        v84 = specialized Collection.first.getter(v81, v82);
        if ((v84 & 0x100000000) == 0)
        {
          v85 = v84;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v143 = v81;
          v144 = v83;
          v145 = 15;
          specialized _StringCompareOptionsIterableBuffer.advance()();
          LODWORD(v28) = v85;
        }
        v63 = v143;
        v62 = v144;
        swift_bridgeObjectRelease();
        v86 = HIBYTE(v62) & 0xF;
        if ((v62 & 0x2000000000000000) == 0)
          v86 = v63 & 0xFFFFFFFFFFFFLL;
        if (!v86 || (_DWORD)v25 != (_DWORD)v28)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v25 >= v28)
            return v28 < v25;
          else
            return -1;
        }
        a2 = v115;
        if (v54)
        {
LABEL_93:
          v64 = v62 & 0x2000000000000000;
          v65 = HIBYTE(v62) & 0xF;
          v66 = v63 & 0xFFFFFFFFFFFFLL;
LABEL_96:
          if (v64)
            v69 = v65;
          else
            v69 = v66;
          if (v69)
          {
            v70 = 4 * v54;
            v71 = v148;
            if (4 * v54 != v148 >> 14)
            {
              a4 = v124;
              while (1)
              {
                v73 = v143;
                v72 = v144;
                v74 = v145;
                v75 = v144 & 0x2000000000000000;
                v76 = HIBYTE(v144) & 0xF;
                v77 = v143 & 0xFFFFFFFFFFFFLL;
                v78 = (v144 & 0x2000000000000000) != 0 ? HIBYTE(v144) & 0xF : v143 & 0xFFFFFFFFFFFFLL;
                v79 = v145 >> 14;
                if (v145 >> 14 == 4 * v78)
                  break;
                v80 = specialized _StringCompareOptionsIterableBuffer.current.getter(v52, v57, v71);
                if (v80 != specialized _StringCompareOptionsIterableBuffer.current.getter(v73, v72, v74))
                {
                  v73 = v143;
                  v72 = v144;
                  v74 = v145;
                  v75 = v144 & 0x2000000000000000;
                  v76 = HIBYTE(v144) & 0xF;
                  v77 = v143 & 0xFFFFFFFFFFFFLL;
                  v79 = v145 >> 14;
                  break;
                }
                specialized _StringCompareOptionsIterableBuffer.advance()();
                specialized _StringCompareOptionsIterableBuffer.advance()();
                v71 = v148;
                if (v70 == v148 >> 14)
                  goto LABEL_117;
              }
              if (v75)
                v108 = v76;
              else
                v108 = v77;
              if (v79 != 4 * v108)
              {
                v112 = specialized _StringCompareOptionsIterableBuffer.current.getter(v52, v57, v71);
                v113 = specialized _StringCompareOptionsIterableBuffer.current.getter(v73, v72, v74);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v112 < v113)
                  return -1;
                else
                  return v113 < v112;
              }
              goto LABEL_117;
            }
          }
        }
      }
      a4 = v124;
      goto LABEL_117;
    }
    v138 = 0;
    v22 = v134;
  }
LABEL_168:
  if ((v140 & 1) != 0)
  {
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v150, v134, v130, v18, v17);
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v149, v136, a2, a3, a4);
    v22 = v150;
  }
  if ((v149 ^ a2) >> 14)
    v110 = -1;
  else
    v110 = 0;
  if (v139 == v22 >> 14)
    v111 = v110;
  else
    v111 = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v111)
    return v138;
  return v111;
}

uint64_t specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  Swift::String v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  unint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;

  v226 = a7;
  v227 = a5;
  v19 = a10;
  v232 = *MEMORY[0x1E0C80C00];
  v20 = type metadata accessor for Unicode.Scalar.Properties();
  v223 = *(_QWORD *)(v20 - 8);
  v224 = v20;
  MEMORY[0x1E0C80A78](v20);
  v222 = (char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = a11;
  v211 = a11 >> 14;
  v204 = a10 >> 14;
  if (a10 >> 14 >= a11 >> 14)
  {
    if ((a6 & 1) != 0)
    {
      v193 = 0;
      v207 = a2 >> 14;
      v212 = 0xE000000000000000;
      v26 = a10;
      v203 = a1;
      goto LABEL_203;
    }
    v159 = 0;
LABEL_210:
    if ((a1 ^ a2) >> 14)
      v178 = -1;
    else
      v178 = 0;
    if (v211 != v19 >> 14)
      v178 = 1;
    if (v178)
      return v178;
    else
      return v159;
  }
  v196 = a13;
  v195 = a12;
  v207 = a2 >> 14;
  if (a2 >> 14 <= a1 >> 14)
  {
    v159 = 0;
    if ((a6 & 1) != 0)
    {
      v193 = 0;
      v212 = 0xE000000000000000;
      v203 = a1;
      v26 = a10;
LABEL_198:
      v213 = a3;
      v210 = a4;
      v160 = Substring.subscript.getter();
      v162 = Character.isExtendCharacter.getter(v160, v161);
      swift_bridgeObjectRelease();
      if ((v162 & 1) != 0)
      {
        v26 = Substring.index(after:)();
        if (v211 > v26 >> 14)
        {
          v163 = Substring.subscript.getter();
          v165 = Character.isExtendCharacter.getter(v163, v164);
          swift_bridgeObjectRelease();
          if ((v165 & 1) != 0)
          {
            do
            {
              v26 = Substring.index(after:)();
              if (v211 <= v26 >> 14)
                break;
              v166 = Substring.subscript.getter();
              v168 = Character.isExtendCharacter.getter(v166, v167);
              swift_bridgeObjectRelease();
            }
            while ((v168 & 1) != 0);
          }
        }
      }
      goto LABEL_203;
    }
    goto LABEL_210;
  }
  v205 = a2;
  v192 = a8;
  v193 = 0;
  v22 = 0;
  v23 = 0;
  v191 = a9;
  v190 = v227 | a6 | v226;
  v212 = 0xE000000000000000;
  v24 = 15;
  v218 = 15;
  v25 = 0xE000000000000000;
  v203 = a1;
  v26 = a10;
  v27 = v204;
  v189 = a10;
  v210 = a4;
  v213 = a3;
  v225 = a6;
  while (1)
  {
    v216 = v22;
    v217 = v24;
    v199 = v25 & 0x2000000000000000;
    v198 = HIBYTE(v25) & 0xF;
    v197 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v25 & 0x2000000000000000) != 0)
      v28 = HIBYTE(v25) & 0xF;
    else
      v28 = v23 & 0xFFFFFFFFFFFFLL;
    v214 = a1;
    v215 = v26;
    v209 = v25;
    v208 = v23;
    if (v28)
    {
      v29 = String.subscript.getter();
      v31 = v30;
      v218 = String.index(after:)();
    }
    else
    {
      v29 = Substring.subscript.getter();
      v31 = v32;
    }
    v33 = v212;
    v206 = v212 & 0x2000000000000000;
    v34 = HIBYTE(v212) & 0xF;
    v35 = v216 & 0xFFFFFFFFFFFFLL;
    v201 = v34;
    if ((v212 & 0x2000000000000000) == 0)
      v34 = v216 & 0xFFFFFFFFFFFFLL;
    v200 = v34;
    if (v34)
    {
      v36 = v212;
      v37 = v19;
      v38 = String.subscript.getter();
      v219 = v39;
      v33 = v36;
      v40 = String.index(after:)();
      v41 = v38;
      v19 = v37;
      v217 = v40;
      goto LABEL_14;
    }
    v52 = Substring.subscript.getter();
    v41 = v52;
    v219 = v53;
    if (v28 || (v192 & 1) == 0)
      goto LABEL_14;
    v54 = v52;
    Character.wholeNumberValue.getter();
    if ((v55 & 1) != 0)
      break;
    Character.wholeNumberValue.getter();
    if ((v56 & 1) != 0)
      break;
    v57 = 0;
    v58 = v215;
    while (1)
    {
      Substring.subscript.getter();
      v59 = Character.wholeNumberValue.getter();
      if ((v60 & 1) != 0)
        break;
      v61 = 10 * v57;
      if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
        break;
      v62 = __OFADD__(v61, v59);
      v63 = v61 + v59;
      if (v62)
        break;
      v64 = v63;
      v58 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      v65 = v64;
      v57 = v64;
      if (v211 <= v58 >> 14)
        goto LABEL_125;
    }
    swift_bridgeObjectRelease();
    v65 = v57;
LABEL_125:
    v221 = v65;
    v215 = v58;
    v111 = 0;
    v70 = v214;
    v22 = v216;
    v112 = v203;
    while (1)
    {
      v113 = v112;
      Substring.subscript.getter();
      v114 = Character.wholeNumberValue.getter();
      if ((v115 & 1) != 0)
        break;
      v116 = 10 * v111;
      if ((unsigned __int128)(v111 * (__int128)10) >> 64 != (10 * v111) >> 63)
        break;
      v117 = v116 + v114;
      if (__OFADD__(v116, v114))
        break;
      v70 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      v112 = v113;
      v111 = v117;
      if (v207 <= v70 >> 14)
        goto LABEL_132;
    }
    swift_bridgeObjectRelease();
    v117 = v111;
LABEL_132:
    if (v221 != v117)
    {
      v187 = v221;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v187 >= v117)
        return v117 < v187;
      else
        return -1;
    }
    if ((v191 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v215;
      v19 = v189;
      goto LABEL_139;
    }
    v19 = v189;
    v118 = Substring.distance(from:to:)();
    v119 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 == v119)
    {
      v26 = v215;
LABEL_139:
      v25 = v209;
      v23 = v208;
      a4 = v210;
      v24 = v217;
      goto LABEL_66;
    }
    v23 = v208;
    v24 = v217;
    if (v118 < v119)
      v158 = -1;
    else
      v158 = v119 < v118;
    v193 = v158;
    v26 = v215;
    v25 = v209;
    a4 = v210;
LABEL_66:
    v27 = v26 >> 14;
    if (v26 >> 14 >= v211)
    {
      a2 = v205;
      a1 = v70;
      if ((v225 & 1) == 0)
        goto LABEL_209;
LABEL_203:
      if (v207 > a1 >> 14)
      {
        v169 = Substring.subscript.getter();
        v171 = Character.isExtendCharacter.getter(v169, v170);
        swift_bridgeObjectRelease();
        if ((v171 & 1) != 0)
        {
          a1 = Substring.index(after:)();
          if (v207 > a1 >> 14)
          {
            v172 = Substring.subscript.getter();
            v174 = Character.isExtendCharacter.getter(v172, v173);
            swift_bridgeObjectRelease();
            if ((v174 & 1) != 0)
            {
              do
              {
                a1 = Substring.index(after:)();
                if (v207 <= a1 >> 14)
                  break;
                v175 = Substring.subscript.getter();
                v177 = Character.isExtendCharacter.getter(v175, v176);
                swift_bridgeObjectRelease();
              }
              while ((v177 & 1) != 0);
            }
          }
        }
      }
      goto LABEL_209;
    }
    a1 = v70;
    a3 = v213;
    if (v207 <= v70 >> 14)
    {
      a2 = v205;
      if ((v225 & 1) != 0)
        goto LABEL_198;
LABEL_209:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v26;
      v159 = v193;
      goto LABEL_210;
    }
  }
  v41 = v54;
LABEL_14:
  if (v204 >= v27)
  {
    v42 = v219;
    v43 = v35;
  }
  else
  {
    v42 = v219;
    v43 = v35;
    if ((v225 & 1) != 0)
    {
      v44 = v41;
      v45 = v214;
      if (v28 || (v46 = Character.isExtendCharacter.getter(v29, v31), v41 = v44, (v46 & 1) == 0))
      {
        v47 = 0;
        v49 = 0;
        v48 = v43;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v41 = v44;
        v47 = 1;
        v29 = v44;
        v31 = v42;
        v48 = v43;
        v49 = 1;
      }
      if (v206)
      {
        v48 = v201;
        v49 = v47;
      }
      if (v48 || (v50 = Character.isExtendCharacter.getter(v41, v219), v41 = v44, (v50 & 1) == 0))
      {
        if (v49)
        {
          v51 = Substring.index(before:)();
          v41 = v44;
          v45 = v51;
        }
        v42 = v219;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v49 & 1) == 0)
          v215 = Substring.index(before:)();
        v41 = v29;
        v42 = v31;
      }
      goto LABEL_42;
    }
  }
  v45 = v214;
LABEL_42:
  v219 = v42;
  if (v29 == v41 && v31 == v42 || (v194 = v41, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v22 = v216;
    v66 = v209;
    v67 = v208;
    goto LABEL_46;
  }
  if ((v190 & 1) == 0)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_234;
    goto LABEL_232;
  }
  v78 = v194;
  if ((v191 & 1) != 0 && !v193)
  {
    v79 = v194;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v80 = -1;
    else
      v80 = _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
    v193 = v80;
    v78 = v79;
  }
  v81 = v209;
  if (v28)
  {
    v68 = v208;
    goto LABEL_79;
  }
  if ((Character.asciiValue.getter() & 0x100) == 0)
  {
    if ((v226 & 1) != 0)
    {
      v85 = String.lowercased()();
      countAndFlagsBits = v85._countAndFlagsBits;
      object = (unint64_t)v85._object;
    }
    else
    {
      swift_bridgeObjectRetain();
      countAndFlagsBits = v29;
      object = v31;
    }
LABEL_141:
    v122 = specialized Collection.first.getter(countAndFlagsBits, object);
    if (v123)
    {
      v124 = v122;
      v125 = v123;
      v68 = countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v218 = String.index(after:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v82 = object & 0x2000000000000000;
      v81 = object;
      v83 = HIBYTE(object) & 0xF;
      v84 = v68 & 0xFFFFFFFFFFFFLL;
      v29 = v124;
      v31 = v125;
      v33 = v212;
      v78 = v194;
LABEL_143:
      if (v82)
        v28 = v83;
      else
        v28 = v84;
      if (!v200 || v28)
      {
        v221 = v28;
        if (v200)
        {
          v126 = v81;
          v22 = v216;
          if (v28)
          {
LABEL_150:
            v127 = v33 & 0x2000000000000000;
            v128 = HIBYTE(v33) & 0xF;
            v43 = v22 & 0xFFFFFFFFFFFFLL;
            goto LABEL_156;
          }
LABEL_184:
          v66 = v126;
          goto LABEL_50;
        }
        if (v28)
        {
          if (v29 == v78 && v31 == v219
            || (v129 = _stringCompareWithSmolCheck(_:_:expecting:)(), v78 = v194, (v129 & 1) != 0))
          {
            v22 = v216;
            v127 = v206;
            v128 = v201;
LABEL_156:
            if (v127)
              v130 = v128;
            else
              v130 = v43;
            if (v130)
            {
              v131 = 4 * v28;
              v69 = v81;
              if (4 * v28 != v218 >> 14)
              {
                v214 = v45;
                v220 = 4 * v130;
                v132 = v217;
                do
                {
                  if (v220 == v132 >> 14)
                    break;
                  v136 = String.subscript.getter();
                  v137 = v33;
                  v139 = v138;
                  v140 = v22;
                  v141 = v137;
                  if (v136 == String.subscript.getter() && v139 == v142)
                  {
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v133 & 1) == 0)
                      goto LABEL_220;
                  }
                  v134 = String.index(after:)();
                  v22 = v140;
                  v33 = v141;
                  v132 = String.index(after:)();
                  v218 = v134;
                  v135 = v131 == v134 >> 14;
                  v28 = v221;
                }
                while (!v135);
                v217 = v132;
                v66 = v69;
                v67 = v68;
                v45 = v214;
                v19 = v189;
LABEL_46:
                v68 = v67;
                v69 = v66;
                if (!v28)
                {
LABEL_51:
                  v70 = v45;
                  v71 = v19;
                  v72 = HIBYTE(v33) & 0xF;
                  if ((v33 & 0x2000000000000000) == 0)
                    v72 = v22 & 0xFFFFFFFFFFFFLL;
                  v73 = v66;
                  v74 = v67;
                  if (v72)
                  {
                    v24 = v217;
                    v75 = v210;
                    if (v217 >> 14 == 4 * v72)
                    {
                      swift_bridgeObjectRelease();
                      v67 = v74;
                      v66 = v73;
                      v22 = 0;
                      v33 = 0xE000000000000000;
                      v24 = 15;
                    }
                  }
                  else
                  {
                    v75 = v210;
                    v24 = v217;
                  }
                  v76 = HIBYTE(v66) & 0xF;
                  if ((v66 & 0x2000000000000000) == 0)
                    v76 = v67 & 0xFFFFFFFFFFFFLL;
                  if (!v76)
                    v215 = Substring.index(after:)();
                  v77 = HIBYTE(v33) & 0xF;
                  v212 = v33;
                  if ((v33 & 0x2000000000000000) == 0)
                    v77 = v22 & 0xFFFFFFFFFFFFLL;
                  if (v77)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v26 = v215;
                    v25 = v73;
                    v23 = v74;
                    v19 = v71;
                    a4 = v75;
                  }
                  else
                  {
                    v70 = Substring.index(after:)();
                    a4 = v75;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v26 = v215;
                    v25 = v73;
                    v23 = v74;
                    v19 = v71;
                  }
                  goto LABEL_66;
                }
                goto LABEL_47;
              }
              v19 = v189;
            }
            else
            {
              v69 = v81;
            }
LABEL_47:
            if (v218 >> 14 == 4 * v28)
            {
              swift_bridgeObjectRelease();
              v67 = 0;
              v66 = 0xE000000000000000;
              v218 = 15;
              goto LABEL_51;
            }
            v66 = v69;
LABEL_50:
            v67 = v68;
            goto LABEL_51;
          }
        }
        v220 = v68;
        v214 = v45;
        v143 = v33;
        v144 = v78;
        v145 = v219;
        v146 = Character._transform(toHalfWidth:stripDiacritics:caseFolding:)(v227 & 1, v225 & 1, v226 & 1);
        v147 = specialized Collection.first.getter(v146._countAndFlagsBits, (unint64_t)v146._object);
        if (v148)
        {
          v149 = v148;
          v150 = v147;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v217 = String.index(after:)();
          swift_bridgeObjectRelease();
          v151 = (uint64_t)v146._object & 0x2000000000000000;
          v152 = ((unint64_t)v146._object >> 56) & 0xF;
          v43 = v146._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          v143 = (unint64_t)v146._object;
          v216 = v146._countAndFlagsBits;
          v153 = v150;
          v145 = v149;
        }
        else
        {
          v151 = v206;
          v152 = v201;
          v153 = v144;
        }
        if (v151)
          v154 = v152;
        else
          v154 = v43;
        v126 = v81;
        v68 = v220;
        if (v154)
        {
          if (v29 != v153 || (v155 = v31, v31 != v145))
          {
            v156 = v153;
            v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v153 = v156;
            v68 = v220;
            if ((v157 & 1) == 0)
              goto LABEL_238;
            v155 = v145;
          }
          swift_bridgeObjectRelease();
          v219 = v155;
          v33 = v143;
          v45 = v214;
          v19 = v189;
          v28 = v221;
          v22 = v216;
          if (v221)
            goto LABEL_150;
          goto LABEL_184;
        }
LABEL_238:
        if (v29 == v153 && v31 == v145)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return 0;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_231:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_235;
        }
        v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_248:
        swift_bridgeObjectRelease();
        return v185 & 1;
      }
      if (v29 == v78 && v31 == v219)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_234:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_235:
        swift_bridgeObjectRelease();
        return -1;
      }
LABEL_232:
      v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_248;
    }
    swift_bridgeObjectRelease();
    v81 = v209;
    v68 = v208;
    v33 = v212;
    v78 = v194;
LABEL_79:
    v82 = v199;
    v83 = v198;
    v84 = v197;
    goto LABEL_143;
  }
  v188 = v43;
  v214 = v45;
  v88 = 0xE000000000000000;
  v230 = 0;
  v231 = 0xE000000000000000;
  v221 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000) != 0)
    v89 = HIBYTE(v31) & 0xF;
  else
    v89 = v29 & 0xFFFFFFFFFFFFLL;
  v90 = v225;
  if (!v89)
  {
    v120 = 0;
LABEL_137:
    v228 = v120;
    v229 = v88;
    countAndFlagsBits = String.init<A>(_:)();
    object = v121;
    v45 = v214;
    v19 = v189;
    v43 = v188;
    goto LABEL_141;
  }
  v220 = v31 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v91 = 0;
  while (1)
  {
    if ((v31 & 0x1000000000000000) != 0)
    {
      v98 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v31 & 0x2000000000000000) != 0)
      {
        v228 = v29;
        v229 = v220;
      }
      else if ((v29 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      v98 = _decodeScalar(_:startingAt:)();
    }
    v100 = v98;
    v101 = v99;
    if ((v227 & 1) != 0 && v98 >> 8 >= 0xFF && v98 < 0xFFEF)
      break;
    v102 = v98;
    if ((v90 & 1) == 0)
      goto LABEL_115;
LABEL_106:
    v103 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v100), 5);
    if (!v103 || ((*(unsigned __int8 *)(v103 + ((unsigned __int16)v100 >> 3)) >> (v100 & 7)) & 1) == 0)
    {
      v104 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v102), 2);
      if (v104 && ((*(unsigned __int8 *)(v104 + ((unsigned __int16)v102 >> 3)) >> (v102 & 7)) & 1) != 0)
      {
        MEMORY[0x1E0C80A78](v104);
        v105 = CFUniCharDecomposeCharacter();
        v90 = v225;
        if (*((_DWORD *)&v188 - 64) < 0x510u && v105 > 0)
          v102 = *((_DWORD *)&v188 - 64);
      }
LABEL_115:
      if ((v226 & 1) != 0)
      {
        v92 = v222;
        Unicode.Scalar.properties.getter();
        v93 = Unicode.Scalar.Properties._caseFolded.getter();
        v95 = v94;
        (*(void (**)(char *, uint64_t))(v223 + 8))(v92, v224);
        v96 = v93;
        v90 = v225;
        v97 = v95;
      }
      else
      {
        if (v102 >= 0x80)
        {
          v108 = (v102 & 0x3F) << 8;
          if (v102 >= 0x800)
          {
            v109 = (v108 | (v102 >> 6) & 0x3F) << 8;
            v110 = (((v109 | (v102 >> 12) & 0x3F) << 8) | (v102 >> 18)) - 2122219023;
            v107 = (v109 | (v102 >> 12)) + 8487393;
            if (HIWORD(v102))
              v107 = v110;
          }
          else
          {
            v107 = (v108 | (v102 >> 6)) + 33217;
          }
        }
        else
        {
          v107 = v102 + 1;
        }
        v228 = (v107 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v107) >> 3))));
        v96 = MEMORY[0x186DA46D0](&v228);
      }
      String.append(_:)(*(Swift::String *)&v96);
      swift_bridgeObjectRelease();
    }
    v91 += v101;
    if (v91 >= v89)
    {
      swift_bridgeObjectRelease();
      v120 = v230;
      v88 = v231;
      goto LABEL_137;
    }
  }
  LODWORD(v228) = v98;
  CFUniCharCompatibilityDecompose();
  v102 = v228;
  if (v228 >> 11 == 27)
  {
    __break(1u);
    goto LABEL_229;
  }
  if (WORD1(v228) <= 0x10u)
  {
    if ((v90 & 1) == 0)
      goto LABEL_115;
    goto LABEL_106;
  }
  __break(1u);
LABEL_220:
  v181 = String.subscript.getter();
  v183 = v182;
  if (v181 == String.subscript.getter() && v183 == v184)
  {
    swift_bridgeObjectRelease_n();
    v179 = 0;
    goto LABEL_237;
  }
LABEL_229:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_231;
  }
  v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v179 = v186 & 1;
LABEL_237:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v179;
}

uint64_t specialized _StringCompareOptionsIterableBuffer.current.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _StringGuts.validateScalarIndex(_:)(a3, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
    return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
  if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
    _StringObject.sharedUTF8.getter();
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized _StringCompareOptionsIterableBuffer.advance()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = *v0;
  v1 = v0[1];
  v3 = _StringGuts.validateScalarIndex(_:)(v0[2], *v0, v1);
  if ((v1 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(after:)();
  }
  else
  {
    v4 = v3 >> 16;
    if ((v1 & 0x2000000000000000) != 0)
    {
      v10[0] = v2;
      v10[1] = v1 & 0xFFFFFFFFFFFFFFLL;
      v6 = *((unsigned __int8 *)v10 + v4);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
        v5 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v5 = _StringObject.sharedUTF8.getter();
      v6 = *(unsigned __int8 *)(v5 + v4);
    }
    v7 = (char)v6;
    v8 = __clz(v6 ^ 0xFF) - 24;
    if (v7 >= 0)
      LOBYTE(v8) = 1;
    result = ((v4 + v8) << 16) | 5;
  }
  v0[2] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator.CodingKeys, &type metadata for String.Comparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator.CodingKeys, &type metadata for String.Comparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator.CodingKeys, &type metadata for String.Comparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator.CodingKeys, &type metadata for String.Comparator.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator.CodingKeys and conformance String.Comparator.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static String.Comparator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  int v4;
  char v5;
  __int128 v7;
  __int128 v8;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(_OWORD *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (!(_QWORD)v3)
      return v2 ^ v4 ^ 1u;
    goto LABEL_9;
  }
  v8 = *(_OWORD *)(a1 + 8);
  if (!(_QWORD)v3)
  {
    swift_unknownObjectRetain();
LABEL_9:
    swift_unknownObjectRelease();
    return 0;
  }
  v7 = v3;
  swift_unknownObjectRetain_n();
  v5 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) != 0)
    return v2 ^ v4 ^ 1u;
  return 0;
}

unint64_t instantiation function for generic protocol witness table for String.StandardComparator(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.Comparator(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Comparator and conformance String.Comparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator, &type metadata for String.Comparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator;
  if (!lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Comparator, &type metadata for String.Comparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Comparator and conformance String.Comparator);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for String.StandardComparator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for String.StandardComparator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for String.StandardComparator()
{
  return &type metadata for String.StandardComparator;
}

uint64_t destroy for String.Comparator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.Comparator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for String.Comparator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.Comparator(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.Comparator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for String.Comparator()
{
  return &type metadata for String.Comparator;
}

ValueMetadata *type metadata accessor for String.Comparator.CodingKeys()
{
  return &type metadata for String.Comparator.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for String.Comparator.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181B4D378 + 4 * byte_1820DD3B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181B4D3AC + 4 * byte_1820DD3B0[v4]))();
}

uint64_t sub_181B4D3AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B4D3B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B4D3BCLL);
  return result;
}

uint64_t sub_181B4D3C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B4D3D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181B4D3D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B4D3DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for String.StandardComparator.CodingKeys()
{
  return &type metadata for String.StandardComparator.CodingKeys;
}

unint64_t specialized String.Comparator.CodingKeys.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t ICULegacyNumberFormatter.__deallocating_deinit()
{
  unum_close();
  return swift_deallocClassInstance();
}

uint64_t initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v17 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
      *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
      v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v19 = v18[9];
      v20 = (void *)(a1 + v19);
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for FloatingPointRoundingRule();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v28 = v18[10];
      v29 = a1 + v28;
      v30 = (uint64_t)a2 + v28;
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_BYTE *)(a1 + v18[11]) = *((_BYTE *)a2 + v18[11]);
      *(_BYTE *)(a1 + v18[12]) = *((_BYTE *)a2 + v18[12]);
      goto LABEL_18;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v25 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v10[9];
      v12 = (void *)(a1 + v26);
      v13 = (char *)a2 + v26;
      v14 = type metadata accessor for FloatingPointRoundingRule();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
LABEL_11:
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_17:
        v31 = v10[10];
        v32 = a1 + v31;
        v33 = (uint64_t)a2 + v31;
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
        *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_19:
        v34 = *(int *)(a3 + 20);
        v35 = *(int *)(a3 + 24);
        v36 = (_QWORD *)(a1 + v34);
        v37 = (uint64_t *)((char *)a2 + v34);
        v38 = v37[1];
        *v36 = *v37;
        v36[1] = v38;
        *(_BYTE *)(a1 + v35) = *((_BYTE *)a2 + v35);
        swift_bridgeObjectRetain();
        return a1;
      }
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
      *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
      *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
      v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v11 = v10[9];
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for FloatingPointRoundingRule();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        goto LABEL_11;
    }
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    goto LABEL_17;
  }
  v16 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
      return swift_bridgeObjectRelease();
    v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v4 = a1 + *(int *)(v3 + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v17 = v16[9];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = type metadata accessor for FloatingPointRoundingRule();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v26 = v16[10];
      v27 = &a1[v26];
      v28 = &a2[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v24 = v9[9];
      v11 = &a1[v24];
      v12 = &a2[v24];
      v13 = type metadata accessor for FloatingPointRoundingRule();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
LABEL_9:
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_15:
        v29 = v9[10];
        v30 = &a1[v29];
        v31 = &a2[v29];
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_15;
    case 0:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v10 = v9[9];
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = type metadata accessor for FloatingPointRoundingRule();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        goto LABEL_9;
      goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_17:
  v32 = *(int *)(a3 + 20);
  v33 = *(int *)(a3 + 24);
  v34 = &a1[v32];
  v35 = &a2[v32];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  a1[v33] = a2[v33];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v19 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v19;
        v20 = *((_OWORD *)a2 + 1);
        v21 = *((_OWORD *)a2 + 2);
        v22 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v21;
        *((_OWORD *)a1 + 3) = v22;
        *((_OWORD *)a1 + 1) = v20;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        v23 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v24 = v23[9];
        v25 = &a1[v24];
        v26 = &a2[v24];
        v27 = type metadata accessor for FloatingPointRoundingRule();
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        v35 = v23[10];
        v36 = &a1[v35];
        v37 = &a2[v35];
        v38 = *(_QWORD *)v37;
        v36[8] = v37[8];
        *(_QWORD *)v36 = v38;
        a1[v23[11]] = a2[v23[11]];
        a1[v23[12]] = a2[v23[12]];
        goto LABEL_16;
      case 1:
        v30 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v30;
        v31 = *((_OWORD *)a2 + 1);
        v32 = *((_OWORD *)a2 + 2);
        v33 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v32;
        *((_OWORD *)a1 + 3) = v33;
        *((_OWORD *)a1 + 1) = v31;
        a1[73] = a2[73];
        LOWORD(v30) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v30;
        a1[77] = a2[77];
        v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v34 = v12[9];
        v14 = &a1[v34];
        v15 = &a2[v34];
        v16 = type metadata accessor for FloatingPointRoundingRule();
        v17 = *(_QWORD *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
          goto LABEL_6;
        goto LABEL_14;
      case 0:
        v8 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v8;
        v9 = *((_OWORD *)a2 + 1);
        v10 = *((_OWORD *)a2 + 2);
        v11 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v10;
        *((_OWORD *)a1 + 3) = v11;
        *((_OWORD *)a1 + 1) = v9;
        a1[73] = a2[73];
        LOWORD(v8) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v8;
        a1[77] = a2[77];
        v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v13 = v12[9];
        v14 = &a1[v13];
        v15 = &a2[v13];
        v16 = type metadata accessor for FloatingPointRoundingRule();
        v17 = *(_QWORD *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
LABEL_6:
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_15:
          v39 = v12[10];
          v40 = &a1[v39];
          v41 = &a2[v39];
          v42 = *(_QWORD *)v41;
          v40[8] = v41[8];
          *(_QWORD *)v40 = v42;
          a1[v12[11]] = a2[v12[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_17:
  v43 = *(int *)(a3 + 20);
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v17 = v16[9];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = type metadata accessor for FloatingPointRoundingRule();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v26 = v16[10];
      v27 = &a1[v26];
      v28 = &a2[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      a1[v16[11]] = a2[v16[11]];
      a1[v16[12]] = a2[v16[12]];
      goto LABEL_16;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v23;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v24 = v9[9];
      v11 = &a1[v24];
      v12 = &a2[v24];
      v13 = type metadata accessor for FloatingPointRoundingRule();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
LABEL_9:
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_15:
        v29 = v9[10];
        v30 = &a1[v29];
        v31 = &a2[v29];
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v30[8] = v31[8];
        a1[v9[11]] = a2[v9[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_15;
    case 0:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v8 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v10 = v9[9];
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = type metadata accessor for FloatingPointRoundingRule();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        goto LABEL_9;
      goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_17:
  v32 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  a1[v32] = a2[v32];
  return a1;
}

char *assignWithTake for ICULegacyNumberFormatter.Signature(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v16 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v16;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v18 = v17[9];
        v19 = &a1[v18];
        v20 = &a2[v18];
        v21 = type metadata accessor for FloatingPointRoundingRule();
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        v26 = v17[10];
        v27 = &a1[v26];
        v28 = &a2[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        a1[v17[11]] = a2[v17[11]];
        a1[v17[12]] = a2[v17[12]];
        goto LABEL_16;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v24 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v24;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v25 = v9[9];
        v11 = &a1[v25];
        v12 = &a2[v25];
        v13 = type metadata accessor for FloatingPointRoundingRule();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
          goto LABEL_6;
        goto LABEL_14;
      case 0:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v10 = v9[9];
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = type metadata accessor for FloatingPointRoundingRule();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
LABEL_6:
          v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_15:
          v29 = v9[10];
          v30 = &a1[v29];
          v31 = &a2[v29];
          *(_QWORD *)v30 = *(_QWORD *)v31;
          v30[8] = v31[8];
          a1[v9[11]] = a2[v9[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          goto LABEL_17;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_17:
  v32 = *(int *)(a3 + 20);
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ICULegacyNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B4EAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B4EB34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for ICULegacyNumberFormatter.Signature);
}

uint64_t type metadata completion function for ICULegacyNumberFormatter.Signature()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v18 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v18;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v20 = v19[9];
        v21 = &a1[v20];
        v22 = &a2[v20];
        v23 = type metadata accessor for FloatingPointRoundingRule();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v31 = v19[10];
        v32 = &a1[v31];
        v33 = &a2[v31];
        *(_QWORD *)v32 = *(_QWORD *)v33;
        v32[8] = v33[8];
        a1[v19[11]] = a2[v19[11]];
        a1[v19[12]] = a2[v19[12]];
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v26 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v26;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v27 = v9[9];
        v11 = &a1[v27];
        v12 = &a2[v27];
        v13 = type metadata accessor for FloatingPointRoundingRule();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
          goto LABEL_6;
        goto LABEL_14;
      case 0:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v8 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v8;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v10 = v9[9];
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = type metadata accessor for FloatingPointRoundingRule();
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
LABEL_6:
          v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_15:
          v28 = v9[10];
          v29 = &a1[v28];
          v30 = &a2[v28];
          *(_QWORD *)v29 = *(_QWORD *)v30;
          v29[8] = v30[8];
          a1[v9[11]] = a2[v9[11]];
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        goto LABEL_15;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (result > 1)
      return result;
    v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v4 = a1 + *(int *)(v3 + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

char *initializeWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v16 = v15[9];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for FloatingPointRoundingRule();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v25 = v15[10];
      v26 = &a1[v25];
      v27 = &a2[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v23 = v8[9];
      v10 = &a1[v23];
      v11 = &a2[v23];
      v12 = type metadata accessor for FloatingPointRoundingRule();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
LABEL_9:
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_15:
        v28 = v8[10];
        v29 = &a1[v28];
        v30 = &a2[v28];
        *(_QWORD *)v29 = *(_QWORD *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_15;
    case 0:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v9 = v8[9];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for FloatingPointRoundingRule();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        goto LABEL_9;
      goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v18 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v18;
        v19 = *((_OWORD *)a2 + 1);
        v20 = *((_OWORD *)a2 + 2);
        v21 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v20;
        *((_OWORD *)a1 + 3) = v21;
        *((_OWORD *)a1 + 1) = v19;
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        v22 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v23 = v22[9];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = type metadata accessor for FloatingPointRoundingRule();
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        v34 = v22[10];
        v35 = &a1[v34];
        v36 = &a2[v34];
        v37 = *(_QWORD *)v36;
        v35[8] = v36[8];
        *(_QWORD *)v35 = v37;
        a1[v22[11]] = a2[v22[11]];
        a1[v22[12]] = a2[v22[12]];
        goto LABEL_16;
      case 1:
        v29 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v29;
        v30 = *((_OWORD *)a2 + 1);
        v31 = *((_OWORD *)a2 + 2);
        v32 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v31;
        *((_OWORD *)a1 + 3) = v32;
        *((_OWORD *)a1 + 1) = v30;
        a1[73] = a2[73];
        LOWORD(v29) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v29;
        a1[77] = a2[77];
        v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v33 = v11[9];
        v13 = &a1[v33];
        v14 = &a2[v33];
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
          goto LABEL_6;
        goto LABEL_14;
      case 0:
        v7 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v7;
        v8 = *((_OWORD *)a2 + 1);
        v9 = *((_OWORD *)a2 + 2);
        v10 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *((_OWORD *)a1 + 2) = v9;
        *((_OWORD *)a1 + 3) = v10;
        *((_OWORD *)a1 + 1) = v8;
        a1[73] = a2[73];
        LOWORD(v7) = *((_WORD *)a2 + 37);
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = v7;
        a1[77] = a2[77];
        v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        v13 = &a1[v12];
        v14 = &a2[v12];
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
LABEL_6:
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
LABEL_15:
          v38 = v11[10];
          v39 = &a1[v38];
          v40 = &a2[v38];
          v41 = *(_QWORD *)v40;
          v39[8] = v40[8];
          *(_QWORD *)v39 = v41;
          a1[v11[11]] = a2[v11[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v14 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v14;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
      a1[78] = a2[78];
      v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v16 = v15[9];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for FloatingPointRoundingRule();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v25 = v15[10];
      v26 = &a1[v25];
      v27 = &a2[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      a1[v15[11]] = a2[v15[11]];
      a1[v15[12]] = a2[v15[12]];
      goto LABEL_16;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v22 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v22;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v23 = v8[9];
      v10 = &a1[v23];
      v11 = &a2[v23];
      v12 = type metadata accessor for FloatingPointRoundingRule();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
LABEL_9:
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_15:
        v28 = v8[10];
        v29 = &a1[v28];
        v30 = &a2[v28];
        *(_QWORD *)v29 = *(_QWORD *)v30;
        v29[8] = v30[8];
        a1[v8[11]] = a2[v8[11]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_15;
    case 0:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v7 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      a1[73] = a2[73];
      a1[76] = a2[76];
      *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
      a1[77] = a2[77];
      v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v9 = v8[9];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for FloatingPointRoundingRule();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        goto LABEL_9;
      goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ICULegacyNumberFormatter.NumberFormatType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v15 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v15;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
        a1[78] = a2[78];
        v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v17 = v16[9];
        v18 = &a1[v17];
        v19 = &a2[v17];
        v20 = type metadata accessor for FloatingPointRoundingRule();
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        v25 = v16[10];
        v26 = &a1[v25];
        v27 = &a2[v25];
        *(_QWORD *)v26 = *(_QWORD *)v27;
        v26[8] = v27[8];
        a1[v16[11]] = a2[v16[11]];
        a1[v16[12]] = a2[v16[12]];
        goto LABEL_16;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v23 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v23;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v24 = v8[9];
        v10 = &a1[v24];
        v11 = &a2[v24];
        v12 = type metadata accessor for FloatingPointRoundingRule();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
          goto LABEL_6;
        goto LABEL_14;
      case 0:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v7 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v7;
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        a1[73] = a2[73];
        a1[76] = a2[76];
        *((_WORD *)a1 + 37) = *((_WORD *)a2 + 37);
        a1[77] = a2[77];
        v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v9 = v8[9];
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = type metadata accessor for FloatingPointRoundingRule();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        {
LABEL_6:
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_15:
          v28 = v8[10];
          v29 = &a1[v28];
          v30 = &a2[v28];
          *(_QWORD *)v29 = *(_QWORD *)v30;
          v29[8] = v30[8];
          a1[v8[11]] = a2[v8[11]];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_14:
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
        goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void ICULegacyNumberFormatter.NumberFormatType.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v11);
  v1 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v1 - 8);
  v15 = v1;
  MEMORY[0x1E0C80A78](v1);
  v12 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v7);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, (uint64_t)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (char *)sub_181B50160 + 4 * byte_1820E3830[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181B50160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  uint64_t v6;
  int *v7;
  int v8;
  Swift::UInt v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  Swift::UInt v18;
  Swift::UInt64 v19;
  Swift::UInt v20;

  outlined init with take of ICUNumberFormatter.Signature(v1, v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  Hasher._combine(_:)(0);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = v4;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  v7 = *(int **)(v3 - 168);
  v6 = *(_QWORD *)(v3 - 160);
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v2 + 16, v3 - 144);
  specialized Optional<A>.hash(into:)();
  v8 = *(unsigned __int8 *)(v2 + 73);
  if (v8 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = v8 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  v10 = *(unsigned __int16 *)(v2 + 74);
  v11 = v10 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11 & 1);
    Hasher._combine(_:)((v11 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v11) & 1);
  }
  v12 = *(_QWORD *)(v3 - 152);
  v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  outlined init with copy of FloatingPointRoundingRule?(v2 + v7[9], v0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0, 1, v12) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)(v3 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v15, v0, v12);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v12);
  }
  v16 = v2 + v7[10];
  v17 = *(unsigned __int8 *)(v16 + 8);
  if (v17 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)v16;
    Hasher._combine(_:)(1u);
    if ((v17 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v19 = v18;
      else
        v19 = 0;
      Hasher._combine(_:)(v19);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v18);
    }
  }
  v20 = *(unsigned __int8 *)(v2 + v7[11]);
  if (v20 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }
  return outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

void ICULegacyNumberFormatter.NumberFormatType.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[5];
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  MEMORY[0x1E0C80A78](v2);
  v22 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x1E0C80A78](v4);
  v19 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v17);
  v18 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  v16[3] = *(_QWORD *)(v7 - 8);
  v16[4] = v7;
  MEMORY[0x1E0C80A78](v7);
  v16[2] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  v16[0] = *(_QWORD *)(v9 - 8);
  v16[1] = v9;
  MEMORY[0x1E0C80A78](v9);
  v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  v26 = *(_QWORD *)(v14 - 8);
  v27 = v14;
  MEMORY[0x1E0C80A78](v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v28, (uint64_t)v13);
  v15 = (char *)sub_181B50B98 + 4 * byte_1820E3834[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181B50B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with take of ICUNumberFormatter.Signature(v0, v3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  *(_BYTE *)(v4 - 70) = 0;
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
  v5 = *(_QWORD *)(v4 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
  v6 = *(_QWORD *)(v4 - 216);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 224) + 8))(v2, v6);
  outlined destroy of ICUNumberFormatter.Signature(v3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v1, v5);
}

uint64_t ICULegacyNumberFormatter.NumberFormatType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD v37[9];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v50 = a2;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys>);
  v41 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v48 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  v40 = v5;
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys>);
  v37[7] = *(_QWORD *)(v7 - 8);
  v37[8] = v7;
  MEMORY[0x1E0C80A78](v7);
  v44 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys>);
  v37[6] = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v42 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ICULegacyNumberFormatter.NumberFormatType.CodingKeys>);
  v45 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v46);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v37 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v37 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v37 - v21;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v37 - v24;
  v26 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  v49 = v11;
  v27 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v27)
  {
    v37[2] = v22;
    v37[3] = v19;
    v37[1] = v13;
    v37[4] = v16;
    v37[5] = v25;
    v53 = 0;
    v28 = v46;
    v29 = v51;
    v30 = v49;
    v31 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v31 + 16) == 1)
      __asm { BR              X10 }
    v32 = v29;
    v33 = type metadata accessor for DecodingError();
    swift_allocError();
    v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v35 = v28;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC450], v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v32);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

void sub_181B5144C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;

  *(_BYTE *)(v3 - 65) = 3;
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
  v4 = *(_QWORD *)(v3 - 96);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v2, v1);
    JUMPOUT(0x181B51420);
  }
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection();
  v5 = *(_QWORD *)(v3 - 216);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 96) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 8))(v0, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v1);
  v7 = *(_WORD **)(v3 - 280);
  *v7 = *(_WORD *)(v3 - 67);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v7, *(_QWORD *)(v3 - 248), type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  JUMPOUT(0x181B51670);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B516C0 + 4 * byte_1820E383C[*v0]))(0x7265626D756ELL, 0xE600000000000000);
}

uint64_t sub_181B516C0()
{
  return 0x746E6563726570;
}

uint64_t sub_181B516D8()
{
  return 0x79636E6572727563;
}

uint64_t sub_181B516F0()
{
  return 0x7470697263736564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))ICULegacyNumberFormatter.NumberFormatType.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance ICULegacyNumberFormatter.NumberFormatType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ICULegacyNumberFormatter.NumberFormatType.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ICULegacyNumberFormatter.NumberFormatType(_QWORD *a1)
{
  ICULegacyNumberFormatter.NumberFormatType.encode(to:)(a1);
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.NumberFormatType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
}

void ICULegacyNumberFormatter.Signature.createNumberFormatter()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, (uint64_t)&v8 - v6);
  v7 = (char *)&loc_181B51A8C + *((int *)qword_181B52030 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_181B51A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int EnumCaseMultiPayload;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  __int16 v28;
  int v29;

  outlined init with take of ICUNumberFormatter.Signature(v3, v0, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  outlined destroy of ICUNumberFormatter.Signature(v0, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  *(_DWORD *)(v7 - 164) = 0;
  type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  String.utf8CString.getter();
  v8 = unum_open();
  swift_release();
  if (!v8)
  {
    v9 = 16;
    goto LABEL_19;
  }
  v9 = *(_DWORD *)(v7 - 164);
  if (v9 > 0)
  {
LABEL_19:
    lazy protocol witness table accessor for type ICUError and conformance ICUError();
    swift_allocError();
    *v17 = v9;
    return swift_willThrow();
  }
  unum_setAttribute();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v5, (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload < 2)
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v6, v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
      goto LABEL_9;
    if ((~*(_QWORD *)v2 & 0x7FF0000000000000) != 0)
    {
      if (*(double *)v2 > -2147483650.0)
      {
        if (*(double *)v2 < 2147483650.0)
        {
          unum_setAttribute();
LABEL_9:
          v11 = *(_QWORD *)(v2 + 64);
          v12 = *(_BYTE *)(v2 + 72);
          v13 = *(_OWORD *)(v2 + 32);
          *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 16);
          *(_OWORD *)(v7 - 144) = v13;
          *(_OWORD *)(v7 - 128) = *(_OWORD *)(v2 + 48);
          *(_QWORD *)(v7 - 112) = v11;
          *(_BYTE *)(v7 - 104) = v12;
          setPrecision(_:formatter:)(v7 - 160);
          if ((*(_BYTE *)(v2 + 73) & 1) != 0)
            unum_setAttribute();
          if ((*(_BYTE *)(v2 + 77) & 1) != 0)
            unum_setAttribute();
          v14 = v2 + *(int *)(v4 + 40);
          v15 = *(unsigned __int8 *)(v14 + 8);
          if (v15 == 255)
            goto LABEL_43;
          v16 = *(_QWORD *)v14;
          if ((v15 & 1) != 0)
          {
            unum_setDoubleAttribute();
LABEL_43:
            v28 = *(_WORD *)(v2 + 74);
            outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
            if (v28 != 2 && (v28 & 1) == 0)
              unum_setAttribute();
            goto LABEL_51;
          }
          if (v16 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v16 <= 0x7FFFFFFF)
            {
              unum_setAttribute();
              goto LABEL_43;
            }
            goto LABEL_56;
          }
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  if (EnumCaseMultiPayload == 2)
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v6, v1, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    {
      if ((~*(_QWORD *)v1 & 0x7FF0000000000000) == 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if (*(double *)v1 <= -2147483650.0)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      if (*(double *)v1 >= 2147483650.0)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      unum_setAttribute();
    }
    v19 = *(_QWORD *)(v1 + 64);
    v20 = *(_BYTE *)(v1 + 72);
    v21 = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v7 - 160) = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v7 - 144) = v21;
    *(_OWORD *)(v7 - 128) = *(_OWORD *)(v1 + 48);
    *(_QWORD *)(v7 - 112) = v19;
    *(_BYTE *)(v7 - 104) = v20;
    setPrecision(_:formatter:)(v7 - 160);
    if ((*(_BYTE *)(v1 + 73) & 1) != 0)
      unum_setAttribute();
    if ((*(_BYTE *)(v1 + 78) & 1) != 0)
      unum_setAttribute();
    v22 = v1 + *(int *)(*(_QWORD *)(v7 - 184) + 40);
    v23 = *(unsigned __int8 *)(v22 + 8);
    if (v23 != 255)
    {
      v24 = *(_QWORD *)v22;
      if ((v23 & 1) != 0)
      {
        unum_setDoubleAttribute();
      }
      else
      {
        if (v24 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
        }
        if (v24 > 0x7FFFFFFF)
          goto LABEL_63;
        unum_setAttribute();
      }
    }
    v29 = *(_DWORD *)(v1 + 74);
    if (v29 != 2 && (v29 & 1) == 0)
      unum_setAttribute();
    outlined destroy of ICUNumberFormatter.Signature(v1, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    goto LABEL_51;
  }
  v25 = *v6;
  if (v6[1] != 5)
  {
    *(_DWORD *)(v7 - 160) = 0;
    unum_setContext();
  }
  if (v25 < 2)
    goto LABEL_51;
  v26 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD000000000000012, 0x8000000182308690);
  *(_DWORD *)(v7 - 160) = 0;
  if (v26[2] >> 31)
    goto LABEL_60;
  unum_setTextAttribute();
  swift_release();
  if (*(int *)(v7 - 160) > 0)
  {
    v27 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD00000000000001CLL, 0x80000001823086B0);
    *(_DWORD *)(v7 - 160) = 0;
    if (v27[2] >> 31)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    unum_setTextAttribute();
    swift_release();
  }
LABEL_51:
  type metadata accessor for ICULegacyNumberFormatter();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v8;
  return result;
}

uint64_t setPrecision(_:formatter:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(result + 24);
  v2 = *(_QWORD *)(result + 40);
  v3 = *(unsigned __int8 *)(result + 56);
  if (v1 >> 1 != 0xFFFFFFFF || v2 > 1 || v3 >= 2)
  {
    v7 = *(_QWORD *)result;
    v6 = *(_QWORD *)(result + 8);
    v8 = *(_QWORD *)(result + 16);
    if ((v3 & 0x80) != 0)
    {
      v9 = *(_QWORD *)(result + 32);
      v10 = *(_QWORD *)(result + 48);
      result = unum_setAttribute();
      if ((v6 & 1) == 0)
      {
        if (v7 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v7 > 0x7FFFFFFF)
        {
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        result = unum_setAttribute();
      }
      if ((v1 & 1) == 0)
      {
        if (v8 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (v8 > 0x7FFFFFFF)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        result = unum_setAttribute();
      }
      if ((v2 & 1) == 0)
      {
        if (v9 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v9 > 0x7FFFFFFF)
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        result = unum_setAttribute();
      }
      if ((v3 & 1) != 0)
        return result;
      if (v10 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v10 <= 0x7FFFFFFF)
          return unum_setAttribute();
LABEL_44:
        __break(1u);
        return result;
      }
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    result = unum_setAttribute();
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      result = unum_setAttribute();
      if ((v8 & 1) != 0)
        return result;
      if (v6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v6 <= 0x7FFFFFFF)
          return unum_setAttribute();
        goto LABEL_36;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    __break(1u);
    goto LABEL_35;
  }
  return result;
}

void ICULegacyNumberFormatter.Signature.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[5];
  uint64_t v15;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v14[3] = *(_QWORD *)(v1 - 8);
  v14[4] = v1;
  MEMORY[0x1E0C80A78](v1);
  v14[2] = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v3);
  v14[1] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v14[0] = (char *)v14 - v6;
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v11);
  v15 = v0;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, (uint64_t)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (char *)sub_181B523F0 + 4 * byte_1820E3840[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_181B523F0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  Swift::UInt v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::UInt64 v21;
  Swift::UInt v22;
  uint64_t v23;

  outlined init with take of ICUNumberFormatter.Signature(v0, v3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v3;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v5;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
  v8 = *(_QWORD *)(v4 - 168);
  v7 = *(_QWORD *)(v4 - 160);
  v9 = v2;
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v3 + 16, v4 - 144);
  specialized Optional<A>.hash(into:)();
  v10 = *(unsigned __int8 *)(v3 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  v12 = *(unsigned __int16 *)(v3 + 74);
  v13 = v12 | (*(unsigned __int8 *)(v3 + 76) << 16);
  if (v12 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v13) & 1);
  }
  v14 = *(_QWORD *)(v4 - 152);
  v15 = *(unsigned __int8 *)(v3 + 77);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = v15 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  outlined init with copy of FloatingPointRoundingRule?(v3 + v9[9], v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v1, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *(_QWORD *)(v4 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v17, v1, v7);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v17, v7);
  }
  v18 = v3 + v9[10];
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v21 = v20;
      else
        v21 = 0;
      Hasher._combine(_:)(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
  }
  v22 = *(unsigned __int8 *)(v3 + v9[11]);
  if (v22 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
  }
  outlined destroy of ICUNumberFormatter.Signature(v3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v23 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_BYTE *)(v14 + *(int *)(v23 + 24)));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))ICULegacyNumberFormatter.Signature.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))ICULegacyNumberFormatter.Signature.hash(into:));
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.Signature and conformance ICULegacyNumberFormatter.Signature, type metadata accessor for ICULegacyNumberFormatter.Signature, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.Signature);
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys, &unk_1E0F25C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys, &unk_1E0F25C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys, &unk_1E0F25C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys, &unk_1E0F25C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys, &unk_1E0F25DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys, &unk_1E0F25DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys, &unk_1E0F25DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys, &unk_1E0F25DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys, &unk_1E0F25D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys, &unk_1E0F25D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys, &unk_1E0F25D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys, &unk_1E0F25D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys, &unk_1E0F25C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys, &unk_1E0F25C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys, &unk_1E0F25C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys, &unk_1E0F25C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys, &unk_1E0F25B70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys, &unk_1E0F25B70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys, &unk_1E0F25B70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys, &unk_1E0F25B70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys and conformance ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys);
  }
  return result;
}

void implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)()
{
  ICULegacyNumberFormatter.Signature.createNumberFormatter()();
}

uint64_t specialized static ICULegacyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  char v11;
  char v12;

  specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1, a2);
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
    v6 = *(int *)(v5 + 20);
    v7 = *(_QWORD *)(a1 + v6);
    v8 = *(_QWORD *)(a1 + v6 + 8);
    v9 = (_QWORD *)(a2 + v6);
    v10 = v7 == *v9 && v8 == v9[1];
    if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), v12 = 0, (v11 & 1) != 0))
      v12 = *(_BYTE *)(a1 + *(int *)(v5 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v5 + 24)) ^ 1;
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ICUError and conformance ICUError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUError and conformance ICUError;
  if (!lazy protocol witness table cache variable for type ICUError and conformance ICUError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUError, &type metadata for ICUError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUError and conformance ICUError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181B52F98 + 4 * byte_1820E384D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181B52FCC + 4 * byte_1820E3848[v4]))();
}

uint64_t sub_181B52FCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B52FD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B52FDCLL);
  return result;
}

uint64_t sub_181B52FE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B52FF0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181B52FF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B52FFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CodingKeys()
{
  return &unk_1E0F25C00;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys()
{
  return &unk_1E0F25B70;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.PercentCodingKeys()
{
  return &unk_1E0F25C90;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.CurrencyCodingKeys()
{
  return &unk_1E0F25D20;
}

uint64_t storeEnumTagSinglePayload for ICULegacyNumberFormatter.NumberFormatType.NumberCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181B5308C + 4 * byte_1820E3852[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181B530AC + 4 * byte_1820E3857[v4]))();
}

_BYTE *sub_181B5308C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181B530AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B530B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B530BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B530C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B530CC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ICULegacyNumberFormatter.NumberFormatType.DescriptiveCodingKeys()
{
  return &unk_1E0F25DB0;
}

uint64_t specialized ICULegacyNumberFormatter.NumberFormatType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t ICU.FieldPositer.__deallocating_deinit()
{
  ufieldpositer_close();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICU.FieldPositer()
{
  return objc_opt_self();
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1)
{
  id v1;
  uint64_t v3;
  uint64_t v4;

  v4 = a1;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v3);
  v1 = objc_msgSend(*(id *)(v3 + 16), sel_count);
  swift_release();
  return v1 == 0;
}

uint64_t *specialized Collection.count.getter(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61[5];
  _QWORD v62[6];

  v3 = result[8];
  if (v3)
    v4 = result[10];
  else
    v4 = 0;
  if (a2 < 0 || v4 < a2)
    goto LABEL_115;
  v6 = a3;
  v7 = result;
  v8 = result[9];
  v9 = result[11];
  if (v3)
  {
    if (result[10] > a2 && *(_WORD *)(v3 + 16) != 0)
    {
      v59 = result[9];
      v55 = result[11];
      v33 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        result = (uint64_t *)swift_unknownObjectRetain_n();
        v14 = a2;
        v34 = v3;
        while (1)
        {
          v36 = *(unsigned __int16 *)(v34 + 16);
          if (!*(_WORD *)(v34 + 16))
            goto LABEL_42;
          v37 = *(_QWORD *)(v34 + 40);
          v16 = __OFSUB__(v14, v37);
          v38 = v14 - v37;
          if (v16)
            goto LABEL_110;
          if (__OFADD__(v38, 1))
            goto LABEL_111;
          if (v38 + 1 < 1)
          {
            v36 = 0;
            goto LABEL_43;
          }
          if ((_DWORD)v36 == 1)
            break;
          v39 = (uint64_t *)(v34 + 64);
          v40 = 1;
          while (1)
          {
            v41 = *v39;
            v39 += 3;
            v14 = v38 - v41;
            if (__OFSUB__(v38, v41))
            {
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            if (__OFADD__(v14, 1))
              goto LABEL_106;
            if (v14 + 1 < 1)
              break;
            ++v40;
            v38 = v14;
            if (v36 == v40)
              goto LABEL_42;
          }
          v36 = v40;
          v14 = v38;
LABEL_43:
          v35 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
          v33 = ((-15 << v35) - 1) & v33 | (v36 << v35);
          v13 = *(_QWORD *)(v34 + 24 + 24 * v36);
          swift_unknownObjectRetain();
          result = (uint64_t *)swift_unknownObjectRelease();
          v34 = v13;
          if (!*(_BYTE *)(v13 + 18))
            goto LABEL_62;
        }
        v14 = v38;
LABEL_42:
        if (!v14)
          goto LABEL_43;
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      result = (uint64_t *)swift_unknownObjectRetain_n();
      v14 = a2;
      v13 = v3;
LABEL_62:
      v42 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        v43 = *(_QWORD *)(v13 + 24);
        v16 = __OFSUB__(v14, v43);
        v44 = v14 - v43;
        v6 = a3;
        if (v16)
          goto LABEL_123;
        if (__OFADD__(v44, 1))
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        if (v44 + 1 < 1)
        {
          v42 = 0;
LABEL_88:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v12 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v42 << 8);
          v9 = v55;
          goto LABEL_13;
        }
        if ((_DWORD)v42 != 1)
        {
          v49 = (uint64_t *)(v13 + 48);
          v50 = 1;
          while (1)
          {
            v51 = *v49;
            v49 += 3;
            v14 = v44 - v51;
            if (__OFSUB__(v44, v51))
              goto LABEL_116;
            if (__OFADD__(v14, 1))
              goto LABEL_117;
            if (v14 + 1 < 1)
              break;
            ++v50;
            v44 = v14;
            if (v42 == v50)
              goto LABEL_87;
          }
          v42 = v50;
          v14 = v44;
          goto LABEL_88;
        }
        v14 = v44;
      }
      else
      {
        v6 = a3;
      }
LABEL_87:
      if (v14)
        goto LABEL_121;
      goto LABEL_88;
    }
  }
  v11 = swift_unknownObjectRetain_n();
  v12 = specialized Rope._endPath.getter(v11);
  result = (uint64_t *)swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  if (!v3)
  {
    v15 = 0;
    v17 = a2;
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  result = (uint64_t *)swift_unknownObjectRelease_n();
  v16 = __OFSUB__(a2, v14);
  v17 = a2 - v14;
  if (v16)
  {
    __break(1u);
    goto LABEL_92;
  }
LABEL_14:
  v56 = v15;
  v57 = v12;
  v12 = v7[8];
  v18 = v7[9];
  v19 = v7;
  v20 = v7[10];
  v58 = v19;
  v59 = v19[11];
  if (a2 != v6)
  {
    v29 = v17;
    v30 = v18;
    v31 = swift_unknownObjectRetain();
    v17 = v30;
    v32 = v20;
    v3 = specialized Rope._endPath.getter(v31);
    if (v12)
    {
      swift_unknownObjectRelease();
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v17 = 0;
      v32 = 0;
    }
    v7 = v58;
LABEL_74:
    v62[0] = v59;
    v62[1] = v3;
    v62[2] = v15;
    v62[3] = v17;
    v62[4] = v32;
    v61[0] = v9;
    v61[1] = v57;
    v61[2] = v13;
    v61[3] = v56;
    v61[4] = v29;
    return specialized BidirectionalCollection._distance(from:to:)(v61, (uint64_t)v62, v7, a2, a3);
  }
  v54 = v18;
  v55 = v9;
  if (!v12)
  {
    if (a2 > 0)
      goto LABEL_122;
LABEL_71:
    swift_unknownObjectRetain_n();
    v3 = specialized Rope._endPath.getter(v12);
    swift_unknownObjectRelease();
    v15 = 0;
    v9 = 0;
    v7 = v58;
    v29 = v17;
    if (!v12)
      goto LABEL_101;
    goto LABEL_72;
  }
  if (v20 < a2)
    goto LABEL_120;
  if (!*(_WORD *)(v12 + 16) || v20 <= a2)
    goto LABEL_71;
  v21 = *(unsigned __int8 *)(v12 + 18);
  if (!*(_BYTE *)(v12 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v3 = 0;
    v9 = a2;
    v15 = v12;
    v7 = v58;
    v45 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16))
      goto LABEL_77;
LABEL_99:
    if (!v9)
    {
      while (1)
      {
LABEL_100:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v3 |= v45 << 8;
        v29 = v17;
        if (v12)
        {
LABEL_72:
          swift_unknownObjectRetain();
          v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v59, v3, v15, v12, v54);
          swift_unknownObjectRelease_n();
          v32 = a2 - v9;
          if (!__OFSUB__(a2, v9))
            goto LABEL_73;
        }
        else
        {
LABEL_101:
          v17 = 0;
          v32 = a2 - v9;
          if (!__OFSUB__(a2, v9))
          {
LABEL_73:
            v9 = v55;
            goto LABEL_74;
          }
        }
        __break(1u);
LABEL_104:
        v45 = v47;
        v9 = v46;
      }
    }
    goto LABEL_127;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v9 = a2;
  v15 = v12;
  v7 = v58;
  do
  {
    v23 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      v24 = *(_QWORD *)(v15 + 40);
      v16 = __OFSUB__(v9, v24);
      v25 = v9 - v24;
      if (v16)
        goto LABEL_113;
      if (__OFADD__(v25, 1))
        goto LABEL_114;
      if (v25 + 1 < 1)
      {
        v23 = 0;
        goto LABEL_23;
      }
      if ((_DWORD)v23 != 1)
      {
        v26 = (uint64_t *)(v15 + 64);
        v27 = 1;
        while (1)
        {
          v28 = *v26;
          v26 += 3;
          v9 = v25 - v28;
          if (__OFSUB__(v25, v28))
            goto LABEL_107;
          if (__OFADD__(v9, 1))
            goto LABEL_108;
          if (v9 + 1 < 1)
            break;
          ++v27;
          v25 = v9;
          if (v23 == v27)
            goto LABEL_22;
        }
        v23 = v27;
        v9 = v25;
        goto LABEL_23;
      }
      v9 = v25;
    }
LABEL_22:
    if (v9)
      goto LABEL_112;
LABEL_23:
    v22 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
    v21 = ((-15 << v22) - 1) & v21 | (v23 << v22);
    v15 = *(_QWORD *)(v15 + 24 + 24 * v23);
    swift_unknownObjectRetain();
    result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v15 + 18));
  v3 = v21 & 0xFFFFFFFFFFFFF0FFLL;
  v45 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
    goto LABEL_99;
LABEL_77:
  v48 = *(_QWORD *)(v15 + 24);
  v16 = __OFSUB__(v9, v48);
  v46 = v9 - v48;
  if (v16)
    goto LABEL_125;
  if (!__OFADD__(v46, 1))
  {
    if (v46 + 1 >= 1)
    {
      if ((_DWORD)v45 == 1)
      {
        v9 = v46;
        goto LABEL_99;
      }
      v52 = (uint64_t *)(v15 + 48);
      v47 = 1;
      while (1)
      {
        v53 = *v52;
        v52 += 3;
        v9 = v46 - v53;
        if (__OFSUB__(v46, v53))
          break;
        if (__OFADD__(v9, 1))
          goto LABEL_119;
        if (v9 + 1 < 1)
          goto LABEL_104;
        ++v47;
        v46 = v9;
        if (v45 == v47)
          goto LABEL_99;
      }
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
LABEL_92:
    v45 = 0;
    goto LABEL_100;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

BOOL static IndexSet.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL static IndexSet.Index.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL static IndexSet.Index.<= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL static IndexSet.Index.> infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

BOOL static IndexSet.Index.>= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

uint64_t IndexSet.RangeView.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t IndexSet.RangeView.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t *IndexSet.RangeView.init(indexSet:intersecting:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  id v7;
  uint64_t inited;
  uint64_t v9[2];
  uint64_t v10;

  v6 = *result;
  if ((a4 & 1) != 0)
    goto LABEL_4;
  if (!__OFSUB__(a3, a2))
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, a2, a3 - a2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v7;
    *(_BYTE *)(inited + 24) = 0;
    v9[0] = inited;
    v9[1] = v6;
    IndexSet.intersection(_:)(v9, (uint64_t)&v10);
    swift_release();
    swift_release();
    v6 = v10;
LABEL_4:
    result = (uint64_t *)objc_msgSend(*(id *)(v6 + 16), sel_rangeCount);
    *a5 = 0;
    a5[1] = result;
    a5[2] = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IndexSet.RangeView.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
  *(_QWORD *)(a3 + 32) = v4;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  return swift_retain();
}

Swift::Int __swiftcall IndexSet.RangeView.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall IndexSet.RangeView.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet.RangeView(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.count.getter(*a1, *a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet.RangeView@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v3 = *v2;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet.RangeView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v3;
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet.RangeView()
{
  _QWORD *v0;

  return *v0 == v0[1];
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet.RangeView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet.RangeView@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = result.n128_u64[0];
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet.RangeView()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet.RangeView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet.RangeView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySnySiGqd__Isgyrzo_10Foundation8IndexSetV9RangeViewVABsAG_pAMRszr__lIetMggrzo_Tp5(a1, a2);
}

void IndexSet.Index.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *(_QWORD *)(v0 + 24);
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x61722061206E6920;
  v3._object = (void *)0xEF20666F2065676ELL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 3943982;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x2065676E61725B20;
  v6._object = (void *)0xE900000000000023;
  String.append(_:)(v6);
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 47;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 93;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance IndexSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance IndexSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t IndexSet.init<A>(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (__OFSUB__(v10, v9))
  {
    __break(1u);
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    *(_BYTE *)(v8 + 24) = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    *a3 = v8;
  }
  return result;
}

uint64_t IndexSet.init(integer:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndex_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

void IndexSet.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  NSObject.hash(into:)();

}

uint64_t *IndexSet.rangeView(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(&v8, a1, a2, 0, a3);
}

uint64_t *IndexSet.rangeView<A>(of:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5[4];

  v3 = *v1;
  v5[1] = 0x7FFFFFFFFFFFFFFFLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v5[0] = v3;
  swift_retain();
  return IndexSet.RangeView.init(indexSet:intersecting:)(v5, v5[2], v5[3], 0, a1);
}

uint64_t IndexSet.subscript.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t IndexSet.subscript.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)(a2 + 80) = *v2;
  v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

id IndexSet.first.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_firstIndex);
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThan(_:)(Swift::Int a1)
{
  id v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanIndex_);
  result.value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThan(_:)(Swift::Int a1)
{
  id v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanIndex_);
  result.value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerGreaterThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexGreaterThanOrEqualToIndex_);
  result.value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.integerLessThanOrEqualTo(_:)(Swift::Int a1)
{
  id v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = IndexSet.integerGreaterThan(_:)(a1, (SEL *)&selRef_indexLessThanOrEqualToIndex_);
  result.value = (Swift::Int)v1;
  result.is_nil = v2;
  return result;
}

id IndexSet.integerGreaterThan(_:)(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), *a2, a1);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL)
    return 0;
  return result;
}

char *IndexSet.indexRange(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  id v8;
  uint64_t v9;
  char *result;
  BOOL v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];

  v5 = *v3;
  if (a1 == a2)
    goto LABEL_9;
  v8 = objc_msgSend(*(id *)(v5 + 16), sel_firstIndex);
  if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_9;
  v9 = (uint64_t)v8;
  result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_lastIndex);
  if (result == (char *)0x7FFFFFFFFFFFFFFFLL || (uint64_t)result < a1)
    goto LABEL_9;
  v11 = __OFSUB__(a2, 1);
  v12 = a2 - 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    if (v12 < v9
      || (v13 = objc_msgSend(*(id *)(v5 + 16), sel_indexGreaterThanOrEqualToIndex_, a1), v13 == (id)0x7FFFFFFFFFFFFFFFLL)
      || (v14 = (uint64_t)v13,
          v15 = objc_msgSend(*(id *)(v5 + 16), sel_indexLessThanOrEqualToIndex_, v12),
          v15 == (id)0x7FFFFFFFFFFFFFFFLL))
    {
LABEL_9:
      *(_QWORD *)&v25[0] = v5;
      result = IndexSet._index(ofInteger:)(0, (uint64_t *)v28);
      v16 = *(_OWORD *)v28;
      v17 = *(_OWORD *)&v28[16];
      v18 = *(_QWORD *)&v28[32];
      *(_OWORD *)a3 = *(_OWORD *)v28;
      *(_OWORD *)(a3 + 16) = v17;
      *(_QWORD *)(a3 + 32) = v18;
      *(_OWORD *)(a3 + 40) = v16;
      *(_OWORD *)(a3 + 56) = v17;
      *(_QWORD *)(a3 + 72) = v18;
      return result;
    }
    v19 = (uint64_t)v15;
    IndexSet._index(ofInteger:)(v14, (uint64_t *)v28);
    v20 = *(_OWORD *)v28;
    v21 = *(_OWORD *)&v28[16];
    v22 = *(_QWORD *)&v28[32];
    IndexSet._index(ofInteger:)(v19, (uint64_t *)v28);
    v26 = *(_QWORD *)&v28[32];
    v27 = v5;
    v25[0] = *(_OWORD *)v28;
    v25[1] = *(_OWORD *)&v28[16];
    result = IndexSet.index(after:)(v25, v28);
    v23 = *(_QWORD *)v28;
    if (*(uint64_t *)v28 >= (uint64_t)v20)
    {
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v21;
      *(_QWORD *)(a3 + 32) = v22;
      *(_QWORD *)(a3 + 40) = v23;
      v24 = *(_OWORD *)&v28[24];
      *(_OWORD *)(a3 + 48) = *(_OWORD *)&v28[8];
      *(_OWORD *)(a3 + 64) = v24;
      return result;
    }
  }
  __break(1u);
  return result;
}

char *IndexSet._index(ofInteger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  char *result;
  char *v8;
  void *v9;
  char v10;
  uint64_t v11;
  char *v12;
  BOOL v13;

  v5 = *v2;
  v6 = objc_msgSend(*(id *)(*v2 + 16), sel_rangeCount);
  result = (char *)objc_msgSend(*(id *)(v5 + 16), sel__indexOfRangeContainingIndex_, a1);
  if (result == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    *a2 = a1;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
LABEL_13:
    a2[4] = (uint64_t)v6;
    return result;
  }
  v8 = result;
  v9 = *(void **)(v5 + 16);
  v10 = *(_BYTE *)(v5 + 24);
  result = (char *)objc_msgSend(v9, sel_rangeAtIndex_, v8);
  v12 = &result[v11];
  v13 = __OFADD__(result, v11);
  if ((v10 & 1) != 0)
  {
    if (v13)
    {
      __break(1u);
      goto LABEL_15;
    }
    if ((uint64_t)v12 >= (uint64_t)result)
    {
LABEL_12:
      *a2 = a1;
      a2[1] = (uint64_t)result;
      a2[2] = (uint64_t)v12;
      a2[3] = (uint64_t)v8;
      goto LABEL_13;
    }
    __break(1u);
  }
  if (v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)v12 >= (uint64_t)result)
    goto LABEL_12;
LABEL_16:
  __break(1u);
  return result;
}

char *IndexSet.index(after:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v5;
  char *result;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  BOOL v15;

  v5 = __OFADD__(*a1, 1);
  result = (char *)(*a1 + 1);
  if (v5)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = (char *)a1[1];
  v7 = (char *)a1[2];
  v9 = a1[3];
  v10 = a1[4];
  if (result != v7)
    goto LABEL_14;
  v11 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_16;
  result = (char *)a1[2];
  if (v11 == v10)
    goto LABEL_14;
  v12 = *(void **)(*(_QWORD *)v2 + 16);
  v13 = *(_BYTE *)(*(_QWORD *)v2 + 24);
  result = (char *)objc_msgSend(v12, sel_rangeAtIndex_, v9 + 1);
  v7 = &result[v14];
  v15 = __OFADD__(result, v14);
  if ((v13 & 1) != 0)
  {
    if (!v15)
    {
      v8 = result;
      v9 = v11;
      if ((uint64_t)v7 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_12;
      }
LABEL_14:
      *a2 = result;
      a2[1] = v8;
      a2[2] = v7;
      a2[3] = v9;
      a2[4] = v10;
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_12:
  if (v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = result;
  v9 = v11;
  if ((uint64_t)v7 >= (uint64_t)result)
    goto LABEL_14;
LABEL_19:
  __break(1u);
  return result;
}

char *IndexSet.indexRange<A>(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  return IndexSet.indexRange(in:)(v3, v4, a1);
}

id IndexSet.count(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  BOOL v5;

  result = *(id *)(*(_QWORD *)v2 + 16);
  v5 = __OFSUB__(a2, a1);
  if ((*(_BYTE *)(*(_QWORD *)v2 + 24) & 1) != 0)
  {
    if (!v5)
      return objc_msgSend(result, sel_countOfIndexesInRange_);
    __break(1u);
  }
  if (!v5)
    return objc_msgSend(result, sel_countOfIndexesInRange_);
  __break(1u);
  return result;
}

id IndexSet.count<A>(in:)()
{
  uint64_t *v0;
  uint64_t v1;
  id result;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = *(id *)(v1 + 16);
  v3 = __OFSUB__(v5, v4);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if (!v3)
      return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
    __break(1u);
  }
  if (!v3)
    return objc_msgSend(result, sel_countOfIndexesInRange_, v4, v5 - v4, 0, 0x7FFFFFFFFFFFFFFFLL);
  __break(1u);
  return result;
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_containsIndexesInRange_);
}

id IndexSet.intersects(integersIn:)(uint64_t a1, uint64_t a2)
{
  return IndexSet.contains(integersIn:)(a1, a2, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  id result;
  BOOL v6;

  result = *(id *)(*(_QWORD *)v3 + 16);
  v6 = __OFSUB__(a2, a1);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 24) & 1) != 0)
  {
    if (!v6)
      return objc_msgSend(result, *a3, a1, a2 - a1);
    __break(1u);
  }
  if (!v6)
    return objc_msgSend(result, *a3, a1, a2 - a1);
  __break(1u);
  return result;
}

id IndexSet.intersects<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IndexSet.contains<A>(integersIn:)(a1, a2, a3, (SEL *)&selRef_intersectsIndexesInRange_);
}

id IndexSet.contains<A>(integersIn:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  uint64_t v6;
  id result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = *(id *)(v6 + 16);
  v8 = __OFSUB__(v10, v9);
  if ((*(_BYTE *)(v6 + 24) & 1) != 0)
  {
    if (!v8)
      return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
    __break(1u);
  }
  if (!v8)
    return objc_msgSend(result, *a4, v9, v10 - v9, 0, 0x7FFFFFFFFFFFFFFFLL);
  __break(1u);
  return result;
}

char *IndexSet.index(before:)@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  void *v11;
  char v12;
  uint64_t v13;
  BOOL v14;

  v6 = (char *)*a1;
  result = (char *)a1[1];
  v7 = (char *)a1[2];
  v8 = (char *)a1[3];
  v9 = (char *)a1[4];
  if (v6 != result)
    goto LABEL_11;
  if (!v8)
  {
LABEL_14:
    result = v6;
LABEL_18:
    *a2 = v6;
    a2[1] = result;
    a2[2] = v7;
    a2[3] = v8;
    a2[4] = v9;
    return result;
  }
  v10 = __OFSUB__(v8--, 1);
  if (v10)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = *(void **)(*(_QWORD *)v2 + 16);
  v12 = *(_BYTE *)(*(_QWORD *)v2 + 24);
  result = (char *)objc_msgSend(v11, sel_rangeAtIndex_, v8);
  v7 = &result[v13];
  v14 = __OFADD__(result, v13);
  if ((v12 & 1) != 0)
  {
    if (v14)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if ((uint64_t)v7 < (uint64_t)result)
    {
      __break(1u);
LABEL_11:
      v10 = __OFSUB__(v6--, 1);
      if (!v10)
        goto LABEL_18;
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)v7 >= (uint64_t)result)
  {
LABEL_17:
    v6 = v7 - 1;
    if (!__OFSUB__(v7, 1))
      goto LABEL_18;
    goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

char **IndexSet.formIndex(before:)(char **result)
{
  uint64_t *v1;
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;

  v2 = result;
  v3 = *result;
  v4 = result[1];
  if (*result != v4)
    goto LABEL_11;
  v5 = result[3];
  if (!v5)
    return result;
  v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v7 = *v1;
  result[3] = v6;
  v8 = *(_BYTE *)(v7 + 24);
  result = (char **)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  v3 = (char *)result + v9;
  LOBYTE(v4) = __OFADD__(result, v9);
  if ((v8 & 1) == 0)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)v3 < (uint64_t)result)
  {
    __break(1u);
LABEL_11:
    v10 = __OFSUB__(v3--, 1);
    if (!v10)
      goto LABEL_17;
    __break(1u);
LABEL_14:
    if ((v4 & 1) != 0)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if ((uint64_t)v3 < (uint64_t)result)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  v2[1] = (char *)result;
  v2[2] = v3;
  v10 = __OFSUB__(v3--, 1);
  if (v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_17:
  *v2 = v3;
  return result;
}

char *IndexSetBoundaryIterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL *v4;
  _QWORD *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  if (*(_BYTE *)(v0 + 80) == 1)
  {
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
      return 0;
    v4 = (BOOL *)(v0 + 104);
    v5 = (_QWORD *)(v0 + 88);
    v6 = (char **)(v0 + 96);
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v2 = 64;
    if (*(_BYTE *)(v0 + 105))
      v2 = 72;
    v3 = *(_QWORD *)(v0 + v2);
    v4 = (BOOL *)(v0 + 104);
    v5 = (_QWORD *)(v0 + 88);
    v6 = (char **)(v0 + 96);
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
    {
      v1 = 0x7FFFFFFFFFFFFFFFLL;
      if ((*(_BYTE *)(v0 + 105) & 1) != 0)
        goto LABEL_19;
      if (v3 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v7 = 0;
        v3 = 0x7FFFFFFFFFFFFFFFLL;
        if ((*(_BYTE *)(v0 + 106) & 1) != 0)
          goto LABEL_46;
LABEL_23:
        v12 = 1;
LABEL_69:
        *(_BYTE *)(v0 + 106) = v12;
        goto LABEL_70;
      }
LABEL_31:
      LOBYTE(v7) = 0;
LABEL_70:
      *(_BYTE *)(v0 + 105) = v7 ^ 1;
      return (char *)v3;
    }
  }
  v8 = *(unsigned __int8 *)(v0 + 106);
  v9 = 88;
  if (*(_BYTE *)(v0 + 106))
    v9 = 96;
  v1 = *(_QWORD *)(v0 + v9);
  if (v1 < v3)
  {
    if (!*(_BYTE *)(v0 + 106))
    {
LABEL_62:
      *(_BYTE *)(v0 + 106) = v8 ^ 1;
      return (char *)v1;
    }
    v7 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 40);
    if (v7 == v3)
    {
      result = 0;
      v11 = 0;
LABEL_61:
      *v5 = result;
      *v6 = v11;
      *v4 = v7 == v3;
      goto LABEL_62;
    }
    v17 = *(_QWORD *)(v0 + 48);
    v18 = *(_BYTE *)(v17 + 24);
    result = (char *)objc_msgSend(*(id *)(v17 + 16), sel_rangeAtIndex_, *(_QWORD *)(v0 + 56));
    v11 = &result[v19];
    v16 = __OFADD__(result, v19);
    if ((v18 & 1) == 0)
      goto LABEL_56;
    if (v16)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if ((uint64_t)v11 >= (uint64_t)result)
    {
LABEL_58:
      if ((uint64_t)v11 >= (uint64_t)result)
      {
        if (!__OFADD__(v7, 1))
        {
          *(_QWORD *)(v0 + 56) = v7 + 1;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    __break(1u);
LABEL_39:
    if (v16)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if ((uint64_t)v11 < (uint64_t)result)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    goto LABEL_41;
  }
  if ((*(_BYTE *)(v0 + 105) & 1) == 0)
  {
    if (v3 == v1)
    {
      v7 = 0;
      if (*(_BYTE *)(v0 + 106))
        goto LABEL_46;
      goto LABEL_23;
    }
    goto LABEL_31;
  }
LABEL_19:
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 8);
  if (v7 == v8)
  {
    result = 0;
    v11 = 0;
    goto LABEL_44;
  }
  v13 = *(_QWORD *)(v0 + 16);
  v14 = *(_BYTE *)(v13 + 24);
  result = (char *)objc_msgSend(*(id *)(v13 + 16), sel_rangeAtIndex_, *(_QWORD *)(v0 + 24));
  v11 = &result[v15];
  v16 = __OFADD__(result, v15);
  if ((v14 & 1) == 0)
    goto LABEL_39;
  if (v16)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_31;
  }
LABEL_41:
  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_73;
  }
  if (__OFADD__(v7, 1))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(_QWORD *)(v0 + 24) = v7 + 1;
LABEL_44:
  *(_QWORD *)(v0 + 64) = result;
  *(_QWORD *)(v0 + 72) = v11;
  *(_BYTE *)(v0 + 80) = v7 == v8;
  if (v3 != v1)
  {
    LOBYTE(v7) = 1;
    goto LABEL_70;
  }
  v7 = 1;
  v12 = 1;
  if ((*(_BYTE *)(v0 + 106) & 1) == 0)
    goto LABEL_69;
LABEL_46:
  v1 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  if (v1 == v8)
  {
    result = 0;
    v11 = 0;
LABEL_68:
    v12 = 0;
    *v5 = result;
    *v6 = v11;
    *v4 = v1 == v8;
    goto LABEL_69;
  }
  v20 = *(_QWORD *)(v0 + 48);
  v21 = *(_BYTE *)(v20 + 24);
  result = (char *)objc_msgSend(*(id *)(v20 + 16), sel_rangeAtIndex_, *(_QWORD *)(v0 + 56));
  v11 = &result[v22];
  v16 = __OFADD__(result, v22);
  if ((v21 & 1) != 0)
  {
    if (v16)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if ((uint64_t)v11 < (uint64_t)result)
    {
      __break(1u);
LABEL_56:
      if (v16)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if ((uint64_t)v11 < (uint64_t)result)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      goto LABEL_58;
    }
LABEL_65:
    if ((uint64_t)v11 >= (uint64_t)result)
    {
      if (!__OFADD__(v1, 1))
      {
        *(_QWORD *)(v0 + 56) = v1 + 1;
        goto LABEL_68;
      }
      goto LABEL_80;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v16)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if ((uint64_t)v11 >= (uint64_t)result)
    goto LABEL_65;
LABEL_86:
  __break(1u);
  return result;
}

uint64_t IndexSet.formSymmetricDifference(_:)(_QWORD *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, _QWORD *))IndexSet.symmetricDifference(_:));
}

Swift::Int_optional __swiftcall IndexSet.update(with:)(Swift::Int with)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  Swift::Int v8;
  Swift::Bool v9;
  void *v10;
  Swift::Int_optional result;

  if (*(_BYTE *)(*(_QWORD *)v1 + 24) != 1)
  {
    v4 = *(void **)(*(_QWORD *)v1 + 16);
LABEL_6:
    v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v10;
    *(_BYTE *)(v6 + 24) = 1;
    *(_QWORD *)v1 = v6;
    v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, with);

    goto LABEL_7;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(void **)(*(_QWORD *)v1 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v1 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_6;
  objc_msgSend(v4, sel_addIndex_, with);
LABEL_7:
  v8 = with;
  v9 = 0;
  result.value = v8;
  result.is_nil = v9;
  return result;
}

Swift::Int_optional __swiftcall IndexSet.remove(_:)(Swift::Int a1)
{
  uint64_t v1;
  unsigned int v3;
  char isUniquelyReferenced_nonNull_native;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  char v9;
  Swift::Int v10;
  void *v11;
  Swift::Int_optional result;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_containsIndex_, a1);
  if (*(_BYTE *)(*(_QWORD *)v1 + 24) == 1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v5 = *(void **)(*(_QWORD *)v1 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v1 + 24) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v5, sel_removeIndex_, a1);
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *(void **)(*(_QWORD *)v1 + 16);
  }
  v6 = v5;
  objc_msgSend(v6, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v11;
  *(_BYTE *)(v7 + 24) = 1;
  *(_QWORD *)v1 = v7;
  v8 = v11;
  swift_release();
  objc_msgSend(v8, sel_removeIndex_, a1);

LABEL_7:
  v9 = v3 ^ 1;
  if (v3)
    v10 = a1;
  else
    v10 = 0;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

uint64_t IndexSet.filteredIndexSet(in:includeInteger:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v25;
  uint64_t aBlock;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  id v32;

  v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = result;
  v10 = *(void **)(*(_QWORD *)v5 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v5 + 24) & 1) != 0)
  {
    v32 = 0;
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = a3;
    v11[3] = a4;
    v11[4] = &v32;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:);
    *(_QWORD *)(v12 + 24) = v11;
    v30 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v31 = v12;
    aBlock = MEMORY[0x1E0C809B0];
    v27 = 1107296256;
    v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v29 = &block_descriptor_8;
    v13 = _Block_copy(&aBlock);
    v14 = v10;
    swift_retain();
    swift_release();
    v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v13);
    _Block_release(v13);
    LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v13 & 1) == 0)
    {
      if (v15)
        goto LABEL_5;
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  v32 = 0;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = &v32;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)partial apply;
  *(_QWORD *)(v21 + 24) = v20;
  v30 = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)partial apply;
  v31 = v21;
  aBlock = MEMORY[0x1E0C809B0];
  v27 = 1107296256;
  v28 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v29 = &block_descriptor_14;
  v22 = _Block_copy(&aBlock);
  swift_retain();
  v14 = v10;
  swift_release();
  v15 = objc_msgSend(v14, sel_indexesInRange_options_passingTest_, v9, v6, 0, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v22 & 1) == 0)
  {
    if (v15)
    {
LABEL_5:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      v16 = swift_allocObject();
      v17 = v15;
      objc_msgSend(v17, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
      swift_dynamicCast();
      *(_QWORD *)(v16 + 16) = v25;
      *(_BYTE *)(v16 + 24) = 0;

      v18 = v32;
      if (v32)
      {
LABEL_6:
        v19 = v18;
        swift_willThrow();
        swift_release();

        return swift_release();
      }
      goto LABEL_10;
    }
LABEL_9:
    v23 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v23;
    *(_BYTE *)(v16 + 24) = 0;
    v18 = v32;
    if (v32)
      goto LABEL_6;
LABEL_10:

    result = swift_release();
    *a5 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  BOOL v5;
  uint64_t v6;

  v5 = __OFADD__(a2, 1);
  v6 = a2 + 1;
  if (!v5)
    return IndexSet.filteredIndexSet(in:includeInteger:)(result, v6, a3, a4, a5);
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3) & 1;
}

uint64_t IndexSet.filteredIndexSet(includeInteger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return IndexSet.filteredIndexSet(in:includeInteger:)(0, 0x7FFFFFFFFFFFFFFELL, a1, a2, a3);
}

Swift::Int IndexSet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t *v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = *(_QWORD *)(a1 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:)((char **)v6, a2, *v3, a3);
}

id protocol witness for SetAlgebra.contains(_:) in conformance IndexSet(_QWORD *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_containsIndex_, *a1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet(a1, a2, a3, (void (*)(void))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance IndexSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IndexSet.intersection(_:)(a1, a2);
  return swift_release();
}

Swift::Int protocol witness for SetAlgebra.remove(_:) in conformance IndexSet@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4;

  v4 = IndexSet.remove(_:)(*a1);
  *(_QWORD *)a2 = v4.value;
  *(_BYTE *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

unint64_t protocol witness for SetAlgebra.update(with:) in conformance IndexSet@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = (unint64_t)IndexSet.update(with:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(a1, a2, a3, (void (*)(uint64_t *__return_ptr, _QWORD *))IndexSet.union(_:));
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance IndexSet(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(a1, a2, a3, (void (*)(uint64_t *__return_ptr, _QWORD *))IndexSet.symmetricDifference(_:));
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance IndexSet(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  v5 = *v4;
  v7[0] = *a1;
  v7[1] = v5;
  a4(&v8, v7);
  swift_release();
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance IndexSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v8 = *v2;
  v6[0] = v4;
  v6[1] = v8;
  swift_retain();
  IndexSet.symmetricDifference(_:)(v6, &v7);
  IndexSet.intersection(_:)(&v7, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v6 = *v1;
  v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v6 = *a1;
  v7 = v2;
  IndexSet.intersection(_:)(&v7, (uint64_t)&v5);
  v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v6);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance IndexSet(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

void protocol witness for Hashable.hash(into:) in conformance IndexSet()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  NSObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexSet()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for Collection.indices.getter in conformance IndexSet@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;

  v2 = a1 + 1;
  *a1 = *v1;
  v3 = a1 + 6;
  swift_retain();
  IndexSet.startIndex.getter(v2);
  return IndexSet.endIndex.getter(v3);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IndexSet()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count) == 0;
}

double protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexSet@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 41) = 1;
  return result;
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IndexSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v9 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  v11 = *(_QWORD *)(a3 + 32);
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)((char **)v8, a2, (void **)v10, *v4, a4);
}

char *protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexSet(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  v9 = *(_QWORD *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)(v6, (void **)v8, *v2);
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[5];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexSet(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[5] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[5] < result[5])
    __break(1u);
  return result;
}

id protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexSet()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexSet@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t IndexSet.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x73657865646E6920;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t IndexSet.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v22[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = *(void **)(*v0 + 16);
  swift_retain();
  v10 = specialized _copyCollectionToContiguousArray<A>(_:)(0, (uint64_t)objc_msgSend(v9, sel_rangeCount), v8);
  swift_release();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Range<Int>]);
  *(_QWORD *)&v23 = v10;
  v21 = xmmword_1820E4020;
  outlined init with take of Any(&v23, v22);
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  v14 = &v11[6 * v13];
  v15 = v21;
  v16 = v22[1];
  v14[3] = v22[0];
  v14[4] = v16;
  v14[2] = v15;
  *(_QWORD *)&v21 = v8;
  *(_QWORD *)&v23 = v11;
  v17 = *MEMORY[0x1E0DEDFB8];
  v18 = type metadata accessor for Mirror.DisplayStyle();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v7, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v7, 0, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static IndexSet._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IndexSet()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  return v2;
}

uint64_t NSIndexSet._toCustomAnyHashable()()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v1 = swift_allocObject();
  v2 = v0;
  objc_msgSend(v2, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = 0;

  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexSet()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSIndexSet._toCustomAnyHashable()();

}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.CodingKeys()
{
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.CodingKeys()
{
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexSet.RangeCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6874676E656CLL;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexSet.RangeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized IndexSet.RangeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexSet.RangeCodingKeys()
{
  lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexSet.RangeCodingKeys()
{
  lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t IndexSet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  char v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.RangeCodingKeys>);
  v4 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexSet.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v24 = v6;
  v25 = v4;
  v26 = v8;
  v12 = v28;
  KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v22 = v10;
  v23 = v7;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  *(_BYTE *)(v14 + 24) = 0;
  v33 = v14;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
  {
    v15 = v26;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *v12 = v14;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  v15 = v26;
  v17 = v27;
  v19 = v24;
  v18 = v25;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
    lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
    dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
    v30 = 0;
    v20 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = 1;
    result = KeyedDecodingContainer.decode(_:forKey:)();
    v21 = v20 + result;
    if (__OFADD__(v20, result))
      break;
    if (v21 < v20)
      goto LABEL_12;
    IndexSet.insert(integersIn:)(v20, v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v17);
    __swift_project_boxed_opaque_existential_1(v31, v32);
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
    {
      v14 = v33;
      v12 = v28;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

char *IndexSet.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  char v14;
  char *result;
  char *v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  char v31;

  v3 = v2;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.RangeCodingKeys>);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexSet.CodingKeys>);
  v23 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v11 = *(void **)(v10 + 16);
  v27 = v10;
  swift_retain();
  v12 = objc_msgSend(v11, sel_rangeCount);
  v24 = v7;
  v25 = v12;
  v22 = v9;
  if (v12)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_BYTE *)(v27 + 24);
      result = (char *)objc_msgSend(*(id *)(v27 + 16), sel_rangeAtIndex_, v13, v22);
      v16 = result;
      v18 = &result[v17];
      v19 = __OFADD__(result, v17);
      if ((v14 & 1) != 0)
      {
        if (v19)
          goto LABEL_24;
        if ((uint64_t)v18 < (uint64_t)result)
          goto LABEL_25;
      }
      else
      {
        if (v19)
          goto LABEL_26;
        if ((uint64_t)v18 < (uint64_t)result)
          goto LABEL_27;
      }
      if ((uint64_t)v18 < (uint64_t)result)
        break;
      v20 = (id)(v13 + 1);
      if (__OFADD__(v13, 1))
        goto LABEL_22;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
      lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys();
      dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
      v31 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v28);
        goto LABEL_20;
      }
      result = (char *)(v18 - v16);
      if (__OFSUB__(v18, v16))
        goto LABEL_23;
      v31 = 1;
      v21 = v28;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v21);
      ++v13;
      if (v20 == v25)
        goto LABEL_20;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_20:
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v24);
    return (char *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexSet@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IndexSet.init(from:)(a1, a2);
}

char *protocol witness for Encodable.encode(to:) in conformance IndexSet(_QWORD *a1)
{
  return IndexSet.encode(to:)(a1);
}

void *IndexSet.init(integersIn:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(_QWORD *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *result;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[2];
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  _QWORD v46[4];
  void *v47;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v38 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>.Ranges);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v38 - v14;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RangeSet<Int>);
  v44 = a1;
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, &demangling cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x1E0DEE828]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v47 == (void *)v46[0])
  {
    v16 = *(void (**)(char *, uint64_t))(v10 + 8);
    v16(v15, v9);
  }
  else
  {
    v17 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v17(v46, 0);
    v16 = *(void (**)(char *, uint64_t))(v10 + 8);
    v16(v15, v9);
    if (v19 < 0)
    {
      result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v44);
      v22 = 0;
      goto LABEL_6;
    }
  }
  v20 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v21 = v3;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  *(_BYTE *)(v22 + 24) = 0;
  RangeSet.ranges.getter();
  v45 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v45(v5, v12, v9);
  dispatch thunk of Collection.startIndex.getter();
  v16(v12, v9);
  *(_QWORD *)&v5[*(int *)(v21 + 36)] = v46[0];
  outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v5, (uint64_t)v8);
  v23 = &v8[*(int *)(v21 + 36)];
  v24 = *(_QWORD *)v23;
  dispatch thunk of Collection.endIndex.getter();
  if (v24 == v46[0])
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v44);
    result = (void *)outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v8);
LABEL_6:
    *v41 = v22;
    return result;
  }
  v38[1] = MEMORY[0x1E0DEE9B8] + 8;
  v39 = v16;
  while (1)
  {
    while (1)
    {
      v26 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v28 = *v27;
      v29 = v27[1];
      v26(v46, 0);
      v45(v12, v8, v9);
      dispatch thunk of Collection.formIndex(after:)();
      v16(v12, v9);
      if ((*(_BYTE *)(v22 + 24) & 1) != 0)
        break;
      result = *(void **)(v22 + 16);
LABEL_15:
      v42 = result;
      objc_msgSend(v42, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      v32 = v47;
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v32;
      *(_BYTE *)(v33 + 24) = 1;
      v34 = v32;
      result = (void *)swift_release();
      v35 = v29 - v28;
      if (__OFSUB__(v29, v28))
        goto LABEL_23;
LABEL_19:
      v22 = v33;
      objc_msgSend(v34, sel_addIndexesInRange_, v28, v35);

      v37 = *(_QWORD *)v23;
      dispatch thunk of Collection.endIndex.getter();
      v16 = v39;
      if (v37 == v46[0])
        goto LABEL_5;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    result = *(void **)(v22 + 16);
    if ((*(_BYTE *)(v22 + 24) & 1) == 0)
      goto LABEL_15;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v42 = result;
      objc_msgSend(v42, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      v36 = v47;
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v36;
      *(_BYTE *)(v33 + 24) = 1;
      v34 = v36;
      result = (void *)swift_release();
      v35 = v29 - v28;
      if (__OFSUB__(v29, v28))
        goto LABEL_24;
      goto LABEL_19;
    }
    if (__OFSUB__(v29, v28))
      break;
    objc_msgSend(result, sel_addIndexesInRange_, v28, v29 - v28);
    v31 = *(_QWORD *)v23;
    dispatch thunk of Collection.endIndex.getter();
    if (v31 == v46[0])
      goto LABEL_5;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t RangeSet<>.init(_:)(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_rangeCount);
  lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView();
  return RangeSet.init<A>(_:)();
}

uint64_t specialized static IndexSet.RangeView.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (*a1 == *a2 && a1[1] == a2[1])
  {
    v4 = a1[2];
    v6 = a2[2];
    v7 = v4;
    v3 = specialized static IndexSet.== infix(_:_:)((uint64_t)&v7, (uint64_t)&v6);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_181B56F34()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in IndexSet.filteredIndexSet(in:includeInteger:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_181B56F50()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_181B56F84()
{
  return swift_deallocObject();
}

uint64_t sub_181B56F94()
{
  return swift_deallocObject();
}

uint64_t specialized static IndexSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  id v5;
  uint64_t result;
  uint64_t v7;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v4 = swift_allocObject();
  v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  result = swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return result;
}

uint64_t specialized static IndexSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v7;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v4 = swift_allocObject();
  v5 = a1;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

unint64_t lazy protocol witness table accessor for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_1E0F31BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_1E0F31BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_1E0F31BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.CodingKeys, &unk_1E0F31BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.CodingKeys and conformance IndexSet.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_1E0F31C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_1E0F31C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_1E0F31C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeCodingKeys, &unk_1E0F31C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeCodingKeys and conformance IndexSet.RangeCodingKeys);
  }
  return result;
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet.RangeView>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet.RangeView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet.RangeView>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<IndexSet.RangeView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet.RangeView>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet.RangeView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexSet.RangeView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexSet.RangeView>, MEMORY[0x1E0DEC908]);
}

unint64_t instantiation function for generic protocol witness table for IndexSet(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[2] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[3] = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  result = lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IndexSet()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<IndexSet> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexSet>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<IndexSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IndexSet>, MEMORY[0x1E0DEDE48]);
}

_QWORD *assignWithCopy for IndexSet.RangeView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexSet.RangeView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexSet.RangeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IndexSet.Index(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IndexSet.Index(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

uint64_t type metadata completion function for _MutablePair()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MutablePair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _MutablePair(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_181B579B8 + 4 * byte_1820E4035[v7]))();
  }
}

uint64_t initializeWithCopy for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t initializeWithTake for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _MutablePair(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181B57F74 + 4 * byte_1820E4058[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for _MutablePair(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for _MutablePair(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181B581B8 + 4 * byte_1820E4066[v3]))();
}

void destructiveInjectEnumTag for _MutablePair(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for _MutablePair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutablePair);
}

uint64_t storeEnumTagSinglePayload for IndexSet.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181B58334 + 4 * byte_1820E406B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181B58354 + 4 * byte_1820E4070[v4]))();
}

_BYTE *sub_181B58334(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181B58354(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B5835C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B58364(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B5836C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B58374(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for IndexSet.CodingKeys()
{
  return &unk_1E0F31BB8;
}

uint64_t storeEnumTagSinglePayload for IndexSet.RangeCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B583DC + 4 * byte_1820E407A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B58410 + 4 * byte_1820E4075[v4]))();
}

uint64_t sub_181B58410(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B58418(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B58420);
  return result;
}

uint64_t sub_181B5842C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B58434);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B58438(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B58440(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for IndexSet.RangeCodingKeys()
{
  return &unk_1E0F31C48;
}

uint64_t specialized IndexSet.RangeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized CVarArg<>._cVarArgEncoding.getter()
{
  id v0;
  uint64_t v1;

  v0 = (id)String._bridgeToObjectiveCImpl()();
  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 1;
  *(_QWORD *)(v1 + 32) = v0;
  swift_unknownObjectRelease();
  return v1;
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1.super.isa);
  v4 = v3;

  v5 = (uint64_t)v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance String@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSString __swiftcall Substring._bridgeToObjectiveC()()
{
  uint64_t v0;

  MEMORY[0x186DA4634]();
  v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return (NSString)v0;
}

BOOL static Substring._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  specialized static Substring._forceBridgeFromObjectiveC(_:result:)(a1, a2);
  return a2[3] != 0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Substring()
{
  _QWORD *v0;
  uint64_t v1;

  MEMORY[0x186DA4634](*v0, v0[1], v0[2], v0[3]);
  v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Substring(void *a1, uint64_t *a2)
{
  specialized static Substring._forceBridgeFromObjectiveC(_:result:)(a1, a2);
  return a2[3] != 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Substring@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t specialized static Substring._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = String.subscript.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v10;
  return result;
}

uint64_t specialized static Substring._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  uint64_t v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v1 = String.subscript.getter();
  swift_bridgeObjectRelease();
  return v1;
}

void __swiftcall CollectionDifference.Change._bridgeToObjectiveC()(NSOrderedCollectionChange *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t TupleTypeMetadata3;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v39 - v7;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v13 + 16))(v12, v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v15 = *v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v17 = (char *)v12 + *(int *)(TupleTypeMetadata3 + 48);
  v18 = (char *)v12 + *(int *)(TupleTypeMetadata3 + 64);
  v19 = *(_QWORD *)v18;
  v20 = v18[8];
  v21 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  if (v20)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v19;
  if (EnumCaseMultiPayload == 1)
  {
    v21(v5, v17, v2);
    v40 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
    (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v5, v2);
    v24 = v40;
    if (v40)
    {
      v25 = __swift_project_boxed_opaque_existential_1(v39, v40);
      v26 = *(_QWORD *)(v24 - 8);
      v27 = MEMORY[0x1E0C80A78](v25);
      v29 = (char *)v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v26 + 16))(v29, v27);
      v30 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v24);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    }
    else
    {
      v30 = 0;
    }
    objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionChange), sel_initWithObject_type_index_associatedIndex_, v30, 1, v15, v22);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v21(v8, v17, v2);
    v40 = v2;
    v31 = __swift_allocate_boxed_opaque_existential_1(v39);
    (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(v31, v8, v2);
    v32 = v40;
    if (v40)
    {
      v33 = __swift_project_boxed_opaque_existential_1(v39, v40);
      v34 = *(_QWORD *)(v32 - 8);
      v35 = MEMORY[0x1E0C80A78](v33);
      v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v34 + 16))(v37, v35);
      v38 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    }
    else
    {
      v38 = 0;
    }
    objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionChange), sel_initWithObject_type_index_associatedIndex_, v38, 0, v15, v22);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  _OWORD v15[2];
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(a3 - 8);
  *(_QWORD *)&v7 = MEMORY[0x1E0C80A78](a1).n128_u64[0];
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v10, sel_object, v7))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)&v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
  result = static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v16 = 0xD000000000000011;
    v17 = 0x8000000182308760;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionChange);
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 544175136;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    type metadata accessor for CollectionDifference.Change();
    v14._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  id v18;
  id v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata3;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[2];
  _OWORD v28[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v27 - v8;
  v10 = *(_QWORD *)(a3 - 8);
  *(_QWORD *)&v12 = MEMORY[0x1E0C80A78](v11).n128_u64[0];
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_object, v12))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v27, v28);
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15 = swift_dynamicCast();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (!v15)
  {
    v16(v9, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  v16(v9, 0, 1, a3);
  v17 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v17(v14, v9, a3);
  v18 = objc_msgSend(a1, sel_associatedIndex);
  if (v18 == (id)0x7FFFFFFFFFFFFFFFLL)
    v19 = 0;
  else
    v19 = objc_msgSend(a1, sel_associatedIndex);
  if ((unint64_t)objc_msgSend(a1, sel_changeType) > 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a3);
    return 0;
  }
  type metadata accessor for CollectionDifference.Change();
  v20 = type metadata accessor for Optional();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a2, v20);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v22 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 48);
  v23 = (char *)a2 + *(int *)(TupleTypeMetadata3 + 64);
  *a2 = objc_msgSend(a1, sel_index);
  v17(v22, v14, a3);
  *(_QWORD *)v23 = v19;
  v23[8] = v18 == (id)0x7FFFFFFFFFFFFFFFLL;
  swift_storeEnumTagMultiPayload();
  v24 = type metadata accessor for CollectionDifference.Change();
  v25 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
  return v25;
}

uint64_t static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v6 = type metadata accessor for CollectionDifference.Change();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v17 - v13);
  v15 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))((char *)&v17 - v13, 1, 1, v6, v12);
  if (a1)
  {
    static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, v14, a2);
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v10, v14, v7);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v6);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v14, v7);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v10, v6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change(void *a1, _QWORD *a2, uint64_t a3)
{
  return static CollectionDifference.Change._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>.Change(void *a1, _QWORD *a2, uint64_t a3)
{
  return static CollectionDifference.Change._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>.Change@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static CollectionDifference.Change._unconditionallyBridgeFromObjectiveC(_:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void __swiftcall CollectionDifference._bridgeToObjectiveC()(NSOrderedCollectionDifference *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  NSOrderedCollectionChange *v12;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v2 = v1;
  v3 = type metadata accessor for CollectionDifference.Change();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v14[-v6];
  MEMORY[0x186DA9D64](MEMORY[0x1E0DECE10], v2, v5);
  v8 = dispatch thunk of Collection.count.getter();
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v10 = v8;
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    dispatch thunk of Collection.startIndex.getter();
    if (v10 < 0)
    {
      __break(1u);
      return;
    }
    do
    {
      v11 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(_BYTE *))(v4 + 16))(v7);
      v11(v14, 0);
      CollectionDifference.Change._bridgeToObjectiveC()(v12);
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      dispatch thunk of Collection.formIndex(after:)();
      --v10;
    }
    while (v10);
    v9 = v15;
  }
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v13 = v9;
    else
      v13 = v9 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionChange);
    v13 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  objc_msgSend(objc_allocWithZone((Class)NSOrderedCollectionDifference), sel_initWithChanges_, v13);
  swift_unknownObjectRelease();
}

uint64_t static CollectionDifference._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  result = static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSOrderedCollectionDifference);
    v4._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 544175136;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    type metadata accessor for CollectionDifference();
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  _BYTE v36[12];
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, __n128);
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  _OWORD v77[12];
  _OWORD v78[3];

  v46 = a2;
  v4 = type metadata accessor for CollectionDifference();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v43 = &v36[-v7];
  v40 = a3;
  v8 = type metadata accessor for CollectionDifference.Change();
  v9 = type metadata accessor for Optional();
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = &v36[-v10];
  v12 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = &v36[-v18];
  v41 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  v42 = v6;
  v41(v46, v5, v17);
  v20 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v20, (uint64_t)v77);
  v74 = v77[10];
  v75 = v77[11];
  v76[0] = v78[0];
  *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)((char *)v78 + 9);
  v70 = v77[6];
  v71 = v77[7];
  v72 = v77[8];
  v73 = v77[9];
  v66 = v77[2];
  v67 = v77[3];
  v68 = v77[4];
  v69 = v77[5];
  v64 = v77[0];
  v65 = v77[1];
  outlined retain of Locale((uint64_t)v77);
  NSFastEnumerationIterator.next()((uint64_t)&v62);
  v44 = v5;
  v45 = v4;
  v21 = MEMORY[0x1E0DEE9D8];
  if (v63)
  {
    v47 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      outlined init with take of Any(&v62, v48);
      outlined init with copy of Any((uint64_t)v48, (uint64_t)&v49);
      v22 = swift_dynamicCast();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, v22 ^ 1u, 1, v8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v8) == 1)
        break;
      v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32);
      v23(v19, v11, v8);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v15, v19, v8);
      if (!swift_isUniquelyReferenced_nonNull_native())
      {
        v26 = MEMORY[0x186DA4B5C](v21, v8);
        v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 + 1, 1, v21, v8);
      }
      v25 = *(_QWORD *)(v21 + 16);
      v24 = *(_QWORD *)(v21 + 24);
      if (v25 >= v24 >> 1)
      {
        v37 = v24 > 1;
        v27 = type metadata accessor for Array();
        v21 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37, v25 + 1, 1, v21, *(_QWORD *)(v27 + 16));
      }
      *(_QWORD *)(v21 + 16) = v25 + 1;
      v23((_BYTE *)(v21+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v25), v15, v8);
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v19, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      NSFastEnumerationIterator.next()((uint64_t)&v62);
      if (!v63)
        goto LABEL_9;
    }
    outlined release of Locale((uint64_t)v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    v59 = v74;
    v60 = v75;
    v61[0] = v76[0];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v76 + 9);
    v55 = v70;
    v56 = v71;
    v57 = v72;
    v58 = v73;
    v51 = v66;
    v52 = v67;
    v53 = v68;
    v54 = v69;
    v49 = v64;
    v50 = v65;
    outlined release of Locale((uint64_t)&v49);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v11, v39);
    v30 = v45;
    v29 = v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v46, 1, 1, v45);
  }
  else
  {
LABEL_9:
    v59 = v74;
    v60 = v75;
    v61[0] = v76[0];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v76 + 9);
    v55 = v70;
    v56 = v71;
    v57 = v72;
    v58 = v73;
    v51 = v66;
    v52 = v67;
    v53 = v68;
    v54 = v69;
    v49 = v64;
    v50 = v65;
    outlined release of Locale((uint64_t)&v49);
    *(_QWORD *)&v48[0] = v21;
    v28 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v28);
    v29 = v46;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v77);
    v30 = v45;
  }
  v31 = v43;
  v32 = v29;
  v33 = v44;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 16))(v43, v32, v44);
  v34 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v31, 1, v30) != 1;
  ((void (*)(_BYTE *, uint64_t))v41)(v31, v33);
  return v34;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CollectionDifference<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CollectionDifference._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CollectionDifference<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void static ICUListFormatter.formatter<A, B>(for:)()
{
  type metadata accessor for ListFormatStyle();
}

Swift::String __swiftcall ICUListFormatter.format(strings:)(Swift::OpaquePointer strings)
{
  uint64_t v1;
  int64_t v3;
  char *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _QWORD *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String result;
  char v32[8];
  char *v33;
  _QWORD *v34;

  v3 = *((_QWORD *)strings._rawValue + 2);
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, MEMORY[0x1E0DEE9D8]);
  v34 = v5;
  v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, v4);
  if (!v3)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    swift_retain();
    v23 = specialized _withResizingUCharBuffer(initialSize:_:)(32, v1, (uint64_t)&v34, (uint64_t)&v33, (uint64_t)strings._rawValue);
    v25 = v24;
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v5[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v26; ++i)
      {
        v28 = v5[i + 4];
        if (v28)
          MEMORY[0x186DA9E78](v28, -1, -1);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25)
      v29 = v23;
    else
      v29 = 0;
    if (v25)
      v30 = v25;
    else
      v30 = (void *)0xE000000000000000;
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  v6 = (unint64_t *)((char *)strings._rawValue + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    if ((*v6 & 0x1000000000000000) != 0)
    {
      v9 = String.UTF16View._foreignCount()();
      if (!v9)
      {
LABEL_13:
        v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_14;
      }
    }
    else
    {
      v9 = String.UTF16View._nativeGetOffset(for:)();
      if (!v9)
        goto LABEL_13;
    }
    if (v9 < 1)
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      v10[2] = v9;
      v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    swift_bridgeObjectRetain_n();
    v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v32, (uint64_t)(v10 + 4), v9, v8, v7);
    swift_bridgeObjectRelease();
    if (v13 != v9)
      goto LABEL_45;
    swift_bridgeObjectRelease();
LABEL_14:
    v14 = v10[2];
    if ((uint64_t)(v14 + 0x4000000000000000) < 0)
      break;
    v15 = (char *)swift_slowAlloc();
    if (v10 + 4 < (_QWORD *)&v15[2 * v14] && v15 < (char *)v10 + 2 * v14 + 32)
      goto LABEL_46;
    v17 = v15;
    memcpy(v15, v10 + 4, 2 * v14);
    v5 = v34;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v19 = v5[2];
    v18 = v5[3];
    if (v19 >= v18 >> 1)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v5);
    v5[2] = v19 + 1;
    v5[v19 + 4] = v17;
    swift_release();
    v34 = v5;
    if (v14 >> 31)
      goto LABEL_44;
    v20 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    if (v22 >= v21 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    v6 += 2;
    *((_QWORD *)v20 + 2) = v22 + 1;
    *(_DWORD *)&v20[4 * v22 + 32] = v14;
    v33 = v20;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  v29 = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  result._object = v30;
  result._countAndFlagsBits = v29;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUListFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUListFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUListFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUListFormatter.Signature(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v5)
      return 0;
    return v3 == v4;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v7 & 1) != 0 && v2 == v5)
    return v3 == v4;
  return result;
}

uint64_t ICUListFormatter.__deallocating_deinit()
{
  ulistfmt_close();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUListFormatter()
{
  return objc_opt_self();
}

void closure #1 in ICUListFormatter.format(strings:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(_QWORD *)(a7 + 16) >> 31)
    __break(1u);
  else
    ulistfmt_format();
}

uint64_t initializeWithCopy for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ICUListFormatter.Signature(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for ICUListFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ICUListFormatter.Signature()
{
  return &type metadata for ICUListFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUListFormatter.Signature, &type metadata for ICUListFormatter.Signature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUListFormatter.Signature and conformance ICUListFormatter.Signature);
  }
  return result;
}

id NSURLCache.init(memoryCapacity:diskCapacity:directory:)(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *a3;
  if (*a3)
  {
    v6 = v5;
    outlined consume of URL?(v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithMemoryCapacity_diskCapacity_directoryURL_, a1, a2, v6);

  return v7;
}

Foundation::Date_optional __swiftcall _TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;
  Swift::Double v8;
  uint64_t v9;
  uint64_t v10[2];
  Foundation::Date_optional result;

  v2 = *v1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v4 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in TimeZoneCache.current.getter(v3, v10);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  v5 = v10[1];
  ObjectType = swift_getObjectType();
  v9 = v2;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 80))(&v9, ObjectType, v5);
  v7 = swift_unknownObjectRelease();
  result.value = *(Foundation::Date *)&v8;
  result.is_nil = v7;
  return result;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneAutoupdating(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)_TimeZoneAutoupdating.nextDaylightSavingTimeTransition(after:)(*(Foundation::Date *)&a1);
  return result;
}

uint64_t protocol witness for _TimeZoneProtocol.localizedName(for:locale:) in conformance _TimeZoneAutoupdating()
{
  return _TimeZoneAutoupdating.localizedName(for:locale:)();
}

uint64_t specialized _TimeZoneAutoupdating.identifier.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v6[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v6);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = v6[1];
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _TimeZoneAutoupdating.secondsFromGMT(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v9[1];
  ObjectType = swift_getObjectType();
  v8 = v1;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

double specialized _TimeZoneAutoupdating.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  double v6;
  double v7;
  __int16 v9;
  uint64_t v10;
  uint64_t v11[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v11);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v11[1];
  ObjectType = swift_getObjectType();
  v10 = v1;
  v9 = 0;
  (*(void (**)(uint64_t *, char *, __int16 *, uint64_t, uint64_t))(v4 + 48))(&v10, (char *)&v9 + 1, &v9, ObjectType, v4);
  v7 = v6;
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized _TimeZoneAutoupdating.debugDescription.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t v9[2];
  _QWORD v10[2];

  strcpy((char *)v10, "autoupdating ");
  HIWORD(v10[1]) = -4864;
  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = v9[1];
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  v6 = v5;
  swift_unknownObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t specialized _TimeZoneAutoupdating.abbreviation(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v9[1];
  ObjectType = swift_getObjectType();
  v8 = v1;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t specialized _TimeZoneAutoupdating.isDaylightSavingTime(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v8);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v8[1];
  ObjectType = swift_getObjectType();
  v7 = v1;
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4);
  swift_unknownObjectRelease();
  return v4 & 1;
}

double specialized _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  double v6;
  uint64_t v8;
  uint64_t v9[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v9[1];
  ObjectType = swift_getObjectType();
  v8 = v1;
  v6 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v8, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t specialized _TimeZoneAutoupdating.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12[2];

  v3 = *a2;
  v4 = a2[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.current.getter(v5, v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = v12[1];
  ObjectType = swift_getObjectType();
  v11[0] = v3;
  v11[1] = v4;
  v9 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v7 + 88))(a1, v11, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _FTSSequence.Iterator.next()()
{
  uint64_t v0;
  FTS *v1;
  _QWORD *v2;
  FTSENT *v3;
  FTSENT *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (_QWORD *)(v0 + 16);
  v1 = *(FTS **)(v0 + 16);
  if (*(_BYTE *)(v0 + 40))
  {
    if (*(_BYTE *)(v0 + 40) == 1)
    {
      *v2 = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      v3 = (FTSENT *)v1;
      *(_BYTE *)(v0 + 40) = 2;
      return (uint64_t)v3;
    }
    return 0;
  }
  v4 = fts_read(v1);
  if (v4)
  {
    v3 = v4;
    if (_FTSSequence.Iterator._shouldFilter(_:)((uint64_t)v4))
      return _FTSSequence.Iterator.next()();
  }
  else
  {
    if (!MEMORY[0x186DA4118]())
    {
      v9 = *(_BYTE *)(v0 + 40);
      if (!v9)
      {
        fts_close(*(FTS **)(v0 + 16));
        v9 = *(_BYTE *)(v0 + 40);
      }
      v10 = *(_QWORD *)(v0 + 16);
      v11 = *(_QWORD *)(v0 + 24);
      v12 = *(_QWORD *)(v0 + 32);
      *v2 = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = 2;
      outlined consume of _FTSSequence.Iterator.State(v10, v11, v12, v9);
      return 0;
    }
    LODWORD(v3) = MEMORY[0x186DA4118]();
    v5 = *(_BYTE *)(v0 + 40);
    if (!v5)
    {
      fts_close(*(FTS **)(v0 + 16));
      v5 = *(_BYTE *)(v0 + 40);
    }
    v6 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    *v2 = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    *(_BYTE *)(v0 + 40) = 2;
    outlined consume of _FTSSequence.Iterator.State(v6, v7, v8, v5);
    String.init(cString:)();
    return v3;
  }
  return (uint64_t)v3;
}

uint64_t _FTSSequence.Iterator.init(_:_:)(const char *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  FTS *v10;
  stat v12;
  char *v13[3];

  v13[2] = *(char **)MEMORY[0x1E0C80C00];
  *(_DWORD *)(v2 + 56) = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 72) = v5;
  *(_BYTE *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 48) = a1;
  memset(&v12, 0, 28);
  memset(&v12.st_atimespec, 0, 112);
  if (lstat(a1, &v12) || (v13[0] = (char *)a1, v13[1] = 0, (v10 = fts_open(v13, a2, 0)) == 0))
  {
    v6 = MEMORY[0x186DA4118]();
    v8 = String.init(cString:)();
    v9 = 1;
    v10 = (FTS *)v6;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
  }
  *(_QWORD *)(v2 + 16) = v10;
  *(_QWORD *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 32) = v7;
  *(_BYTE *)(v2 + 40) = v9;
  return v2;
}

uint64_t _FTSSequence.Iterator.__deallocating_deinit()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 40);
  if (!v1)
  {
    fts_close(*(FTS **)(v0 + 16));
    v1 = *(_BYTE *)(v0 + 40);
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 2;
  outlined consume of _FTSSequence.Iterator.State(v2, v3, v4, v1);
  outlined consume of _FTSSequence.Iterator.State(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _FTSSequence.Iterator()
{
  return objc_opt_self();
}

BOOL _FTSSequence.Iterator._shouldFilter(_:)(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  Swift::String v26;
  Swift::Bool v27;
  _QWORD *v29;
  char *v30;
  statfs v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(const char **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(unsigned __int16 *)(a1 + 88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v7 = v6;
  swift_release();
  if ((v7 & 1) != 0)
LABEL_44:
    __break(1u);
  static String._fromUTF8Repairing(_:)();
  if (!*(_DWORD *)(v1 + 56))
  {
    v8._countAndFlagsBits = 24366;
    v8._object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v8))
      goto LABEL_35;
  }
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = *(_DWORD *)(v9 + 4 * v10 + 28);
    if (v5 != 1)
    {
      v4 = v11;
      if (v5 != 6)
        goto LABEL_30;
LABEL_11:
      v12 = *(char **)(v1 + 72);
      v13 = *((_QWORD *)v12 + 2);
      if (!v13 || *(_QWORD *)&v12[8 * v13 + 24] != v3)
      {
LABEL_30:
        if (v4 == *(_DWORD *)(v1 + 56))
          goto LABEL_32;
        goto LABEL_31;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v14 = *((_QWORD *)v12 + 2);
        if (v14)
          goto LABEL_15;
      }
      else
      {
        v12 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        v14 = *((_QWORD *)v12 + 2);
        if (v14)
        {
LABEL_15:
          *((_QWORD *)v12 + 2) = v14 - 1;
          *(_QWORD *)(v1 + 72) = v12;
          v12 = *(char **)(v1 + 64);
          if (*((_QWORD *)v12 + 2))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v15 = *((_QWORD *)v12 + 2);
              if (v15)
              {
LABEL_18:
                *((_QWORD *)v12 + 2) = v15 - 1;
LABEL_29:
                *(_QWORD *)(v1 + 64) = v12;
                goto LABEL_30;
              }
              goto LABEL_43;
            }
LABEL_42:
            v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
            v15 = *((_QWORD *)v12 + 2);
            if (v15)
              goto LABEL_18;
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
    if (v11 == v4)
      goto LABEL_30;
LABEL_20:
    v16 = *(_QWORD **)(v1 + 72);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 72) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *(_QWORD *)(v1 + 72) = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      v20 = v19 + 1;
      v16 = v29;
    }
    v16[2] = v20;
    v16[v19 + 4] = v3;
    *(_QWORD *)(v1 + 72) = v16;
    v12 = *(char **)(v1 + 64);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 64) = v12;
    if ((v21 & 1) == 0)
    {
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      *(_QWORD *)(v1 + 64) = v12;
    }
    v23 = *((_QWORD *)v12 + 2);
    v22 = *((_QWORD *)v12 + 3);
    v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v12);
      v24 = v23 + 1;
      v12 = v30;
    }
    *((_QWORD *)v12 + 2) = v24;
    *(_DWORD *)&v12[4 * v23 + 32] = v4;
    goto LABEL_29;
  }
  if (v5 == 1)
    goto LABEL_20;
  if (v5 == 6)
  {
    v4 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(v1 + 56))
  {
    v4 = 0;
LABEL_31:
    bzero(&v31, 0x878uLL);
    v25 = statfs(v2, &v31);
    *(_BYTE *)(v1 + 80) = (v25 | v31.f_flags & 0x8000) == 0;
    *(_DWORD *)(v1 + 56) = v4;
  }
LABEL_32:
  if (*(_BYTE *)(v1 + 80) != 1)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
  v26._countAndFlagsBits = 24366;
  v26._object = (void *)0xE200000000000000;
  v27 = String.hasPrefix(_:)(v26);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _FTSSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = _FTSSequence.Iterator.next()();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _FTSSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(const char **)v1;
  v4 = *(_DWORD *)(v1 + 8);
  type metadata accessor for _FTSSequence.Iterator();
  v5 = swift_allocObject();
  result = _FTSSequence.Iterator.init(_:_:)(v3, v4);
  *a1 = v5;
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance _FTSSequence()
{
  uint64_t v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*(const char **)v0, *(_DWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _FTSSequence(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(const char **)v3, *(_DWORD *)(v3 + 8));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _FTSSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5(a1, a2);
}

void _POSIXDirectoryContentsSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __darwin_ino64_t st_ino;
  __uint8_t d_type;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  int v16;
  int st_mode;
  int v18;
  __darwin_ino64_t v19;
  Swift::String v20;
  Swift::String v21;
  __darwin_ino64_t v22;
  Swift::String v23;
  stat v24;
  uint64_t v25;

  v2 = v1;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(DIR **)(v1 + 16);
  if (!v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    st_ino = 0;
    d_type = 0;
    goto LABEL_21;
  }
  v5 = readdir(v4);
  if (!v5)
  {
LABEL_20:
    closedir(v4);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    st_ino = 0;
    d_type = 0;
    *(_QWORD *)(v2 + 16) = 0;
    goto LABEL_21;
  }
  v6 = v5;
  while (1)
  {
    if (!v6->d_namlen || !v6->d_ino)
      goto LABEL_7;
    v7 = String.init(cString:)();
    v8 = v12;
    if ((v7 != 46 || v12 != (void *)0xE100000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 11822 || v8 != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v7 != 24366 || v8 != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    v6 = readdir(v4);
    if (!v6)
      goto LABEL_20;
  }
  if (*(_BYTE *)(v2 + 56) != 1)
    goto LABEL_28;
  if (v6->d_type == 4)
    goto LABEL_27;
  if (v6->d_type)
    goto LABEL_28;
  memset(&v24, 0, 28);
  memset(&v24.st_atimespec, 0, 112);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 47;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v7;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v16 = stat((const char *)(v15 + 32), &v24);
  swift_release();
  if (v16)
    goto LABEL_28;
  st_mode = v24.st_mode;
  v18 = S_IFMT.getter() & st_mode;
  if (v18 == (unsigned __int16)S_IFDIR.getter())
  {
LABEL_27:
    v19 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)&v24.st_dev = *(_QWORD *)(v2 + 40);
    v24.st_ino = v19;
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v7;
    v20._object = v8;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 47;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_28:
    v22 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)&v24.st_dev = *(_QWORD *)(v2 + 40);
    v24.st_ino = v22;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v7;
    v23._object = v8;
    String.append(_:)(v23);
  }
  v9 = *(_QWORD *)&v24.st_dev;
  st_ino = v24.st_ino;
  d_type = v6->d_type;
LABEL_21:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = st_ino;
  *(_BYTE *)(a1 + 32) = d_type;
}

uint64_t _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char v15;
  char v16;
  DIR *v17;
  const char *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::Int32 v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[2];
  uint64_t v56;
  uint64_t v57;

  v5 = v4;
  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_44:
    __break(1u);
  }
  if (v11 < -1)
    goto LABEL_44;
  v12 = v11 + 1;
  if (v11 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (char *)&v49 - v13;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, a1, a2);
    v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_35;
    v17 = opendir(v14);
    if (!v17)
      goto LABEL_35;
  }
  else
  {
    v18 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v18, v12, 1, a1, a2);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      MEMORY[0x186DA9E78](v18, -1, -1);
      goto LABEL_35;
    }
    v17 = opendir(v18);
    MEMORY[0x186DA9E78](v18, -1, -1);
    if (!v17)
    {
LABEL_35:
      v36 = swift_bridgeObjectRelease();
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0xE000000000000000;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0xE000000000000000;
      *(_BYTE *)(v5 + 56) = 0;
      v37 = MEMORY[0x186DA4118](v36);
      v50 = MEMORY[0x1E0DEE9E0];
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v40 = v39;
      v53 = a1;
      *(_QWORD *)&v54 = a2;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)v55, (uint64_t)v38, v40);
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v43 = v42;
      URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v53);
      if (v53)
      {
        v51 = v53;
        v52 = v54;
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        memset(v55, 0, sizeof(v55));
        v56 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)v55, (uint64_t)v41, v43);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v37, 1, 0x7265646C6F46, 0xE600000000000000, v50, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = *(void **)(v5 + 64);
      *(_QWORD *)(v5 + 64) = *(_QWORD *)&v55[0];

      return v5;
    }
  }
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 16) = v17;
  *(_BYTE *)(v5 + 56) = a3 & 1;
  v21 = *(_QWORD *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v49 = a4;
    v22 = (uint64_t *)(a4 + 40);
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v25 = *(v22 - 1);
      v26 = *v22;
      v27 = HIBYTE(*v22) & 0xF;
      if ((*v22 & 0x2000000000000000) == 0)
        v27 = v25 & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        swift_bridgeObjectRetain_n();
        String.index(before:)();
        v28 = String.subscript.getter();
        v30 = v29;
        swift_bridgeObjectRelease();
        if (v28 == 47 && v30 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            *(_QWORD *)&v55[0] = v25;
            *((_QWORD *)&v55[0] + 1) = v26;
            swift_bridgeObjectRetain();
            v33._countAndFlagsBits = 47;
            v33._object = (void *)0xE100000000000000;
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            v26 = *((_QWORD *)&v55[0] + 1);
            v25 = *(_QWORD *)&v55[0];
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        v35 = v23[2];
        v34 = v23[3];
        if (v35 >= v34 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v23);
        v23[2] = v35 + 1;
        v24 = &v23[2 * v35];
        v24[4] = v25;
        v24[5] = v26;
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v55[0] = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v45 = BidirectionalCollection<>.joined(separator:)();
  v47 = v46;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 40) = v45;
  *(_QWORD *)(v5 + 48) = v47;
  return v5;
}

uint64_t _POSIXDirectoryContentsSequence.Iterator.__deallocating_deinit()
{
  uint64_t v0;
  DIR *v1;

  v1 = *(DIR **)(v0 + 16);
  if (v1)
    closedir(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _POSIXDirectoryContentsSequence.Iterator()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence()
{
  return &type metadata for _FTSSequence;
}

uint64_t outlined copy of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for _FTSSequence.Iterator.State(uint64_t a1)
{
  return outlined consume of _FTSSequence.Iterator.State(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Iterator.State(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Iterator.State(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Iterator.State(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Iterator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Iterator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _FTSSequence.Iterator.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 2);
}

ValueMetadata *type metadata accessor for _FTSSequence.Iterator.State()
{
  return &type metadata for _FTSSequence.Iterator.State;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _FTSSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator, type metadata accessor for _FTSSequence.Iterator, (uint64_t)&protocol conformance descriptor for _FTSSequence.Iterator);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _POSIXDirectoryContentsSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[40];

  _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v3);
  return outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v3, a1);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _POSIXDirectoryContentsSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  v7 = swift_allocObject();
  result = _POSIXDirectoryContentsSequence.Iterator.init(path:appendSlashForDirectory:prefix:)(v3, v4, v5, v6);
  *a1 = v7;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _POSIXDirectoryContentsSequence()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized _copySequenceToContiguousArray<A>(_:)(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _POSIXDirectoryContentsSequence(timespec *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _POSIXDirectoryContentsSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence()
{
  return &type metadata for _POSIXDirectoryContentsSequence;
}

uint64_t initializeWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _POSIXDirectoryContentsSequence.Iterator.Element(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence.Iterator.Element()
{
  return &type metadata for _POSIXDirectoryContentsSequence.Iterator.Element;
}

uint64_t outlined copy of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for _FTSSequence.Element(uint64_t a1)
{
  return outlined consume of _FTSSequence.Element(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _FTSSequence.Element(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _FTSSequence.Element(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _FTSSequence.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _FTSSequence.Element(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element()
{
  return &type metadata for _FTSSequence.Element;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _POSIXDirectoryContentsSequence()
{
  return lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type _POSIXDirectoryContentsSequence.Iterator and conformance _POSIXDirectoryContentsSequence.Iterator, type metadata accessor for _POSIXDirectoryContentsSequence.Iterator, (uint64_t)&protocol conformance descriptor for _POSIXDirectoryContentsSequence.Iterator);
}

uint64_t lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x186DA9D64](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _FTSSequence.Element.SwiftFTSENT(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _FTSSequence.Element.SwiftFTSENT()
{
  return &type metadata for _FTSSequence.Element.SwiftFTSENT;
}

void static CocoaError.formatting.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

id specialized _BridgedStoredNSError.code.getter@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, sel_code);
  *a2 = result;
  return result;
}

void static CocoaError.propertyListReadCorrupt.getter(_QWORD *a1@<X8>)
{
  *a1 = 3840;
}

void static CocoaError.coderReadCorrupt.getter(_QWORD *a1@<X8>)
{
  *a1 = 4864;
}

void static CocoaError.fileNoSuchFile.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CocoaError.fileLocking.getter(_QWORD *a1@<X8>)
{
  *a1 = 255;
}

void static CocoaError.fileReadUnknown.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static CocoaError.fileReadNoPermission.getter(_QWORD *a1@<X8>)
{
  *a1 = 257;
}

void static CocoaError.fileReadInvalidFileName.getter(_QWORD *a1@<X8>)
{
  *a1 = 258;
}

void static CocoaError.fileReadCorruptFile.getter(_QWORD *a1@<X8>)
{
  *a1 = 259;
}

void static CocoaError.fileReadNoSuchFile.getter(_QWORD *a1@<X8>)
{
  *a1 = 260;
}

void static CocoaError.fileReadInapplicableStringEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 261;
}

void static CocoaError.fileReadUnsupportedScheme.getter(_QWORD *a1@<X8>)
{
  *a1 = 262;
}

void static CocoaError.fileReadTooLarge.getter(_QWORD *a1@<X8>)
{
  *a1 = 263;
}

void static CocoaError.fileReadUnknownStringEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 264;
}

void static CocoaError.fileWriteUnknown.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static CocoaError.fileWriteNoPermission.getter(_QWORD *a1@<X8>)
{
  *a1 = 513;
}

void static CocoaError.fileWriteInvalidFileName.getter(_QWORD *a1@<X8>)
{
  *a1 = 514;
}

void static CocoaError.fileWriteFileExists.getter(_QWORD *a1@<X8>)
{
  *a1 = 516;
}

void static CocoaError.fileWriteInapplicableStringEncoding.getter(_QWORD *a1@<X8>)
{
  *a1 = 517;
}

void static CocoaError.fileWriteUnsupportedScheme.getter(_QWORD *a1@<X8>)
{
  *a1 = 518;
}

void static CocoaError.fileWriteOutOfSpace.getter(_QWORD *a1@<X8>)
{
  *a1 = 640;
}

void static CocoaError.fileWriteVolumeReadOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = 642;
}

void static CocoaError.fileManagerUnmountUnknown.getter(_QWORD *a1@<X8>)
{
  *a1 = 768;
}

void static CocoaError.fileManagerUnmountBusy.getter(_QWORD *a1@<X8>)
{
  *a1 = 769;
}

void static CocoaError.keyValueValidation.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static CocoaError.userCancelled.getter(_QWORD *a1@<X8>)
{
  *a1 = 3072;
}

void static CocoaError.featureUnsupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 3328;
}

void static CocoaError.executableNotLoadable.getter(_QWORD *a1@<X8>)
{
  *a1 = 3584;
}

void static CocoaError.executableArchitectureMismatch.getter(_QWORD *a1@<X8>)
{
  *a1 = 3585;
}

void static CocoaError.executableRuntimeMismatch.getter(_QWORD *a1@<X8>)
{
  *a1 = 3586;
}

void static CocoaError.executableLoad.getter(_QWORD *a1@<X8>)
{
  *a1 = 3587;
}

void static CocoaError.executableLink.getter(_QWORD *a1@<X8>)
{
  *a1 = 3588;
}

void static CocoaError.propertyListReadUnknownVersion.getter(_QWORD *a1@<X8>)
{
  *a1 = 3841;
}

void static CocoaError.propertyListReadStream.getter(_QWORD *a1@<X8>)
{
  *a1 = 3842;
}

void static CocoaError.propertyListWriteStream.getter(_QWORD *a1@<X8>)
{
  *a1 = 3851;
}

void static CocoaError.propertyListWriteInvalid.getter(_QWORD *a1@<X8>)
{
  *a1 = 3852;
}

void static CocoaError.xpcConnectionInterrupted.getter(_QWORD *a1@<X8>)
{
  *a1 = 4097;
}

void static CocoaError.xpcConnectionInvalid.getter(_QWORD *a1@<X8>)
{
  *a1 = 4099;
}

void static CocoaError.xpcConnectionReplyInvalid.getter(_QWORD *a1@<X8>)
{
  *a1 = 4101;
}

void static CocoaError.ubiquitousFileUnavailable.getter(_QWORD *a1@<X8>)
{
  *a1 = 4353;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuota.getter(_QWORD *a1@<X8>)
{
  *a1 = 4354;
}

void static CocoaError.ubiquitousFileUbiquityServerNotAvailable.getter(_QWORD *a1@<X8>)
{
  *a1 = 4355;
}

void static CocoaError.userActivityHandoffFailed.getter(_QWORD *a1@<X8>)
{
  *a1 = 4608;
}

void static CocoaError.userActivityConnectionUnavailable.getter(_QWORD *a1@<X8>)
{
  *a1 = 4609;
}

void static CocoaError.userActivityRemoteApplicationTimedOut.getter(_QWORD *a1@<X8>)
{
  *a1 = 4610;
}

void static CocoaError.userActivityHandoffUserInfoTooLarge.getter(_QWORD *a1@<X8>)
{
  *a1 = 4611;
}

void static CocoaError.coderValueNotFound.getter(_QWORD *a1@<X8>)
{
  *a1 = 4865;
}

void static CocoaError.coderInvalidValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 4866;
}

BOOL CocoaError.isCoderError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4864 && (uint64_t)objc_msgSend(v1, sel_code) < 4992;
}

BOOL CocoaError.isExecutableError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3584 && (uint64_t)objc_msgSend(v1, sel_code) < 3840;
}

BOOL CocoaError.isFileError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return ((unint64_t)objc_msgSend(*v0, sel_code) & 0x8000000000000000) == 0
      && (uint64_t)objc_msgSend(v1, sel_code) < 1024;
}

BOOL CocoaError.isFormattingError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 2048 && (uint64_t)objc_msgSend(v1, sel_code) < 2560;
}

BOOL CocoaError.isPropertyListError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 3840 && (uint64_t)objc_msgSend(v1, sel_code) < 4096;
}

BOOL CocoaError.isValidationError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 1024 && (uint64_t)objc_msgSend(v1, sel_code) < 2048;
}

BOOL CocoaError.isUbiquitousFileError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4352 && (uint64_t)objc_msgSend(v1, sel_code) < 4608;
}

BOOL CocoaError.isUserActivityError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4608 && (uint64_t)objc_msgSend(v1, sel_code) < 4864;
}

BOOL CocoaError.isXPCConnectionError.getter()
{
  id *v0;
  id v1;

  v1 = *v0;
  return (uint64_t)objc_msgSend(*v0, sel_code) >= 4096 && (uint64_t)objc_msgSend(v1, sel_code) < 4225;
}

uint64_t specialized abs<A>(_:)(uint64_t result)
{
  BOOL v1;

  if (result < 0)
  {
    v1 = __OFSUB__(0, result);
    result = -result;
    if (v1)
      __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for log()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Calendar.log = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static _LocaleICU.log = result;
  return result;
}

uint64_t DateComponents.mismatchedUnits(comparedTo:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;

  v3 = *(_BYTE *)(result + 40);
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
LABEL_3:
      v4 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    if (*(_QWORD *)(v2 + 32) != *(_QWORD *)(result + 32))
      v3 = 1;
    if ((v3 & 1) != 0)
      goto LABEL_3;
  }
  v4 = 0;
LABEL_8:
  if ((*(_BYTE *)(v2 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0)
      goto LABEL_16;
LABEL_15:
    v4 |= 2uLL;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v2 + 48) == *(_QWORD *)(result + 48))
    v5 = *(_BYTE *)(result + 56);
  else
    v5 = 1;
  if ((v5 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  if ((*(_BYTE *)(v2 + 216) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 216) & 1) != 0)
      goto LABEL_24;
LABEL_23:
    v4 |= 0x200uLL;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v2 + 208) == *(_QWORD *)(result + 208))
    v6 = *(_BYTE *)(result + 216);
  else
    v6 = 1;
  if ((v6 & 1) != 0)
    goto LABEL_23;
LABEL_24:
  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
      goto LABEL_32;
LABEL_31:
    v4 |= 4uLL;
    goto LABEL_32;
  }
  if (*(_QWORD *)(v2 + 64) == *(_QWORD *)(result + 64))
    v7 = *(_BYTE *)(result + 72);
  else
    v7 = 1;
  if ((v7 & 1) != 0)
    goto LABEL_31;
LABEL_32:
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 88) & 1) != 0)
      goto LABEL_40;
LABEL_39:
    v4 |= 8uLL;
    goto LABEL_40;
  }
  if (*(_QWORD *)(v2 + 80) == *(_QWORD *)(result + 80))
    v8 = *(_BYTE *)(result + 88);
  else
    v8 = 1;
  if ((v8 & 1) != 0)
    goto LABEL_39;
LABEL_40:
  if ((*(_BYTE *)(v2 + 120) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 120) & 1) != 0)
      goto LABEL_48;
LABEL_47:
    v4 |= 0x10uLL;
    goto LABEL_48;
  }
  if (*(_QWORD *)(v2 + 112) == *(_QWORD *)(result + 112))
    v9 = *(_BYTE *)(result + 120);
  else
    v9 = 1;
  if ((v9 & 1) != 0)
    goto LABEL_47;
LABEL_48:
  if ((*(_BYTE *)(v2 + 136) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 136) & 1) != 0)
      goto LABEL_56;
LABEL_55:
    v4 |= 0x20uLL;
    goto LABEL_56;
  }
  if (*(_QWORD *)(v2 + 128) == *(_QWORD *)(result + 128))
    v10 = *(_BYTE *)(result + 136);
  else
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_55;
LABEL_56:
  if ((*(_BYTE *)(v2 + 152) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 152) & 1) != 0)
      goto LABEL_64;
LABEL_63:
    v4 |= 0x40uLL;
    goto LABEL_64;
  }
  if (*(_QWORD *)(v2 + 144) == *(_QWORD *)(result + 144))
    v11 = *(_BYTE *)(result + 152);
  else
    v11 = 1;
  if ((v11 & 1) != 0)
    goto LABEL_63;
LABEL_64:
  if ((*(_BYTE *)(v2 + 184) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 184) & 1) != 0)
      goto LABEL_72;
LABEL_71:
    v4 |= 0x80uLL;
    goto LABEL_72;
  }
  if (*(_QWORD *)(v2 + 176) == *(_QWORD *)(result + 176))
    v12 = *(_BYTE *)(result + 184);
  else
    v12 = 1;
  if ((v12 & 1) != 0)
    goto LABEL_71;
LABEL_72:
  if ((*(_BYTE *)(v2 + 200) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 200) & 1) != 0)
      goto LABEL_80;
LABEL_79:
    v4 |= 0x100uLL;
    goto LABEL_80;
  }
  if (*(_QWORD *)(v2 + 192) == *(_QWORD *)(result + 192))
    v13 = *(_BYTE *)(result + 200);
  else
    v13 = 1;
  if ((v13 & 1) != 0)
    goto LABEL_79;
LABEL_80:
  if ((*(_BYTE *)(v2 + 248) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 248) & 1) != 0)
      goto LABEL_88;
LABEL_87:
    v4 |= 0x400uLL;
    goto LABEL_88;
  }
  if (*(_QWORD *)(v2 + 240) == *(_QWORD *)(result + 240))
    v14 = *(_BYTE *)(result + 248);
  else
    v14 = 1;
  if ((v14 & 1) != 0)
    goto LABEL_87;
LABEL_88:
  if ((*(_BYTE *)(v2 + 264) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 264) & 1) != 0)
      goto LABEL_96;
LABEL_95:
    v4 |= 0x800uLL;
    goto LABEL_96;
  }
  if (*(_QWORD *)(v2 + 256) == *(_QWORD *)(result + 256))
    v15 = *(_BYTE *)(result + 264);
  else
    v15 = 1;
  if ((v15 & 1) != 0)
    goto LABEL_95;
LABEL_96:
  if ((*(_BYTE *)(v2 + 280) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 280) & 1) != 0)
      goto LABEL_104;
LABEL_103:
    v4 |= 0x1000uLL;
    goto LABEL_104;
  }
  if (*(_QWORD *)(v2 + 272) == *(_QWORD *)(result + 272))
    v16 = *(_BYTE *)(result + 280);
  else
    v16 = 1;
  if ((v16 & 1) != 0)
    goto LABEL_103;
LABEL_104:
  v17 = *(unsigned __int8 *)(v2 + 281);
  if ((*(_BYTE *)(v2 + 168) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 168) & 1) != 0)
      goto LABEL_112;
LABEL_111:
    v4 |= 0x2000uLL;
    goto LABEL_112;
  }
  if (*(_QWORD *)(v2 + 160) == *(_QWORD *)(result + 160))
    v18 = *(_BYTE *)(result + 168);
  else
    v18 = 1;
  if ((v18 & 1) != 0)
    goto LABEL_111;
LABEL_112:
  v19 = *(unsigned __int8 *)(result + 281);
  if (v17 == 2)
  {
    if (v19 == 2)
      goto LABEL_117;
  }
  else if (v19 != 2 && ((((v19 & 1) == 0) ^ v17) & 1) != 0)
  {
LABEL_117:
    v20 = *(_BYTE *)(result + 104);
    if ((*(_BYTE *)(v2 + 104) & 1) != 0)
      goto LABEL_118;
    goto LABEL_121;
  }
  v4 |= 0x10000uLL;
  v20 = *(_BYTE *)(result + 104);
  if ((*(_BYTE *)(v2 + 104) & 1) != 0)
  {
LABEL_118:
    if ((v20 & 1) != 0)
      goto LABEL_125;
    goto LABEL_124;
  }
LABEL_121:
  if (*(_QWORD *)(v2 + 96) != *(_QWORD *)(result + 96))
    v20 = 1;
  if ((v20 & 1) != 0)
LABEL_124:
    v4 |= 0x40000uLL;
LABEL_125:
  *a2 = v4;
  return result;
}

uint64_t _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(uint64_t a1, uint64_t *a2, uint64_t *a3, const void *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  id v35;
  char *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t ObjectType;
  void (*v41)(__int128 *__return_ptr, uint64_t, _QWORD *);
  Swift::String v42;
  Swift::String v43;
  void (*v44)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v45;
  id v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(__int128 *__return_ptr, uint64_t, _QWORD *);
  Swift::String v53;
  Swift::String v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v56;
  id v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(__int128 *__return_ptr, uint64_t, _QWORD *);
  Swift::String v64;
  Swift::String v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  void (*v77)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;
  uint64_t (*v81)(uint64_t, _QWORD *);
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t (*v85)(uint64_t, _QWORD *);
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  os_unfair_lock_s *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  void (*v110)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t (*v114)(uint64_t, _QWORD *);
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t (*v118)(uint64_t, _QWORD *);
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  os_unfair_lock_s *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  Swift::String v141;
  Swift::String v142;
  void (*v143)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v144;
  Swift::String v145;
  Swift::String v146;
  uint64_t (*v147)(uint64_t, _QWORD *);
  uint64_t v148;
  Swift::String v149;
  Swift::String v150;
  uint64_t (*v151)(uint64_t, _QWORD *);
  uint64_t v152;
  Swift::String v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  void *v159;
  Swift::String v160;
  Swift::String v161;
  Swift::String v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  NSObject *v173;
  NSObject *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  _BYTE v185[32];
  Swift::String v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  _OWORD v192[18];
  uint64_t v193;
  _BYTE v194[296];

  v14 = type metadata accessor for Mirror();
  v177 = *(_QWORD *)(v14 - 8);
  v178 = v14;
  MEMORY[0x1E0C80A78](v14);
  v174 = ((char *)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v173 = ((char *)&v168 - v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = ((char *)&v168 - v19);
  v21 = type metadata accessor for Logger();
  v182 = *(_QWORD *)(v21 - 8);
  v183 = v21;
  MEMORY[0x1E0C80A78](v21);
  v181 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v180 = (char *)&v168 - v24;
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v168 - v26;
  v28 = *(char **)a1;
  v175 = *(_QWORD *)(a1 + 8);
  v176 = v28;
  v29 = *(unsigned __int8 *)(a1 + 16);
  v30 = *a2;
  v31 = *a3;
  v32 = (_QWORD *)a3[1];
  memcpy(v194, a4, 0x11AuLL);
  v179 = *a5;
  v33 = *a6;
  v34 = *a7;
  if (v29)
  {
    if (v29 == 1)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v35 = (id)static Calendar.log;
      v36 = v180;
      Logger.init(_:)();
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v38))
      {
        v170 = v38;
        v174 = v37;
        v39 = swift_slowAlloc();
        v169 = swift_slowAlloc();
        v193 = v169;
        *(_DWORD *)v39 = 134350850;
        *(_QWORD *)&v192[0] = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2050;
        *(_QWORD *)&v192[0] = v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 22) = 2050;
        *(_QWORD *)&v192[0] = v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v181 = (char *)v39;
        *(_WORD *)(v39 + 32) = 2082;
        *(_QWORD *)&v192[0] = 0;
        *((_QWORD *)&v192[0] + 1) = 0xE000000000000000;
        swift_unknownObjectRetain();
        _StringGuts.grow(_:)(72);
        ObjectType = swift_getObjectType();
        v41 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[3];
        swift_unknownObjectRetain();
        v41(&v187, ObjectType, v32);
        swift_unknownObjectRelease();
        LOBYTE(v184) = v187;
        _print_unlocked<A, B>(_:_:)();
        v42._countAndFlagsBits = 10272;
        v42._object = (void *)0xE200000000000000;
        String.append(_:)(v42);
        *(_QWORD *)&v187 = v31;
        *((_QWORD *)&v187 + 1) = v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
        _print_unlocked<A, B>(_:_:)();
        v43._countAndFlagsBits = 0x656C61636F6C2029;
        v43._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v43);
        v44 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[4];
        swift_unknownObjectRetain();
        v44(&v187, ObjectType, v32);
        v172 = v34;
        v171 = v33;
        if ((_QWORD)v187)
        {
          v45 = *((_QWORD *)&v187 + 1);
          swift_unknownObjectRelease();
        }
        else
        {
          if (one-time initialization token for cache != -1)
            swift_once();
          v68 = static LocaleCache.cache + 16;
          v69 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v69);
          closure #1 in LocaleCache.fixed(_:)(v68, 0, 0xE000000000000000, &v184);
          os_unfair_lock_unlock(v69);
          swift_unknownObjectRelease();
          swift_release_n();
          v45 = *((_QWORD *)&v184 + 1);
        }
        v70 = v181;
        v176 = v181 + 34;
        v71 = swift_getObjectType();
        v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 64))(v71, v45);
        v74 = v73;
        swift_unknownObjectRelease();
        v75._countAndFlagsBits = v72;
        v75._object = v74;
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v76._countAndFlagsBits = 0x6F7A20656D697420;
        v76._object = (void *)0xEC000000203A656ELL;
        String.append(_:)(v76);
        v77 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[6];
        swift_unknownObjectRetain();
        v77(&v187, ObjectType, v32);
        swift_unknownObjectRelease();
        v78 = v187;
        swift_getObjectType();
        *(_QWORD *)&v184 = v78;
        v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v79);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v80._countAndFlagsBits = 0x6557747372696620;
        v80._object = (void *)0xEF203A7961646B65;
        String.append(_:)(v80);
        v81 = (uint64_t (*)(uint64_t, _QWORD *))v32[7];
        swift_unknownObjectRetain();
        v82 = v81(ObjectType, v32);
        swift_unknownObjectRelease();
        *(_QWORD *)&v187 = v82;
        v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        v84._object = (void *)0x8000000182308A00;
        v84._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v84);
        v85 = (uint64_t (*)(uint64_t, _QWORD *))v32[9];
        swift_unknownObjectRetain();
        v86 = v85(ObjectType, v32);
        swift_unknownObjectRelease();
        *(_QWORD *)&v187 = v86;
        v87._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v87);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v192[0], *((unint64_t *)&v192[0] + 1), &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *((_WORD *)v70 + 21) = 2082;
        memcpy(v192, v194, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)v194);
        v88 = (uint64_t)v173;
        DateComponents.customMirror.getter((uint64_t)v173);
        v89 = Mirror.children.getter();
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v88, v178);
        v90 = 0xE000000000000000;
        v190 = 0;
        v191 = 0xE000000000000000;
        swift_retain();
        dispatch thunk of _AnySequenceBox._makeIterator()();
        swift_release();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (*((_QWORD *)&v192[2] + 1))
        {
          v178 = v89;
          do
          {
            v187 = v192[0];
            v188 = v192[1];
            v189 = v192[2];
            v186._countAndFlagsBits = 0;
            v186._object = (void *)0xE000000000000000;
            v91 = (void *)*((_QWORD *)&v192[0] + 1);
            v92 = *(_QWORD *)&v192[0];
            v184 = v192[0];
            outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
            if (v91)
            {
              v93 = v91;
            }
            else
            {
              v92 = 0;
              v93 = (void *)0xE000000000000000;
            }
            swift_bridgeObjectRetain();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
            v94._countAndFlagsBits = v92;
            v94._object = v93;
            String.append(_:)(v94);
            swift_bridgeObjectRelease();
            v95._countAndFlagsBits = 8250;
            v95._object = (void *)0xE200000000000000;
            String.append(_:)(v95);
            _print_unlocked<A, B>(_:_:)();
            v96._countAndFlagsBits = 32;
            v96._object = (void *)0xE100000000000000;
            String.append(_:)(v96);
            String.append(_:)(v186);
            swift_bridgeObjectRelease();
            outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
            dispatch thunk of _AnyIteratorBoxBase.next()();
          }
          while (*((_QWORD *)&v192[2] + 1));
          v97 = v190;
          v90 = v191;
        }
        else
        {
          v97 = 0;
        }
        swift_release();
        swift_release();
        v98 = v181;
        outlined release of DateComponents((uint64_t)v194);
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v90, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of DateComponents((uint64_t)v194);
        outlined release of DateComponents((uint64_t)v194);
        *((_WORD *)v98 + 26) = 2082;
        if (v179)
          v99 = 0x647261776B636162;
        else
          v99 = 0x64726177726F66;
        if (v179)
          v100 = 0xE800000000000000;
        else
          v100 = 0xE700000000000000;
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v98 + 31) = 2082;
        __asm { BR              X9 }
      }
    }
    else
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v57 = (id)static Calendar.log;
      v36 = v181;
      Logger.init(_:)();
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v194);
      v37 = Logger.logObject.getter();
      v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v58))
      {
        v170 = v58;
        v171 = v33;
        v173 = v37;
        v59 = swift_slowAlloc();
        v169 = swift_slowAlloc();
        v193 = v169;
        *(_DWORD *)v59 = 134350850;
        *(_QWORD *)&v192[0] = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 12) = 2050;
        *(_QWORD *)&v192[0] = v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 22) = 2082;
        LOBYTE(v192[0]) = (_BYTE)v176;
        v60 = Calendar.Component.debugDescription.getter();
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v180 = (char *)v59;
        *(_WORD *)(v59 + 32) = 2082;
        *(_QWORD *)&v192[0] = 0;
        *((_QWORD *)&v192[0] + 1) = 0xE000000000000000;
        swift_unknownObjectRetain();
        _StringGuts.grow(_:)(72);
        v62 = swift_getObjectType();
        v63 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[3];
        swift_unknownObjectRetain();
        v63(&v187, v62, v32);
        swift_unknownObjectRelease();
        LOBYTE(v184) = v187;
        _print_unlocked<A, B>(_:_:)();
        v64._countAndFlagsBits = 10272;
        v64._object = (void *)0xE200000000000000;
        String.append(_:)(v64);
        *(_QWORD *)&v187 = v31;
        *((_QWORD *)&v187 + 1) = v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
        _print_unlocked<A, B>(_:_:)();
        v65._countAndFlagsBits = 0x656C61636F6C2029;
        v65._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v65);
        v66 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[4];
        swift_unknownObjectRetain();
        v66(&v187, v62, v32);
        v172 = v34;
        if ((_QWORD)v187)
        {
          v67 = *((_QWORD *)&v187 + 1);
          swift_unknownObjectRelease();
        }
        else
        {
          if (one-time initialization token for cache != -1)
            swift_once();
          v134 = static LocaleCache.cache + 16;
          v135 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v135);
          closure #1 in LocaleCache.fixed(_:)(v134, 0, 0xE000000000000000, &v184);
          os_unfair_lock_unlock(v135);
          swift_unknownObjectRelease();
          swift_release_n();
          v67 = *((_QWORD *)&v184 + 1);
        }
        v136 = v180;
        v137 = swift_getObjectType();
        v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 64))(v137, v67);
        v140 = v139;
        swift_unknownObjectRelease();
        v141._countAndFlagsBits = v138;
        v141._object = v140;
        String.append(_:)(v141);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x6F7A20656D697420;
        v142._object = (void *)0xEC000000203A656ELL;
        String.append(_:)(v142);
        v143 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[6];
        swift_unknownObjectRetain();
        v143(&v187, v62, v32);
        swift_unknownObjectRelease();
        v144 = v187;
        swift_getObjectType();
        *(_QWORD *)&v184 = v144;
        v145._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v145);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v146._countAndFlagsBits = 0x6557747372696620;
        v146._object = (void *)0xEF203A7961646B65;
        String.append(_:)(v146);
        v147 = (uint64_t (*)(uint64_t, _QWORD *))v32[7];
        swift_unknownObjectRetain();
        v148 = v147(v62, v32);
        swift_unknownObjectRelease();
        *(_QWORD *)&v187 = v148;
        v149._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v149);
        swift_bridgeObjectRelease();
        v150._object = (void *)0x8000000182308A00;
        v150._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v150);
        v151 = (uint64_t (*)(uint64_t, _QWORD *))v32[9];
        swift_unknownObjectRetain();
        v152 = v151(v62, v32);
        swift_unknownObjectRelease();
        *(_QWORD *)&v187 = v152;
        v153._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v153);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v192[0], *((unint64_t *)&v192[0] + 1), &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *((_WORD *)v136 + 21) = 2082;
        memcpy(v192, v194, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)v194);
        v154 = (uint64_t)v174;
        DateComponents.customMirror.getter((uint64_t)v174);
        v155 = Mirror.children.getter();
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v154, v178);
        v156 = 0xE000000000000000;
        v190 = 0;
        v191 = 0xE000000000000000;
        swift_retain();
        dispatch thunk of _AnySequenceBox._makeIterator()();
        swift_release();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        if (*((_QWORD *)&v192[2] + 1))
        {
          v178 = v155;
          do
          {
            v187 = v192[0];
            v188 = v192[1];
            v189 = v192[2];
            v186._countAndFlagsBits = 0;
            v186._object = (void *)0xE000000000000000;
            v157 = v192[0];
            v184 = v192[0];
            outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
            if (*((_QWORD *)&v157 + 1))
              v158 = v157;
            else
              v158 = 0;
            if (*((_QWORD *)&v157 + 1))
              v159 = (void *)*((_QWORD *)&v157 + 1);
            else
              v159 = (void *)0xE000000000000000;
            swift_bridgeObjectRetain();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
            v160._countAndFlagsBits = v158;
            v160._object = v159;
            String.append(_:)(v160);
            swift_bridgeObjectRelease();
            v161._countAndFlagsBits = 8250;
            v161._object = (void *)0xE200000000000000;
            String.append(_:)(v161);
            _print_unlocked<A, B>(_:_:)();
            v162._countAndFlagsBits = 32;
            v162._object = (void *)0xE100000000000000;
            String.append(_:)(v162);
            String.append(_:)(v186);
            swift_bridgeObjectRelease();
            outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
            dispatch thunk of _AnyIteratorBoxBase.next()();
          }
          while (*((_QWORD *)&v192[2] + 1));
          v163 = v190;
          v156 = v191;
        }
        else
        {
          v163 = 0;
        }
        swift_release();
        swift_release();
        v164 = v180;
        outlined release of DateComponents((uint64_t)v194);
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v156, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of DateComponents((uint64_t)v194);
        outlined release of DateComponents((uint64_t)v194);
        *((_WORD *)v164 + 26) = 2082;
        if (v179)
          v165 = 0x647261776B636162;
        else
          v165 = 0x64726177726F66;
        if (v179)
          v166 = 0xE800000000000000;
        else
          v166 = 0xE700000000000000;
        *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v166, &v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *((_WORD *)v164 + 31) = 2082;
        __asm { BR              X9 }
      }
    }
  }
  else
  {
    v174 = v20;
    v181 = v27;
    if (one-time initialization token for log != -1)
      swift_once();
    v46 = (id)static Calendar.log;
    v36 = v181;
    Logger.init(_:)();
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v194);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v194);
    v37 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v47))
    {
      v170 = v47;
      v172 = v34;
      v173 = v37;
      v48 = swift_slowAlloc();
      v169 = swift_slowAlloc();
      v193 = v169;
      *(_DWORD *)v48 = 134350850;
      *(_QWORD *)&v192[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2050;
      *(_QWORD *)&v192[0] = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 22) = 2082;
      LOBYTE(v192[0]) = (_BYTE)v176;
      v49 = Calendar.Component.debugDescription.getter();
      *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v180 = (char *)v48;
      *(_WORD *)(v48 + 32) = 2082;
      *(_QWORD *)&v192[0] = 0;
      *((_QWORD *)&v192[0] + 1) = 0xE000000000000000;
      swift_unknownObjectRetain();
      _StringGuts.grow(_:)(72);
      v51 = swift_getObjectType();
      v52 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[3];
      swift_unknownObjectRetain();
      v52(&v187, v51, v32);
      swift_unknownObjectRelease();
      LOBYTE(v184) = v187;
      _print_unlocked<A, B>(_:_:)();
      v53._countAndFlagsBits = 10272;
      v53._object = (void *)0xE200000000000000;
      String.append(_:)(v53);
      *(_QWORD *)&v187 = v31;
      *((_QWORD *)&v187 + 1) = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
      _print_unlocked<A, B>(_:_:)();
      v54._countAndFlagsBits = 0x656C61636F6C2029;
      v54._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v54);
      v55 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[4];
      swift_unknownObjectRetain();
      v55(&v187, v51, v32);
      v171 = v33;
      if ((_QWORD)v187)
      {
        v56 = *((_QWORD *)&v187 + 1);
        swift_unknownObjectRelease();
      }
      else
      {
        if (one-time initialization token for cache != -1)
          swift_once();
        v101 = static LocaleCache.cache + 16;
        v102 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v102);
        closure #1 in LocaleCache.fixed(_:)(v101, 0, 0xE000000000000000, &v184);
        os_unfair_lock_unlock(v102);
        swift_unknownObjectRelease();
        swift_release_n();
        v56 = *((_QWORD *)&v184 + 1);
      }
      v103 = v180;
      v176 = v180 + 34;
      v104 = swift_getObjectType();
      v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v104, v56);
      v107 = v106;
      swift_unknownObjectRelease();
      v108._countAndFlagsBits = v105;
      v108._object = v107;
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      v109._countAndFlagsBits = 0x6F7A20656D697420;
      v109._object = (void *)0xEC000000203A656ELL;
      String.append(_:)(v109);
      v110 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v32[6];
      swift_unknownObjectRetain();
      v110(&v187, v51, v32);
      swift_unknownObjectRelease();
      v111 = v187;
      swift_getObjectType();
      *(_QWORD *)&v184 = v111;
      v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v112);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v113._countAndFlagsBits = 0x6557747372696620;
      v113._object = (void *)0xEF203A7961646B65;
      String.append(_:)(v113);
      v114 = (uint64_t (*)(uint64_t, _QWORD *))v32[7];
      swift_unknownObjectRetain();
      v115 = v114(v51, v32);
      swift_unknownObjectRelease();
      *(_QWORD *)&v187 = v115;
      v116._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v117._object = (void *)0x8000000182308A00;
      v117._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v117);
      v118 = (uint64_t (*)(uint64_t, _QWORD *))v32[9];
      swift_unknownObjectRetain();
      v119 = v118(v51, v32);
      swift_unknownObjectRelease();
      *(_QWORD *)&v187 = v119;
      v120._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v120);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v192[0], *((unint64_t *)&v192[0] + 1), &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *((_WORD *)v103 + 21) = 2082;
      memcpy(v192, v194, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)v194);
      v121 = (uint64_t)v174;
      DateComponents.customMirror.getter((uint64_t)v174);
      v122 = Mirror.children.getter();
      (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v121, v178);
      v123 = 0xE000000000000000;
      v190 = 0;
      v191 = 0xE000000000000000;
      swift_retain();
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (*((_QWORD *)&v192[2] + 1))
      {
        v178 = v122;
        do
        {
          v187 = v192[0];
          v188 = v192[1];
          v189 = v192[2];
          v186._countAndFlagsBits = 0;
          v186._object = (void *)0xE000000000000000;
          v124 = v192[0];
          v184 = v192[0];
          outlined init with copy of Any((uint64_t)&v188, (uint64_t)v185);
          if (*((_QWORD *)&v124 + 1))
            v125 = v124;
          else
            v125 = 0;
          if (*((_QWORD *)&v124 + 1))
            v126 = (void *)*((_QWORD *)&v124 + 1);
          else
            v126 = (void *)0xE000000000000000;
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
          v127._countAndFlagsBits = v125;
          v127._object = v126;
          String.append(_:)(v127);
          swift_bridgeObjectRelease();
          v128._countAndFlagsBits = 8250;
          v128._object = (void *)0xE200000000000000;
          String.append(_:)(v128);
          _print_unlocked<A, B>(_:_:)();
          v129._countAndFlagsBits = 32;
          v129._object = (void *)0xE100000000000000;
          String.append(_:)(v129);
          String.append(_:)(v186);
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)((uint64_t)&v187);
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }
        while (*((_QWORD *)&v192[2] + 1));
        v130 = v190;
        v123 = v191;
      }
      else
      {
        v130 = 0;
      }
      swift_release();
      swift_release();
      v131 = v180;
      outlined release of DateComponents((uint64_t)v194);
      *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v123, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of DateComponents((uint64_t)v194);
      outlined release of DateComponents((uint64_t)v194);
      *((_WORD *)v131 + 26) = 2082;
      if (v179)
        v132 = 0x647261776B636162;
      else
        v132 = 0x64726177726F66;
      if (v179)
        v133 = 0xE800000000000000;
      else
        v133 = 0xE700000000000000;
      *(_QWORD *)&v192[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *((_WORD *)v131 + 31) = 2082;
      __asm { BR              X9 }
    }
  }
  swift_unknownObjectRelease_n();
  outlined release of DateComponents((uint64_t)v194);
  outlined release of DateComponents((uint64_t)v194);

  return (*(uint64_t (**)(char *, uint64_t))(v182 + 8))(v36, v183);
}

uint64_t _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(uint64_t *a1, uint64_t *a2, const void *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  NSObject *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t ObjectType;
  void (*v28)(__int128 *__return_ptr, uint64_t, _QWORD *);
  Swift::String v29;
  Swift::String v30;
  void (*v31)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  void (*v42)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t (*v46)(uint64_t, _QWORD *);
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t (*v50)(uint64_t, _QWORD *);
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  _BYTE v81[32];
  Swift::String v82;
  __int128 v83;
  _OWORD v84[2];
  uint64_t v85;
  unint64_t v86;
  _OWORD v87[18];
  uint64_t v88;
  _BYTE v89[296];

  v12 = type metadata accessor for Mirror();
  v75 = *(_QWORD *)(v12 - 8);
  v76 = v12;
  MEMORY[0x1E0C80A78](v12);
  v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger();
  v79 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v19 = *a2;
  v18 = (_QWORD *)a2[1];
  memcpy(v89, a3, 0x11AuLL);
  v77 = *a4;
  v20 = *a5;
  v21 = *a6;
  if (one-time initialization token for log != -1)
    swift_once();
  v22 = (id)static Calendar.log;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v89);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v89);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  v25 = v16;
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v68 = v20;
    v70 = v24;
    v71 = v21;
    v26 = swift_slowAlloc();
    v69 = swift_slowAlloc();
    v88 = v69;
    *(_DWORD *)v26 = 134350338;
    *(_QWORD *)&v87[0] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v78 = v26;
    *(_WORD *)(v26 + 12) = 2082;
    *(_QWORD *)&v87[0] = 0;
    *((_QWORD *)&v87[0] + 1) = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    ObjectType = swift_getObjectType();
    v28 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v18[3];
    swift_unknownObjectRetain();
    v28(&v83, ObjectType, v18);
    swift_unknownObjectRelease();
    LOBYTE(v80) = v83;
    _print_unlocked<A, B>(_:_:)();
    v29._countAndFlagsBits = 10272;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    *(_QWORD *)&v83 = v19;
    *((_QWORD *)&v83 + 1) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v30._countAndFlagsBits = 0x656C61636F6C2029;
    v30._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v30);
    v31 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v18[4];
    swift_unknownObjectRetain();
    v31(&v83, ObjectType, v18);
    v72 = v25;
    v73 = v14;
    if ((_QWORD)v83)
    {
      v32 = *((_QWORD *)&v83 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v33 = static LocaleCache.cache + 16;
      v34 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v34);
      closure #1 in LocaleCache.fixed(_:)(v33, 0, 0xE000000000000000, &v80);
      os_unfair_lock_unlock(v34);
      swift_unknownObjectRelease();
      swift_release_n();
      v32 = *((_QWORD *)&v80 + 1);
    }
    v35 = v78;
    v67 = v78 + 14;
    v36 = swift_getObjectType();
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 64))(v36, v32);
    v39 = v38;
    swift_unknownObjectRelease();
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x6F7A20656D697420;
    v41._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v41);
    v42 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v18[6];
    swift_unknownObjectRetain();
    v42(&v83, ObjectType, v18);
    swift_unknownObjectRelease();
    v43 = v83;
    swift_getObjectType();
    *(_QWORD *)&v80 = v43;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0x6557747372696620;
    v45._object = (void *)0xEF203A7961646B65;
    String.append(_:)(v45);
    v46 = (uint64_t (*)(uint64_t, _QWORD *))v18[7];
    swift_unknownObjectRetain();
    v47 = v46(ObjectType, v18);
    swift_unknownObjectRelease();
    *(_QWORD *)&v83 = v47;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._object = (void *)0x8000000182308A00;
    v49._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v49);
    v50 = (uint64_t (*)(uint64_t, _QWORD *))v18[9];
    swift_unknownObjectRetain();
    v51 = v50(ObjectType, v18);
    swift_unknownObjectRelease();
    *(_QWORD *)&v83 = v51;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v87[0], *((unint64_t *)&v87[0] + 1), &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 22) = 2082;
    memcpy(v87, v89, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v89);
    v53 = v74;
    DateComponents.customMirror.getter(v74);
    v54 = Mirror.children.getter();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v53, v76);
    v55 = 0xE000000000000000;
    v85 = 0;
    v86 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((_QWORD *)&v87[2] + 1))
    {
      v75 = v54;
      v76 = (uint64_t)v23;
      do
      {
        v83 = v87[0];
        v84[0] = v87[1];
        v84[1] = v87[2];
        v82._countAndFlagsBits = 0;
        v82._object = (void *)0xE000000000000000;
        v56 = (void *)*((_QWORD *)&v87[0] + 1);
        v57 = *(_QWORD *)&v87[0];
        v80 = v87[0];
        outlined init with copy of Any((uint64_t)v84, (uint64_t)v81);
        if (v56)
        {
          v58 = v56;
        }
        else
        {
          v57 = 0;
          v58 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        v59._countAndFlagsBits = v57;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._countAndFlagsBits = 8250;
        v60._object = (void *)0xE200000000000000;
        String.append(_:)(v60);
        _print_unlocked<A, B>(_:_:)();
        v61._countAndFlagsBits = 32;
        v61._object = (void *)0xE100000000000000;
        String.append(_:)(v61);
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v83);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((_QWORD *)&v87[2] + 1));
      v62 = v85;
      v55 = v86;
    }
    else
    {
      v62 = 0;
    }
    swift_release();
    swift_release();
    v63 = v78;
    outlined release of DateComponents((uint64_t)v89);
    *(_QWORD *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v55, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v89);
    outlined release of DateComponents((uint64_t)v89);
    *(_WORD *)(v63 + 32) = 2082;
    if (v77)
      v64 = 0x647261776B636162;
    else
      v64 = 0x64726177726F66;
    if (v77)
      v65 = 0xE800000000000000;
    else
      v65 = 0xE700000000000000;
    *(_QWORD *)&v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 42) = 2082;
    __asm { BR              X9 }
  }
  swift_unknownObjectRelease_n();
  outlined release of DateComponents((uint64_t)v89);
  outlined release of DateComponents((uint64_t)v89);

  return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v16, v14);
}

Foundation::Date_optional __swiftcall Calendar.DatesByMatching.Iterator.next()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  double v13;
  char v14;
  Swift::Double v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21[2];
  double v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  _BYTE v26[288];
  id v27;
  double v28;
  uint64_t v29;
  double v30;
  _BYTE __dst[296];
  Foundation::Date_optional result;

  v2 = v1;
  v3 = v0;
  if ((v2[47] & 1) != 0)
  {
    *(_QWORD *)v0 = 0;
    *(_BYTE *)(v0 + 8) = 1;
  }
  else
  {
    v4 = *v2;
    v5 = v2[8];
    v18 = v2[9];
    v6 = (void *)v2[7];
    memcpy(__dst, v2 + 10, 0x11AuLL);
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);

      v14 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      v8 = *((_BYTE *)v2 + 362);
      v9 = v2[1];
      v10 = *((_BYTE *)v2 + 16);
      v11 = *((_BYTE *)v2 + 364);
      v12 = *((_BYTE *)v2 + 363);
      v13 = *((double *)v2 + 3);
      while (1)
      {
        v21[0] = v5;
        v21[1] = v18;
        v27 = v6;
        memcpy(v26, __dst, 0x11AuLL);
        v25 = v8;
        v24 = v12;
        v23 = v11;
        v22 = v13;
        v19 = v9;
        v20 = v10;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v27, v26, &v25, &v24, &v23, &v22, (uint64_t)&v19, (uint64_t)&v28);
        outlined release of DateComponents((uint64_t)__dst);
        v14 = swift_unknownObjectRelease();
        v16 = v28;
        v17 = v29;
        v13 = v30;
        *((double *)v2 + 3) = v30;
        if (v17 != 2)
          break;
        if (v7 >= v2[46])
        {
          *v2 = v7;
          v21[0] = (uint64_t)v6;
          v28 = *(double *)&v5;
          v29 = v18;
          memcpy(v26, __dst, 0x11AuLL);
          LOBYTE(v19) = v11;
          LOBYTE(v27) = v8;
          LOBYTE(v22) = v12;
          v14 = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v21, (uint64_t *)&v28, v26, (unsigned __int8 *)&v19, (unsigned __int8 *)&v27, (unsigned __int8 *)&v22);
          *((_BYTE *)v2 + 376) = 1;
          goto LABEL_14;
        }
        ++v7;
      }
      *v2 = v7;
      if ((v2[6] & 1) != 0 || (v15 = v16, *((double *)v2 + 4) <= v16) && *((double *)v2 + 5) > v16)
      {
        *((double *)v2 + 1) = v16;
        *((_BYTE *)v2 + 16) = 0;
        *(double *)v3 = v16;
        *(_BYTE *)(v3 + 8) = 0;
        goto LABEL_16;
      }
      *((_BYTE *)v2 + 376) = 1;
LABEL_14:
      *(_QWORD *)v3 = 0;
      *(_BYTE *)(v3 + 8) = 1;
    }
  }
LABEL_16:
  result.value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

double Calendar.DatesByMatching.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  BOOL v11;
  double result;
  uint64_t v13;
  uint64_t v14[2];
  _BYTE v15[282];
  _BYTE __dst[296];

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 32);
  v13 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 40);
  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  v8 = *(_BYTE *)(v1 + 330);
  v9 = *(_BYTE *)(v1 + 331);
  v10 = *(_BYTE *)(v1 + 332);
  memcpy(v15, (const void *)(v1 + 48), sizeof(v15));
  v14[0] = v3;
  v14[1] = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  v11 = DateComponents._validate(for:)(v14);
  v15[0] = 1;
  LOBYTE(v14[0]) = v7;
  memcpy((void *)(a1 + 80), __dst, 0x11AuLL);
  result = NAN;
  *(_OWORD *)a1 = xmmword_1820E51B0;
  *(_BYTE *)(a1 + 16) = v15[0];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v14[0];
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 362) = v8;
  *(_BYTE *)(a1 + 363) = v9;
  *(_BYTE *)(a1 + 364) = v10;
  *(_QWORD *)(a1 + 368) = 100;
  *(_BYTE *)(a1 + 376) = !v11;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByMatching@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[336];

  Calendar.DatesByMatching.makeIterator()(a1);
  memcpy(v3, v1, 0x14DuLL);
  return outlined release of Calendar.DatesByAdding((uint64_t)v3);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByMatching()
{
  const void *v0;
  uint64_t v1;
  _BYTE __dst[344];

  memcpy(__dst, v0, 0x14DuLL);
  v1 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByMatching(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const void *v3;
  _BYTE v8[333];

  memcpy(v8, v3, sizeof(v8));
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByMatching@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[333];

  memcpy(v6, v2, sizeof(v6));
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

Foundation::Date_optional __swiftcall Calendar.DatesByAdding.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::Double v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t ObjectType;
  void (*v11)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t);
  char v12;
  double v13;
  double v14;
  double v15;
  char v16;
  _BYTE __dst[288];
  _BYTE __src[288];
  Foundation::Date_optional result;

  v3 = v0;
  if ((*(_BYTE *)(v1 + 331) & 1) != 0)
  {
    *v0 = 0;
LABEL_3:
    *((_BYTE *)v3 + 8) = 1;
    goto LABEL_15;
  }
  memcpy(__dst, (const void *)(v1 + 48), 0x11AuLL);
  v4 = *(_QWORD *)(v1 + 336);
  DateComponents.scaled(by:)(v4, (uint64_t)__src);
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(double *)(v1 + 16);
  v7 = *(unsigned __int8 *)(v1 + 330);
  memcpy(__dst, __src, 0x11AuLL);
  v8 = 1.59271755e13;
  if (v6 <= 1.59271755e13)
    v8 = v6;
  v9 = fmax(v8, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v14 = v9;
  v11 = *(void (**)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t))(v5 + 200);
  swift_unknownObjectRetain();
  v11(&v15, __dst, &v14, v7, ObjectType, v5);
  swift_unknownObjectRelease();
  v12 = outlined release of DateComponents((uint64_t)__src);
  v13 = v15;
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(v1 + 331) = 1;
    *(double *)v3 = v13;
    *((_BYTE *)v3 + 8) = 1;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    v2 = v15;
    if (*(double *)(v1 + 24) > v15 || *(double *)(v1 + 32) <= v15)
    {
      *(_BYTE *)(v1 + 331) = 1;
      *v3 = 0;
      goto LABEL_3;
    }
  }
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 336) = v4 + 1;
    *(double *)v3 = v13;
    *((_BYTE *)v3 + 8) = 0;
  }
LABEL_15:
  result.value = *(Foundation::Date *)&v2;
  result.is_nil = v12;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByAdding@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  char v9;
  char v10;
  _BYTE v12[288];
  _BYTE __src[289];
  char v14;
  _QWORD v15[5];
  char v16;
  _BYTE v17[288];

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1 + 6;
  v9 = *((_BYTE *)v1 + 40);
  memcpy(v12, v1 + 6, 0x11AuLL);
  v10 = *((_BYTE *)v1 + 330);
  v14 = v9;
  memcpy(&__src[7], v8, 0x11AuLL);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v14;
  memcpy((void *)(a1 + 41), __src, 0x121uLL);
  *(_BYTE *)(a1 + 330) = v10;
  *(_BYTE *)(a1 + 331) = 0;
  *(_QWORD *)(a1 + 336) = 1;
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v5;
  v15[3] = v6;
  v15[4] = v7;
  v16 = v9;
  memcpy(v17, v8, 0x11AuLL);
  v17[282] = v10;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v12);
  return outlined release of Calendar.DatesByAdding((uint64_t)v15);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByAdding()
{
  const void *v0;
  uint64_t v1;
  double __dst[43];

  memcpy(__dst, v0, 0x14BuLL);
  v1 = specialized _copySequenceToContiguousArray<A>(_:)(__dst);
  outlined release of Calendar.DatesByAdding((uint64_t)__dst);
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByAdding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  _BYTE v8[331];

  memcpy(v8, v3, sizeof(v8));
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByAdding@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v6[331];

  memcpy(v6, v2, sizeof(v6));
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

_QWORD *Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)@<X0>(double *a1@<X0>, unsigned __int8 *a2@<X2>, _BYTE *a3@<X4>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t ObjectType;
  _QWORD *result;
  double v16;
  double v17;
  double v18;
  double v19;
  void (*v20)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v21;
  double v22;
  double v23;
  Foundation::Date v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  _QWORD v29[15];
  char v30;
  uint64_t v31;
  _QWORD v32[15];
  char v33;
  uint64_t v34;
  double v35[2];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v5 = v4;
  v8 = *a1;
  v9 = *a2;
  v10 = *v4;
  v11 = v5[1];
  LOBYTE(v29[0]) = 4;
  if (v8 <= 1.59271755e13)
    v12 = v8;
  else
    v12 = 1.59271755e13;
  v13 = fmax(v12, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)v32 = v13;
  result = (*(_QWORD *(**)(double *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t))(v11 + 160))(v35, v29, v32, ObjectType, v11);
  if ((v36 & 1) != 0)
    goto LABEL_21;
  v16 = v35[0];
  v17 = v35[1];
  v18 = v35[0];
  v39 = 16;
  if (v35[0] <= 1.59271755e13)
    v19 = v35[0];
  else
    v19 = 1.59271755e13;
  v32[0] = fmax(v19, -2.11845067e11);
  v20 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v11 + 192);
  v20(v35, &v39, (double *)v32, ObjectType, v11);
  outlined release of DateComponents((uint64_t)v35);
  if (v38)
    v21 = 0;
  else
    v21 = v37;
  v22 = v17 + v18;
  v34 = 16;
  if (v22 <= 1.59271755e13)
    v23 = v22;
  else
    v23 = 1.59271755e13;
  v29[0] = fmax(v23, -2.11845067e11);
  v20((double *)v32, &v34, (double *)v29, ObjectType, v11);
  result = (_QWORD *)outlined release of DateComponents((uint64_t)v32);
  v25 = v32[14];
  if (v33)
    v25 = 0;
  if (__OFSUB__(v25, v21))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v25 - v21 <= 1 && (v21 != 23 || v25 <= 0))
  {
    v26 = v18 + -1.0;
    v31 = 16;
    if (v18 + -1.0 > 1.59271755e13)
      v26 = 1.59271755e13;
    v28 = fmax(v26, -2.11845067e11);
    v20((double *)v29, &v31, &v28, ObjectType, v11);
    result = (_QWORD *)outlined release of DateComponents((uint64_t)v29);
    v27 = v29[14];
    if (v30)
      v27 = 0;
    if (!__OFSUB__(v21, v27))
    {
      if (v21 - v27 <= 1 && (v27 != 23 || v21 <= 0))
        goto LABEL_21;
      if (v9 == 3)
        goto LABEL_21;
      *a3 = 0;
      if (v9 == 2)
        goto LABEL_21;
      if (!v9)
      {
        *(double *)a4 = v16;
        *(_BYTE *)(a4 + 8) = 0;
        return result;
      }
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if (v9 == 3)
  {
LABEL_21:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  *a3 = 0;
  if (v9)
  {
    if (v9 == 1)
    {
      v29[0] = v10;
      v29[1] = v11;
      LOBYTE(v28) = 4;
      v31 = *(_QWORD *)&v8;
      *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v28, 1, v24, (Swift::Bool)&v31);
      return result;
    }
LABEL_37:
    *(double *)a4 = v8;
    *(_BYTE *)(a4 + 8) = 0;
    return result;
  }
  *(double *)a4 = v22;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

char *Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, _BYTE *a10, _BYTE *a11)
{
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  double *v20;
  double v21;
  double *v22;
  double v23;
  double *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *result;
  uint64_t v48;
  void (*v49)(__int128 *__return_ptr, uint64_t, uint64_t);
  Foundation::Date v50;
  uint64_t v51;
  BOOL v52;
  Swift::Int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  double v67;
  BOOL v68;
  uint64_t v69;
  void (*v70)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t);
  Foundation::Date v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t);
  double v76;
  __int128 *v77;
  char v78;
  uint64_t v79;
  void (*v80)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t);
  Foundation::Date v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  __int128 *v108;
  double v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  double v115;
  double v116;
  __int16 v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  double v122;
  uint64_t v123;
  double v124;
  __int16 v125;
  double v126;
  double v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  __int128 v133;
  BOOL v134;
  _BYTE *v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  BOOL v142;
  char v143;
  BOOL v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  char v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  BOOL v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  uint64_t v210;
  char v211;
  int v212;
  void (*v213)(_QWORD *__return_ptr, _QWORD *, __int128 *);
  unsigned __int8 v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  uint64_t ObjectType;
  uint64_t v221;
  __int128 v222[18];
  __int128 v223[18];
  _OWORD v224[18];
  _OWORD v225[18];
  uint64_t v226;
  unsigned __int8 v227;
  _OWORD v228[18];
  __int128 v229[18];
  _OWORD v230[18];
  _OWORD v231[18];
  __int128 v232[18];
  __int128 v233[18];
  _QWORD __dst[36];
  _QWORD __src[36];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _OWORD v254[19];

  MEMORY[0x1E0C80A78](a1);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v221 = v19;
  v21 = *v20;
  v23 = *v22;
  v209 = *v24;
  v26 = *(_OWORD *)(v25 + 16);
  v250 = *(_OWORD *)v25;
  v251 = v26;
  v27 = *(_OWORD *)(v25 + 48);
  v252 = *(_OWORD *)(v25 + 32);
  v253 = v27;
  v28 = *(_QWORD *)(v25 + 64);
  v29 = *(_BYTE *)(v25 + 72);
  v30 = *(_OWORD *)(v25 + 73);
  v237 = *(_OWORD *)(v25 + 89);
  v236 = v30;
  v31 = *(_OWORD *)(v25 + 105);
  v32 = *(_OWORD *)(v25 + 121);
  v33 = *(_OWORD *)(v25 + 137);
  v241 = *(_OWORD *)(v25 + 153);
  v240 = v33;
  v239 = v32;
  v238 = v31;
  v34 = *(_OWORD *)(v25 + 169);
  v35 = *(_OWORD *)(v25 + 185);
  v36 = *(_OWORD *)(v25 + 201);
  v245 = *(_OWORD *)(v25 + 217);
  v244 = v36;
  v243 = v35;
  v242 = v34;
  v37 = *(_OWORD *)(v25 + 233);
  v38 = *(_OWORD *)(v25 + 249);
  v39 = *(_OWORD *)(v25 + 265);
  v249 = *(_BYTE *)(v25 + 281);
  v248 = v39;
  v247 = v38;
  v246 = v37;
  memcpy(v254, v40, 0x11AuLL);
  v211 = *v18;
  v216 = *v16;
  v218 = *v14;
  v214 = *a9;
  v41 = *v11;
  v42 = v11[1];
  __dst[0] = 14;
  if (v23 <= 1.59271755e13)
    v43 = v23;
  else
    v43 = 1.59271755e13;
  *(_QWORD *)&v233[0] = fmax(v43, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v213 = *(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *))(v42 + 192);
  v213(__src, __dst, v233);
  memcpy(__dst, __src, 0x11AuLL);
  v44 = __dst[8];
  v45 = __dst[6];
  if (((BYTE8(v254[5]) & 1) != 0 || (__dst[11] & 1) == 0 && __dst[10] == *(_QWORD *)&v254[5])
    && (__dst[8] != *(_QWORD *)&v254[4] ? (v46 = 1) : (v46 = __dst[9]), (BYTE8(v254[4]) & 1) != 0 || (v46 & 1) == 0)
    || (((LOBYTE(__dst[7]) | LOBYTE(__dst[9])) | (BYTE8(v254[5]) | BYTE8(v254[4]))) & 1) != 0)
  {
    result = (char *)outlined release of DateComponents((uint64_t)__dst);
    v48 = v221;
    *(_QWORD *)v221 = 0;
LABEL_14:
    *(_BYTE *)(v48 + 8) = 1;
    return result;
  }
  v203 = *(_QWORD *)&v254[5];
  v208 = *(_QWORD *)&v254[4];
  v207 = v12;
  v49 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v42 + 24);
  swift_unknownObjectRetain();
  v49(v233, ObjectType, v42);
  swift_unknownObjectRelease();
  if (!LOBYTE(v233[0]) && v208 == 2 && (v29 & 1) == 0 && v28 == 2)
  {
    v51 = v45 <= 0 ? -(-v45 & 3) : v45 & 3;
    if (v216)
    {
      v52 = v44 >= 2 && v51 == 0;
      v53 = v52 ? -4 : -v51;
    }
    else
    {
      v53 = 4 - v51;
    }
    *(_QWORD *)&v233[0] = v41;
    *((_QWORD *)&v233[0] + 1) = v42;
    LOBYTE(v230[0]) = 1;
    *(double *)v231 = v23;
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v230, v53, v50, (Swift::Bool)v231);
    if ((BYTE8(v232[0]) & 1) == 0)
    {
      v54 = *(double *)v232;
      LOBYTE(v231[0]) = 1;
      if (*(double *)v232 > 1.59271755e13)
        v54 = 1.59271755e13;
      *(_QWORD *)&v232[0] = fmax(v54, -2.11845067e11);
      (*(void (**)(__int128 *__return_ptr, _OWORD *, __int128 *, uint64_t, uint64_t))(v42 + 160))(v233, v231, v232, ObjectType, v42);
      if ((v233[1] & 1) == 0)
      {
        *(_QWORD *)&v232[0] = v41;
        *((_QWORD *)&v232[0] + 1) = v42;
        *(_QWORD *)&v230[0] = *(_QWORD *)&v233[0];
        memcpy(v233, v254, 0x11AuLL);
        LOBYTE(v229[0]) = 0;
        LOBYTE(v228[0]) = v218;
        LOBYTE(v225[0]) = v214;
        Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v230, v233, (unsigned __int8 *)v229, (unsigned __int8 *)v228, (unsigned __int8 *)v225, (double *)v231);
        if (v12)
        {
          v77 = (__int128 *)__dst;
          return (char *)outlined release of DateComponents((uint64_t)v77);
        }
        v103 = *(_QWORD *)&v231[0];
        if ((BYTE8(v231[0]) & 1) != 0)
        {
          result = (char *)outlined release of DateComponents((uint64_t)__dst);
          *(_QWORD *)v221 = v103;
          *(_BYTE *)(v221 + 8) = 1;
          return result;
        }
        v209 = *(double *)v231;
        v116 = *(double *)v231;
        DateComponents.setUnits.getter((uint64_t *)v228);
        v117 = v228[0];
        *(_QWORD *)&v231[0] = *(_QWORD *)&v228[0];
        if (v116 <= 1.59271755e13)
          v118 = v116;
        else
          v118 = 1.59271755e13;
        *(_QWORD *)&v230[0] = fmax(v118, -2.11845067e11);
        ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)(v232, v231, v230, ObjectType, v42);
        v119 = *(_QWORD *)&v232[0];
        if ((v117 & 0x4000) != 0)
        {
          *(_QWORD *)&v232[0] = v41;
          *((_QWORD *)&v232[0] + 1) = v42;
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (*(_QWORD *)&v232[1])
          {
            v231[0] = v232[1];
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)v231);
            v119 = *(_QWORD *)&v232[0];
          }
          else
          {
            v119 = v41;
          }
        }
        v129 = v232[1];
        *(__int128 *)((char *)&v233[16] + 10) = *(__int128 *)((char *)&v232[16] + 10);
        v233[14] = v232[14];
        v233[15] = v232[15];
        v233[16] = v232[16];
        v233[10] = v232[10];
        v233[11] = v232[11];
        v233[12] = v232[12];
        v233[13] = v232[13];
        v233[6] = v232[6];
        v233[7] = v232[7];
        v233[8] = v232[8];
        v233[9] = v232[9];
        v233[2] = v232[2];
        v233[3] = v232[3];
        v233[4] = v232[4];
        v233[5] = v232[5];
        *(_QWORD *)&v233[0] = v119;
        *((_QWORD *)&v233[0] + 1) = *((_QWORD *)&v232[0] + 1);
        v233[1] = v232[1];
        if (*(_QWORD *)&v254[0])
        {
          v233[0] = v254[0];
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if ((_QWORD)v129)
          {
            v231[0] = v129;
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)v231);
          }
        }
        v130 = *(_QWORD *)&v254[1];
        if (*(_QWORD *)&v254[1])
        {
          v131 = *((_QWORD *)&v254[1] + 1);
          v233[1] = v254[1];
          swift_unknownObjectRetain_n();
          swift_unknownObjectRelease();
          if (*(_QWORD *)&v233[0])
          {
            *(_QWORD *)&v231[0] = v130;
            *((_QWORD *)&v231[0] + 1) = v131;
            Calendar.timeZone.setter((uint64_t *)v231);
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
        memcpy(v231, v233, 0x11AuLL);
        memcpy(v230, v233, 0x11AuLL);
        memcpy(v229, v254, 0x11AuLL);
        v132 = specialized static DateComponents.== infix(_:_:)((uint64_t)v230, v229);
        outlined release of DateComponents((uint64_t)v231);
        if (v132)
        {
          result = (char *)outlined release of DateComponents((uint64_t)__dst);
          v65 = 0;
LABEL_72:
          v66 = v221;
          v67 = v209;
LABEL_89:
          *(double *)v66 = v67;
          *(_BYTE *)(v66 + 8) = v65 & 1;
          return result;
        }
      }
    }
  }
  if (v218 == 3)
  {
    swift_unknownObjectRetain();
    v49(v233, ObjectType, v42);
    swift_unknownObjectRelease();
    if (LOBYTE(v233[0]))
    {
      *(double *)v230 = v23;
      v233[0] = v250;
      v233[1] = v251;
      v233[2] = v252;
      v233[3] = v253;
      *(__int128 *)((char *)&v233[16] + 9) = v248;
      *(__int128 *)((char *)&v233[14] + 9) = v246;
      *(__int128 *)((char *)&v233[15] + 9) = v247;
      *(__int128 *)((char *)&v233[10] + 9) = v242;
      *(__int128 *)((char *)&v233[11] + 9) = v243;
      *(__int128 *)((char *)&v233[12] + 9) = v244;
      *(__int128 *)((char *)&v233[13] + 9) = v245;
      *(__int128 *)((char *)&v233[6] + 9) = v238;
      *(__int128 *)((char *)&v233[7] + 9) = v239;
      *(__int128 *)((char *)&v233[8] + 9) = v240;
      *(__int128 *)((char *)&v233[9] + 9) = v241;
      *(__int128 *)((char *)&v233[4] + 9) = v236;
      *(_QWORD *)&v232[0] = v41;
      *((_QWORD *)&v232[0] + 1) = v42;
      *(_QWORD *)&v233[4] = v28;
      BYTE8(v233[4]) = v29;
      BYTE9(v233[17]) = v249;
      *(__int128 *)((char *)&v233[5] + 9) = v237;
      LOBYTE(v229[0]) = v211;
      LOBYTE(v228[0]) = v216;
      LOBYTE(v225[0]) = 3;
      LOBYTE(v224[0]) = v214;
      Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)((double *)v230, v233, v229, (unsigned __int8 *)v228, (unsigned __int8 *)v225, (unsigned __int8 *)v224, (double *)v231);
      if (v207)
        return (char *)outlined release of DateComponents((uint64_t)__dst);
      result = (char *)outlined release of DateComponents((uint64_t)__dst);
      v67 = *(double *)v231;
      v65 = BYTE8(v231[0]);
      v66 = v221;
      goto LABEL_89;
    }
    result = (char *)outlined release of DateComponents((uint64_t)__dst);
    v65 = 0;
    *a10 = 0;
    goto LABEL_72;
  }
  v232[0] = 0uLL;
  v231[0] = 0uLL;
  outlined retain of DateComponents((uint64_t)v254);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v232, (uint64_t *)v231, 0, 1, 0, 1, 0, 1, (uint64_t)v233, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (v45 == 0x7FFFFFFFFFFFFFFFLL)
    v55 = 0;
  else
    v55 = v45;
  *(_QWORD *)&v233[3] = v55;
  BYTE8(v233[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
  v177 = BYTE9(v254[17]);
  if (v208 == 0x7FFFFFFFFFFFFFFFLL)
    v56 = 0;
  else
    v56 = v208;
  v198 = *(_QWORD *)&v254[17];
  v179 = BYTE8(v254[17]);
  v195 = BYTE8(v254[16]);
  v178 = *(_QWORD *)&v254[16];
  v193 = *(_QWORD *)&v254[15];
  v194 = BYTE8(v254[15]);
  v192 = BYTE8(v254[14]);
  v191 = *(_QWORD *)&v254[14];
  v189 = *(_QWORD *)&v254[13];
  v190 = BYTE8(v254[13]);
  v187 = *(_QWORD *)&v254[12];
  v188 = BYTE8(v254[12]);
  v185 = *(_QWORD *)&v254[11];
  v186 = BYTE8(v254[11]);
  v183 = *(_QWORD *)&v254[10];
  v184 = BYTE8(v254[10]);
  v180 = *(_QWORD *)&v254[6];
  v181 = BYTE8(v254[6]);
  v57 = *(_QWORD *)&v254[3];
  v196 = *(_QWORD *)&v254[2];
  v197 = BYTE8(v254[2]);
  v58 = v254[1];
  BYTE8(v233[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v233[5] = 1;
  v59 = v254[0];
  *(_QWORD *)&v233[4] = v56;
  BYTE8(v233[5]) = 0;
  v60 = *(_QWORD *)&v254[9];
  v212 = BYTE8(v254[9]);
  v210 = *(_QWORD *)&v254[8];
  v206 = BYTE8(v254[8]);
  v205 = *(_QWORD *)&v254[7];
  v204 = BYTE8(v254[7]);
  if (!v218)
  {
    v182 = *(_QWORD *)&v254[9];
    *(_QWORD *)&v232[2] = *(_QWORD *)&v233[2];
    if (v45 > *(uint64_t *)&v254[3])
      v57 = v45;
    BYTE8(v232[2]) = BYTE8(v233[2]);
    v68 = v57 == 0x7FFFFFFFFFFFFFFFLL;
    if (v57 == 0x7FFFFFFFFFFFFFFFLL)
      v57 = 0;
    *(_QWORD *)&v232[3] = v55;
    if (BYTE8(v254[3]))
      v69 = v55;
    else
      v69 = v57;
    BYTE8(v232[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
    if (BYTE8(v254[3]))
      v68 = v45 == 0x7FFFFFFFFFFFFFFFLL;
    v202 = v68;
    *(_QWORD *)&v232[4] = v56;
    BYTE8(v232[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v232[6] = *(_QWORD *)&v233[6];
    BYTE8(v232[6]) = BYTE8(v233[6]);
    *(_QWORD *)&v232[7] = *(_QWORD *)&v233[7];
    BYTE8(v232[7]) = BYTE8(v233[7]);
    *(_QWORD *)&v232[8] = *(_QWORD *)&v233[8];
    BYTE8(v232[8]) = BYTE8(v233[8]);
    *(_QWORD *)&v232[9] = *(_QWORD *)&v233[9];
    BYTE8(v232[9]) = BYTE8(v233[9]);
    *(_QWORD *)&v232[10] = *(_QWORD *)&v233[10];
    BYTE8(v232[10]) = BYTE8(v233[10]);
    *(_QWORD *)&v232[11] = *(_QWORD *)&v233[11];
    BYTE8(v232[11]) = BYTE8(v233[11]);
    *(_QWORD *)&v232[12] = *(_QWORD *)&v233[12];
    BYTE8(v232[12]) = BYTE8(v233[12]);
    *(_QWORD *)&v232[13] = *(_QWORD *)&v233[13];
    BYTE8(v232[13]) = BYTE8(v233[13]);
    *(_QWORD *)&v232[14] = *(_QWORD *)&v233[14];
    BYTE8(v232[14]) = BYTE8(v233[14]);
    *(_QWORD *)&v232[15] = *(_QWORD *)&v233[15];
    BYTE8(v232[15]) = BYTE8(v233[15]);
    BYTE8(v232[16]) = BYTE8(v233[16]);
    *(_QWORD *)&v232[16] = *(_QWORD *)&v233[16];
    *(_QWORD *)&v232[17] = *(_QWORD *)&v233[17];
    WORD4(v232[17]) = WORD4(v233[17]);
    v232[0] = v233[0];
    v232[1] = v233[1];
    *(_QWORD *)&v232[5] = 1;
    BYTE8(v232[5]) = 0;
    memcpy(v231, v232, 0x11AuLL);
    v70 = *(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v42 + 176);
    outlined retain of DateComponents((uint64_t)v232);
    v70(v230, v231, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v232);
    v72 = *(_QWORD *)&v230[0];
    if ((BYTE8(v230[0]) & 1) != 0)
      goto LABEL_91;
    v200 = v69;
    *(_QWORD *)&v231[0] = v41;
    *((_QWORD *)&v231[0] + 1) = v42;
    LOBYTE(v228[0]) = 2;
    *(_QWORD *)&v229[0] = *(_QWORD *)&v230[0];
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v228, 1, v71, (Swift::Bool)v229);
    v72 = *(_QWORD *)&v230[0];
    v78 = v177;
    v79 = v198;
    if ((BYTE8(v230[0]) & 1) != 0)
    {
LABEL_91:
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)v221 = v72;
      *(_BYTE *)(v221 + 8) = 1;
      v231[0] = v59;
      v231[1] = v58;
      *(_QWORD *)&v231[2] = v196;
      BYTE8(v231[2]) = v197;
      *(_QWORD *)&v231[3] = v69;
      BYTE8(v231[3]) = v202;
      *(_QWORD *)&v231[4] = v208;
      BYTE8(v231[4]) = 0;
      *(_QWORD *)&v231[5] = v203;
      BYTE8(v231[5]) = 0;
      *(_QWORD *)&v231[6] = v180;
      BYTE8(v231[6]) = v181;
      *(_QWORD *)&v231[7] = v205;
      BYTE8(v231[7]) = v204;
      *(_QWORD *)&v231[8] = v210;
      BYTE8(v231[8]) = v206;
      *(_QWORD *)&v231[9] = v182;
      BYTE8(v231[9]) = v212;
      *(_QWORD *)&v231[10] = v183;
      BYTE8(v231[10]) = v184;
      *(_QWORD *)&v231[11] = v185;
      BYTE8(v231[11]) = v186;
      *(_QWORD *)&v231[12] = v187;
      BYTE8(v231[12]) = v188;
      *(_QWORD *)&v231[13] = v189;
      BYTE8(v231[13]) = v190;
      *(_QWORD *)&v231[14] = v191;
      BYTE8(v231[14]) = v192;
      *(_QWORD *)&v231[15] = v193;
      BYTE8(v231[15]) = v194;
      BYTE8(v231[16]) = v195;
      *(_QWORD *)&v231[16] = v178;
      *(_QWORD *)&v231[17] = v198;
      BYTE8(v231[17]) = v179;
      BYTE9(v231[17]) = v177;
      return (char *)outlined release of DateComponents((uint64_t)v231);
    }
    v104 = *(double *)v230;
    *(_QWORD *)&v222[0] = 4;
    if (*(double *)v230 > 1.59271755e13)
      v104 = 1.59271755e13;
    *(_QWORD *)&v230[0] = fmax(v104, -2.11845067e11);
    ((void (*)(_OWORD *__return_ptr, __int128 *, _OWORD *, uint64_t, uint64_t))v213)(v231, v222, v230, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v231);
    v105 = *(_QWORD *)&v231[4];
    if (BYTE8(v231[4]))
      v105 = 0;
    *(_QWORD *)&v230[5] = 1;
    BYTE8(v230[16]) = v195;
    BYTE8(v230[17]) = v179;
    v106 = v105 == 0x7FFFFFFFFFFFFFFFLL;
    if (v105 == 0x7FFFFFFFFFFFFFFFLL)
      v107 = 0;
    else
      v107 = v105;
    *(_QWORD *)&v228[0] = v41;
    *((_QWORD *)&v228[0] + 1) = v42;
    *(double *)v224 = v21;
    v230[0] = v59;
    v230[1] = v58;
    *(_QWORD *)&v230[2] = v196;
    BYTE8(v230[2]) = v197;
    *(_QWORD *)&v230[3] = v69;
    BYTE8(v230[3]) = v202;
    *(_QWORD *)&v230[4] = v107;
    BYTE8(v230[4]) = v105 == 0x7FFFFFFFFFFFFFFFLL;
    BYTE8(v230[5]) = 0;
    *(_QWORD *)&v230[6] = v180;
    BYTE8(v230[6]) = v181;
    *(_QWORD *)&v230[7] = v205;
    BYTE8(v230[7]) = v204;
    *(_QWORD *)&v230[8] = v210;
    BYTE8(v230[8]) = v206;
    *(_QWORD *)&v230[9] = v182;
    BYTE8(v230[9]) = v212;
    *(_QWORD *)&v230[10] = v183;
    BYTE8(v230[10]) = v184;
    *(_QWORD *)&v230[11] = v185;
    BYTE8(v230[11]) = v186;
    *(_QWORD *)&v230[12] = v187;
    BYTE8(v230[12]) = v188;
    *(_QWORD *)&v230[13] = v189;
    BYTE8(v230[13]) = v190;
    *(_QWORD *)&v230[14] = v191;
    BYTE8(v230[14]) = v192;
    *(_QWORD *)&v230[15] = v193;
    BYTE8(v230[15]) = v194;
    *(_QWORD *)&v230[16] = v178;
    *(_QWORD *)&v230[17] = v198;
    BYTE9(v230[17]) = v177;
    memcpy(v229, v230, 0x11AuLL);
    LOBYTE(v223[0]) = v216;
    LOBYTE(v226) = 0;
    v227 = v214;
    outlined retain of DateComponents((uint64_t)v230);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v224, v229, (unsigned __int8 *)v223, (unsigned __int8 *)&v226, &v227, (double *)v225);
    if (v207)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v230);
      v108 = v232;
LABEL_131:
      outlined release of DateComponents((uint64_t)v108);
      return (char *)outlined release of DateComponents((uint64_t)v230);
    }
    v219 = v106;
    outlined release of DateComponents((uint64_t)v230);
    v120 = *(_QWORD *)&v225[0];
    if ((BYTE8(v225[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      result = (char *)outlined release of DateComponents((uint64_t)v230);
      v48 = v221;
      *(_QWORD *)v221 = v120;
      goto LABEL_14;
    }
    v67 = *(double *)v225;
    v124 = *(double *)v225;
    DateComponents.setUnits.getter(&v226);
    v125 = v226;
    *(_QWORD *)&v225[0] = v226;
    if (v124 <= 1.59271755e13)
      v126 = v124;
    else
      v126 = 1.59271755e13;
    v127 = fmax(v126, -2.11845067e11);
    *(double *)v224 = v127;
    outlined retain of DateComponents((uint64_t)v230);
    ((void (*)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)(v228, v225, v224, ObjectType, v42);
    v128 = *(_QWORD *)&v228[0];
    if ((v125 & 0x4000) != 0)
    {
      *(_QWORD *)&v228[0] = v41;
      *((_QWORD *)&v228[0] + 1) = v42;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v228[1])
      {
        v225[0] = v228[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v225);
        v128 = *(_QWORD *)&v228[0];
      }
      else
      {
        v128 = v41;
      }
    }
    v140 = v178;
    v141 = v228[1];
    *(__int128 *)((char *)&v229[16] + 10) = *(_OWORD *)((char *)&v228[16] + 10);
    v229[14] = v228[14];
    v229[15] = v228[15];
    v229[16] = v228[16];
    v229[10] = v228[10];
    v229[11] = v228[11];
    v229[12] = v228[12];
    v229[13] = v228[13];
    v229[6] = v228[6];
    v229[7] = v228[7];
    v229[8] = v228[8];
    v229[9] = v228[9];
    v229[2] = v228[2];
    v229[3] = v228[3];
    v229[4] = v228[4];
    v229[5] = v228[5];
    *(_QWORD *)&v229[0] = v128;
    *((_QWORD *)&v229[0] + 1) = *((_QWORD *)&v228[0] + 1);
    v229[1] = v228[1];
    if ((_QWORD)v59)
    {
      v229[0] = v59;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((_QWORD)v141)
      {
        v225[0] = v141;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v225);
      }
    }
    if ((_QWORD)v58)
    {
      v229[1] = v58;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v229[0])
      {
        v225[0] = v58;
        Calendar.timeZone.setter((uint64_t *)v225);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v225, v229, 0x11AuLL);
    memcpy(v224, v229, 0x11AuLL);
    memcpy(v223, v230, 0x11AuLL);
    v142 = specialized static DateComponents.== infix(_:_:)((uint64_t)v224, v223);
    outlined release of DateComponents((uint64_t)v225);
    outlined release of DateComponents((uint64_t)v230);
    if (v142)
    {
      v227 = 3;
      *(double *)v223 = v127;
      (*(void (**)(_OWORD *__return_ptr, unsigned __int8 *, __int128 *, uint64_t, uint64_t))(v42 + 160))(v224, &v227, v223, ObjectType, v42);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v232);
      v65 = 0;
      v138 = 0;
      if ((v224[1] & 1) == 0)
        v67 = *(double *)v224;
    }
    else
    {
      outlined release of DateComponents((uint64_t)v232);
      outlined release of DateComponents((uint64_t)__dst);
      v67 = 0.0;
      v138 = 0;
      v65 = 1;
    }
    v139 = 1;
    v66 = v221;
    v135 = a10;
    v136 = v219;
    v137 = v107;
LABEL_190:
    v232[0] = v59;
    v232[1] = v58;
    *(_QWORD *)&v232[2] = v196;
    BYTE8(v232[2]) = v197;
    *(_QWORD *)&v232[3] = v200;
    BYTE8(v232[3]) = v202;
    *(_QWORD *)&v232[4] = v137;
    BYTE8(v232[4]) = v136;
    *(_QWORD *)&v232[5] = v139;
    BYTE8(v232[5]) = v138;
    *(_QWORD *)&v232[6] = v180;
    BYTE8(v232[6]) = v181;
    *(_QWORD *)&v232[7] = v205;
    BYTE8(v232[7]) = v204;
    *(_QWORD *)&v232[8] = v210;
    BYTE8(v232[8]) = v206;
    *(_QWORD *)&v232[9] = v182;
    BYTE8(v232[9]) = v212;
    *(_QWORD *)&v232[10] = v183;
    BYTE8(v232[10]) = v184;
    *(_QWORD *)&v232[11] = v185;
    BYTE8(v232[11]) = v186;
    *(_QWORD *)&v232[12] = v187;
    BYTE8(v232[12]) = v188;
    *(_QWORD *)&v232[13] = v189;
    BYTE8(v232[13]) = v190;
    *(_QWORD *)&v232[14] = v191;
    BYTE8(v232[14]) = v192;
    *(_QWORD *)&v232[15] = v193;
    BYTE8(v232[15]) = v194;
    BYTE8(v232[16]) = v195;
    *(_QWORD *)&v232[16] = v140;
    *(_QWORD *)&v232[17] = v79;
    BYTE8(v232[17]) = v179;
    BYTE9(v232[17]) = v78;
    result = (char *)outlined release of DateComponents((uint64_t)v232);
    *v135 = 0;
    *a11 = 1;
    goto LABEL_89;
  }
  v144 = v45 == 0x7FFFFFFFFFFFFFFFLL;
  v171 = v55;
  v175 = v56;
  v199 = *(_QWORD *)&v254[3];
  v201 = BYTE8(v254[3]);
  *(_QWORD *)&v231[0] = 112;
  if (v21 <= 1.59271755e13)
    v61 = v21;
  else
    v61 = 1.59271755e13;
  *(_QWORD *)&v230[0] = fmax(v61, -2.11845067e11);
  ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)(v232, v231, v230, ObjectType, v42);
  memcpy(v231, v232, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v231);
  if (v204 && (v205 = *(_QWORD *)&v231[7], (BYTE8(v231[7]) & 1) != 0))
  {
    LOBYTE(v204) = 1;
    if (!v206)
      goto LABEL_58;
  }
  else
  {
    v62 = v205;
    LOBYTE(v204) = v205 == 0x7FFFFFFFFFFFFFFFLL;
    if (v205 == 0x7FFFFFFFFFFFFFFFLL)
      v62 = 0;
    v205 = v62;
    if (!v206)
      goto LABEL_58;
  }
  v210 = *(_QWORD *)&v231[8];
  if ((BYTE8(v231[8]) & 1) != 0)
  {
    LOBYTE(v206) = 1;
    if (!v212)
      goto LABEL_63;
    goto LABEL_61;
  }
LABEL_58:
  v63 = v210;
  LOBYTE(v206) = v210 == 0x7FFFFFFFFFFFFFFFLL;
  if (v210 == 0x7FFFFFFFFFFFFFFFLL)
    v63 = 0;
  v210 = v63;
  if (!v212)
    goto LABEL_63;
LABEL_61:
  v60 = *(_QWORD *)&v231[9];
  if ((BYTE8(v231[9]) & 1) != 0)
  {
    v64 = 1;
    goto LABEL_65;
  }
LABEL_63:
  v64 = v60 == 0x7FFFFFFFFFFFFFFFLL;
  if (v60 == 0x7FFFFFFFFFFFFFFFLL)
    v60 = 0;
LABEL_65:
  v182 = v60;
  LOBYTE(v212) = v64;
  if (v218 == 1)
  {
    if ((v201 & 1) == 0 && v45 <= v199)
      v45 = v199;
    if (v45 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v199 = 0;
      v201 = 1;
    }
    else
    {
      v201 = 0;
      v199 = v45;
    }
    v174 = *(_QWORD *)&v233[6];
    v173 = BYTE8(v233[6]);
    v172 = *(_QWORD *)&v233[16];
    v176 = *(_QWORD *)&v233[17];
    v149 = *((_QWORD *)&v233[0] + 1);
    v150 = *(_QWORD *)&v233[0];
    v230[0] = v233[0];
    v147 = *((_QWORD *)&v233[1] + 1);
    v148 = *(_QWORD *)&v233[1];
    v230[1] = v233[1];
    v146 = *(_QWORD *)&v233[2];
    *(_QWORD *)&v230[2] = *(_QWORD *)&v233[2];
    v145 = BYTE8(v233[2]);
    BYTE8(v230[2]) = BYTE8(v233[2]);
    *(_QWORD *)&v230[3] = v199;
    BYTE8(v230[3]) = v201;
    *(_QWORD *)&v230[4] = v175;
    BYTE8(v230[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v230[5] = 1;
    BYTE8(v230[5]) = 0;
    *(_QWORD *)&v230[6] = *(_QWORD *)&v233[6];
    BYTE8(v230[6]) = BYTE8(v233[6]);
    v170 = *(_QWORD *)&v233[7];
    *(_QWORD *)&v230[7] = *(_QWORD *)&v233[7];
    v169 = BYTE8(v233[7]);
    BYTE8(v230[7]) = BYTE8(v233[7]);
    v168 = *(_QWORD *)&v233[8];
    *(_QWORD *)&v230[8] = *(_QWORD *)&v233[8];
    v167 = BYTE8(v233[8]);
    BYTE8(v230[8]) = BYTE8(v233[8]);
    v166 = *(_QWORD *)&v233[9];
    *(_QWORD *)&v230[9] = *(_QWORD *)&v233[9];
    v165 = BYTE8(v233[9]);
    BYTE8(v230[9]) = BYTE8(v233[9]);
    v164 = *(_QWORD *)&v233[10];
    *(_QWORD *)&v230[10] = *(_QWORD *)&v233[10];
    v163 = BYTE8(v233[10]);
    BYTE8(v230[10]) = BYTE8(v233[10]);
    v162 = *(_QWORD *)&v233[11];
    *(_QWORD *)&v230[11] = *(_QWORD *)&v233[11];
    v161 = BYTE8(v233[11]);
    BYTE8(v230[11]) = BYTE8(v233[11]);
    v160 = *(_QWORD *)&v233[12];
    *(_QWORD *)&v230[12] = *(_QWORD *)&v233[12];
    v159 = BYTE8(v233[12]);
    BYTE8(v230[12]) = BYTE8(v233[12]);
    v158 = *(_QWORD *)&v233[13];
    *(_QWORD *)&v230[13] = *(_QWORD *)&v233[13];
    v157 = BYTE8(v233[13]);
    BYTE8(v230[13]) = BYTE8(v233[13]);
    v156 = *(_QWORD *)&v233[14];
    *(_QWORD *)&v230[14] = *(_QWORD *)&v233[14];
    v155 = BYTE8(v233[14]);
    BYTE8(v230[14]) = BYTE8(v233[14]);
    v154 = *(_QWORD *)&v233[15];
    *(_QWORD *)&v230[15] = *(_QWORD *)&v233[15];
    v152 = BYTE8(v233[16]);
    v153 = BYTE8(v233[15]);
    BYTE8(v230[15]) = BYTE8(v233[15]);
    BYTE8(v230[16]) = BYTE8(v233[16]);
    *(_QWORD *)&v230[16] = *(_QWORD *)&v233[16];
    *(_QWORD *)&v230[17] = *(_QWORD *)&v233[17];
    v151 = BYTE8(v233[17]);
    WORD4(v230[17]) = WORD4(v233[17]);
    v143 = BYTE9(v233[17]);
    memcpy(v229, v230, 0x11AuLL);
    v80 = *(void (**)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v42 + 176);
    outlined retain of DateComponents((uint64_t)v230);
    v80(v228, v229, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v230);
    v76 = *(double *)v228;
    if ((BYTE8(v228[0]) & 1) != 0)
      goto LABEL_94;
    *(_QWORD *)&v229[0] = v41;
    *((_QWORD *)&v229[0] + 1) = v42;
    LOBYTE(v224[0]) = 2;
    *(_QWORD *)&v225[0] = *(_QWORD *)&v228[0];
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v224, 1, v81, (Swift::Bool)v225);
    v102 = *(double *)v228;
    v84 = v207;
    if ((BYTE8(v228[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v230);
      outlined release of DateComponents((uint64_t)__dst);
      *(double *)v221 = v102;
      *(_BYTE *)(v221 + 8) = 1;
      v229[0] = v59;
      v229[1] = v58;
      *(_QWORD *)&v229[2] = v196;
      BYTE8(v229[2]) = v197;
      *(_QWORD *)&v229[3] = v199;
      BYTE8(v229[3]) = v201;
      *(_QWORD *)&v229[4] = v208;
      BYTE8(v229[4]) = 0;
      *(_QWORD *)&v229[5] = v203;
      BYTE8(v229[5]) = 0;
      *(_QWORD *)&v229[6] = v180;
      BYTE8(v229[6]) = v181;
      *(_QWORD *)&v229[7] = v205;
      BYTE8(v229[7]) = v204;
      *(_QWORD *)&v229[8] = v210;
      BYTE8(v229[8]) = v206;
      *(_QWORD *)&v229[9] = v182;
      BYTE8(v229[9]) = v212;
      *(_QWORD *)&v229[10] = v183;
      BYTE8(v229[10]) = v184;
      *(_QWORD *)&v229[11] = v185;
      BYTE8(v229[11]) = v186;
      *(_QWORD *)&v229[12] = v187;
      BYTE8(v229[12]) = v188;
      *(_QWORD *)&v229[13] = v189;
      BYTE8(v229[13]) = v190;
      *(_QWORD *)&v229[14] = v191;
      BYTE8(v229[14]) = v192;
      *(_QWORD *)&v229[15] = v193;
      BYTE8(v229[15]) = v194;
      BYTE8(v229[16]) = v195;
      *(_QWORD *)&v229[16] = v178;
      *(_QWORD *)&v229[17] = v198;
LABEL_120:
      BYTE8(v229[17]) = v179;
      BYTE9(v229[17]) = v177;
      return (char *)outlined release of DateComponents((uint64_t)v229);
    }
    v109 = *(double *)v228;
    *(_QWORD *)&v228[0] = 4;
    if (v102 > 1.59271755e13)
      v109 = 1.59271755e13;
    *(_QWORD *)&v225[0] = fmax(v109, -2.11845067e11);
    ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)(v229, v228, v225, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v229);
    v97 = 0;
    v110 = *(_QWORD *)&v229[4];
    if (BYTE8(v229[4]))
      v110 = 0;
    v96 = v110 == 0x7FFFFFFFFFFFFFFFLL;
    if (v110 == 0x7FFFFFFFFFFFFFFFLL)
      v99 = 0;
    else
      v99 = v110;
    v98 = 1;
    v101 = v199;
    v94 = v199;
    v100 = v201;
    v95 = v201;
    v91 = v197;
    v85 = v196;
    v86 = *((_QWORD *)&v58 + 1);
    v87 = v58;
    v92 = v208;
    v93 = v175;
    v73 = v172;
    v90 = v212;
    goto LABEL_129;
  }
  v174 = *(_QWORD *)&v233[6];
  v173 = BYTE8(v233[6]);
  BYTE8(v230[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
  v149 = *((_QWORD *)&v233[0] + 1);
  v150 = *(_QWORD *)&v233[0];
  v230[0] = v233[0];
  v147 = *((_QWORD *)&v233[1] + 1);
  v148 = *(_QWORD *)&v233[1];
  v230[1] = v233[1];
  v146 = *(_QWORD *)&v233[2];
  *(_QWORD *)&v230[2] = *(_QWORD *)&v233[2];
  v145 = BYTE8(v233[2]);
  BYTE8(v230[2]) = BYTE8(v233[2]);
  *(_QWORD *)&v230[3] = v171;
  *(_QWORD *)&v230[4] = v175;
  BYTE8(v230[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v230[5] = 1;
  BYTE8(v230[5]) = 0;
  *(_QWORD *)&v230[6] = *(_QWORD *)&v233[6];
  BYTE8(v230[6]) = BYTE8(v233[6]);
  v170 = *(_QWORD *)&v233[7];
  *(_QWORD *)&v230[7] = *(_QWORD *)&v233[7];
  v169 = BYTE8(v233[7]);
  BYTE8(v230[7]) = BYTE8(v233[7]);
  v168 = *(_QWORD *)&v233[8];
  *(_QWORD *)&v230[8] = *(_QWORD *)&v233[8];
  v167 = BYTE8(v233[8]);
  BYTE8(v230[8]) = BYTE8(v233[8]);
  v166 = *(_QWORD *)&v233[9];
  *(_QWORD *)&v230[9] = *(_QWORD *)&v233[9];
  v165 = BYTE8(v233[9]);
  BYTE8(v230[9]) = BYTE8(v233[9]);
  v164 = *(_QWORD *)&v233[10];
  *(_QWORD *)&v230[10] = *(_QWORD *)&v233[10];
  v163 = BYTE8(v233[10]);
  BYTE8(v230[10]) = BYTE8(v233[10]);
  v162 = *(_QWORD *)&v233[11];
  *(_QWORD *)&v230[11] = *(_QWORD *)&v233[11];
  v161 = BYTE8(v233[11]);
  BYTE8(v230[11]) = BYTE8(v233[11]);
  v160 = *(_QWORD *)&v233[12];
  *(_QWORD *)&v230[12] = *(_QWORD *)&v233[12];
  v159 = BYTE8(v233[12]);
  BYTE8(v230[12]) = BYTE8(v233[12]);
  v158 = *(_QWORD *)&v233[13];
  *(_QWORD *)&v230[13] = *(_QWORD *)&v233[13];
  v157 = BYTE8(v233[13]);
  BYTE8(v230[13]) = BYTE8(v233[13]);
  v156 = *(_QWORD *)&v233[14];
  *(_QWORD *)&v230[14] = *(_QWORD *)&v233[14];
  v155 = BYTE8(v233[14]);
  BYTE8(v230[14]) = BYTE8(v233[14]);
  v154 = *(_QWORD *)&v233[15];
  *(_QWORD *)&v230[15] = *(_QWORD *)&v233[15];
  v152 = BYTE8(v233[16]);
  v153 = BYTE8(v233[15]);
  BYTE8(v230[15]) = BYTE8(v233[15]);
  BYTE8(v230[16]) = BYTE8(v233[16]);
  v73 = *(_QWORD *)&v233[16];
  *(_QWORD *)&v230[16] = *(_QWORD *)&v233[16];
  v176 = *(_QWORD *)&v233[17];
  *(_QWORD *)&v230[17] = *(_QWORD *)&v233[17];
  v151 = BYTE8(v233[17]);
  WORD4(v230[17]) = WORD4(v233[17]);
  v74 = BYTE9(v233[17]);
  memcpy(v229, v230, 0x11AuLL);
  v75 = *(void (**)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v42 + 176);
  outlined retain of DateComponents((uint64_t)v230);
  v75(v228, v229, ObjectType, v42);
  outlined release of DateComponents((uint64_t)v230);
  v76 = *(double *)v228;
  if ((BYTE8(v228[0]) & 1) != 0)
  {
LABEL_94:
    outlined release of DateComponents((uint64_t)v230);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)v221 = v76;
    *(_BYTE *)(v221 + 8) = 1;
    v229[0] = v59;
    v229[1] = v58;
    *(_QWORD *)&v229[2] = v196;
    BYTE8(v229[2]) = v197;
    *(_QWORD *)&v229[3] = v199;
    BYTE8(v229[3]) = v201;
    *(_QWORD *)&v229[4] = v208;
    BYTE8(v229[4]) = 0;
    *(_QWORD *)&v229[5] = v203;
    BYTE8(v229[5]) = 0;
    *(_QWORD *)&v229[6] = v180;
    BYTE8(v229[6]) = v181;
    *(_QWORD *)&v229[7] = v205;
    BYTE8(v229[7]) = v204;
    *(_QWORD *)&v229[8] = v210;
    BYTE8(v229[8]) = v206;
    *(_QWORD *)&v229[9] = v182;
    BYTE8(v229[9]) = v212;
    *(_QWORD *)&v229[10] = v183;
    BYTE8(v229[10]) = v184;
    *(_QWORD *)&v229[11] = v185;
    BYTE8(v229[11]) = v186;
    *(_QWORD *)&v229[12] = v187;
    BYTE8(v229[12]) = v188;
    *(_QWORD *)&v229[13] = v189;
    BYTE8(v229[13]) = v190;
    *(_QWORD *)&v229[14] = v191;
    BYTE8(v229[14]) = v192;
    *(_QWORD *)&v229[15] = v193;
    BYTE8(v229[15]) = v194;
    BYTE8(v229[16]) = v195;
    *(_QWORD *)&v229[16] = v178;
    *(_QWORD *)&v229[17] = v198;
    BYTE8(v229[17]) = v179;
    BYTE9(v229[17]) = v177;
    v77 = v229;
    return (char *)outlined release of DateComponents((uint64_t)v77);
  }
  v82 = *(double *)v228;
  LOBYTE(v228[0]) = 3;
  LOBYTE(v225[0]) = 2;
  if (v76 > 1.59271755e13)
    v82 = 1.59271755e13;
  *(_QWORD *)&v229[0] = fmax(v82, -2.11845067e11);
  result = (char *)(*(uint64_t (**)(_OWORD *, _OWORD *, __int128 *, uint64_t, uint64_t))(v42 + 144))(v228, v225, v229, ObjectType, v42);
  v84 = v207;
  v85 = v196;
  v86 = *((_QWORD *)&v58 + 1);
  v87 = v58;
  if ((v88 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)v230);
    outlined release of DateComponents((uint64_t)__dst);
    v229[0] = v59;
    v229[1] = v58;
    *(_QWORD *)&v229[2] = v196;
    BYTE8(v229[2]) = v197;
    *(_BYTE *)(v221 + 8) = 1;
    *(_QWORD *)v221 = 0;
    *(_QWORD *)&v229[3] = v199;
    BYTE8(v229[3]) = v201;
    *(_QWORD *)&v229[4] = v208;
    BYTE8(v229[4]) = 0;
    *(_QWORD *)&v229[5] = v203;
    BYTE8(v229[5]) = 0;
    *(_QWORD *)&v229[6] = v180;
    BYTE8(v229[6]) = v181;
    *(_QWORD *)&v229[7] = v205;
    BYTE8(v229[7]) = v204;
    *(_QWORD *)&v229[8] = v210;
    BYTE8(v229[8]) = v206;
    *(_QWORD *)&v229[9] = v182;
    BYTE8(v229[9]) = v212;
    *(_QWORD *)&v229[10] = v183;
    BYTE8(v229[10]) = v184;
    *(_QWORD *)&v229[11] = v185;
    BYTE8(v229[11]) = v186;
    *(_QWORD *)&v229[12] = v187;
    BYTE8(v229[12]) = v188;
    *(_QWORD *)&v229[13] = v189;
    BYTE8(v229[13]) = v190;
    *(_QWORD *)&v229[14] = v191;
    BYTE8(v229[14]) = v192;
    *(_QWORD *)&v229[15] = v193;
    BYTE8(v229[15]) = v194;
    BYTE8(v229[16]) = v195;
    *(_QWORD *)&v229[16] = v178;
    *(_QWORD *)&v229[17] = v198;
    goto LABEL_120;
  }
  v143 = v74;
  v89 = v83 - (_QWORD)result;
  v90 = v212;
  v91 = v197;
  if (__OFSUB__(v83, result))
  {
    __break(1u);
  }
  else
  {
    v92 = v208;
    v93 = v175;
    v94 = v171;
    v95 = v144;
    result = (char *)&v229[16] + 8;
    if (v203 >= v89 || (v89 = v203 - 1, !__OFSUB__(v203, 1)))
    {
      v96 = 0;
      v97 = v89 == 0x7FFFFFFFFFFFFFFFLL;
      if (v89 == 0x7FFFFFFFFFFFFFFFLL)
        v98 = 0;
      else
        v98 = v89;
      v99 = v208;
      v100 = v201;
      v101 = v199;
LABEL_129:
      *(_QWORD *)&v229[0] = v150;
      *((_QWORD *)&v229[0] + 1) = v149;
      *(_QWORD *)&v229[1] = v148;
      *((_QWORD *)&v229[1] + 1) = v147;
      *(_QWORD *)&v229[2] = v146;
      BYTE8(v229[2]) = v145;
      *(_QWORD *)&v229[3] = v94;
      BYTE8(v229[3]) = v95;
      *(_QWORD *)&v229[4] = v93;
      BYTE8(v229[4]) = v92 == 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v229[5] = 1;
      BYTE8(v229[5]) = 0;
      *(_QWORD *)&v229[6] = v174;
      BYTE8(v229[6]) = v173;
      *(_QWORD *)&v229[7] = v170;
      BYTE8(v229[7]) = v169;
      *(_QWORD *)&v229[8] = v168;
      BYTE8(v229[8]) = v167;
      *(_QWORD *)&v229[9] = v166;
      BYTE8(v229[9]) = v165;
      *(_QWORD *)&v229[10] = v164;
      BYTE8(v229[10]) = v163;
      *(_QWORD *)&v229[11] = v162;
      BYTE8(v229[11]) = v161;
      *(_QWORD *)&v229[12] = v160;
      BYTE8(v229[12]) = v159;
      *(_QWORD *)&v229[13] = v158;
      BYTE8(v229[13]) = v157;
      *(_QWORD *)&v229[14] = v156;
      BYTE8(v229[14]) = v155;
      *(_QWORD *)&v229[15] = v154;
      BYTE8(v229[15]) = v153;
      BYTE8(v229[16]) = v152;
      *(_QWORD *)&v229[16] = v73;
      *(_QWORD *)&v229[17] = v176;
      BYTE8(v229[17]) = v151;
      BYTE9(v229[17]) = v143;
      *(_QWORD *)&v225[0] = v41;
      *((_QWORD *)&v225[0] + 1) = v42;
      *(double *)v223 = v23;
      v230[0] = v59;
      *(_QWORD *)&v230[1] = v87;
      *((_QWORD *)&v230[1] + 1) = v86;
      *(_QWORD *)&v230[2] = v85;
      BYTE8(v230[2]) = v91;
      v200 = v101;
      *(_QWORD *)&v230[3] = v101;
      v202 = v100;
      BYTE8(v230[3]) = v100;
      *(_QWORD *)&v230[4] = v99;
      BYTE8(v230[4]) = v96;
      *(_QWORD *)&v230[5] = v98;
      BYTE8(v230[5]) = v97;
      *(_QWORD *)&v230[6] = v180;
      BYTE8(v230[6]) = v181;
      *(_QWORD *)&v230[7] = v205;
      BYTE8(v230[7]) = v204;
      *(_QWORD *)&v230[8] = v210;
      BYTE8(v230[8]) = v206;
      *(_QWORD *)&v230[9] = v182;
      BYTE8(v230[9]) = v90;
      *(_QWORD *)&v230[10] = v183;
      BYTE8(v230[10]) = v184;
      *(_QWORD *)&v230[11] = v185;
      BYTE8(v230[11]) = v186;
      *(_QWORD *)&v230[12] = v187;
      BYTE8(v230[12]) = v188;
      *(_QWORD *)&v230[13] = v189;
      BYTE8(v230[13]) = v190;
      *(_QWORD *)&v230[14] = v191;
      BYTE8(v230[14]) = v192;
      *(_QWORD *)&v230[15] = v193;
      BYTE8(v230[15]) = v194;
      BYTE8(v230[16]) = v195;
      *(_QWORD *)&v230[16] = v178;
      *(_QWORD *)&v230[17] = v198;
      BYTE8(v230[17]) = v179;
      BYTE9(v230[17]) = v177;
      v111 = v96;
      v112 = v99;
      v113 = v97;
      v114 = v98;
      memcpy(v228, v230, 0x11AuLL);
      LOBYTE(v222[0]) = v216;
      LOBYTE(v226) = v218;
      v227 = v214;
      outlined retain of DateComponents((uint64_t)v230);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v223, v228, (unsigned __int8 *)v222, (unsigned __int8 *)&v226, &v227, (double *)v224);
      if (v84)
      {
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v230);
        v108 = v229;
        goto LABEL_131;
      }
      v215 = v113;
      v217 = v112;
      outlined release of DateComponents((uint64_t)v230);
      v115 = *(double *)v224;
      if ((BYTE8(v224[0]) & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)v229);
        outlined release of DateComponents((uint64_t)__dst);
        result = (char *)outlined release of DateComponents((uint64_t)v230);
        v48 = v221;
        *(double *)v221 = v115;
        goto LABEL_14;
      }
      DateComponents.setUnits.getter(&v226);
      v121 = v226;
      *(_QWORD *)&v228[0] = v226;
      if (v115 <= 1.59271755e13)
        v122 = v115;
      else
        v122 = 1.59271755e13;
      *(_QWORD *)&v224[0] = fmax(v122, -2.11845067e11);
      outlined retain of DateComponents((uint64_t)v230);
      ((void (*)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)(v225, v228, v224, ObjectType, v42);
      v123 = *(_QWORD *)&v225[0];
      if ((v121 & 0x4000) != 0)
      {
        *(_QWORD *)&v225[0] = v41;
        *((_QWORD *)&v225[0] + 1) = v42;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (*(_QWORD *)&v225[1])
        {
          v228[0] = v225[1];
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v228);
          v123 = *(_QWORD *)&v225[0];
        }
        else
        {
          v123 = v41;
        }
      }
      v66 = v221;
      v133 = v225[1];
      *(_OWORD *)((char *)&v228[16] + 10) = *(_OWORD *)((char *)&v225[16] + 10);
      v228[14] = v225[14];
      v228[15] = v225[15];
      v228[16] = v225[16];
      v228[10] = v225[10];
      v228[11] = v225[11];
      v228[12] = v225[12];
      v228[13] = v225[13];
      v228[6] = v225[6];
      v228[7] = v225[7];
      v228[8] = v225[8];
      v228[9] = v225[9];
      v228[2] = v225[2];
      v228[3] = v225[3];
      v228[4] = v225[4];
      v228[5] = v225[5];
      *(_QWORD *)&v228[0] = v123;
      *((_QWORD *)&v228[0] + 1) = *((_QWORD *)&v225[0] + 1);
      v228[1] = v225[1];
      if ((_QWORD)v59)
      {
        v228[0] = v59;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if ((_QWORD)v133)
        {
          v224[0] = v133;
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v224);
        }
      }
      v79 = v198;
      if ((_QWORD)v58)
      {
        v228[1] = v58;
        swift_unknownObjectRetain_n();
        swift_unknownObjectRelease();
        if (*(_QWORD *)&v228[0])
        {
          v224[0] = v58;
          Calendar.timeZone.setter((uint64_t *)v224);
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      memcpy(v224, v228, 0x11AuLL);
      memcpy(v223, v228, 0x11AuLL);
      memcpy(v222, v230, 0x11AuLL);
      v134 = specialized static DateComponents.== infix(_:_:)((uint64_t)v223, v222);
      outlined release of DateComponents((uint64_t)v224);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v230);
      outlined release of DateComponents((uint64_t)v229);
      if (v134)
        v67 = v115;
      else
        v67 = 0.0;
      v65 = !v134;
      v135 = a10;
      v136 = v111;
      v137 = v217;
      v138 = v215;
      v139 = v114;
      v140 = v178;
      v78 = v177;
      goto LABEL_190;
    }
  }
  __break(1u);
  return result;
}

double *Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)@<X0>(double *a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, double *a7@<X8>)
{
  double *v7;
  double v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t ObjectType;
  uint64_t v19;
  double v21;
  double *v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  double v62;
  double v63[4];

  v9 = *a1;
  v36 = *((_QWORD *)a2 + 14);
  v10 = *((_BYTE *)a2 + 120);
  v11 = *a3;
  v37 = *a4;
  v12 = *a5;
  v13 = *a6;
  v15 = *v7;
  v14 = v7[1];
  LOBYTE(v62) = *a3;
  v16 = 1.59271755e13;
  if (v9 <= 1.59271755e13)
    v16 = v9;
  v17 = fmax(v16, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v63[0] = v17;
  (*(void (**)(__int128 *__return_ptr, double *, double *, uint64_t, double))(*(_QWORD *)&v14 + 160))(&v42, &v62, v63, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v14));
  if ((v43 & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v19 = v11;
    *(double *)(v19 + 8) = v9;
    *(_BYTE *)(v19 + 16) = 0;
    return (double *)swift_willThrow();
  }
  else
  {
    v21 = *(double *)&v42;
    if (v37)
    {
      v22 = a7;
      v23 = v36;
      if ((_DWORD)v11 == 3)
      {
        v21 = *(double *)&v42 + -1.0;
        v24 = v10 | (v36 != 0);
      }
      else
      {
        v24 = 1;
      }
    }
    else
    {
      v24 = 0;
      v21 = *((double *)&v42 + 1) + *(double *)&v42;
      v22 = a7;
      v23 = v36;
    }
    v63[0] = v15;
    v63[1] = v14;
    v62 = v21;
    v25 = a2[5];
    v46 = a2[4];
    v47 = v25;
    v48 = a2[6];
    v26 = a2[1];
    v42 = *a2;
    v43 = v26;
    v27 = a2[3];
    v44 = a2[2];
    v45 = v27;
    v49 = v23;
    v50 = v10;
    v28 = *((_BYTE *)a2 + 281);
    v29 = *(__int128 *)((char *)a2 + 249);
    v60 = *(__int128 *)((char *)a2 + 265);
    v30 = *(__int128 *)((char *)a2 + 121);
    v31 = *(__int128 *)((char *)a2 + 137);
    v32 = *(__int128 *)((char *)a2 + 169);
    v53 = *(__int128 *)((char *)a2 + 153);
    v52 = v31;
    v51 = v30;
    v33 = *(__int128 *)((char *)a2 + 185);
    v34 = *(__int128 *)((char *)a2 + 201);
    v35 = *(__int128 *)((char *)a2 + 233);
    v57 = *(__int128 *)((char *)a2 + 217);
    v56 = v34;
    v55 = v33;
    v54 = v32;
    v61 = v28;
    v59 = v29;
    v58 = v35;
    v41 = v24 & 1;
    v40 = v12;
    v39 = v13;
    return Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v62, &v42, &v41, &v40, &v39, v22);
  }
}

uint64_t Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t ObjectType;
  uint64_t result;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  int v18;
  _QWORD __dst[36];
  double v20;
  _QWORD __src[37];

  v5 = *a1;
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(unsigned __int8 *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(unsigned __int8 *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 144);
  v18 = *(unsigned __int8 *)(a2 + 152);
  v11 = *(_QWORD *)(v3 + 8);
  __dst[0] = 112;
  if (v5 > 1.59271755e13)
    v5 = 1.59271755e13;
  v12 = fmax(v5, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v20 = v12;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v11 + 192))(__src, __dst, &v20, ObjectType, v11);
  memcpy(__dst, __src, 0x11AuLL);
  result = outlined release of DateComponents((uint64_t)__dst);
  if (v7 && (v6 = __dst[14], (__dst[15] & 1) != 0))
  {
    v15 = 1;
  }
  else
  {
    v15 = v6 == 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      v6 = 0;
  }
  *(_QWORD *)(a3 + 112) = v6;
  *(_BYTE *)(a3 + 120) = v15;
  if (v9 && (v8 = __dst[16], (__dst[17] & 1) != 0))
  {
    v16 = 1;
  }
  else
  {
    v16 = v8 == 0x7FFFFFFFFFFFFFFFLL;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = 0;
  }
  *(_QWORD *)(a3 + 128) = v8;
  *(_BYTE *)(a3 + 136) = v16;
  if (v18 && (v10 = __dst[18], (__dst[19] & 1) != 0))
  {
    v17 = 1;
  }
  else
  {
    v17 = v10 == 0x7FFFFFFFFFFFFFFFLL;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      v10 = 0;
  }
  *(_QWORD *)(a3 + 144) = v10;
  *(_BYTE *)(a3 + 152) = v17;
  return result;
}

uint64_t Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, _BYTE *a10)
{
  double *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  int v27;
  const void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t ObjectType;
  char v34;
  double v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  uint64_t result;
  __int128 v40;
  unsigned __int8 v41;
  BOOL v42;
  double v43;
  void (*v44)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  __int16 v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  __int16 v55;
  double v56;
  double v57;
  __int128 v58;
  BOOL v59;
  __int128 v60;
  BOOL v61;
  double v62;
  double v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  double v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  int v117;
  unsigned __int8 v118;
  void (*v119)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v120;
  double v121[36];
  double v122;
  double v123;
  double v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  __int128 v128[18];
  double v129;
  unsigned __int8 v130;
  uint64_t v131;
  double v132;
  double v133;
  char v134;
  __int128 v135[18];
  _OWORD v136[18];
  _OWORD v137[18];
  __int128 v138[18];
  _OWORD v139[18];
  _OWORD v140[18];
  double v141;
  double v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD v158[2];
  uint64_t v159;
  _OWORD __src[18];
  _OWORD v161[18];
  _QWORD v162[36];
  _QWORD __dst[36];
  _QWORD v164[36];
  _QWORD v165[38];
  uint64_t v166;

  MEMORY[0x1E0C80A78](a1);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = *v20;
  v23 = *v22;
  v25 = *v24;
  v27 = *(unsigned __int8 *)(v26 + 281);
  memcpy(v165, v28, 0x11AuLL);
  v116 = *v17;
  v117 = *v15;
  v118 = *v13;
  v30 = *v10;
  v29 = v10[1];
  __dst[0] = 15;
  if (v25 <= 1.59271755e13)
    v31 = v25;
  else
    v31 = 1.59271755e13;
  v32 = fmax(v31, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)v162 = v32;
  v119 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)&v29 + 192);
  v119(v164, __dst, v162, ObjectType, *(_QWORD *)&v29);
  memcpy(__dst, v164, 0x11AuLL);
  if (v27 == 2 || BYTE1(__dst[35]) == 2 || (__dst[35] & 0x100) != 0 || (v27 & 1) == 0)
  {
    result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)v19 = v25;
    *(_BYTE *)(v19 + 8) = 0;
    return result;
  }
  v88 = v19;
  v115 = v11;
  *a9 = 0;
  v114 = v165[35];
  v112 = v165[32];
  v113 = v165[34];
  v110 = v165[31];
  v111 = v165[33];
  v108 = v165[28];
  v109 = v165[30];
  v106 = v165[27];
  v107 = v165[29];
  v104 = v165[24];
  v105 = v165[26];
  v102 = v165[23];
  v103 = v165[25];
  v100 = v165[20];
  v101 = v165[22];
  v98 = v165[19];
  v99 = v165[21];
  v96 = v165[16];
  v97 = v165[18];
  v94 = v165[15];
  v95 = v165[17];
  v92 = v165[12];
  v93 = v165[14];
  v91 = v165[11];
  v166 = v165[2];
  v120 = v165[0];
  memcpy(v161, v165, 0x11AuLL);
  LOBYTE(v162[33]) = v165[33];
  LOWORD(v162[35]) = LOBYTE(v165[35]);
  BYTE9(v161[17]) = 0;
  v162[0] = v165[0];
  v90 = v165[1];
  v162[1] = v165[1];
  v162[2] = v165[2];
  v89 = v165[3];
  v162[3] = v165[3];
  v80 = v165[4];
  v162[4] = v165[4];
  v81 = v165[5];
  LOBYTE(v162[5]) = v165[5];
  v82 = v165[6];
  v162[6] = v165[6];
  v83 = v165[7];
  v84 = v165[9];
  LOBYTE(v162[7]) = v165[7];
  v85 = v165[8];
  v86 = v165[10];
  v162[8] = v165[8];
  LOBYTE(v162[9]) = v165[9];
  v162[10] = v165[10];
  LOBYTE(v162[11]) = v165[11];
  v162[12] = v165[12];
  v34 = v165[13];
  LOBYTE(v162[13]) = v165[13];
  v162[14] = v165[14];
  LOBYTE(v162[15]) = v165[15];
  v162[16] = v165[16];
  LOBYTE(v162[17]) = v165[17];
  v162[18] = v165[18];
  LOBYTE(v162[19]) = v165[19];
  v162[20] = v165[20];
  LOBYTE(v162[21]) = v165[21];
  v162[22] = v165[22];
  LOBYTE(v162[23]) = v165[23];
  v162[24] = v165[24];
  v35 = v30;
  LOBYTE(v162[25]) = v165[25];
  v162[26] = v165[26];
  LOBYTE(v162[27]) = v165[27];
  v162[28] = v165[28];
  LOBYTE(v162[29]) = v165[29];
  v162[30] = v165[30];
  LOBYTE(v162[31]) = v165[31];
  v162[32] = v165[32];
  v162[34] = v165[34];
  v36 = ObjectType;
  DateComponents.setUnits.getter(&v159);
  v37 = v159;
  *(_QWORD *)&v140[0] = v159;
  *(double *)v139 = v32;
  outlined retain of DateComponents((uint64_t)v165);
  outlined retain of DateComponents((uint64_t)v162);
  v119(&v141, v140, v139, ObjectType, *(_QWORD *)&v29);
  v38 = v141;
  if ((v37 & 0x4000) != 0)
  {
    v141 = v35;
    v142 = v29;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((_QWORD)v143)
    {
      v140[0] = v143;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v140);
      v38 = v141;
    }
    else
    {
      v38 = v35;
    }
  }
  v40 = v143;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v158 + 10);
  __src[14] = v156;
  __src[15] = v157;
  __src[16] = v158[0];
  __src[10] = v152;
  __src[11] = v153;
  __src[12] = v154;
  __src[13] = v155;
  __src[6] = v148;
  __src[7] = v149;
  __src[8] = v150;
  __src[9] = v151;
  __src[2] = v144;
  __src[3] = v145;
  __src[4] = v146;
  __src[5] = v147;
  *(double *)__src = v38;
  *((double *)__src + 1) = v142;
  __src[1] = v143;
  if (v120)
  {
    *(_QWORD *)&__src[0] = v120;
    *((_QWORD *)&__src[0] + 1) = v90;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((_QWORD)v40)
    {
      v140[0] = v40;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)v140);
    }
  }
  v87 = v25;
  v41 = v118;
  if (v166)
  {
    *(_QWORD *)&__src[1] = v166;
    *((_QWORD *)&__src[1] + 1) = v89;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(_QWORD *)&__src[0])
    {
      *(_QWORD *)&v140[0] = v166;
      *((_QWORD *)&v140[0] + 1) = v89;
      Calendar.timeZone.setter((uint64_t *)v140);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  memcpy(v140, __src, 0x11AuLL);
  memcpy(v139, __src, 0x11AuLL);
  memcpy(v138, v162, 0x11AuLL);
  v42 = specialized static DateComponents.== infix(_:_:)((uint64_t)v139, v138);
  outlined release of DateComponents((uint64_t)v140);
  outlined release of DateComponents((uint64_t)v162);
  if (!v42)
  {
    *(double *)v138 = v35;
    *((double *)v138 + 1) = v29;
    *(_QWORD *)&v136[0] = v23;
    memcpy(v139, v162, 0x11AuLL);
    LOBYTE(v135[0]) = v116;
    LOBYTE(v128[0]) = v117;
    LOBYTE(v121[0]) = v118;
    outlined retain of DateComponents((uint64_t)v162);
    Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v136, v139, (unsigned __int8 *)v135, (unsigned __int8 *)v128, (unsigned __int8 *)v121, (double *)v137);
    if (v115)
    {
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v162);
      return outlined release of DateComponents((uint64_t)v162);
    }
    outlined release of DateComponents((uint64_t)v162);
    v47 = *(_QWORD *)&v137[0];
    if ((BYTE8(v137[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v162);
      result = outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)v88 = v47;
      *(_BYTE *)(v88 + 8) = 1;
      return result;
    }
    v87 = *(double *)v137;
    v25 = *(double *)v137;
    DateComponents.setUnits.getter((uint64_t *)v128);
    v50 = v128[0];
    *(_QWORD *)&v137[0] = *(_QWORD *)&v128[0];
    if (v25 <= 1.59271755e13)
      v51 = v25;
    else
      v51 = 1.59271755e13;
    *(_QWORD *)&v136[0] = fmax(v51, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v162);
    v119(v138, v137, v136, ObjectType, *(_QWORD *)&v29);
    v52 = *(double *)v138;
    v115 = 0;
    if ((v50 & 0x4000) != 0)
    {
      *(double *)v138 = v35;
      *((double *)v138 + 1) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v138[1])
      {
        v137[0] = v138[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v137);
        v52 = *(double *)v138;
      }
      else
      {
        v52 = v35;
      }
    }
    v41 = v118;
    v58 = v138[1];
    *(_OWORD *)((char *)&v139[16] + 10) = *(__int128 *)((char *)&v138[16] + 10);
    v139[14] = v138[14];
    v139[15] = v138[15];
    v139[16] = v138[16];
    v139[10] = v138[10];
    v139[11] = v138[11];
    v139[12] = v138[12];
    v139[13] = v138[13];
    v139[6] = v138[6];
    v139[7] = v138[7];
    v139[8] = v138[8];
    v139[9] = v138[9];
    v139[2] = v138[2];
    v139[3] = v138[3];
    v139[4] = v138[4];
    v139[5] = v138[5];
    *(double *)v139 = v52;
    *((_QWORD *)&v139[0] + 1) = *((_QWORD *)&v138[0] + 1);
    v139[1] = v138[1];
    if (v120)
    {
      *(_QWORD *)&v139[0] = v120;
      *((_QWORD *)&v139[0] + 1) = v90;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((_QWORD)v58)
      {
        v137[0] = v58;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v137);
      }
    }
    if (v166)
    {
      *(_QWORD *)&v139[1] = v166;
      *((_QWORD *)&v139[1] + 1) = v89;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v139[0])
      {
        *(_QWORD *)&v137[0] = v166;
        *((_QWORD *)&v137[0] + 1) = v89;
        Calendar.timeZone.setter((uint64_t *)v137);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v137, v139, 0x11AuLL);
    memcpy(v136, v139, 0x11AuLL);
    memcpy(v135, v162, 0x11AuLL);
    v59 = specialized static DateComponents.== infix(_:_:)((uint64_t)v136, v135);
    outlined release of DateComponents((uint64_t)v137);
    outlined release of DateComponents((uint64_t)v162);
    if (!v59)
    {
      outlined release of DateComponents((uint64_t)v162);
      result = outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)v88 = 0;
      *(_BYTE *)(v88 + 8) = 1;
      return result;
    }
  }
  LOBYTE(v138[0]) = 2;
  if (v25 <= 1.59271755e13)
    v43 = v25;
  else
    v43 = 1.59271755e13;
  *(_QWORD *)&v139[0] = fmax(v43, -2.11845067e11);
  v44 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)&v29 + 160);
  v44(&v132, v138, v139, ObjectType, *(_QWORD *)&v29);
  if ((v134 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)v162);
    result = outlined release of DateComponents((uint64_t)__dst);
    *(double *)v88 = v87;
    *(_BYTE *)(v88 + 8) = 0;
    return result;
  }
  *(_QWORD *)&v139[2] = v80;
  BYTE8(v139[2]) = v81;
  v45 = v132;
  *(_QWORD *)&v139[3] = v82;
  BYTE9(v161[17]) = 1;
  v46 = v133 + v132;
  *(double *)v137 = v35;
  *((double *)v137 + 1) = v29;
  *(double *)v135 = v133 + v132;
  *(_QWORD *)&v139[0] = v120;
  *((_QWORD *)&v139[0] + 1) = v90;
  *(_QWORD *)&v139[1] = v166;
  *((_QWORD *)&v139[1] + 1) = v89;
  BYTE8(v139[3]) = v83;
  *(_QWORD *)&v139[4] = v85;
  BYTE8(v139[4]) = v84;
  *(_QWORD *)&v139[5] = v86;
  BYTE8(v139[5]) = v91;
  *(_QWORD *)&v139[6] = v92;
  BYTE8(v139[6]) = v34;
  *(_QWORD *)&v139[7] = v93;
  BYTE8(v139[7]) = v94;
  *(_QWORD *)&v139[8] = v96;
  BYTE8(v139[8]) = v95;
  *(_QWORD *)&v139[9] = v97;
  BYTE8(v139[9]) = v98;
  *(_QWORD *)&v139[10] = v100;
  BYTE8(v139[10]) = v99;
  *(_QWORD *)&v139[11] = v101;
  BYTE8(v139[11]) = v102;
  *(_QWORD *)&v139[12] = v104;
  BYTE8(v139[12]) = v103;
  *(_QWORD *)&v139[13] = v105;
  BYTE8(v139[13]) = v106;
  *(_QWORD *)&v139[14] = v108;
  BYTE8(v139[14]) = v107;
  *(_QWORD *)&v139[15] = v109;
  BYTE8(v139[15]) = v110;
  BYTE8(v139[16]) = v111;
  *(_QWORD *)&v139[16] = v112;
  *(_QWORD *)&v139[17] = v113;
  BYTE8(v139[17]) = v114;
  BYTE9(v139[17]) = 1;
  memcpy(v138, v139, 0x11AuLL);
  LOBYTE(v128[0]) = v116;
  LOBYTE(v121[0]) = v117;
  LOBYTE(v122) = v41;
  outlined retain of DateComponents((uint64_t)v139);
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)v135, v138, (unsigned __int8 *)v128, (unsigned __int8 *)v121, (unsigned __int8 *)&v122, (double *)v136);
  if (v115)
  {
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)v139);
    return outlined release of DateComponents((uint64_t)v139);
  }
  outlined release of DateComponents((uint64_t)v139);
  if ((BYTE8(v136[0]) & 1) != 0)
  {
    v48 = v35;
    v49 = v88;
  }
  else
  {
    v53 = *(_QWORD *)&v136[0];
    v54 = *(double *)v136;
    DateComponents.setUnits.getter((uint64_t *)v121);
    v55 = LOWORD(v121[0]);
    *(double *)v136 = v121[0];
    if (v54 <= 1.59271755e13)
      v56 = v54;
    else
      v56 = 1.59271755e13;
    *(_QWORD *)&v135[0] = fmax(v56, -2.11845067e11);
    outlined retain of DateComponents((uint64_t)v139);
    v119(v137, v136, v135, v36, *(_QWORD *)&v29);
    v57 = *(double *)v137;
    if ((v55 & 0x4000) != 0)
    {
      *(double *)v137 = v35;
      *((double *)v137 + 1) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v137[1])
      {
        v136[0] = v137[1];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v136);
        v57 = *(double *)v137;
      }
      else
      {
        v57 = v35;
      }
    }
    v41 = v118;
    v60 = v137[1];
    *(__int128 *)((char *)&v138[16] + 10) = *(_OWORD *)((char *)&v137[16] + 10);
    v138[14] = v137[14];
    v138[15] = v137[15];
    v138[16] = v137[16];
    v138[10] = v137[10];
    v138[11] = v137[11];
    v138[12] = v137[12];
    v138[13] = v137[13];
    v138[6] = v137[6];
    v138[7] = v137[7];
    v138[8] = v137[8];
    v138[9] = v137[9];
    v138[2] = v137[2];
    v138[3] = v137[3];
    v138[4] = v137[4];
    v138[5] = v137[5];
    *(double *)v138 = v57;
    *((_QWORD *)&v138[0] + 1) = *((_QWORD *)&v137[0] + 1);
    v138[1] = v137[1];
    if (v120)
    {
      *(_QWORD *)&v138[0] = v120;
      *((_QWORD *)&v138[0] + 1) = v90;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if ((_QWORD)v60)
      {
        v136[0] = v60;
        swift_unknownObjectRetain();
        Calendar.timeZone.setter((uint64_t *)v136);
      }
    }
    v49 = v88;
    if (v166)
    {
      *(_QWORD *)&v138[1] = v166;
      *((_QWORD *)&v138[1] + 1) = v89;
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      if (*(_QWORD *)&v138[0])
      {
        *(_QWORD *)&v136[0] = v166;
        *((_QWORD *)&v136[0] + 1) = v89;
        Calendar.timeZone.setter((uint64_t *)v136);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    memcpy(v136, v138, 0x11AuLL);
    memcpy(v135, v138, 0x11AuLL);
    memcpy(v128, v139, 0x11AuLL);
    v61 = specialized static DateComponents.== infix(_:_:)((uint64_t)v135, v128);
    outlined release of DateComponents((uint64_t)v136);
    outlined release of DateComponents((uint64_t)v139);
    if (v61)
    {
      outlined release of DateComponents((uint64_t)v139);
      result = outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)v88 = v53;
      *(_BYTE *)(v88 + 8) = 0;
      return result;
    }
    v48 = v35;
  }
  if (v117 == 3)
  {
    outlined release of DateComponents((uint64_t)v139);
    result = outlined release of DateComponents((uint64_t)__dst);
    *(_QWORD *)v49 = 0;
    *(_BYTE *)(v49 + 8) = 1;
    return result;
  }
  v131 = 4;
  if (v46 <= 1.59271755e13)
    v62 = v46;
  else
    v62 = 1.59271755e13;
  v63 = fmax(v62, -2.11845067e11);
  *(double *)v136 = v63;
  v119(v138, &v131, v136, v36, *(_QWORD *)&v29);
  memcpy(v137, v138, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v137);
  if ((BYTE9(v137[17]) & 1) != 0)
  {
    if (!v117)
    {
      LOBYTE(v128[0]) = 2;
      *(double *)v135 = v63;
      v44(v136, v128, v135, v36, *(_QWORD *)&v29);
      outlined release of DateComponents((uint64_t)__dst);
      result = outlined release of DateComponents((uint64_t)v139);
      v67 = v87;
      if ((v136[1] & 1) == 0)
        v67 = *((double *)v136 + 1) + *(double *)v136;
      goto LABEL_120;
    }
    *(double *)v135 = v48;
    *((double *)v135 + 1) = v29;
    *(_QWORD *)&v128[0] = v21;
    memcpy(v136, v165, 0x11AuLL);
    Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v128, (uint64_t)v136, (uint64_t)v161);
    if (v117 == 1)
    {
      BYTE9(v161[17]) = 0;
      LOBYTE(v135[0]) = 3;
      *(double *)v136 = v63;
      v44(v128, v135, v136, v36, *(_QWORD *)&v29);
      if ((v128[1] & 1) != 0)
      {
        v166 = *(_QWORD *)&v161[16];
        v136[0] = v161[0];
        v136[1] = v161[1];
        *(_QWORD *)&v136[2] = *(_QWORD *)&v161[2];
        BYTE8(v136[2]) = BYTE8(v161[2]);
        *(_QWORD *)&v136[3] = *(_QWORD *)&v161[3];
        BYTE8(v136[3]) = BYTE8(v161[3]);
        *(_QWORD *)&v136[4] = *(_QWORD *)&v161[4];
        BYTE8(v136[4]) = BYTE8(v161[4]);
        *(_QWORD *)&v136[5] = 1;
        BYTE8(v136[5]) = 0;
        *(_QWORD *)&v136[6] = *(_QWORD *)&v161[6];
        BYTE8(v136[6]) = BYTE8(v161[6]);
        *(_QWORD *)&v136[7] = *(_QWORD *)&v161[7];
        BYTE8(v136[7]) = BYTE8(v161[7]);
        *(_QWORD *)&v136[8] = *(_QWORD *)&v161[8];
        BYTE8(v136[8]) = BYTE8(v161[8]);
        *(_QWORD *)&v136[9] = *(_QWORD *)&v161[9];
        BYTE8(v136[9]) = BYTE8(v161[9]);
        *(_QWORD *)&v136[10] = *(_QWORD *)&v161[10];
        BYTE8(v136[10]) = BYTE8(v161[10]);
        *(_QWORD *)&v136[11] = *(_QWORD *)&v161[11];
        BYTE8(v136[11]) = BYTE8(v161[11]);
        *(_QWORD *)&v136[12] = *(_QWORD *)&v161[12];
        BYTE8(v136[12]) = BYTE8(v161[12]);
        *(_QWORD *)&v136[13] = *(_QWORD *)&v161[13];
        BYTE8(v136[13]) = BYTE8(v161[13]);
        *(_QWORD *)&v136[14] = *(_QWORD *)&v161[14];
        BYTE8(v136[14]) = BYTE8(v161[14]);
        *(_QWORD *)&v136[15] = *(_QWORD *)&v161[15];
        BYTE8(v136[15]) = BYTE8(v161[15]);
        BYTE8(v136[16]) = BYTE8(v161[16]);
        *(_QWORD *)&v136[16] = *(_QWORD *)&v161[16];
        *(_QWORD *)&v136[17] = *(_QWORD *)&v161[17];
        WORD4(v136[17]) = BYTE8(v161[17]);
        outlined release of DateComponents((uint64_t)v136);
        result = outlined release of DateComponents((uint64_t)__dst);
        v67 = v87;
        v49 = v88;
        goto LABEL_120;
      }
      v121[0] = v48;
      v121[1] = v29;
      v124 = *((double *)v128 + 1) + *(double *)v128;
      v166 = *(_QWORD *)&v161[16];
      v136[0] = v161[0];
      v136[1] = v161[1];
      *(_QWORD *)&v136[2] = *(_QWORD *)&v161[2];
      BYTE8(v136[2]) = BYTE8(v161[2]);
      *(_QWORD *)&v136[3] = *(_QWORD *)&v161[3];
      BYTE8(v136[3]) = BYTE8(v161[3]);
      *(_QWORD *)&v136[4] = *(_QWORD *)&v161[4];
      BYTE8(v136[4]) = BYTE8(v161[4]);
      *(_QWORD *)&v136[5] = 1;
      BYTE8(v136[5]) = 0;
      *(_QWORD *)&v136[6] = *(_QWORD *)&v161[6];
      BYTE8(v136[6]) = BYTE8(v161[6]);
      *(_QWORD *)&v136[7] = *(_QWORD *)&v161[7];
      BYTE8(v136[7]) = BYTE8(v161[7]);
      *(_QWORD *)&v136[8] = *(_QWORD *)&v161[8];
      BYTE8(v136[8]) = BYTE8(v161[8]);
      *(_QWORD *)&v136[9] = *(_QWORD *)&v161[9];
      BYTE8(v136[9]) = BYTE8(v161[9]);
      *(_QWORD *)&v136[10] = *(_QWORD *)&v161[10];
      BYTE8(v136[10]) = BYTE8(v161[10]);
      *(_QWORD *)&v136[11] = *(_QWORD *)&v161[11];
      BYTE8(v136[11]) = BYTE8(v161[11]);
      *(_QWORD *)&v136[12] = *(_QWORD *)&v161[12];
      BYTE8(v136[12]) = BYTE8(v161[12]);
      *(_QWORD *)&v136[13] = *(_QWORD *)&v161[13];
      BYTE8(v136[13]) = BYTE8(v161[13]);
      *(_QWORD *)&v136[14] = *(_QWORD *)&v161[14];
      BYTE8(v136[14]) = BYTE8(v161[14]);
      *(_QWORD *)&v136[15] = *(_QWORD *)&v161[15];
      BYTE8(v136[15]) = BYTE8(v161[15]);
      BYTE8(v136[16]) = BYTE8(v161[16]);
      *(_QWORD *)&v136[16] = *(_QWORD *)&v161[16];
      *(_QWORD *)&v136[17] = *(_QWORD *)&v161[17];
      WORD4(v136[17]) = BYTE8(v161[17]);
      memcpy(v135, v136, 0x11AuLL);
      LOBYTE(v129) = 0;
      v130 = 1;
      v127 = v118;
      outlined retain of DateComponents((uint64_t)v136);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v124, v135, (unsigned __int8 *)&v129, &v130, &v127, &v122);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v136);
      result = outlined release of DateComponents((uint64_t)v136);
      v76 = v122;
      v79 = LOBYTE(v123);
      v67 = v87;
      v49 = v88;
    }
    else
    {
      LOBYTE(v128[0]) = 2;
      *(double *)v136 = v63;
      v44(v135, v128, v136, v36, *(_QWORD *)&v29);
      if ((v135[1] & 1) != 0)
      {
        memcpy(v136, v161, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v136);
        result = outlined release of DateComponents((uint64_t)__dst);
        v67 = v87;
        goto LABEL_120;
      }
      v68 = *((double *)v135 + 1) + *(double *)v135 + -1.0;
      *(_QWORD *)&v135[0] = 12;
      if (v68 <= 1.59271755e13)
        v69 = v68;
      else
        v69 = 1.59271755e13;
      *(_QWORD *)&v128[0] = fmax(v69, -2.11845067e11);
      v119(v136, v135, v128, v36, *(_QWORD *)&v29);
      memcpy(v135, v136, 0x11AuLL);
      v70 = *(_QWORD *)&v135[4];
      if (*(_QWORD *)&v135[4] == 0x7FFFFFFFFFFFFFFFLL)
        v71 = 0;
      else
        v71 = *(_QWORD *)&v135[4];
      if (*(_QWORD *)&v135[4] == 0x7FFFFFFFFFFFFFFFLL)
        v72 = 1;
      else
        v72 = BYTE8(v135[4]);
      v73 = *(_QWORD *)&v135[5];
      if (!BYTE8(v135[4]))
        v70 = v71;
      if (*(_QWORD *)&v135[5] == 0x7FFFFFFFFFFFFFFFLL)
        v74 = 0;
      else
        v74 = *(_QWORD *)&v135[5];
      if (*(_QWORD *)&v135[5] == 0x7FFFFFFFFFFFFFFFLL)
        v75 = 1;
      else
        v75 = BYTE8(v135[5]);
      if (!BYTE8(v135[5]))
        v73 = v74;
      v122 = v48;
      v123 = v29;
      *(_QWORD *)&v128[2] = *(_QWORD *)&v161[2];
      BYTE8(v128[2]) = BYTE8(v161[2]);
      *(_QWORD *)&v128[3] = *(_QWORD *)&v161[3];
      BYTE8(v128[3]) = BYTE8(v161[3]);
      *(_QWORD *)&v161[4] = v70;
      *(_QWORD *)&v128[4] = v70;
      BYTE8(v161[4]) = v72;
      BYTE8(v128[4]) = v72;
      *(_QWORD *)&v161[5] = v73;
      *(_QWORD *)&v128[5] = v73;
      BYTE8(v161[5]) = v75;
      BYTE8(v128[5]) = v75;
      *(_QWORD *)&v128[6] = *(_QWORD *)&v161[6];
      BYTE8(v128[6]) = BYTE8(v161[6]);
      *(_QWORD *)&v128[7] = *(_QWORD *)&v161[7];
      BYTE8(v128[7]) = BYTE8(v161[7]);
      *(_QWORD *)&v128[8] = *(_QWORD *)&v161[8];
      BYTE8(v128[8]) = BYTE8(v161[8]);
      *(_QWORD *)&v128[9] = *(_QWORD *)&v161[9];
      BYTE8(v128[9]) = BYTE8(v161[9]);
      *(_QWORD *)&v128[10] = *(_QWORD *)&v161[10];
      BYTE8(v128[10]) = BYTE8(v161[10]);
      *(_QWORD *)&v128[11] = *(_QWORD *)&v161[11];
      BYTE8(v128[11]) = BYTE8(v161[11]);
      *(_QWORD *)&v128[12] = *(_QWORD *)&v161[12];
      BYTE8(v128[12]) = BYTE8(v161[12]);
      *(_QWORD *)&v128[13] = *(_QWORD *)&v161[13];
      BYTE8(v128[13]) = BYTE8(v161[13]);
      *(_QWORD *)&v128[14] = *(_QWORD *)&v161[14];
      BYTE8(v128[14]) = BYTE8(v161[14]);
      *(_QWORD *)&v128[15] = *(_QWORD *)&v161[15];
      BYTE8(v128[15]) = BYTE8(v161[15]);
      BYTE8(v128[16]) = BYTE8(v161[16]);
      BYTE8(v128[17]) = BYTE8(v161[17]);
      *(_QWORD *)&v128[16] = *(_QWORD *)&v161[16];
      v129 = v68;
      v128[0] = v161[0];
      v128[1] = v161[1];
      *(_QWORD *)&v128[17] = *(_QWORD *)&v161[17];
      BYTE9(v128[17]) = 1;
      memcpy(v121, v128, 0x11AuLL);
      v130 = 1;
      v127 = v117;
      v126 = v118;
      outlined retain of DateComponents((uint64_t)v128);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v129, v121, &v130, &v127, &v126, &v124);
      v67 = v87;
      outlined release of DateComponents((uint64_t)v135);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v128);
      result = outlined release of DateComponents((uint64_t)v128);
      v76 = v124;
      v79 = v125;
    }
    v78 = v79 == 0;
LABEL_117:
    if (v78)
      v67 = v76;
    goto LABEL_120;
  }
  if (v117)
  {
    BYTE9(v161[17]) = 0;
    *(double *)v135 = v48;
    *((double *)v135 + 1) = v29;
    *(_QWORD *)&v128[0] = v21;
    memcpy(v136, v165, 0x11AuLL);
    Calendar.preserveSmallerUnits(_:compsToMatch:compsToModify:)((double *)v128, (uint64_t)v136, (uint64_t)v161);
    if (v117 == 1)
    {
      *(_QWORD *)&v124 = 4;
      *(double *)v135 = v63;
      v119(v136, &v124, v135, v36, *(_QWORD *)&v29);
      outlined release of DateComponents((uint64_t)v136);
      v64 = *(_QWORD *)&v136[4];
      if (BYTE8(v136[4]))
        v64 = 0;
      v65 = v64 == 0x7FFFFFFFFFFFFFFFLL;
      v121[0] = v48;
      v121[1] = v29;
      *(_QWORD *)&v135[2] = *(_QWORD *)&v161[2];
      BYTE8(v135[2]) = BYTE8(v161[2]);
      *(_QWORD *)&v135[3] = *(_QWORD *)&v161[3];
      BYTE8(v135[3]) = BYTE8(v161[3]);
      if (v64 == 0x7FFFFFFFFFFFFFFFLL)
        v64 = 0;
      *(_QWORD *)&v135[4] = v64;
      v66 = v65;
      BYTE8(v135[4]) = v66;
      *(_QWORD *)&v135[5] = *(_QWORD *)&v161[5];
      BYTE8(v135[5]) = BYTE8(v161[5]);
      *(_QWORD *)&v135[6] = *(_QWORD *)&v161[6];
      BYTE8(v135[6]) = BYTE8(v161[6]);
      *(_QWORD *)&v135[7] = *(_QWORD *)&v161[7];
      BYTE8(v135[7]) = BYTE8(v161[7]);
      *(_QWORD *)&v135[8] = *(_QWORD *)&v161[8];
      BYTE8(v135[8]) = BYTE8(v161[8]);
      *(_QWORD *)&v135[9] = *(_QWORD *)&v161[9];
      BYTE8(v135[9]) = BYTE8(v161[9]);
      *(_QWORD *)&v135[10] = *(_QWORD *)&v161[10];
      BYTE8(v135[10]) = BYTE8(v161[10]);
      *(_QWORD *)&v135[11] = *(_QWORD *)&v161[11];
      BYTE8(v135[11]) = BYTE8(v161[11]);
      *(_QWORD *)&v135[12] = *(_QWORD *)&v161[12];
      BYTE8(v135[12]) = BYTE8(v161[12]);
      *(_QWORD *)&v135[13] = *(_QWORD *)&v161[13];
      BYTE8(v135[13]) = BYTE8(v161[13]);
      *(_QWORD *)&v135[14] = *(_QWORD *)&v161[14];
      BYTE8(v135[14]) = BYTE8(v161[14]);
      *(_QWORD *)&v135[15] = *(_QWORD *)&v161[15];
      BYTE8(v135[15]) = BYTE8(v161[15]);
      BYTE8(v135[16]) = BYTE8(v161[16]);
      WORD4(v135[17]) = WORD4(v161[17]);
      *(_QWORD *)&v135[16] = *(_QWORD *)&v161[16];
      *(_QWORD *)&v135[17] = *(_QWORD *)&v161[17];
      v129 = v46;
      v135[0] = v161[0];
      v135[1] = v161[1];
      memcpy(v128, v135, 0x11AuLL);
      v130 = 0;
      v127 = 1;
      v126 = v41;
      outlined retain of DateComponents((uint64_t)v135);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v129, v128, &v130, &v127, &v126, &v122);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v135);
      result = outlined release of DateComponents((uint64_t)v135);
      v76 = v122;
      v77 = LOBYTE(v123);
    }
    else
    {
      *(double *)v128 = v48;
      *((double *)v128 + 1) = v29;
      v122 = v45;
      memcpy(v136, v161, 0x11AuLL);
      memcpy(v135, v161, 0x11AuLL);
      LOBYTE(v124) = 0;
      LOBYTE(v129) = v117;
      v130 = v41;
      outlined retain of DateComponents((uint64_t)v136);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v122, v135, (unsigned __int8 *)&v124, (unsigned __int8 *)&v129, &v130, v121);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v136);
      result = outlined release of DateComponents((uint64_t)v136);
      v76 = v121[0];
      v77 = LOBYTE(v121[1]);
    }
    v78 = v77 == 0;
    v67 = v87;
    goto LABEL_117;
  }
  outlined release of DateComponents((uint64_t)v139);
  result = outlined release of DateComponents((uint64_t)__dst);
  v67 = v46;
LABEL_120:
  *a10 = 1;
  *(double *)v49 = v67;
  *(_BYTE *)(v49 + 8) = 0;
  return result;
}

uint64_t initializeWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v4 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v4;
  v5 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v5;
  v6 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v6;
  v7 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v7;
  v8 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v8;
  v9 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2 + 331;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v19;
  v20 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v20;
  v21 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v21;
  v22 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v22;
  v23 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v23;
  v24 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v24;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(v4 + 1);
  return a1;
}

void *__swift_memcpy333_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14DuLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 + 331;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v6 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v6;
  v7 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v7;
  v8 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v8;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(v4 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 333))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 332) = 0;
    *(_DWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 333) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 333) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching()
{
  return &type metadata for Calendar.DatesByMatching;
}

uint64_t initializeWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v4 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v4;
  v5 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v5;
  v6 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v6;
  v7 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v7;
  v8 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v8;
  v9 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v15;
  v16 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v16;
  v17 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v17;
  v18 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v19;
  v20 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v20;
  v21 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v21;
  v22 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v22;
  v23 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v23;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  return a1;
}

void *__swift_memcpy331_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14BuLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v4;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v5;
  v6 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v6;
  v7 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v7;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 331))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 330) = 0;
    *(_WORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 331) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 331) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding()
{
  return &type metadata for Calendar.DatesByAdding;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByMatching.Iterator, &type metadata for Calendar.DatesByMatching.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching.Iterator and conformance Calendar.DatesByMatching.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByAdding.Iterator, &type metadata for Calendar.DatesByAdding.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding.Iterator and conformance Calendar.DatesByAdding.Iterator);
  }
  return result;
}

double *Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  char v21;
  _QWORD __dst[36];
  uint64_t v23;
  double __src[36];
  _QWORD v25[13];
  char v26;
  uint64_t v27;

  if ((*(_BYTE *)(a2 + 104) & 1) != 0)
    goto LABEL_26;
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *a3;
  v9 = *(_QWORD *)(v4 + 8);
  v27 = 0x40000;
  if (v6 <= 1.59271755e13)
    v10 = v6;
  else
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __src[0] = v11;
  v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v25, &v27, __src, ObjectType, v9);
  result = (double *)outlined release of DateComponents((uint64_t)v25);
  if ((v26 & 1) != 0)
  {
    if (v7)
      goto LABEL_7;
LABEL_26:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  if (v7 == v25[12])
    goto LABEL_26;
LABEL_7:
  v14 = *(void (**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v23) = 17;
    if (v6 <= 1.59271755e13)
      v15 = v6;
    else
      v15 = 1.59271755e13;
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v23, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      v21 = 0;
      *(_QWORD *)v20 = 17;
      goto LABEL_29;
    }
    if (v8)
      v16 = __src[0] - __src[1];
    else
      v16 = __src[1] + __src[0];
    v23 = 0x40000;
    if (v16 <= 1.59271755e13)
      v17 = v16;
    else
      v17 = 1.59271755e13;
    __dst[0] = fmax(v17, -2.11845067e11);
    v13(__src, &v23, (double *)__dst, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    v18 = __dst[12];
    if (LOBYTE(__dst[13]))
      v18 = 0;
    v19 = v6 >= v16;
    if (v8)
      v19 = v16 >= v6;
    if (v19)
      break;
    v6 = v16;
    if (v7 == v18)
    {
      *(double *)a4 = v16;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)v20 = v16;
  v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(_BYTE *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

uint64_t Calendar.dateIfEraHasYear(era:year:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t result;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char i;
  double v56;
  double v57;
  double v58;
  char v59;
  uint64_t v60;
  char v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105[36];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 __dst[18];
  _BYTE __src[296];

  v6 = *(_QWORD *)(v3 + 8);
  __dst[0] = 0uLL;
  v106 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v106, a1, 0, a2, 0, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176))(v105, __dst, ObjectType, v6);
  result = outlined release of DateComponents((uint64_t)__src);
  if ((v105[1] & 1) != 0)
  {
    *(_QWORD *)a3 = v105[0];
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  v9 = *(double *)v105;
  *(_QWORD *)&v106 = 3;
  if (*(double *)v105 <= 1.59271755e13)
    v10 = *(double *)v105;
  else
    v10 = 1.59271755e13;
  v105[0] = fmax(v10, -2.11845067e11);
  v89 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t))(v6 + 192);
  v89(__dst, &v106, v105, ObjectType, v6);
  v11 = *(_QWORD *)&__dst[0];
  v91 = ObjectType;
  v77 = a2;
  v90 = v6;
  v12 = *((_QWORD *)&__dst[0] + 1);
  v14 = *((_QWORD *)&__dst[1] + 1);
  v13 = *(_QWORD *)&__dst[1];
  v87 = *(_QWORD *)&__dst[2];
  v15 = BYTE8(__dst[2]);
  v16 = *(_QWORD *)&__dst[3];
  v17 = BYTE8(__dst[3]);
  v18 = *(_QWORD *)&__dst[4];
  v19 = BYTE8(__dst[4]);
  v20 = *(_QWORD *)&__dst[5];
  v21 = BYTE8(__dst[5]);
  v22 = *(_QWORD *)&__dst[6];
  v23 = BYTE8(__dst[6]);
  v24 = *(_QWORD *)&__dst[7];
  v25 = BYTE8(__dst[7]);
  v26 = *(_QWORD *)&__dst[8];
  v27 = BYTE8(__dst[8]);
  v28 = *(_QWORD *)&__dst[9];
  v29 = BYTE8(__dst[9]);
  v88 = *(_QWORD *)&__dst[10];
  v30 = BYTE8(__dst[10]);
  v31 = *(_QWORD *)&__dst[11];
  v32 = BYTE8(__dst[11]);
  v76 = *(_QWORD *)&__dst[12];
  v75 = BYTE8(__dst[12]);
  v33 = *(_QWORD *)&__dst[13];
  v34 = BYTE8(__dst[13]);
  v86 = *(_QWORD *)&__dst[14];
  v85 = BYTE8(__dst[14]);
  v84 = *(_QWORD *)&__dst[15];
  v82 = BYTE8(__dst[15]);
  v83 = BYTE8(__dst[16]);
  v81 = *(_QWORD *)&__dst[16];
  v79 = *(_QWORD *)&__dst[17];
  v74 = a3;
  v80 = BYTE8(__dst[17]);
  v78 = BYTE9(__dst[17]);
  if (v77 == 1)
  {
    v101 = *(_QWORD *)&__dst[3];
    v106 = 0uLL;
    v105[1] = 0;
    v105[0] = 0;
    v100 = *(_QWORD *)&__dst[0];
    v73 = BYTE8(__dst[5]);
    v72 = *(_QWORD *)&__dst[6];
    v71 = BYTE8(__dst[6]);
    v70 = *(_QWORD *)&__dst[7];
    v69 = BYTE8(__dst[7]);
    v68 = *(_QWORD *)&__dst[8];
    v67 = BYTE8(__dst[8]);
    v66 = *(_QWORD *)&__dst[9];
    v99 = BYTE8(__dst[3]);
    v97 = *(_QWORD *)&__dst[1];
    v98 = *((_QWORD *)&__dst[0] + 1);
    v95 = *(_QWORD *)&__dst[4];
    v96 = *((_QWORD *)&__dst[1] + 1);
    v94 = BYTE8(__dst[4]);
    v93 = *(_QWORD *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v106, v105, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    v35 = v66;
    v36 = v67;
    v37 = v68;
    v38 = v69;
    v39 = v70;
    v40 = v71;
    v41 = v72;
    v42 = v73;
    v43 = v87;
    v44 = v88;
    v45 = v76;
    v46 = v75;
    v47 = v86;
    v48 = v85;
    v49 = v84;
    v50 = v83;
    v51 = v82;
    v52 = v81;
    v53 = v80;
    v54 = v79;
    for (i = v78; ; i = BYTE1(v105[35]))
    {
      *(_QWORD *)&v106 = v100;
      *((_QWORD *)&v106 + 1) = v98;
      v107 = v97;
      v108 = v96;
      v111 = v101;
      v110 = v15 & 1;
      v109 = v43;
      v112 = v99 & 1;
      v113 = v95;
      v114 = v94 & 1;
      v115 = v93;
      v116 = v42 & 1;
      v117 = v41;
      v118 = v40 & 1;
      v119 = v39;
      v120 = v38 & 1;
      v121 = v37;
      v122 = v36 & 1;
      v123 = v35;
      v124 = v29 & 1;
      v125 = v44;
      v126 = v30 & 1;
      v127 = v31;
      v128 = v32 & 1;
      v129 = v45;
      v130 = v46 & 1;
      v131 = v33;
      v132 = v34 & 1;
      v133 = v47;
      v134 = v48 & 1;
      v135 = v49;
      v136 = v51 & 1;
      v138 = v50 & 1;
      v137 = v52;
      v139 = v54;
      v140 = v53 & 1;
      v141 = i;
      if ((v15 & 1) != 0 || v43 >= a1)
        break;
      memcpy(v105, __dst, 0x11AuLL);
      if (v9 <= 1.59271755e13)
        v56 = v9;
      else
        v56 = 1.59271755e13;
      v104 = fmax(v56, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, _QWORD, uint64_t, uint64_t))(v90 + 200))(&v102, v105, &v104, 0, v91, v90);
      v57 = *(double *)&v102;
      if ((v103 & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)__dst);
        result = outlined release of DateComponents((uint64_t)&v106);
        v65 = v74;
        *(double *)v74 = v57;
        goto LABEL_31;
      }
      v9 = *(double *)&v102;
      v102 = 1;
      if (v57 <= 1.59271755e13)
        v58 = v57;
      else
        v58 = 1.59271755e13;
      v104 = fmax(v58, -2.11845067e11);
      v89((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v91, v90);
      outlined release of DateComponents((uint64_t)&v106);
      v97 = v105[2];
      v98 = v105[1];
      v43 = v105[4];
      LOBYTE(v15) = v105[5];
      v100 = v105[0];
      v101 = v105[6];
      v99 = v105[7];
      v95 = v105[8];
      v96 = v105[3];
      v94 = v105[9];
      v93 = v105[10];
      v42 = v105[11];
      v41 = v105[12];
      v40 = v105[13];
      v39 = v105[14];
      v38 = v105[15];
      v37 = v105[16];
      v36 = v105[17];
      v35 = v105[18];
      v29 = v105[19];
      v44 = v105[20];
      v30 = v105[21];
      v31 = v105[22];
      v32 = v105[23];
      v45 = v105[24];
      v46 = v105[25];
      v33 = v105[26];
      v34 = v105[27];
      v47 = v105[28];
      v48 = v105[29];
      v49 = v105[30];
      v51 = v105[31];
      v50 = v105[33];
      v52 = v105[32];
      v54 = v105[34];
      v53 = v105[35];
    }
    v102 = 3;
    if (v9 <= 1.59271755e13)
      v62 = v9;
    else
      v62 = 1.59271755e13;
    v104 = fmax(v62, -2.11845067e11);
    v89((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v91, v90);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v106);
    v11 = v105[0];
    v12 = v105[1];
    v13 = v105[2];
    v14 = v105[3];
    v87 = v105[4];
    v15 = LOBYTE(v105[5]);
    v16 = v105[6];
    v17 = LOBYTE(v105[7]);
    v18 = v105[8];
    v19 = v105[9];
    v20 = v105[10];
    v21 = v105[11];
    v22 = v105[12];
    v23 = v105[13];
    v24 = v105[14];
    v25 = v105[15];
    v26 = v105[16];
    v27 = v105[17];
    v28 = v105[18];
    v29 = v105[19];
    v88 = v105[20];
    v30 = v105[21];
    v31 = v105[22];
    v32 = v105[23];
    v60 = v105[24];
    v61 = v105[25];
    v33 = v105[26];
    v59 = v105[27];
    v86 = v105[28];
    v83 = v105[33];
    v80 = v105[35];
    v85 = v105[29];
    v84 = v105[30];
    v82 = v105[31];
    v81 = v105[32];
    v79 = v105[34];
    v78 = BYTE1(v105[35]);
  }
  else
  {
    v59 = BYTE8(__dst[13]);
    v60 = *(_QWORD *)&__dst[12];
    v61 = BYTE8(__dst[12]);
  }
  *(_QWORD *)&__dst[0] = v11;
  *((_QWORD *)&__dst[0] + 1) = v12;
  *(_QWORD *)&__dst[1] = v13;
  *((_QWORD *)&__dst[1] + 1) = v14;
  *(_QWORD *)&__dst[2] = v87;
  BYTE8(__dst[2]) = v15;
  v63 = v16;
  *(_QWORD *)&__dst[3] = v16;
  v64 = v17;
  BYTE8(__dst[3]) = v17;
  *(_QWORD *)&__dst[4] = v18;
  BYTE8(__dst[4]) = v19;
  *(_QWORD *)&__dst[5] = v20;
  BYTE8(__dst[5]) = v21;
  *(_QWORD *)&__dst[6] = v22;
  BYTE8(__dst[6]) = v23;
  *(_QWORD *)&__dst[7] = v24;
  BYTE8(__dst[7]) = v25;
  *(_QWORD *)&__dst[8] = v26;
  BYTE8(__dst[8]) = v27;
  *(_QWORD *)&__dst[9] = v28;
  BYTE8(__dst[9]) = v29;
  *(_QWORD *)&__dst[10] = v88;
  BYTE8(__dst[10]) = v30;
  *(_QWORD *)&__dst[11] = v31;
  BYTE8(__dst[11]) = v32;
  *(_QWORD *)&__dst[12] = v60;
  BYTE8(__dst[12]) = v61;
  *(_QWORD *)&__dst[13] = v33;
  BYTE8(__dst[13]) = v59;
  *(_QWORD *)&__dst[14] = v86;
  BYTE8(__dst[14]) = v85;
  *(_QWORD *)&__dst[15] = v84;
  BYTE8(__dst[15]) = v82;
  BYTE8(__dst[16]) = v83;
  *(_QWORD *)&__dst[16] = v81;
  *(_QWORD *)&__dst[17] = v79;
  BYTE8(__dst[17]) = v80;
  BYTE9(__dst[17]) = v78;
  result = outlined release of DateComponents((uint64_t)__dst);
  if (!v15)
  {
    if (v87 != a1)
      goto LABEL_29;
LABEL_27:
    if (v64)
    {
      if (v77 != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_29;
    }
    else if (v63 != v77)
    {
      goto LABEL_29;
    }
    *(double *)v74 = v9;
    *(_BYTE *)(v74 + 8) = 0;
    return result;
  }
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_27;
LABEL_29:
  v65 = v74;
  *(_QWORD *)v74 = 0;
LABEL_31:
  *(_BYTE *)(v65 + 8) = 1;
  return result;
}

_QWORD *Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *result;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char i;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  int v62;
  BOOL v63;
  double v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void (*v88)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105[36];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 __dst[18];
  _BYTE __src[296];

  v6 = *(_QWORD *)(v3 + 8);
  __dst[0] = 0uLL;
  v106 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v106, a1, 0, a2, 0, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176))(v105, __dst, ObjectType, v6);
  result = (_QWORD *)outlined release of DateComponents((uint64_t)__src);
  v9 = *(double *)v105;
  if ((v105[1] & 1) != 0)
    goto LABEL_31;
  *(_QWORD *)&v106 = 3;
  if (*(double *)v105 <= 1.59271755e13)
    v10 = *(double *)v105;
  else
    v10 = 1.59271755e13;
  v105[0] = fmax(v10, -2.11845067e11);
  v88 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t *, uint64_t, uint64_t))(v6 + 192);
  v88(__dst, &v106, v105, ObjectType, v6);
  v11 = *(_QWORD *)&__dst[0];
  v90 = v6;
  v89 = ObjectType;
  v75 = a3;
  v76 = a2;
  v13 = *((_QWORD *)&__dst[1] + 1);
  v12 = *(_QWORD *)&__dst[1];
  v85 = *(_QWORD *)&__dst[2];
  v14 = BYTE8(__dst[2]);
  v15 = *(_QWORD *)&__dst[3];
  v16 = BYTE8(__dst[3]);
  v17 = *(_QWORD *)&__dst[4];
  v18 = BYTE8(__dst[4]);
  v19 = *(_QWORD *)&__dst[5];
  v20 = BYTE8(__dst[5]);
  v21 = *(_QWORD *)&__dst[6];
  v22 = BYTE8(__dst[6]);
  v23 = *(_QWORD *)&__dst[7];
  v24 = BYTE8(__dst[7]);
  v25 = *(_QWORD *)&__dst[8];
  v26 = BYTE8(__dst[8]);
  v27 = *(_QWORD *)&__dst[9];
  v28 = BYTE8(__dst[9]);
  v87 = *(_QWORD *)&__dst[10];
  v86 = BYTE8(__dst[10]);
  v29 = *(_QWORD *)&__dst[11];
  v30 = BYTE8(__dst[11]);
  v31 = *(_QWORD *)&__dst[12];
  v32 = BYTE8(__dst[12]);
  v33 = *(_QWORD *)&__dst[13];
  v34 = BYTE8(__dst[13]);
  v35 = *(_QWORD *)&__dst[14];
  v84 = BYTE8(__dst[14]);
  v83 = *(_QWORD *)&__dst[15];
  v81 = BYTE8(__dst[15]);
  v82 = BYTE8(__dst[16]);
  v80 = *(_QWORD *)&__dst[16];
  v78 = *(_QWORD *)&__dst[17];
  v79 = BYTE8(__dst[17]);
  v77 = BYTE9(__dst[17]);
  v101 = *((_QWORD *)&__dst[0] + 1);
  if (v76 == 1)
  {
    v106 = 0uLL;
    v105[0] = 0;
    v105[1] = 0;
    v74 = BYTE8(__dst[5]);
    v73 = *(_QWORD *)&__dst[6];
    v72 = BYTE8(__dst[6]);
    v71 = *(_QWORD *)&__dst[7];
    v70 = BYTE8(__dst[7]);
    v69 = *(_QWORD *)&__dst[8];
    v68 = BYTE8(__dst[8]);
    v67 = *(_QWORD *)&__dst[9];
    v99 = *(_QWORD *)&__dst[3];
    v98 = BYTE8(__dst[3]);
    v96 = *(_QWORD *)&__dst[1];
    v97 = *(_QWORD *)&__dst[0];
    v94 = *(_QWORD *)&__dst[4];
    v95 = *((_QWORD *)&__dst[1] + 1);
    v93 = BYTE8(__dst[4]);
    v92 = *(_QWORD *)&__dst[5];
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v106, v105, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    v36 = v66;
    v37 = v67;
    v38 = v68;
    v39 = v69;
    v40 = v70;
    v41 = v71;
    v42 = v72;
    v43 = v73;
    v44 = v74;
    v45 = v87;
    v46 = v35;
    v47 = v86;
    v48 = v31;
    v49 = v85;
    v50 = v84;
    v51 = v83;
    v52 = v82;
    v53 = v81;
    v54 = v80;
    v55 = v79;
    v56 = v78;
    for (i = v77; ; i = BYTE1(v105[35]))
    {
      *(_QWORD *)&v106 = v97;
      *((_QWORD *)&v106 + 1) = v101;
      v107 = v96;
      v108 = v95;
      v111 = v99;
      v110 = v14 & 1;
      v109 = v49;
      v112 = v98 & 1;
      v113 = v94;
      v114 = v93 & 1;
      v115 = v92;
      v116 = v44 & 1;
      v117 = v43;
      v118 = v42 & 1;
      v119 = v41;
      v120 = v40 & 1;
      v121 = v39;
      v122 = v38 & 1;
      v123 = v37;
      v124 = v36 & 1;
      v125 = v45;
      v126 = v47 & 1;
      v127 = v29;
      v128 = v30 & 1;
      v129 = v48;
      v130 = v32 & 1;
      v131 = v33;
      v132 = v34 & 1;
      v133 = v46;
      v134 = v50 & 1;
      v135 = v51;
      v136 = v53 & 1;
      v138 = v52 & 1;
      v137 = v54;
      v139 = v56;
      v140 = v55 & 1;
      v141 = i;
      if ((v14 & 1) != 0 || v49 >= a1)
        break;
      memcpy(v105, __dst, 0x11AuLL);
      if (v9 <= 1.59271755e13)
        v58 = v9;
      else
        v58 = 1.59271755e13;
      v104 = fmax(v58, -2.11845067e11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, double *, _QWORD, uint64_t, uint64_t))(v90 + 200))(&v102, v105, &v104, 0, v89, v90);
      v9 = *(double *)&v102;
      if ((v103 & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)__dst);
        result = (_QWORD *)outlined release of DateComponents((uint64_t)&v106);
        a3 = v75;
        goto LABEL_31;
      }
      v102 = 1;
      if (v9 <= 1.59271755e13)
        v59 = v9;
      else
        v59 = 1.59271755e13;
      v104 = fmax(v59, -2.11845067e11);
      v88((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v89, v90);
      outlined release of DateComponents((uint64_t)&v106);
      v96 = v105[2];
      v97 = v105[0];
      v49 = v105[4];
      LOBYTE(v14) = v105[5];
      v99 = v105[6];
      v101 = v105[1];
      v98 = v105[7];
      v94 = v105[8];
      v95 = v105[3];
      v93 = v105[9];
      v92 = v105[10];
      v44 = v105[11];
      v43 = v105[12];
      v42 = v105[13];
      v41 = v105[14];
      v40 = v105[15];
      v39 = v105[16];
      v38 = v105[17];
      v37 = v105[18];
      v36 = v105[19];
      v45 = v105[20];
      v47 = v105[21];
      v29 = v105[22];
      v30 = v105[23];
      v48 = v105[24];
      v32 = v105[25];
      v33 = v105[26];
      v34 = v105[27];
      v46 = v105[28];
      v50 = v105[29];
      v51 = v105[30];
      v53 = v105[31];
      v52 = v105[33];
      v54 = v105[32];
      v56 = v105[34];
      v55 = v105[35];
    }
    v102 = 3;
    if (v9 <= 1.59271755e13)
      v61 = v9;
    else
      v61 = 1.59271755e13;
    v104 = fmax(v61, -2.11845067e11);
    v88((__int128 *)v105, (__int128 *)&v102, (uint64_t *)&v104, v89, v90);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of DateComponents((uint64_t)&v106);
    v11 = v105[0];
    v101 = v105[1];
    v12 = v105[2];
    v13 = v105[3];
    v85 = v105[4];
    v14 = LOBYTE(v105[5]);
    v15 = v105[6];
    v16 = LOBYTE(v105[7]);
    v17 = v105[8];
    v18 = v105[9];
    v19 = v105[10];
    v20 = v105[11];
    v21 = v105[12];
    v22 = v105[13];
    v23 = v105[14];
    v24 = v105[15];
    v25 = v105[16];
    v26 = v105[17];
    v27 = v105[18];
    v28 = v105[19];
    v87 = v105[20];
    v86 = v105[21];
    v29 = v105[22];
    v30 = v105[23];
    v31 = v105[24];
    v32 = v105[25];
    v33 = v105[26];
    v34 = v105[27];
    v60 = v105[28];
    v82 = v105[33];
    v79 = v105[35];
    v84 = v105[29];
    v83 = v105[30];
    v81 = v105[31];
    v80 = v105[32];
    v78 = v105[34];
    v77 = BYTE1(v105[35]);
  }
  else
  {
    v60 = *(_QWORD *)&__dst[14];
  }
  *(_QWORD *)&__dst[0] = v11;
  *((_QWORD *)&__dst[0] + 1) = v101;
  *(_QWORD *)&__dst[1] = v12;
  *((_QWORD *)&__dst[1] + 1) = v13;
  *(_QWORD *)&__dst[2] = v85;
  BYTE8(__dst[2]) = v14;
  v100 = v15;
  *(_QWORD *)&__dst[3] = v15;
  v62 = v16;
  BYTE8(__dst[3]) = v16;
  *(_QWORD *)&__dst[4] = v17;
  BYTE8(__dst[4]) = v18;
  *(_QWORD *)&__dst[5] = v19;
  BYTE8(__dst[5]) = v20;
  *(_QWORD *)&__dst[6] = v21;
  BYTE8(__dst[6]) = v22;
  *(_QWORD *)&__dst[7] = v23;
  BYTE8(__dst[7]) = v24;
  *(_QWORD *)&__dst[8] = v25;
  BYTE8(__dst[8]) = v26;
  *(_QWORD *)&__dst[9] = v27;
  BYTE8(__dst[9]) = v28;
  *(_QWORD *)&__dst[10] = v87;
  BYTE8(__dst[10]) = v86;
  *(_QWORD *)&__dst[11] = v29;
  BYTE8(__dst[11]) = v30;
  *(_QWORD *)&__dst[12] = v31;
  BYTE8(__dst[12]) = v32;
  *(_QWORD *)&__dst[13] = v33;
  BYTE8(__dst[13]) = v34;
  *(_QWORD *)&__dst[14] = v60;
  BYTE8(__dst[14]) = v84;
  *(_QWORD *)&__dst[15] = v83;
  BYTE8(__dst[15]) = v81;
  BYTE8(__dst[16]) = v82;
  *(_QWORD *)&__dst[16] = v80;
  *(_QWORD *)&__dst[17] = v78;
  BYTE8(__dst[17]) = v79;
  BYTE9(__dst[17]) = v77;
  result = (_QWORD *)outlined release of DateComponents((uint64_t)__dst);
  if (v14)
    v63 = a1 == 0x7FFFFFFFFFFFFFFFLL;
  else
    v63 = v85 == a1;
  a3 = v75;
  if (!v63)
  {
LABEL_29:
    v9 = 0.0;
LABEL_31:
    *(double *)a3 = v9;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  if (v62)
  {
    if (v76 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_29;
  }
  else if (v100 != v76)
  {
    goto LABEL_29;
  }
  LOBYTE(v102) = 12;
  if (v9 <= 1.59271755e13)
    v64 = v9;
  else
    v64 = 1.59271755e13;
  v105[0] = fmax(v64, -2.11845067e11);
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t *, uint64_t *, uint64_t))(v90 + 160))(&v106, &v102, v105, v89);
  if ((v107 & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v65 = 12;
    *(double *)(v65 + 8) = v9;
    *(_BYTE *)(v65 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  else
  {
    *(_QWORD *)v75 = v106;
    *(_BYTE *)(v75 + 8) = 0;
  }
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined release of Calendar.DatesByAdding(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

void specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, void (**a7)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  char v21;
  double v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  void *__src;
  double v32;
  uint64_t v33;
  uint64_t v34[2];
  double v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  id v39;
  double v40;
  uint64_t v41;
  double v42;
  _BYTE v43[288];
  _BYTE __dst[282];

  v13 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v18 = a6[1];
  __src = (void *)a2;
  memcpy(v43, a2, 0x11AuLL);
  v40 = *(double *)&v17;
  v41 = v18;
  _Block_copy(a7);
  if (DateComponents._validate(for:)((uint64_t *)&v40) && v13 >= -2.11845067e11 && v13 <= 1.59271755e13)
  {
    v19 = 0;
    v20 = 0.0;
    v21 = 1;
    v22 = v13;
    do
    {
      v34[0] = v17;
      v34[1] = v18;
      v39 = *(id *)&v13;
      memcpy(v43, __src, 0x11AuLL);
      v38 = v14;
      v37 = v15;
      v36 = v16;
      v35 = v22;
      v32 = v20;
      LOBYTE(v33) = v21 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v39, v43, &v38, &v37, &v36, &v35, (uint64_t)&v32, (uint64_t)&v40);
      v22 = v42;
      if (v41 == 2)
      {
        if (v19 > 0x63)
        {
          *(double *)v34 = v13;
          v40 = *(double *)&v17;
          v41 = v18;
          memcpy(v43, __dst, 0x11AuLL);
          LOBYTE(v32) = v16;
          LOBYTE(v39) = v14;
          LOBYTE(v35) = v15;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v34, (uint64_t *)&v40, v43, (unsigned __int8 *)&v32, (unsigned __int8 *)&v39, (unsigned __int8 *)&v35);
          _Block_release(a7);
          return;
        }
      }
      else
      {
        v20 = v40;
        v30 = v41 & 1;
        _Block_copy(a7);
        v24 = (_BYTE *)swift_slowAlloc();
        *v24 = 0;
        v25 = v18;
        v26 = v16;
        v27 = v14;
        v28 = v15;
        v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v20);
        ((void (**)(_QWORD, id, _QWORD, _BYTE *))a7)[2](a7, v29, v30, v24);

        v15 = v28;
        v14 = v27;
        v16 = v26;
        v18 = v25;
        LOBYTE(v25) = *v24;
        MEMORY[0x186DA9E78](v24, -1, -1);
        _Block_release(a7);
        v21 = 0;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
    }
    while (!__OFADD__(v19++, 1));
    __break(1u);

    _Block_release(a7);
    _Block_release(a7);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_4:
    _Block_release(a7);
  }
}

uint64_t destructiveInjectEnumTag for CalendarEnumerationError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CalendarEnumerationError()
{
  return &type metadata for CalendarEnumerationError;
}

uint64_t destroy for Calendar.DatesByMatching()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v4 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v4;
  v5 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v5;
  v6 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v6;
  v7 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v7;
  v8 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v8;
  v9 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v9;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2 + 330;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v19;
  v20 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v20;
  v21 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v21;
  v22 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v22;
  v23 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v23;
  v24 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v24;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(v4 + 1);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  return a1;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for Calendar.DatesByAdding.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 + 330;
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v6 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v6;
  v7 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v7;
  v8 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v8;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(v4 + 1);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 344))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByAdding.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 344) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 344) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByAdding.Iterator()
{
  return &type metadata for Calendar.DatesByAdding.Iterator;
}

uint64_t destroy for Calendar.DatesByMatching.Iterator()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v5;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v6 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v6;
  v7 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v7;
  v8 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v8;
  v9 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v9;
  v10 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v10;
  v11 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v11;
  v12 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v12;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(a2 + 364);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 + 363;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v15;
  v16 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v16;
  v17 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v17;
  v18 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v19;
  v20 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v20;
  v21 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v21;
  v22 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v22;
  v23 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v23;
  v24 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v24;
  v25 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v25;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(v4 + 1);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(v4 + 13);
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for Calendar.DatesByMatching.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2 + 363;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v7 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v7;
  v8 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v8;
  v9 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v9;
  *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a2 + 362);
  *(_BYTE *)(a1 + 363) = *(_BYTE *)(a2 + 363);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(v4 + 1);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(v4 + 13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 377))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByMatching.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 377) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 377) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByMatching.Iterator()
{
  return &type metadata for Calendar.DatesByMatching.Iterator;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      String.index(before:)();
      return String.remove(at:)();
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t URL.FormatStyle.Component.rawValue.getter()
{
  char *v0;

  return qword_1820E6008[*v0];
}

void static URL.FormatStyle.ComponentDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void static URL.FormatStyle.HostDisplayOption.always.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

__n128 URL.FormatStyle.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  __n128 result;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = a4[24];
  v13 = *((_QWORD *)a4 + 4);
  v14 = *a5;
  v15 = *a6;
  v16 = *a7;
  v17 = *a8;
  *(_BYTE *)a9 = *(_BYTE *)a1;
  *(_OWORD *)(a9 + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(a9 + 24) = v9;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a9 + 48) = v10;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(a9 + 72) = v11;
  *(_OWORD *)(a9 + 80) = *(_OWORD *)(a4 + 8);
  *(_BYTE *)(a9 + 96) = v12;
  *(_QWORD *)(a9 + 104) = v13;
  *(_BYTE *)(a9 + 112) = v14;
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a5 + 8);
  *(_BYTE *)(a9 + 136) = v15;
  *(_OWORD *)(a9 + 144) = *(_OWORD *)(a6 + 8);
  *(_BYTE *)(a9 + 160) = v16;
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a7 + 8);
  *(_BYTE *)(a9 + 184) = v17;
  result = *(__n128 *)(a8 + 8);
  *(__n128 *)(a9 + 192) = result;
  return result;
}

uint64_t URL.FormatStyle.format(_:)(uint64_t *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String_optional v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t result;
  void *v149;
  unsigned __int16 *v150;
  id v151;
  void *v152;
  id v153;
  char v154;
  void *v155;
  unsigned __int16 *v156;
  id v157;
  void *v158;
  id v159;
  char v160;
  unint64_t v161;
  void *v162;
  unsigned __int16 *v163;
  id v164;
  void *v165;
  id v166;
  char v167;
  void *v168;
  unsigned __int16 *v169;
  id v170;
  void *v171;
  id v172;
  char v173;
  uint64_t v174;
  char v175;
  char v176;
  char v177;
  char v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD v181[4];
  _BYTE v182[16];
  uint64_t v183;
  uint64_t v184;
  id v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _OWORD v220[2];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _OWORD v229[2];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[5];
  __int128 v239;
  _OWORD v240[5];
  _OWORD v241[4];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  _OWORD v250[2];
  char v251;
  _BYTE v252[160];
  uint64_t v253[20];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  _OWORD v262[2];
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _OWORD v267[4];
  _OWORD v268[2];
  char v269[8];
  _BYTE v270[16];
  char v271[8];
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v204 = *v1;
  v5 = *((_QWORD *)v1 + 2);
  v203 = *((_QWORD *)v1 + 1);
  v207 = v1[24];
  v6 = *((_QWORD *)v1 + 4);
  v205 = *((_QWORD *)v1 + 5);
  v206 = v6;
  LODWORD(v210) = v1[48];
  v7 = *((_QWORD *)v1 + 7);
  v208 = *((_QWORD *)v1 + 8);
  v209 = v7;
  v190 = v1[72];
  v8 = *((_QWORD *)v1 + 10);
  v188 = *((_QWORD *)v1 + 11);
  v189 = v8;
  v186 = v1[96];
  v187 = *((_QWORD *)v1 + 13);
  v193 = v1[112];
  v9 = *((_QWORD *)v1 + 15);
  v191 = *((_QWORD *)v1 + 16);
  v192 = v9;
  v196 = v1[136];
  v10 = *((_QWORD *)v1 + 18);
  v194 = *((_QWORD *)v1 + 19);
  v195 = v10;
  v199 = v1[160];
  v11 = *((_QWORD *)v1 + 21);
  v197 = *((_QWORD *)v1 + 22);
  v198 = v11;
  v12 = v1[184];
  v13 = *((_QWORD *)v1 + 24);
  v14 = *((_QWORD *)v1 + 25);
  v201 = v13;
  swift_retain();
  v15 = (id)v2;
  swift_retain();
  v211 = v3;
  v202 = v12;
  v200 = v14;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    if (!v3)
    {
LABEL_208:
      __break(1u);
LABEL_209:

      swift_bridgeObjectRelease();
      LODWORD(v184) = 0;
      v183 = 714;
      goto LABEL_211;
    }
    v16 = v15;
    v17 = v4;
    v18 = *(id *)(v3 + 16);
    v19 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v20 = objc_msgSend(v15, sel_relativeString);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v19 = v21;
    v17 = v4;
    swift_release();
    swift_release();
    v16 = v15;

  }
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)((uint64_t)v18, v19, 1, (uint64_t)v253);
  outlined init with take of LocalePreferences?((uint64_t)v253, (uint64_t)v252, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v253, (uint64_t)&v254, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v254) == 1)
  {
    *(_QWORD *)&v230 = v16;
    *((_QWORD *)&v230 + 1) = v211;
    *(_QWORD *)&v231 = v17;
    return URL.absoluteString.getter();
  }
  v2 = 0;
  v267[2] = v260;
  v267[3] = v261;
  v268[0] = v262[0];
  *(_OWORD *)((char *)v268 + 10) = *(_OWORD *)((char *)v262 + 10);
  v265 = v256;
  v266 = v257;
  v267[0] = v258;
  v267[1] = v259;
  v263 = v254;
  v264 = v255;
  v248 = v260;
  v249 = v261;
  v250[0] = v262[0];
  *(_OWORD *)((char *)v250 + 10) = *(_OWORD *)((char *)v262 + 10);
  v244 = v256;
  v245 = v257;
  v246 = v258;
  v247 = v259;
  v242 = v254;
  v243 = v255;
  v251 = 1;
  v239 = 0uLL;
  LOBYTE(v240[0]) = 0;
  *(_OWORD *)((char *)v240 + 8) = 0u;
  *(_OWORD *)((char *)&v240[1] + 8) = 0u;
  *(_OWORD *)((char *)&v240[2] + 8) = 0u;
  *(_OWORD *)((char *)&v240[3] + 8) = 0u;
  *((_QWORD *)&v240[4] + 1) = 0;
  LOBYTE(v241[0]) = 1;
  *(_OWORD *)((char *)v241 + 8) = 0u;
  *(_OWORD *)((char *)&v241[1] + 8) = 0u;
  *(_OWORD *)((char *)&v241[2] + 8) = 0u;
  WORD4(v241[3]) = 0;
  v23 = v211;
  *(_QWORD *)&v221 = v16;
  *((_QWORD *)&v221 + 1) = v211;
  *(_QWORD *)&v222 = v17;
  LOBYTE(v212) = v204;
  *((_QWORD *)&v212 + 1) = v203;
  *(_QWORD *)&v213 = v5;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
  {
    v24 = (void *)v265;
    v25 = v17;
    if ((_QWORD)v265)
    {
      v26 = *((_QWORD *)&v264 + 1);
      outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      v27 = v24;
    }
    else if ((BYTE9(v263) & 1) != 0
           && (outlined init with take of LocalePreferences?((uint64_t)&v263, (uint64_t)v269, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v269, (uint64_t)v275, &demangling cache variable for type metadata for URLParseInfo?), v275[0])&& (*(_BYTE *)(v275[0] + 48) & 1) == 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      v90 = String.subscript.getter();
      v26 = MEMORY[0x186DA4634](v90);
      v27 = v91;
      v25 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      v26 = 0;
      v27 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents?(v253);
    v28.value._countAndFlagsBits = v26;
    v28.value._object = v27;
    URLComponents._URLComponents.setScheme(_:)(v28);
    if (v2)
      goto LABEL_209;
    swift_bridgeObjectRelease();
    v23 = v211;
  }
  else
  {
    v25 = v17;
  }
  *(_QWORD *)&v221 = v16;
  *((_QWORD *)&v221 + 1) = v23;
  *(_QWORD *)&v222 = v25;
  LOBYTE(v212) = v207;
  *((_QWORD *)&v212 + 1) = v206;
  *(_QWORD *)&v213 = v205;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
  {
    v29 = outlined retain of URLComponents((uint64_t)&v242);
    v30 = (unint64_t)URLComponents._URLComponents.user.getter(v29);
    v32 = v31;
    outlined release of URLComponents?(v253);
    BYTE8(v239) = 0;
    BYTE10(v239) = 0;
    if (v32)
    {
      if ((v32 & 0x1000000000000000) != 0)
      {
        *(_QWORD *)&v230 = v30;
        *((_QWORD *)&v230 + 1) = v32;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v149 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v150 = (unsigned __int16 *)objc_msgSend(v149, sel__fastCharacterContents);
        v151 = v149;
        if (v150)
        {
          *(_QWORD *)&v230 = v30;
          *((_QWORD *)&v230 + 1) = v32;
          StringProtocol._ephemeralString.getter();
          v152 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v153 = objc_msgSend(v152, sel_length);
          swift_unknownObjectRelease();
          v154 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v150, (uint64_t)v153, 2u, 0);
        }
        else
        {
          v154 = specialized Sequence.allSatisfy(_:)(v30, v32, 2);
        }
        v175 = v154;
        v35 = swift_bridgeObjectRelease();
        v23 = v211;
        if ((v175 & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        if ((v32 & 0x2000000000000000) != 0)
        {
          v34 = HIBYTE(v32) & 0xF;
          *(_QWORD *)&v230 = v30;
          *((_QWORD *)&v230 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
          v33 = (char *)&v230;
        }
        else if ((v30 & 0x1000000000000000) != 0)
        {
          v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v34 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v33 = (char *)_StringObject.sharedUTF8.getter();
        }
        v35 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 2u, 0);
        if ((v35 & 1) == 0)
        {
LABEL_25:
          v36 = HIBYTE(v32) & 0xF;
          if ((v32 & 0x2000000000000000) == 0)
            v36 = v30 & 0xFFFFFFFFFFFFLL;
          if (v36)
          {
            *(_QWORD *)&v230 = v30;
            *((_QWORD *)&v230 + 1) = v32;
            MEMORY[0x1E0C80A78](v35);
            v183 = (uint64_t)&v230;
            LOBYTE(v184) = 2;
            swift_bridgeObjectRetain();
            v37 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v30, v32);
            if (v38)
            {
              v30 = (unint64_t)v37;
              v39 = v38;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v41 = *((_QWORD *)&v230 + 1);
              v40 = v230;
              swift_bridgeObjectRetain();
              v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v40, v41, 2u);
              v39 = v42;
              swift_bridgeObjectRelease_n();
              v23 = v211;
              swift_bridgeObjectRelease();
            }
            v32 = v39;
          }
          else
          {
            swift_bridgeObjectRelease();
            v30 = 0;
            v32 = 0xE000000000000000;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *((_QWORD *)&v240[1] + 1) = v30;
    *(_QWORD *)&v240[2] = v32;
  }
  *(_QWORD *)&v221 = v16;
  *((_QWORD *)&v221 + 1) = v23;
  *(_QWORD *)&v222 = v25;
  LOBYTE(v212) = v210;
  *((_QWORD *)&v212 + 1) = v209;
  *(_QWORD *)&v213 = v208;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
    goto LABEL_51;
  v43 = outlined retain of URLComponents((uint64_t)&v242);
  v44 = (unint64_t)URLComponents._URLComponents.password.getter(v43);
  v46 = v45;
  outlined release of URLComponents?(v253);
  BYTE8(v239) = 0;
  BYTE11(v239) = 0;
  if (v46)
  {
    if ((v46 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v230 = v44;
      *((_QWORD *)&v230 + 1) = v46;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v155 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v156 = (unsigned __int16 *)objc_msgSend(v155, sel__fastCharacterContents);
      v157 = v155;
      if (v156)
      {
        *(_QWORD *)&v230 = v44;
        *((_QWORD *)&v230 + 1) = v46;
        StringProtocol._ephemeralString.getter();
        v158 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v159 = objc_msgSend(v158, sel_length);
        swift_unknownObjectRelease();
        v160 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v156, (uint64_t)v159, 2u, 0);
      }
      else
      {
        v160 = specialized Sequence.allSatisfy(_:)(v44, v46, 2);
      }
      v176 = v160;
      v49 = swift_bridgeObjectRelease();
      v23 = v211;
      if ((v176 & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      if ((v46 & 0x2000000000000000) != 0)
      {
        v48 = HIBYTE(v46) & 0xF;
        *(_QWORD *)&v230 = v44;
        *((_QWORD *)&v230 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
        v47 = (char *)&v230;
      }
      else if ((v44 & 0x1000000000000000) != 0)
      {
        v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v48 = v44 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v47 = (char *)_StringObject.sharedUTF8.getter();
      }
      v49 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 0);
      if ((v49 & 1) == 0)
      {
LABEL_42:
        v50 = HIBYTE(v46) & 0xF;
        if ((v46 & 0x2000000000000000) == 0)
          v50 = v44 & 0xFFFFFFFFFFFFLL;
        if (v50)
        {
          *(_QWORD *)&v230 = v44;
          *((_QWORD *)&v230 + 1) = v46;
          MEMORY[0x1E0C80A78](v49);
          v183 = (uint64_t)&v230;
          LOBYTE(v184) = 2;
          swift_bridgeObjectRetain();
          v51 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v44, v46);
          if (v52)
          {
            v44 = (unint64_t)v51;
            v53 = v52;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v55 = *((_QWORD *)&v230 + 1);
            v54 = v230;
            swift_bridgeObjectRetain();
            v44 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v54, v55, 2u);
            v53 = v56;
            swift_bridgeObjectRelease_n();
            v23 = v211;
            swift_bridgeObjectRelease();
          }
          v46 = v53;
        }
        else
        {
          swift_bridgeObjectRelease();
          v44 = 0;
          v46 = 0xE000000000000000;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  *((_QWORD *)&v240[2] + 1) = v44;
  *(_QWORD *)&v240[3] = v46;
LABEL_51:
  outlined init with take of LocalePreferences?((uint64_t)v267 + 8, (uint64_t)v270, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v270, (uint64_t)&v273, &demangling cache variable for type metadata for String?);
  v57 = v274;
  if (v274)
  {
    v58 = v273;
    outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    v59 = outlined retain of URLComponents((uint64_t)&v230);
  }
  else if ((BYTE12(v263) & 1) != 0
         && (outlined init with take of LocalePreferences?((uint64_t)&v263, (uint64_t)v271, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v271, (uint64_t)&v272, &demangling cache variable for type metadata for URLParseInfo?), v272)&& (*(_BYTE *)(v272 + 120) & 1) == 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v230);
    v82 = String.subscript.getter();
    v58 = MEMORY[0x186DA4634](v82);
    v57 = v83;
    v59 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)&v230);
    v59 = URLComponents._URLComponents.port.getter();
    if ((v60 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      v62 = v61;
      v59 = swift_bridgeObjectRelease();
      if (!v62)
      {
        outlined release of URLComponents?(v253);
        goto LABEL_104;
      }
    }
    v58 = 0;
    v57 = 0xE000000000000000;
  }
  v63 = v58 & 0xFFFFFFFFFFFFLL;
  if ((v57 & 0x2000000000000000) != 0)
    v64 = HIBYTE(v57) & 0xF;
  else
    v64 = v58 & 0xFFFFFFFFFFFFLL;
  if (!v64)
  {
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRelease();
    outlined release of URLComponents?(v253);
    v66 = 0;
    v68 = 0xE000000000000000;
    v23 = v211;
LABEL_94:
    v92 = HIBYTE(v68) & 0xF;
    if ((v68 & 0x2000000000000000) == 0)
      v92 = v66 & 0xFFFFFFFFFFFFLL;
    if (v92)
    {
      *(_QWORD *)&v221 = v16;
      *((_QWORD *)&v221 + 1) = v23;
      *(_QWORD *)&v222 = v25;
      *(_QWORD *)&v212 = v189;
      *((_QWORD *)&v212 + 1) = v188;
      v93 = URL.FormatStyle.url(_:satisfies:)((uint64_t)&v221, (unsigned __int8 *)&v212);
      v94 = URL.FormatStyle.isIPv4(_:)(v66, v68);
      v95 = URL.FormatStyle.isIPv6(_:)(v66, v68);
      if (one-time initialization token for default != -1)
        swift_once();
      v96 = specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)(v66, v68);
      if ((v96 & 1) != 0)
      {
        if ((v190 & 1) == 0)
        {
          LODWORD(v210) = 0;
          v23 = v211;
          if ((v93 & 1) == 0)
          {
LABEL_102:
            URLComponents.host.setter(v66, v68);
            goto LABEL_105;
          }
LABEL_136:
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
      }
      else
      {
        v96 = specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)(v66, v68);
        if ((v190 & 1) == 0)
        {
          LODWORD(v210) = v96 ^ 1;
          v23 = v211;
          if ((v93 & 1) == 0)
            goto LABEL_102;
          goto LABEL_136;
        }
        if ((v96 & 1) == 0)
        {
          if ((v93 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            LODWORD(v210) = 1;
            v23 = v211;
            goto LABEL_105;
          }
          LODWORD(v210) = 1;
          v120 = v68;
          goto LABEL_152;
        }
      }
      v106 = v16;
      v209 = v25;
      v107 = v94 | v95;
      *(_QWORD *)&v230 = 46;
      *((_QWORD *)&v230 + 1) = 0xE100000000000000;
      MEMORY[0x1E0C80A78](v96);
      v183 = (uint64_t)&v230;
      swift_bridgeObjectRetain_n();
      v108 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v182, v66, v68);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v221 = v108;
      v208 = v2;
      if (v186 && !((*(_QWORD *)(v108 + 16) < 4uLL) | v107 & 1))
      {
        URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)((uint64_t)&v221);
        v2 = 1;
        if (!v187)
          goto LABEL_146;
      }
      else
      {
        v2 = 0;
        if (!v187)
          goto LABEL_146;
      }
      v121 = v221;
      if (*(_QWORD *)(v221 + 16) >= 3uLL)
      {
        v122 = v93;
        if ((v107 & 1) != 0)
        {
LABEL_147:
          swift_bridgeObjectRetain();
          v129 = v66;
          v120 = v68;
          v16 = v106;
LABEL_150:
          swift_bridgeObjectRelease();
          if ((v122 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v23 = v211;
            if ((v2 & 1) != 0)
              URLComponents.host.setter(v66, v68);
            else
              swift_bridgeObjectRelease();
            LODWORD(v210) = 0;
            v25 = v209;
            goto LABEL_105;
          }
          swift_bridgeObjectRelease();
          LODWORD(v210) = 0;
          v66 = v129;
          v25 = v209;
LABEL_152:
          v23 = v211;
          URLComponents.host.setter(v66, v120);
          goto LABEL_105;
        }
        v123 = *(_QWORD *)(v221 + 40);
        v210 = *(_QWORD *)(v221 + 32);
        v125 = *(_QWORD *)(v221 + 48);
        v124 = *(_QWORD *)(v221 + 56);
        swift_bridgeObjectRetain();
        v126 = MEMORY[0x186DA4634](v210, v123, v125, v124);
        v128 = v127;
        swift_bridgeObjectRelease();
        LOBYTE(v124) = specialized Set.contains(_:)(v126, v128, v187);
        swift_bridgeObjectRelease();
        v16 = v106;
        if ((v124 & 1) == 0)
        {
LABEL_149:
          *(_QWORD *)&v230 = v221;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
          lazy protocol witness table accessor for type [Substring] and conformance [A]();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          v129 = Sequence<>.joined(separator:)();
          v120 = v130;
          swift_bridgeObjectRelease();
          goto LABEL_150;
        }
        if (*(_QWORD *)(v121 + 16))
        {
          LOBYTE(v2) = 1;
          specialized Array.replaceSubrange<A>(_:with:)(0, 1);
          goto LABEL_149;
        }
        __break(1u);
        goto LABEL_208;
      }
LABEL_146:
      v122 = v93;
      if ((v107 & 1) != 0)
        goto LABEL_147;
      v16 = v106;
      goto LABEL_149;
    }
    swift_bridgeObjectRelease();
LABEL_104:
    LODWORD(v210) = 0;
    goto LABEL_105;
  }
  if ((BYTE8(v268[1]) & 1) != 0)
  {
    v209 = v25;
    *(_QWORD *)&v230 = v58;
    *((_QWORD *)&v230 + 1) = v57;
    MEMORY[0x1E0C80A78](v59);
    v183 = (uint64_t)&v230;
    v184 = MEMORY[0x1E0DEE9E8];
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRetain();
    v69 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v182, v58, v57);
    if (v70 == 1)
    {
      v71 = v230;
      swift_bridgeObjectRetain();
      v66 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, *((unint64_t *)&v71 + 1), MEMORY[0x1E0DEE9E8]);
      v68 = v72;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v66 = (uint64_t)v69;
      v68 = v70;
      swift_bridgeObjectRelease_n();
    }
    v23 = v211;
    outlined release of URLComponents?(v253);
    v25 = v209;
    if (!v68)
      goto LABEL_104;
    goto LABEL_94;
  }
  if ((v57 & 0x1000000000000000) != 0)
  {
    outlined retain of String?((uint64_t)v270);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v57 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v230 = v58;
      *((_QWORD *)&v230 + 1) = v57 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v221 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v221 + 1) = 0;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v270);
      swift_bridgeObjectRetain();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v230, HIBYTE(v57) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v221, 0, (unsigned __int8 *)&v230, HIBYTE(v57) & 0xF, (uint64_t *)&v212);
      v68 = *((_QWORD *)&v212 + 1);
      v66 = v212;
      swift_release();
    }
    else
    {
      if ((v58 & 0x1000000000000000) != 0)
      {
        v65 = (unsigned __int8 *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        v63 = v174;
      }
      *(_QWORD *)&v230 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v230 + 1) = 0;
      swift_bridgeObjectRetain();
      outlined retain of String?((uint64_t)v270);
      swift_bridgeObjectRetain();
      v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v65, v63, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v230, 0, v65, v63);
      v68 = v67;
    }
    swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents?(v253);
      v23 = v211;
      if (!v68)
        goto LABEL_104;
      goto LABEL_94;
    }
  }
  *(_QWORD *)&v230 = v58;
  *((_QWORD *)&v230 + 1) = v57;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v73 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v74 = objc_msgSend(v73, sel__fastCharacterContents);
  v75 = v73;
  v185 = v16;
  if (!v74)
  {
    *(_QWORD *)&v230 = v58;
    *((_QWORD *)&v230 + 1) = v57;
    swift_bridgeObjectRetain();
    v84 = String.init<A>(_:)();
    v86 = v85;
    if ((v85 & 0x1000000000000000) != 0)
    {
      v84 = static String._copying(_:)();
      v180 = v179;
      swift_bridgeObjectRelease();
      v86 = v180;
    }
    if ((v86 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v230 = v84;
      *((_QWORD *)&v230 + 1) = v86 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v221 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v221 + 1) = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v230, HIBYTE(v86) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v221, 0, (unsigned __int8 *)&v230, HIBYTE(v86) & 0xF, (uint64_t *)&v212);
      v68 = *((_QWORD *)&v212 + 1);
      v66 = v212;
      swift_release();
    }
    else
    {
      if ((v84 & 0x1000000000000000) != 0)
      {
        v87 = (unsigned __int8 *)((v86 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v88 = v84 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v87 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      *(_QWORD *)&v230 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v230 + 1) = 0;
      v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v87, v88, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v230, 0, v87, v88);
      v68 = v89;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined release of URLComponents?(v253);
    v23 = v211;
    v16 = v185;
    if (!v68)
      goto LABEL_104;
    goto LABEL_94;
  }
  *(_QWORD *)&v230 = v58;
  *((_QWORD *)&v230 + 1) = v57;
  StringProtocol._ephemeralString.getter();
  v76 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v77 = objc_msgSend(v76, sel_length);
  v78 = swift_unknownObjectRelease();
  MEMORY[0x1E0C80A78](v78);
  LOBYTE(v183) = 0;
  MEMORY[0x1E0C80A78](v79);
  v181[2] = v74;
  v181[3] = v77;
  v66 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v74, (uint64_t)v77, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v80, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v181);
  v68 = v81;
  swift_bridgeObjectRelease_n();
  outlined release of URLComponents?(v253);
  if (v68)
  {
    v23 = v211;
    v16 = v185;
    goto LABEL_94;
  }
  LODWORD(v210) = 0;
  v23 = v211;
  v16 = v185;
LABEL_105:
  *(_QWORD *)&v221 = v16;
  *((_QWORD *)&v221 + 1) = v23;
  *(_QWORD *)&v222 = v25;
  LOBYTE(v212) = v193;
  *((_QWORD *)&v212 + 1) = v192;
  *(_QWORD *)&v213 = v191;
  if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
    goto LABEL_109;
  v236 = v248;
  v237 = v249;
  v238[0] = v250[0];
  *(_OWORD *)((char *)v238 + 10) = *(_OWORD *)((char *)v250 + 10);
  v232 = v244;
  v233 = v245;
  v234 = v246;
  v235 = v247;
  v230 = v242;
  v231 = v243;
  v97 = URLComponents.port.getter();
  BYTE8(v239) = 0;
  BYTE13(v239) = 0;
  if ((v98 & 1) != 0 || (v97 & 0x8000000000000000) == 0)
  {
    *((_QWORD *)&v240[4] + 1) = v97;
    LOBYTE(v241[0]) = v98 & 1;
LABEL_109:
    *(_QWORD *)&v221 = v16;
    *((_QWORD *)&v221 + 1) = v23;
    *(_QWORD *)&v222 = v25;
    LOBYTE(v212) = v196;
    *((_QWORD *)&v212 + 1) = v195;
    *(_QWORD *)&v213 = v194;
    if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) != 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v252, (uint64_t)&v230, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined retain of URLComponents((uint64_t)&v230);
      v99 = (unint64_t)URLComponents._URLComponents.path.getter();
      v101 = v100;
      outlined release of URLComponents?(v253);
      BYTE8(v239) = 0;
      BYTE14(v239) = 0;
      v102 = HIBYTE(v101) & 0xF;
      if ((v101 & 0x2000000000000000) == 0)
        v102 = v99 & 0xFFFFFFFFFFFFLL;
      if (v102)
      {
        v103 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v99, v101);
        v105 = v104;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v103 = 0;
        v105 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      *((_QWORD *)&v241[0] + 1) = v103;
      *(_QWORD *)&v241[1] = v105;
      v23 = v211;
    }
    *(_QWORD *)&v221 = v16;
    *((_QWORD *)&v221 + 1) = v23;
    *(_QWORD *)&v222 = v25;
    LOBYTE(v212) = v199;
    *((_QWORD *)&v212 + 1) = v198;
    *(_QWORD *)&v213 = v197;
    if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
    {
LABEL_160:
      *(_QWORD *)&v221 = v16;
      *((_QWORD *)&v221 + 1) = v23;
      *(_QWORD *)&v222 = v25;
      LOBYTE(v212) = v202;
      *((_QWORD *)&v212 + 1) = v201;
      *(_QWORD *)&v213 = v200;
      if ((URL.FormatStyle.shouldDisplayComponent(from:basedOn:)((uint64_t)&v221, (unsigned __int8 *)&v212) & 1) == 0)
      {
LABEL_177:
        v227 = v241[0];
        v228 = v241[1];
        v229[0] = v241[2];
        *(_OWORD *)((char *)v229 + 10) = *(_OWORD *)((char *)&v241[2] + 10);
        v223 = v240[1];
        v224 = v240[2];
        v225 = v240[3];
        v226 = v240[4];
        v221 = v239;
        v222 = v240[0];
        v217 = v240[4];
        v218 = v241[0];
        v219 = v241[1];
        v220[0] = v241[2];
        *(_OWORD *)((char *)v220 + 10) = *(_OWORD *)((char *)&v241[2] + 10);
        v214 = v240[1];
        v215 = v240[2];
        v216 = v240[3];
        v212 = v239;
        v213 = v240[0];
        outlined retain of URLComponents((uint64_t)&v221);
        v22 = URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(&v212, v210 & 1);
        outlined release of URLComponents?(v253);
        outlined release of URLComponents((uint64_t)&v221);
        outlined release of URLComponents((uint64_t)&v221);
        return v22;
      }
      v134 = outlined retain of URLComponents((uint64_t)&v242);
      v135 = (unint64_t)URLComponents._URLComponents.fragment.getter(v134);
      v137 = v136;
      outlined release of URLComponents?(v253);
      BYTE8(v239) = 0;
      LOBYTE(v240[0]) = 0;
      if (v137)
      {
        if ((v137 & 0x1000000000000000) != 0)
        {
          *(_QWORD *)&v230 = v135;
          *((_QWORD *)&v230 + 1) = v137;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          v168 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v169 = (unsigned __int16 *)objc_msgSend(v168, sel__fastCharacterContents);
          v170 = v168;
          if (v169)
          {
            *(_QWORD *)&v230 = v135;
            *((_QWORD *)&v230 + 1) = v137;
            StringProtocol._ephemeralString.getter();
            v171 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v172 = objc_msgSend(v171, sel_length);
            swift_unknownObjectRelease();
            v173 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v169, (uint64_t)v172, 0x40u, 0);
          }
          else
          {
            v173 = specialized Sequence.allSatisfy(_:)(v135, v137, 64);
          }
          v178 = v173;
          v140 = swift_bridgeObjectRelease();
          if ((v178 & 1) == 0)
            goto LABEL_168;
        }
        else
        {
          if ((v137 & 0x2000000000000000) != 0)
          {
            v139 = HIBYTE(v137) & 0xF;
            *(_QWORD *)&v230 = v135;
            *((_QWORD *)&v230 + 1) = v137 & 0xFFFFFFFFFFFFFFLL;
            v138 = (char *)&v230;
          }
          else if ((v135 & 0x1000000000000000) != 0)
          {
            v138 = (char *)((v137 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v139 = v135 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v138 = (char *)_StringObject.sharedUTF8.getter();
          }
          v140 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v138, v139, 0x40u, 0);
          if ((v140 & 1) == 0)
          {
LABEL_168:
            v141 = HIBYTE(v137) & 0xF;
            if ((v137 & 0x2000000000000000) == 0)
              v141 = v135 & 0xFFFFFFFFFFFFLL;
            if (v141)
            {
              *(_QWORD *)&v230 = v135;
              *((_QWORD *)&v230 + 1) = v137;
              MEMORY[0x1E0C80A78](v140);
              v183 = (uint64_t)&v230;
              LOBYTE(v184) = 64;
              swift_bridgeObjectRetain();
              v142 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v182, v135, v137);
              if (v143)
              {
                v135 = (unint64_t)v142;
                v144 = v143;
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v146 = *((_QWORD *)&v230 + 1);
                v145 = v230;
                swift_bridgeObjectRetain();
                v135 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v145, v146, 0x40u);
                v144 = v147;
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
              }
              v137 = v144;
            }
            else
            {
              swift_bridgeObjectRelease();
              v135 = 0;
              v137 = 0xE000000000000000;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      *((_QWORD *)&v241[2] + 1) = v135;
      *(_QWORD *)&v241[3] = v137;
      goto LABEL_177;
    }
    v109 = outlined retain of URLComponents((uint64_t)&v242);
    v110 = (unint64_t)URLComponents._URLComponents.query.getter(v109);
    v112 = v111;
    outlined release of URLComponents?(v253);
    BYTE8(v239) = 0;
    HIBYTE(v239) = 0;
    if (v112)
    {
      if ((v112 & 0x1000000000000000) != 0)
      {
        *(_QWORD *)&v230 = v110;
        *((_QWORD *)&v230 + 1) = v112;
        v161 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        v209 = v161;
        StringProtocol._ephemeralString.getter();
        v162 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v163 = (unsigned __int16 *)objc_msgSend(v162, sel__fastCharacterContents);
        v164 = v162;
        if (v163)
        {
          *(_QWORD *)&v230 = v110;
          *((_QWORD *)&v230 + 1) = v112;
          StringProtocol._ephemeralString.getter();
          v165 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v166 = objc_msgSend(v165, sel_length);
          swift_unknownObjectRelease();
          v167 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v163, (uint64_t)v166, 0x40u, 0);
        }
        else
        {
          v167 = specialized Sequence.allSatisfy(_:)(v110, v112, 64);
        }
        v177 = v167;
        v115 = swift_bridgeObjectRelease();
        if ((v177 & 1) == 0)
          goto LABEL_130;
      }
      else
      {
        if ((v112 & 0x2000000000000000) != 0)
        {
          v114 = HIBYTE(v112) & 0xF;
          *(_QWORD *)&v230 = v110;
          *((_QWORD *)&v230 + 1) = v112 & 0xFFFFFFFFFFFFFFLL;
          v113 = (char *)&v230;
        }
        else if ((v110 & 0x1000000000000000) != 0)
        {
          v113 = (char *)((v112 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v114 = v110 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v113 = (char *)_StringObject.sharedUTF8.getter();
        }
        v115 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v113, v114, 0x40u, 0);
        if ((v115 & 1) == 0)
        {
LABEL_130:
          v116 = HIBYTE(v112) & 0xF;
          if ((v112 & 0x2000000000000000) == 0)
            v116 = v110 & 0xFFFFFFFFFFFFLL;
          if (v116)
          {
            *(_QWORD *)&v230 = v110;
            *((_QWORD *)&v230 + 1) = v112;
            MEMORY[0x1E0C80A78](v115);
            v183 = (uint64_t)&v230;
            LOBYTE(v184) = 64;
            swift_bridgeObjectRetain();
            v117 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v182, v110, v112);
            if (v118)
            {
              v110 = (unint64_t)v117;
              v119 = v118;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v132 = *((_QWORD *)&v230 + 1);
              v131 = v230;
              swift_bridgeObjectRetain();
              v110 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v131, v132, 0x40u);
              v119 = v133;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            v112 = v119;
          }
          else
          {
            swift_bridgeObjectRelease();
            v110 = 0;
            v112 = 0xE000000000000000;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *((_QWORD *)&v241[1] + 1) = v110;
    *(_QWORD *)&v241[2] = v112;
    v23 = v211;
    goto LABEL_160;
  }
  LODWORD(v184) = 0;
  v183 = 764;
LABEL_211:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static URL.FormatStyle.ComponentDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

Swift::Int static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v1 = static _SetStorage.allocate(capacity:)();
  v2 = 0;
  v3 = 0;
  v4 = v1 + 56;
  while (1)
  {
    v5 = v2;
    v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.ComponentDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    v8 = *((_QWORD *)v6 + 4);
    v7 = *((_QWORD *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) == 0)
      break;
    v15 = *(_QWORD *)(v1 + 48);
    v16 = (_QWORD *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            goto LABEL_18;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    v2 = 1;
    v3 = 1;
    if ((v5 & 1) != 0)
    {
      result = swift_arrayDestroy();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = v1;
      return result;
    }
  }
LABEL_18:
  *(_QWORD *)(v4 + 8 * v12) = v14 | v13;
  v21 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v11);
  *v21 = v8;
  v21[1] = v7;
  v22 = *(_QWORD *)(v1 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v1 + 16) = v24;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t URL.FormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt8 v22;
  Swift::UInt v23;
  uint64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  Swift::UInt v29;

  v2 = v1;
  v5 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  v6 = v2[24];
  v7 = *((_QWORD *)v2 + 5);
  v20 = v2[48];
  v8 = *((_QWORD *)v2 + 8);
  v13 = *((_QWORD *)v2 + 4);
  v14 = *((_QWORD *)v2 + 7);
  v21 = v2[72];
  v9 = *((_QWORD *)v2 + 11);
  v22 = v2[96];
  v10 = *((_QWORD *)v2 + 13);
  v23 = v2[112];
  v15 = *((_QWORD *)v2 + 10);
  v16 = *((_QWORD *)v2 + 15);
  v24 = *((_QWORD *)v2 + 16);
  v25 = v2[136];
  v17 = *((_QWORD *)v2 + 18);
  v26 = *((_QWORD *)v2 + 19);
  v27 = v2[160];
  v18 = *((_QWORD *)v2 + 21);
  v28 = *((_QWORD *)v2 + 22);
  v29 = v2[184];
  v11 = *((_QWORD *)v2 + 25);
  v19 = *((_QWORD *)v2 + 24);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v13]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v20);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v14]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v8);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v21);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Set.hash(into:)(a1, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Hasher._combine(_:)(v22);
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v10);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v23);
  if (v24)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v16]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v24);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v25);
  if (v26)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v17]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v26);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v27);
  if (v28)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v18]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v28);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v29);
  if (v11)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v19]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B69EC4 + 4 * byte_1820E51C0[*v0]))(0x656D65686373, 0xE600000000000000);
}

uint64_t sub_181B69EC4()
{
  return 1919251317;
}

uint64_t sub_181B69ED4()
{
  return 0x64726F7773736170;
}

uint64_t sub_181B69EEC()
{
  return 1953722216;
}

uint64_t sub_181B69EFC()
{
  return 1953656688;
}

uint64_t sub_181B69F0C()
{
  return 1752457584;
}

uint64_t sub_181B69F1C()
{
  return 0x7972657571;
}

uint64_t sub_181B69F30()
{
  return 0x746E656D67617266;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.CodingKeys>);
  v41 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v7 = *((_QWORD *)v1 + 2);
  v48 = v1[24];
  v9 = *((_QWORD *)v1 + 4);
  v39 = *((_QWORD *)v1 + 5);
  v40 = v9;
  v38 = v1[48];
  v10 = *((_QWORD *)v1 + 7);
  v36 = *((_QWORD *)v1 + 8);
  v37 = v10;
  v31 = v1[72];
  v11 = *((_QWORD *)v1 + 11);
  v32 = *((_QWORD *)v1 + 10);
  v33 = v11;
  v35 = v1[96];
  v34 = *((_QWORD *)v1 + 13);
  v28 = v1[112];
  v12 = *((_QWORD *)v1 + 16);
  v29 = *((_QWORD *)v1 + 15);
  v30 = v12;
  v25 = v1[136];
  v26 = *((_QWORD *)v1 + 18);
  v27 = *((_QWORD *)v1 + 19);
  v22 = v1[160];
  v23 = *((_QWORD *)v1 + 21);
  v24 = *((_QWORD *)v1 + 22);
  HIDWORD(v19) = v1[184];
  v20 = *((_QWORD *)v1 + 24);
  v21 = *((_QWORD *)v1 + 25);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v43 = v6;
  v44 = v8;
  v45 = v7;
  v49 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  v13 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v5, v3);
  v15 = v36;
  v16 = v37;
  v17 = v38;
  v43 = v48;
  v18 = v41;
  v44 = v40;
  v45 = v39;
  v49 = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v17;
  v44 = v16;
  v45 = v15;
  v49 = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v31;
  v44 = v32;
  v45 = v33;
  v46 = v35;
  v47 = v34;
  v49 = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v28;
  v44 = v29;
  v45 = v30;
  v49 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v25;
  v44 = v26;
  v45 = v27;
  v49 = 5;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v22;
  v44 = v23;
  v45 = v24;
  v49 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = BYTE4(v19);
  v44 = v20;
  v45 = v21;
  v49 = 7;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v5, v3);
}

Swift::Int URL.FormatStyle.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unsigned __int8 v74;
  _BYTE v75[7];
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  _BYTE v79[7];
  uint64_t v80;
  uint64_t v81;
  char v82;
  _BYTE v83[7];
  uint64_t v84;
  uint64_t v85;
  char v86;
  _BYTE v87[7];
  uint64_t v88;
  uint64_t v89;
  char v90;
  _BYTE v91[7];
  uint64_t v92;
  char v93;
  _BYTE v94[7];
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  uint64_t v107;
  uint64_t v108;
  char v109;
  unsigned __int8 v110;
  __int128 v111;
  _BYTE v112[7];
  _BYTE v113[7];
  _BYTE v114[7];
  _BYTE v115[7];
  _BYTE v116[7];
  _BYTE v117[7];
  _BYTE v118[7];
  _BYTE v119[7];
  _DWORD v120[3];
  _QWORD *v121;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v121 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  v60 = a2;
  LOBYTE(v61) = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v59 = v74;
  v10 = v76;
  v11 = v77;
  LOBYTE(v61) = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v57 = v10;
  v58 = v11;
  LODWORD(v10) = v74;
  v12 = v77;
  v56 = v76;
  LOBYTE(v61) = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v53 = v10;
  v55 = v12;
  LODWORD(v12) = v74;
  v13 = v77;
  v52 = v76;
  LOBYTE(v61) = 3;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v49 = v12;
  v51 = v13;
  v47 = v74;
  v14 = v77;
  v48 = v76;
  LODWORD(v13) = v78;
  LOBYTE(v61) = 4;
  v54 = v80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v43 = v13;
  v45 = v14;
  LODWORD(v13) = v74;
  v15 = v77;
  v42 = v76;
  LOBYTE(v61) = 5;
  swift_bridgeObjectRetain();
  v44 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v46 = v15;
  v41 = v13;
  LODWORD(v13) = v74;
  v16 = v77;
  v40 = v76;
  LOBYTE(v61) = 6;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v50 = v16;
  v38 = v74;
  v39 = v13;
  v17 = v76;
  v18 = v77;
  v109 = 7;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v36 = v110;
  v37 = *((_QWORD *)&v111 + 1);
  v44 = v111;
  LOBYTE(v61) = v59;
  *((_QWORD *)&v61 + 1) = v57;
  *(_QWORD *)&v62 = v58;
  v19 = v18;
  BYTE8(v62) = v53;
  v20 = v55;
  *(_QWORD *)&v63 = v56;
  *((_QWORD *)&v63 + 1) = v55;
  LOBYTE(v64) = v49;
  v35 = v17;
  v21 = v51;
  *((_QWORD *)&v64 + 1) = v52;
  *(_QWORD *)&v65 = v51;
  BYTE8(v65) = v47;
  v22 = v45;
  v23 = v46;
  *(_QWORD *)&v66 = v48;
  *((_QWORD *)&v66 + 1) = v45;
  LOBYTE(v67) = v43;
  *((_QWORD *)&v67 + 1) = v54;
  LOBYTE(v68) = v41;
  *((_QWORD *)&v68 + 1) = v42;
  *(_QWORD *)&v69 = v46;
  BYTE8(v69) = v39;
  *(_QWORD *)&v70 = v40;
  *((_QWORD *)&v70 + 1) = v50;
  LOBYTE(v71) = v38;
  *((_QWORD *)&v71 + 1) = v17;
  *(_QWORD *)&v72 = v19;
  v24 = v19;
  BYTE8(v72) = v110;
  v73 = v111;
  outlined retain of URL.FormatStyle((uint64_t)&v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v24;
  swift_bridgeObjectRelease();
  v27 = v72;
  v28 = v60;
  v60[10] = v71;
  v28[11] = v27;
  v28[12] = v73;
  v29 = v68;
  v28[6] = v67;
  v28[7] = v29;
  v30 = v70;
  v28[8] = v69;
  v28[9] = v30;
  v31 = v64;
  v28[2] = v63;
  v28[3] = v31;
  v32 = v66;
  v28[4] = v65;
  v28[5] = v32;
  v33 = v62;
  *v28 = v61;
  v28[1] = v33;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
  v74 = v59;
  *(_DWORD *)v75 = v120[0];
  *(_DWORD *)&v75[3] = *(_DWORD *)((char *)v120 + 3);
  v76 = v57;
  v77 = v58;
  v78 = v53;
  *(_DWORD *)v79 = *(_DWORD *)v119;
  *(_DWORD *)&v79[3] = *(_DWORD *)&v119[3];
  v80 = v56;
  v81 = v20;
  v82 = v49;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v118[3];
  *(_DWORD *)v83 = *(_DWORD *)v118;
  v84 = v52;
  v85 = v21;
  v86 = v47;
  *(_DWORD *)v87 = *(_DWORD *)v117;
  *(_DWORD *)&v87[3] = *(_DWORD *)&v117[3];
  v88 = v48;
  v89 = v25;
  v90 = v43;
  *(_DWORD *)v91 = *(_DWORD *)v116;
  *(_DWORD *)&v91[3] = *(_DWORD *)&v116[3];
  v92 = v54;
  v93 = v41;
  *(_DWORD *)&v94[3] = *(_DWORD *)&v115[3];
  *(_DWORD *)v94 = *(_DWORD *)v115;
  v95 = v42;
  v96 = v23;
  v97 = v39;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v114[3];
  *(_DWORD *)v98 = *(_DWORD *)v114;
  v99 = v40;
  v100 = v50;
  v101 = v38;
  *(_DWORD *)v102 = *(_DWORD *)v113;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v113[3];
  v103 = v35;
  v104 = v26;
  v105 = v36;
  *(_DWORD *)&v106[3] = *(_DWORD *)&v112[3];
  *(_DWORD *)v106 = *(_DWORD *)v112;
  v107 = v44;
  v108 = v37;
  return outlined release of URL.FormatStyle((uint64_t)&v74);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return URL.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle(_QWORD *a1)
{
  return URL.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  URL.FormatStyle.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.Component.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B6ADC0 + 4 * byte_1820E51C8[*v0]))(0x656D65686373, 0xE600000000000000);
}

uint64_t sub_181B6ADC0()
{
  return 0x656D616E72657375;
}

uint64_t sub_181B6ADD8()
{
  return 0x64726F7773736170;
}

uint64_t sub_181B6ADF0()
{
  return 1953722216;
}

uint64_t sub_181B6AE00()
{
  return 1953656688;
}

uint64_t sub_181B6AE10()
{
  return 1752457584;
}

uint64_t sub_181B6AE20()
{
  return 0x7972657571;
}

uint64_t sub_181B6AE34()
{
  return 0x746E656D67617266;
}

uint64_t URL.FormatStyle.Component.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 1;
  switch(result)
  {
    case 1:
      v2 = 0;
      goto LABEL_3;
    case 2:
LABEL_3:
      *a2 = v2;
      return result;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_6;
    case 4:
      *a2 = 2;
      return result;
    case 8:
      *a2 = 3;
      return result;
    case 16:
      *a2 = 4;
      return result;
    case 32:
      *a2 = 5;
      return result;
    case 64:
      *a2 = 6;
      return result;
    default:
      if (result == 128)
        *a2 = 7;
      else
LABEL_6:
        *a2 = 8;
      return result;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.Component(char *a1, char *a2)
{
  return qword_1820E6008[*a1] == qword_1820E6008[*a2];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URL.FormatStyle.Component@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return URL.FormatStyle.Component.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URL.FormatStyle.Component(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1820E6008[*v1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.Component()
{
  lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.Component()
{
  lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.Component()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1820E6008[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.Component()
{
  char *v0;

  Hasher._combine(_:)(qword_1820E6008[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.Component()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1820E6008[v1]);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.Component()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B6B0BC + 4 * byte_1820E5210[*v0]))(0x656D65686373, 0xE600000000000000);
}

uint64_t sub_181B6B0BC()
{
  return 0x656D616E72657375;
}

uint64_t sub_181B6B0D4()
{
  return 0x64726F7773736170;
}

uint64_t sub_181B6B0EC()
{
  return 1953722216;
}

uint64_t sub_181B6B0FC()
{
  return 1953656688;
}

uint64_t sub_181B6B10C()
{
  return 1752457584;
}

uint64_t sub_181B6B11C()
{
  return 0x7972657571;
}

uint64_t sub_181B6B130()
{
  return 0x746E656D67617266;
}

void URL.FormatStyle.ComponentDisplayCondition.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_181B6B1B8()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v0._countAndFlagsBits = 0x656D616E72657375;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x7365686374616D20;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10[0] = *((_QWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v8;
  v12 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[1] = v10[0];
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t URL.FormatStyle.ComponentDisplayCondition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayCondition.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    v13 = 1;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v12[1];
    *(_BYTE *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D65726975716572;
  else
    return 0x6E656E6F706D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayCondition@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayCondition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayCondition(_QWORD *a1)
{
  return URL.FormatStyle.ComponentDisplayCondition.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1820E6008[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayCondition(uint64_t a1)
{
  char *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 1);
  Hasher._combine(_:)(qword_1820E6008[*v1]);
  specialized Set.hash(into:)(a1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayCondition()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1820E6008[v1]);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance URL.FormatStyle.ComponentDisplayCondition(char *a1, char *a2)
{
  if (qword_1820E6008[*a1] == qword_1820E6008[*a2])
    return specialized static Set.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
  return RawRepresentable<>.encode(to:)();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    if (v1)
    {
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    return 0x737961776C61;
  }
  else
  {
    if (v1)
    {
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    return 0x726576656ELL;
  }
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 1, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.omitWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)(a1, a2, 0, a3);
}

uint64_t static URL.FormatStyle.ComponentDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *a1;
  *(_BYTE *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v4;
  *(_QWORD *)(a4 + 16) = a2;
  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.ComponentDisplayOption.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v5 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F697469646E6F63;
  else
    return 0x6E6F6974706FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v11 = *((_QWORD *)v1 + 2);
  v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  v15 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v12;
    v14 = v11;
    v15 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.ComponentDisplayOption.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.ComponentDisplayOption.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.ComponentDisplayOption.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v14 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v13[0];
    v14 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v13[0];
    v11 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t URL.FormatStyle.HostDisplayOption.Option.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.ComponentDisplayOption@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.ComponentDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.ComponentDisplayOption(_QWORD *a1)
{
  return URL.FormatStyle.ComponentDisplayOption.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance URL.FormatStyle.ComponentDisplayOption(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v5 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.ComponentDisplayOption()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v3]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)((uint64_t)v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6579616C70736964;
  else
    return 0x64657474696D6FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption.Option@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption.Option(_QWORD *a1)
{
  unsigned __int8 *v1;

  return URL.FormatStyle.HostDisplayOption.Option.encode(to:)(a1, *v1);
}

uint64_t URL.FormatStyle.HostDisplayOption.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(v0 + 24);
    if (v1)
    {
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    _StringGuts.grow(_:)(81);
    v5._countAndFlagsBits = 0xD000000000000024;
    v5._object = (void *)0x8000000182308B00;
    String.append(_:)(v5);
    if (v3)
      v6 = 1702195828;
    else
      v6 = 0x65736C6166;
    if (v3)
      v7 = 0xE400000000000000;
    else
      v7 = 0xE500000000000000;
    v8 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0xD00000000000001ALL;
    v9._object = (void *)0x8000000182308B30;
    String.append(_:)(v9);
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = Set.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0x7469646E6F63202CLL;
    v11._object = (void *)0xED0000203A6E6F69;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0x69646E6F63206F6ELL;
    v12._object = (void *)0xEC0000006E6F6974;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (v1)
    {
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    return 0x726576656ELL;
  }
}

void static URL.FormatStyle.HostDisplayOption.never.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t static URL.FormatStyle.HostDisplayOption.displayWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitWhen(_:matches:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

Swift::Int static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v1 = static _SetStorage.allocate(capacity:)();
  v2 = 0;
  v3 = 0;
  v4 = v1 + 56;
  while (1)
  {
    v5 = v2;
    v6 = (char *)&outlined read-only object #0 of static URL.FormatStyle.HostDisplayOption.omitIfHTTPFamily.getter
       + 16 * v3;
    v8 = *((_QWORD *)v6 + 4);
    v7 = *((_QWORD *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) == 0)
      break;
    v15 = *(_QWORD *)(v1 + 48);
    v16 = (_QWORD *)(v15 + 16 * v11);
    if (*v16 != v8 || v16[1] != v7)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            goto LABEL_18;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    v2 = 1;
    v3 = 1;
    if ((v5 & 1) != 0)
    {
      result = swift_arrayDestroy();
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = v1;
      *(_BYTE *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      return result;
    }
  }
LABEL_18:
  *(_QWORD *)(v4 + 8 * v12) = v14 | v13;
  v21 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v11);
  *v21 = v8;
  v21[1] = v7;
  v22 = *(_QWORD *)(v1 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v1 + 16) = v24;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 32) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t static URL.FormatStyle.HostDisplayOption.omitSpecificSubdomains(_:includeMultiLevelSubdomains:when:matches:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  v5 = *a3;
  *(_BYTE *)a5 = 1;
  *(_QWORD *)(a5 + 8) = v5;
  *(_QWORD *)(a5 + 16) = a4;
  *(_BYTE *)(a5 + 24) = a2;
  *(_QWORD *)(a5 + 32) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void URL.FormatStyle.HostDisplayOption.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 v6;
  uint64_t v7;

  v2 = v1;
  v5 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  v6 = v2[24];
  v7 = *((_QWORD *)v2 + 4);
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(qword_1820E6008[(char)v5]);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v6);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B6CD2C + 4 * byte_1820E5240[*v0]))(0x6E6F6974706FLL, 0xE600000000000000);
}

uint64_t sub_181B6CD2C()
{
  return 0x6F697469646E6F63;
}

unint64_t sub_181B6CD48()
{
  return 0xD000000000000018;
}

unint64_t sub_181B6CD68()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.FormatStyle.HostDisplayOption.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URL.FormatStyle.HostDisplayOption.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v14 = *((_QWORD *)v1 + 2);
  v15 = v9;
  v18 = v1[24];
  v13 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = v8;
  v19 = 0;
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v13;
    v16 = v15;
    v17 = v14;
    v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v16 = v10;
    v19 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int URL.FormatStyle.HostDisplayOption.hashValue.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _BYTE v4[80];
  __int128 v5;
  char v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4[72] = *(_BYTE *)v0;
  v5 = *(_OWORD *)(v0 + 8);
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.HostDisplayOption.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v19 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v16;
    v19 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v18 = v9;
    v12 = v16;
    v11 = v17;
    LOBYTE(v16) = 2;
    swift_bridgeObjectRetain();
    HIDWORD(v14) = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    v19 = 3;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = BYTE4(v14) & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URL.FormatStyle.HostDisplayOption@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.FormatStyle.HostDisplayOption.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.FormatStyle.HostDisplayOption(_QWORD *a1)
{
  return URL.FormatStyle.HostDisplayOption.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.FormatStyle.HostDisplayOption()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _BYTE v4[80];
  __int128 v5;
  char v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4[72] = *(_BYTE *)v0;
  v5 = *(_OWORD *)(v0 + 8);
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.FormatStyle.HostDisplayOption()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _BYTE v4[80];
  __int128 v5;
  char v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4[72] = *(_BYTE *)v0;
  v5 = *(_OWORD *)(v0 + 8);
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  URL.FormatStyle.HostDisplayOption.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t URL.FormatStyle.scheme(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = BYTE8(v46);
  v31 = *((_QWORD *)&v47 + 1);
  v32 = v47;
  v30 = v45;
  v28 = v46;
  v29 = *((_QWORD *)&v45 + 1);
  v27 = BYTE8(v43);
  v25 = *((_QWORD *)&v44 + 1);
  v26 = v44;
  v24 = v42;
  v22 = v43;
  v23 = *((_QWORD *)&v42 + 1);
  v11 = BYTE8(v39);
  v20 = *((_QWORD *)&v40 + 1);
  v21 = v40;
  v19 = v41;
  v18 = *((_QWORD *)&v41 + 1);
  v12 = v8;
  v14 = *((_QWORD *)&v8 + 1);
  v13 = v39;
  v15 = BYTE8(v10);
  v16 = v37;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v34;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 88) = v20;
  *(_BYTE *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v23;
  *(_QWORD *)(a2 + 128) = v22;
  *(_BYTE *)(a2 + 136) = v27;
  *(_QWORD *)(a2 + 144) = v26;
  *(_QWORD *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(_QWORD *)(a2 + 168) = v29;
  *(_QWORD *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(_QWORD *)(a2 + 192) = v32;
  *(_QWORD *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.user(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _OWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v36 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v35 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v44 = v2[10];
  v45 = v5;
  v46 = v2[12];
  v6 = v2[7];
  v40 = v2[6];
  v41 = v6;
  v7 = v2[9];
  v42 = v2[8];
  v43 = v7;
  v8 = v2[3];
  v37[2] = v2[2];
  v37[3] = v8;
  v9 = v2[5];
  v38 = v2[4];
  v39 = v9;
  v10 = v2[1];
  v37[0] = *v2;
  v37[1] = v10;
  v34 = BYTE8(v45);
  v32 = *((_QWORD *)&v46 + 1);
  v33 = v46;
  v31 = v44;
  v29 = v45;
  v30 = *((_QWORD *)&v44 + 1);
  v28 = BYTE8(v42);
  v26 = *((_QWORD *)&v43 + 1);
  v27 = v43;
  v25 = v41;
  v23 = v42;
  v24 = *((_QWORD *)&v41 + 1);
  v11 = BYTE8(v38);
  v21 = *((_QWORD *)&v39 + 1);
  v22 = v39;
  v20 = v40;
  v19 = *((_QWORD *)&v40 + 1);
  v12 = v8;
  v14 = *((_QWORD *)&v8 + 1);
  v13 = v38;
  v15 = v37[0];
  v16 = *((_QWORD *)&v37[0] + 1);
  v17 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v37);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = v36;
  *(_QWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v4;
  *(_BYTE *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v21;
  *(_BYTE *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 104) = v19;
  *(_BYTE *)(a2 + 112) = v25;
  *(_QWORD *)(a2 + 120) = v24;
  *(_QWORD *)(a2 + 128) = v23;
  *(_BYTE *)(a2 + 136) = v28;
  *(_QWORD *)(a2 + 144) = v27;
  *(_QWORD *)(a2 + 152) = v26;
  *(_BYTE *)(a2 + 160) = v31;
  *(_QWORD *)(a2 + 168) = v30;
  *(_QWORD *)(a2 + 176) = v29;
  *(_BYTE *)(a2 + 184) = v34;
  *(_QWORD *)(a2 + 192) = v33;
  *(_QWORD *)(a2 + 200) = v32;
  return result;
}

uint64_t URL.FormatStyle.password(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = BYTE8(v46);
  v31 = *((_QWORD *)&v47 + 1);
  v32 = v47;
  v30 = v45;
  v28 = v46;
  v29 = *((_QWORD *)&v45 + 1);
  v27 = BYTE8(v43);
  v25 = *((_QWORD *)&v44 + 1);
  v26 = v44;
  v24 = v42;
  v22 = v43;
  v23 = *((_QWORD *)&v42 + 1);
  v11 = BYTE8(v39);
  v20 = *((_QWORD *)&v40 + 1);
  v21 = v40;
  v19 = v41;
  v18 = *((_QWORD *)&v41 + 1);
  v12 = BYTE8(v10);
  v13 = v37;
  v14 = v36[0];
  v15 = *((_QWORD *)&v36[0] + 1);
  v16 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 56) = v34;
  *(_QWORD *)(a2 + 64) = v4;
  *(_BYTE *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 88) = v20;
  *(_BYTE *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v23;
  *(_QWORD *)(a2 + 128) = v22;
  *(_BYTE *)(a2 + 136) = v27;
  *(_QWORD *)(a2 + 144) = v26;
  *(_QWORD *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(_QWORD *)(a2 + 168) = v29;
  *(_QWORD *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(_QWORD *)(a2 + 192) = v32;
  *(_QWORD *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.host(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v33 = a1[24];
  v5 = *((_QWORD *)a1 + 4);
  v6 = v2[11];
  v45 = v2[10];
  v46 = v6;
  v47 = v2[12];
  v7 = v2[7];
  v41 = v2[6];
  v42 = v7;
  v8 = v2[9];
  v43 = v2[8];
  v44 = v8;
  v9 = v2[3];
  v37 = v2[2];
  v38 = v9;
  v10 = v2[5];
  v39 = v2[4];
  v40 = v10;
  v11 = v2[1];
  v36[0] = *v2;
  v36[1] = v11;
  v32 = BYTE8(v46);
  v30 = *((_QWORD *)&v47 + 1);
  v31 = v47;
  v29 = v45;
  v27 = v46;
  v28 = *((_QWORD *)&v45 + 1);
  v26 = BYTE8(v43);
  v24 = *((_QWORD *)&v44 + 1);
  v25 = v44;
  v23 = v42;
  v21 = v43;
  v22 = *((_QWORD *)&v42 + 1);
  v20 = v9;
  v18 = v39;
  v19 = *((_QWORD *)&v9 + 1);
  v12 = BYTE8(v11);
  v13 = v37;
  v14 = v36[0];
  v15 = *((_QWORD *)&v36[0] + 1);
  v16 = v11;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v35;
  *(_QWORD *)(a2 + 80) = v34;
  *(_QWORD *)(a2 + 88) = v4;
  *(_BYTE *)(a2 + 96) = v33;
  *(_QWORD *)(a2 + 104) = v5;
  *(_BYTE *)(a2 + 112) = v23;
  *(_QWORD *)(a2 + 120) = v22;
  *(_QWORD *)(a2 + 128) = v21;
  *(_BYTE *)(a2 + 136) = v26;
  *(_QWORD *)(a2 + 144) = v25;
  *(_QWORD *)(a2 + 152) = v24;
  *(_BYTE *)(a2 + 160) = v29;
  *(_QWORD *)(a2 + 168) = v28;
  *(_QWORD *)(a2 + 176) = v27;
  *(_BYTE *)(a2 + 184) = v32;
  *(_QWORD *)(a2 + 192) = v31;
  *(_QWORD *)(a2 + 200) = v30;
  return result;
}

uint64_t URL.FormatStyle.port(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = BYTE8(v46);
  v31 = *((_QWORD *)&v47 + 1);
  v32 = v47;
  v30 = v45;
  v28 = v46;
  v29 = *((_QWORD *)&v45 + 1);
  v27 = BYTE8(v43);
  v25 = *((_QWORD *)&v44 + 1);
  v26 = v44;
  v24 = BYTE8(v39);
  v22 = *((_QWORD *)&v40 + 1);
  v23 = v40;
  v20 = v8;
  v21 = v41;
  v18 = v39;
  v19 = *((_QWORD *)&v8 + 1);
  v11 = BYTE8(v10);
  v12 = v37;
  v13 = v36[0];
  v15 = *((_QWORD *)&v36[0] + 1);
  v14 = v10;
  v16 = *((_QWORD *)&v41 + 1);
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_QWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v16;
  *(_BYTE *)(a2 + 112) = v35;
  *(_QWORD *)(a2 + 120) = v34;
  *(_QWORD *)(a2 + 128) = v4;
  *(_BYTE *)(a2 + 136) = v27;
  *(_QWORD *)(a2 + 144) = v26;
  *(_QWORD *)(a2 + 152) = v25;
  *(_BYTE *)(a2 + 160) = v30;
  *(_QWORD *)(a2 + 168) = v29;
  *(_QWORD *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(_QWORD *)(a2 + 192) = v32;
  *(_QWORD *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.path(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = BYTE8(v46);
  v31 = *((_QWORD *)&v47 + 1);
  v32 = v47;
  v30 = v45;
  v28 = v46;
  v29 = *((_QWORD *)&v45 + 1);
  v27 = v42;
  v25 = v43;
  v26 = *((_QWORD *)&v42 + 1);
  v24 = BYTE8(v39);
  v22 = *((_QWORD *)&v40 + 1);
  v23 = v40;
  v21 = v41;
  v20 = *((_QWORD *)&v41 + 1);
  v19 = v8;
  v11 = v39;
  v18 = *((_QWORD *)&v8 + 1);
  v12 = BYTE8(v10);
  v13 = v37;
  v14 = v36[0];
  v16 = *((_QWORD *)&v36[0] + 1);
  v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_QWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(_QWORD *)(a2 + 120) = v26;
  *(_QWORD *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v35;
  *(_QWORD *)(a2 + 144) = v34;
  *(_QWORD *)(a2 + 152) = v4;
  *(_BYTE *)(a2 + 160) = v30;
  *(_QWORD *)(a2 + 168) = v29;
  *(_QWORD *)(a2 + 176) = v28;
  *(_BYTE *)(a2 + 184) = v33;
  *(_QWORD *)(a2 + 192) = v32;
  *(_QWORD *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.query(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = BYTE8(v46);
  v31 = *((_QWORD *)&v47 + 1);
  v32 = v47;
  v30 = BYTE8(v43);
  v28 = *((_QWORD *)&v44 + 1);
  v29 = v44;
  v27 = v42;
  v25 = v43;
  v26 = *((_QWORD *)&v42 + 1);
  v24 = BYTE8(v39);
  v22 = *((_QWORD *)&v40 + 1);
  v23 = v40;
  v21 = v41;
  v20 = *((_QWORD *)&v41 + 1);
  v19 = v8;
  v11 = v39;
  v18 = *((_QWORD *)&v8 + 1);
  v12 = BYTE8(v10);
  v13 = v37;
  v14 = v36[0];
  v16 = *((_QWORD *)&v36[0] + 1);
  v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_QWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(_QWORD *)(a2 + 120) = v26;
  *(_QWORD *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v30;
  *(_QWORD *)(a2 + 144) = v29;
  *(_QWORD *)(a2 + 152) = v28;
  *(_BYTE *)(a2 + 160) = v35;
  *(_QWORD *)(a2 + 168) = v34;
  *(_QWORD *)(a2 + 176) = v4;
  *(_BYTE *)(a2 + 184) = v33;
  *(_QWORD *)(a2 + 192) = v32;
  *(_QWORD *)(a2 + 200) = v31;
  return result;
}

uint64_t URL.FormatStyle.fragment(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v35 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v34 = *((_QWORD *)a1 + 1);
  v5 = v2[11];
  v45 = v2[10];
  v46 = v5;
  v47 = v2[12];
  v6 = v2[7];
  v41 = v2[6];
  v42 = v6;
  v7 = v2[9];
  v43 = v2[8];
  v44 = v7;
  v8 = v2[3];
  v37 = v2[2];
  v38 = v8;
  v9 = v2[5];
  v39 = v2[4];
  v40 = v9;
  v10 = v2[1];
  v36[0] = *v2;
  v36[1] = v10;
  v33 = v45;
  v31 = v46;
  v32 = *((_QWORD *)&v45 + 1);
  v30 = BYTE8(v43);
  v28 = *((_QWORD *)&v44 + 1);
  v29 = v44;
  v27 = v42;
  v25 = v43;
  v26 = *((_QWORD *)&v42 + 1);
  v24 = BYTE8(v39);
  v22 = *((_QWORD *)&v40 + 1);
  v23 = v40;
  v21 = v41;
  v20 = *((_QWORD *)&v41 + 1);
  v19 = v8;
  v11 = v39;
  v18 = *((_QWORD *)&v8 + 1);
  v12 = BYTE8(v10);
  v13 = v37;
  v14 = v36[0];
  v16 = *((_QWORD *)&v36[0] + 1);
  v15 = v10;
  outlined retain of URL.FormatStyle((uint64_t)v36);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_QWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = v27;
  *(_QWORD *)(a2 + 120) = v26;
  *(_QWORD *)(a2 + 128) = v25;
  *(_BYTE *)(a2 + 136) = v30;
  *(_QWORD *)(a2 + 144) = v29;
  *(_QWORD *)(a2 + 152) = v28;
  *(_BYTE *)(a2 + 160) = v33;
  *(_QWORD *)(a2 + 168) = v32;
  *(_QWORD *)(a2 + 176) = v31;
  *(_BYTE *)(a2 + 184) = v35;
  *(_QWORD *)(a2 + 192) = v34;
  *(_QWORD *)(a2 + 200) = v4;
  return result;
}

uint64_t URL.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v16[13];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = v1[9];
  v4 = v1[11];
  v26 = v1[10];
  v27 = v4;
  v5 = v1[11];
  v28 = v1[12];
  v6 = v1[5];
  v7 = v1[7];
  v22 = v1[6];
  v23 = v7;
  v8 = v1[7];
  v9 = v1[9];
  v24 = v1[8];
  v25 = v9;
  v10 = v1[1];
  v11 = v1[3];
  v18 = v1[2];
  v19 = v11;
  v12 = v1[3];
  v13 = v1[5];
  v20 = v1[4];
  v21 = v13;
  v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  v16[6] = v22;
  v16[7] = v8;
  v16[8] = v24;
  v16[9] = v3;
  v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance URL.FormatStyle@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v16[13];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = v1[9];
  v4 = v1[11];
  v26 = v1[10];
  v27 = v4;
  v5 = v1[11];
  v28 = v1[12];
  v6 = v1[5];
  v7 = v1[7];
  v22 = v1[6];
  v23 = v7;
  v8 = v1[7];
  v9 = v1[9];
  v24 = v1[8];
  v25 = v9;
  v10 = v1[1];
  v11 = v1[3];
  v18 = v1[2];
  v19 = v11;
  v12 = v1[3];
  v13 = v1[5];
  v20 = v1[4];
  v21 = v13;
  v14 = v1[1];
  v17[0] = *v1;
  v17[1] = v14;
  v16[10] = v26;
  v16[11] = v5;
  v16[12] = v1[12];
  v16[6] = v22;
  v16[7] = v8;
  v16[8] = v24;
  v16[9] = v3;
  v16[2] = v18;
  v16[3] = v12;
  v16[4] = v20;
  v16[5] = v6;
  v16[0] = v17[0];
  v16[1] = v10;
  outlined retain of URL.FormatStyle((uint64_t)v17);
  return URL.ParseStrategy.init(format:lenient:)(v16, a1);
}

uint64_t URL.FormatStyle.url(_:satisfies:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *a2;
    if ((_DWORD)v3 != 4)
      __asm { BR              X10 }
    URL.port.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v4 = dispatch thunk of CustomStringConvertible.description.getter();
      v6 = specialized Set.contains(_:)(v4, v5, v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }
  return v6 & 1;
}

uint64_t URL.FormatStyle.shouldDisplayComponent(from:basedOn:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a2;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
    v4 = a2[8];
    if ((_DWORD)v4 != 4)
      __asm { BR              X10 }
    swift_bridgeObjectRetain();
    URL.port.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = dispatch thunk of CustomStringConvertible.description.getter();
      v7 = specialized Set.contains(_:)(v5, v6, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return v2;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v2 ^ 1;
  }
  return v2;
}

uint64_t URL.FormatStyle.isIPv4(_:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t i;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 46;
  v22 = 0xE100000000000000;
  v19[2] = &v21;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v19, a1, a2);
  v5 = v4;
  if (v4[2] == 4 && (v7 = v4[4], v6 = v4[5], (v6 ^ v7) >= 0x4000))
  {
    v8 = v4 + 7;
    for (i = 1; ; ++i)
    {
      v11 = *(v8 - 1);
      v10 = *v8;
      swift_bridgeObjectRetain();
      if ((v10 & 0x1000000000000000) != 0)
      {
        v13 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v6, v11, v10, 10);
        v15 = v18;
      }
      else
      {
        if ((v10 & 0x2000000000000000) != 0)
        {
          v21 = v11;
          v22 = v10 & 0xFFFFFFFFFFFFFFLL;
          v12 = &v21;
        }
        else
        {
          v12 = (uint64_t *)((v11 & 0x1000000000000000) != 0
                          ? (v10 & 0xFFFFFFFFFFFFFFFLL) + 32
                          : _StringObject.sharedUTF8.getter());
        }
        v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v12, v7, v6, v11, v10, 10);
        v20 = v14 & 1;
        v15 = v14 & 1;
      }
      result = swift_bridgeObjectRelease();
      v17 = 0;
      if ((v15 & 1) != 0 || (v13 & 0x8000000000000000) != 0 || v13 > 0xFF)
        break;
      if (i == 4)
      {
        v17 = 1;
        break;
      }
      if (i >= v5[2])
      {
        __break(1u);
        return result;
      }
      v7 = v8[1];
      v6 = v8[2];
      if ((v6 ^ v7) < 0x4000)
        goto LABEL_19;
      v8 += 4;
    }
  }
  else
  {
LABEL_19:
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t URL.FormatStyle.isIPv6(_:)(uint64_t a1, unint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 v38;
  uint64_t *v39;
  int v40;
  unsigned __int8 v41;
  char v42;
  _QWORD v43[5];
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v47 = a1;
  v48 = a2;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 91;
  v4._object = (void *)0xE100000000000000;
  if (!String.hasPrefix(_:)(v4)
    || (v5._countAndFlagsBits = 93,
        v5._object = (void *)0xE100000000000000,
        result = String.hasSuffix(_:)(v5),
        (result & 1) == 0))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  result = specialized Collection.first.getter(a1, a2);
  if (!v8)
  {
LABEL_73:
    __break(1u);
    return result;
  }
  specialized RangeReplaceableCollection.removeFirst(_:)(1);
  swift_bridgeObjectRelease();
  specialized RangeReplaceableCollection<>.removeLast()();
  v9 = swift_bridgeObjectRelease();
  v10 = v47;
  v11 = v48;
  v45 = 58;
  v46 = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v9);
  v43[2] = &v45;
  swift_bridgeObjectRetain_n();
  v12 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v43, v10, v11);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = 0;
    v44 = (char *)&v45 + 1;
    while (v14 < *(_QWORD *)(v12 + 16))
    {
      v15 = (uint64_t *)(v12 + 32 + 32 * v14);
      v16 = *v15;
      v17 = v15[1];
      if ((v17 ^ *v15) >= 0x4000)
      {
        v19 = v15[2];
        v18 = v15[3];
        swift_bridgeObjectRetain();
        v20 = MEMORY[0x186DA4634](v16, v17, v19, v18);
        v22 = v21;
        result = swift_bridgeObjectRelease();
        v23 = HIBYTE(v22) & 0xF;
        v24 = v20 & 0xFFFFFFFFFFFFLL;
        if ((v22 & 0x2000000000000000) != 0)
          v25 = HIBYTE(v22) & 0xF;
        else
          v25 = v20 & 0xFFFFFFFFFFFFLL;
        if (!v25)
          goto LABEL_69;
        if ((v22 & 0x1000000000000000) != 0)
        {
          v27 = specialized _parseInteger<A, B>(ascii:radix:)(v20, v22, 16);
          v29 = v42;
        }
        else if ((v22 & 0x2000000000000000) != 0)
        {
          v45 = v20;
          v46 = v22 & 0xFFFFFFFFFFFFFFLL;
          if (v20 == 43)
          {
            if (!v23)
              goto LABEL_72;
            v35 = v23 - 1;
            if (v35)
            {
              v27 = 0;
              v36 = (unsigned __int8 *)v44;
              while (1)
              {
                v37 = *v36;
                v38 = v37 - 48;
                if ((v37 - 48) >= 0xA)
                {
                  if ((v37 - 65) < 6)
                  {
                    v38 = v37 - 55;
                  }
                  else
                  {
                    if ((v37 - 97) > 5)
                      break;
                    v38 = v37 - 87;
                  }
                }
                if ((v27 - 0x800000000000000) >> 60 != 15)
                  break;
                v34 = __OFADD__(16 * v27, v38);
                v27 = 16 * v27 + v38;
                if (v34)
                  break;
                ++v36;
                if (!--v35)
                {
LABEL_57:
                  v29 = 0;
                  goto LABEL_59;
                }
              }
            }
          }
          else if (v20 == 45)
          {
            if (!v23)
              goto LABEL_71;
            v30 = v23 - 1;
            if (v30)
            {
              v27 = 0;
              v31 = (unsigned __int8 *)v44;
              while (1)
              {
                v32 = *v31;
                v33 = v32 - 48;
                if ((v32 - 48) >= 0xA)
                {
                  if ((v32 - 65) < 6)
                  {
                    v33 = v32 - 55;
                  }
                  else
                  {
                    if ((v32 - 97) > 5)
                      break;
                    v33 = v32 - 87;
                  }
                }
                if ((v27 - 0x800000000000000) >> 60 != 15)
                  break;
                v34 = __OFSUB__(16 * v27, v33);
                v27 = 16 * v27 - v33;
                if (v34)
                  break;
                ++v31;
                if (!--v30)
                  goto LABEL_57;
              }
            }
          }
          else if (v23)
          {
            v27 = 0;
            v39 = &v45;
            while (1)
            {
              v40 = *(unsigned __int8 *)v39;
              v41 = v40 - 48;
              if ((v40 - 48) >= 0xA)
              {
                if ((v40 - 65) < 6)
                {
                  v41 = v40 - 55;
                }
                else
                {
                  if ((v40 - 97) > 5)
                    break;
                  v41 = v40 - 87;
                }
              }
              if ((v27 - 0x800000000000000) >> 60 != 15)
                break;
              v34 = __OFADD__(16 * v27, v41);
              v27 = 16 * v27 + v41;
              if (v34)
                break;
              v39 = (uint64_t *)((char *)v39 + 1);
              if (!--v23)
                goto LABEL_57;
            }
          }
          v27 = 0;
          v29 = 1;
        }
        else
        {
          if ((v20 & 0x1000000000000000) != 0)
            v26 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v27 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v26, v24, 16);
          v29 = v28 & 1;
        }
LABEL_59:
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0 || (v27 & 0x8000000000000000) != 0 || v27 >> 16)
          goto LABEL_67;
      }
      if (++v14 == v13)
        goto LABEL_66;
    }
    __break(1u);
LABEL_69:
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t URL.FormatStyle.generateFormattedString(from:useEncodedHost:)(_OWORD *a1, char a2)
{
  Swift::String v3;
  __int128 v4;
  __int128 v5;
  Swift::String v6;
  __int128 v7;
  __int128 v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  uint64_t object;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  uint64_t v59;
  void (*v60)(char *, _QWORD);
  void *v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD);
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  Swift::String v89;
  void *v90;
  unsigned __int8 *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  void *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  Swift::String v162;
  Swift::String v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  Swift::String v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(char *, _QWORD);
  void *v180;
  void *v181;
  Swift::String v182;
  uint64_t v183;
  void (*v184)(char *, _QWORD);
  void *v185;
  void *v186;
  Swift::String v187;
  _BYTE v189[16];
  id v190;
  id v191;
  _BYTE v192[16];
  Swift::String *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  int32_t (__cdecl *v198)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v199;
  Swift::String v200[8];
  _OWORD v201[2];
  uint64_t v202;
  unint64_t v203;
  Swift::String v204;
  __int128 v205;
  Swift::String v206;
  __int128 v207;
  Swift::String v208;
  __int128 v209;
  Swift::String v210;
  __int128 v211;
  _OWORD v212[2];
  Swift::String v213;
  Swift::String v214;
  Swift::String v215;
  Swift::String v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;
  Swift::String v220;
  _BYTE v221[26];

  v3 = (Swift::String)a1[7];
  v4 = a1[5];
  v219 = (Swift::String)a1[6];
  v220 = v3;
  v5 = a1[7];
  *(_OWORD *)v221 = a1[8];
  *(_OWORD *)&v221[10] = *(_OWORD *)((char *)a1 + 138);
  v6 = (Swift::String)a1[3];
  v7 = a1[1];
  v215 = (Swift::String)a1[2];
  v216 = v6;
  v8 = a1[3];
  v9 = (Swift::String)a1[5];
  v217 = (Swift::String)a1[4];
  v218 = v9;
  v10 = (Swift::String)a1[1];
  v213 = (Swift::String)*a1;
  v214 = v10;
  v210 = v219;
  v211 = v5;
  v212[0] = a1[8];
  *(_OWORD *)((char *)v212 + 10) = *(_OWORD *)((char *)a1 + 138);
  v206 = v215;
  v207 = v8;
  v208 = v217;
  v209 = v4;
  v202 = 0;
  v203 = 0xE000000000000000;
  v204 = v213;
  v205 = v7;
  countAndFlagsBits = v213._countAndFlagsBits;
  if (v215._countAndFlagsBits)
  {
    object = (uint64_t)v214._object;
    v13 = (void *)v215._countAndFlagsBits;
  }
  else
  {
    if (BYTE1(v213._object) != 1 || !v213._countAndFlagsBits || (*(_BYTE *)(v213._countAndFlagsBits + 48) & 1) != 0)
      goto LABEL_52;
    outlined retain of URLComponents((uint64_t)&v213);
    v20 = String.subscript.getter();
    object = MEMORY[0x186DA4634](v20);
    v13 = v21;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
  }
  v200[0]._countAndFlagsBits = object;
  v200[0]._object = v13;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = object;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    v17 = (uint64_t)v217._object;
    v18 = outlined retain of URLComponents((uint64_t)&v213);
    v19 = v16;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v25 = String.subscript.getter();
    v17 = MEMORY[0x186DA4634](v25);
    v19 = v26;
    v18 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v18 = URLComponents._URLComponents.port.getter();
    if ((v22 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      v24 = v23;
      v18 = swift_bridgeObjectRelease();
      if (!v24)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_52;
      }
    }
    v17 = 0;
    v19 = 0xE000000000000000;
  }
  v27 = v17 & 0xFFFFFFFFFFFFLL;
  if ((v19 & 0x2000000000000000) != 0)
    v28 = HIBYTE(v19) & 0xF;
  else
    v28 = v17 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_51;
  }
  if ((v221[24] & 1) == 0)
  {
    if ((v19 & 0x1000000000000000) != 0)
    {
      v195 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v19 & 0x2000000000000000) != 0)
      {
        v200[0]._countAndFlagsBits = v17;
        v200[0]._object = (void *)(v19 & 0xFFFFFFFFFFFFFFLL);
        v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v199 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v19) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v19) & 0xF, &v196);
        v35 = v196;
        v37 = (uint64_t)v197;
        swift_release();
      }
      else
      {
        if ((v17 & 0x1000000000000000) != 0)
        {
          v34 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v27 = v55;
        }
        v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._object = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v35 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v34, v27, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v34, v27);
        v37 = v36;
      }
      swift_bridgeObjectRelease();
      if (v37 != 1)
      {
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v213);
        outlined consume of AttributedString.AttributeRunBoundaries?(v35, v37);
        if (!v37)
          goto LABEL_52;
LABEL_51:
        v58._countAndFlagsBits = 12079;
        v58._object = (void *)0xE200000000000000;
        String.append(_:)(v58);
        goto LABEL_52;
      }
      v195 = countAndFlagsBits;
    }
    v200[0]._countAndFlagsBits = v17;
    v200[0]._object = (void *)v19;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v39 = objc_msgSend(v38, sel__fastCharacterContents);
    v40 = v38;
    if (v39)
    {
      v200[0]._countAndFlagsBits = v17;
      v200[0]._object = (void *)v19;
      StringProtocol._ephemeralString.getter();
      v41 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v42 = objc_msgSend(v41, sel_length);
      v43 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v43);
      LOBYTE(v193) = 0;
      MEMORY[0x1E0C80A78](v44);
      v190 = v39;
      v191 = v42;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v39, (uint64_t)v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v45, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
      v47 = v46;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      countAndFlagsBits = v195;
      if (!v47)
        goto LABEL_52;
      goto LABEL_51;
    }
    v200[0]._countAndFlagsBits = v17;
    v200[0]._object = (void *)v19;
    swift_bridgeObjectRetain();
    v49 = String.init<A>(_:)();
    v50 = v48;
    countAndFlagsBits = v195;
    if ((v48 & 0x1000000000000000) != 0)
    {
      v49 = static String._copying(_:)();
      v57 = v56;
      swift_bridgeObjectRelease();
      v50 = v57;
      if ((v57 & 0x2000000000000000) == 0)
        goto LABEL_42;
    }
    else if ((v48 & 0x2000000000000000) == 0)
    {
LABEL_42:
      if ((v49 & 0x1000000000000000) != 0)
      {
        v51 = (unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v52 = v49 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v51 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._object = 0;
      _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v51, v52, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v51, v52);
      v54 = v53;
LABEL_50:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v54)
        goto LABEL_52;
      goto LABEL_51;
    }
    v200[0]._countAndFlagsBits = v49;
    v200[0]._object = (void *)(v50 & 0xFFFFFFFFFFFFFFLL);
    v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v50) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v50) & 0xF, &v196);
    v54 = v197;
    swift_release();
    goto LABEL_50;
  }
  v200[0]._countAndFlagsBits = v17;
  v200[0]._object = (void *)v19;
  MEMORY[0x1E0C80A78](v18);
  v193 = v200;
  v194 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v17, v19);
  if (v29 == 1)
  {
    v31 = v200[0]._object;
    v30 = v200[0]._countAndFlagsBits;
    swift_bridgeObjectRetain();
    specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, (unint64_t)v31, MEMORY[0x1E0DEE9E8]);
    v33 = v32;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = v29;
    swift_bridgeObjectRelease_n();
  }
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v33)
    goto LABEL_51;
LABEL_52:
  v59 = outlined retain of URLComponents((uint64_t)&v213);
  v60 = URLComponents._URLComponents.user.getter(v59);
  v62 = v61;
  outlined release of URLComponents((uint64_t)&v213);
  if (v62)
  {
    v63._countAndFlagsBits = (uint64_t)v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
  }
  v64 = outlined retain of URLComponents((uint64_t)&v213);
  v65 = URLComponents._URLComponents.password.getter(v64);
  v67 = v66;
  outlined release of URLComponents((uint64_t)&v213);
  if (v67)
  {
    v68 = outlined retain of URLComponents((uint64_t)&v213);
    URLComponents._URLComponents.user.getter(v68);
    v70 = v69;
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (v70)
    {
      v71._countAndFlagsBits = 58;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
    }
    v72._countAndFlagsBits = (uint64_t)v65;
    v72._object = v67;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
  }
  if ((a2 & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v73 = URLComponents._URLComponents.encodedHost.getter();
    v75 = v74;
LABEL_60:
    outlined release of URLComponents((uint64_t)&v213);
    goto LABEL_61;
  }
  v76 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    v77 = (uint64_t)v217._object;
    v78 = outlined retain of URLComponents((uint64_t)&v213);
    v79 = v76;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v83 = String.subscript.getter();
    v77 = MEMORY[0x186DA4634](v83);
    v79 = v84;
    v78 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v78 = URLComponents._URLComponents.port.getter();
    if ((v80 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      v82 = v81;
      v78 = swift_bridgeObjectRelease();
      if (!v82)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_91;
      }
    }
    v77 = 0;
    v79 = 0xE000000000000000;
  }
  v85 = v77 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000) != 0)
    v86 = HIBYTE(v79) & 0xF;
  else
    v86 = v77 & 0xFFFFFFFFFFFFLL;
  if (v86)
  {
    if (v221[24] == 1)
    {
      v200[0]._countAndFlagsBits = v77;
      v200[0]._object = (void *)v79;
      MEMORY[0x1E0C80A78](v78);
      v193 = v200;
      v194 = MEMORY[0x1E0DEE9E8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v87 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v77, v79);
      if (v88 == (void *)1)
      {
        v89 = v200[0];
        swift_bridgeObjectRetain();
        v73 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v89._countAndFlagsBits, (unint64_t)v89._object, MEMORY[0x1E0DEE9E8]);
        v75 = v90;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v73 = (uint64_t)v87;
        v75 = v88;
        swift_bridgeObjectRelease_n();
      }
      outlined release of URLComponents((uint64_t)&v213);
      if (!v75)
        goto LABEL_91;
      goto LABEL_87;
    }
    if ((v79 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v79 & 0x2000000000000000) != 0)
      {
        v200[0]._countAndFlagsBits = v77;
        v200[0]._object = (void *)(v79 & 0xFFFFFFFFFFFFFFLL);
        v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v199 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v79) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v79) & 0xF, &v196);
        v73 = v196;
        v75 = v197;
        swift_release();
      }
      else
      {
        if ((v77 & 0x1000000000000000) != 0)
        {
          v91 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v91 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v85 = v156;
        }
        v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v200[0]._object = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v91, v85, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v91, v85);
        v75 = v92;
      }
      swift_bridgeObjectRelease();
      if (v75 != (void *)1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_60;
      }
    }
    v200[0]._countAndFlagsBits = v77;
    v200[0]._object = (void *)v79;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v111 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v112 = objc_msgSend(v111, sel__fastCharacterContents);
    v113 = v111;
    if (v112)
    {
      v200[0]._countAndFlagsBits = v77;
      v200[0]._object = (void *)v79;
      StringProtocol._ephemeralString.getter();
      v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v115 = objc_msgSend(v114, sel_length);
      v116 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v116);
      LOBYTE(v193) = 0;
      MEMORY[0x1E0C80A78](v117);
      v190 = v112;
      v191 = v115;
      v73 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v112, (uint64_t)v115, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v118, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
      v75 = v119;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
LABEL_61:
      if (!v75)
        goto LABEL_91;
      goto LABEL_87;
    }
    v200[0]._countAndFlagsBits = v77;
    v200[0]._object = (void *)v79;
    swift_bridgeObjectRetain();
    v144 = String.init<A>(_:)();
    v145 = v143;
    if ((v143 & 0x1000000000000000) != 0)
    {
      v144 = static String._copying(_:)();
      v159 = v158;
      swift_bridgeObjectRelease();
      v145 = v159;
      if ((v159 & 0x2000000000000000) == 0)
        goto LABEL_131;
    }
    else if ((v143 & 0x2000000000000000) == 0)
    {
LABEL_131:
      if ((v144 & 0x1000000000000000) != 0)
      {
        v146 = (unsigned __int8 *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v147 = v144 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v146 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._object = 0;
      v73 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v146, v147, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v146, v147);
      v75 = v148;
      goto LABEL_147;
    }
    v200[0]._countAndFlagsBits = v144;
    v200[0]._object = (void *)(v145 & 0xFFFFFFFFFFFFFFLL);
    v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v145) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v145) & 0xF, &v196);
    v73 = v196;
    v75 = v197;
    swift_release();
LABEL_147:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  v73 = 0;
  v75 = (void *)0xE000000000000000;
LABEL_87:
  v93 = outlined retain of URLComponents((uint64_t)&v213);
  URLComponents._URLComponents.user.getter(v93);
  v95 = v94;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v95
    || (v96 = outlined retain of URLComponents((uint64_t)&v213),
        URLComponents._URLComponents.password.getter(v96),
        v98 = v97,
        outlined release of URLComponents((uint64_t)&v213),
        swift_bridgeObjectRelease(),
        v98))
  {
    v99._countAndFlagsBits = 64;
    v99._object = (void *)0xE100000000000000;
    String.append(_:)(v99);
  }
  v100._countAndFlagsBits = v73;
  v100._object = v75;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
LABEL_91:
  v200[7] = v220;
  v201[0] = *(_OWORD *)v221;
  *(_OWORD *)((char *)v201 + 10) = *(_OWORD *)&v221[10];
  v200[3] = v216;
  v200[4] = v217;
  v200[5] = v218;
  v200[6] = v219;
  v200[0] = v213;
  v200[1] = v214;
  v200[2] = v215;
  v101 = URLComponents.port.getter();
  if ((v102 & 1) != 0)
    goto LABEL_153;
  v103 = v101;
  v104 = v218._countAndFlagsBits;
  if (v218._countAndFlagsBits)
  {
    v105 = (uint64_t)v217._object;
    v106 = outlined retain of URLComponents((uint64_t)&v213);
    v107 = v104;
  }
  else if (BYTE4(v213._object) == 1 && countAndFlagsBits && (*(_BYTE *)(countAndFlagsBits + 120) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v120 = String.subscript.getter();
    v105 = MEMORY[0x186DA4634](v120);
    v107 = v121;
    v106 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v106 = URLComponents._URLComponents.port.getter();
    if ((v108 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      v110 = v109;
      v106 = swift_bridgeObjectRelease();
      if (!v110)
      {
        outlined release of URLComponents((uint64_t)&v213);
        goto LABEL_152;
      }
    }
    v105 = 0;
    v107 = 0xE000000000000000;
  }
  v122 = v105 & 0xFFFFFFFFFFFFLL;
  if ((v107 & 0x2000000000000000) != 0)
    v123 = HIBYTE(v107) & 0xF;
  else
    v123 = v105 & 0xFFFFFFFFFFFFLL;
  if (!v123)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v213);
LABEL_151:
    v162._countAndFlagsBits = 58;
    v162._object = (void *)0xE100000000000000;
    String.append(_:)(v162);
    goto LABEL_152;
  }
  if ((v221[24] & 1) != 0)
  {
    v200[0]._countAndFlagsBits = v105;
    v200[0]._object = (void *)v107;
    MEMORY[0x1E0C80A78](v106);
    v193 = v200;
    v194 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v192, v105, v107);
    if (v124 == 1)
    {
      v126 = v200[0]._object;
      v125 = v200[0]._countAndFlagsBits;
      swift_bridgeObjectRetain();
      specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v125, (unint64_t)v126, MEMORY[0x1E0DEE9E8]);
      v128 = v127;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v128 = v124;
      swift_bridgeObjectRelease_n();
    }
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v128)
      goto LABEL_152;
    goto LABEL_151;
  }
  if ((v107 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v107 & 0x2000000000000000) != 0)
    {
      v200[0]._countAndFlagsBits = v105;
      v200[0]._object = (void *)(v107 & 0xFFFFFFFFFFFFFFLL);
      v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v199 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v107) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v107) & 0xF, &v196);
      v130 = v196;
      v132 = (uint64_t)v197;
      swift_release();
    }
    else
    {
      if ((v105 & 0x1000000000000000) != 0)
      {
        v129 = (unsigned __int8 *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v129 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        v122 = v157;
      }
      v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v200[0]._object = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v130 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v129, v122, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v129, v122);
      v132 = v131;
    }
    swift_bridgeObjectRelease();
    if (v132 != 1)
    {
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v213);
      outlined consume of AttributedString.AttributeRunBoundaries?(v130, v132);
      if (!v132)
        goto LABEL_152;
      goto LABEL_151;
    }
  }
  v200[0]._countAndFlagsBits = v105;
  v200[0]._object = (void *)v107;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v133 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v134 = objc_msgSend(v133, sel__fastCharacterContents);
  v135 = v133;
  if (v134)
  {
    v200[0]._countAndFlagsBits = v105;
    v200[0]._object = (void *)v107;
    StringProtocol._ephemeralString.getter();
    v136 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v137 = objc_msgSend(v136, sel_length);
    v138 = swift_unknownObjectRelease();
    MEMORY[0x1E0C80A78](v138);
    LOBYTE(v193) = 0;
    MEMORY[0x1E0C80A78](v139);
    v190 = v134;
    v191 = v137;
    specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v134, (uint64_t)v137, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v140, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v189);
    v142 = v141;
    swift_bridgeObjectRelease_n();
    outlined release of URLComponents((uint64_t)&v213);
    swift_bridgeObjectRelease();
    if (!v142)
      goto LABEL_152;
    goto LABEL_151;
  }
  v200[0]._countAndFlagsBits = v105;
  v200[0]._object = (void *)v107;
  swift_bridgeObjectRetain();
  v150 = String.init<A>(_:)();
  v151 = v149;
  if ((v149 & 0x1000000000000000) != 0)
  {
    v150 = static String._copying(_:)();
    v161 = v160;
    swift_bridgeObjectRelease();
    v151 = v161;
    if ((v161 & 0x2000000000000000) == 0)
      goto LABEL_136;
LABEL_149:
    v200[0]._countAndFlagsBits = v150;
    v200[0]._object = (void *)(v151 & 0xFFFFFFFFFFFFFFLL);
    v198 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v199 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v200, HIBYTE(v151) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v198, 0, (unsigned __int8 *)v200, HIBYTE(v151) & 0xF, &v196);
    v155 = v197;
    swift_release();
    goto LABEL_150;
  }
  if ((v149 & 0x2000000000000000) != 0)
    goto LABEL_149;
LABEL_136:
  if ((v150 & 0x1000000000000000) != 0)
  {
    v152 = (unsigned __int8 *)((v151 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v153 = v150 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v152 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  v200[0]._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
  v200[0]._object = 0;
  _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v152, v153, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v200, 0, v152, v153);
  v155 = v154;
LABEL_150:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  if (v155)
    goto LABEL_151;
LABEL_152:
  v200[0]._countAndFlagsBits = v103;
  v163._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v163);
  swift_bridgeObjectRelease();
LABEL_153:
  outlined retain of URLComponents((uint64_t)&v213);
  v164 = (unint64_t)URLComponents._URLComponents.path.getter();
  v166 = v165;
  outlined release of URLComponents((uint64_t)&v213);
  swift_bridgeObjectRelease();
  v167 = HIBYTE(v166) & 0xF;
  if ((v166 & 0x2000000000000000) == 0)
    v167 = v164 & 0xFFFFFFFFFFFFLL;
  if (v167)
  {
    outlined retain of URLComponents((uint64_t)&v213);
    v168 = (uint64_t)URLComponents._URLComponents.path.getter();
    v170 = v169;
    outlined release of URLComponents((uint64_t)&v213);
    v200[0]._countAndFlagsBits = v168;
    v200[0]._object = v170;
    swift_bridgeObjectRetain();
    v171._countAndFlagsBits = 47;
    v171._object = (void *)0xE100000000000000;
    LOBYTE(v168) = String.hasSuffix(_:)(v171);
    swift_bridgeObjectRelease();
    if ((v168 & 1) != 0)
    {
      v172 = outlined retain of URLComponents((uint64_t)&v213);
      URLComponents._URLComponents.query.getter(v172);
      v174 = v173;
      outlined release of URLComponents((uint64_t)&v213);
      swift_bridgeObjectRelease();
      if (!v174)
      {
        v175 = outlined retain of URLComponents((uint64_t)&v213);
        URLComponents._URLComponents.fragment.getter(v175);
        v177 = v176;
        outlined release of URLComponents((uint64_t)&v213);
        swift_bridgeObjectRelease();
        if (!v177)
        {
          specialized RangeReplaceableCollection<>.removeLast()();
          swift_bridgeObjectRelease();
        }
      }
    }
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  v178 = outlined retain of URLComponents((uint64_t)&v213);
  v179 = URLComponents._URLComponents.query.getter(v178);
  v181 = v180;
  outlined release of URLComponents((uint64_t)&v213);
  if (v181)
  {
    v200[0]._countAndFlagsBits = 63;
    v200[0]._object = (void *)0xE100000000000000;
    v182._countAndFlagsBits = (uint64_t)v179;
    v182._object = v181;
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  v183 = outlined retain of URLComponents((uint64_t)&v213);
  v184 = URLComponents._URLComponents.fragment.getter(v183);
  v186 = v185;
  outlined release of URLComponents((uint64_t)&v213);
  if (v186)
  {
    v200[0]._countAndFlagsBits = 35;
    v200[0]._object = (void *)0xE100000000000000;
    v187._countAndFlagsBits = (uint64_t)v184;
    v187._object = v186;
    String.append(_:)(v187);
    swift_bridgeObjectRelease();
    String.append(_:)(v200[0]);
    swift_bridgeObjectRelease();
  }
  return v202;
}

uint64_t URL.FormatStyle.formatMultiLevelSubdomains(from:forHost:)(uint64_t a1)
{
  void *v2;
  NSString *v3;
  uint64_t result;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[6];
  _QWORD v15[2];

  v2 = (void *)String._bridgeToObjectiveCImpl()();
  v3 = __NSURLGetTopLevelDomain(v2);
  result = swift_unknownObjectRelease();
  if (v3)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v15[0] = 46;
    v15[1] = 0xE100000000000000;
    MEMORY[0x1E0C80A78](v8);
    v14[2] = v15;
    swift_bridgeObjectRetain();
    v9 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply, (uint64_t)v14, (uint64_t)v5, v7);
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v9 + 16);
    result = swift_bridgeObjectRelease();
    v11 = v10 + 2;
    if (__OFADD__(v10, 2))
    {
      __break(1u);
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      if (v11 >= (uint64_t)v12)
        return result;
      v13 = v12 - v11;
      if (!__OFSUB__(v12, v11))
      {
        if (!v13)
          return result;
        if ((v13 & 0x8000000000000000) == 0)
        {
          if (v12 >= v13)
            return specialized Array.replaceSubrange<A>(_:with:)(0, v13);
LABEL_13:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance URL.FormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = URL.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t URL.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  __int128 v6;

  v5 = *v3;
  v6 = *(_OWORD *)(v3 + 1);
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall URL.formatted()()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[2];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v37 = v0[1];
  v38 = *v0;
  v36 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v1 = static _SetStorage.allocate(capacity:)();
  v2 = 0;
  v3 = 0;
  v4 = v1 + 56;
  while (1)
  {
    v5 = v2;
    v6 = (char *)&outlined read-only object #0 of URL.formatted() + 16 * v3;
    v8 = *((_QWORD *)v6 + 4);
    v7 = *((_QWORD *)v6 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v9 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v12 = v9 & ~v11;
    v13 = v12 >> 6;
    v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
    v15 = 1 << v12;
    if (((1 << v12) & v14) == 0)
      break;
    v16 = *(_QWORD *)(v1 + 48);
    v17 = (_QWORD *)(v16 + 16 * v12);
    if (*v17 != v8 || v17[1] != v7)
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((v9 & 1) == 0)
      {
        v19 = ~v11;
        v12 = (v12 + 1) & v19;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
          break;
        v20 = (_QWORD *)(v16 + 16 * v12);
        if (*v20 != v8 || v20[1] != v7)
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v9 & 1) == 0)
          {
            v12 = (v12 + 1) & v19;
            v13 = v12 >> 6;
            v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
            v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0)
              break;
            v22 = (_QWORD *)(v16 + 16 * v12);
            if (*v22 != v8 || v22[1] != v7)
            {
              v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((v9 & 1) == 0)
              {
                v12 = (v12 + 1) & v19;
                v13 = v12 >> 6;
                v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
                v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0)
                  break;
                v24 = (_QWORD *)(v16 + 16 * v12);
                if (*v24 != v8 || v24[1] != v7)
                {
                  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v9 & 1) == 0)
                  {
                    v12 = (v12 + 1) & v19;
                    v13 = v12 >> 6;
                    v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
                    v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0)
                      break;
                    v25 = (_QWORD *)(v16 + 16 * v12);
                    if (*v25 != v8 || v25[1] != v7)
                    {
                      do
                      {
                        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((v9 & 1) != 0)
                          break;
                        v12 = (v12 + 1) & v19;
                        v13 = v12 >> 6;
                        v14 = *(_QWORD *)(v4 + 8 * (v12 >> 6));
                        v15 = 1 << v12;
                        if ((v14 & (1 << v12)) == 0)
                          goto LABEL_37;
                        v26 = (_QWORD *)(v16 + 16 * v12);
                      }
                      while (*v26 != v8 || v26[1] != v7);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    v2 = 1;
    v3 = 1;
    if ((v5 & 1) != 0)
    {
      swift_arrayDestroy();
      v53[1] = 0;
      *(_QWORD *)&v54 = 0;
      BYTE8(v54) = 0;
      v55 = 0;
      v56 = 0;
      LOBYTE(v57) = 0;
      v58 = 0;
      *(_QWORD *)&v59 = 0;
      BYTE8(v59) = 1;
      v63 = 0;
      LOBYTE(v64) = 0;
      v60 = 0;
      v61 = 0;
      LOBYTE(v62) = 0;
      v65 = 0;
      *(_QWORD *)&v66 = v1;
      BYTE8(v66) = 1;
      v67 = 0;
      v68 = 0;
      LOBYTE(v69) = 0;
      v70 = 0;
      *(_QWORD *)&v71 = 0;
      BYTE8(v71) = 0;
      v72 = 0;
      v73 = 0;
      v49 = 0u;
      v50 = v69;
      v51 = v71;
      v52 = 0u;
      LOBYTE(v53[0]) = 1;
      v47 = v64;
      v48 = v66;
      v42 = 0u;
      v43 = v57;
      v45 = 0u;
      v46 = v62;
      v44 = v59;
      v40 = v53[0];
      v41 = v54;
      v39[0] = v38;
      v39[1] = v37;
      v39[2] = v36;
      v32 = URL.FormatStyle.format(_:)(v39);
      v34 = v33;
      outlined release of URL.FormatStyle((uint64_t)v53);
      v9 = v32;
      v10 = v34;
      goto LABEL_41;
    }
  }
LABEL_37:
  *(_QWORD *)(v4 + 8 * v13) = v15 | v14;
  v28 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v12);
  *v28 = v8;
  v28[1] = v7;
  v29 = *(_QWORD *)(v1 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v1 + 16) = v31;
    goto LABEL_3;
  }
  __break(1u);
LABEL_41:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

Swift::Int static FormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = static _SetStorage.allocate(capacity:)();
  v3 = 0;
  v4 = 0;
  v5 = v2 + 56;
  while (1)
  {
    v6 = v3;
    v7 = (char *)&outlined read-only object #0 of static FormatStyle<>.url.getter + 16 * v4;
    v9 = *((_QWORD *)v7 + 4);
    v8 = *((_QWORD *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v12 = result & ~v11;
    v13 = v12 >> 6;
    v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
    v15 = 1 << v12;
    if (((1 << v12) & v14) == 0)
      break;
    v16 = *(_QWORD *)(v2 + 48);
    v17 = (_QWORD *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v19 = ~v11;
        v12 = (v12 + 1) & v19;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
          break;
        v20 = (_QWORD *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            v12 = (v12 + 1) & v19;
            v13 = v12 >> 6;
            v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
            v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0)
              break;
            v22 = (_QWORD *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                v12 = (v12 + 1) & v19;
                v13 = v12 >> 6;
                v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
                v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0)
                  break;
                v24 = (_QWORD *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      break;
                    v12 = (v12 + 1) & v19;
                    v13 = v12 >> 6;
                    v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
                    v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0)
                      goto LABEL_33;
                    v25 = (_QWORD *)(v16 + 16 * v12);
                  }
                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    v3 = 1;
    v4 = 1;
    if ((v6 & 1) != 0)
    {
      result = swift_arrayDestroy();
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = v2;
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_BYTE *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      return result;
    }
  }
LABEL_33:
  *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
  v27 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v12);
  *v27 = v9;
  v27[1] = v8;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v2 + 16) = v30;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

Swift::Int static ParseableFormatStyle<>.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = static _SetStorage.allocate(capacity:)();
  v3 = 0;
  v4 = 0;
  v5 = v2 + 56;
  while (1)
  {
    v6 = v3;
    v7 = (char *)&outlined read-only object #0 of static ParseableFormatStyle<>.url.getter + 16 * v4;
    v9 = *((_QWORD *)v7 + 4);
    v8 = *((_QWORD *)v7 + 5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v12 = result & ~v11;
    v13 = v12 >> 6;
    v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
    v15 = 1 << v12;
    if (((1 << v12) & v14) == 0)
      break;
    v16 = *(_QWORD *)(v2 + 48);
    v17 = (_QWORD *)(v16 + 16 * v12);
    if (*v17 != v9 || v17[1] != v8)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v19 = ~v11;
        v12 = (v12 + 1) & v19;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
          break;
        v20 = (_QWORD *)(v16 + 16 * v12);
        if (*v20 != v9 || v20[1] != v8)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            v12 = (v12 + 1) & v19;
            v13 = v12 >> 6;
            v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
            v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0)
              break;
            v22 = (_QWORD *)(v16 + 16 * v12);
            if (*v22 != v9 || v22[1] != v8)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                v12 = (v12 + 1) & v19;
                v13 = v12 >> 6;
                v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
                v15 = 1 << v12;
                if ((v14 & (1 << v12)) == 0)
                  break;
                v24 = (_QWORD *)(v16 + 16 * v12);
                if (*v24 != v9 || v24[1] != v8)
                {
                  do
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      break;
                    v12 = (v12 + 1) & v19;
                    v13 = v12 >> 6;
                    v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
                    v15 = 1 << v12;
                    if ((v14 & (1 << v12)) == 0)
                      goto LABEL_33;
                    v25 = (_QWORD *)(v16 + 16 * v12);
                  }
                  while (*v25 != v9 || v25[1] != v8);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    v3 = 1;
    v4 = 1;
    if ((v6 & 1) != 0)
    {
      result = swift_arrayDestroy();
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = v2;
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_BYTE *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      return result;
    }
  }
LABEL_33:
  *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
  v27 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v12);
  *v27 = v9;
  v27[1] = v8;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v2 + 16) = v30;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOWORD(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0)
              goto LABEL_72;
            v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  _QWORD *v16;
  char *result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  v16 = &v6[2 * a1 + 4];
  result = (char *)swift_arrayDestroy();
  if (!v10)
    goto LABEL_20;
  v18 = v6[2];
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
    goto LABEL_26;
  if ((v20 & 0x8000000000000000) == 0)
  {
    result = (char *)(v16 + 2);
    v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20])
      result = (char *)memmove(result, v21, 16 * v20);
    v22 = v6[2];
    v19 = __OFADD__(v22, v10);
    v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *v16 = a3;
      v16[1] = a4;
      *(_QWORD *)v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *result;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[a1 + 4];
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 1;
    v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17])
      result = memmove(result, v18, 8 * v17);
    v19 = v5[2];
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      *v14 = a3;
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  char **v4;
  char *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v11;
  int64_t v12;
  char *result;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  unint64_t v32;
  unint64_t v33;

  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = *v4;
  v7 = *((_QWORD *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((_QWORD *)v6 + 3) >> 1)
  {
    if (v7 <= v12)
      v15 = v7 + v11;
    else
      v15 = v7;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1, v6);
    v6 = result;
  }
  v16 = v6 + 32;
  v17 = &v6[a1 + 32];
  v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      *v4 = v6;
      return result;
    }
    v25 = (unint64_t)&v6[a3 + 32 + a1];
    if (v25 <= (unint64_t)&v6[a1 + 33])
      v25 = (unint64_t)&v6[a1 + 33];
    v26 = v25 - (_QWORD)&v6[a1] - 33;
    if (v26 >= a3)
      v26 = a3;
    v27 = v26 + 1;
    if (v27 > 0x20)
    {
      v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0)
        v29 = 32;
      v28 = v27 - v29;
      v17 += v28;
      v30 = vdupq_n_s8(a4);
      v31 = (int8x16_t *)&v6[a1 + 48];
      v32 = v28;
      do
      {
        v31[-1] = v30;
        *v31 = v30;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
    }
    else
    {
      v28 = 0;
    }
    v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18)
        goto LABEL_34;
    }
    __break(1u);
    goto LABEL_36;
  }
  v19 = *((_QWORD *)v6 + 2);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = &v16[a2];
    if (v18 != &v16[a2] || v18 >= &v21[v20])
      result = (char *)memmove(&v17[a3], v21, v20);
    v22 = *((_QWORD *)v6 + 2);
    v23 = __OFADD__(v22, v11);
    v24 = v22 + v11;
    if (v23)
      goto LABEL_42;
    *((_QWORD *)v6 + 2) = v24;
    goto LABEL_20;
  }
LABEL_43:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  unint64_t v14;
  int64_t v15;

  Hasher._finalize()();
  v3 = 0;
  v4 = 0;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v4++, 1))
      goto LABEL_19;
    if (v4 >= v9)
    {
LABEL_17:
      Hasher._combine(_:)(v3);
      return;
    }
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (!v14)
      break;
LABEL_16:
    v8 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v11);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v9)
    goto LABEL_17;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    ++v4;
    goto LABEL_16;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      goto LABEL_17;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  Swift::Int v10;
  uint64_t v12;
  int64_t v13;

  Hasher._finalize()();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_19;
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    v12 = *(_QWORD *)(v3 + 8 * v9);
    if (!v12)
      break;
LABEL_16:
    v6 = (v12 - 1) & v12;
LABEL_5:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v10 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v10;
  }
  v13 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_17;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v9 >= v7)
      goto LABEL_17;
    v12 = *(_QWORD *)(v3 + 8 * v9);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[4 * a1 + 32];
    v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14])
      result = (char *)memmove(result, v15, 4 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[2 * a1 + 32];
    v15 = &v4[2 * a2 + 32];
    if (a1 != a2 || result >= &v15[2 * v14])
      result = (char *)memmove(result, v15, 2 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = v12 - a2;
  if (__OFSUB__(v12, a2))
    goto LABEL_27;
  if ((v13 & 0x8000000000000000) == 0)
  {
    result = &v4[a1 + 32];
    v14 = &v4[a2 + 32];
    if (a1 != a2 || result >= &v14[v13])
      result = (char *)memmove(result, v14, v13);
    v15 = *((_QWORD *)v4 + 2);
    v16 = __OFADD__(v15, v8);
    v17 = v15 + v8;
    if (!v16)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t specialized static URL.FormatStyle.HostDisplayOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 2);
  v3 = a1[24];
  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[24];
  v7 = *((_QWORD *)a2 + 4);
  if (!v2)
  {
    if (!v5)
    {
      if (v3 != v6)
        return 0;
      goto LABEL_15;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v5)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (*(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a1 + 1) << 56) >> 53)) != *(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a2 + 1) << 56) >> 53)))
    return 0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v8 = specialized static Set.== infix(_:_:)(v2, v5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v8 & 1) != 0 && ((v3 ^ v6) & 1) == 0)
  {
LABEL_15:
    if (v4)
    {
      if (v7)
      {
        swift_bridgeObjectRetain();
        v10 = swift_bridgeObjectRetain();
        v11 = specialized static Set.== infix(_:_:)(v10, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          return 1;
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static URL.FormatStyle.ComponentDisplayOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a2 + 2);
  if (v2)
  {
    if (v3)
    {
      if (*(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a1 + 1) << 56) >> 53)) == *(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a2 + 1) << 56) >> 53)))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v4 = specialized static Set.== infix(_:_:)(v2, v3);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v4 & 1;
      }
      return 0;
    }
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  if (v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t specialized static URL.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  int v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  char v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char v132;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 2);
  v3 = a1[24];
  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 5);
  v131 = a1[48];
  v128 = *((_QWORD *)a1 + 7);
  v129 = *((_QWORD *)a1 + 8);
  v126 = a1[72];
  v6 = *((_QWORD *)a1 + 11);
  v121 = *((_QWORD *)a1 + 10);
  v119 = a1[96];
  v123 = *((_QWORD *)a1 + 13);
  v117 = a1[112];
  v114 = *((_QWORD *)a1 + 15);
  v7 = *((_QWORD *)a1 + 19);
  v8 = a1[160];
  v9 = *((_QWORD *)a1 + 21);
  v10 = *((_QWORD *)a1 + 22);
  v11 = a1[184];
  v12 = *((_QWORD *)a1 + 24);
  v13 = *((_QWORD *)a1 + 25);
  v14 = *((_QWORD *)a2 + 2);
  v15 = a2[24];
  v17 = *((_QWORD *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v18 = a2[48];
  v127 = *((_QWORD *)a2 + 7);
  v130 = *((_QWORD *)a2 + 8);
  v125 = a2[72];
  v120 = *((_QWORD *)a2 + 10);
  v124 = *((_QWORD *)a2 + 11);
  v118 = a2[96];
  v122 = *((_QWORD *)a2 + 13);
  v116 = a2[112];
  v113 = *((_QWORD *)a2 + 15);
  v115 = *((_QWORD *)a2 + 16);
  v112 = a2[136];
  v19 = *((_QWORD *)a2 + 19);
  v111 = *((_QWORD *)a2 + 18);
  v20 = a2[160];
  v21 = *((_QWORD *)a2 + 21);
  v22 = *((_QWORD *)a2 + 22);
  v23 = a2[184];
  v25 = *((_QWORD *)a2 + 24);
  v24 = *((_QWORD *)a2 + 25);
  if (!v2)
  {
    if (v14)
      goto LABEL_11;
    v109 = a1[136];
    v110 = *((_QWORD *)a1 + 16);
    v108 = *((_QWORD *)a1 + 18);
    if (v3 != v15)
      return 0;
    goto LABEL_15;
  }
  if (!v14)
    goto LABEL_10;
  v109 = a1[136];
  v110 = *((_QWORD *)a1 + 16);
  v108 = *((_QWORD *)a1 + 18);
  if (*(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a1 + 1) << 56) >> 53)) != *(_QWORD *)((char *)qword_1820E6008 + ((uint64_t)(*((_QWORD *)a2 + 1) << 56) >> 53)))
    return 0;
  v77 = *((_QWORD *)a1 + 11);
  v80 = *((_QWORD *)a1 + 19);
  v97 = a2[160];
  v102 = a1[160];
  v88 = *((_QWORD *)a2 + 22);
  v92 = *((_QWORD *)a2 + 21);
  v84 = *((_QWORD *)a1 + 21);
  v75 = a2[184];
  v69 = *((_QWORD *)a1 + 24);
  v70 = *((_QWORD *)a2 + 24);
  v67 = a1[184];
  v68 = *((_QWORD *)a1 + 22);
  v72 = *((_QWORD *)a2 + 25);
  v74 = *((_QWORD *)a1 + 25);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v26 = specialized static Set.== infix(_:_:)(v2, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  result = 0;
  if ((v26 & 1) != 0)
  {
    v24 = v72;
    v13 = v74;
    v10 = v68;
    LOBYTE(v12) = v69;
    v11 = v67;
    LOBYTE(v25) = v70;
    v23 = v75;
    LOBYTE(v9) = v84;
    v22 = v88;
    v6 = v77;
    v7 = v80;
    v20 = v97;
    v8 = v102;
    LOBYTE(v21) = v92;
    if (((v3 ^ v15) & 1) == 0)
    {
LABEL_15:
      if (v5)
      {
        if (!v16)
          goto LABEL_10;
        if (qword_1820E6008[(char)v4] != qword_1820E6008[(char)v17])
          return 0;
        v78 = v6;
        v81 = v7;
        v98 = v20;
        v103 = v8;
        v89 = v22;
        v93 = v21;
        v85 = v9;
        v76 = v23;
        v28 = v25;
        v29 = v11;
        v30 = v10;
        v31 = v12;
        v32 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v33 = specialized static Set.== infix(_:_:)(v5, v16);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        result = 0;
        if ((v33 & 1) == 0)
          return result;
        v24 = v32;
        LOBYTE(v12) = v31;
        v10 = v30;
        v11 = v29;
        LOBYTE(v25) = v28;
        v23 = v76;
        LOBYTE(v9) = v85;
        v22 = v89;
        v6 = v78;
        v7 = v81;
        v20 = v98;
        v8 = v103;
        LOBYTE(v21) = v93;
        if (((v131 ^ v18) & 1) != 0)
          return result;
      }
      else
      {
        if (v16)
          goto LABEL_11;
        if (v131 != v18)
          return 0;
      }
      if (v129)
      {
        if (!v130)
          goto LABEL_10;
        if (qword_1820E6008[(char)v128] != qword_1820E6008[(char)v127])
          return 0;
        v79 = v6;
        v82 = v7;
        v99 = v20;
        v104 = v8;
        v90 = v22;
        v94 = v21;
        v86 = v9;
        v34 = v23;
        v35 = v25;
        v36 = v11;
        v37 = v10;
        v38 = v12;
        v39 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v40 = specialized static Set.== infix(_:_:)(v129, v130);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        result = 0;
        if ((v40 & 1) == 0)
          return result;
        v24 = v39;
        LOBYTE(v12) = v38;
        v10 = v37;
        v11 = v36;
        LOBYTE(v25) = v35;
        v23 = v34;
        LOBYTE(v9) = v86;
        v22 = v90;
        v6 = v79;
        v7 = v82;
        v20 = v99;
        v8 = v104;
        LOBYTE(v21) = v94;
        if (((v126 ^ v125) & 1) != 0)
          return result;
      }
      else
      {
        if (v130)
          goto LABEL_11;
        if (v126 != v125)
          return 0;
      }
      if (v6)
      {
        if (v124)
        {
          if (qword_1820E6008[(char)v121] != qword_1820E6008[(char)v120])
            return 0;
          v107 = v19;
          v100 = v20;
          v105 = v8;
          v91 = v22;
          v95 = v21;
          v83 = v7;
          v87 = v9;
          v41 = v23;
          v42 = v25;
          v43 = v11;
          v44 = v10;
          v45 = v12;
          v46 = v24;
          v47 = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v48 = specialized static Set.== infix(_:_:)(v47, v124);
          swift_bridgeObjectRelease();
          v49 = v122;
          swift_bridgeObjectRelease_n();
          if ((v48 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          goto LABEL_42;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
      }
      else
      {
        v49 = v122;
        if (!v124)
        {
          v107 = v19;
          v100 = v20;
          v105 = v8;
          v91 = v22;
          v95 = v21;
          v83 = v7;
          v87 = v9;
          v41 = v23;
          v42 = v25;
          v43 = v11;
          v44 = v10;
          v45 = v12;
          v46 = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_42:
          if (v119 != v118)
          {
LABEL_43:
            swift_bridgeObjectRelease();
LABEL_50:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          if (v123)
          {
            if (!v49)
              goto LABEL_43;
            swift_bridgeObjectRetain();
            v50 = swift_bridgeObjectRetain();
            v132 = specialized static Set.== infix(_:_:)(v50, v49);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = 0;
            if ((v132 & 1) == 0)
              return result;
            v52 = v87;
            v51 = v91;
            v53 = v83;
            v55 = v100;
            v54 = v105;
            v56 = v95;
            if (((v117 ^ v116) & 1) != 0)
              return result;
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v49)
              goto LABEL_50;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v52 = v87;
            v51 = v91;
            v53 = v83;
            v55 = v100;
            v54 = v105;
            v56 = v95;
            if (v117 != v116)
              return 0;
          }
          v71 = v42;
          v73 = v46;
          v101 = v55;
          v106 = v54;
          v96 = v56;
          v57 = v43;
          v58 = v44;
          v59 = v45;
          if (v110)
          {
            if (!v115)
              goto LABEL_10;
            if (qword_1820E6008[(char)v114] != qword_1820E6008[(char)v113])
              return 0;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v60 = specialized static Set.== infix(_:_:)(v110, v115);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            result = 0;
            if ((v60 & 1) == 0)
              return result;
            v61 = v53;
            if (((v109 ^ v112) & 1) != 0)
              return result;
          }
          else
          {
            if (v115)
              goto LABEL_11;
            v61 = v53;
            if (v109 != v112)
              return 0;
          }
          if (v61)
          {
            if (!v107)
              goto LABEL_10;
            if (qword_1820E6008[v108] != qword_1820E6008[(char)v111])
              return 0;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v62 = specialized static Set.== infix(_:_:)(v53, v107);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            result = 0;
            if ((v62 & 1) == 0)
              return result;
            v63 = v58;
            if (((v106 ^ v101) & 1) != 0)
              return result;
          }
          else
          {
            if (v107)
              goto LABEL_11;
            v63 = v58;
            if (v106 != v101)
              return 0;
          }
          if (!v63)
          {
            if (v51)
              goto LABEL_11;
            v65 = v13;
            if (v57 != v41)
              return 0;
            goto LABEL_82;
          }
          if (v51)
          {
            if (qword_1820E6008[v52] != qword_1820E6008[v96])
              return 0;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v64 = specialized static Set.== infix(_:_:)(v58, v51);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            result = 0;
            if ((v64 & 1) == 0)
              return result;
            v65 = v13;
            if (((v57 ^ v41) & 1) != 0)
              return result;
LABEL_82:
            if (!v65)
            {
              if (!v73)
                return 1;
              goto LABEL_11;
            }
            if (v73)
            {
              if (qword_1820E6008[v59] == qword_1820E6008[v71])
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                v66 = specialized static Set.== infix(_:_:)(v13, v73);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                return v66 & 1;
              }
              return 0;
            }
          }
LABEL_10:
          swift_bridgeObjectRetain_n();
LABEL_11:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys>);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys>);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.FormatStyle.HostDisplayOption.Option.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys();
  v10 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = KeyedDecodingContainer.allKeys.getter();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = &type metadata for URL.FormatStyle.HostDisplayOption.Option;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x1E0DEC450], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t lazy protocol witness table accessor for type [Substring] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (_QWORD *)&v16[48 * v15])
      result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_1E0F295E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_1E0F295E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_1E0F295E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.CodingKeys, &unk_1E0F295E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.CodingKeys and conformance URL.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption, &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption, &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption, &type metadata for URL.FormatStyle.ComponentDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption and conformance URL.FormatStyle.ComponentDisplayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption, &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption, &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption, &type metadata for URL.FormatStyle.HostDisplayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption and conformance URL.FormatStyle.HostDisplayOption);
  }
  return result;
}

uint64_t outlined retain of URL.FormatStyle(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys, &unk_1E0F299C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys, &unk_1E0F299C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys, &unk_1E0F299C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.CodingKeys, &unk_1E0F299C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.CodingKeys and conformance URL.FormatStyle.ComponentDisplayOption.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option, &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option, &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option, &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayOption.Option, &type metadata for URL.FormatStyle.ComponentDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayOption.Option and conformance URL.FormatStyle.ComponentDisplayOption.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition, &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition, &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition, &type metadata for URL.FormatStyle.ComponentDisplayCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition and conformance URL.FormatStyle.ComponentDisplayCondition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys, &unk_1E0F297D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys, &unk_1E0F297D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys, &unk_1E0F297D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.CodingKeys, &unk_1E0F297D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option, &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option, &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option, &type metadata for URL.FormatStyle.HostDisplayOption.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option and conformance URL.FormatStyle.HostDisplayOption.Option);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v8 = a2;
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle, &type metadata for URL.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle, &type metadata for URL.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle, &type metadata for URL.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle, &type metadata for URL.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle, &type metadata for URL.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle and conformance URL.FormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.Component, &type metadata for URL.FormatStyle.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.Component, &type metadata for URL.FormatStyle.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.Component, &type metadata for URL.FormatStyle.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.Component, &type metadata for URL.FormatStyle.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.Component and conformance URL.FormatStyle.Component);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL.FormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[2] = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  result = lazy protocol witness table accessor for type URL.FormatStyle and conformance URL.FormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for URL.FormatStyle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for URL.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle()
{
  return &type metadata for URL.FormatStyle;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.Component()
{
  return &type metadata for URL.FormatStyle.Component;
}

uint64_t destroy for URL.FormatStyle.ComponentDisplayOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.ComponentDisplayOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption;
}

uint64_t destroy for URL.FormatStyle.HostDisplayOption()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.HostDisplayOption(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.HostDisplayOption.Option;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181B74970 + 4 * byte_1820E5249[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181B749A4 + 4 * byte_1820E5244[v4]))();
}

uint64_t sub_181B749A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B749AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B749B4);
  return result;
}

uint64_t sub_181B749C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B749C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181B749CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B749D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.CodingKeys()
{
  return &unk_1E0F297D8;
}

uint64_t initializeBufferWithCopyOfBuffer for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for URL.FormatStyle.ComponentDisplayCondition(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayCondition;
}

ValueMetadata *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.Option()
{
  return &type metadata for URL.FormatStyle.ComponentDisplayOption.Option;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayOption.CodingKeys()
{
  return &unk_1E0F299C0;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181B74B18 + 4 * byte_1820E5253[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181B74B4C + 4 * byte_1820E524E[v4]))();
}

uint64_t sub_181B74B4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B74B54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B74B5CLL);
  return result;
}

uint64_t sub_181B74B68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B74B70);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181B74B74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B74B7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.CodingKeys()
{
  return &unk_1E0F295E8;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *result;
  int64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v12 = v6 + v11;
  if (__OFADD__(v6, v11))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v12)
      v14 = v6 + v11;
    else
      v14 = v6;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v14, 1, v5);
    v5 = result;
  }
  v15 = &v5[8 * a1 + 32];
  if (!v11)
    goto LABEL_20;
  v16 = *((_QWORD *)v5 + 2);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_28;
  if (v18 < 0)
  {
LABEL_30:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = &v15[8 * v10];
  v19 = &v5[8 * a2 + 32];
  if (result != v19 || result >= &v19[8 * v18])
    result = (char *)memmove(result, v19, 8 * v18);
  v20 = *((_QWORD *)v5 + 2);
  v17 = __OFADD__(v20, v11);
  v21 = v20 + v11;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *((_QWORD *)v5 + 2) = v21;
LABEL_20:
  if (v10)
    result = (char *)memcpy(v15, (const void *)(a3 + 32), 8 * v10);
  *v3 = v5;
  return result;
}

uint64_t specialized URL.FormatStyle.ComponentDisplayCondition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D65726975716572 && a2 == 0xEC00000073746E65)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized URL.FormatStyle.ComponentDisplayOption.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys, &unk_1E0F29B10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys, &unk_1E0F29B10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys, &unk_1E0F29B10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys, &unk_1E0F29B10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.ComponentDisplayCondition.CodingKeys and conformance URL.FormatStyle.ComponentDisplayCondition.CodingKeys);
  }
  return result;
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.Option.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64657474696D6FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6579616C70736964 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized URL.FormatStyle.HostDisplayOption.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000182308B50
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000182308B70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys, &unk_1E0F29678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys, &unk_1E0F29678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys, &unk_1E0F29678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys, &unk_1E0F29678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.CodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys, &unk_1E0F29728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys, &unk_1E0F29728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys, &unk_1E0F29728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys, &unk_1E0F29708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys, &unk_1E0F29708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys;
  if (!lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys, &unk_1E0F29708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys and conformance URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys);
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char **v3;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v10 <= *((_QWORD *)v5 + 3) >> 1)
  {
    if (!v9)
      goto LABEL_18;
  }
  else
  {
    result = (char *)a3();
    v5 = result;
    if (!v9)
    {
LABEL_18:
      *v3 = v5;
      return result;
    }
  }
  v13 = *((_QWORD *)v5 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_24;
  if ((v15 & 0x8000000000000000) == 0)
  {
    result = &v5[8 * a1 + 32];
    v16 = &v5[8 * a2 + 32];
    if (a1 != a2 || result >= &v16[8 * v15])
      result = (char *)memmove(result, v16, 8 * v15);
    v17 = *((_QWORD *)v5 + 2);
    v14 = __OFADD__(v17, v9);
    v18 = v17 + v9;
    if (!v14)
    {
      *((_QWORD *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char **v6;
  char *v8;
  int64_t v9;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  char *result;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v8 = *v6;
  v9 = *((_QWORD *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v15 > *((_QWORD *)v8 + 3) >> 1)
  {
    if (v9 <= v15)
      v18 = v9 + v14;
    else
      v18 = v9;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    v8 = result;
  }
  v19 = v8 + 32;
  v20 = &v8[a1 + 32];
  if (!v14)
    goto LABEL_21;
  v21 = *((_QWORD *)v8 + 2);
  v22 = v21 - a2;
  if (__OFSUB__(v21, a2))
    goto LABEL_30;
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_32:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = &v20[v13];
  v23 = &v19[a2];
  if (&v20[v13] != &v19[a2] || result >= &v23[v22])
    result = (char *)memmove(result, v23, v22);
  v24 = *((_QWORD *)v8 + 2);
  v25 = __OFADD__(v24, v14);
  v26 = v24 + v14;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *((_QWORD *)v8 + 2) = v26;
LABEL_21:
  if (v13 >= 1)
    result = (char *)memcpy(v20, (const void *)(a4 + a5), v13);
  *v6 = v8;
  return result;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.CodingKeys()
{
  return &unk_1E0F29678;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.OmittedCodingKeys()
{
  return &unk_1E0F29708;
}

void *type metadata accessor for URL.FormatStyle.HostDisplayOption.Option.DisplayedCodingKeys()
{
  return &unk_1E0F29728;
}

uint64_t storeEnumTagSinglePayload for URL.FormatStyle.HostDisplayOption.Option(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B75D88 + 4 * byte_1820E525D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B75DBC + 4 * byte_1820E5258[v4]))();
}

uint64_t sub_181B75DBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B75DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B75DCCLL);
  return result;
}

uint64_t sub_181B75DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B75DE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B75DE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B75DEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.FormatStyle.ComponentDisplayCondition.CodingKeys()
{
  return &unk_1E0F29B10;
}

uint64_t closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)specialized partial apply(_QWORD *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1) & 1;
}

uint64_t Range<>._utf8OffsetRange.getter()
{
  _QWORD *v0;

  return *v0 >> 11;
}

uint64_t AttributedString.setAttributes(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = (_QWORD *)*v1;
    v6 = *(_OWORD *)(*v1 + 16);
    v7 = *(_OWORD *)(*v1 + 48);
    v13[1] = *(_OWORD *)(*v1 + 32);
    v13[2] = v7;
    v13[0] = v6;
    v8 = v5[8];
    v9 = v5[9];
    v10 = v5[10];
    v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v13);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v13, v8, v9, v10, v11);
    swift_release();
  }
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  return AttributedString.Guts.setAttributes(_:in:)(v3, v4);
}

uint64_t AttributedString.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v26[6];
  char v27;
  uint64_t *v28;
  _QWORD v29[5];
  uint64_t v30;
  _BYTE v31[48];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];

  v3 = v2;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = (_QWORD *)*v2;
      v10 = *(_OWORD *)(*v2 + 16);
      v11 = *(_OWORD *)(*v2 + 48);
      v35[1] = *(_OWORD *)(*v2 + 32);
      v35[2] = v11;
      v35[0] = v10;
      v12 = v9[8];
      v13 = v9[9];
      v14 = v9[10];
      v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v35);
      swift_unknownObjectRetain();
      *v3 = AttributedString.Guts.init(string:runs:)(v35, v12, v13, v14, v15);
      swift_release();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      v17 = 1;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v30 = MEMORY[0x1E0DEE9D8];
    v18 = *v3;
    v19 = *(_OWORD *)(*v3 + 32);
    v32 = *(_OWORD *)(*v3 + 16);
    v33 = v19;
    v34 = *(_OWORD *)(v18 + 48);
    BigString.utf8.getter();
    v20 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v31);
    if (v20 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x1E0C80A78](result);
      v29[2] = v4;
      v29[3] = v5;
      MEMORY[0x1E0C80A78](v21);
      v26[2] = v4;
      v26[3] = v5;
      v26[4] = v6;
      v26[5] = v22;
      v27 = v17 & 1;
      v28 = &v30;
      swift_retain();
      AttributedString._InternalRunsSlice.updateEach(when:with:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:), (uint64_t)v29, (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedString.replaceAttributes(_:with:), (uint64_t)v26, (_QWORD *)v18, 0, v20);
      swift_release();
      v23 = v30;
      v24 = *(_QWORD *)(v30 + 16);
      if (v24)
      {
        swift_bridgeObjectRetain();
        v25 = (uint64_t *)(v23 + 40);
        do
        {
          AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(*(v25 - 1), *v25, 0, 0);
          v25 += 2;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t AttributedString.startIndex.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return AttributedString.startIndex.getter((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D13010], a1, a2, a3, a4, a5, a6);
}

uint64_t AttributedString.endIndex.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return AttributedString.startIndex.getter((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D13130], a1, a2, a3, a4, a5, a6);
}

uint64_t AttributedString.startIndex.getter@<X0>(uint64_t (*a1)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = a1(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  a7[2] = v10;
  a7[3] = v11;
  return result;
}

uint64_t specialized AttributedStringProtocol.description.getter(_OWORD *a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  Swift::String v21;
  unint64_t object;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int64_t v101;
  int64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  void *v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  int64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  __int128 v131;
  __int128 *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t countAndFlagsBits;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  Swift::String v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  Swift::String v157;
  Swift::String v158;
  uint64_t v159[8];
  Swift::String v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _BYTE v164[24];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  unint64_t v175;
  char v176[48];
  char v177[48];
  char v178[48];
  char v179[48];
  char v180[112];
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;

  v2 = a1[2];
  v209 = a1[1];
  v210 = v2;
  v211 = a1[3];
  v201 = BigString.startIndex.getter();
  v202 = v3;
  v203 = v4;
  v204 = v5;
  v205 = BigString.endIndex.getter();
  v206 = v6;
  v207 = v7;
  v208 = v8;
  v174 = 0;
  v175 = 0xE000000000000000;
  v9 = swift_retain_n();
  AttributedString.Runs.init(_:in:)(v9, &v212);
  v10 = v213;
  v11 = v212;
  v131 = v221;
  v12 = v221;
  if (v213 == (void *)v221)
  {
    v13 = 0;
    goto LABEL_165;
  }
  v129 = v215;
  v130 = v214;
  v14 = v216;
  v15 = v217;
  v16 = v218;
  v128 = v219;
  v122 = v223;
  v123 = v222;
  v121 = v224;
  v17 = v220;
  v18 = v225;
  v134 = v227;
  v135 = v226;
  v133 = v228;
  v127 = v229;
  v119 = v230;
  result = outlined retain of AttributedString.Runs((uint64_t)&v212);
  v136 = v18;
  v118 = v18 >> 10;
  v132 = (__int128 *)(v11 + 16);
  v142 = v14;
  countAndFlagsBits = v130;
  v140 = v16;
  v141 = v129;
  v125 = v15;
  v126 = v14;
  v124 = v16;
  v139 = v128;
  v120 = v17;
  v147 = v17;
  v20 = (uint64_t)v10;
  v150 = (_QWORD *)v11;
  v116 = v12;
  v117 = v10;
  while (2)
  {
    if (v20 >= v12)
      goto LABEL_170;
    v160._countAndFlagsBits = v11;
    v160._object = v10;
    *(_QWORD *)&v161 = v130;
    *((_QWORD *)&v161 + 1) = v129;
    *(_QWORD *)&v162 = v126;
    *((_QWORD *)&v162 + 1) = v125;
    *(_QWORD *)&v163 = v124;
    *((_QWORD *)&v163 + 1) = v128;
    *(_OWORD *)&v164[8] = v131;
    v165 = v123;
    v166 = v122;
    v167 = v121;
    *(_QWORD *)v164 = v120;
    v168 = v136;
    v169 = v135;
    v170 = v134;
    v171 = v133;
    v172 = v127;
    v173 = v119;
    v159[0] = v20;
    v159[1] = countAndFlagsBits;
    v159[2] = (uint64_t)v141;
    v159[3] = v142;
    v159[4] = v15;
    v159[5] = v140;
    v159[6] = v139;
    v159[7] = v147;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(v159, &v151._countAndFlagsBits);
    if (v151._countAndFlagsBits != *(_QWORD *)(v11 + 88))
    {
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    v145 = v15;
    v148 = v20;
    object = (unint64_t)v151._object;
    v23 = *((_QWORD *)&v153 + 1);
    v25 = v154;
    v24 = v155;
    if ((_QWORD)v152)
    {
      v26 = v152 + 24 * (((unint64_t)v151._object >> ((4 * *(_BYTE *)(v152 + 18) + 8) & 0x3C)) & 0xF);
      v27 = *(_QWORD *)(v26 + 24);
      v28 = *(_QWORD *)(v26 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v29 = v150[8];
      swift_retain();
      swift_unknownObjectRetain();
      v27 = specialized Rope._Node.subscript.getter(object, v29);
      v28 = v30;
      result = swift_unknownObjectRelease();
    }
    if (v118 >= v23 >> 10)
      v31 = v136;
    else
      v31 = v23;
    if (v118 >= v23 >> 10)
      v32 = v135;
    else
      v32 = v25;
    if (v118 >= v23 >> 10)
      v33 = v134;
    else
      v33 = *((_QWORD *)&v25 + 1);
    if (v118 >= v23 >> 10)
      v34 = v133;
    else
      v34 = v24;
    if (__OFADD__(v27, v23 >> 11))
      goto LABEL_172;
    if ((uint64_t)((unint64_t)v127 >> 11) >= (uint64_t)(v27 + (v23 >> 11)))
      v35 = v27 + (v23 >> 11);
    else
      v35 = (unint64_t)v127 >> 11;
    v36 = v132[1];
    v198 = *v132;
    v199 = v36;
    v200 = v132[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v35, v31 >> 11))
      goto LABEL_173;
    v37 = BigString.UTF8View.index(_:offsetBy:)();
    v39 = v38;
    v41 = v40;
    v43 = v42;
    result = outlined release of Locale((uint64_t)v176);
    if (v37 >> 10 < v31 >> 10)
    {
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
    v181 = v31;
    v182 = v32;
    v183 = v33;
    v184 = v34;
    v185 = v37;
    v186 = v39;
    v187 = v41;
    v188 = v43;
    v44 = v150[8];
    v45 = v150[10];
    v46 = v150[11];
    v48 = v142;
    v47 = countAndFlagsBits;
    v137 = v45;
    v138 = v150[9];
    if (v142 == 1 || countAndFlagsBits != v46)
    {
      if (v44)
        v52 = v150[9];
      else
        v52 = 0;
      v49 = v148;
      if (v148 < 0 || v52 < v148)
      {
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      if (v44 && v148 < v150[9] && *(_WORD *)(v44 + 16))
      {
        v144 = v150[11];
        v53 = v150[10];
        v54 = *(unsigned __int8 *)(v44 + 18);
        if (*(_BYTE *)(v44 + 18))
        {
          swift_unknownObjectRetain_n();
          result = swift_retain();
          v55 = v44;
          while (1)
          {
            v58 = *(unsigned __int16 *)(v55 + 16);
            if (*(_WORD *)(v55 + 16))
            {
              v59 = *(_QWORD *)(v55 + 32);
              v60 = __OFSUB__(v49, v59);
              v61 = v49 - v59;
              if (v60)
                goto LABEL_168;
              if (__OFADD__(v61, 1))
                goto LABEL_169;
              if (v61 + 1 <= 0)
              {
                v58 = 0;
                goto LABEL_45;
              }
              if ((_DWORD)v58 == 1)
                goto LABEL_43;
              v62 = *(_QWORD *)(v55 + 56);
              v49 = v61 - v62;
              if (__OFSUB__(v61, v62))
                goto LABEL_178;
              if (__OFADD__(v49, 1))
                goto LABEL_179;
              if (v49 + 1 < 1)
              {
                v58 = 1;
                v49 = v61;
                goto LABEL_45;
              }
              if ((_DWORD)v58 == 2)
                goto LABEL_44;
              v63 = *(_QWORD *)(v55 + 80);
              v64 = v49 - v63;
              if (__OFSUB__(v49, v63))
                goto LABEL_186;
              if (__OFADD__(v64, 1))
                goto LABEL_187;
              if (v64 + 1 < 1)
              {
                v58 = 2;
                goto LABEL_45;
              }
              if ((_DWORD)v58 != 3)
              {
                v65 = *(_QWORD *)(v55 + 104);
                v60 = __OFSUB__(v64, v65);
                v61 = v64 - v65;
                if (v60)
                  goto LABEL_191;
                if (__OFADD__(v61, 1))
                  goto LABEL_192;
                if (v61 + 1 < 1)
                {
                  v58 = 3;
                  v49 = v64;
                  goto LABEL_45;
                }
                if ((_DWORD)v58 != 4)
                {
                  v66 = 4;
                  if (v58 > 4)
                    v66 = *(unsigned __int16 *)(v55 + 16);
                  v67 = (_QWORD *)(v55 + 128);
                  v68 = 4;
                  while (1)
                  {
                    if (v66 == v68)
                      goto LABEL_182;
                    v49 = v61 - *v67;
                    if (__OFSUB__(v61, *v67))
                      goto LABEL_183;
                    if (__OFADD__(v49, 1))
                      goto LABEL_184;
                    if (v49 + 1 < 1)
                      break;
                    ++v68;
                    v67 += 3;
                    v61 = v49;
                    if (v58 == v68)
                      goto LABEL_44;
                  }
                  v58 = v68;
                  v49 = v61;
                  goto LABEL_45;
                }
LABEL_43:
                v49 = v61;
                goto LABEL_44;
              }
              v49 -= v63;
            }
LABEL_44:
            if (v49)
            {
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
              goto LABEL_171;
            }
LABEL_45:
            v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
            v54 = ((-15 << v56) - 1) & v54 | (v58 << v56);
            v57 = *(_QWORD *)(v55 + 24 + 24 * v58);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v55 = v57;
            if (!*(_BYTE *)(v57 + 18))
              goto LABEL_83;
          }
        }
        swift_unknownObjectRetain_n();
        result = swift_retain();
        v57 = v44;
LABEL_83:
        v69 = *(unsigned __int16 *)(v57 + 16);
        v48 = v57;
        if (*(_WORD *)(v57 + 16))
        {
          v70 = v49 - 1;
          if (__OFSUB__(v49, 1))
          {
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
          if (__OFADD__(v70, 1))
          {
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
            goto LABEL_193;
          }
          v45 = v53;
          if (v49 <= 0)
          {
            v69 = 0;
            v46 = v144;
          }
          else
          {
            v46 = v144;
            if ((_DWORD)v69 == 1)
              goto LABEL_113;
            v60 = __OFSUB__(v70, 1);
            v70 = v49 - 2;
            if (v60)
            {
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
              goto LABEL_198;
            }
            if (__OFADD__(v70, 1))
              goto LABEL_194;
            if (v49 - 1 < 1)
            {
              v69 = 1;
            }
            else
            {
              if ((_DWORD)v69 == 2)
                goto LABEL_113;
              v60 = __OFSUB__(v70, 1);
              v70 = v49 - 3;
              if (v60)
                goto LABEL_197;
              if (__OFADD__(v70, 1))
              {
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
                goto LABEL_200;
              }
              if (v49 - 2 < 1)
              {
                v69 = 2;
              }
              else
              {
                if ((_DWORD)v69 == 3)
                  goto LABEL_113;
                v60 = __OFSUB__(v70, 1);
                v70 = v49 - 4;
                if (v60)
                  goto LABEL_199;
                if (__OFADD__(v70, 1))
                {
LABEL_200:
                  __break(1u);
                  return result;
                }
                if (v49 - 3 < 1)
                {
                  v69 = 3;
                }
                else
                {
                  if ((_DWORD)v69 == 4)
                    goto LABEL_113;
                  v71 = 0;
                  v72 = 4;
                  if (v69 > 4)
                    v72 = v69;
                  v73 = v72 - 4;
                  if (v70 >= v69 - 5)
                    v74 = v69 - 5;
                  else
                    v74 = v49 - 4;
                  if (v74 >= v49 + 0x7FFFFFFFFFFFFFFCLL)
                    v74 = v49 + 0x7FFFFFFFFFFFFFFCLL;
                  while (1)
                  {
                    if (v73 <= v74)
                      goto LABEL_195;
                    if (v49 + 0x7FFFFFFFFFFFFFFCLL == v71)
                      goto LABEL_196;
                    if (v70 == v71)
                      break;
                    if (v69 - 4 == ++v71)
                    {
                      v70 -= v71;
                      goto LABEL_113;
                    }
                  }
                  v69 = v49;
                }
              }
            }
          }
        }
        else
        {
          v70 = v49;
          v45 = v53;
          v46 = v144;
LABEL_113:
          if (v70)
          {
LABEL_188:
            __break(1u);
            goto LABEL_189;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v50 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
        v49 = v148;
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        v50 = specialized Rope._endPath.getter(v44);
        result = swift_unknownObjectRelease();
        v48 = 0;
        if (!v44)
        {
          v47 = v46;
          goto LABEL_122;
        }
      }
      swift_unknownObjectRetain();
      v47 = v46;
      v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v46, v50, v48, v44, v138, v45);
      result = swift_unknownObjectRelease_n();
      goto LABEL_123;
    }
    v49 = v148;
    if (v147 != 2)
    {
      v51 = v145 >> 11;
      swift_unknownObjectRetain();
      result = swift_retain();
      v50 = (unint64_t)v141;
      goto LABEL_123;
    }
    v50 = (unint64_t)v141;
    if (v44)
    {
      swift_retain();
      swift_unknownObjectRetain();
      result = specialized Rope._Node.distanceFromStart<A>(to:in:)(countAndFlagsBits, (unint64_t)v141, v142, v44, v138, v45);
      v51 = result;
      goto LABEL_123;
    }
    result = swift_retain();
LABEL_122:
    v51 = 0;
LABEL_123:
    v160._countAndFlagsBits = v47;
    v160._object = (void *)v50;
    *(_QWORD *)&v161 = v48;
    v60 = __OFADD__(v49, 1);
    v75 = v49 + 1;
    if (v60)
    {
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    if (v47 != v46)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (v48)
    {
      v76 = *(_QWORD *)(v48 + 24 * ((v50 >> ((4 * *(_BYTE *)(v48 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v77 = v138;
    }
    else
    {
      swift_unknownObjectRetain();
      v78 = v50;
      v77 = v138;
      v76 = specialized Rope._Node.subscript.getter(v78, v44);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v60 = __OFADD__(v51, v76);
    v79 = v51 + v76;
    if (v60)
      goto LABEL_177;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v160, v44, v77, v137, v46);
    swift_unknownObjectRelease_n();
    countAndFlagsBits = v160._countAndFlagsBits;
    v141 = v160._object;
    v80 = v161;
    if (v147 != 2)
    {
      v86 = v132[1];
      v192 = *v132;
      v193 = v86;
      v194 = v132[2];
      BigString.utf8.getter();
      result = v145;
      if (!__OFSUB__(v79, v145 >> 11))
      {
        v82 = BigString.UTF8View.index(_:offsetBy:)();
        v139 = v88;
        v140 = v87;
        v147 = v89;
        outlined release of Locale((uint64_t)v177);
        swift_release();
        goto LABEL_133;
      }
      goto LABEL_181;
    }
    v81 = v132[1];
    v195 = *v132;
    v196 = v81;
    v197 = v132[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v82 = BigString.UTF8View.index(_:offsetBy:)();
    v139 = v84;
    v140 = v83;
    v147 = v85;
    outlined release of Locale((uint64_t)v178);
    swift_release();
LABEL_133:
    v142 = v80;
    v146 = v82;
    v149 = v75;
    v90 = a1[2];
    v189 = a1[1];
    v190 = v90;
    v191 = a1[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v179);
    v91 = MEMORY[0x186DA46DC](v180);
    v93 = v92;
    v94 = v174 & 0xFFFFFFFFFFFFLL;
    if ((v175 & 0x2000000000000000) != 0)
      v94 = HIBYTE(v175) & 0xF;
    if (v94)
    {
      v95._countAndFlagsBits = 10;
      v95._object = (void *)0xE100000000000000;
      String.append(_:)(v95);
    }
    v158._countAndFlagsBits = v91;
    v158._object = v93;
    v96._countAndFlagsBits = 32;
    v96._object = (void *)0xE100000000000000;
    String.append(_:)(v96);
    v157._countAndFlagsBits = 0;
    v157._object = (void *)0xE000000000000000;
    v97 = v28 + 64;
    v98 = 1 << *(_BYTE *)(v28 + 32);
    if (v98 < 64)
      v99 = ~(-1 << v98);
    else
      v99 = -1;
    v100 = v99 & *(_QWORD *)(v28 + 64);
    v101 = (unint64_t)(v98 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    v102 = 0;
    while (1)
    {
      if (v100)
      {
        v103 = __clz(__rbit64(v100));
        v100 &= v100 - 1;
        v104 = v103 | (v102 << 6);
        goto LABEL_142;
      }
      v113 = v102 + 1;
      if (__OFADD__(v102, 1))
      {
        __break(1u);
        goto LABEL_167;
      }
      if (v113 >= v101)
        break;
      v114 = *(_QWORD *)(v97 + 8 * v113);
      ++v102;
      if (!v114)
      {
        v102 = v113 + 1;
        if (v113 + 1 >= v101)
          break;
        v114 = *(_QWORD *)(v97 + 8 * v102);
        if (!v114)
        {
          v102 = v113 + 2;
          if (v113 + 2 >= v101)
            break;
          v114 = *(_QWORD *)(v97 + 8 * v102);
          if (!v114)
          {
            v102 = v113 + 3;
            if (v113 + 3 >= v101)
              break;
            v114 = *(_QWORD *)(v97 + 8 * v102);
            if (!v114)
            {
              v102 = v113 + 4;
              if (v113 + 4 >= v101)
                break;
              v114 = *(_QWORD *)(v97 + 8 * v102);
              if (!v114)
              {
                v102 = v113 + 5;
                if (v113 + 5 >= v101)
                  break;
                v114 = *(_QWORD *)(v97 + 8 * v102);
                if (!v114)
                {
                  v115 = v113 + 6;
                  if (v115 >= v101)
                    break;
                  v114 = *(_QWORD *)(v97 + 8 * v115);
                  if (!v114)
                  {
                    while (1)
                    {
                      v102 = v115 + 1;
                      if (__OFADD__(v115, 1))
                        goto LABEL_185;
                      if (v102 >= v101)
                        goto LABEL_4;
                      v114 = *(_QWORD *)(v97 + 8 * v102);
                      ++v115;
                      if (v114)
                        goto LABEL_163;
                    }
                  }
                  v102 = v115;
                }
              }
            }
          }
        }
      }
LABEL_163:
      v100 = (v114 - 1) & v114;
      v104 = __clz(__rbit64(v114)) + (v102 << 6);
LABEL_142:
      v105 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v104);
      v107 = *v105;
      v106 = (void *)v105[1];
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v28 + 56) + 72 * v104, (uint64_t)&v161);
      v160._countAndFlagsBits = v107;
      v160._object = v106;
      v153 = v162;
      v154 = v163;
      v155 = *(_OWORD *)v164;
      v156 = *(_QWORD *)&v164[16];
      v151 = v160;
      v152 = v161;
      v108 = v160;
      swift_bridgeObjectRetain();
      String.append(_:)(v108);
      v109._countAndFlagsBits = 2112800;
      v109._object = (void *)0xE300000000000000;
      String.append(_:)(v109);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v152, (uint64_t)v159);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v110._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      v111._countAndFlagsBits = 10;
      v111._object = (void *)0xE100000000000000;
      String.append(_:)(v111);
      v112._countAndFlagsBits = 9;
      v112._object = (void *)0xE100000000000000;
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      result = outlined destroy of Any?((uint64_t)&v151, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v160._countAndFlagsBits = 2683;
    v160._object = (void *)0xE200000000000000;
    String.append(_:)(v157);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v158);
    v11 = (uint64_t)v150;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v12 = v116;
    v10 = v117;
    v20 = v149;
    v15 = v146;
    if (v149 != v116)
      continue;
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v212);
  v13 = v174;
LABEL_165:
  swift_release();
  swift_release();
  return v13;
}

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::UInt v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104[8];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118[48];
  char v119;
  char v120;
  char v121[112];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[12];
  __int128 v135[3];
  _BYTE v136[40];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  v3 = *(_QWORD *)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v122 = *(_OWORD *)(v1 + 8);
  v123 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v124 = *(_OWORD *)(v1 + 40);
  v125 = v5;
  outlined retain of AttributedString.Runs(v1);
  v6 = swift_retain();
  AttributedString.Runs.init(_:in:)(v6, &v137);
  v7 = *((_QWORD *)&v137 + 1);
  v8 = *((_QWORD *)&v141 + 1);
  result = *((_QWORD *)&v141 + 1) - *((_QWORD *)&v137 + 1);
  if (__OFSUB__(*((_QWORD *)&v141 + 1), *((_QWORD *)&v137 + 1)))
    goto LABEL_140;
  v78 = v1;
  v93 = *((_QWORD *)&v138 + 1);
  v94 = v138;
  v11 = *((_QWORD *)&v139 + 1);
  v10 = v139;
  v13 = *((_QWORD *)&v140 + 1);
  v12 = v140;
  v96 = v141;
  Hasher._combine(_:)(result);
  if (v7 == v8)
    goto LABEL_116;
  v86 = *((_QWORD *)&v146 + 1);
  v87 = v146;
  v84 = *((_QWORD *)&v145 + 1);
  v85 = v147;
  v82 = *((_QWORD *)&v147 + 1) >> 11;
  v83 = *((_QWORD *)&v145 + 1) >> 10;
  v95 = (_QWORD *)v137;
  v91 = (_OWORD *)(v137 + 16);
  v79 = (__int128 *)(v3 + 16);
  result = outlined retain of AttributedString.Runs((uint64_t)&v137);
  v80 = v8;
  v81 = a1;
  do
  {
    if (v7 >= v8)
    {
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    v115 = v147;
    v116 = v148;
    v117 = v149;
    v111 = v143;
    v112 = v144;
    v113 = v145;
    v114 = v146;
    v107 = v139;
    v108 = v140;
    v109 = v141;
    v110 = v142;
    v105 = v137;
    v106 = v138;
    v104[0] = v7;
    v104[1] = v94;
    v104[2] = v93;
    v104[3] = v10;
    v104[4] = v11;
    v104[5] = v12;
    v104[6] = v13;
    v104[7] = v96;
    result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v104, &v97);
    if (v97 != v95[11])
      goto LABEL_121;
    v88 = v11;
    v22 = v7;
    v23 = v98;
    v25 = v100;
    v24 = v101;
    v26 = v102;
    v27 = v103;
    if (v99)
    {
      v28 = (_QWORD *)(v99 + 24 * ((v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF));
      v29 = v28[3];
      v30 = v28[4];
      v31 = v28[5];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      v90 = v30;
      swift_bridgeObjectRetain();
      v89 = v31;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v32 = v95[8];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      swift_unknownObjectRetain();
      v29 = specialized Rope._Node.subscript.getter(v23, v32);
      v89 = v34;
      v90 = v33;
      result = swift_unknownObjectRelease();
    }
    if (v83 >= v25 >> 10)
      v35 = v84;
    else
      v35 = v25;
    if (v83 >= v25 >> 10)
    {
      v24 = v87;
      v26 = v86;
      v27 = v85;
    }
    if (__OFADD__(v29, v25 >> 11))
      goto LABEL_122;
    if (v82 >= (uint64_t)(v29 + (v25 >> 11)))
      v36 = v29 + (v25 >> 11);
    else
      v36 = v82;
    v37 = v91[1];
    v134[9] = *v91;
    v134[10] = v37;
    v134[11] = v91[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v36, v35 >> 11))
      goto LABEL_123;
    v38 = BigString.UTF8View.index(_:offsetBy:)();
    v40 = v39;
    v42 = v41;
    v44 = v43;
    result = outlined release of Locale((uint64_t)v118);
    if (v38 >> 10 < v35 >> 10)
      goto LABEL_124;
    v126 = v35;
    v127 = v24;
    v128 = v26;
    v129 = v27;
    v130 = v38;
    v131 = v40;
    v132 = v42;
    v133 = v44;
    v45 = v94;
    v46 = v95[8];
    v47 = v95[9];
    v48 = v95[11];
    v92 = v95[10];
    if (v10 == 1 || v94 != v48)
    {
      if (v46)
        v52 = v95[9];
      else
        v52 = 0;
      if (v22 < 0)
        goto LABEL_133;
      v49 = v22;
      if (v52 < v22)
        goto LABEL_133;
      if (!v46 || v22 >= v47 || !*(_WORD *)(v46 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        v66 = swift_unknownObjectRetain();
        v50 = specialized Rope._endPath.getter(v66);
        result = swift_unknownObjectRelease();
        v10 = 0;
        if (!v46)
        {
          v51 = 0;
          goto LABEL_105;
        }
LABEL_67:
        swift_unknownObjectRetain();
        v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v48, v50, v10, v46, v47, v92);
        result = swift_unknownObjectRelease_n();
LABEL_105:
        v45 = v48;
        goto LABEL_106;
      }
      v53 = *(unsigned __int8 *)(v46 + 18);
      if (*(_BYTE *)(v46 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        result = swift_unknownObjectRetain();
        v54 = v22;
        v55 = v46;
        while (1)
        {
          v57 = *(unsigned __int16 *)(v55 + 16);
          if (*(_WORD *)(v55 + 16))
          {
            v58 = *(_QWORD *)(v55 + 32);
            v59 = __OFSUB__(v54, v58);
            v60 = v54 - v58;
            if (v59)
              goto LABEL_118;
            if (__OFADD__(v60, 1))
              goto LABEL_119;
            if (v60 + 1 <= 0)
            {
              v57 = 0;
              goto LABEL_39;
            }
            if ((_DWORD)v57 != 1)
            {
              v61 = *(_QWORD *)(v55 + 56);
              v54 = v60 - v61;
              if (__OFSUB__(v60, v61))
                goto LABEL_131;
              if (__OFADD__(v54, 1))
                goto LABEL_132;
              if (v54 + 1 < 1)
              {
                v57 = 1;
                v54 = v60;
                goto LABEL_39;
              }
              if ((_DWORD)v57 == 2)
                goto LABEL_38;
              v62 = *(_QWORD *)(v55 + 80);
              v59 = __OFSUB__(v54, v62);
              v60 = v54 - v62;
              if (v59)
                goto LABEL_135;
              if (__OFADD__(v60, 1))
                goto LABEL_136;
              if (v60 + 1 < 1)
              {
                v57 = 2;
                goto LABEL_39;
              }
              if ((_DWORD)v57 != 3)
              {
                v63 = 3;
                if (v57 > 3)
                  v63 = *(unsigned __int16 *)(v55 + 16);
                v64 = (_QWORD *)(v55 + 104);
                v65 = 3;
                while (v63 != v65)
                {
                  v54 = v60 - *v64;
                  if (__OFSUB__(v60, *v64))
                    goto LABEL_129;
                  if (__OFADD__(v54, 1))
                    goto LABEL_130;
                  if (v54 + 1 < 1)
                  {
                    v57 = v65;
                    v54 = v60;
                    goto LABEL_39;
                  }
                  ++v65;
                  v64 += 3;
                  v60 = v54;
                  if (v57 == v65)
                    goto LABEL_38;
                }
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
            }
            v54 = v60;
          }
LABEL_38:
          if (v54)
          {
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
LABEL_39:
          v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
          v53 = ((-15 << v56) - 1) & v53 | (v57 << v56);
          v10 = *(_QWORD *)(v55 + 24 + 24 * v57);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v55 = v10;
          if (!*(_BYTE *)(v10 + 18))
            goto LABEL_71;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      result = swift_unknownObjectRetain();
      v54 = v22;
      v10 = v46;
LABEL_71:
      v67 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16))
      {
        v68 = v54;
        goto LABEL_97;
      }
      v68 = v54 - 1;
      if (__OFSUB__(v54, 1))
        goto LABEL_138;
      if (!__OFADD__(v68, 1))
      {
        if (v54 <= 0)
        {
          v67 = 0;
          goto LABEL_103;
        }
        if ((_DWORD)v67 != 1)
        {
          v59 = __OFSUB__(v68, 1);
          v68 = v54 - 2;
          if (v59)
            goto LABEL_143;
          if (__OFADD__(v68, 1))
            goto LABEL_144;
          if (v54 - 1 < 1)
          {
            v67 = 1;
            goto LABEL_103;
          }
          if ((_DWORD)v67 != 2)
          {
            v59 = __OFSUB__(v68, 1);
            v68 = v54 - 3;
            if (v59)
              goto LABEL_145;
            if (__OFADD__(v68, 1))
              goto LABEL_146;
            if (v54 - 2 >= 1)
            {
              if ((_DWORD)v67 != 3)
              {
                v69 = 0;
                v70 = 3;
                if (v67 > 3)
                  v70 = *(unsigned __int16 *)(v10 + 16);
                v71 = v70 - 3;
                if (v68 >= v67 - 4)
                  v72 = v67 - 4;
                else
                  v72 = v54 - 3;
                if (v72 >= v54 + 0x7FFFFFFFFFFFFFFDLL)
                  v72 = v54 + 0x7FFFFFFFFFFFFFFDLL;
                while (v71 > v72)
                {
                  if (v54 + 0x7FFFFFFFFFFFFFFDLL == v69)
                    goto LABEL_142;
                  if (v68 == v69)
                  {
                    v67 = v54;
                    goto LABEL_103;
                  }
                  if (v67 - 3 == ++v69)
                  {
                    v68 -= v69;
                    goto LABEL_97;
                  }
                }
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
                return result;
              }
              goto LABEL_97;
            }
            v67 = 2;
LABEL_103:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v50 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
            goto LABEL_67;
          }
        }
LABEL_97:
        if (v68)
          goto LABEL_137;
        goto LABEL_103;
      }
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    v49 = v22;
    if (v96 == 2)
    {
      v50 = v93;
      if (v46)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v94, v93, v10, v46, v47, v92);
        v51 = result;
      }
      else
      {
        result = swift_retain();
        v51 = 0;
      }
    }
    else
    {
      v51 = v88 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      result = swift_unknownObjectRetain();
      v50 = v93;
    }
LABEL_106:
    *(_QWORD *)&v105 = v45;
    *((_QWORD *)&v105 + 1) = v50;
    *(_QWORD *)&v106 = v10;
    v59 = __OFADD__(v49, 1);
    v7 = v49 + 1;
    if (v59)
      goto LABEL_125;
    if (v45 != v48)
      goto LABEL_126;
    if (v10)
    {
      v73 = *(_QWORD *)(v10 + 24 * ((v50 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74 = v92;
    }
    else
    {
      swift_unknownObjectRetain();
      v75 = v50;
      v74 = v92;
      v73 = specialized Rope._Node.subscript.getter(v75, v46);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v76 = v51 + v73;
    if (__OFADD__(v51, v73))
      goto LABEL_127;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v105, v46, v47, v74, v48);
    swift_unknownObjectRelease_n();
    v93 = *((_QWORD *)&v105 + 1);
    v94 = v105;
    v10 = v106;
    if (v96 == 2)
    {
      v14 = v91[1];
      v134[6] = *v91;
      v134[7] = v14;
      v134[8] = v91[2];
      v15 = &v120;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v77 = v91[1];
      v134[3] = *v91;
      v134[4] = v77;
      v134[5] = v91[2];
      BigString.utf8.getter();
      result = v88;
      if (__OFSUB__(v76, v88 >> 11))
        goto LABEL_134;
      v15 = &v119;
    }
    v11 = BigString.UTF8View.index(_:offsetBy:)();
    v12 = v16;
    v13 = v17;
    v96 = v18;
    outlined release of Locale((uint64_t)v15);
    outlined release of AttributedString.Runs((uint64_t)&v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v81, v90);
    specialized Set.hash(into:)(v81, v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = *v79;
    v20 = v79[2];
    v134[1] = v79[1];
    v134[2] = v20;
    v134[0] = v19;
    v21 = *v79;
    v135[1] = v79[1];
    v135[2] = v20;
    v135[0] = v21;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v135, (uint64_t)v136);
    outlined retain of Locale((uint64_t)v136);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v134);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined release of Locale((uint64_t)v121);
    v8 = v80;
  }
  while (v7 != v80);
  outlined release of AttributedString.Runs((uint64_t)&v137);
LABEL_116:
  outlined release of AttributedString.Runs((uint64_t)&v137);
  return outlined release of AttributedString.Runs(v78);
}

Swift::UInt specialized AttributedStringProtocol.hash(into:)(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[8];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122[48];
  char v123;
  char v124;
  char v125[112];
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156[3];
  _BYTE v157[40];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;

  v4 = a2[2];
  v153 = a2[1];
  v154 = v4;
  v155 = a2[3];
  v145 = BigString.startIndex.getter();
  v146 = v5;
  v147 = v6;
  v148 = v7;
  v149 = BigString.endIndex.getter();
  v150 = v8;
  v151 = v9;
  v152 = v10;
  v11 = swift_retain_n();
  AttributedString.Runs.init(_:in:)(v11, &v158);
  v12 = *((_QWORD *)&v158 + 1);
  v13 = *((_QWORD *)&v162 + 1);
  result = *((_QWORD *)&v162 + 1) - *((_QWORD *)&v158 + 1);
  if (__OFSUB__(*((_QWORD *)&v162 + 1), *((_QWORD *)&v158 + 1)))
    goto LABEL_141;
  v15 = *((_QWORD *)&v159 + 1);
  v17 = *((_QWORD *)&v160 + 1);
  v16 = v160;
  v19 = *((_QWORD *)&v161 + 1);
  v18 = v161;
  v99 = v159;
  v100 = v162;
  Hasher._combine(_:)(result);
  if (v12 == v13)
    goto LABEL_117;
  v96 = v17;
  v82 = a2 + 1;
  v89 = *((_QWORD *)&v167 + 1);
  v90 = v167;
  v20 = (_QWORD *)v158;
  v87 = *((_QWORD *)&v166 + 1);
  v88 = v168;
  v85 = *((_QWORD *)&v168 + 1) >> 11;
  v86 = *((_QWORD *)&v166 + 1) >> 10;
  v94 = (__int128 *)(v158 + 16);
  result = outlined retain of AttributedString.Runs((uint64_t)&v158);
  v91 = v20;
  v83 = v13;
  v84 = a1;
  do
  {
    if (v12 >= v13)
    {
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    v119 = v168;
    v120 = v169;
    v121 = v170;
    v115 = v164;
    v116 = v165;
    v117 = v166;
    v118 = v167;
    v111 = v160;
    v112 = v161;
    v113 = v162;
    v114 = v163;
    v109 = v158;
    v110 = v159;
    v108[0] = v12;
    v108[1] = v99;
    v108[2] = v15;
    v108[3] = v16;
    v108[4] = v96;
    v108[5] = v18;
    v108[6] = v19;
    v108[7] = v100;
    result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v108, &v101);
    if (v101 != v20[11])
      goto LABEL_122;
    v97 = v15;
    v27 = v12;
    v28 = v102;
    v30 = v104;
    v29 = v105;
    v31 = v106;
    v32 = v107;
    if (v103)
    {
      v33 = (_QWORD *)(v103 + 24 * ((v102 >> ((4 * *(_BYTE *)(v103 + 18) + 8) & 0x3C)) & 0xF));
      v34 = v33[3];
      v35 = v33[4];
      v36 = v33[5];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_bridgeObjectRetain();
      v93 = v36;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v37 = v20[8];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_unknownObjectRetain();
      v34 = specialized Rope._Node.subscript.getter(v28, v37);
      v35 = v38;
      v93 = v39;
      result = swift_unknownObjectRelease();
    }
    if (v86 >= v30 >> 10)
      v40 = v87;
    else
      v40 = v30;
    if (v86 >= v30 >> 10)
    {
      v29 = v90;
      v31 = v89;
      v32 = v88;
    }
    if (__OFADD__(v34, v30 >> 11))
      goto LABEL_123;
    v92 = v35;
    if (v85 >= (uint64_t)(v34 + (v30 >> 11)))
      v41 = v34 + (v30 >> 11);
    else
      v41 = v85;
    v42 = v94[1];
    v142 = *v94;
    v143 = v42;
    v144 = v94[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v41, v40 >> 11))
      goto LABEL_124;
    v43 = BigString.UTF8View.index(_:offsetBy:)();
    v45 = v44;
    v47 = v46;
    v49 = v48;
    result = outlined release of Locale((uint64_t)v122);
    if (v43 >> 10 < v40 >> 10)
      goto LABEL_125;
    v126 = v40;
    v127 = v29;
    v128 = v31;
    v129 = v32;
    v130 = v43;
    v131 = v45;
    v132 = v47;
    v133 = v49;
    v20 = v91;
    v50 = v91[8];
    v51 = v91[9];
    v53 = v91[10];
    v52 = v91[11];
    v95 = v53;
    if (v16 == 1 || v99 != v52)
    {
      if (v50)
        v58 = v91[9];
      else
        v58 = 0;
      if (v27 < 0)
        goto LABEL_134;
      v54 = v27;
      if (v58 < v27)
        goto LABEL_134;
      if (!v50 || v27 >= v51 || !*(_WORD *)(v50 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        v72 = swift_unknownObjectRetain();
        v55 = specialized Rope._endPath.getter(v72);
        result = swift_unknownObjectRelease();
        v16 = 0;
        if (!v50)
        {
          v56 = 0;
          goto LABEL_106;
        }
LABEL_68:
        swift_unknownObjectRetain();
        v56 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v52, v55, v16, v50, v51, v53);
        result = swift_unknownObjectRelease_n();
LABEL_106:
        v57 = v52;
        goto LABEL_107;
      }
      v59 = *(unsigned __int8 *)(v50 + 18);
      if (*(_BYTE *)(v50 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        result = swift_unknownObjectRetain();
        v60 = v27;
        v61 = v50;
        while (1)
        {
          v63 = *(unsigned __int16 *)(v61 + 16);
          if (*(_WORD *)(v61 + 16))
          {
            v64 = *(_QWORD *)(v61 + 32);
            v65 = __OFSUB__(v60, v64);
            v66 = v60 - v64;
            if (v65)
              goto LABEL_119;
            if (__OFADD__(v66, 1))
              goto LABEL_120;
            if (v66 + 1 <= 0)
            {
              v63 = 0;
              goto LABEL_40;
            }
            if ((_DWORD)v63 != 1)
            {
              v67 = *(_QWORD *)(v61 + 56);
              v60 = v66 - v67;
              if (__OFSUB__(v66, v67))
                goto LABEL_132;
              if (__OFADD__(v60, 1))
                goto LABEL_133;
              if (v60 + 1 < 1)
              {
                v63 = 1;
                v60 = v66;
                goto LABEL_40;
              }
              if ((_DWORD)v63 == 2)
                goto LABEL_39;
              v68 = *(_QWORD *)(v61 + 80);
              v65 = __OFSUB__(v60, v68);
              v66 = v60 - v68;
              if (v65)
                goto LABEL_136;
              if (__OFADD__(v66, 1))
                goto LABEL_137;
              if (v66 + 1 < 1)
              {
                v63 = 2;
                goto LABEL_40;
              }
              if ((_DWORD)v63 != 3)
              {
                v69 = 3;
                if (v63 > 3)
                  v69 = *(unsigned __int16 *)(v61 + 16);
                v70 = (_QWORD *)(v61 + 104);
                v71 = 3;
                while (v69 != v71)
                {
                  v60 = v66 - *v70;
                  if (__OFSUB__(v66, *v70))
                    goto LABEL_130;
                  if (__OFADD__(v60, 1))
                    goto LABEL_131;
                  if (v60 + 1 < 1)
                  {
                    v63 = v71;
                    v60 = v66;
                    goto LABEL_40;
                  }
                  ++v71;
                  v70 += 3;
                  v66 = v60;
                  if (v63 == v71)
                    goto LABEL_39;
                }
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
            }
            v60 = v66;
          }
LABEL_39:
          if (v60)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
LABEL_40:
          v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          v59 = ((-15 << v62) - 1) & v59 | (v63 << v62);
          v16 = *(_QWORD *)(v61 + 24 + 24 * v63);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v61 = v16;
          if (!*(_BYTE *)(v16 + 18))
            goto LABEL_72;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      result = swift_unknownObjectRetain();
      v60 = v27;
      v16 = v50;
LABEL_72:
      v73 = *(unsigned __int16 *)(v16 + 16);
      if (!*(_WORD *)(v16 + 16))
      {
        v74 = v60;
        goto LABEL_98;
      }
      v74 = v60 - 1;
      if (__OFSUB__(v60, 1))
        goto LABEL_139;
      if (!__OFADD__(v74, 1))
      {
        if (v60 <= 0)
        {
          v73 = 0;
          goto LABEL_104;
        }
        if ((_DWORD)v73 != 1)
        {
          v65 = __OFSUB__(v74, 1);
          v74 = v60 - 2;
          if (v65)
            goto LABEL_144;
          if (__OFADD__(v74, 1))
            goto LABEL_145;
          if (v60 - 1 < 1)
          {
            v73 = 1;
            goto LABEL_104;
          }
          if ((_DWORD)v73 != 2)
          {
            v65 = __OFSUB__(v74, 1);
            v74 = v60 - 3;
            if (v65)
              goto LABEL_146;
            if (__OFADD__(v74, 1))
              goto LABEL_147;
            if (v60 - 2 >= 1)
            {
              if ((_DWORD)v73 != 3)
              {
                v75 = 0;
                v76 = 3;
                if (v73 > 3)
                  v76 = *(unsigned __int16 *)(v16 + 16);
                v77 = v76 - 3;
                if (v74 >= v73 - 4)
                  v78 = v73 - 4;
                else
                  v78 = v60 - 3;
                if (v78 >= v60 + 0x7FFFFFFFFFFFFFFDLL)
                  v78 = v60 + 0x7FFFFFFFFFFFFFFDLL;
                while (v77 > v78)
                {
                  if (v60 + 0x7FFFFFFFFFFFFFFDLL == v75)
                    goto LABEL_143;
                  if (v74 == v75)
                  {
                    v73 = v60;
                    goto LABEL_104;
                  }
                  if (v73 - 3 == ++v75)
                  {
                    v74 -= v75;
                    goto LABEL_98;
                  }
                }
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
                return result;
              }
              goto LABEL_98;
            }
            v73 = 2;
LABEL_104:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v55 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
            v20 = v91;
            goto LABEL_68;
          }
        }
LABEL_98:
        if (v74)
          goto LABEL_138;
        goto LABEL_104;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }
    v54 = v27;
    if (v100 == 2)
    {
      v55 = v97;
      if (v50)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v99, v97, v16, v50, v51, v53);
        v56 = result;
      }
      else
      {
        result = swift_retain();
        v56 = 0;
      }
      v57 = v99;
    }
    else
    {
      v56 = v96 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      result = swift_unknownObjectRetain();
      v55 = v97;
      v57 = v99;
    }
LABEL_107:
    *(_QWORD *)&v109 = v57;
    *((_QWORD *)&v109 + 1) = v55;
    *(_QWORD *)&v110 = v16;
    v65 = __OFADD__(v54, 1);
    v12 = v54 + 1;
    if (v65)
      goto LABEL_126;
    if (v57 != v52)
      goto LABEL_127;
    if (v16)
    {
      v79 = *(_QWORD *)(v16 + 24 * ((v55 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v79 = specialized Rope._Node.subscript.getter(v55, v50);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v80 = v56 + v79;
    if (__OFADD__(v56, v79))
      goto LABEL_128;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v109, v50, v51, v95, v52);
    swift_unknownObjectRelease_n();
    v98 = *((_QWORD *)&v109 + 1);
    v99 = v109;
    v16 = v110;
    if (v100 == 2)
    {
      v21 = v94[1];
      v139 = *v94;
      v140 = v21;
      v141 = v94[2];
      v22 = &v124;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v81 = v94[1];
      v136 = *v94;
      v137 = v81;
      v138 = v94[2];
      BigString.utf8.getter();
      result = v96;
      if (__OFSUB__(v80, v96 >> 11))
        goto LABEL_135;
      v22 = &v123;
    }
    v96 = BigString.UTF8View.index(_:offsetBy:)();
    v18 = v23;
    v19 = v24;
    v100 = v25;
    outlined release of Locale((uint64_t)v22);
    outlined release of AttributedString.Runs((uint64_t)&v158);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v84, v92);
    specialized Set.hash(into:)(v84, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v82[1];
    v134[0] = *v82;
    v134[1] = v26;
    v135 = v82[2];
    v156[0] = v134[0];
    v156[1] = v26;
    v156[2] = v135;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
    outlined retain of Locale((uint64_t)v157);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v134);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined release of Locale((uint64_t)v125);
    v13 = v83;
    v15 = v98;
  }
  while (v12 != v83);
  outlined release of AttributedString.Runs((uint64_t)&v158);
LABEL_117:
  outlined release of AttributedString.Runs((uint64_t)&v158);
  return swift_release();
}

BOOL static AttributedString.Index.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

uint64_t AttributedString.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  _BYTE v20[48];
  _OWORD v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 3);
  v22 = *(_OWORD *)(a1 + 1);
  v19 = v22;
  v23 = v4;
  v5 = *(_OWORD *)(a1 + 7);
  v24 = *(_OWORD *)(a1 + 5);
  v18 = v24;
  v25 = v5;
  v6 = *(_OWORD *)(v3 + 32);
  v26 = *(_OWORD *)(v3 + 16);
  v27 = v6;
  v28 = *(_OWORD *)(v3 + 48);
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v20);
  swift_release();
  BigString.init(_:)();
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 80);
  swift_unknownObjectRetain();
  v10 = specialized Rope.extract<A>(from:to:in:)(v19 >> 11, v18 >> 11, v7, v8, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for AttributedString.Guts();
  swift_allocObject();
  result = AttributedString.Guts.init(string:runs:)(v21, v10, v12, v14, v16);
  *a2 = result;
  return result;
}

uint64_t AttributedString.init<A>(_:attributes:)@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, ValueMetadata *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11[3];

  v7 = *a2;
  v8 = a2[1];
  static AttributedString._bstring<A>(from:)(a1, a3, v11);
  AttributedString.init(_:attributes:)(v11, v7, v8, &v10);
  result = (*((uint64_t (**)(_OWORD *, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  *a4 = v10;
  return result;
}

uint64_t static AttributedString._bstring<A>(from:)@<X0>(_OWORD *a1@<X0>, ValueMetadata *a2@<X1>, _OWORD *a3@<X8>)
{
  void (**Description)(char *, _OWORD *, ValueMetadata *);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[10];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];

  Description = (void (**)(char *, _OWORD *, ValueMetadata *))a2[-1].Description;
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 == MEMORY[0x1E0DEA968])
  {
    swift_bridgeObjectRetain();
    result = BigString.init(_:)();
  }
  else if (a2 == (ValueMetadata *)MEMORY[0x1E0DEBAF0])
  {
    swift_bridgeObjectRetain();
    result = BigString.init(_:)();
  }
  else
  {
    if (a2 == &type metadata for AttributedString.CharacterView)
    {
      v14 = *(_QWORD *)a1;
      v15 = *(_OWORD *)(*(_QWORD *)a1 + 32);
      v30 = *(_OWORD *)(*(_QWORD *)a1 + 16);
      v31 = v15;
      v16 = *(_OWORD *)((char *)a1 + 8);
      v32 = *(_OWORD *)(v14 + 48);
      v33 = v16;
      v17 = *(_OWORD *)((char *)a1 + 40);
      v34 = *(_OWORD *)((char *)a1 + 24);
      v35 = v17;
      v36 = *(_OWORD *)((char *)a1 + 56);
      swift_unknownObjectRetain();
      result = BigString.init(_:)();
      v11 = v40;
      v12 = v41;
      v13 = v42;
      goto LABEL_9;
    }
    if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) == a2)
    {
      v18 = a1[3];
      v32 = a1[2];
      v33 = v18;
      v19 = a1[8];
      v20 = a1[6];
      v37 = a1[7];
      v38 = v19;
      v21 = a1[5];
      v34 = a1[4];
      v35 = v21;
      v36 = v20;
      v22 = a1[1];
      v30 = *a1;
      v31 = v22;
      v47 = v30;
      v48 = v22;
      v49 = v32;
      v50 = v33;
      v23 = (_OWORD *)v34;
      v24 = *(_OWORD *)(v34 + 16);
      v25 = *(_OWORD *)(v34 + 48);
      v51[1] = *(_OWORD *)(v34 + 32);
      v51[2] = v25;
      v51[0] = v24;
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined retain of Locale((uint64_t)v51);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v51);
      outlined release of Locale((uint64_t)v39);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      v26 = v23[2];
      v40 = v23[1];
      v41 = v26;
      v42 = v23[3];
      v43 = v39[3];
      v44 = v39[4];
      v45 = v39[5];
      v46 = v39[6];
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      BigString.init(_:)();
      v28 = v39[8];
      v29 = v39[7];
      v27 = v39[9];
      result = outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v30);
      v13 = v27;
      v12 = v28;
      v11 = v29;
      goto LABEL_9;
    }
    Description[2](v8, a1, a2);
    result = BigString.init<A>(_:)();
  }
  v11 = v30;
  v12 = v31;
  v13 = v32;
LABEL_9:
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  return result;
}

uint64_t AttributedString.init<A, B>(_:including:)@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X2>, ValueMetadata *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  void (**Description)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  Description = (void (**)(char *, uint64_t, uint64_t, __n128))a3[-1].Description;
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Description[2](v15, a1, v16, v13);
  AttributedString.init<A, B>(_:including:)((uint64_t)v15, a2, a3, a4, a5, &v19);
  swift_release();
  result = ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a1, a3);
  *a6 = v19;
  return result;
}

{
  __int128 v12;
  _OWORD *v13;
  void *v14;
  __int128 v15;
  int64_t v16;
  uint64_t result;
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];

  AttributedStringProtocol.__guts.getter(a3, a5);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v20, a3, a5);
  v18 = v20;
  v12 = v21;
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v19, a3, a5);
  v23[0] = v18;
  v23[1] = v12;
  v23[2] = v19[0];
  v23[3] = v19[1];
  v13 = AttributedString.Guts.copy(in:)((unint64_t *)v23);
  swift_retain_n();
  v14 = static AttributeScope.scopeDescription.getter(a2, a4);
  swift_bridgeObjectRelease();
  v15 = v13[2];
  v20 = v13[1];
  v21 = v15;
  v22 = v13[3];
  BigString.utf8.getter();
  v16 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v19);
  result = swift_release();
  if (v16 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v13, 0, v16, (uint64_t)v14);
    swift_release();
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
    result = swift_bridgeObjectRelease();
    *a6 = v13;
  }
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance AttributedString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4[3];

  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v4, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], &v3);
  *a1 = v3;
  return result;
}

uint64_t closure #2 in AttributedString.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _OWORD v28[4];
  uint64_t v29;

  v11 = a4 + 64;
  v12 = 1 << *(_BYTE *)(a4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a4 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    v23 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v23 >= v15)
      goto LABEL_23;
    v24 = *(_QWORD *)(v11 + 8 * v23);
    ++v17;
    if (!v24)
    {
      v17 = v23 + 1;
      if (v23 + 1 >= v15)
        goto LABEL_23;
      v24 = *(_QWORD *)(v11 + 8 * v17);
      if (!v24)
      {
        v17 = v23 + 2;
        if (v23 + 2 >= v15)
          goto LABEL_23;
        v24 = *(_QWORD *)(v11 + 8 * v17);
        if (!v24)
        {
          v17 = v23 + 3;
          if (v23 + 3 >= v15)
            goto LABEL_23;
          v24 = *(_QWORD *)(v11 + 8 * v17);
          if (!v24)
            break;
        }
      }
    }
LABEL_22:
    v14 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_5:
    v20 = (unint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v19);
    v21 = *v20;
    v22 = v20[1];
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v21, v22);
    result = swift_bridgeObjectRelease();
  }
  v25 = v23 + 4;
  if (v25 < v15)
  {
    v24 = *(_QWORD *)(v11 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        v17 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_27;
        if (v17 >= v15)
          goto LABEL_23;
        v24 = *(_QWORD *)(v11 + 8 * v17);
        ++v25;
        if (v24)
          goto LABEL_22;
      }
    }
    v17 = v25;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  LOBYTE(v28[0]) = 0;
  result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v28);
  if ((a8 & 1) != 0)
    return Array<A>._extend(with:)(a2, a3);
  return result;
}

BOOL static AttributedString.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >> 10 >= *a1 >> 10;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >> 10 >= *a2 >> 10;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >> 10 < *a1 >> 10;
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  _QWORD v21[8];
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v7 = *v3;
  v8 = *(_OWORD *)(*v3 + 32);
  v22 = *(_OWORD *)(*v3 + 16);
  v23 = v8;
  v24 = *(_OWORD *)(v7 + 48);
  v21[0] = BigString.startIndex.getter();
  v21[1] = v9;
  v21[2] = v10;
  v21[3] = v11;
  v21[4] = BigString.endIndex.getter();
  v21[5] = v12;
  v21[6] = v13;
  v21[7] = v14;
  AttributedString.Guts.getUniformValue<A>(in:key:)(v21, a1, a2, (uint64_t)v19);
  if (v20)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v19, (uint64_t)&v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v19);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v17 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
}

void (*AttributedString.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;

  v5 = v4;
  v10 = (char *)malloc(0x120uLL);
  *a1 = v10;
  *((_QWORD *)v10 + 30) = a4;
  *((_QWORD *)v10 + 31) = v5;
  *((_QWORD *)v10 + 28) = a2;
  *((_QWORD *)v10 + 29) = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  *((_QWORD *)v10 + 32) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *((_QWORD *)v10 + 33) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *((_QWORD *)v10 + 34) = malloc(v13);
  v14 = malloc(v13);
  *((_QWORD *)v10 + 35) = v14;
  v15 = (_OWORD *)*v5;
  v17 = v15[1];
  v16 = v15[2];
  *(_OWORD *)(v10 + 168) = v15[3];
  *(_OWORD *)(v10 + 136) = v17;
  *(_OWORD *)(v10 + 152) = v16;
  v18 = BigString.startIndex.getter();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = BigString.endIndex.getter();
  *((_QWORD *)v10 + 9) = v18;
  *((_QWORD *)v10 + 10) = v20;
  *((_QWORD *)v10 + 11) = v22;
  *((_QWORD *)v10 + 12) = v24;
  *((_QWORD *)v10 + 13) = v25;
  *((_QWORD *)v10 + 14) = v26;
  *((_QWORD *)v10 + 15) = v27;
  *((_QWORD *)v10 + 16) = v28;
  AttributedString.Guts.getUniformValue<A>(in:key:)((_QWORD *)v10 + 9, a3, a4, (uint64_t)v10);
  if (*((_QWORD *)v10 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v10, (uint64_t)(v10 + 184));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v10);
    v29 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v29 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v14, v29, 1);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)(*a1)[34];
  v4 = (void *)(*a1)[35];
  if ((a2 & 1) != 0)
  {
    v5 = v2[32];
    v6 = v2[33];
    v7 = v2[30];
    v8 = v2[29];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[34], v4, v5);
    AttributedString.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    AttributedString.subscript.setter((*a1)[35], a2, v2[29], v2[30]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  v5 = *a1;
  swift_retain();
  AttributedString.subscript.getter(v5, v4, a3);
  return swift_release();
}

void (*AttributedString.subscript.modify(_QWORD *a1, _QWORD *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;

  v4 = v3;
  v8 = (char *)malloc(0x120uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 28) = a3;
  *((_QWORD *)v8 + 29) = v4;
  v9 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  *((_QWORD *)v8 + 30) = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  *((_QWORD *)v8 + 31) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *((_QWORD *)v8 + 32) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 33) = malloc(v12);
  *((_QWORD *)v8 + 34) = malloc(v12);
  v13 = malloc(v12);
  *((_QWORD *)v8 + 35) = v13;
  v14 = (_OWORD *)*v4;
  v16 = v14[1];
  v15 = v14[2];
  *(_OWORD *)(v8 + 168) = v14[3];
  *(_OWORD *)(v8 + 136) = v16;
  *(_OWORD *)(v8 + 152) = v15;
  v17 = BigString.startIndex.getter();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = BigString.endIndex.getter();
  *((_QWORD *)v8 + 9) = v17;
  *((_QWORD *)v8 + 10) = v19;
  *((_QWORD *)v8 + 11) = v21;
  *((_QWORD *)v8 + 12) = v23;
  *((_QWORD *)v8 + 13) = v24;
  *((_QWORD *)v8 + 14) = v25;
  *((_QWORD *)v8 + 15) = v26;
  *((_QWORD *)v8 + 16) = v27;
  AttributedString.Guts.getUniformValue<A>(in:key:)((_QWORD *)v8 + 9, v9, a3, (uint64_t)v8);
  if (*((_QWORD *)v8 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v8, (uint64_t)(v8 + 184));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v8);
    v28 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v28 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, v28, 1);
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, uint64_t);
  uint64_t v14;

  v3 = *a1;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[32] + 16);
  v4((*a1)[34], v3[35], v3[31]);
  v6 = (void *)v3[34];
  v7 = (void *)v3[35];
  v8 = (void *)v3[33];
  v14 = v3[32];
  v10 = v3[30];
  v9 = v3[31];
  v11 = v3[28];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v8, (uint64_t)v6, v3[31]);
    AttributedString.subscript.setter((uint64_t)v8, v12, v10, v11);
    v13 = *(void (**)(void *, uint64_t))(v14 + 8);
    v13(v6, v9);
  }
  else
  {
    AttributedString.subscript.setter((uint64_t)v6, v5, v3[30], v3[28]);
    v13 = *(void (**)(void *, uint64_t))(v14 + 8);
  }
  v13(v7, v9);
  free(v7);
  free(v6);
  free(v8);
  free(v3);
}

_QWORD *AttributedString.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *v1;
  v4 = *(_OWORD *)(*v1 + 32);
  v14 = *(_OWORD *)(*v1 + 16);
  v15 = v4;
  v16 = *(_OWORD *)(v3 + 48);
  v13[0] = BigString.startIndex.getter();
  v13[1] = v5;
  v13[2] = v6;
  v13[3] = v7;
  v13[4] = BigString.endIndex.getter();
  v13[5] = v8;
  v13[6] = v9;
  v13[7] = v10;
  result = AttributedString.Guts.getUniformValues(in:)(v13);
  *a1 = result;
  a1[1] = v12;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

double key path getter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  swift_retain();
  AttributedString.subscript.getter(v4);
  swift_release();
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(dynamicMember:) : <A>AttributedStringA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  _QWORD *v12;
  _QWORD v14[4];

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = AttributedString.subscript.modify(v14, v10, v4, v5);
  *v12 = v6;
  v12[1] = v7;
  v12[2] = v9;
  v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(_QWORD *, _QWORD))v11)(v14, 0);
}

void (*AttributedString.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = v4;
  v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD **)v5;
    v12 = *(_OWORD *)(*(_QWORD *)v5 + 32);
    v11 = *(_OWORD *)(*(_QWORD *)v5 + 48);
    *(_OWORD *)v9 = *(_OWORD *)(*(_QWORD *)v5 + 16);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    v13 = v10[8];
    v14 = v10[9];
    v15 = v10[10];
    v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(_QWORD *)v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }
  v9[6] = MEMORY[0x1E0DEE9E0];
  v17 = v9 + 6;
  v18 = MEMORY[0x1E0DEE9E8];
  v17[2] = 0;
  v17[3] = 0;
  v17[1] = v18;
  return AttributedString.subscript.modify;
}

void AttributedString.subscript.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  $defer #1 <A>() in AttributedString.subscript.modify((uint64_t *)(*(_QWORD *)a1 + 48), *(uint64_t **)(*(_QWORD *)a1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t $defer #1 <A>() in AttributedString.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  _OWORD *v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE v19[48];
  _BYTE v20[48];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = a1[3];
  if (v2)
  {
    v18 = a1[2];
    v3 = (_OWORD *)*a2;
    v4 = *(_OWORD *)(*a2 + 32);
    v24 = *(_OWORD *)(*a2 + 16);
    v25 = v4;
    v26 = v3[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    v6 = v3[2];
    v21 = v3[1];
    v22 = v6;
    v23 = v3[3];
    BigString.unicodeScalars.getter();
    v7 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v18, v2, v5 >> 11, v7 >> 11, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v9 = *a2;
    v10 = *a1;
    v11 = *(_OWORD *)(*a2 + 32);
    v24 = *(_OWORD *)(*a2 + 16);
    v25 = v11;
    v26 = *(_OWORD *)(v9 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    v13 = *(_OWORD *)(v9 + 32);
    v21 = *(_OWORD *)(v9 + 16);
    v22 = v13;
    v23 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    v15 = v14 >> 11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((_QWORD *)v9, v12 >> 11, v14 >> 11, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v10) & 1) != 0)
    {
      v16 = swift_bridgeObjectRetain();
      v17 = specialized Sequence.compactMap<A>(_:)(v16);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v12 >> 11, v15, 0, v17);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t AttributedString.subscript.setter(uint64_t *a1)
{
  specialized AttributedString.subscript.setter(a1);
  return swift_release();
}

Swift::Int AttributedString.hashValue.getter()
{
  _OWORD **v0;
  _OWORD *v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = AttributedString.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  specialized AttributedString.subscript.setter(a1, a3, a4);
  swift_release();
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedString.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedString(uint64_t *a1)
{
  specialized AttributedString.subscript.setter(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString()
{
  _OWORD **v0;
  _OWORD *v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedString(uint64_t a1)
{
  _OWORD **v1;

  return specialized AttributedStringProtocol.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString()
{
  _OWORD **v0;
  _OWORD *v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString()
{
  _OWORD **v0;

  return specialized AttributedStringProtocol.description.getter(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString(_OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[7];
  _OWORD v19[3];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 16);
    v8 = *(_OWORD *)(*v2 + 48);
    v19[1] = *(_OWORD *)(*v2 + 32);
    v19[2] = v8;
    v19[0] = v7;
    v9 = v6[8];
    v10 = v6[9];
    v11 = v6[10];
    v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v19);
    swift_unknownObjectRetain();
    *v3 = AttributedString.Guts.init(string:runs:)(v19, v9, v10, v11, v12);
    swift_release();
  }
  v13 = (_OWORD *)*v3;
  v14 = v13[2];
  v18[4] = v13[1];
  v18[5] = v14;
  v18[6] = v13[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v15 = a1[1];
  v18[0] = *a1;
  v18[1] = v15;
  v16 = a1[3];
  v18[2] = a1[2];
  v18[3] = v16;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v18, a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    v6 = *(_OWORD *)(*v2 + 48);
    v26[1] = *(_OWORD *)(*v2 + 32);
    v26[2] = v6;
    v26[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v26);
    swift_unknownObjectRetain();
    *v3 = AttributedString.Guts.init(string:runs:)(v26, v7, v8, v9, v10);
    swift_release();
  }
  v11 = *v3;
  v12 = *(_OWORD *)(*v3 + 32);
  v23 = *(_OWORD *)(*v3 + 16);
  v24 = v12;
  v25 = *(_OWORD *)(v11 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v17 = v13;
  v18 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v16[0] = v19;
  v16[1] = v20;
  v16[2] = v21;
  v16[3] = v22;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v16, a2);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[7];
  _OWORD v19[3];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 16);
    v8 = *(_OWORD *)(*v2 + 48);
    v19[1] = *(_OWORD *)(*v2 + 32);
    v19[2] = v8;
    v19[0] = v7;
    v9 = v6[8];
    v10 = v6[9];
    v11 = v6[10];
    v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v19);
    swift_unknownObjectRetain();
    *v3 = AttributedString.Guts.init(string:runs:)(v19, v9, v10, v11, v12);
    swift_release();
  }
  v13 = (_OWORD *)*v3;
  v14 = v13[2];
  v18[4] = v13[1];
  v18[5] = v14;
  v18[6] = v13[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v15 = a1[1];
  v18[0] = *a1;
  v18[1] = v15;
  v16 = a1[3];
  v18[2] = a1[2];
  v18[3] = v16;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v18, a2);
}

uint64_t AttributedString.insert<A>(_:at:)(uint64_t a1, _QWORD *a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)&v8 = *a2;
  *((_QWORD *)&v8 + 1) = v4;
  v9 = v5;
  v10 = v6;
  v11 = v8;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v8, a1, a3, a4);
}

uint64_t AttributedString.removeSubrange<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  BigString.init()();
  v6 = 0;
  MEMORY[0x186DA9E90](&v6, 8);
  v2 = v6;
  type metadata accessor for AttributedString.Guts();
  inited = swift_initStackObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v5 = v8;
    *(_OWORD *)(inited + 16) = v7;
    *(_OWORD *)(inited + 32) = v5;
    *(_OWORD *)(inited + 48) = v9;
    *(_QWORD *)(inited + 64) = 0;
    *(_QWORD *)(inited + 72) = 0;
    *(_QWORD *)(inited + 80) = 0;
    *(_QWORD *)(inited + 88) = v2;
    specialized AttributedString.replaceSubrange<A, B>(_:with:)(a1, (_OWORD *)inited);
    swift_setDeallocating();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AttributedString.+ infix<A>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v8 = (_OWORD *)*a1;
  *a5 = *a1;
  v9 = v8[2];
  v21 = v8[1];
  v22 = v9;
  v23 = v8[3];
  *(_QWORD *)&v14 = BigString.endIndex.getter();
  *((_QWORD *)&v14 + 1) = v10;
  v15 = v11;
  v16 = v12;
  v17 = v14;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  swift_retain();
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v14, a2, a3, a4);
}

uint64_t static AttributedString.+= infix<A>(_:_:)(uint64_t *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v7 = *a1;
  v8 = *(_OWORD *)(*a1 + 32);
  v20 = *(_OWORD *)(*a1 + 16);
  v21 = v8;
  v22 = *(_OWORD *)(v7 + 48);
  *(_QWORD *)&v13 = BigString.endIndex.getter();
  *((_QWORD *)&v13 + 1) = v9;
  v14 = v10;
  v15 = v11;
  v16 = v13;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v13, a2, a3, a4);
}

uint64_t static AttributedString.+= infix(_:_:)(uint64_t *a1, _OWORD **a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *a2;
  v3 = *a1;
  v4 = *(_OWORD *)(*a1 + 32);
  v16 = *(_OWORD *)(*a1 + 16);
  v17 = v4;
  v18 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)&v9 = BigString.endIndex.getter();
  *((_QWORD *)&v9 + 1) = v5;
  v10 = v6;
  v11 = v7;
  v12 = v9;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v9, v2);
}

double key path getter for AttributedString.subscript<A>(_:) : <A>AttributedStringA@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  AttributedString.subscript.getter((uint64_t)&v4);
  v2 = v9;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 72) = v2;
  return result;
}

uint64_t key path setter for AttributedString.subscript<A>(_:) : <A>AttributedStringA(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[9];
  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  v5 = *(_OWORD *)(a1 + 3);
  v6 = *(_OWORD *)(a1 + 5);
  v7 = *(_OWORD *)(a1 + 7);
  v8 = v1;
  swift_retain();
  return specialized AttributedString.subscript.setter((__int128 *)&v3);
}

uint64_t AttributedString.subscript.setter(__int128 *a1, uint64_t a2, uint64_t a3)
{
  specialized AttributedString.subscript.setter(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

unsigned __int16 *specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(unsigned __int16 *result, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v8 = a2;
  v9 = result;
  v10 = *result;
  v11 = a3;
  if (!*result)
    goto LABEL_15;
  v12 = a2[2];
  v13 = a3 - v12;
  if (__OFSUB__(a3, v12))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (__OFADD__(v13, 1))
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v13 + 1 < 1)
  {
    v10 = 0;
    v13 = a3;
    v14 = __OFSUB__(a4, a3);
    v15 = a4 - a3;
    if (v14)
      goto LABEL_33;
  }
  else
  {
    if ((_DWORD)v10 == 1)
    {
      v11 = a3 - v12;
LABEL_15:
      if (!v11)
      {
        v13 = 0;
        v14 = __OFSUB__(a4, a3);
        v15 = a4 - a3;
        if (!v14)
          goto LABEL_17;
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v16 = a2 + 5;
    v17 = 1;
    while (1)
    {
      v18 = *v16;
      v16 += 3;
      v11 = v13 - v18;
      if (__OFSUB__(v13, v18))
      {
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      if (__OFADD__(v11, 1))
        goto LABEL_50;
      if (v11 + 1 < 1)
        break;
      ++v17;
      v13 = v11;
      if (v10 == v17)
        goto LABEL_15;
    }
    v10 = v17;
    v14 = __OFSUB__(a4, a3);
    v15 = a4 - a3;
    if (v14)
      goto LABEL_33;
  }
LABEL_17:
  result = (unsigned __int16 *)specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v10, v13, v15, 1, result, (uint64_t)a2);
  v5 = v19;
  v20 = &v8[3 * v10];
  if ((unsigned __int16 *)v10 == result)
  {
    v21 = v19 < v13 || v8[3 * v10 + 2] < v19;
    if (!v21 && (v13 & 0x8000000000000000) == 0)
    {
      if (v13 != v19)
      {
        v22 = *v20;
        v23 = *(unsigned __int8 *)(*v20 + 18);
        v24 = *v20 + 24;
        swift_unknownObjectRetain();
        v25 = v22 + 16;
        v26 = (_QWORD *)v24;
        v27 = v13;
        if (!v23)
        {
LABEL_25:
          specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
          return (unsigned __int16 *)swift_unknownObjectRelease();
        }
LABEL_46:
        specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
        return (unsigned __int16 *)swift_unknownObjectRelease();
      }
      return result;
    }
    goto LABEL_54;
  }
  if (v13 < 0)
    goto LABEL_55;
  v28 = v8[3 * v10 + 2];
  if (v28 < v13)
    goto LABEL_55;
  v6 = result;
  if (v13 != v28)
  {
    v29 = *v20;
    v30 = *(unsigned __int8 *)(*v20 + 18);
    v31 = *v20 + 24;
    swift_unknownObjectRetain();
    result = (unsigned __int16 *)(v29 + 16);
    a2 = (_QWORD *)v31;
    v15 = v13;
    a4 = v28;
    v9 = a5;
    if (v30)
    {
      specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(result, v31, v13, v28, a5);
LABEL_35:
      result = (unsigned __int16 *)swift_unknownObjectRelease();
      goto LABEL_36;
    }
LABEL_34:
    specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)result, a2, v15, a4, v9);
    goto LABEL_35;
  }
LABEL_36:
  v32 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if ((uint64_t)v6 < v32)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if ((unsigned __int16 *)v32 != v6)
  {
    if (v32 >= (uint64_t)v6)
    {
LABEL_59:
      __break(1u);
      return result;
    }
    v33 = &v8[3 * v10 + 5];
    v34 = (char *)v6 + ~v10;
    do
    {
      v35 = *(v33 - 1);
      v36 = *v33;
      v33 += 3;
      v37 = swift_unknownObjectRetain();
      result = (unsigned __int16 *)specialized Rope.Builder._insertBeforeTip(_:)(v37, v35, v36);
      --v34;
    }
    while (v34);
  }
  if (v5 < 0 || (v38 = &v8[3 * (_QWORD)v6], v38[2] < v5))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v5)
  {
    v39 = *v38;
    v40 = *(unsigned __int8 *)(*v38 + 18);
    v41 = *v38 + 24;
    swift_unknownObjectRetain();
    v25 = v39 + 16;
    v26 = (_QWORD *)v41;
    v27 = 0;
    if (!v40)
      goto LABEL_25;
    goto LABEL_46;
  }
  return result;
}

uint64_t partial apply for closure #1 in AttributedString.replaceAttributes(_:with:)(uint64_t a1)
{
  uint64_t v1;

  return specialized AttributedString._AttributeStorage.matches(_:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in AttributedString.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in AttributedString.replaceAttributes(_:with:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));
}

uint64_t specialized AttributedString.subscript.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[4];
  _OWORD v16[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = (_QWORD *)*v1;
    v8 = *(_OWORD *)(*v1 + 16);
    v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    v16[2] = v9;
    v16[0] = v8;
    v10 = v7[8];
    v14 = v7[9];
    v11 = v7[10];
    v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  $defer #1 <A>() in AttributedString.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.subscript.setter(__int128 *a1)
{
  uint64_t *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[4];
  _OWORD v9[9];

  v2 = a1[4];
  v3 = a1[2];
  v9[3] = a1[3];
  v9[4] = v2;
  v4 = *a1;
  v9[1] = a1[1];
  v9[2] = v3;
  v9[0] = v4;
  v5 = *v1;
  v6 = *(_OWORD *)(*v1 + 32);
  v9[5] = *(_OWORD *)(*v1 + 16);
  v9[6] = v6;
  v9[7] = *(_OWORD *)(v5 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v8, (uint64_t)v9);
  return outlined release of AttributedString.Runs((uint64_t)v9);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in AttributedString()
{
  return MEMORY[0x1E0DEA9F0];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in AttributedString()
{
  return MEMORY[0x1E0DEAA00];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in AttributedString()
{
  return MEMORY[0x1E0DEA9F8];
}

uint64_t sub_181B7AE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedString.subscript.setter(a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_181B7AE74()
{
  return 16;
}

__n128 sub_181B7AE80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181B7AE94()
{
  return 16;
}

__n128 sub_181B7AEA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181B7AEB4()
{
  return 16;
}

__n128 sub_181B7AEC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t destroy for Calendar.DatesByRecurring()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Calendar.DatesByRecurring(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring()
{
  return &type metadata for Calendar.DatesByRecurring;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByRecurring.Iterator, &type metadata for Calendar.DatesByRecurring.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring.Iterator and conformance Calendar.DatesByRecurring.Iterator);
  }
  return result;
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_10Foundation8IndexSetVABsAG_pAJRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = v3;
  result = swift_allocObject();
  v9 = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v10 == v9)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }
    if (v9 >= *(_QWORD *)(a1 + 16))
      break;
    v12 = *(_QWORD *)(a1 + 8 * v9++ + 32);
    if (v12 >= a2 && v12 < a3)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v15 = v4;
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v14 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      if (v14 >= v13 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v11 + 16) = v14 + 1;
      *(_QWORD *)(v11 + 8 * v14 + 32) = v12;
      v4 = v15;
    }
  }
  __break(1u);
  return result;
}

BOOL specialized Range.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 >= a2 && a1 < a3;
}

void Calendar.DatesByRecurring.Iterator.init(start:matching:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t *__return_ptr, _BYTE *, double *, uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __src[288];
  uint64_t v21;
  uint64_t v22;
  double __dst[37];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 72);
  v15 = *(double *)a3;
  v16 = *(_BYTE *)(a2 + 18);
  v17 = *(_BYTE *)(a3 + 16);
  v21 = *(_QWORD *)a2;
  v19 = v3;
  v22 = v3;
  v14 = one-time initialization token for cache;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v18 = v4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  v5 = static CalendarCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)__dst);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  LOBYTE(v5) = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)__dst);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) != 0)
  {
    v7 = (os_unfair_lock_s *)static CalendarCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v7 + 15);
    closure #1 in CalendarCache.current.getter(&v21);
    os_unfair_lock_unlock(v7 + 15);
    swift_release_n();
    v8 = v22;
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = v19;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v10 = v15;
    __src[0] = 0x1020A030405uLL >> (8 * v16);
    if (v15 > 1.59271755e13)
      v10 = 1.59271755e13;
    v11 = fmax(v10, -2.11845067e11);
    ObjectType = swift_getObjectType();
    __dst[0] = v11;
    v13 = *(void (**)(uint64_t *__return_ptr, _BYTE *, double *, uint64_t, uint64_t))(v8 + 160);
    swift_unknownObjectRetain();
    v13(&v21, __src, __dst, ObjectType, v8);
    swift_unknownObjectRelease();
  }
  __asm { BR              X9 }
}

Swift::Void __swiftcall Calendar.DatesByRecurring.Iterator.nextGroup()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  Swift::OpaquePointer v54;
  Foundation::Date v55;
  uint64_t v56;
  Swift::Int v57;
  void *v58;
  char v59;
  uint64_t v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *rawValue;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  char v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  _BYTE v131[32];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  Swift::OpaquePointer dates;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  if ((*(_BYTE *)(v0 + 576) & 1) == 0)
  {
    v1 = v0;
    next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
    if ((BYTE8(v138) & 1) != 0)
    {
LABEL_3:
      *(_BYTE *)(v0 + 576) = 1;
      return;
    }
    while (1)
    {
      v2 = *(_QWORD *)(v0 + 568);
      v3 = __OFSUB__(v2, 1);
      v4 = v2 - 1;
      if (v3)
        break;
      v5 = *(_QWORD *)(v0 + 32);
      if (!v5)
        goto LABEL_87;
      if (v4 == 0x8000000000000000 && v5 == -1)
        goto LABEL_88;
      if (!(v4 % v5))
      {
        v7 = v138;
        if ((*(_BYTE *)(v0 + 160) & 1) != 0 || *(double *)&v138 >= *(double *)(v0 + 152))
        {
          v115 = (_BYTE *)(v0 + 576);
          v8 = (__int128 *)(v0 + 8);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
          v9 = swift_allocObject();
          v10 = 0;
          v11 = 0;
          *(_OWORD *)(v9 + 16) = xmmword_18205C850;
          *(_QWORD *)(v9 + 32) = v7;
          dates._rawValue = (void *)v9;
          v12 = *(unsigned __int8 *)(v0 + 176);
          v13 = *(unsigned __int8 *)(v0 + 177);
          v14 = *(unsigned __int8 *)(v0 + 178);
          v15 = *(unsigned __int8 *)(v0 + 179);
          v125 = *(unsigned __int8 *)(v0 + 181);
          v126 = *(unsigned __int8 *)(v0 + 180);
          v123 = *(unsigned __int8 *)(v0 + 183);
          v124 = *(unsigned __int8 *)(v0 + 182);
          v116 = v15;
          v117 = v14;
          do
          {
            v127 = v10;
            v16 = *((unsigned __int8 *)&outlined read-only object #0 of Calendar.DatesByRecurring.Iterator.nextGroup()
                  + v11
                  + 32);
            if ((_DWORD)v12 != 2 && ((v12 & 1) == 0) != v16)
            {
              v17 = *(_BYTE *)(v1 + 24);
              v18 = *(_BYTE *)(v1 + 25);
              v19 = *(_BYTE *)(v1 + 26);
              v20 = *(_BYTE *)(v1 + 48);
              v21 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v17;
              v131[1] = v18;
              v131[2] = v19;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              v118 = *(_QWORD *)&v131[8];
              v131[24] = v20;
              v22 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v22;
              v23 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v23;
              v136 = v21;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              v5 = v118;
            }
            if ((_DWORD)v13 != 2 && (v13 & 1) == 0 && (v16 & 1) == 0)
            {
              v24 = *(_BYTE *)(v1 + 24);
              v25 = *(_BYTE *)(v1 + 25);
              v26 = *(_BYTE *)(v1 + 26);
              v27 = *(_BYTE *)(v1 + 48);
              v28 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v24;
              v131[1] = v25;
              v131[2] = v26;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              v119 = *(_QWORD *)&v131[8];
              v131[24] = v27;
              v29 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v29;
              v30 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v30;
              v136 = v28;
              v128 = v7;
              Calendar.RecurrenceRule._expandWeeks(dates:anchor:)(&dates, (Foundation::Date)v134);
              v5 = v119;
            }
            if (v14 != 2 && ((v14 & 1) == 0) != v16)
            {
              v31 = *(_BYTE *)(v1 + 24);
              v32 = *(_BYTE *)(v1 + 25);
              v33 = *(_BYTE *)(v1 + 26);
              v34 = *(_BYTE *)(v1 + 48);
              v35 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v31;
              v131[1] = v32;
              v131[2] = v33;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              v120 = *(_QWORD *)&v131[8];
              v131[24] = v34;
              v36 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v36;
              v37 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v37;
              v136 = v35;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              v5 = v120;
            }
            if (v15 != 2 && ((v15 & 1) == 0) != v16)
            {
              v38 = *(_BYTE *)(v1 + 24);
              v39 = *(_BYTE *)(v1 + 25);
              v40 = *(_BYTE *)(v1 + 26);
              v41 = *(_BYTE *)(v1 + 48);
              v42 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v38;
              v131[1] = v39;
              v131[2] = v40;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              v121 = *(_QWORD *)&v131[8];
              v131[24] = v41;
              v43 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v43;
              v44 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v44;
              v136 = v42;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(&dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              v5 = v121;
            }
            if (v126 != 2 && ((v126 & 1) == 0) != v16)
            {
              v45 = *(_OWORD *)(v1 + 88);
              v142 = *(_OWORD *)(v1 + 72);
              v143 = v45;
              v144 = *(_OWORD *)(v1 + 104);
              v145 = *(_QWORD *)(v1 + 120);
              v46 = *(_OWORD *)(v1 + 24);
              v138 = *v8;
              v139 = v46;
              v47 = *(_OWORD *)(v1 + 56);
              v140 = *(_OWORD *)(v1 + 40);
              v141 = v47;
              if (BYTE2(v46) == 5)
              {
                if (*(_QWORD *)(v144 + 16))
                  v48 = 2;
                else
                  v48 = 1;
              }
              else
              {
                v48 = 2;
              }
              v49 = v13;
              v50 = v12;
              v5 = *((_QWORD *)&v139 + 1);
              if (v16)
              {
                v51 = *(_OWORD *)(v1 + 88);
                v133 = *(_OWORD *)(v1 + 72);
                v134 = v51;
                v135 = *(_OWORD *)(v1 + 104);
                v136 = *(_QWORD *)(v1 + 120);
                v52 = *(_OWORD *)(v1 + 24);
                v130 = *v8;
                *(_OWORD *)v131 = v52;
                v53 = *(_OWORD *)(v1 + 56);
                *(_OWORD *)&v131[16] = *(_OWORD *)(v1 + 40);
                v132 = v53;
                v54._rawValue = (void *)*((_QWORD *)&v142 + 1);
                v129 = v48;
                v128 = v7;
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                v56 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(v54, (Foundation::Calendar::Component)&v129, v55);
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                v57 = swift_bridgeObjectRetain();
                v58 = (void *)specialized _ArrayProtocol.filter(_:)(v57, v56, &v138);
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v58;
              }
              else
              {
                if ((BYTE2(v46) & 0xFE) == 4)
                  v59 = v48;
                else
                  v59 = 0xA030405u >> (8 * BYTE2(v46));
                outlined retain of Calendar.RecurrenceRule((uint64_t)&v138);
                v60 = swift_bridgeObjectRetain();
                v61 = (void *)specialized Sequence.flatMap<A>(_:)(v60, (uint64_t *)&v138, v48, v59);
                swift_bridgeObjectRelease_n();
                outlined release of Calendar.RecurrenceRule((uint64_t)&v138);
                dates._rawValue = v61;
              }
              v12 = v50;
              v13 = v49;
              v15 = v116;
              v14 = v117;
            }
            if (v125 != 2 && ((v125 & 1) == 0) != v16)
            {
              v62 = *(_BYTE *)(v1 + 24);
              v63 = *(_BYTE *)(v1 + 25);
              v64 = *(_BYTE *)(v1 + 26);
              v65 = *(_BYTE *)(v1 + 48);
              v66 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v62;
              v131[1] = v63;
              v131[2] = v64;
              *(_OWORD *)&v131[8] = *(_OWORD *)(v1 + 32);
              v122 = *(_QWORD *)&v131[8];
              v131[24] = v65;
              v67 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v67;
              v68 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v68;
              v136 = v66;
              v129 = 4;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
              v5 = v122;
            }
            if (v124 != 2 && ((v124 & 1) == 0) != v16)
            {
              v69 = *(_BYTE *)(v1 + 24);
              v70 = *(_BYTE *)(v1 + 25);
              v71 = *(_BYTE *)(v1 + 26);
              v72 = *(_QWORD *)(v1 + 40);
              v73 = *(_BYTE *)(v1 + 48);
              v74 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v69;
              v131[1] = v70;
              v131[2] = v71;
              *(_QWORD *)&v131[8] = v5;
              *(_QWORD *)&v131[16] = v72;
              v131[24] = v73;
              v75 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v75;
              v76 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v76;
              v136 = v74;
              v129 = 5;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
            }
            if (v123 != 2 && ((((v123 & 1) == 0) ^ v16) & 1) != 0)
            {
              v77 = *(_BYTE *)(v1 + 24);
              v78 = *(_BYTE *)(v1 + 25);
              v79 = *(_BYTE *)(v1 + 26);
              v80 = *(_QWORD *)(v1 + 40);
              v81 = *(_BYTE *)(v1 + 48);
              v82 = *(_QWORD *)(v1 + 120);
              v130 = *(_OWORD *)(v1 + 8);
              v131[0] = v77;
              v131[1] = v78;
              v131[2] = v79;
              *(_QWORD *)&v131[8] = v5;
              *(_QWORD *)&v131[16] = v80;
              v131[24] = v81;
              v83 = *(_OWORD *)(v1 + 72);
              v132 = *(_OWORD *)(v1 + 56);
              v133 = v83;
              v84 = *(_OWORD *)(v1 + 104);
              v134 = *(_OWORD *)(v1 + 88);
              v135 = v84;
              v136 = v82;
              v129 = 6;
              v128 = v7;
              Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((Foundation::Calendar::Component)&v129, &dates, (Foundation::Date)v134, (Foundation::ComponentAction)&v128);
            }
            v10 = 1;
            v11 = 1u;
          }
          while ((v127 & 1) == 0);
          v85 = swift_bridgeObjectRetain();
          v86 = (_QWORD *)specialized _ArrayProtocol.filter(_:)(v85, (double *)v1);
          swift_bridgeObjectRelease_n();
          dates._rawValue = v86;
          if (!*(_BYTE *)(v1 + 48))
          {
            v105 = v86[2];
            if (v105)
            {
              v106 = *(double *)(v1 + 40);
              swift_bridgeObjectRetain();
              v107 = 0;
              v108 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              do
              {
                v111 = *(double *)&v86[v107 + 4];
                if (v106 >= v111)
                {
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)&v130 = v108;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108[2] + 1, 1);
                    v108 = (_QWORD *)v130;
                  }
                  v110 = v108[2];
                  v109 = v108[3];
                  if (v110 >= v109 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
                    v108 = (_QWORD *)v130;
                  }
                  v108[2] = v110 + 1;
                  *(double *)&v108[v110 + 4] = v111;
                }
                ++v107;
              }
              while (v105 != v107);
              swift_bridgeObjectRelease_n();
              dates._rawValue = v108;
              if (!v108[2])
              {
                swift_release();
                *v115 = 1;
                return;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              dates._rawValue = (void *)MEMORY[0x1E0DEE9D8];
            }
          }
          specialized MutableCollection<>.sort(by:)(&dates);
          v87 = *(_QWORD *)(v1 + 120);
          v88 = *(_QWORD *)(v87 + 16);
          if (v88)
          {
            *(_QWORD *)&v130 = MEMORY[0x1E0DEE9D8];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88, 0);
            v89 = 0;
            v90 = v130;
            rawValue = dates._rawValue;
            do
            {
              v92 = *(_QWORD *)(v87 + 8 * v89 + 32);
              if (v92 < 0)
                v93 = rawValue[2] + v92;
              else
                v93 = v92 - 1;
              *(_QWORD *)&v130 = v90;
              v95 = *(_QWORD *)(v90 + 16);
              v94 = *(_QWORD *)(v90 + 24);
              if (v95 >= v94 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
                v90 = v130;
              }
              ++v89;
              *(_QWORD *)(v90 + 16) = v95 + 1;
              *(_QWORD *)(v90 + 8 * v95 + 32) = v93;
            }
            while (v88 != v89);
            swift_bridgeObjectRelease();
            v96 = dates._rawValue;
            v97 = specialized _ArrayProtocol.filter(_:)(v90, 0, *((_QWORD *)dates._rawValue + 2));
            v98 = *(_QWORD *)(v97 + 16);
            if (v98)
            {
              *(_QWORD *)&v130 = MEMORY[0x1E0DEE9D8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98, 0);
              v99 = 0;
              v100 = (_QWORD *)v130;
              while (1)
              {
                v101 = *(_QWORD *)(v97 + 8 * v99 + 32);
                if ((v101 & 0x8000000000000000) != 0)
                  goto LABEL_89;
                if (v101 >= v96[2])
                  goto LABEL_90;
                v102 = v96[v101 + 4];
                *(_QWORD *)&v130 = v100;
                v104 = v100[2];
                v103 = v100[3];
                if (v104 >= v103 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
                  v100 = (_QWORD *)v130;
                }
                ++v99;
                v100[2] = v104 + 1;
                v100[v104 + 4] = v102;
                if (v98 == v99)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_83;
                }
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v100 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_83:
            dates._rawValue = v100;
          }
          v113 = swift_bridgeObjectRetain();
          v114 = specialized Sequence.reversed()(v113);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v1 + 600) = v114;
          return;
        }
      }
      next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()(v0, (uint64_t)&v138);
      if ((BYTE8(v138) & 1) != 0)
        goto LABEL_3;
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
  }
  __break(1u);
}

uint64_t next #1 () in Calendar.DatesByRecurring.Iterator.nextGroup()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  double v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  char v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  double v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  _BYTE v24[288];
  id v25;
  __int128 v26;
  double v27;
  _BYTE __dst[288];

  v2 = result;
  if (*(_QWORD *)(result + 568))
  {
    v4 = (unsigned __int8 *)(result + 547);
    v5 = 0.0;
    if ((*(_BYTE *)(result + 560) & 1) != 0)
    {
      v6 = 1;
    }
    else
    {
      v7 = *(_QWORD *)(result + 184);
      v8 = __OFADD__(v7, 1);
      v9 = v7 + 1;
      if (v8)
        goto LABEL_19;
      v10 = *(double *)(result + 208);
      while (1)
      {
        *(_QWORD *)(v2 + 184) = v9;
        v19 = *(_OWORD *)(v2 + 248);
        v25 = *(id *)(v2 + 240);
        memcpy(__dst, (const void *)(v2 + 264), 0x11AuLL);
        memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
        v23 = *(_BYTE *)(v2 + 546);
        v22 = *v4;
        v21 = *(_BYTE *)(v2 + 548);
        v20 = v10;
        v11 = *(_BYTE *)(v2 + 200);
        v17 = *(_QWORD *)(v2 + 192);
        v18 = v11;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v25, v24, &v23, &v22, &v21, &v20, (uint64_t)&v17, (uint64_t)&v26);
        outlined release of DateComponents((uint64_t)__dst);
        result = swift_unknownObjectRelease();
        v12 = *(double *)&v26;
        v13 = BYTE8(v26);
        v10 = v27;
        *(double *)(v2 + 208) = v27;
        if (v13 != 2)
          break;
        v14 = *(_QWORD *)(v2 + 184);
        if (v14 >= *(_QWORD *)(v2 + 552))
        {
          *(_QWORD *)&v19 = *(_QWORD *)(v2 + 240);
          v26 = *(_OWORD *)(v2 + 248);
          memcpy(v24, (const void *)(v2 + 264), 0x11AuLL);
          LOBYTE(v17) = *(_BYTE *)(v2 + 548);
          LOBYTE(v25) = *(_BYTE *)(v2 + 546);
          LOBYTE(v20) = *v4;
          result = _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t *)&v19, (uint64_t *)&v26, v24, (unsigned __int8 *)&v17, (unsigned __int8 *)&v25, (unsigned __int8 *)&v20);
          v6 = 1;
          *(_BYTE *)(v2 + 560) = 1;
          goto LABEL_16;
        }
        v9 = v14 + 1;
      }
      if ((*(_BYTE *)(v2 + 232) & 1) != 0 || *(double *)(v2 + 216) <= v12 && *(double *)(v2 + 224) > v12)
      {
        v6 = 0;
        *(double *)(v2 + 192) = v12;
        *(_BYTE *)(v2 + 200) = 0;
        v5 = v12;
      }
      else
      {
        v6 = 1;
        *(_BYTE *)(v2 + 560) = 1;
      }
    }
  }
  else
  {
    v6 = 0;
    v5 = *(double *)result;
  }
LABEL_16:
  v15 = *(_QWORD *)(v2 + 568);
  v8 = __OFADD__(v15, 1);
  v16 = v15 + 1;
  if (!v8)
  {
    *(_QWORD *)(v2 + 568) = v16;
    *(double *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v6;
    return result;
  }
  __break(1u);
LABEL_19:
  __break(1u);

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  char v3;
  uint64_t v4;
  char v5;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  double v22;
  double v23;
  uint64_t ObjectType;
  void (*v25)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, _QWORD);
  void (*v26)(_QWORD *__return_ptr, char *, double *, uint64_t, _QWORD);
  double v27;
  void *v28;
  uint64_t v29;
  char v30;
  double v31;
  _QWORD __src[36];
  _QWORD v33[2];
  char v34;
  __int128 v35[6];
  __int128 v36;
  uint64_t v37;
  _QWORD __dst[36];
  uint64_t v39;

  v5 = v3;
  v7 = *(double *)action;
  v8 = *(_OWORD *)(v4 + 80);
  v35[4] = *(_OWORD *)(v4 + 64);
  v35[5] = v8;
  v36 = *(_OWORD *)(v4 + 96);
  v37 = *(_QWORD *)(v4 + 112);
  v9 = *(_OWORD *)(v4 + 16);
  v35[0] = *(_OWORD *)v4;
  v35[1] = v9;
  v10 = *(_OWORD *)(v4 + 48);
  v35[2] = *(_OWORD *)(v4 + 32);
  v35[3] = v10;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 1;
  v39 = v36;
  v11 = *(_QWORD *)(v36 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    __dst[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = __dst[0];
    v13 = (_BYTE *)(v36 + 40);
    while (1)
    {
      v14 = *((_QWORD *)v13 - 1);
      v15 = *v13;
      if (v14 <= 0)
      {
        specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)((uint64_t)v33, v35, v7);
        v17 = __OFADD__(v16, v14);
        v14 += v16;
        if (v17)
          break;
      }
      __dst[0] = v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v12 = __dst[0];
      }
      v13 += 16;
      *(_QWORD *)(v12 + 16) = v19 + 1;
      v20 = v12 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v14;
      *(_BYTE *)(v20 + 40) = v15;
      if (!--v11)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v39);
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_9:
  if ((v5 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v35);
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v28 = (void *)specialized _ArrayProtocol.filter(_:)(v29, (uint64_t)v35, v12);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v21 = v35[0];
  __dst[0] = 65660;
  v22 = 1.59271755e13;
  if (v7 <= 1.59271755e13)
    v22 = v7;
  v23 = fmax(v22, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v31 = v23;
  v25 = *(void (**)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, _QWORD))(*((_QWORD *)&v21 + 1) + 192);
  swift_unknownObjectRetain();
  v25(__src, __dst, &v31, ObjectType, *((_QWORD *)&v21 + 1));
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  v30 = 1;
  v31 = v23;
  v26 = *(void (**)(_QWORD *__return_ptr, char *, double *, uint64_t, _QWORD))(*((_QWORD *)&v21 + 1) + 160);
  swift_unknownObjectRetain();
  v26(__src, &v30, &v31, ObjectType, *((_QWORD *)&v21 + 1));
  swift_unknownObjectRelease();
  if ((__src[2] & 1) == 0)
  {
    v27 = *(double *)__src;
    outlined retain of Calendar.RecurrenceRule((uint64_t)v35);
    outlined retain of DateComponents((uint64_t)__dst);
    v28 = specialized Sequence.compactMap<A>(_:)(v12, (uint64_t)__dst, v35, v27);
    outlined release of Calendar.RecurrenceRule((uint64_t)v35);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__dst);
LABEL_15:
    swift_bridgeObjectRelease();
    dates->_rawValue = v28;
    return;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandWeeks(dates:anchor:)(Swift::OpaquePointer *dates, Foundation::Date anchor)
{
  double *v2;
  __int128 *v3;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  __int128 v11;
  uint64_t ObjectType;
  void (*v13)(_QWORD *__return_ptr, double *, _QWORD *, uint64_t, _QWORD);
  double v14;
  double v15;
  uint64_t (*v16)(_QWORD *, double *, _QWORD *, uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  void (*v23)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, _QWORD);
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[23];
  char v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _OWORD v58[6];
  __int128 v59;
  uint64_t v60;
  double v61;
  _OWORD v62[2];

  v5 = *v2;
  v6 = v3[5];
  v58[4] = v3[4];
  v58[5] = v6;
  v59 = v3[6];
  v60 = *((_QWORD *)v3 + 14);
  v7 = v3[1];
  v8 = *v3;
  v58[0] = *v3;
  v58[1] = v7;
  v9 = v3[3];
  v58[2] = v3[2];
  v58[3] = v9;
  LOBYTE(v61) = 1;
  if (v5 > 1.59271755e13)
    v5 = 1.59271755e13;
  v10 = fmax(v5, -2.11845067e11);
  v62[0] = v8;
  v11 = v8;
  ObjectType = swift_getObjectType();
  *(double *)v50 = v10;
  v13 = *(void (**)(_QWORD *__return_ptr, double *, _QWORD *, uint64_t, _QWORD))(*((_QWORD *)&v11 + 1) + 160);
  outlined retain of Locale((uint64_t)v62);
  v13(v53, &v61, v50, ObjectType, *((_QWORD *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  if ((v54 & 1) != 0)
    return;
  v15 = *(double *)v53;
  v14 = *(double *)&v53[1];
  LOBYTE(v50[0]) = 11;
  LOBYTE(v61) = 1;
  *(double *)v53 = v10;
  v16 = *(uint64_t (**)(_QWORD *, double *, _QWORD *, uint64_t, _QWORD))(*((_QWORD *)&v11 + 1) + 144);
  outlined retain of Locale((uint64_t)v62);
  v17 = v16(v50, &v61, v53, ObjectType, *((_QWORD *)&v11 + 1));
  v19 = v18;
  v21 = v20;
  outlined release of Locale((uint64_t)v62);
  if ((v21 & 1) != 0)
    return;
  v57 = 128;
  if (v15 <= 1.59271755e13)
    v22 = v15;
  else
    v22 = 1.59271755e13;
  v50[0] = fmax(v22, -2.11845067e11);
  v23 = *(void (**)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, _QWORD))(*((_QWORD *)&v11 + 1) + 192);
  v23(v53, &v57, (double *)v50, ObjectType, *((_QWORD *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v53);
  if (v56)
    v24 = 0;
  else
    v24 = v55;
  v25 = v14 + v15 + -0.01;
  v52 = 128;
  if (v25 > 1.59271755e13)
    v25 = 1.59271755e13;
  v61 = fmax(v25, -2.11845067e11);
  v23(v50, &v52, &v61, ObjectType, *((_QWORD *)&v11 + 1));
  outlined release of DateComponents((uint64_t)v50);
  if (v51)
    v26 = 0;
  else
    v26 = v50[22];
  v27 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v11 + 1) + 72);
  outlined retain of Locale((uint64_t)v62);
  v28 = v27(ObjectType, *((_QWORD *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  v29 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v11 + 1) + 56);
  outlined retain of Locale((uint64_t)v62);
  v30 = v29(ObjectType, *((_QWORD *)&v11 + 1));
  outlined release of Locale((uint64_t)v62);
  v31 = 7 - v24;
  if (__OFSUB__(7, v24))
    goto LABEL_41;
  v32 = v31 + v30;
  if (__OFADD__(v31, v30))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v33 = 7 - v26;
  if (__OFSUB__(7, v26))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v34 = __OFADD__(v33, v30);
  v35 = v33 + v30;
  if (v34)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v32 < v28)
  {
    v34 = __OFADD__(v17++, 1);
    if (v34)
      goto LABEL_45;
  }
  if (v35 < v28)
  {
    v34 = __OFSUB__(v19--, 1);
    if (!v34)
      goto LABEL_27;
    __break(1u);
  }
  v34 = __OFSUB__(v19, 2);
  v19 -= 2;
  if (v34)
  {
LABEL_46:
    __break(1u);
    return;
  }
LABEL_27:
  v36 = *((_QWORD *)&v59 + 1);
  v61 = *((double *)&v59 + 1);
  v37 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 16);
  v38 = MEMORY[0x1E0DEE9D8];
  if (v37)
  {
    v49 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
    v38 = v49;
    v39 = (uint64_t *)(v36 + 32);
    while (1)
    {
      v41 = *v39++;
      v40 = v41;
      v42 = v41 - 1;
      if (v41 < 1)
      {
        v44 = v40 + 1;
        v43 = v19 + v44;
        if (__OFADD__(v19, v44))
          goto LABEL_40;
      }
      else
      {
        v43 = v42 + v17;
        if (__OFADD__(v42, v17))
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      v46 = *(_QWORD *)(v49 + 16);
      v45 = *(_QWORD *)(v49 + 24);
      if (v46 >= v45 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      *(_QWORD *)(v49 + 16) = v46 + 1;
      *(_QWORD *)(v49 + 8 * v46 + 32) = v43;
      if (!--v37)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v61);
        break;
      }
    }
  }
  outlined retain of Calendar.RecurrenceRule((uint64_t)v58);
  swift_bridgeObjectRetain();
  v47 = swift_bridgeObjectRetain();
  v48 = (void *)specialized Sequence.flatMap<A>(_:)(v47, v58, v38);
  swift_bridgeObjectRelease();
  outlined release of Calendar.RecurrenceRule((uint64_t)v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  dates->_rawValue = v48;
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  char v3;
  uint64_t v4;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t ObjectType;
  void (*v14)(_QWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t);
  void (*v15)(_OWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t);
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Swift::OpaquePointer *v33;
  _OWORD v34[18];
  double v35;
  char v36;
  _QWORD *v37;
  _OWORD __dst[18];
  _QWORD __src[36];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[3];

  v6 = *(double *)action;
  v7 = *(_OWORD *)(v4 + 80);
  v44 = *(_OWORD *)(v4 + 64);
  v45 = v7;
  v46 = *(_OWORD *)(v4 + 96);
  v47 = *(_QWORD *)(v4 + 112);
  v8 = *(_OWORD *)(v4 + 16);
  v40 = *(_OWORD *)v4;
  v41 = v8;
  v9 = *(_OWORD *)(v4 + 48);
  v42 = *(_OWORD *)(v4 + 32);
  v43 = v9;
  if ((v3 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v40);
    v30 = swift_bridgeObjectRetain();
    v31 = (void *)specialized _ArrayProtocol.filter(_:)(v30, (uint64_t)&v40, (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v40);
    swift_bridgeObjectRelease();
LABEL_25:
    dates->_rawValue = v31;
    return;
  }
  v10 = *((_QWORD *)&v40 + 1);
  *(_QWORD *)&__dst[0] = 112;
  v11 = 1.59271755e13;
  if (v6 <= 1.59271755e13)
    v11 = v6;
  v12 = fmax(v11, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)v34 = v12;
  v14 = *(void (**)(_QWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))(v10 + 192);
  swift_unknownObjectRetain();
  v14(__src, __dst, v34, ObjectType, v10);
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  LOBYTE(v48[0]) = 0x1020A030405uLL >> (8 * BYTE2(v41));
  v35 = v12;
  v15 = *(void (**)(_OWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v10 + 160);
  swift_unknownObjectRetain();
  v15(v34, v48, &v35, ObjectType, v10);
  swift_unknownObjectRelease();
  if ((v34[1] & 1) != 0)
    goto LABEL_28;
  v16 = v34[0];
  v35 = 0.0;
  v36 = 1;
  v48[0] = *((_QWORD *)&v45 + 1);
  v17 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 16);
  if (!v17)
  {
LABEL_24:
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v40);
    v32 = swift_bridgeObjectRetain();
    v31 = (void *)specialized Sequence.flatMap<A>(_:)(v32, (uint64_t *)&v37, (uint64_t)&v40, *(double *)&v16, *((double *)&v16 + 1));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v40);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }
  v33 = dates;
  v18 = (uint64_t *)(*((_QWORD *)&v45 + 1) + 32);
  swift_bridgeObjectRetain();
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v21 = *v18++;
    v20 = v21;
    if (v21 >= 1)
    {
      *(_QWORD *)&v34[2] = *(_QWORD *)&__dst[2];
      BYTE8(v34[2]) = BYTE8(__dst[2]);
      *(_QWORD *)&v34[3] = *(_QWORD *)&__dst[3];
      BYTE8(v34[3]) = BYTE8(__dst[3]);
      *(_QWORD *)&v34[4] = *(_QWORD *)&__dst[4];
      BYTE8(v34[4]) = BYTE8(__dst[4]);
      *(_QWORD *)&v34[5] = *(_QWORD *)&__dst[5];
      BYTE8(v34[5]) = BYTE8(__dst[5]);
      if (v20 == 0x7FFFFFFFFFFFFFFFLL)
        v22 = 0;
      else
        v22 = v20;
      *(_QWORD *)&v34[6] = v22;
      BYTE8(v34[6]) = v20 == 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v34[7] = *(_QWORD *)&__dst[7];
      BYTE8(v34[7]) = BYTE8(__dst[7]);
      *(_QWORD *)&v34[8] = *(_QWORD *)&__dst[8];
      BYTE8(v34[8]) = BYTE8(__dst[8]);
      *(_QWORD *)&v34[9] = *(_QWORD *)&__dst[9];
      BYTE8(v34[9]) = BYTE8(__dst[9]);
      *(_QWORD *)&v34[10] = *(_QWORD *)&__dst[10];
      BYTE8(v34[10]) = BYTE8(__dst[10]);
      *(_QWORD *)&v34[11] = *(_QWORD *)&__dst[11];
      BYTE8(v34[11]) = BYTE8(__dst[11]);
      *(_QWORD *)&v34[12] = *(_QWORD *)&__dst[12];
      BYTE8(v34[12]) = BYTE8(__dst[12]);
      *(_QWORD *)&v34[13] = *(_QWORD *)&__dst[13];
      BYTE8(v34[13]) = BYTE8(__dst[13]);
      *(_QWORD *)&v34[14] = *(_QWORD *)&__dst[14];
      BYTE8(v34[14]) = BYTE8(__dst[14]);
      *(_QWORD *)&v34[15] = *(_QWORD *)&__dst[15];
      BYTE8(v34[15]) = BYTE8(__dst[15]);
      BYTE8(v34[16]) = BYTE8(__dst[16]);
      *(_QWORD *)&v34[16] = *(_QWORD *)&__dst[16];
      *(_QWORD *)&v34[17] = *(_QWORD *)&__dst[17];
      WORD4(v34[17]) = WORD4(__dst[17]);
      v34[0] = __dst[0];
      v34[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      goto LABEL_17;
    }
    outlined retain of DateComponents((uint64_t)__dst);
    v23 = specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(&v35, &v40, v6);
    v24 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    v25 = __OFADD__(v24, v20);
    v26 = v24 + v20;
    if (v25)
      goto LABEL_27;
    *(_QWORD *)&v34[2] = *(_QWORD *)&__dst[2];
    BYTE8(v34[2]) = BYTE8(__dst[2]);
    *(_QWORD *)&v34[3] = *(_QWORD *)&__dst[3];
    BYTE8(v34[3]) = BYTE8(__dst[3]);
    *(_QWORD *)&v34[4] = *(_QWORD *)&__dst[4];
    BYTE8(v34[4]) = BYTE8(__dst[4]);
    *(_QWORD *)&v34[5] = *(_QWORD *)&__dst[5];
    BYTE8(v34[5]) = BYTE8(__dst[5]);
    v27 = v26 == 0x7FFFFFFFFFFFFFFFLL;
    if (v26 == 0x7FFFFFFFFFFFFFFFLL)
      v26 = 0;
    *(_QWORD *)&v34[6] = v26;
    BYTE8(v34[6]) = v27;
    *(_QWORD *)&v34[7] = *(_QWORD *)&__dst[7];
    BYTE8(v34[7]) = BYTE8(__dst[7]);
    *(_QWORD *)&v34[8] = *(_QWORD *)&__dst[8];
    BYTE8(v34[8]) = BYTE8(__dst[8]);
    *(_QWORD *)&v34[9] = *(_QWORD *)&__dst[9];
    BYTE8(v34[9]) = BYTE8(__dst[9]);
    *(_QWORD *)&v34[10] = *(_QWORD *)&__dst[10];
    BYTE8(v34[10]) = BYTE8(__dst[10]);
    *(_QWORD *)&v34[11] = *(_QWORD *)&__dst[11];
    BYTE8(v34[11]) = BYTE8(__dst[11]);
    *(_QWORD *)&v34[12] = *(_QWORD *)&__dst[12];
    BYTE8(v34[12]) = BYTE8(__dst[12]);
    *(_QWORD *)&v34[13] = *(_QWORD *)&__dst[13];
    BYTE8(v34[13]) = BYTE8(__dst[13]);
    *(_QWORD *)&v34[14] = *(_QWORD *)&__dst[14];
    BYTE8(v34[14]) = BYTE8(__dst[14]);
    *(_QWORD *)&v34[15] = *(_QWORD *)&__dst[15];
    BYTE8(v34[15]) = BYTE8(__dst[15]);
    BYTE8(v34[16]) = BYTE8(__dst[16]);
    *(_QWORD *)&v34[16] = *(_QWORD *)&__dst[16];
    *(_QWORD *)&v34[17] = *(_QWORD *)&__dst[17];
    WORD4(v34[17]) = WORD4(__dst[17]);
    v34[0] = __dst[0];
    v34[1] = __dst[1];
LABEL_17:
    outlined retain of DateComponents((uint64_t)v34);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    v29 = v19[2];
    v28 = v19[3];
    if (v29 >= v28 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v19);
    v19[2] = v29 + 1;
    memcpy(&v19[36 * v29 + 4], v34, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v34);
    if (!--v17)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v48);
      v37 = v19;
      dates = v33;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  char v3;
  __int128 *v4;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD);
  uint64_t (*v14)(_QWORD *, _QWORD *, _OWORD *, uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void (*v19)(_OWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, _QWORD);
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::OpaquePointer *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD *, char *, _OWORD *, uint64_t, _QWORD);
  int64_t v78;
  _QWORD v79[2];
  _OWORD v80[18];
  char v81;
  _QWORD *v82;
  _OWORD __dst[18];
  _OWORD __src[18];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD v93[2];

  v6 = *(double *)action;
  v7 = v4[5];
  v89 = v4[4];
  v90 = v7;
  v91 = v4[6];
  v92 = *((_QWORD *)v4 + 14);
  v8 = v4[1];
  v85 = *v4;
  v86 = v8;
  v9 = v4[3];
  v87 = v4[2];
  v88 = v9;
  if ((v3 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)&v85);
    v53 = swift_bridgeObjectRetain();
    v54 = (void *)specialized _ArrayProtocol.filter(_:)(v53, (uint64_t)&v85, (uint64_t (*)(uint64_t *, uint64_t))closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:));
    outlined release of Calendar.RecurrenceRule((uint64_t)&v85);
    swift_bridgeObjectRelease();
    dates->_rawValue = v54;
    return;
  }
  v10 = v85;
  *(_QWORD *)&__dst[0] = 120;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v11 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)v80 = v11;
  v13 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD))(*((_QWORD *)&v85 + 1) + 192);
  swift_unknownObjectRetain();
  v13(__src, __dst, v80, ObjectType, *((_QWORD *)&v85 + 1));
  v71 = dates;
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  v82 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (BYTE2(v86) != 5)
  {
    v93[0] = v90;
    v55 = *(_QWORD *)(v90 + 16);
    if (!v55)
    {
LABEL_79:
      outlined retain of Calendar.RecurrenceRule((uint64_t)&v85);
      v69 = swift_bridgeObjectRetain();
      v70 = specialized Sequence.flatMap<A>(_:)(v69, (uint64_t)&v85, (uint64_t *)&v82);
      outlined release of Calendar.RecurrenceRule((uint64_t)&v85);
      outlined release of DateComponents((uint64_t)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v71->_rawValue = (void *)v70;
      return;
    }
    v77 = *(void (**)(_QWORD *, char *, _OWORD *, uint64_t, _QWORD))(*((_QWORD *)&v10 + 1) + 144);
    v56 = (uint64_t *)(v90 + 32);
    swift_bridgeObjectRetain();
    v57 = v55 - 1;
    v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v60 = *v56++;
      v59 = v60;
      LOBYTE(v79[0]) = 3;
      v81 = 2;
      *(double *)v80 = v11;
      swift_unknownObjectRetain();
      v77(v79, &v81, v80, ObjectType, *((_QWORD *)&v10 + 1));
      v62 = v61;
      v64 = v63;
      swift_unknownObjectRelease();
      if ((v64 & 1) != 0)
        break;
      if (__OFSUB__(v62, 1))
        goto LABEL_84;
      if (v59 < 1)
      {
        if (__OFADD__(v62 - 1, 1))
          goto LABEL_86;
        v66 = v62 + v59;
        if (__OFADD__(v62, v59))
        {
LABEL_87:
          __break(1u);
          break;
        }
        v65 = v66 == 0x7FFFFFFFFFFFFFFFLL;
        if (v66 == 0x7FFFFFFFFFFFFFFFLL)
          v66 = 0;
      }
      else
      {
        v65 = v59 == 0x7FFFFFFFFFFFFFFFLL;
        if (v59 == 0x7FFFFFFFFFFFFFFFLL)
          v66 = 0;
        else
          v66 = v59;
      }
      *(_QWORD *)&v80[2] = *(_QWORD *)&__dst[2];
      BYTE8(v80[2]) = BYTE8(__dst[2]);
      *(_QWORD *)&v80[3] = *(_QWORD *)&__dst[3];
      BYTE8(v80[3]) = BYTE8(__dst[3]);
      *(_QWORD *)&v80[4] = *(_QWORD *)&__dst[4];
      BYTE8(v80[4]) = BYTE8(__dst[4]);
      *(_QWORD *)&v80[5] = v66;
      BYTE8(v80[5]) = v65;
      *(_QWORD *)&v80[6] = *(_QWORD *)&__dst[6];
      BYTE8(v80[6]) = BYTE8(__dst[6]);
      *(_QWORD *)&v80[7] = *(_QWORD *)&__dst[7];
      BYTE8(v80[7]) = BYTE8(__dst[7]);
      *(_QWORD *)&v80[8] = *(_QWORD *)&__dst[8];
      BYTE8(v80[8]) = BYTE8(__dst[8]);
      *(_QWORD *)&v80[9] = *(_QWORD *)&__dst[9];
      BYTE8(v80[9]) = BYTE8(__dst[9]);
      *(_QWORD *)&v80[10] = *(_QWORD *)&__dst[10];
      BYTE8(v80[10]) = BYTE8(__dst[10]);
      *(_QWORD *)&v80[11] = *(_QWORD *)&__dst[11];
      BYTE8(v80[11]) = BYTE8(__dst[11]);
      *(_QWORD *)&v80[12] = *(_QWORD *)&__dst[12];
      BYTE8(v80[12]) = BYTE8(__dst[12]);
      *(_QWORD *)&v80[13] = *(_QWORD *)&__dst[13];
      BYTE8(v80[13]) = BYTE8(__dst[13]);
      *(_QWORD *)&v80[14] = *(_QWORD *)&__dst[14];
      BYTE8(v80[14]) = BYTE8(__dst[14]);
      *(_QWORD *)&v80[15] = *(_QWORD *)&__dst[15];
      BYTE8(v80[15]) = BYTE8(__dst[15]);
      BYTE8(v80[16]) = BYTE8(__dst[16]);
      *(_QWORD *)&v80[16] = *(_QWORD *)&__dst[16];
      *(_QWORD *)&v80[17] = *(_QWORD *)&__dst[17];
      WORD4(v80[17]) = WORD4(__dst[17]);
      v80[0] = __dst[0];
      v80[1] = __dst[1];
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)v80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58[2] + 1, 1, v58);
      v68 = v58[2];
      v67 = v58[3];
      if (v68 >= v67 >> 1)
        v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v58);
      v58[2] = v68 + 1;
      memcpy(&v58[36 * v68 + 4], v80, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v80);
      if (!v57)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v93);
        v82 = v58;
        goto LABEL_79;
      }
      --v57;
    }
    __break(1u);
    goto LABEL_89;
  }
  LOBYTE(v93[0]) = 2;
  LOBYTE(v79[0]) = 1;
  *(double *)v80 = v11;
  v14 = *(uint64_t (**)(_QWORD *, _QWORD *, _OWORD *, uint64_t, _QWORD))(*((_QWORD *)&v10 + 1) + 144);
  swift_unknownObjectRetain();
  v15 = v14(v93, v79, v80, ObjectType, *((_QWORD *)&v10 + 1));
  v75 = v16;
  v76 = v15;
  v18 = v17;
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  LOBYTE(v79[0]) = 1;
  *(double *)v93 = v11;
  v19 = *(void (**)(_OWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, _QWORD))(*((_QWORD *)&v10 + 1) + 160);
  swift_unknownObjectRetain();
  v19(v80, v79, v93, ObjectType, *((_QWORD *)&v10 + 1));
  swift_unknownObjectRelease();
  if ((v80[1] & 1) == 0)
  {
    v20 = *(double *)v80;
    v79[0] = 0;
    v21 = v90;
    v93[0] = v90;
    v22 = *(_QWORD *)(v90 + 16);
    if (v22)
    {
      v23 = v90 + 32;
      swift_bridgeObjectRetain();
      v24 = 0;
      v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v73 = v22;
      v74 = v21;
      v72 = v21 + 32;
      do
      {
        if (v24 >= *(_QWORD *)(v21 + 16))
          goto LABEL_85;
        v26 = *(_QWORD *)(v23 + 8 * v24);
        if (v26 < 1)
        {
          v30 = specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(v79, v76, v75, (uint64_t *)&v85, v20);
          v31 = v30;
          v32 = 0;
          v33 = v30 + 64;
          v34 = 1 << *(_BYTE *)(v30 + 32);
          if (v34 < 64)
            v35 = ~(-1 << v34);
          else
            v35 = -1;
          v36 = v35 & *(_QWORD *)(v30 + 64);
          v78 = (unint64_t)(v34 + 63) >> 6;
          if (v36)
          {
LABEL_25:
            v37 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            v38 = v37 | (v32 << 6);
            goto LABEL_40;
          }
          while (1)
          {
            v39 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_82;
            if (v39 >= v78)
              goto LABEL_9;
            v40 = *(_QWORD *)(v33 + 8 * v39);
            ++v32;
            if (!v40)
            {
              v32 = v39 + 1;
              if (v39 + 1 >= v78)
                goto LABEL_9;
              v40 = *(_QWORD *)(v33 + 8 * v32);
              if (!v40)
              {
                v32 = v39 + 2;
                if (v39 + 2 >= v78)
                  goto LABEL_9;
                v40 = *(_QWORD *)(v33 + 8 * v32);
                if (!v40)
                {
                  v41 = v39 + 3;
                  if (v41 >= v78)
                  {
LABEL_9:
                    swift_release();
                    v22 = v73;
                    v21 = v74;
                    v23 = v72;
                    goto LABEL_10;
                  }
                  v40 = *(_QWORD *)(v33 + 8 * v41);
                  if (!v40)
                  {
                    while (1)
                    {
                      v32 = v41 + 1;
                      if (__OFADD__(v41, 1))
                        break;
                      if (v32 >= v78)
                        goto LABEL_9;
                      v40 = *(_QWORD *)(v33 + 8 * v32);
                      ++v41;
                      if (v40)
                        goto LABEL_39;
                    }
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
                    goto LABEL_87;
                  }
                  v32 = v41;
                }
              }
            }
LABEL_39:
            v36 = (v40 - 1) & v40;
            v38 = __clz(__rbit64(v40)) + (v32 << 6);
LABEL_40:
            v42 = 8 * v38;
            v43 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v38);
            v44 = __OFADD__(v43, 1);
            v45 = v43 + 1;
            if (v44)
            {
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
              goto LABEL_83;
            }
            v44 = __OFADD__(v45, v26);
            v46 = v45 + v26;
            if (v44)
              goto LABEL_81;
            v47 = *(_QWORD *)(*(_QWORD *)(v31 + 48) + v42);
            *(_QWORD *)&v80[2] = *(_QWORD *)&__dst[2];
            BYTE8(v80[2]) = BYTE8(__dst[2]);
            *(_QWORD *)&v80[3] = *(_QWORD *)&__dst[3];
            BYTE8(v80[3]) = BYTE8(__dst[3]);
            v48 = v46 == 0x7FFFFFFFFFFFFFFFLL;
            if (v46 == 0x7FFFFFFFFFFFFFFFLL)
              v46 = 0;
            v49 = v47 == 0x7FFFFFFFFFFFFFFFLL;
            if (v47 == 0x7FFFFFFFFFFFFFFFLL)
              v47 = 0;
            *(_QWORD *)&v80[4] = v47;
            v50 = v49;
            BYTE8(v80[4]) = v50;
            *(_QWORD *)&v80[5] = v46;
            BYTE8(v80[5]) = v48;
            *(_QWORD *)&v80[6] = *(_QWORD *)&__dst[6];
            BYTE8(v80[6]) = BYTE8(__dst[6]);
            *(_QWORD *)&v80[7] = *(_QWORD *)&__dst[7];
            BYTE8(v80[7]) = BYTE8(__dst[7]);
            *(_QWORD *)&v80[8] = *(_QWORD *)&__dst[8];
            BYTE8(v80[8]) = BYTE8(__dst[8]);
            *(_QWORD *)&v80[9] = *(_QWORD *)&__dst[9];
            BYTE8(v80[9]) = BYTE8(__dst[9]);
            *(_QWORD *)&v80[10] = *(_QWORD *)&__dst[10];
            BYTE8(v80[10]) = BYTE8(__dst[10]);
            *(_QWORD *)&v80[11] = *(_QWORD *)&__dst[11];
            BYTE8(v80[11]) = BYTE8(__dst[11]);
            *(_QWORD *)&v80[12] = *(_QWORD *)&__dst[12];
            BYTE8(v80[12]) = BYTE8(__dst[12]);
            *(_QWORD *)&v80[13] = *(_QWORD *)&__dst[13];
            BYTE8(v80[13]) = BYTE8(__dst[13]);
            *(_QWORD *)&v80[14] = *(_QWORD *)&__dst[14];
            BYTE8(v80[14]) = BYTE8(__dst[14]);
            *(_QWORD *)&v80[15] = *(_QWORD *)&__dst[15];
            BYTE8(v80[15]) = BYTE8(__dst[15]);
            BYTE8(v80[16]) = BYTE8(__dst[16]);
            *(_QWORD *)&v80[16] = *(_QWORD *)&__dst[16];
            *(_QWORD *)&v80[17] = *(_QWORD *)&__dst[17];
            WORD4(v80[17]) = WORD4(__dst[17]);
            v80[0] = __dst[0];
            v80[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v80);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            v52 = v25[2];
            v51 = v25[3];
            if (v52 >= v51 >> 1)
              v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v25);
            v25[2] = v52 + 1;
            memcpy(&v25[36 * v52 + 4], v80, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v80);
            v82 = v25;
            if (v36)
              goto LABEL_25;
          }
        }
        *(_QWORD *)&v80[2] = *(_QWORD *)&__dst[2];
        BYTE8(v80[2]) = BYTE8(__dst[2]);
        *(_QWORD *)&v80[3] = *(_QWORD *)&__dst[3];
        BYTE8(v80[3]) = BYTE8(__dst[3]);
        *(_QWORD *)&v80[4] = *(_QWORD *)&__dst[4];
        BYTE8(v80[4]) = BYTE8(__dst[4]);
        if (v26 == 0x7FFFFFFFFFFFFFFFLL)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)&v80[5] = v27;
        BYTE8(v80[5]) = v26 == 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v80[6] = *(_QWORD *)&__dst[6];
        BYTE8(v80[6]) = BYTE8(__dst[6]);
        *(_QWORD *)&v80[7] = *(_QWORD *)&__dst[7];
        BYTE8(v80[7]) = BYTE8(__dst[7]);
        *(_QWORD *)&v80[8] = *(_QWORD *)&__dst[8];
        BYTE8(v80[8]) = BYTE8(__dst[8]);
        *(_QWORD *)&v80[9] = *(_QWORD *)&__dst[9];
        BYTE8(v80[9]) = BYTE8(__dst[9]);
        *(_QWORD *)&v80[10] = *(_QWORD *)&__dst[10];
        BYTE8(v80[10]) = BYTE8(__dst[10]);
        *(_QWORD *)&v80[11] = *(_QWORD *)&__dst[11];
        BYTE8(v80[11]) = BYTE8(__dst[11]);
        *(_QWORD *)&v80[12] = *(_QWORD *)&__dst[12];
        BYTE8(v80[12]) = BYTE8(__dst[12]);
        *(_QWORD *)&v80[13] = *(_QWORD *)&__dst[13];
        BYTE8(v80[13]) = BYTE8(__dst[13]);
        *(_QWORD *)&v80[14] = *(_QWORD *)&__dst[14];
        BYTE8(v80[14]) = BYTE8(__dst[14]);
        *(_QWORD *)&v80[15] = *(_QWORD *)&__dst[15];
        BYTE8(v80[15]) = BYTE8(__dst[15]);
        BYTE8(v80[16]) = BYTE8(__dst[16]);
        *(_QWORD *)&v80[16] = *(_QWORD *)&__dst[16];
        *(_QWORD *)&v80[17] = *(_QWORD *)&__dst[17];
        WORD4(v80[17]) = WORD4(__dst[17]);
        v80[0] = __dst[0];
        v80[1] = __dst[1];
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)v80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        v29 = v25[2];
        v28 = v25[3];
        if (v29 >= v28 >> 1)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v25);
        v25[2] = v29 + 1;
        memcpy(&v25[36 * v29 + 4], v80, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v80);
        v82 = v25;
LABEL_10:
        ++v24;
      }
      while (v24 != v22);
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v93);
    }
    swift_bridgeObjectRelease();
    goto LABEL_79;
  }
LABEL_90:
  __break(1u);
}

Swift::Void __swiftcall Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)(Foundation::Calendar::Component _, Swift::OpaquePointer *dates, Foundation::Date anchor, Foundation::ComponentAction action)
{
  char v4;
  uint64_t v5;
  char v6;
  int v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  char v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t ObjectType;
  void (*v19)(__int128 *__return_ptr, _OWORD *, _QWORD *, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  Swift::Int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  Swift::OpaquePointer *v37;
  char v38;
  _BYTE __dst[282];
  _QWORD v40[36];
  _OWORD __src[18];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  _BYTE v52[7];
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  _DWORD v76[2];
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[3];
  __int128 v86;
  _OWORD v87[3];
  uint64_t v88;
  Swift::Int_optional v89;

  v6 = v4;
  v8 = *(unsigned __int8 *)_;
  v9 = *(double *)action;
  v10 = *(_OWORD *)(v5 + 80);
  v87[0] = *(_OWORD *)(v5 + 64);
  v87[1] = v10;
  v87[2] = *(_OWORD *)(v5 + 96);
  v88 = *(_QWORD *)(v5 + 112);
  v11 = *(_OWORD *)(v5 + 16);
  v85[0] = *(_OWORD *)v5;
  v85[1] = v11;
  v12 = *(_OWORD *)(v5 + 48);
  v85[2] = *(_OWORD *)(v5 + 32);
  v86 = v12;
  switch(v8)
  {
    case 6:
      v13 = &v86;
      v14 = 5;
      break;
    case 5:
      v13 = (__int128 *)((char *)&v86 + 8);
      v14 = 4;
      break;
    case 4:
      v13 = v87;
      v14 = 3;
      break;
    default:
      return;
  }
  v15 = *(_QWORD *)v13;
  swift_bridgeObjectRetain();
  if ((v6 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRetain();
    v22 = swift_bridgeObjectRetain();
    v23 = (void *)specialized _ArrayProtocol.filter(_:)(v22, (uint64_t *)v85, v8);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    dates->_rawValue = v23;
  }
  else
  {
    v37 = dates;
    *(_QWORD *)&__src[0] = 96;
    v16 = 1.59271755e13;
    if (v9 <= 1.59271755e13)
      v16 = v9;
    v17 = fmax(v16, -2.11845067e11);
    ObjectType = swift_getObjectType();
    *(double *)v40 = v17;
    v19 = *(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, uint64_t, _QWORD))(*((_QWORD *)&v85[0] + 1)
                                                                                             + 192);
    swift_unknownObjectRetain();
    v19(&v43, __src, v40, ObjectType, *((_QWORD *)&v85[0] + 1));
    swift_unknownObjectRelease();
    v82 = v47;
    v83 = v48;
    v84 = v49;
    v78 = v43;
    v79 = v44;
    v81 = v46;
    v80 = v45;
    v20 = v50;
    *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)&v52[3];
    v76[0] = *(_DWORD *)v52;
    v21 = v53;
    v71 = v61;
    v72 = v62;
    v73 = v63;
    v74 = v64;
    v67 = v57;
    v68 = v58;
    v69 = v59;
    v70 = v60;
    v65 = v55;
    v66 = v56;
    v77 = v51;
    v75 = v54;
    if (v8 == 6)
    {
      v21 = 0;
      v20 = 0;
      v77 = 1;
      v75 = 1;
    }
    else if (v8 == 5)
    {
      v20 = 0;
      v77 = 1;
    }
    v24 = *(_QWORD *)(v15 + 16);
    v36 = v20;
    if (v24)
    {
      v42 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      v25 = v21;
      v26 = 0;
      __src[4] = v47;
      __src[5] = v48;
      __src[6] = v49;
      __src[0] = v43;
      __src[1] = v44;
      __src[2] = v45;
      __src[3] = v46;
      *(_OWORD *)((char *)&__src[16] + 9) = v63;
      *(_OWORD *)((char *)&__src[14] + 9) = v61;
      *(_OWORD *)((char *)&__src[15] + 9) = v62;
      *(_OWORD *)((char *)&__src[10] + 9) = v57;
      *(_OWORD *)((char *)&__src[11] + 9) = v58;
      *(_OWORD *)((char *)&__src[12] + 9) = v59;
      *(_OWORD *)((char *)&__src[13] + 9) = v60;
      *(_OWORD *)((char *)&__src[8] + 9) = v55;
      BYTE8(__src[7]) = v77;
      *(_DWORD *)((char *)&__src[7] + 9) = *(_DWORD *)v52;
      v27 = v42;
      *(_QWORD *)&__src[7] = v20;
      HIDWORD(__src[7]) = *(_DWORD *)&v52[3];
      v35 = v25;
      *(_QWORD *)&__src[8] = v25;
      BYTE8(__src[8]) = v75;
      BYTE9(__src[17]) = v64;
      v28 = v24 - 1;
      *(_OWORD *)((char *)&__src[9] + 9) = v56;
      while (1)
      {
        v29 = *(_QWORD *)(v15 + 8 * v26 + 32);
        memcpy(__dst, __src, sizeof(__dst));
        v38 = v8;
        v89.value = v29;
        v89.is_nil = 0;
        DateComponents.setValue(_:for:)(v89, (Foundation::Calendar::Component)&v38);
        memcpy(v40, __dst, 0x11AuLL);
        outlined retain of DateComponents((uint64_t)__src);
        v42 = v27;
        v31 = *(_QWORD *)(v27 + 16);
        v30 = *(_QWORD *)(v27 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          v27 = v42;
        }
        *(_QWORD *)(v27 + 16) = v31 + 1;
        memcpy((void *)(v27 + 288 * v31 + 32), v40, 0x11AuLL);
        if (v28 == v26)
          break;
        ++v26;
      }
      swift_bridgeObjectRelease();
      v21 = v35;
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = MEMORY[0x1E0DEE9D8];
    }
    outlined retain of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRetain();
    v32 = swift_bridgeObjectRetain();
    v33 = specialized Sequence.flatMap<A>(_:)(v32, (uint64_t)v85, v14, v27);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_OWORD *)((char *)&__src[16] + 9) = v73;
    __src[4] = v82;
    __src[5] = v83;
    __src[6] = v84;
    __src[0] = v78;
    __src[1] = v79;
    __src[2] = v80;
    __src[3] = v81;
    *(_OWORD *)((char *)&__src[14] + 9) = v71;
    *(_OWORD *)((char *)&__src[15] + 9) = v72;
    *(_OWORD *)((char *)&__src[10] + 9) = v67;
    *(_OWORD *)((char *)&__src[11] + 9) = v68;
    *(_OWORD *)((char *)&__src[12] + 9) = v69;
    *(_OWORD *)((char *)&__src[13] + 9) = v70;
    v34 = v66;
    *(_OWORD *)((char *)&__src[8] + 9) = v65;
    v37->_rawValue = (void *)v33;
    *(_QWORD *)&__src[7] = v36;
    BYTE8(__src[7]) = v77;
    *(_DWORD *)((char *)&__src[7] + 9) = v76[0];
    HIDWORD(__src[7]) = *(_DWORD *)((char *)v76 + 3);
    *(_QWORD *)&__src[8] = v21;
    BYTE8(__src[8]) = v75;
    BYTE9(__src[17]) = v74;
    *(_OWORD *)((char *)&__src[9] + 9) = v34;
    outlined release of DateComponents((uint64_t)__src);
  }
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = v1[2];
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = v1[v3 + 4];
    v8 = v1[i];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = (_QWORD *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

Foundation::Date_optional __swiftcall Calendar.DatesByRecurring.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  char v4;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Foundation::Date_optional result;

  v3 = v0;
  if ((*(_BYTE *)(v1 + 576) & 1) != 0)
  {
LABEL_2:
    *(_QWORD *)v3 = 0;
    v4 = 1;
LABEL_26:
    *(_BYTE *)(v3 + 8) = v4;
    goto LABEL_29;
  }
  v5 = (_BYTE *)(v1 + 576);
  if (*(_BYTE *)(v1 + 48) == 1 && *(_QWORD *)(v1 + 168) >= *(_QWORD *)(v1 + 40))
  {
LABEL_24:
    v4 = 1;
    *v5 = 1;
    *(_QWORD *)v3 = 0;
    goto LABEL_26;
  }
  v6 = *(_QWORD **)(v1 + 600);
  while (!v6[2])
  {
    Calendar.DatesByRecurring.Iterator.nextGroup()();
    v6 = *(_QWORD **)(v1 + 600);
    if (v6[2])
    {
      *(_QWORD *)(v1 + 592) = 0;
    }
    else
    {
      v13 = *(_QWORD *)(v1 + 592);
      v11 = __OFADD__(v13, 1);
      v14 = v13 + 1;
      if (v11)
        goto LABEL_28;
      *(_QWORD *)(v1 + 592) = v14;
      if (*(_QWORD *)(v1 + 584) < v14)
        goto LABEL_24;
    }
LABEL_8:
    if ((*v5 & 1) != 0)
      goto LABEL_2;
  }
  LOBYTE(v7) = swift_isUniquelyReferenced_nonNull_native();
  if ((v7 & 1) != 0)
  {
    v8 = v6[2];
    if (!v8)
      goto LABEL_23;
  }
  else
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    v6 = v7;
    v8 = v7[2];
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
  }
  v9 = v8 - 1;
  v2 = *(double *)&v6[v9 + 4];
  v6[2] = v9;
  *(_QWORD *)(v1 + 600) = v6;
  v10 = *(_QWORD *)(v1 + 168);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (!v11)
  {
    *(_QWORD *)(v1 + 168) = v12;
    if (!*(_BYTE *)(v1 + 48) && *(double *)(v1 + 40) < v2)
      goto LABEL_24;
    if ((*(_BYTE *)(v1 + 144) & 1) != 0)
      goto LABEL_25;
    if (*(double *)(v1 + 136) < v2)
      goto LABEL_24;
    if (v2 >= *(double *)(v1 + 128))
    {
LABEL_25:
      v4 = 0;
      *(double *)v3 = v2;
      goto LABEL_26;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result.value = *(Foundation::Date *)&v2;
  result.is_nil = (char)v7;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Calendar.DatesByRecurring()
{
  uint64_t *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *((_BYTE *)v0 + 24);
  v2 = *((_BYTE *)v0 + 25);
  v3 = *((_BYTE *)v0 + 26);
  v4 = *((_BYTE *)v0 + 48);
  v5 = v0[15];
  v6 = *((_BYTE *)v0 + 144);
  v22 = *v0;
  v11 = *(_OWORD *)(v0 + 1);
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = *((_OWORD *)v0 + 2);
  v16 = v4;
  v7 = *(_OWORD *)(v0 + 9);
  v17 = *(_OWORD *)(v0 + 7);
  v18 = v7;
  v8 = *(_OWORD *)(v0 + 13);
  v19 = *(_OWORD *)(v0 + 11);
  v20 = v8;
  v21 = v5;
  v9 = *((_OWORD *)v0 + 8);
  v10 = v6;
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)&v22, (uint64_t)&v11, (uint64_t)&v9);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Calendar.DatesByRecurring()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[9];
  char v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_BYTE *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v8);
  v6 = v5;
  outlined release of Calendar.DatesByRecurring((uint64_t)v8);
  return v6;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance Calendar.DatesByRecurring(char *a1, double *a2, uint64_t a3)
{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Calendar.DatesByRecurring@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)@<X0>(double *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(_QWORD *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _OWORD *, double *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  BOOL v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  _QWORD v82[33];
  char v83;
  _OWORD v84[2];
  uint64_t v85;

  v6 = *a1;
  v84[0] = *a2;
  v85 = 2048;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v7 = fmax(v6, -2.11845067e11);
  v8 = *((_QWORD *)&v84[0] + 1);
  ObjectType = swift_getObjectType();
  *(double *)v30 = v7;
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t))(*((_QWORD *)&v84[0] + 1)
                                                                                           + 192);
  outlined retain of Locale((uint64_t)v84);
  v28 = ObjectType;
  v10(v82, &v85, v30, ObjectType, v8);
  outlined release of DateComponents((uint64_t)v82);
  result = outlined release of Locale((uint64_t)v84);
  if (v83)
    v12 = 0;
  else
    v12 = v82[32];
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
    *a4 = v20;
    return result;
  }
  v26 = a4;
  v14 = *(void (**)(uint64_t *__return_ptr, _OWORD *, double *, _QWORD, uint64_t, uint64_t))(v8 + 200);
  result = swift_bridgeObjectRetain();
  v15 = *(_QWORD *)(a3 + 32);
  v16 = __OFSUB__(v15, v12);
  v17 = v15 - v12;
  if (!v16)
  {
    v18 = v8;
    v19 = 0;
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v27 = a3;
    while (1)
    {
      v79 = 1;
      v21 = v17 == 0x7FFFFFFFFFFFFFFFLL;
      if (v17 == 0x7FFFFFFFFFFFFFFFLL)
        v17 = 0;
      v78 = 1;
      v77 = 1;
      v76 = 1;
      v75 = 1;
      v74 = 1;
      v73 = 1;
      v72 = 1;
      v71 = 1;
      v70 = 1;
      v69 = 1;
      v68 = 1;
      v67 = 1;
      v66 = 1;
      v65 = v21;
      v64 = 1;
      v31 = 0;
      memset(v30, 0, sizeof(v30));
      v32 = v79;
      v33 = 0;
      v34 = 1;
      v35 = 0;
      v36 = 1;
      v37 = 0;
      v38 = 1;
      v39 = 0;
      v40 = 1;
      v41 = 0;
      v42 = 1;
      v43 = 0;
      v44 = 1;
      v45 = 0;
      v46 = 1;
      v47 = 0;
      v48 = 1;
      v49 = 0;
      v50 = 1;
      v51 = 0;
      v52 = 1;
      v53 = 0;
      v54 = 1;
      v55 = 0;
      v56 = 1;
      v57 = 0;
      v58 = 1;
      v59 = v17;
      v60 = v21;
      v61 = 0;
      v62 = 1;
      v63 = 2;
      v29 = v7;
      outlined retain of Locale((uint64_t)v84);
      v14(&v80, v30, &v29, 0, v28, v18);
      result = outlined release of Locale((uint64_t)v84);
      if ((v81 & 1) == 0)
      {
        v22 = v80;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          v20 = (_QWORD *)result;
        }
        v24 = v20[2];
        v23 = v20[3];
        if (v24 >= v23 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v20);
          v20 = (_QWORD *)result;
        }
        v20[2] = v24 + 1;
        v20[v24 + 4] = v22;
        v18 = v8;
        a3 = v27;
      }
      if (v13 - 1 == v19)
        break;
      v25 = *(_QWORD *)(a3 + 8 * v19++ + 40);
      v16 = __OFSUB__(v25, v12);
      v17 = v25 - v12;
      if (v16)
        goto LABEL_24;
    }
    result = swift_bridgeObjectRelease();
    a4 = v26;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized getter of monthRange #1 in Calendar.RecurrenceRule._expandOrLimitMonths(dates:anchor:action:)(uint64_t a1, __int128 *a2, double a3)
{
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  double v13;
  char v14;
  char v15;
  __int128 v16;

  if (*(_BYTE *)(a1 + 16) != 1)
    return *(_QWORD *)a1;
  v15 = 2;
  v14 = 1;
  if (a3 > 1.59271755e13)
    a3 = 1.59271755e13;
  v4 = fmax(a3, -2.11845067e11);
  v16 = *a2;
  v5 = *((_QWORD *)&v16 + 1);
  ObjectType = swift_getObjectType();
  v13 = v4;
  v7 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)&v16 + 1) + 144);
  outlined retain of Locale((uint64_t)&v16);
  v8 = v7(&v15, &v14, &v13, ObjectType, v5);
  v10 = v9;
  LOBYTE(ObjectType) = v11;
  result = outlined release of Locale((uint64_t)&v16);
  if ((ObjectType & 1) == 0)
  {
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = 0;
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  char v23;
  char v24;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  double v28;
  _OWORD v29[2];

  v3 = *a1;
  v29[0] = *(_OWORD *)a2;
  v27 = 8;
  if (v3 > 1.59271755e13)
    v3 = 1.59271755e13;
  v4 = fmax(v3, -2.11845067e11);
  v5 = *((_QWORD *)&v29[0] + 1);
  ObjectType = swift_getObjectType();
  v28 = v4;
  v7 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)&v29[0] + 1) + 192);
  outlined retain of Locale((uint64_t)v29);
  v7(v25, &v27, &v28, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v25);
  outlined release of Locale((uint64_t)v29);
  if (v26)
    v8 = 0;
  else
    v8 = v25[10];
  v9 = *(double *)(a2 + 80);
  v28 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)&v9 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)&v9 + 32);
    result = swift_bridgeObjectRetain();
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v16 = *v11++;
      v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8)
          goto LABEL_19;
      }
      else
      {
        if ((v14 & 1) == 0)
          goto LABEL_13;
        v24 = 3;
        v23 = 2;
        v22 = v4;
        v17 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 144);
        outlined retain of Locale((uint64_t)v29);
        v17(&v24, &v23, &v22, ObjectType, v5);
        v13 = v18;
        v20 = v19;
        result = outlined release of Locale((uint64_t)v29);
        if ((v20 & 1) != 0)
        {
          v14 = 1;
        }
        else
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }
          if (v13 + v15 == v8)
          {
LABEL_19:
            v21 = 1;
            goto LABEL_20;
          }
          v14 = 0;
        }
      }
      if (!--v10)
      {
        v21 = 0;
LABEL_20:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v28);
        return v21;
      }
    }
  }
  return 0;
}

uint64_t specialized getter of monthsToDaysInMonth #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  Swift::Int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  void (*v45)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  _QWORD *v80;
  int64_t v81;
  uint64_t result;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t ObjectType;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  char v94;
  double v95;
  unsigned __int8 v96;
  __int16 v97;
  id v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101[36];
  __int128 v102[18];
  _OWORD v103[18];
  uint64_t __dst[36];
  _QWORD __src[37];

  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v9;
  }
  if (a2 == a3)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_116;
  }
  v83 = a1;
  if (a3 < a2)
    goto LABEL_125;
  v8 = a5;
  v5 = *a4;
  v7 = a4[1];
  ObjectType = swift_getObjectType();
  v86 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(v7 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  if (a2 >= a3)
  {
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v6 = 0;
  if (v8 <= 1.59271755e13)
    v12 = v8;
  else
    v12 = 1.59271755e13;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v13 = fmax(v12, -2.11845067e11);
  v14 = a2;
  v84 = a2;
  v85 = a3;
  while (2)
  {
    v89 = v14;
    v90 = v9;
    v15 = static _SetStorage.allocate(capacity:)();
    v16 = (_QWORD *)(v15 + 56);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(2uLL);
    v17 = Hasher._finalize()();
    v18 = *(_BYTE *)(v15 + 32);
    v19 = -1 << v18;
    v20 = v17 & ~(-1 << v18);
    v21 = v20 >> 6;
    v22 = *(_QWORD *)(v15 + 56 + 8 * (v20 >> 6));
    v23 = 1 << v20;
    v24 = *(_QWORD *)(v15 + 48);
    if (((1 << v20) & v22) == 0)
      goto LABEL_17;
    v25 = v18 & 0x3F;
    if (*(_BYTE *)(v24 + v20) != 2)
    {
      v26 = ~v19;
      while (1)
      {
        v20 = (v20 + 1) & v26;
        v21 = v20 >> 6;
        v22 = v16[v20 >> 6];
        v23 = 1 << v20;
        if ((v22 & (1 << v20)) == 0)
          break;
        if (*(_BYTE *)(v24 + v20) == 2)
          goto LABEL_19;
      }
LABEL_17:
      v16[v21] = v23 | v22;
      *(_BYTE *)(v24 + v20) = 2;
      v27 = *(_QWORD *)(v15 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_123;
      *(_QWORD *)(v15 + 16) = v29;
      v25 = *(_BYTE *)(v15 + 32) & 0x3F;
    }
LABEL_19:
    v30 = 0;
    v31 = 0;
    v32 = 1 << v25;
    if (1 << v25 < 64)
      v33 = ~(-1 << (1 << v25));
    else
      v33 = -1;
    v34 = v33 & *v16;
    v35 = (unint64_t)(v32 + 63) >> 6;
    v87 = v89 + 1;
    while (1)
    {
      if (v34)
      {
        v36 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        v37 = v36 | (v30 << 6);
        goto LABEL_24;
      }
      v28 = __OFADD__(v30++, 1);
      if (v28)
      {
        __break(1u);
        goto LABEL_119;
      }
      if (v30 >= v35)
        goto LABEL_45;
      v38 = v16[v30];
      if (!v38)
        break;
LABEL_40:
      v40 = __clz(__rbit64(v38));
      v34 = (v38 - 1) & v38;
      v37 = v40 + (v30 << 6);
LABEL_24:
      v31 |= qword_1820E6438[*(char *)(*(_QWORD *)(v15 + 48) + v37)];
    }
    v39 = v30 + 1;
    if (v30 + 1 >= v35)
      goto LABEL_45;
    v38 = v16[v39];
    if (v38)
      goto LABEL_39;
    v39 = v30 + 2;
    if (v30 + 2 >= v35)
      goto LABEL_45;
    v38 = v16[v39];
    if (v38)
      goto LABEL_39;
    v39 = v30 + 3;
    if (v30 + 3 >= v35)
      goto LABEL_45;
    v38 = v16[v39];
    if (v38)
      goto LABEL_39;
    v39 = v30 + 4;
    if (v30 + 4 >= v35)
      goto LABEL_45;
    v38 = v16[v39];
    if (v38)
    {
LABEL_39:
      v30 = v39;
      goto LABEL_40;
    }
    v39 = v30 + 5;
    if (v30 + 5 < v35)
    {
      v38 = v16[v39];
      if (!v38)
      {
        while (1)
        {
          v30 = v39 + 1;
          if (__OFADD__(v39, 1))
            break;
          if (v30 >= v35)
            goto LABEL_45;
          v38 = v16[v30];
          ++v39;
          if (v38)
            goto LABEL_40;
        }
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        v98 = v6;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_133;
        v93 = v99;
        v94 = v100;
        v95 = v8;
        v91 = v5;
        v92 = v7;
        memcpy(v101, v102, 0x11AuLL);
        v97 = 0;
        v96 = 0;
        _handleCalendarError(_:date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t)&v93, (uint64_t *)&v95, &v91, v101, (unsigned __int8 *)&v97 + 1, (unsigned __int8 *)&v97, &v96);

LABEL_127:
        outlined release of DateComponents((uint64_t)v102);
        memcpy(v101, v103, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v101);
        swift_unknownObjectRelease();
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        swift_unknownObjectRelease();
        __break(1u);
        goto LABEL_130;
      }
      goto LABEL_39;
    }
LABEL_45:
    swift_unknownObjectRetain();
    __dst[0] = v31;
    *(double *)v103 = v13;
    v86(__src, __dst, v103, ObjectType, v7);
    if ((v31 & 0x4000) != 0)
    {
      __src[0] = v5;
      __src[1] = v7;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (__src[2])
      {
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(__dst);
      }
    }
    swift_release();
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    if ((__dst[9] & 1) != 0)
      goto LABEL_129;
    if (__dst[8] == v89)
    {
      swift_unknownObjectRelease();
      v41 = v8;
    }
    else
    {
      v102[0] = 0uLL;
      v101[0] = 0;
      v101[1] = 0;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v102, v101, 0, 1, 0, 1, 0, 1, (uint64_t)v103, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1);
      *(_QWORD *)&v102[2] = *(_QWORD *)&v103[2];
      BYTE8(v102[2]) = BYTE8(v103[2]);
      *(_QWORD *)&v102[3] = *(_QWORD *)&v103[3];
      BYTE8(v102[3]) = BYTE8(v103[3]);
      *(_QWORD *)&v102[5] = *(_QWORD *)&v103[5];
      BYTE8(v102[5]) = BYTE8(v103[5]);
      *(_QWORD *)&v102[6] = *(_QWORD *)&v103[6];
      BYTE8(v102[6]) = BYTE8(v103[6]);
      *(_QWORD *)&v102[7] = *(_QWORD *)&v103[7];
      BYTE8(v102[7]) = BYTE8(v103[7]);
      *(_QWORD *)&v102[8] = *(_QWORD *)&v103[8];
      BYTE8(v102[8]) = BYTE8(v103[8]);
      *(_QWORD *)&v102[9] = *(_QWORD *)&v103[9];
      BYTE8(v102[9]) = BYTE8(v103[9]);
      *(_QWORD *)&v102[10] = *(_QWORD *)&v103[10];
      BYTE8(v102[10]) = BYTE8(v103[10]);
      *(_QWORD *)&v102[11] = *(_QWORD *)&v103[11];
      BYTE8(v102[11]) = BYTE8(v103[11]);
      *(_QWORD *)&v102[12] = *(_QWORD *)&v103[12];
      BYTE8(v102[12]) = BYTE8(v103[12]);
      *(_QWORD *)&v102[13] = *(_QWORD *)&v103[13];
      BYTE8(v102[13]) = BYTE8(v103[13]);
      *(_QWORD *)&v102[14] = *(_QWORD *)&v103[14];
      BYTE8(v102[14]) = BYTE8(v103[14]);
      *(_QWORD *)&v102[15] = *(_QWORD *)&v103[15];
      BYTE8(v102[15]) = BYTE8(v103[15]);
      BYTE8(v102[16]) = BYTE8(v103[16]);
      *(_QWORD *)&v102[16] = *(_QWORD *)&v103[16];
      *(_QWORD *)&v102[17] = *(_QWORD *)&v103[17];
      WORD4(v102[17]) = WORD4(v103[17]);
      *(_QWORD *)&v103[4] = v89;
      BYTE8(v103[4]) = 0;
      v102[0] = v103[0];
      v102[1] = v103[1];
      *(_QWORD *)&v102[4] = v89;
      BYTE8(v102[4]) = 0;
      memcpy(v101, v102, 0x11AuLL);
      *(_QWORD *)&v99 = v5;
      *((_QWORD *)&v99 + 1) = v7;
      outlined retain of DateComponents((uint64_t)v102);
      if (!DateComponents._validate(for:)((uint64_t *)&v99) || v8 < -2.11845067e11 || v8 > 1.59271755e13)
        goto LABEL_127;
      v42 = 101;
      v43 = *(_QWORD *)&v8;
      while (1)
      {
        *(_QWORD *)&v93 = v5;
        *((_QWORD *)&v93 + 1) = v7;
        v98 = *(id *)&v8;
        memcpy(v101, v102, 0x11AuLL);
        v97 = 0;
        v96 = 0;
        v95 = *(double *)&v43;
        v91 = 0;
        LOBYTE(v92) = 1;
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v98, v101, (unsigned __int8 *)&v97 + 1, (unsigned __int8 *)&v97, &v96, &v95, (uint64_t)&v91, (uint64_t)&v99);
        if (BYTE8(v99) != 2)
          break;
        v43 = v100;
        if (!--v42)
        {
          *(double *)&v93 = v8;
          *(_QWORD *)&v99 = v5;
          *((_QWORD *)&v99 + 1) = v7;
          memcpy(v101, v102, 0x11AuLL);
          LOBYTE(v91) = 0;
          LOBYTE(v98) = 0;
          LOBYTE(v95) = 0;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)((uint64_t *)&v93, (uint64_t *)&v99, v101, (unsigned __int8 *)&v91, (unsigned __int8 *)&v98, (unsigned __int8 *)&v95);
          goto LABEL_127;
        }
      }
      v41 = *(double *)&v99;
      outlined release of DateComponents((uint64_t)v102);
      outlined release of DateComponents((uint64_t)v102);
      swift_unknownObjectRelease();
    }
    LOBYTE(v102[0]) = 3;
    LOBYTE(v101[0]) = 2;
    if (v41 <= 1.59271755e13)
      v44 = v41;
    else
      v44 = 1.59271755e13;
    *(_QWORD *)&v103[0] = fmax(v44, -2.11845067e11);
    v45 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v7 + 144);
    swift_unknownObjectRetain();
    v45(v102, v101, v103, ObjectType, v7);
    v47 = v46;
    v49 = v48;
    swift_unknownObjectRelease();
    if ((v49 & 1) != 0)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    v50 = v47 - 1;
    if (__OFSUB__(v47, 1))
      goto LABEL_120;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v103[0] = v90;
    v9 = v90;
    v53 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
    v54 = v90[2];
    v55 = (v52 & 1) == 0;
    v56 = v54 + v55;
    if (__OFADD__(v54, v55))
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    v57 = v52;
    if (v90[3] < v56)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
      v9 = *(_QWORD **)&v103[0];
      v58 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
      if ((v57 & 1) != (v59 & 1))
        goto LABEL_132;
      v53 = v58;
      if ((v57 & 1) == 0)
      {
LABEL_68:
        v9[(v53 >> 6) + 8] |= 1 << v53;
        v60 = 8 * v53;
        *(_QWORD *)(v9[6] + v60) = v89;
        *(_QWORD *)(v9[7] + v60) = v50;
        v61 = v9[2];
        v28 = __OFADD__(v61, 1);
        v62 = v61 + 1;
        if (v28)
          goto LABEL_124;
        v9[2] = v62;
LABEL_73:
        swift_bridgeObjectRelease();
        if (v87 != v85)
        {
          if (v87 < v84)
            goto LABEL_119;
          v14 = v89 + 1;
          if (v87 >= v85)
            goto LABEL_119;
          continue;
        }
        a1 = v83;
LABEL_116:
        *a1 = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
LABEL_72:
      *(_QWORD *)(v9[7] + 8 * v53) = v50;
      goto LABEL_73;
    }
    break;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v52 & 1) == 0)
      goto LABEL_68;
    goto LABEL_72;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  v63 = static _DictionaryStorage.copy(original:)();
  v64 = v90;
  v9 = (_QWORD *)v63;
  if (!v90[2])
  {
LABEL_113:
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
      goto LABEL_68;
    goto LABEL_72;
  }
  v65 = (_QWORD *)(v63 + 64);
  v66 = v90 + 8;
  v67 = (unint64_t)((1 << *((_BYTE *)v9 + 32)) + 63) >> 6;
  if (v9 != v90 || v65 >= &v66[v67])
  {
    memmove(v65, v90 + 8, 8 * v67);
    v64 = v90;
  }
  v68 = 0;
  v9[2] = v64[2];
  v69 = 1 << *((_BYTE *)v64 + 32);
  if (v69 < 64)
    v70 = ~(-1 << v69);
  else
    v70 = -1;
  v71 = v70 & v64[8];
  v72 = (unint64_t)(v69 + 63) >> 6;
  while (2)
  {
    if (v71)
    {
      v73 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      v74 = v73 | (v68 << 6);
LABEL_86:
      v75 = 8 * v74;
      v76 = *(_QWORD *)(v64[7] + v75);
      *(_QWORD *)(v9[6] + v75) = *(_QWORD *)(v64[6] + v75);
      *(_QWORD *)(v9[7] + v75) = v76;
      continue;
    }
    break;
  }
  v28 = __OFADD__(v68++, 1);
  if (v28)
    goto LABEL_128;
  if (v68 >= v72)
    goto LABEL_113;
  v77 = v66[v68];
  if (v77)
  {
LABEL_100:
    v79 = __clz(__rbit64(v77));
    v71 = (v77 - 1) & v77;
    v74 = v79 + (v68 << 6);
    goto LABEL_86;
  }
  v78 = v68 + 1;
  if (v68 + 1 >= v72)
    goto LABEL_113;
  v77 = v66[v78];
  if (v77)
    goto LABEL_99;
  v78 = v68 + 2;
  if (v68 + 2 >= v72)
    goto LABEL_113;
  v77 = v66[v78];
  if (v77)
    goto LABEL_99;
  v78 = v68 + 3;
  if (v68 + 3 >= v72)
    goto LABEL_113;
  v77 = v66[v78];
  if (v77)
    goto LABEL_99;
  v78 = v68 + 4;
  if (v68 + 4 >= v72)
    goto LABEL_113;
  v77 = v66[v78];
  if (v77)
  {
LABEL_99:
    v68 = v78;
    goto LABEL_100;
  }
  v80 = v9;
  v81 = v68 + 5;
  if (v68 + 5 >= v72)
    goto LABEL_112;
  v77 = v66[v81];
  if (v77)
    goto LABEL_107;
  v81 = v68 + 6;
  if (v68 + 6 >= v72)
    goto LABEL_112;
  v77 = v66[v81];
  if (v77)
    goto LABEL_107;
  v81 = v68 + 7;
  if (v68 + 7 >= v72)
  {
LABEL_112:
    v9 = v80;
    goto LABEL_113;
  }
  v77 = v66[v81];
  if (v77)
  {
LABEL_107:
    v68 = v81;
    v64 = v90;
    goto LABEL_100;
  }
  while (1)
  {
    v68 = v81 + 1;
    if (__OFADD__(v81, 1))
      break;
    if (v68 >= v72)
      goto LABEL_112;
    v77 = v66[v68];
    ++v81;
    v9 = v80;
    v64 = v90;
    if (v77)
      goto LABEL_100;
  }
LABEL_131:
  __break(1u);
LABEL_132:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_133:

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t ObjectType;
  void (*v12)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, _QWORD);
  uint64_t result;
  __int128 v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, _QWORD);
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD __src[24];
  _OWORD v58[24];
  _BYTE v59[330];
  char v60;
  unsigned __int8 v61;
  char v62;
  __int128 v63[18];
  double v64[36];
  _BYTE v65[282];
  _OWORD __dst[19];
  char v67;
  int v68;

  v7 = *a1;
  v59[0] = 2;
  if (v7 > 1.59271755e13)
    v7 = 1.59271755e13;
  v8 = fmax(v7, -2.11845067e11);
  v9 = *(double *)a2;
  v10 = *(double *)(a2 + 8);
  ObjectType = swift_getObjectType();
  *(double *)__src = v8;
  v12 = *(void (**)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v10 + 160);
  swift_unknownObjectRetain();
  v50 = ObjectType;
  v12(v58, v59, __src, ObjectType, *(_QWORD *)&v10);
  result = swift_unknownObjectRelease();
  if ((v58[1] & 1) != 0)
    goto LABEL_56;
  v55 = *a3;
  v54 = *(_QWORD *)(*a3 + 16);
  if (!v54)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_51:
    *a4 = v19;
    return result;
  }
  v14 = v58[0];
  v15 = *(double *)v58;
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  if (*((double *)&v14 + 1) + v15 < v15)
    goto LABEL_55;
  v49 = a4;
  v68 = *(unsigned __int8 *)(a2 + 16);
  v51 = *(_BYTE *)(a2 + 17);
  v53 = v55 + 32;
  swift_bridgeObjectRetain();
  v16 = 0;
  if (v15 <= 1.59271755e13)
    v17 = v15;
  else
    v17 = 1.59271755e13;
  v18 = fmax(v17, -2.11845067e11);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v52 = v9;
  while (2)
  {
    memcpy(__dst, (const void *)(v53 + 288 * v16), 0x11AuLL);
    memcpy(v65, (const void *)(v53 + 288 * v16), sizeof(v65));
    v56 = v16 + 1;
    v20 = static _SetStorage.allocate(capacity:)();
    v21 = 0;
    v22 = v20 + 56;
    do
    {
      v26 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)[v21 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v20 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      v30 = *(_QWORD *)(v22 + 8 * (v28 >> 6));
      v31 = 1 << v28;
      v32 = *(_QWORD *)(v20 + 48);
      if (((1 << v28) & v30) != 0)
      {
        if (*(unsigned __int8 *)(v32 + v28) == (_DWORD)v26)
          goto LABEL_13;
        v33 = ~v27;
        while (1)
        {
          v28 = (v28 + 1) & v33;
          v29 = v28 >> 6;
          v30 = *(_QWORD *)(v22 + 8 * (v28 >> 6));
          v31 = 1 << v28;
          if ((v30 & (1 << v28)) == 0)
            break;
          if (*(unsigned __int8 *)(v32 + v28) == (_DWORD)v26)
            goto LABEL_13;
        }
      }
      *(_QWORD *)(v22 + 8 * v29) = v31 | v30;
      *(_BYTE *)(v32 + v28) = v26;
      v23 = *(_QWORD *)(v20 + 16);
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
      {
        __break(1u);
        goto LABEL_53;
      }
      *(_QWORD *)(v20 + 16) = v25;
LABEL_13:
      ++v21;
    }
    while (v21 != 15);
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    specialized _NativeSet.filter(_:)(v20);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)__src = v52;
    *((double *)__src + 1) = v10;
    v34 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v34, v59);
    v35 = BYTE9(__dst[17]);
    v64[0] = v18;
    Calendar._dateComponents(_:from:)((uint64_t *)v59, v64, v58);
    swift_release();
    if (v35 == 2)
    {
      result = outlined retain of DateComponents((uint64_t)__dst);
    }
    else
    {
      *(_QWORD *)&v64[0] = 4;
      *(double *)v59 = v18;
      v36 = *(void (**)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)&v10 + 192);
      outlined retain of DateComponents((uint64_t)__dst);
      v36(__src, v64, v59, v50, *(_QWORD *)&v10);
      memcpy(v59, __src, 0x11AuLL);
      result = outlined release of DateComponents((uint64_t)v59);
      BYTE9(v58[17]) = v59[281];
    }
    v37 = *(_QWORD *)&__dst[10];
    v38 = *(_QWORD *)&v58[10];
    v39 = BYTE8(v58[10]) ^ 1 | BYTE8(__dst[10]);
    if ((BYTE8(v58[10]) & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0)
    {
LABEL_31:
      *(_QWORD *)&v59[32] = *(_QWORD *)&__dst[2];
      v59[40] = BYTE8(__dst[2]);
      *(_QWORD *)&v59[48] = *(_QWORD *)&__dst[3];
      v59[56] = BYTE8(__dst[3]);
      *(_QWORD *)&v59[64] = *(_QWORD *)&__dst[4];
      v59[72] = BYTE8(__dst[4]);
      *(_QWORD *)&v59[80] = *(_QWORD *)&__dst[5];
      v59[88] = BYTE8(__dst[5]);
      *(_QWORD *)&v59[96] = *(_QWORD *)&__dst[6];
      v59[104] = BYTE8(__dst[6]);
      *(_QWORD *)&v59[112] = *(_QWORD *)&__dst[7];
      v59[120] = BYTE8(__dst[7]);
      *(_QWORD *)&v59[128] = *(_QWORD *)&__dst[8];
      v59[136] = BYTE8(__dst[8]);
      *(_QWORD *)&v59[144] = *(_QWORD *)&__dst[9];
      v59[152] = BYTE8(__dst[9]);
      *(_QWORD *)&v59[160] = v37;
      v59[168] = v39;
      *(_QWORD *)&v59[176] = *(_QWORD *)&__dst[11];
      v59[184] = BYTE8(__dst[11]);
      *(_QWORD *)&v59[192] = *(_QWORD *)&__dst[12];
      v59[200] = BYTE8(__dst[12]);
      *(_QWORD *)&v59[208] = *(_QWORD *)&__dst[13];
      v59[216] = BYTE8(__dst[13]);
      *(_QWORD *)&v59[224] = *(_QWORD *)&__dst[14];
      v59[232] = BYTE8(__dst[14]);
      *(_QWORD *)&v59[240] = *(_QWORD *)&__dst[15];
      v59[248] = BYTE8(__dst[15]);
      v59[264] = BYTE8(__dst[16]);
      *(_QWORD *)&v59[256] = *(_QWORD *)&__dst[16];
      *(_QWORD *)&v59[272] = *(_QWORD *)&__dst[17];
      v59[280] = BYTE8(__dst[17]);
      v59[281] = v35;
      *(_OWORD *)v59 = __dst[0];
      *(_OWORD *)&v59[16] = __dst[1];
      memcpy(v64, v59, 0x11AuLL);
      *(_QWORD *)&__src[2] = *(_QWORD *)&v58[2];
      BYTE8(__src[2]) = BYTE8(v58[2]);
      *(_QWORD *)&__src[3] = *(_QWORD *)&v58[3];
      BYTE8(__src[3]) = BYTE8(v58[3]);
      *(_QWORD *)&__src[4] = *(_QWORD *)&v58[4];
      BYTE8(__src[4]) = BYTE8(v58[4]);
      *(_QWORD *)&__src[5] = *(_QWORD *)&v58[5];
      BYTE8(__src[5]) = BYTE8(v58[5]);
      *(_QWORD *)&__src[6] = *(_QWORD *)&v58[6];
      BYTE8(__src[6]) = BYTE8(v58[6]);
      *(_QWORD *)&__src[7] = *(_QWORD *)&v58[7];
      BYTE8(__src[7]) = BYTE8(v58[7]);
      *(_QWORD *)&__src[8] = *(_QWORD *)&v58[8];
      BYTE8(__src[8]) = BYTE8(v58[8]);
      *(_QWORD *)&__src[9] = *(_QWORD *)&v58[9];
      BYTE8(__src[9]) = BYTE8(v58[9]);
      *(_QWORD *)&__src[10] = v38;
      BYTE8(__src[10]) = BYTE8(v58[10]);
      *(_QWORD *)&__src[11] = *(_QWORD *)&v58[11];
      BYTE8(__src[11]) = BYTE8(v58[11]);
      *(_QWORD *)&__src[12] = *(_QWORD *)&v58[12];
      BYTE8(__src[12]) = BYTE8(v58[12]);
      *(_QWORD *)&__src[13] = *(_QWORD *)&v58[13];
      BYTE8(__src[13]) = BYTE8(v58[13]);
      *(_QWORD *)&__src[14] = *(_QWORD *)&v58[14];
      BYTE8(__src[14]) = BYTE8(v58[14]);
      *(_QWORD *)&__src[15] = *(_QWORD *)&v58[15];
      BYTE8(__src[15]) = BYTE8(v58[15]);
      BYTE8(__src[16]) = BYTE8(v58[16]);
      *(_QWORD *)&__src[16] = *(_QWORD *)&v58[16];
      *(_QWORD *)&__src[17] = *(_QWORD *)&v58[17];
      WORD4(__src[17]) = WORD4(v58[17]);
      __src[0] = v58[0];
      __src[1] = v58[1];
      memcpy(v63, __src, 0x11AuLL);
      v41 = specialized static DateComponents.== infix(_:_:)((uint64_t)v64, v63);
      outlined release of DateComponents((uint64_t)v59);
      outlined release of DateComponents((uint64_t)__src);
      swift_unknownObjectRelease();
      if (v41)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        v43 = v19[2];
        v42 = v19[3];
        if (v43 >= v42 >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v19);
        v19[2] = v43 + 1;
        v19[v43 + 4] = v14;
      }
      goto LABEL_37;
    }
    v40 = *(_QWORD *)&v58[10] - *(_QWORD *)&__dst[10];
    if (__OFSUB__(*(_QWORD *)&v58[10], *(_QWORD *)&__dst[10]))
      goto LABEL_54;
    if (v40 < 0)
      v40 = *(_QWORD *)&__dst[10] - *(_QWORD *)&v58[10];
    if ((unint64_t)v40 < 0x1F5)
    {
      v38 = 0;
      v37 = 0;
      v39 = 0;
      goto LABEL_31;
    }
    outlined release of DateComponents((uint64_t)__dst);
    *(_QWORD *)&__src[2] = *(_QWORD *)&v58[2];
    BYTE8(__src[2]) = BYTE8(v58[2]);
    *(_QWORD *)&__src[3] = *(_QWORD *)&v58[3];
    BYTE8(__src[3]) = BYTE8(v58[3]);
    *(_QWORD *)&__src[4] = *(_QWORD *)&v58[4];
    BYTE8(__src[4]) = BYTE8(v58[4]);
    *(_QWORD *)&__src[5] = *(_QWORD *)&v58[5];
    BYTE8(__src[5]) = BYTE8(v58[5]);
    *(_QWORD *)&__src[6] = *(_QWORD *)&v58[6];
    BYTE8(__src[6]) = BYTE8(v58[6]);
    *(_QWORD *)&__src[7] = *(_QWORD *)&v58[7];
    BYTE8(__src[7]) = BYTE8(v58[7]);
    *(_QWORD *)&__src[8] = *(_QWORD *)&v58[8];
    BYTE8(__src[8]) = BYTE8(v58[8]);
    *(_QWORD *)&__src[9] = *(_QWORD *)&v58[9];
    BYTE8(__src[9]) = BYTE8(v58[9]);
    *(_QWORD *)&__src[10] = v38;
    *(_QWORD *)&__src[11] = *(_QWORD *)&v58[11];
    BYTE8(__src[11]) = BYTE8(v58[11]);
    *(_QWORD *)&__src[12] = *(_QWORD *)&v58[12];
    BYTE8(__src[12]) = BYTE8(v58[12]);
    *(_QWORD *)&__src[13] = *(_QWORD *)&v58[13];
    BYTE8(__src[13]) = BYTE8(v58[13]);
    *(_QWORD *)&__src[14] = *(_QWORD *)&v58[14];
    BYTE8(__src[14]) = BYTE8(v58[14]);
    *(_QWORD *)&__src[15] = *(_QWORD *)&v58[15];
    BYTE8(__src[15]) = BYTE8(v58[15]);
    BYTE8(__src[16]) = BYTE8(v58[16]);
    *(_QWORD *)&__src[16] = *(_QWORD *)&v58[16];
    *(_QWORD *)&__src[17] = *(_QWORD *)&v58[17];
    WORD4(__src[17]) = WORD4(v58[17]);
    __src[0] = v58[0];
    __src[1] = v58[1];
    BYTE8(__src[10]) = 0;
    outlined release of DateComponents((uint64_t)__src);
    swift_unknownObjectRelease();
LABEL_37:
    *(double *)v59 = v52;
    *(double *)&v59[8] = v10;
    *(_QWORD *)&v59[16] = v14;
    *(_QWORD *)&v59[24] = v14;
    *(double *)&v59[32] = *((double *)&v14 + 1) + v15;
    v59[40] = 0;
    memcpy(&v59[48], v65, 0x11AuLL);
    v44 = v68;
    v60 = v68;
    v61 = v51;
    v62 = 0;
    memcpy(__src, __dst, 0x11AuLL);
    v64[0] = v52;
    v64[1] = v10;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)__dst);
    v45 = DateComponents._validate(for:)((uint64_t *)v64);
    outlined release of Calendar.DatesByAdding((uint64_t)v59);
    LOBYTE(v63[0]) = 1;
    v67 = 0;
    memcpy(&v58[5], v65, 0x11AuLL);
    v58[0] = xmmword_1820E51B0;
    LOBYTE(v58[1]) = 1;
    *((_QWORD *)&v58[1] + 1) = v14;
    *(_QWORD *)&v58[2] = v14;
    *((double *)&v58[2] + 1) = *((double *)&v14 + 1) + v15;
    LOBYTE(v58[3]) = 0;
    *((_QWORD *)&v58[3] + 1) = v14;
    *(double *)&v58[4] = v52;
    *((double *)&v58[4] + 1) = v10;
    BYTE10(v58[22]) = v44;
    *(_WORD *)((char *)&v58[22] + 11) = v51;
    *(_QWORD *)&v58[23] = 100;
    BYTE8(v58[23]) = !v45;
    Calendar.DatesByMatching.Iterator.next()();
    if ((BYTE8(__src[0]) & 1) != 0)
    {
      v16 = v56;
    }
    else
    {
      v46 = *(_QWORD *)&__src[0];
      v16 = v56;
      do
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        v48 = v19[2];
        v47 = v19[3];
        if (v48 >= v47 >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v19);
        v19[2] = v48 + 1;
        v19[v48 + 4] = v46;
        Calendar.DatesByMatching.Iterator.next()();
        v46 = *(_QWORD *)&__src[0];
      }
      while ((BYTE8(__src[0]) & 1) == 0);
    }
    memcpy(__src, v58, 0x179uLL);
    outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__src);
    result = outlined release of DateComponents((uint64_t)__dst);
    if (v16 == v54)
    {
      result = swift_bridgeObjectRelease();
      a4 = v49;
      goto LABEL_51;
    }
    if (v16 < *(_QWORD *)(v55 + 16))
      continue;
    break;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t closure #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  _QWORD v26[13];
  char v27;
  uint64_t v28;
  double v29;
  _OWORD v30[2];

  v3 = *a1;
  v30[0] = *(_OWORD *)a2;
  v28 = 0x40000;
  if (v3 > 1.59271755e13)
    v3 = 1.59271755e13;
  v4 = fmax(v3, -2.11845067e11);
  v5 = *((_QWORD *)&v30[0] + 1);
  ObjectType = swift_getObjectType();
  v29 = v4;
  v7 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)&v30[0] + 1) + 192);
  outlined retain of Locale((uint64_t)v30);
  v22 = ObjectType;
  v7(v26, &v28, &v29, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v26);
  outlined release of Locale((uint64_t)v30);
  if (v27)
    v8 = 0;
  else
    v8 = v26[12];
  v9 = *(double *)(a2 + 88);
  v29 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)&v9 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)&v9 + 32);
    result = swift_bridgeObjectRetain();
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v16 = *v11++;
      v15 = v16;
      if (v16 >= 1)
      {
        if (v15 == v8)
          goto LABEL_18;
      }
      else
      {
        if ((v14 & 1) == 0)
          goto LABEL_13;
        v25 = 17;
        v14 = 1;
        v24 = 1;
        v23 = v4;
        v17 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 144);
        outlined retain of Locale((uint64_t)v30);
        v17(&v25, &v24, &v23, v22, v5);
        v13 = v18;
        v20 = v19;
        result = outlined release of Locale((uint64_t)v30);
        if ((v20 & 1) == 0)
        {
LABEL_13:
          if (__OFADD__(v13, v15))
          {
            __break(1u);
            return result;
          }
          if (v13 + v15 == v8)
          {
LABEL_18:
            v21 = 1;
            goto LABEL_19;
          }
          v14 = 0;
        }
      }
      if (!--v10)
      {
        v21 = 0;
LABEL_19:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v29);
        return v21;
      }
    }
  }
  return 0;
}

uint64_t specialized getter of daysInYear #1 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(_BYTE *a1, __int128 *a2, double a3)
{
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  double v12;
  char v13;
  char v14;
  __int128 v15;

  if (a1[8] != 1)
    return *(_QWORD *)a1;
  v14 = 17;
  v13 = 1;
  if (a3 > 1.59271755e13)
    a3 = 1.59271755e13;
  v4 = fmax(a3, -2.11845067e11);
  v15 = *a2;
  v5 = *((_QWORD *)&v15 + 1);
  ObjectType = swift_getObjectType();
  v12 = v4;
  v7 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)&v15 + 1) + 144);
  outlined retain of Locale((uint64_t)&v15);
  v7(&v14, &v13, &v12, ObjectType, v5);
  v9 = v8;
  LOBYTE(v5) = v10;
  result = outlined release of Locale((uint64_t)&v15);
  if ((v5 & 1) == 0)
  {
    result = v9 - 1;
    if (!__OFSUB__(v9, 1))
    {
      *(_QWORD *)a1 = result;
      a1[8] = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[48];
  uint64_t v21[2];
  _OWORD __src[24];
  _BYTE __dst[288];
  _QWORD v24[5];
  char v25;
  _BYTE v26[286];
  __int16 v27;
  char v28;
  _BYTE v29[7];
  char v30;
  _BYTE v31[7];
  char v32;

  v19 = *a1;
  v18 = *(_QWORD *)(*a1 + 16);
  if (!v18)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    *a3 = v10;
    return;
  }
  v6 = a4 + a5;
  if (a4 + a5 >= a4)
  {
    v15 = a3;
    v8 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v17 = *(_BYTE *)(a2 + 16);
    v16 = *(_BYTE *)(a2 + 17);
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      memcpy(__dst, (const void *)(v19 + 32 + 288 * v9), 0x11AuLL);
      v24[0] = v8;
      v24[1] = v7;
      *(double *)&v24[2] = a4;
      *(double *)&v24[3] = a4;
      *(double *)&v24[4] = v6;
      v25 = 0;
      memcpy(v26, __dst, 0x11AuLL);
      v26[282] = v17;
      v26[283] = v16;
      v26[284] = 0;
      memcpy(v20, __dst, 0x11AuLL);
      v21[0] = v8;
      v21[1] = v7;
      outlined retain of DateComponents((uint64_t)__dst);
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)__dst);
      swift_unknownObjectRetain();
      v11 = DateComponents._validate(for:)(v21);
      outlined release of Calendar.DatesByAdding((uint64_t)v24);
      v32 = 1;
      v30 = 0;
      memcpy(&__src[5], __dst, 0x11AuLL);
      __src[0] = xmmword_1820E51B0;
      LOBYTE(__src[1]) = 1;
      *(_DWORD *)((char *)&__src[1] + 1) = *(_DWORD *)v31;
      DWORD1(__src[1]) = *(_DWORD *)&v31[3];
      *((double *)&__src[1] + 1) = a4;
      *(double *)&__src[2] = a4;
      *((double *)&__src[2] + 1) = v6;
      LOBYTE(__src[3]) = 0;
      *(_DWORD *)((char *)&__src[3] + 1) = *(_DWORD *)v29;
      DWORD1(__src[3]) = *(_DWORD *)&v29[3];
      *((double *)&__src[3] + 1) = a4;
      *(_QWORD *)&__src[4] = v8;
      *((_QWORD *)&__src[4] + 1) = v7;
      BYTE10(__src[22]) = v17;
      *(_WORD *)((char *)&__src[22] + 11) = v16;
      *(_WORD *)((char *)&__src[22] + 13) = v27;
      HIBYTE(__src[22]) = v28;
      *(_QWORD *)&__src[23] = 100;
      BYTE8(__src[23]) = !v11;
      Calendar.DatesByMatching.Iterator.next()();
      if ((v20[1] & 1) == 0)
      {
        v12 = v20[0];
        do
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
          v14 = v10[2];
          v13 = v10[3];
          if (v14 >= v13 >> 1)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
          v10[2] = v14 + 1;
          v10[v14 + 4] = v12;
          Calendar.DatesByMatching.Iterator.next()();
          v12 = v20[0];
        }
        while ((v20[1] & 1) == 0);
      }
      ++v9;
      memcpy(v20, __src, 0x179uLL);
      outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v20);
      outlined release of DateComponents((uint64_t)__dst);
      if (v9 == v18)
        break;
      if (v9 >= *(_QWORD *)(v19 + 16))
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
    a3 = v15;
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

uint64_t closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t ObjectType;
  void (*v14)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, _QWORD);
  uint64_t result;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, _QWORD);
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned __int8 v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  _OWORD __dst[24];
  _OWORD __src[24];
  _BYTE v61[330];
  char v62;
  unsigned __int8 v63;
  char v64;
  __int128 v65[18];
  double v66[36];
  _BYTE v67[282];
  _OWORD v68[19];
  char v69;
  int v70;

  v8 = *a1;
  v61[0] = a3;
  v9 = 1.59271755e13;
  if (v8 <= 1.59271755e13)
    v9 = v8;
  v10 = fmax(v9, -2.11845067e11);
  v11 = *(double *)a2;
  v12 = *(double *)(a2 + 8);
  ObjectType = swift_getObjectType();
  *(double *)__dst = v10;
  v14 = *(void (**)(_OWORD *__return_ptr, _BYTE *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v12 + 160);
  swift_unknownObjectRetain();
  v14(__src, v61, __dst, ObjectType, *(_QWORD *)&v12);
  result = swift_unknownObjectRelease();
  if ((__src[1] & 1) != 0)
    goto LABEL_51;
  v56 = *(_QWORD *)(a4 + 16);
  if (!v56)
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_47:
    *a5 = v20;
    return result;
  }
  v16 = *((double *)__src + 1);
  v53 = *(_QWORD *)&__src[0];
  v17 = *(double *)__src;
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v18 = v16 + v17;
  if (v18 < v17)
    goto LABEL_50;
  v58 = v12;
  v54 = v11;
  v51 = a5;
  v70 = *(unsigned __int8 *)(a2 + 16);
  v52 = *(_BYTE *)(a2 + 17);
  v55 = a4 + 32;
  swift_bridgeObjectRetain();
  v19 = 0;
  v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_9:
  memcpy(v68, (const void *)(v55 + 288 * v19), 0x11AuLL);
  memcpy(v67, (const void *)(v55 + 288 * v19), sizeof(v67));
  v57 = v19 + 1;
  v21 = static _SetStorage.allocate(capacity:)();
  v22 = 0;
  v23 = v21 + 56;
  while (1)
  {
    v24 = outlined read-only object #0 of closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)[v22 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v21 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    v28 = *(_QWORD *)(v23 + 8 * (v26 >> 6));
    v29 = 1 << v26;
    v30 = *(_QWORD *)(v21 + 48);
    if (((1 << v26) & v28) == 0)
      break;
    if (*(unsigned __int8 *)(v30 + v26) != (_DWORD)v24)
    {
      v31 = ~v25;
      do
      {
        v26 = (v26 + 1) & v31;
        v27 = v26 >> 6;
        v28 = *(_QWORD *)(v23 + 8 * (v26 >> 6));
        v29 = 1 << v26;
        if ((v28 & (1 << v26)) == 0)
          goto LABEL_17;
      }
      while (*(unsigned __int8 *)(v30 + v26) != (_DWORD)v24);
    }
LABEL_10:
    if (++v22 == 15)
    {
      outlined retain of DateComponents((uint64_t)v68);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v68);
      specialized _NativeSet.filter(_:)(v21);
      outlined release of DateComponents((uint64_t)v68);
      *(double *)__dst = v54;
      *((double *)__dst + 1) = v58;
      v35 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v35, v61);
      v36 = BYTE9(v68[17]);
      v66[0] = v10;
      Calendar._dateComponents(_:from:)((uint64_t *)v61, v66, __src);
      swift_release();
      if (v36 == 2)
      {
        result = outlined retain of DateComponents((uint64_t)v68);
      }
      else
      {
        *(_QWORD *)&v66[0] = 4;
        *(double *)v61 = v10;
        v37 = *(void (**)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)&v58 + 192);
        outlined retain of DateComponents((uint64_t)v68);
        v37(__dst, v66, v61, ObjectType, *(_QWORD *)&v58);
        memcpy(v61, __dst, 0x11AuLL);
        result = outlined release of DateComponents((uint64_t)v61);
        BYTE9(__src[17]) = v61[281];
      }
      v38 = *(_QWORD *)&v68[10];
      v39 = *(_QWORD *)&__src[10];
      v40 = BYTE8(__src[10]) ^ 1 | BYTE8(v68[10]);
      if ((BYTE8(__src[10]) & 1) == 0 && (BYTE8(v68[10]) & 1) == 0)
      {
        v41 = *(_QWORD *)&__src[10] - *(_QWORD *)&v68[10];
        if (__OFSUB__(*(_QWORD *)&__src[10], *(_QWORD *)&v68[10]))
          goto LABEL_49;
        if (v41 < 0)
          v41 = *(_QWORD *)&v68[10] - *(_QWORD *)&__src[10];
        if ((unint64_t)v41 >= 0x1F5)
        {
          outlined release of DateComponents((uint64_t)v68);
          *(_QWORD *)&__dst[2] = *(_QWORD *)&__src[2];
          BYTE8(__dst[2]) = BYTE8(__src[2]);
          *(_QWORD *)&__dst[3] = *(_QWORD *)&__src[3];
          BYTE8(__dst[3]) = BYTE8(__src[3]);
          *(_QWORD *)&__dst[4] = *(_QWORD *)&__src[4];
          BYTE8(__dst[4]) = BYTE8(__src[4]);
          *(_QWORD *)&__dst[5] = *(_QWORD *)&__src[5];
          BYTE8(__dst[5]) = BYTE8(__src[5]);
          *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[6];
          BYTE8(__dst[6]) = BYTE8(__src[6]);
          *(_QWORD *)&__dst[7] = *(_QWORD *)&__src[7];
          BYTE8(__dst[7]) = BYTE8(__src[7]);
          *(_QWORD *)&__dst[8] = *(_QWORD *)&__src[8];
          BYTE8(__dst[8]) = BYTE8(__src[8]);
          *(_QWORD *)&__dst[9] = *(_QWORD *)&__src[9];
          BYTE8(__dst[9]) = BYTE8(__src[9]);
          *(_QWORD *)&__dst[10] = v39;
          *(_QWORD *)&__dst[11] = *(_QWORD *)&__src[11];
          BYTE8(__dst[11]) = BYTE8(__src[11]);
          *(_QWORD *)&__dst[12] = *(_QWORD *)&__src[12];
          BYTE8(__dst[12]) = BYTE8(__src[12]);
          *(_QWORD *)&__dst[13] = *(_QWORD *)&__src[13];
          BYTE8(__dst[13]) = BYTE8(__src[13]);
          *(_QWORD *)&__dst[14] = *(_QWORD *)&__src[14];
          BYTE8(__dst[14]) = BYTE8(__src[14]);
          *(_QWORD *)&__dst[15] = *(_QWORD *)&__src[15];
          BYTE8(__dst[15]) = BYTE8(__src[15]);
          BYTE8(__dst[16]) = BYTE8(__src[16]);
          *(_QWORD *)&__dst[16] = *(_QWORD *)&__src[16];
          *(_QWORD *)&__dst[17] = *(_QWORD *)&__src[17];
          WORD4(__dst[17]) = WORD4(__src[17]);
          __dst[0] = __src[0];
          __dst[1] = __src[1];
          BYTE8(__dst[10]) = 0;
          outlined release of DateComponents((uint64_t)__dst);
          swift_unknownObjectRelease();
          goto LABEL_36;
        }
        v39 = 0;
        v38 = 0;
        v40 = 0;
      }
      *(_QWORD *)&v61[32] = *(_QWORD *)&v68[2];
      v61[40] = BYTE8(v68[2]);
      *(_QWORD *)&v61[48] = *(_QWORD *)&v68[3];
      v61[56] = BYTE8(v68[3]);
      *(_QWORD *)&v61[64] = *(_QWORD *)&v68[4];
      v61[72] = BYTE8(v68[4]);
      *(_QWORD *)&v61[80] = *(_QWORD *)&v68[5];
      v61[88] = BYTE8(v68[5]);
      *(_QWORD *)&v61[96] = *(_QWORD *)&v68[6];
      v61[104] = BYTE8(v68[6]);
      *(_QWORD *)&v61[112] = *(_QWORD *)&v68[7];
      v61[120] = BYTE8(v68[7]);
      *(_QWORD *)&v61[128] = *(_QWORD *)&v68[8];
      v61[136] = BYTE8(v68[8]);
      *(_QWORD *)&v61[144] = *(_QWORD *)&v68[9];
      v61[152] = BYTE8(v68[9]);
      *(_QWORD *)&v61[160] = v38;
      v61[168] = v40;
      *(_QWORD *)&v61[176] = *(_QWORD *)&v68[11];
      v61[184] = BYTE8(v68[11]);
      *(_QWORD *)&v61[192] = *(_QWORD *)&v68[12];
      v61[200] = BYTE8(v68[12]);
      *(_QWORD *)&v61[208] = *(_QWORD *)&v68[13];
      v61[216] = BYTE8(v68[13]);
      *(_QWORD *)&v61[224] = *(_QWORD *)&v68[14];
      v61[232] = BYTE8(v68[14]);
      *(_QWORD *)&v61[240] = *(_QWORD *)&v68[15];
      v61[248] = BYTE8(v68[15]);
      v61[264] = BYTE8(v68[16]);
      *(_QWORD *)&v61[256] = *(_QWORD *)&v68[16];
      *(_QWORD *)&v61[272] = *(_QWORD *)&v68[17];
      v61[280] = BYTE8(v68[17]);
      v61[281] = v36;
      *(_OWORD *)v61 = v68[0];
      *(_OWORD *)&v61[16] = v68[1];
      memcpy(v66, v61, 0x11AuLL);
      *(_QWORD *)&__dst[2] = *(_QWORD *)&__src[2];
      BYTE8(__dst[2]) = BYTE8(__src[2]);
      *(_QWORD *)&__dst[3] = *(_QWORD *)&__src[3];
      BYTE8(__dst[3]) = BYTE8(__src[3]);
      *(_QWORD *)&__dst[4] = *(_QWORD *)&__src[4];
      BYTE8(__dst[4]) = BYTE8(__src[4]);
      *(_QWORD *)&__dst[5] = *(_QWORD *)&__src[5];
      BYTE8(__dst[5]) = BYTE8(__src[5]);
      *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[6];
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(_QWORD *)&__dst[7] = *(_QWORD *)&__src[7];
      BYTE8(__dst[7]) = BYTE8(__src[7]);
      *(_QWORD *)&__dst[8] = *(_QWORD *)&__src[8];
      BYTE8(__dst[8]) = BYTE8(__src[8]);
      *(_QWORD *)&__dst[9] = *(_QWORD *)&__src[9];
      BYTE8(__dst[9]) = BYTE8(__src[9]);
      *(_QWORD *)&__dst[10] = v39;
      BYTE8(__dst[10]) = BYTE8(__src[10]);
      *(_QWORD *)&__dst[11] = *(_QWORD *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(_QWORD *)&__dst[12] = *(_QWORD *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(_QWORD *)&__dst[13] = *(_QWORD *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(_QWORD *)&__dst[14] = *(_QWORD *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(_QWORD *)&__dst[15] = *(_QWORD *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      *(_QWORD *)&__dst[16] = *(_QWORD *)&__src[16];
      *(_QWORD *)&__dst[17] = *(_QWORD *)&__src[17];
      WORD4(__dst[17]) = WORD4(__src[17]);
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      memcpy(v65, __dst, 0x11AuLL);
      v42 = specialized static DateComponents.== infix(_:_:)((uint64_t)v66, v65);
      outlined release of DateComponents((uint64_t)v61);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      if (v42)
      {
        v43 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        v45 = v20[2];
        v44 = v20[3];
        if (v45 >= v44 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v20);
        v20[2] = v45 + 1;
        *(double *)&v20[v45 + 4] = v8;
LABEL_37:
        *(double *)v61 = v54;
        *(double *)&v61[8] = v43;
        *(_QWORD *)&v61[16] = v53;
        *(_QWORD *)&v61[24] = v53;
        *(double *)&v61[32] = v18;
        v61[40] = 0;
        memcpy(&v61[48], v67, 0x11AuLL);
        v46 = v70;
        v62 = v70;
        v63 = v52;
        v64 = 0;
        memcpy(__dst, v68, 0x11AuLL);
        v66[0] = v54;
        v66[1] = v43;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)v68);
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)v68);
        v47 = DateComponents._validate(for:)((uint64_t *)v66);
        outlined release of Calendar.DatesByAdding((uint64_t)v61);
        LOBYTE(v65[0]) = 1;
        v69 = 0;
        memcpy(&__src[5], v67, 0x11AuLL);
        __src[0] = xmmword_1820E51B0;
        LOBYTE(__src[1]) = 1;
        *((_QWORD *)&__src[1] + 1) = v53;
        *(_QWORD *)&__src[2] = v53;
        *((double *)&__src[2] + 1) = v18;
        LOBYTE(__src[3]) = 0;
        *((_QWORD *)&__src[3] + 1) = v53;
        *(double *)&__src[4] = v54;
        *((double *)&__src[4] + 1) = v43;
        BYTE10(__src[22]) = v46;
        *(_WORD *)((char *)&__src[22] + 11) = v52;
        *(_QWORD *)&__src[23] = 100;
        BYTE8(__src[23]) = !v47;
        Calendar.DatesByMatching.Iterator.next()();
        if ((BYTE8(__dst[0]) & 1) != 0)
        {
          v19 = v57;
        }
        else
        {
          v48 = *(_QWORD *)&__dst[0];
          v19 = v57;
          do
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
            v50 = v20[2];
            v49 = v20[3];
            if (v50 >= v49 >> 1)
              v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v20);
            v20[2] = v50 + 1;
            v20[v50 + 4] = v48;
            Calendar.DatesByMatching.Iterator.next()();
            v48 = *(_QWORD *)&__dst[0];
          }
          while ((BYTE8(__dst[0]) & 1) == 0);
        }
        memcpy(__dst, __src, 0x179uLL);
        outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v68);
        if (v19 == v56)
        {
          result = swift_bridgeObjectRelease();
          a5 = v51;
          goto LABEL_47;
        }
        goto LABEL_9;
      }
LABEL_36:
      v43 = v58;
      goto LABEL_37;
    }
  }
LABEL_17:
  *(_QWORD *)(v23 + 8 * v27) = v29 | v28;
  *(_BYTE *)(v30 + v26) = v24;
  v32 = *(_QWORD *)(v21 + 16);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (!v33)
  {
    *(_QWORD *)(v21 + 16) = v34;
    goto LABEL_10;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(Swift::OpaquePointer a1, Foundation::Calendar::Component in, Foundation::Date anchor)
{
  double *v3;
  uint64_t v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  int64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  char v102;
  double v103;
  double v104;
  __int128 v105;
  uint64_t ObjectType;
  void (*v107)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD);
  Swift::Bool v108;
  _QWORD *v109;
  double v110;
  double v111;
  uint64_t v112;
  void (*v113)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD);
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t i;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int_optional v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  int64_t v150;
  int64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char v162;
  int v163;
  _OWORD v164[18];
  _OWORD v165[18];
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  _OWORD __dst[18];
  _OWORD __src[18];
  __int128 v176[7];
  uint64_t v177;
  Swift::OpaquePointer_optional result;

  v163 = *(unsigned __int8 *)in;
  v5 = *v3;
  v6 = *(_OWORD *)(v4 + 80);
  v176[4] = *(_OWORD *)(v4 + 64);
  v176[5] = v6;
  v176[6] = *(_OWORD *)(v4 + 96);
  v177 = *(_QWORD *)(v4 + 112);
  v7 = *(_OWORD *)(v4 + 16);
  v176[0] = *(_OWORD *)v4;
  v176[1] = v7;
  v8 = *(_OWORD *)(v4 + 48);
  v176[2] = *(_OWORD *)(v4 + 32);
  v176[3] = v8;
  v9 = *((_QWORD *)a1._rawValue + 2);
  if (!v9)
  {
    v154 = MEMORY[0x1E0DEE9E0];
LABEL_152:
    if (v163 == 2)
      v102 = 10;
    else
      v102 = 11;
    v162 = v102;
    LOBYTE(v165[0]) = v163;
    v103 = 1.59271755e13;
    if (v5 <= 1.59271755e13)
      v103 = v5;
    v104 = fmax(v103, -2.11845067e11);
    v105 = v176[0];
    ObjectType = swift_getObjectType();
    *(double *)__dst = v104;
    v107 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD))(*((_QWORD *)&v176[0] + 1)
                                                                                            + 160);
    swift_unknownObjectRetain();
    v107(__src, v165, __dst, ObjectType, *((_QWORD *)&v176[0] + 1));
    swift_unknownObjectRelease();
    if ((__src[1] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v109 = 0;
LABEL_219:
      v149 = v109;
      goto LABEL_240;
    }
    v110 = *((double *)__src + 1);
    v111 = *(double *)__src;
    v112 = swift_allocObject();
    *(_QWORD *)(v112 + 16) = 0;
    *(_QWORD *)(v112 + 24) = 0;
    v160 = v112;
    *(_BYTE *)(v112 + 32) = 1;
    *(_QWORD *)&__dst[0] = 240;
    *(double *)v165 = v104;
    v113 = *(void (**)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, _QWORD))(*((_QWORD *)&v105 + 1)
                                                                                            + 192);
    swift_unknownObjectRetain();
    v113(__src, __dst, v165, ObjectType, *((_QWORD *)&v105 + 1));
    swift_unknownObjectRelease();
    v114 = v162;
    memcpy(__dst, __src, 0x11AuLL);
    v172 = 0;
    v173 = 1;
    v170 = 0;
    v171 = 1;
    v150 = v154 + 64;
    v115 = 1 << *(_BYTE *)(v154 + 32);
    v116 = -1;
    if (v115 < 64)
      v116 = ~(-1 << v115);
    v117 = v116 & *(_QWORD *)(v154 + 64);
    v151 = (unint64_t)(v115 + 63) >> 6;
    swift_bridgeObjectRetain();
    v118 = 0;
    v109 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v117)
      goto LABEL_164;
LABEL_165:
    v120 = v118 + 1;
    if (__OFADD__(v118, 1))
      goto LABEL_228;
    if (v120 < v151)
    {
      v121 = *(_QWORD *)(v150 + 8 * v120);
      ++v118;
      if (v121)
        goto LABEL_178;
      v118 = v120 + 1;
      if (v120 + 1 >= v151)
        goto LABEL_218;
      v121 = *(_QWORD *)(v150 + 8 * v118);
      if (v121)
        goto LABEL_178;
      v118 = v120 + 2;
      if (v120 + 2 >= v151)
        goto LABEL_218;
      v121 = *(_QWORD *)(v150 + 8 * v118);
      if (v121)
      {
LABEL_178:
        v159 = (v121 - 1) & v121;
        for (i = __clz(__rbit64(v121)) + (v118 << 6); ; i = __clz(__rbit64(v117)) | (v118 << 6))
        {
          v123 = *(char *)(*(_QWORD *)(v154 + 48) + i);
          v124 = *(_QWORD *)(*(_QWORD *)(v154 + 56) + 8 * i);
          v125 = one-time initialization token for weekdays;
          swift_bridgeObjectRetain();
          if (v125 != -1)
            swift_once();
          v126 = (char *)static Locale.Weekday.weekdays;
          v127 = *((_QWORD *)static Locale.Weekday.weekdays + 2);
          if (!v127)
            break;
          v158 = v118;
          swift_bridgeObjectRetain();
          v128 = 0;
          v129 = qword_1820E6400[v123];
          while (qword_1820E6400[v126[v128 + 32]] != v129)
          {
            v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease_n();
            if ((v130 & 1) != 0)
              goto LABEL_188;
            if (v127 == ++v128)
              goto LABEL_232;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_188:
          swift_bridgeObjectRelease();
          v131 = v128 + 1;
          if (__OFADD__(v128, 1))
            goto LABEL_224;
          v132 = *(_QWORD *)(v124 + 16);
          if (v132)
          {
            v133 = 0;
            v168 = 0;
            v169 = 1;
            v166 = 0;
            v167 = 1;
            if (v128 == 0x7FFFFFFFFFFFFFFELL)
              v134 = 0;
            else
              v134 = v128 + 1;
            v135 = v132 - 1;
            while (1)
            {
              v136 = *(_QWORD *)(v124 + 8 * v133 + 32);
              memcpy(v165, __dst, 0x11AuLL);
              outlined retain of DateComponents((uint64_t)__dst);
              if (v136 < 1)
              {
                v139.value = specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(&v166, v160, v176, v114, v163, v131, &v170, v5, v111, v110);
                v52 = __OFADD__(v139.value, v136);
                v139.value += v136;
                if (v52)
                  goto LABEL_222;
              }
              else
              {
                v137 = specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(&v168, v160, v176, v114, v163, v131, &v172, v5, v111);
                v138 = v137 - 1;
                if (__OFSUB__(v137, 1))
                {
                  __break(1u);
LABEL_221:
                  __break(1u);
LABEL_222:
                  __break(1u);
                  goto LABEL_223;
                }
                v139.value = v138 + v136;
                if (__OFADD__(v138, v136))
                  goto LABEL_221;
              }
              LOBYTE(v164[0]) = v114;
              v139.is_nil = 0;
              DateComponents.setValue(_:for:)(v139, (Foundation::Calendar::Component)v164);
              *(_QWORD *)&v164[2] = *(_QWORD *)&v165[2];
              BYTE8(v164[2]) = BYTE8(v165[2]);
              *(_QWORD *)&v164[3] = *(_QWORD *)&v165[3];
              BYTE8(v164[3]) = BYTE8(v165[3]);
              *(_QWORD *)&v164[4] = *(_QWORD *)&v165[4];
              BYTE8(v164[4]) = BYTE8(v165[4]);
              *(_QWORD *)&v164[5] = *(_QWORD *)&v165[5];
              BYTE8(v164[5]) = BYTE8(v165[5]);
              *(_QWORD *)&v164[6] = *(_QWORD *)&v165[6];
              BYTE8(v164[6]) = BYTE8(v165[6]);
              *(_QWORD *)&v164[7] = *(_QWORD *)&v165[7];
              BYTE8(v164[7]) = BYTE8(v165[7]);
              *(_QWORD *)&v164[8] = *(_QWORD *)&v165[8];
              BYTE8(v164[8]) = BYTE8(v165[8]);
              *(_QWORD *)&v164[9] = *(_QWORD *)&v165[9];
              BYTE8(v164[9]) = BYTE8(v165[9]);
              *(_QWORD *)&v164[10] = *(_QWORD *)&v165[10];
              BYTE8(v164[10]) = BYTE8(v165[10]);
              BYTE8(v164[11]) = v131 == 0x7FFFFFFFFFFFFFFFLL;
              *(_QWORD *)&v164[12] = *(_QWORD *)&v165[12];
              BYTE8(v164[12]) = BYTE8(v165[12]);
              *(_QWORD *)&v164[13] = *(_QWORD *)&v165[13];
              BYTE8(v164[13]) = BYTE8(v165[13]);
              *(_QWORD *)&v164[14] = *(_QWORD *)&v165[14];
              BYTE8(v164[14]) = BYTE8(v165[14]);
              *(_QWORD *)&v164[15] = *(_QWORD *)&v165[15];
              BYTE8(v164[15]) = BYTE8(v165[15]);
              BYTE8(v164[16]) = BYTE8(v165[16]);
              *(_QWORD *)&v164[16] = *(_QWORD *)&v165[16];
              *(_QWORD *)&v164[17] = *(_QWORD *)&v165[17];
              WORD4(v164[17]) = WORD4(v165[17]);
              v164[0] = v165[0];
              v164[1] = v165[1];
              *(_QWORD *)&v164[11] = v134;
              outlined retain of DateComponents((uint64_t)v164);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, v109);
              v141 = v109[2];
              v140 = v109[3];
              if (v141 >= v140 >> 1)
                v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v140 > 1), v141 + 1, 1, v109);
              v109[2] = v141 + 1;
              memcpy(&v109[36 * v141 + 4], v164, 0x11AuLL);
              outlined release of DateComponents((uint64_t)v164);
              if (v135 == v133)
                break;
              ++v133;
              v114 = v162;
            }
            swift_bridgeObjectRelease();
            v114 = v162;
            v118 = v158;
            v117 = v159;
            if (!v159)
              goto LABEL_165;
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v163 == 2)
            {
              v142 = 0;
              v143 = BYTE8(__dst[16]);
              v144 = 1;
              v145 = *(_QWORD *)&__dst[16];
            }
            else
            {
              v145 = 0;
              v144 = BYTE8(__dst[15]);
              v143 = 1;
              v142 = *(_QWORD *)&__dst[15];
            }
            v117 = v159;
            *(_QWORD *)&v165[2] = *(_QWORD *)&__dst[2];
            BYTE8(v165[2]) = BYTE8(__dst[2]);
            *(_QWORD *)&v165[3] = *(_QWORD *)&__dst[3];
            BYTE8(v165[3]) = BYTE8(__dst[3]);
            *(_QWORD *)&v165[4] = *(_QWORD *)&__dst[4];
            BYTE8(v165[4]) = BYTE8(__dst[4]);
            *(_QWORD *)&v165[5] = *(_QWORD *)&__dst[5];
            BYTE8(v165[5]) = BYTE8(__dst[5]);
            *(_QWORD *)&v165[6] = *(_QWORD *)&__dst[6];
            BYTE8(v165[6]) = BYTE8(__dst[6]);
            *(_QWORD *)&v165[7] = *(_QWORD *)&__dst[7];
            BYTE8(v165[7]) = BYTE8(__dst[7]);
            *(_QWORD *)&v165[8] = *(_QWORD *)&__dst[8];
            BYTE8(v165[8]) = BYTE8(__dst[8]);
            *(_QWORD *)&v165[9] = *(_QWORD *)&__dst[9];
            BYTE8(v165[9]) = BYTE8(__dst[9]);
            *(_QWORD *)&v165[10] = *(_QWORD *)&__dst[10];
            BYTE8(v165[10]) = BYTE8(__dst[10]);
            if (v128 == 0x7FFFFFFFFFFFFFFELL)
              v146 = 0;
            else
              v146 = v128 + 1;
            *(_QWORD *)&v165[11] = v146;
            BYTE8(v165[11]) = v128 == 0x7FFFFFFFFFFFFFFELL;
            *(_QWORD *)&v165[12] = *(_QWORD *)&__dst[12];
            BYTE8(v165[12]) = BYTE8(__dst[12]);
            *(_QWORD *)&v165[13] = *(_QWORD *)&__dst[13];
            BYTE8(v165[13]) = BYTE8(__dst[13]);
            *(_QWORD *)&v165[14] = *(_QWORD *)&__dst[14];
            BYTE8(v165[14]) = BYTE8(__dst[14]);
            *(_QWORD *)&v165[15] = v142;
            BYTE8(v165[15]) = v144;
            BYTE8(v165[16]) = v143;
            *(_QWORD *)&v165[16] = v145;
            *(_QWORD *)&v165[17] = *(_QWORD *)&__dst[17];
            WORD4(v165[17]) = WORD4(__dst[17]);
            v165[0] = __dst[0];
            v165[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v165);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, v109);
            v118 = v158;
            v148 = v109[2];
            v147 = v109[3];
            if (v148 >= v147 >> 1)
              v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v147 > 1), v148 + 1, 1, v109);
            v109[2] = v148 + 1;
            memcpy(&v109[36 * v148 + 4], v165, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v165);
            if (!v159)
              goto LABEL_165;
          }
LABEL_164:
          v159 = (v117 - 1) & v117;
        }
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v122 = v120 + 3;
      if (v122 < v151)
      {
        v121 = *(_QWORD *)(v150 + 8 * v122);
        if (!v121)
        {
          while (1)
          {
            v118 = v122 + 1;
            if (__OFADD__(v122, 1))
              goto LABEL_231;
            if (v118 >= v151)
              goto LABEL_218;
            v121 = *(_QWORD *)(v150 + 8 * v118);
            ++v122;
            if (v121)
              goto LABEL_178;
          }
        }
        v118 = v122;
        goto LABEL_178;
      }
    }
LABEL_218:
    swift_release();
    outlined release of DateComponents((uint64_t)__dst);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_219;
  }
  v10 = (char *)a1._rawValue + 32;
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = MEMORY[0x1E0DEE9E0];
  v161 = v10;
  while (1)
  {
    v13 = &v10[16 * v11];
    v14 = *(_QWORD *)v13;
    v15 = v13[8];
    if ((v15 & 0x80000000) == 0)
      break;
    v26 = v15 & 0x7F;
    if (!*(_QWORD *)(v12 + 16) || (v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26), (v28 & 1) == 0))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_18205C850;
      *(_QWORD *)(v29 + 32) = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&__src[0] = v12;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      v45 = *(_QWORD *)(v12 + 16);
      v46 = (v44 & 1) == 0;
      v47 = v45 + v46;
      if (!__OFADD__(v45, v46))
      {
        v48 = v44;
        if (*(_QWORD *)(v12 + 24) < v47)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
          v23 = *(_QWORD *)&__src[0];
          v49 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
          if ((v48 & 1) != (v50 & 1))
            goto LABEL_239;
          v35 = v49;
          v10 = v161;
          if ((v48 & 1) != 0)
            goto LABEL_36;
          goto LABEL_31;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v23 = v12;
          v10 = v161;
          if ((v44 & 1) != 0)
            goto LABEL_36;
          goto LABEL_31;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
        v72 = static _DictionaryStorage.copy(original:)();
        v23 = v72;
        v73 = v12;
        v10 = v161;
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_111;
        v74 = (char *)(v72 + 64);
        v75 = (char *)(v12 + 64);
        v76 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
        v152 = v12 + 64;
        if (v23 != v12 || v74 >= &v75[8 * v76])
          memmove(v74, v75, 8 * v76);
        v77 = 0;
        *(_QWORD *)(v23 + 16) = *(_QWORD *)(v73 + 16);
        v78 = 1 << *(_BYTE *)(v73 + 32);
        if (v78 < 64)
          v79 = ~(-1 << v78);
        else
          v79 = -1;
        v80 = v79 & *(_QWORD *)(v73 + 64);
        v156 = (unint64_t)(v78 + 63) >> 6;
        while (1)
        {
          if (v80)
          {
            v81 = __clz(__rbit64(v80));
            v80 &= v80 - 1;
            v82 = v81 | (v77 << 6);
          }
          else
          {
            v84 = v77 + 1;
            if (__OFADD__(v77, 1))
              goto LABEL_234;
            v10 = v161;
            if (v84 >= v156)
              goto LABEL_111;
            v85 = *(_QWORD *)(v152 + 8 * v84);
            ++v77;
            if (!v85)
            {
              v77 = v84 + 1;
              if (v84 + 1 >= v156)
                goto LABEL_111;
              v85 = *(_QWORD *)(v152 + 8 * v77);
              if (!v85)
              {
                v77 = v84 + 2;
                if (v84 + 2 >= v156)
                  goto LABEL_111;
                v85 = *(_QWORD *)(v152 + 8 * v77);
                if (!v85)
                {
                  v77 = v84 + 3;
                  if (v84 + 3 >= v156)
                    goto LABEL_111;
                  v85 = *(_QWORD *)(v152 + 8 * v77);
                  if (!v85)
                  {
                    v77 = v84 + 4;
                    if (v84 + 4 >= v156)
                      goto LABEL_111;
                    v85 = *(_QWORD *)(v152 + 8 * v77);
                    if (!v85)
                    {
                      v77 = v84 + 5;
                      if (v84 + 5 >= v156)
                        goto LABEL_111;
                      v85 = *(_QWORD *)(v152 + 8 * v77);
                      if (!v85)
                      {
                        v77 = v84 + 6;
                        if (v84 + 6 >= v156)
                          goto LABEL_111;
                        v85 = *(_QWORD *)(v152 + 8 * v77);
                        if (!v85)
                        {
                          v86 = v84 + 7;
                          if (v86 >= v156)
                            goto LABEL_111;
                          v85 = *(_QWORD *)(v152 + 8 * v86);
                          if (!v85)
                          {
                            v10 = v161;
                            while (1)
                            {
                              v77 = v86 + 1;
                              if (__OFADD__(v86, 1))
                                goto LABEL_237;
                              if (v77 >= v156)
                                break;
                              v85 = *(_QWORD *)(v152 + 8 * v77);
                              ++v86;
                              if (v85)
                                goto LABEL_110;
                            }
LABEL_111:
                            swift_bridgeObjectRelease();
                            if ((v48 & 1) != 0)
                            {
LABEL_36:
                              v54 = *(_QWORD *)(v23 + 56);
                              swift_bridgeObjectRelease();
                              *(_QWORD *)(v54 + 8 * v35) = v29;
                              goto LABEL_74;
                            }
LABEL_31:
                            *(_QWORD *)(v23 + 8 * (v35 >> 6) + 64) |= 1 << v35;
                            *(_BYTE *)(*(_QWORD *)(v23 + 48) + v35) = v26;
                            *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v35) = v29;
                            v51 = *(_QWORD *)(v23 + 16);
                            v52 = __OFADD__(v51, 1);
                            v53 = v51 + 1;
                            if (!v52)
                              goto LABEL_73;
LABEL_229:
                            __break(1u);
LABEL_230:
                            __break(1u);
LABEL_231:
                            __break(1u);
LABEL_232:
                            swift_bridgeObjectRelease();
                            __break(1u);
LABEL_233:
                            __break(1u);
LABEL_234:
                            __break(1u);
LABEL_235:
                            __break(1u);
                            goto LABEL_236;
                          }
                          v77 = v86;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_110:
            v80 = (v85 - 1) & v85;
            v82 = __clz(__rbit64(v85)) + (v77 << 6);
          }
          v83 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + 8 * v82);
          *(_BYTE *)(*(_QWORD *)(v23 + 48) + v82) = *(_BYTE *)(*(_QWORD *)(v73 + 48) + v82);
          *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v82) = v83;
          swift_bridgeObjectRetain();
        }
      }
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
      goto LABEL_229;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v27);
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
      goto LABEL_75;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30 + 1, 1, (_QWORD *)v29);
    v32 = *(_QWORD *)(v29 + 16);
    v31 = *(_QWORD *)(v29 + 24);
    if (v32 >= v31 >> 1)
      v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, (_QWORD *)v29);
    *(_QWORD *)(v29 + 16) = v32 + 1;
    *(_QWORD *)(v29 + 8 * v32 + 32) = v14;
    v33 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&__src[0] = v12;
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    v36 = *(_QWORD *)(v12 + 16);
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      goto LABEL_230;
    v39 = v34;
    if (*(_QWORD *)(v12 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
      v23 = *(_QWORD *)&__src[0];
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_239;
      v35 = v40;
      v10 = v161;
      if ((v39 & 1) == 0)
        goto LABEL_147;
      goto LABEL_36;
    }
    if ((v33 & 1) != 0)
    {
      v23 = v12;
      v10 = v161;
      if ((v34 & 1) == 0)
        goto LABEL_147;
      goto LABEL_36;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
    v87 = static _DictionaryStorage.copy(original:)();
    v23 = v87;
    v88 = v12;
    v10 = v161;
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_146;
    v89 = (char *)(v87 + 64);
    v90 = (char *)(v12 + 64);
    v91 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
    v153 = v12 + 64;
    if (v23 != v12 || v89 >= &v90[8 * v91])
      memmove(v89, v90, 8 * v91);
    v12 = 0;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v88 + 16);
    v92 = 1 << *(_BYTE *)(v88 + 32);
    if (v92 < 64)
      v93 = ~(-1 << v92);
    else
      v93 = -1;
    v94 = v93 & *(_QWORD *)(v88 + 64);
    v157 = (unint64_t)(v92 + 63) >> 6;
    while (1)
    {
      if (v94)
      {
        v95 = __clz(__rbit64(v94));
        v94 &= v94 - 1;
        v96 = v95 | (v12 << 6);
        goto LABEL_122;
      }
      v98 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_235;
      v10 = v161;
      if (v98 >= v157)
        goto LABEL_146;
      v99 = *(_QWORD *)(v153 + 8 * v98);
      ++v12;
      if (!v99)
      {
        v12 = v98 + 1;
        if (v98 + 1 >= v157)
          goto LABEL_146;
        v99 = *(_QWORD *)(v153 + 8 * v12);
        if (!v99)
        {
          v12 = v98 + 2;
          if (v98 + 2 >= v157)
            goto LABEL_146;
          v99 = *(_QWORD *)(v153 + 8 * v12);
          if (!v99)
          {
            v12 = v98 + 3;
            if (v98 + 3 >= v157)
              goto LABEL_146;
            v99 = *(_QWORD *)(v153 + 8 * v12);
            if (!v99)
            {
              v12 = v98 + 4;
              if (v98 + 4 >= v157)
                goto LABEL_146;
              v99 = *(_QWORD *)(v153 + 8 * v12);
              if (!v99)
              {
                v12 = v98 + 5;
                if (v98 + 5 >= v157)
                  goto LABEL_146;
                v99 = *(_QWORD *)(v153 + 8 * v12);
                if (!v99)
                {
                  v12 = v98 + 6;
                  if (v98 + 6 >= v157)
                    goto LABEL_146;
                  v99 = *(_QWORD *)(v153 + 8 * v12);
                  if (!v99)
                    break;
                }
              }
            }
          }
        }
      }
LABEL_145:
      v94 = (v99 - 1) & v99;
      v96 = __clz(__rbit64(v99)) + (v12 << 6);
LABEL_122:
      v97 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * v96);
      *(_BYTE *)(*(_QWORD *)(v23 + 48) + v96) = *(_BYTE *)(*(_QWORD *)(v88 + 48) + v96);
      *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v96) = v97;
      swift_bridgeObjectRetain();
    }
    v100 = v98 + 7;
    if (v100 >= v157)
      goto LABEL_146;
    v99 = *(_QWORD *)(v153 + 8 * v100);
    if (v99)
    {
      v12 = v100;
      goto LABEL_145;
    }
    while (1)
    {
      v12 = v100 + 1;
      if (__OFADD__(v100, 1))
        goto LABEL_238;
      v10 = v161;
      if (v12 >= v157)
        break;
      v99 = *(_QWORD *)(v153 + 8 * v12);
      ++v100;
      if (v99)
        goto LABEL_145;
    }
LABEL_146:
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
      goto LABEL_36;
LABEL_147:
    *(_QWORD *)(v23 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    *(_BYTE *)(*(_QWORD *)(v23 + 48) + v35) = v26;
    *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v35) = v29;
    v101 = *(_QWORD *)(v23 + 16);
    v52 = __OFADD__(v101, 1);
    v53 = v101 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_150;
    }
LABEL_73:
    *(_QWORD *)(v23 + 16) = v53;
LABEL_74:
    swift_bridgeObjectRelease();
    v12 = v23;
LABEL_75:
    if (++v11 == v9)
    {
LABEL_150:
      v154 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
  }
  v16 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&__src[0] = v12;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  v19 = *(_QWORD *)(v12 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  v22 = v17;
  if (*(_QWORD *)(v12 + 24) < v21)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
    v23 = *(_QWORD *)&__src[0];
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v22 & 1) != (v25 & 1))
      goto LABEL_239;
    v18 = v24;
    if ((v22 & 1) == 0)
      goto LABEL_72;
LABEL_23:
    v42 = *(_QWORD *)(v23 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v42 + 8 * v18) = MEMORY[0x1E0DEE9D8];
    goto LABEL_74;
  }
  if ((v16 & 1) != 0)
  {
    v23 = v12;
    if ((v17 & 1) != 0)
      goto LABEL_23;
LABEL_72:
    *(_QWORD *)(v23 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    *(_BYTE *)(*(_QWORD *)(v23 + 48) + v18) = v14;
    *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v18) = MEMORY[0x1E0DEE9D8];
    v71 = *(_QWORD *)(v23 + 16);
    v52 = __OFADD__(v71, 1);
    v53 = v71 + 1;
    if (!v52)
      goto LABEL_73;
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  v55 = static _DictionaryStorage.copy(original:)();
  v23 = v55;
  v56 = v12;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_23;
    goto LABEL_72;
  }
  v57 = (char *)(v55 + 64);
  v58 = (char *)(v12 + 64);
  v59 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  v155 = v12 + 64;
  if (v23 != v12 || v57 >= &v58[8 * v59])
    memmove(v57, v58, 8 * v59);
  v60 = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v56 + 16);
  v61 = 1 << *(_BYTE *)(v56 + 32);
  if (v61 < 64)
    v62 = ~(-1 << v61);
  else
    v62 = -1;
  v63 = v62 & *(_QWORD *)(v56 + 64);
  v64 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      v65 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v66 = v65 | (v60 << 6);
LABEL_46:
      v67 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v66);
      *(_BYTE *)(*(_QWORD *)(v23 + 48) + v66) = *(_BYTE *)(*(_QWORD *)(v56 + 48) + v66);
      *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v66) = v67;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v68 = v60 + 1;
  if (__OFADD__(v60, 1))
    goto LABEL_233;
  v10 = v161;
  if (v68 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v68);
  ++v60;
  if (v69)
    goto LABEL_70;
  v60 = v68 + 1;
  if (v68 + 1 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
    goto LABEL_70;
  v60 = v68 + 2;
  if (v68 + 2 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
    goto LABEL_70;
  v60 = v68 + 3;
  if (v68 + 3 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
    goto LABEL_70;
  v60 = v68 + 4;
  if (v68 + 4 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
    goto LABEL_70;
  v60 = v68 + 5;
  if (v68 + 5 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
    goto LABEL_70;
  v60 = v68 + 6;
  if (v68 + 6 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v60);
  if (v69)
  {
LABEL_70:
    v63 = (v69 - 1) & v69;
    v66 = __clz(__rbit64(v69)) + (v60 << 6);
    goto LABEL_46;
  }
  v70 = v68 + 7;
  if (v70 >= v64)
    goto LABEL_71;
  v69 = *(_QWORD *)(v155 + 8 * v70);
  if (v69)
  {
    v60 = v70;
    goto LABEL_70;
  }
  v10 = v161;
  while (1)
  {
    v60 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v60 >= v64)
      goto LABEL_71;
    v69 = *(_QWORD *)(v155 + 8 * v60);
    ++v70;
    if (v69)
      goto LABEL_70;
  }
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  v149 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_240:
  result.value._rawValue = v149;
  result.is_nil = v108;
  return result;
}

Swift::Int closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)(double *a1, uint64_t a2, __int128 *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::UInt v17;
  Swift::Int result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34[18];
  double __dst[36];
  _OWORD __src[18];
  _OWORD v37[18];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  _OWORD v73[19];

  if (!a2)
    return 0;
  v33 = *(_QWORD *)(a2 + 16);
  if (!v33)
    return 0;
  v3 = *a1;
  v32 = a2 + 32;
  v72 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v4 = 1.59271755e13;
  if (v3 <= 1.59271755e13)
    v4 = v3;
  v5 = fmax(v4, -2.11845067e11);
  swift_bridgeObjectRetain_n();
  v6 = 0;
  while (2)
  {
    memcpy(v73, (const void *)(v32 + 288 * v6++), 0x11AuLL);
    v11 = static _SetStorage.allocate(capacity:)();
    v12 = 0;
    v13 = v11 + 56;
    do
    {
      v17 = outlined read-only object #0 of closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)[v12 + 32];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v11 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      v22 = *(_QWORD *)(v13 + 8 * (v20 >> 6));
      v23 = 1 << v20;
      v24 = *(_QWORD *)(v11 + 48);
      if (((1 << v20) & v22) != 0)
      {
        if (*(unsigned __int8 *)(v24 + v20) == (_DWORD)v17)
          goto LABEL_12;
        v25 = ~v19;
        while (1)
        {
          v20 = (v20 + 1) & v25;
          v21 = v20 >> 6;
          v22 = *(_QWORD *)(v13 + 8 * (v20 >> 6));
          v23 = 1 << v20;
          if ((v22 & (1 << v20)) == 0)
            break;
          if (*(unsigned __int8 *)(v24 + v20) == (_DWORD)v17)
            goto LABEL_12;
        }
      }
      *(_QWORD *)(v13 + 8 * v21) = v23 | v22;
      *(_BYTE *)(v24 + v20) = v17;
      v14 = *(_QWORD *)(v11 + 16);
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
      {
        __break(1u);
        goto LABEL_33;
      }
      *(_QWORD *)(v11 + 16) = v16;
LABEL_12:
      ++v12;
    }
    while (v12 != 15);
    outlined retain of DateComponents((uint64_t)v73);
    outlined retain of DateComponents((uint64_t)v73);
    outlined retain of Locale((uint64_t)&v72);
    specialized _NativeSet.filter(_:)(v11);
    outlined release of DateComponents((uint64_t)v73);
    v37[0] = v72;
    v26 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v26, __src);
    __dst[0] = v5;
    Calendar._dateComponents(_:from:)((uint64_t *)__src, __dst, &v38);
    swift_release();
    v27 = BYTE9(v73[17]);
    if (BYTE9(v73[17]) == 2)
    {
      result = outlined retain of DateComponents((uint64_t)v73);
    }
    else
    {
      *(_QWORD *)&__dst[0] = 4;
      v28 = *((_QWORD *)&v72 + 1);
      ObjectType = swift_getObjectType();
      *(double *)__src = v5;
      v30 = *(void (**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v28 + 192);
      outlined retain of DateComponents((uint64_t)v73);
      v30(v37, __dst, __src, ObjectType, v28);
      memcpy(__src, v37, 0x11AuLL);
      result = outlined release of DateComponents((uint64_t)__src);
      HIBYTE(v71) = BYTE9(__src[17]);
    }
    v8 = *(_QWORD *)&v73[10];
    v7 = v56;
    v9 = v57 ^ 1 | BYTE8(v73[10]);
    if ((v57 & 1) != 0 || (BYTE8(v73[10]) & 1) != 0)
      goto LABEL_7;
    v31 = v56 - *(_QWORD *)&v73[10];
    if (__OFSUB__(v56, *(_QWORD *)&v73[10]))
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v31 < 0)
      v31 = *(_QWORD *)&v73[10] - v56;
    if ((unint64_t)v31 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)v73);
      *(_QWORD *)&v37[2] = v40;
      BYTE8(v37[2]) = v41;
      *(_QWORD *)&v37[3] = v42;
      BYTE8(v37[3]) = v43;
      *(_QWORD *)&v37[4] = v44;
      BYTE8(v37[4]) = v45;
      *(_QWORD *)&v37[5] = v46;
      BYTE8(v37[5]) = v47;
      *(_QWORD *)&v37[6] = v48;
      BYTE8(v37[6]) = v49;
      *(_QWORD *)&v37[7] = v50;
      BYTE8(v37[7]) = v51;
      *(_QWORD *)&v37[8] = v52;
      BYTE8(v37[8]) = v53;
      *(_QWORD *)&v37[9] = v54;
      BYTE8(v37[9]) = v55;
      *(_QWORD *)&v37[10] = v7;
      *(_QWORD *)&v37[11] = v58;
      BYTE8(v37[11]) = v59;
      *(_QWORD *)&v37[12] = v60;
      BYTE8(v37[12]) = v61;
      *(_QWORD *)&v37[13] = v62;
      BYTE8(v37[13]) = v63;
      *(_QWORD *)&v37[14] = v64;
      BYTE8(v37[14]) = v65;
      *(_QWORD *)&v37[15] = v66;
      BYTE8(v37[15]) = v67;
      BYTE8(v37[16]) = v69;
      *(_QWORD *)&v37[16] = v68;
      *(_QWORD *)&v37[17] = v70;
      WORD4(v37[17]) = v71;
      v37[0] = v38;
      v37[1] = v39;
      BYTE8(v37[10]) = 0;
      outlined release of DateComponents((uint64_t)v37);
      outlined release of Locale((uint64_t)&v72);
      outlined release of DateComponents((uint64_t)v73);
      goto LABEL_8;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
LABEL_7:
    *(_QWORD *)&__src[2] = *(_QWORD *)&v73[2];
    BYTE8(__src[2]) = BYTE8(v73[2]);
    *(_QWORD *)&__src[3] = *(_QWORD *)&v73[3];
    BYTE8(__src[3]) = BYTE8(v73[3]);
    *(_QWORD *)&__src[4] = *(_QWORD *)&v73[4];
    BYTE8(__src[4]) = BYTE8(v73[4]);
    *(_QWORD *)&__src[5] = *(_QWORD *)&v73[5];
    BYTE8(__src[5]) = BYTE8(v73[5]);
    *(_QWORD *)&__src[6] = *(_QWORD *)&v73[6];
    BYTE8(__src[6]) = BYTE8(v73[6]);
    *(_QWORD *)&__src[7] = *(_QWORD *)&v73[7];
    BYTE8(__src[7]) = BYTE8(v73[7]);
    *(_QWORD *)&__src[8] = *(_QWORD *)&v73[8];
    BYTE8(__src[8]) = BYTE8(v73[8]);
    *(_QWORD *)&__src[9] = *(_QWORD *)&v73[9];
    BYTE8(__src[9]) = BYTE8(v73[9]);
    *(_QWORD *)&__src[10] = v8;
    BYTE8(__src[10]) = v9;
    *(_QWORD *)&__src[11] = *(_QWORD *)&v73[11];
    BYTE8(__src[11]) = BYTE8(v73[11]);
    *(_QWORD *)&__src[12] = *(_QWORD *)&v73[12];
    BYTE8(__src[12]) = BYTE8(v73[12]);
    *(_QWORD *)&__src[13] = *(_QWORD *)&v73[13];
    BYTE8(__src[13]) = BYTE8(v73[13]);
    *(_QWORD *)&__src[14] = *(_QWORD *)&v73[14];
    BYTE8(__src[14]) = BYTE8(v73[14]);
    *(_QWORD *)&__src[15] = *(_QWORD *)&v73[15];
    BYTE8(__src[15]) = BYTE8(v73[15]);
    BYTE8(__src[16]) = BYTE8(v73[16]);
    *(_QWORD *)&__src[16] = *(_QWORD *)&v73[16];
    *(_QWORD *)&__src[17] = *(_QWORD *)&v73[17];
    BYTE8(__src[17]) = BYTE8(v73[17]);
    BYTE9(__src[17]) = v27;
    __src[0] = v73[0];
    __src[1] = v73[1];
    memcpy(__dst, __src, 0x11AuLL);
    *(_QWORD *)&v37[2] = v40;
    BYTE8(v37[2]) = v41;
    *(_QWORD *)&v37[3] = v42;
    BYTE8(v37[3]) = v43;
    *(_QWORD *)&v37[4] = v44;
    BYTE8(v37[4]) = v45;
    *(_QWORD *)&v37[5] = v46;
    BYTE8(v37[5]) = v47;
    *(_QWORD *)&v37[6] = v48;
    BYTE8(v37[6]) = v49;
    *(_QWORD *)&v37[7] = v50;
    BYTE8(v37[7]) = v51;
    *(_QWORD *)&v37[8] = v52;
    BYTE8(v37[8]) = v53;
    *(_QWORD *)&v37[9] = v54;
    BYTE8(v37[9]) = v55;
    *(_QWORD *)&v37[10] = v7;
    BYTE8(v37[10]) = v57;
    *(_QWORD *)&v37[11] = v58;
    BYTE8(v37[11]) = v59;
    *(_QWORD *)&v37[12] = v60;
    BYTE8(v37[12]) = v61;
    *(_QWORD *)&v37[13] = v62;
    BYTE8(v37[13]) = v63;
    *(_QWORD *)&v37[14] = v64;
    BYTE8(v37[14]) = v65;
    *(_QWORD *)&v37[15] = v66;
    BYTE8(v37[15]) = v67;
    BYTE8(v37[16]) = v69;
    *(_QWORD *)&v37[16] = v68;
    *(_QWORD *)&v37[17] = v70;
    WORD4(v37[17]) = v71;
    v37[0] = v38;
    v37[1] = v39;
    memcpy(v34, v37, 0x11AuLL);
    v10 = specialized static DateComponents.== infix(_:_:)((uint64_t)__dst, v34);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v37);
    outlined release of Locale((uint64_t)&v72);
    outlined release of DateComponents((uint64_t)v73);
    if (v10)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
LABEL_8:
    if (v6 != v33)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)@<X0>(double *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, _QWORD *a5@<X8>, Foundation::Date a6@<D0>)
{
  double v9;
  Swift::OpaquePointer v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void (*v18)(double *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int64_t v43;
  uint64_t result;
  _QWORD *v45;
  unint64_t v46;
  unsigned __int8 v47;
  char v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD __src[18];
  _QWORD v54[42];
  _OWORD __dst[18];
  double v56[43];

  v9 = *a1;
  v10._rawValue = (void *)a2[9];
  LOBYTE(v54[0]) = a3;
  v56[0] = v9;
  v11 = (unint64_t)Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(v10, (Foundation::Calendar::Component)v54, a6);
  if (!v11)
    goto LABEL_36;
  v12 = v11;
  v45 = a5;
  LOBYTE(__dst[0]) = a4;
  v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13)
    v13 = v9;
  v14 = fmax(v13, -2.11845067e11);
  v15 = *a2;
  v16 = a2[1];
  ObjectType = swift_getObjectType();
  *(double *)v54 = v14;
  v18 = *(void (**)(double *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t))(v16 + 160);
  swift_unknownObjectRetain();
  v51 = v16;
  v18(v56, __dst, v54, ObjectType, v16);
  v52 = v15;
  swift_unknownObjectRelease();
  if ((LOBYTE(v56[2]) & 1) != 0)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 16);
    if (v19)
    {
      v50 = v56[0];
      v20 = v56[1] + v56[0];
      if (v56[1] + v56[0] < v56[0])
        goto LABEL_35;
      v48 = *((_BYTE *)a2 + 16);
      v49 = *((unsigned __int8 *)a2 + 18);
      v47 = *((_BYTE *)a2 + 17);
      memcpy(__dst, (const void *)(v12 + 32), 0x11AuLL);
      v21 = v19 - 1;
      v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v23 = 320;
      v46 = v12;
      while (1)
      {
        if (v49 == 3)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 1;
          v28 = 2;
          v29 = 1;
          v30 = 1;
        }
        else
        {
          v30 = BYTE8(__dst[2]);
          v26 = *(_QWORD *)&__dst[2];
          v29 = BYTE8(__dst[3]);
          v25 = *(_QWORD *)&__dst[3];
          v27 = BYTE8(__dst[4]);
          v24 = *(_QWORD *)&__dst[4];
          v28 = BYTE9(__dst[17]);
        }
        *(_QWORD *)&__src[2] = v26;
        BYTE8(__src[2]) = v30;
        *(_QWORD *)&__src[3] = v25;
        BYTE8(__src[3]) = v29;
        *(_QWORD *)&__src[4] = v24;
        BYTE8(__src[4]) = v27;
        *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
        BYTE8(__src[5]) = BYTE8(__dst[5]);
        *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
        BYTE8(__src[6]) = BYTE8(__dst[6]);
        *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
        BYTE8(__src[7]) = BYTE8(__dst[7]);
        *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
        BYTE8(__src[8]) = BYTE8(__dst[8]);
        *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
        BYTE8(__src[9]) = BYTE8(__dst[9]);
        *(_QWORD *)&__src[10] = *(_QWORD *)&__dst[10];
        BYTE8(__src[10]) = BYTE8(__dst[10]);
        *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
        BYTE8(__src[11]) = BYTE8(__dst[11]);
        *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
        BYTE8(__src[12]) = BYTE8(__dst[12]);
        *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
        BYTE8(__src[13]) = BYTE8(__dst[13]);
        *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
        BYTE8(__src[14]) = BYTE8(__dst[14]);
        *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
        BYTE8(__src[15]) = BYTE8(__dst[15]);
        BYTE8(__src[16]) = BYTE8(__dst[16]);
        *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
        *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
        BYTE8(__src[17]) = BYTE8(__dst[17]);
        BYTE9(__src[17]) = v28;
        __src[0] = __dst[0];
        __src[1] = __dst[1];
        v54[0] = v52;
        v54[1] = v51;
        *(double *)&v54[2] = v50;
        *(double *)&v54[3] = v50;
        *(double *)&v54[4] = v20;
        LOBYTE(v54[5]) = 0;
        memcpy(&v54[6], __src, 0x11AuLL);
        BYTE2(v54[41]) = v48;
        *(_WORD *)((char *)&v54[41] + 3) = v47;
        memcpy(v56, v54, 0x14DuLL);
        outlined retain of DateComponents((uint64_t)__dst);
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)__src);
        v31 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v56);
        outlined release of Calendar.DatesByAdding((uint64_t)v54);
        v32 = *(_QWORD *)(v31 + 16);
        v33 = v22[2];
        v34 = v33 + v32;
        if (__OFADD__(v33, v32))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v34 <= v22[3] >> 1)
        {
          if (*(_QWORD *)(v31 + 16))
            goto LABEL_15;
        }
        else
        {
          if (v33 <= v34)
            v43 = v33 + v32;
          else
            v43 = v33;
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v43, 1, v22);
          if (*(_QWORD *)(v31 + 16))
          {
LABEL_15:
            v36 = v22[2];
            if ((v22[3] >> 1) - v36 < v32)
              goto LABEL_33;
            v37 = (char *)&v22[v36 + 4];
            v38 = (char *)(v31 + 32);
            v39 = 8 * v32;
            if (v31 + 32 < (unint64_t)&v37[8 * v32] && v37 < &v38[v39])
              goto LABEL_38;
            memcpy(v37, v38, v39);
            if (v32)
            {
              v40 = v22[2];
              v41 = __OFADD__(v40, v32);
              v42 = v40 + v32;
              if (v41)
                goto LABEL_34;
              v22[2] = v42;
            }
            goto LABEL_26;
          }
        }
        if (v32)
          goto LABEL_32;
LABEL_26:
        swift_release();
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)__src);
        if (!v21)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        memcpy(__dst, (const void *)(v46 + v23), 0x11AuLL);
        v23 += 288;
        --v21;
      }
    }
    result = swift_bridgeObjectRelease();
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_30:
    *v45 = v22;
  }
  return result;
}

uint64_t getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(uint64_t a1, __int128 *a2, char a3, char a4, double a5)
{
  double v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  double v15;
  char v16;
  char v17;
  __int128 v18;

  if (*(_BYTE *)(a1 + 32) != 1)
    return *(_QWORD *)(a1 + 16);
  v17 = a3;
  v16 = a4;
  if (a5 > 1.59271755e13)
    a5 = 1.59271755e13;
  v6 = fmax(a5, -2.11845067e11);
  v18 = *a2;
  v7 = *((_QWORD *)&v18 + 1);
  ObjectType = swift_getObjectType();
  v15 = v6;
  v9 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)&v18 + 1) + 144);
  outlined retain of Locale((uint64_t)&v18);
  v10 = v9(&v17, &v16, &v15, ObjectType, v7);
  v12 = v11;
  LOBYTE(ObjectType) = v13;
  result = outlined release of Locale((uint64_t)&v18);
  if ((ObjectType & 1) == 0)
  {
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 0;
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(_BYTE *a1, __int128 *a2, double a3)
{
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t result;
  double v9;
  _QWORD v10[23];
  char v11;
  uint64_t v12;
  __int128 v13;

  if (a1[8] != 1)
    return *(_QWORD *)a1;
  v13 = *a2;
  v12 = 128;
  if (a3 > 1.59271755e13)
    a3 = 1.59271755e13;
  v4 = fmax(a3, -2.11845067e11);
  v5 = *((_QWORD *)&v13 + 1);
  ObjectType = swift_getObjectType();
  v9 = v4;
  v7 = *(void (**)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(*((_QWORD *)&v13 + 1) + 192);
  outlined retain of Locale((uint64_t)&v13);
  v7(v10, &v12, &v9, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v10);
  outlined release of Locale((uint64_t)&v13);
  if (v11)
    result = 0;
  else
    result = v10[22];
  *(_QWORD *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(_BYTE *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v5;
  double v6;
  double v7;
  uint64_t ObjectType;
  uint64_t result;
  double v10;
  _QWORD v11[23];
  char v12;
  uint64_t v13;

  if (a1[8] != 1)
    return *(_QWORD *)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = a3 + a4 + -0.1;
  v13 = 128;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v7 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v10 = v7;
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v5 + 192))(v11, &v13, &v10, ObjectType, v5);
  outlined release of DateComponents((uint64_t)v11);
  if (v12)
    result = 0;
  else
    result = v11[22];
  *(_QWORD *)a1 = result;
  a1[8] = 0;
  return result;
}

uint64_t specialized getter of firstWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(_BYTE *a1, uint64_t a2, __int128 *a3, char a4, char a5, uint64_t a6, _BYTE *a7, double a8, double a9)
{
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;

  if (a1[8] != 1)
    return *(_QWORD *)a1;
  v14 = getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  v15 = specialized getter of firstWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a7, a3, a9) > a6;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = result;
    a1[8] = 0;
  }
  return result;
}

uint64_t specialized getter of lastWeek #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(_BYTE *a1, uint64_t a2, __int128 *a3, char a4, char a5, uint64_t a6, _BYTE *a7, double a8, double a9, double a10)
{
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;

  if (a1[8] != 1)
    return *(_QWORD *)a1;
  getter of weekRange #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a2, a3, a4, a5, a8);
  v17 = v16;
  v18 = specialized getter of lastWeekday #1 in Calendar.RecurrenceRule._weekdayComponents(for:in:anchor:)(a7, (uint64_t)a3, a9, a10) < a6;
  result = v17 - v18;
  if (__OFSUB__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = result;
    a1[8] = 0;
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[12];
  _OWORD v40[2];

  v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v6 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 1;
    v6 = 2 * (v5 >> 5);
    v3[2] = v2;
    v3[3] = v6;
  }
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v39);
  if (v2 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = v6 >> 1;
  v8 = v3 + 4;
  if (v2)
  {
    v7 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v23);
      if (!*((_QWORD *)&v24 + 1))
        goto LABEL_38;
      outlined init with take of Any(&v23, v8);
      v8 += 2;
    }
    while (--v2);
  }
  NSFastEnumerationIterator.next()((uint64_t)&v36);
  if (v37)
  {
    while (1)
    {
      outlined init with take of Any(&v36, v38);
      if (!v7)
      {
        v9 = v3[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_35;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v12 = (_QWORD *)swift_allocObject();
        v13 = _swift_stdlib_malloc_size(v12);
        v14 = v13 - 32;
        if (v13 < 32)
          v14 = v13 - 1;
        v15 = v14 >> 5;
        v12[2] = v11;
        v12[3] = 2 * (v14 >> 5);
        v16 = (unint64_t)(v12 + 4);
        v17 = v3[3] >> 1;
        if (v3[2])
        {
          if (v12 != v3 || v16 >= (unint64_t)&v3[4 * v17 + 4])
            memmove(v12 + 4, v3 + 4, 32 * v17);
          v3[2] = 0;
        }
        v8 = (_OWORD *)(v16 + 32 * v17);
        v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        swift_release();
        v3 = v12;
      }
      v19 = __OFSUB__(v7--, 1);
      if (v19)
        break;
      outlined init with take of Any(v38, v8);
      v8 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v36);
      if (!v37)
        goto LABEL_30;
    }
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_30:
  v33 = v39[10];
  v34 = v39[11];
  v35[0] = v40[0];
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v40 + 9);
  v29 = v39[6];
  v30 = v39[7];
  v31 = v39[8];
  v32 = v39[9];
  v25 = v39[2];
  v26 = v39[3];
  v27 = v39[4];
  v28 = v39[5];
  v23 = v39[0];
  v24 = v39[1];
  outlined release of Locale((uint64_t)&v23);
  outlined destroy of Any?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
  v20 = v3[3];
  if (v20 >= 2)
  {
    v21 = v20 >> 1;
    v19 = __OFSUB__(v21, v7);
    v22 = v21 - v7;
    if (v19)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }
    v3[2] = v22;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  id v30;
  id v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v2 = (uint64_t)objc_msgSend(a1, sel_count);
  v3 = v2;
  if (v2 <= 0)
  {
    if (v2 < 0)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v4 = (char *)MEMORY[0x1E0DEE9D8];
    v17 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
    v14 = v17 >> 1;
    v18 = objc_msgSend(a1, sel_firstIndex);
    if (v18 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v16 = v18;
      if (v17 > 1)
      {
        v11 = v4 + 32;
        v29 = __OFSUB__(v14--, 1);
        if (!v29)
        {
LABEL_27:
          *(_QWORD *)v11 = v16;
          v30 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v16);
          if (v30 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            v31 = v30;
            while (1)
            {
              if (v14)
              {
                v11 += 8;
                v29 = __OFSUB__(v14--, 1);
                if (v29)
                  goto LABEL_55;
              }
              else
              {
                v32 = *((_QWORD *)v4 + 3);
                if ((uint64_t)((v32 >> 1) + 0x4000000000000000) < 0)
                  goto LABEL_57;
                v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
                if (v33 <= 1)
                  v34 = 1;
                else
                  v34 = v33;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                v35 = (char *)swift_allocObject();
                v36 = _swift_stdlib_malloc_size(v35);
                v37 = v36 - 32;
                if (v36 < 32)
                  v37 = v36 - 25;
                v38 = v37 >> 3;
                *((_QWORD *)v35 + 2) = v34;
                *((_QWORD *)v35 + 3) = 2 * (v37 >> 3);
                v39 = (unint64_t)(v35 + 32);
                v40 = *((_QWORD *)v4 + 3) >> 1;
                if (*((_QWORD *)v4 + 2))
                {
                  if (v35 != v4 || v39 >= (unint64_t)&v4[8 * v40 + 32])
                    memmove(v35 + 32, v4 + 32, 8 * v40);
                  *((_QWORD *)v4 + 2) = 0;
                }
                v11 = (char *)(v39 + 8 * v40);
                v42 = (v38 & 0x7FFFFFFFFFFFFFFFLL) - v40;
                swift_release();
                v4 = v35;
                v29 = __OFSUB__(v42, 1);
                v14 = v42 - 1;
                if (v29)
                  goto LABEL_55;
              }
              *(_QWORD *)v11 = v31;
              v31 = objc_msgSend(a1, sel_indexGreaterThanIndex_, v31);
              if (v31 == (id)0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_49;
            }
          }
          goto LABEL_49;
        }
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_14:
      v19 = *((_QWORD *)v4 + 3);
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000) < 0)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v22 = (char *)swift_allocObject();
      v23 = _swift_stdlib_malloc_size(v22);
      v24 = v23 - 32;
      if (v23 < 32)
        v24 = v23 - 25;
      v25 = v24 >> 3;
      *((_QWORD *)v22 + 2) = v21;
      *((_QWORD *)v22 + 3) = 2 * (v24 >> 3);
      v26 = v22 + 32;
      v27 = *((_QWORD *)v4 + 3) >> 1;
      v11 = &v22[8 * v27 + 32];
      v14 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - v27;
      if (*((_QWORD *)v4 + 2))
      {
        v28 = v4 + 32;
        if (v22 != v4 || v26 >= &v28[8 * v27])
          memmove(v26, v28, 8 * v27);
        *((_QWORD *)v4 + 2) = 0;
      }
      swift_release();
      v4 = v22;
LABEL_26:
      v29 = __OFSUB__(v14--, 1);
      if (!v29)
        goto LABEL_27;
      goto LABEL_55;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = (char *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v7 = v6 >> 3;
    *((_QWORD *)v4 + 2) = v3;
    *((_QWORD *)v4 + 3) = 2 * (v6 >> 3);
    v8 = a1;
    v9 = objc_msgSend(v8, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_59;
    v10 = v9;
    *((_QWORD *)v4 + 4) = v9;
    v11 = v4 + 40;
    v12 = v3 - 1;
    if (v3 != 1)
    {
      do
      {
        v13 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
        if (v13 == (id)0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_56;
        v10 = v13;
        *(_QWORD *)v11 = v13;
        v11 += 8;
      }
      while (--v12);
    }
    v14 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    v15 = objc_msgSend(v8, sel_indexGreaterThanIndex_, v10);
    if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v16 = v15;
      if (v14)
        goto LABEL_26;
      goto LABEL_14;
    }
  }
LABEL_49:

  v43 = *((_QWORD *)v4 + 3);
  if (v43 >= 2)
  {
    v44 = v43 >> 1;
    v29 = __OFSUB__(v44, v14);
    v45 = v44 - v14;
    if (v29)
    {
LABEL_60:
      __break(1u);
      return;
    }
    *((_QWORD *)v4 + 2) = v45;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t result;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD v19[12];
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  _OWORD v24[12];
  _OWORD v25[2];

  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v24);
  NSFastEnumerationIterator.next()((uint64_t)&v21);
  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = 0;
  if (v22)
  {
    v3 = (_OWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      result = (uint64_t)outlined init with take of Any(&v21, v23);
      if (!v2)
      {
        v5 = v1[3];
        if ((uint64_t)((v5 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1)
          v7 = 1;
        else
          v7 = v6;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v8 = (_QWORD *)swift_allocObject();
        v9 = _swift_stdlib_malloc_size(v8);
        v10 = v9 - 32;
        if (v9 < 32)
          v10 = v9 - 1;
        v11 = v10 >> 5;
        v8[2] = v7;
        v8[3] = 2 * (v10 >> 5);
        v12 = (unint64_t)(v8 + 4);
        v13 = v1[3] >> 1;
        if (v1[2])
        {
          if (v8 != v1 || v12 >= (unint64_t)&v1[4 * v13 + 4])
            memmove(v8 + 4, v1 + 4, 32 * v13);
          v1[2] = 0;
        }
        v3 = (_OWORD *)(v12 + 32 * v13);
        v2 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - v13;
        result = swift_release();
        v1 = v8;
      }
      v15 = __OFSUB__(v2--, 1);
      if (v15)
        break;
      outlined init with take of Any(v23, v3);
      v3 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v21);
      if (!v22)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_21:
  v19[10] = v24[10];
  v19[11] = v24[11];
  v20[0] = v25[0];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v25 + 9);
  v19[6] = v24[6];
  v19[7] = v24[7];
  v19[8] = v24[8];
  v19[9] = v24[9];
  v19[2] = v24[2];
  v19[3] = v24[3];
  v19[4] = v24[4];
  v19[5] = v24[5];
  v19[0] = v24[0];
  v19[1] = v24[1];
  outlined release of Locale((uint64_t)v19);
  result = outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  v16 = v1[3];
  if (v16 < 2)
    return (uint64_t)v1;
  v17 = v16 >> 1;
  v15 = __OFSUB__(v17, v2);
  v18 = v17 - v2;
  if (!v15)
  {
    v1[2] = v18;
    return (uint64_t)v1;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char **v58;
  _OWORD *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[12];
  _OWORD v74[2];

  v2 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v2 <= 0)
  {
    v60 = (char *)MEMORY[0x1E0DEE9D8];
    v6 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 + 31;
    v6 = 2 * (v5 >> 6);
    v3[2] = v2;
    v3[3] = v6;
    v60 = (char *)v3;
  }
  type metadata accessor for NSDictionary.Iterator();
  v7 = (_OWORD *)swift_allocObject();
  NSFastEnumerationIterator.init(_:)((uint64_t)a1, (uint64_t)v73);
  v8 = v73[11];
  v7[11] = v73[10];
  v7[12] = v8;
  v7[13] = v74[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v74 + 9);
  v9 = v73[7];
  v7[7] = v73[6];
  v7[8] = v9;
  v10 = v73[9];
  v7[9] = v73[8];
  v7[10] = v10;
  v11 = v73[3];
  v7[3] = v73[2];
  v7[4] = v11;
  v12 = v73[5];
  v7[5] = v73[4];
  v7[6] = v12;
  v13 = v73[1];
  v7[1] = v73[0];
  v7[2] = v13;
  if (v2 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    result = outlined destroy of Any?((uint64_t)&v67, &demangling cache variable for type metadata for Any?);
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v59 = v7;
  v14 = v7 + 1;
  v15 = v6 >> 1;
  v16 = v60 + 32;
  if (v2)
  {
    v15 -= v2;
    do
    {
      NSFastEnumerationIterator.next()((uint64_t)&v67);
      if (!v68)
        goto LABEL_51;
      outlined init with take of Any(&v67, &v63);
      result = outlined init with copy of Any((uint64_t)&v63, (uint64_t)&v69);
      if (!*v14)
        goto LABEL_52;
      objc_opt_self();
      v18 = (void *)swift_dynamicCastObjCClassUnconditional();
      v19 = *((_QWORD *)&v64 + 1);
      v20 = __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
      swift_unknownObjectRetain();
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) != 8)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v22 = *v20;
        swift_unknownObjectRetain();
      }
      else
      {
        v58 = &v57;
        v27 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
        v57 = (char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(__n128))(v29 + 16))(v27);
        v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      v23 = objc_msgSend(v18, sel_objectForKey_, v22);
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      if (!v23)
        goto LABEL_53;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
      outlined init with take of Any(&v67, &v71);
      v24 = v69;
      v25 = v70;
      v26 = v72;
      *((_OWORD *)v16 + 2) = v71;
      *((_OWORD *)v16 + 3) = v26;
      *(_OWORD *)v16 = v24;
      *((_OWORD *)v16 + 1) = v25;
      v16 += 64;
    }
    while (--v2);
  }
  NSFastEnumerationIterator.next()((uint64_t)&v61);
  if (!v62)
  {
LABEL_41:
    outlined destroy of Any?((uint64_t)&v61, &demangling cache variable for type metadata for Any?);
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    swift_release();
    outlined destroy of Any?((uint64_t)&v63, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    result = (uint64_t)v60;
    v54 = *((_QWORD *)v60 + 3);
    if (v54 < 2)
      return result;
    v55 = v54 >> 1;
    v47 = __OFSUB__(v55, v15);
    v56 = v55 - v15;
    if (!v47)
    {
      *((_QWORD *)v60 + 2) = v56;
      return result;
    }
    goto LABEL_50;
  }
  while (1)
  {
    outlined init with take of Any(&v61, &v67);
    result = outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v63);
    if (!*v14)
      break;
    objc_opt_self();
    v30 = (void *)swift_dynamicCastObjCClassUnconditional();
    v31 = v68;
    v32 = __swift_project_boxed_opaque_existential_1(&v67, v68);
    swift_unknownObjectRetain();
    v33 = _swift_isClassOrObjCExistentialType();
    if ((v33 & 1) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v31 - 8) + 64) != 8)
        goto LABEL_46;
      v34 = *v32;
      swift_unknownObjectRetain();
    }
    else
    {
      v58 = &v57;
      v51 = MEMORY[0x1E0C80A78](v33);
      v57 = (char *)&v57 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(__n128))(v53 + 16))(v51);
      v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    v35 = objc_msgSend(v30, sel_objectForKey_, v34);
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    if (!v35)
      goto LABEL_55;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    outlined init with take of Any(&v61, &v65);
    v69 = v63;
    v70 = v64;
    v71 = v65;
    v72 = v66;
    if (!v15)
    {
      v36 = *((_QWORD *)v60 + 3);
      if ((uint64_t)((v36 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_48;
      v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
      if (v37 <= 1)
        v38 = 1;
      else
        v38 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Any, value: Any)>);
      v39 = (char *)swift_allocObject();
      v40 = _swift_stdlib_malloc_size(v39);
      v41 = v40 - 32;
      if (v40 < 32)
        v41 = v40 + 31;
      v42 = v41 >> 6;
      *((_QWORD *)v39 + 2) = v38;
      *((_QWORD *)v39 + 3) = 2 * (v41 >> 6);
      v43 = v60;
      v44 = v39 + 32;
      v45 = *((_QWORD *)v60 + 3) >> 1;
      if (*((_QWORD *)v60 + 2))
      {
        v46 = v60 + 32;
        if (v39 != v60 || v44 >= &v46[64 * v45])
          memmove(v39 + 32, v46, v45 << 6);
        *((_QWORD *)v43 + 2) = 0;
      }
      v16 = &v44[64 * v45];
      v15 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - v45;
      swift_release();
      v60 = v39;
    }
    v47 = __OFSUB__(v15--, 1);
    if (v47)
      goto LABEL_47;
    v48 = v69;
    v49 = v70;
    v50 = v72;
    *((_OWORD *)v16 + 2) = v71;
    *((_OWORD *)v16 + 3) = v50;
    *(_OWORD *)v16 = v48;
    *((_OWORD *)v16 + 1) = v49;
    v16 += 64;
    NSFastEnumerationIterator.next()((uint64_t)&v61);
    if (!v62)
      goto LABEL_41;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[32];
  __int128 v31;
  _BYTE v32[72];
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[377];
  uint64_t v41;
  char v42;
  __int128 v43;
  _QWORD *v44;
  _BYTE v45[24];
  _QWORD v46[2];
  __int128 v47;
  __int16 v48;
  char v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[377];
  uint64_t v64;
  char v65;
  __int128 v66;
  _QWORD *v67;
  _BYTE v68[40];

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v32[32] = v3;
  *(_OWORD *)&v32[48] = *(_OWORD *)(a1 + 104);
  *(_QWORD *)&v32[64] = *(_QWORD *)(a1 + 120);
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v30 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v30[16] = v4;
  v5 = *(_OWORD *)(a1 + 56);
  v31 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)v32 = v5;
  outlined init with take of Range<Date>?(a1 + 128, (uint64_t)v68);
  v46[0] = v2;
  outlined init with take of Range<Date>?((uint64_t)v68, (uint64_t)v45);
  outlined retain of Calendar.DatesByRecurring(a1);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)v46, (uint64_t)v30, (uint64_t)v45);
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((v65 & 1) != 0)
  {
    v28 = 0;
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = 0;
    v8 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
LABEL_4:
    if (v51 != 1 || v61 < *((uint64_t *)&v50 + 1))
    {
      v9 = v67;
      do
      {
        if (v9[2])
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v10 = v9[2];
            if (!v10)
              goto LABEL_46;
          }
          else
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            v10 = v9[2];
            if (!v10)
              goto LABEL_46;
          }
          v11 = v10 - 1;
          v12 = *(double *)&v9[v11 + 4];
          v9[2] = v11;
          v67 = v9;
          if (__OFADD__(v61, 1))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          ++v61;
          if (!v51 && *((double *)&v50 + 1) < v12)
            break;
          if ((v58 & 1) != 0)
            goto LABEL_25;
          if (*((double *)&v57 + 1) < v12)
            break;
          if (v12 >= *(double *)&v57)
          {
LABEL_25:
            if (!v7)
            {
              v14 = v6[3];
              if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
                goto LABEL_50;
              v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
              if (v15 <= 1)
                v16 = 1;
              else
                v16 = v15;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
              v17 = (_QWORD *)swift_allocObject();
              v18 = _swift_stdlib_malloc_size(v17);
              v19 = v18 - 32;
              if (v18 < 32)
                v19 = v18 - 25;
              v20 = v19 >> 3;
              v17[2] = v16;
              v17[3] = 2 * (v19 >> 3);
              v21 = (unint64_t)(v17 + 4);
              v22 = v6[3] >> 1;
              if (v6[2])
              {
                v23 = v6 + 4;
                if (v17 != v6 || v21 >= (unint64_t)v23 + 8 * v22)
                  memmove(v17 + 4, v23, 8 * v22);
                v6[2] = 0;
              }
              v8 = (double *)(v21 + 8 * v22);
              v7 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
              swift_release();
              v6 = v17;
            }
            v24 = __OFSUB__(v7--, 1);
            if (!v24)
            {
              *v8++ = v12;
              goto LABEL_4;
            }
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            return;
          }
        }
        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          v9 = v67;
          if (v67[2])
          {
            *((_QWORD *)&v66 + 1) = 0;
          }
          else
          {
            v13 = *((_QWORD *)&v66 + 1) + 1;
            if (__OFADD__(*((_QWORD *)&v66 + 1), 1))
              goto LABEL_47;
            ++*((_QWORD *)&v66 + 1);
            if ((uint64_t)v66 < v13)
              break;
          }
        }
      }
      while ((v65 & 1) == 0);
    }
    v28 = v7;
    v29 = v6;
  }
  memcpy(v40, v63, sizeof(v40));
  *(_QWORD *)v30 = v46[1];
  *(_OWORD *)&v30[8] = v47;
  *(_WORD *)&v30[24] = v48;
  v30[26] = v49;
  v31 = v50;
  v32[0] = v51;
  *(_OWORD *)&v32[8] = v52;
  *(_OWORD *)&v32[24] = v53;
  *(_OWORD *)&v32[40] = v54;
  *(_OWORD *)&v32[56] = v55;
  v33 = v56;
  v34 = v57;
  v35 = v58;
  v36 = v59;
  v37 = v60;
  v38 = v61;
  v39 = v62;
  v41 = v64;
  v42 = 1;
  v43 = v66;
  v44 = v67;
  outlined release of Calendar.DatesByRecurring.Iterator((uint64_t)v30);
  v25 = v29[3];
  if (v25 >= 2)
  {
    v26 = v25 >> 1;
    v24 = __OFSUB__(v26, v28);
    v27 = v26 - v28;
    if (v24)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v29[2] = v27;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  BOOL v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  char v36;
  unsigned __int8 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  _QWORD *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  double *v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  double v88;
  uint64_t v89;
  uint64_t v90[2];
  void *v91;
  id v92;
  double v93;
  uint64_t v94;
  void *v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  unsigned __int8 v104[8];
  unsigned __int8 v105[8];
  unsigned __int8 v106[8];
  _QWORD v107[37];
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  unsigned __int8 v118;
  char v119;
  char v120;
  uint64_t v121;
  char v122;
  char v123;
  char v124;
  _DWORD v125[2];
  _DWORD v126[2];
  _DWORD v127[2];
  _DWORD v128[2];
  _DWORD v129[2];
  _DWORD v130[2];
  _DWORD v131[2];
  _DWORD v132[2];
  _DWORD v133[2];
  _DWORD v134[2];
  _DWORD v135[2];
  _DWORD v136[2];
  _DWORD v137[2];
  _DWORD v138[2];
  _DWORD v139[2];
  char v140;
  char v141;
  _QWORD __dst[36];
  char v143;
  char v144;

  v2 = a1 + 331;
  v3 = *(uint64_t *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v83 = *(double *)(a1 + 32);
  v84 = *(double *)(a1 + 24);
  v6 = (const void *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 40);
  memcpy(__dst, (const void *)(a1 + 48), 0x11AuLL);
  v87 = *(_BYTE *)(a1 + 330);
  v8 = *(unsigned __int8 *)(a1 + 331);
  v9 = *(unsigned __int8 *)(v2 + 1);
  memcpy(v107, v6, 0x11AuLL);
  v93 = *(double *)&v3;
  v94 = v4;
  v86 = v4;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  v10 = DateComponents._validate(for:)((uint64_t *)&v93);
  v11 = v9;
  v144 = 1;
  v63 = v7;
  v143 = v7;
  v73 = __dst[0];
  v139[0] = *(_DWORD *)((char *)&__dst[5] + 1);
  *(_DWORD *)((char *)v139 + 3) = HIDWORD(__dst[5]);
  *(_DWORD *)((char *)v138 + 3) = HIDWORD(__dst[7]);
  v138[0] = *(_DWORD *)((char *)&__dst[7] + 1);
  v137[0] = *(_DWORD *)((char *)&__dst[9] + 1);
  *(_DWORD *)((char *)v137 + 3) = HIDWORD(__dst[9]);
  v136[0] = *(_DWORD *)((char *)&__dst[11] + 1);
  *(_DWORD *)((char *)v136 + 3) = HIDWORD(__dst[11]);
  *(_DWORD *)((char *)v135 + 3) = HIDWORD(__dst[13]);
  v135[0] = *(_DWORD *)((char *)&__dst[13] + 1);
  *(_DWORD *)((char *)v134 + 3) = HIDWORD(__dst[15]);
  v134[0] = *(_DWORD *)((char *)&__dst[15] + 1);
  v74 = __dst[14];
  v75 = __dst[16];
  *(_DWORD *)((char *)v133 + 3) = HIDWORD(__dst[17]);
  v133[0] = *(_DWORD *)((char *)&__dst[17] + 1);
  v76 = __dst[18];
  *(_DWORD *)((char *)v132 + 3) = HIDWORD(__dst[19]);
  v132[0] = *(_DWORD *)((char *)&__dst[19] + 1);
  v77 = __dst[20];
  *(_DWORD *)((char *)v131 + 3) = HIDWORD(__dst[21]);
  v131[0] = *(_DWORD *)((char *)&__dst[21] + 1);
  v78 = __dst[22];
  *(_DWORD *)((char *)v130 + 3) = HIDWORD(__dst[23]);
  v130[0] = *(_DWORD *)((char *)&__dst[23] + 1);
  v79 = __dst[24];
  *(_DWORD *)((char *)v129 + 3) = HIDWORD(__dst[25]);
  v129[0] = *(_DWORD *)((char *)&__dst[25] + 1);
  v80 = __dst[26];
  *(_DWORD *)((char *)v128 + 3) = HIDWORD(__dst[27]);
  v128[0] = *(_DWORD *)((char *)&__dst[27] + 1);
  v81 = __dst[28];
  *(_DWORD *)((char *)v127 + 3) = HIDWORD(__dst[29]);
  v127[0] = *(_DWORD *)((char *)&__dst[29] + 1);
  *(_DWORD *)((char *)v126 + 3) = HIDWORD(__dst[31]);
  v126[0] = *(_DWORD *)((char *)&__dst[31] + 1);
  *(_DWORD *)((char *)v125 + 3) = HIDWORD(__dst[33]);
  v125[0] = *(_DWORD *)((char *)&__dst[33] + 1);
  v141 = 1;
  v140 = v7;
  v124 = v8;
  v123 = v9;
  v82 = BYTE1(__dst[35]);
  if (v10)
  {
    v64 = 0;
    v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v61 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    v12 = -1;
    v13 = 1;
    v14 = 0.0;
    v15 = v5;
    while (2)
    {
      v60 = v12;
      while (1)
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_38;
        }
        v90[0] = v3;
        v90[1] = v86;
        v92 = v5;
        memcpy(v107, __dst, 0x11AuLL);
        v106[0] = v87;
        v17 = v8;
        v105[0] = v8;
        v18 = v11;
        v104[0] = v11;
        v91 = v15;
        v88 = v14;
        LOBYTE(v89) = v13 & 1;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)__dst);
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v92, v107, v106, v105, v104, (double *)&v91, (uint64_t)&v88, (uint64_t)&v93);
        outlined release of DateComponents((uint64_t)__dst);
        swift_unknownObjectRelease();
        v15 = v95;
        if (v94 != 2)
          break;
        ++v12;
        v8 = v17;
        if (v16 >= 100)
        {
          v90[0] = (uint64_t)v5;
          if (v60 + 1 > 100)
            v16 = v60 + 1;
          else
            v16 = 100;
          v54 = v86;
          v93 = *(double *)&v3;
          v94 = v86;
          memcpy(v107, __dst, 0x11AuLL);
          LOBYTE(v88) = v11;
          LOBYTE(v92) = v87;
          LOBYTE(v91) = v17;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v90, (uint64_t *)&v93, v107, (unsigned __int8 *)&v88, (unsigned __int8 *)&v92, (unsigned __int8 *)&v91);
          v82 = BYTE1(__dst[35]);
          v53 = __dst[34];
          v46 = __dst[35];
          v52 = __dst[32];
          v45 = __dst[33];
          v55 = __dst[30];
          v44 = __dst[31];
          v43 = __dst[29];
          v80 = __dst[26];
          v81 = __dst[28];
          v42 = __dst[27];
          v40 = __dst[25];
          v78 = __dst[22];
          v79 = __dst[24];
          v39 = __dst[23];
          v38 = __dst[21];
          v76 = __dst[18];
          v77 = __dst[20];
          v37 = __dst[19];
          v75 = __dst[16];
          v35 = __dst[17];
          v74 = __dst[14];
          v71 = __dst[10];
          v72 = __dst[12];
          v70 = __dst[8];
          v69 = __dst[6];
          v68 = __dst[4];
          v66 = __dst[2];
          v67 = __dst[3];
          v73 = __dst[0];
          v85 = __dst[1];
          v34 = __dst[15];
          v36 = __dst[13];
          v41 = __dst[11];
          v47 = __dst[9];
          v48 = __dst[7];
          v49 = __dst[5];
          v51 = v83;
          v20 = v84;
          goto LABEL_31;
        }
      }
      v19 = v93;
      v20 = v84;
      v21 = v64;
      if ((v63 & 1) == 0 && (v93 < v84 || v93 >= v83))
      {
        v82 = BYTE1(__dst[35]);
        v53 = __dst[34];
        v46 = __dst[35];
        v45 = __dst[33];
        v55 = __dst[30];
        v44 = __dst[31];
        v43 = __dst[29];
        v80 = __dst[26];
        v81 = __dst[28];
        v42 = __dst[27];
        v40 = __dst[25];
        v78 = __dst[22];
        v79 = __dst[24];
        v39 = __dst[23];
        v38 = __dst[21];
        v76 = __dst[18];
        v77 = __dst[20];
        v37 = __dst[19];
        v75 = __dst[16];
        v35 = __dst[17];
        v74 = __dst[14];
        v71 = __dst[10];
        v72 = __dst[12];
        v70 = __dst[8];
        v69 = __dst[6];
        v68 = __dst[4];
        v66 = __dst[2];
        v67 = __dst[3];
        v73 = __dst[0];
        v85 = __dst[1];
        v34 = __dst[15];
        v36 = __dst[13];
        v41 = __dst[11];
        v47 = __dst[9];
        v48 = __dst[7];
        v49 = __dst[5];
        v54 = v86;
        v51 = v83;
        LOBYTE(v8) = v17;
        v52 = __dst[32];
LABEL_31:
        v50 = v62;
        goto LABEL_32;
      }
      v141 = 0;
      if (!v64)
      {
        v22 = v62[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_40;
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
        v25 = (_QWORD *)swift_allocObject();
        v26 = _swift_stdlib_malloc_size(v25);
        v27 = v26 - 32;
        if (v26 < 32)
          v27 = v26 - 25;
        v28 = v27 >> 3;
        v25[2] = v24;
        v25[3] = 2 * (v27 >> 3);
        v29 = (unint64_t)(v25 + 4);
        v30 = v62[3] >> 1;
        if (v62[2])
        {
          v31 = v62 + 4;
          if (v25 != v62 || v29 >= (unint64_t)v31 + 8 * v30)
          {
            v65 = v27 >> 3;
            memmove(v25 + 4, v31, 8 * v30);
            v29 = (unint64_t)(v25 + 4);
            v28 = v65;
          }
          v62[2] = 0;
        }
        v61 = (double *)(v29 + 8 * v30);
        v21 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        v62 = v25;
        v11 = v18;
      }
      v32 = __OFSUB__(v21, 1);
      v33 = v21 - 1;
      if (!v32)
      {
        v8 = v17;
        v64 = v33;
        v13 = 0;
        *v61++ = v19;
        v14 = v19;
        v12 = v16;
        continue;
      }
      goto LABEL_39;
    }
  }
  v64 = 0;
  v34 = __dst[15] & 1;
  v35 = __dst[17] & 1;
  v36 = __dst[13];
  v37 = __dst[19] & 1;
  v38 = __dst[21] & 1;
  v71 = __dst[10];
  v72 = __dst[12];
  v39 = __dst[23] & 1;
  v40 = __dst[25] & 1;
  v41 = __dst[11];
  v42 = __dst[27] & 1;
  v43 = __dst[29] & 1;
  v44 = __dst[31] & 1;
  v70 = __dst[8];
  v45 = __dst[33] & 1;
  v46 = __dst[35] & 1;
  v47 = __dst[9];
  v69 = __dst[6];
  v48 = __dst[7];
  v49 = __dst[5];
  v68 = __dst[4];
  v67 = __dst[3];
  v14 = 0.0;
  v16 = -1;
  v15 = v5;
  v66 = __dst[2];
  v85 = __dst[1];
  v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v51 = v83;
  v20 = v84;
  v53 = __dst[34];
  v52 = __dst[32];
  v54 = v86;
  v55 = __dst[30];
LABEL_32:
  LOBYTE(v93) = v49;
  LOBYTE(v90[0]) = v48;
  LOBYTE(v88) = v47;
  LOBYTE(v92) = v41;
  LOBYTE(v91) = v36;
  v106[0] = v34;
  v105[0] = v35;
  v104[0] = v37;
  v103 = v38;
  v102 = v39;
  v101 = v40;
  v100 = v42;
  v99 = v43;
  v98 = v44;
  v97 = v45;
  v96 = v46;
  v107[0] = v16;
  *(double *)&v107[1] = v14;
  LOBYTE(v107[2]) = v141;
  v107[3] = v15;
  *(double *)&v107[4] = v20;
  *(double *)&v107[5] = v51;
  LOBYTE(v107[6]) = v140;
  v107[7] = v5;
  v107[8] = v3;
  v107[9] = v54;
  v107[10] = v73;
  v107[11] = v85;
  v107[12] = v66;
  v107[13] = v67;
  v107[14] = v68;
  LOBYTE(v107[15]) = v49;
  v107[16] = v69;
  LOBYTE(v107[17]) = v48;
  v107[18] = v70;
  LOBYTE(v107[19]) = v47;
  v107[20] = v71;
  LOBYTE(v107[21]) = v41;
  v107[22] = v72;
  LOBYTE(v107[23]) = v36;
  v107[24] = v74;
  LOBYTE(v107[25]) = v34;
  v107[26] = v75;
  LOBYTE(v107[27]) = v35;
  v107[28] = v76;
  LOBYTE(v107[29]) = v37;
  v107[30] = v77;
  LOBYTE(v107[31]) = v38;
  v107[32] = v78;
  LOBYTE(v107[33]) = v39;
  v107[34] = v79;
  LOBYTE(v107[35]) = v40;
  v107[36] = v80;
  v108 = v42;
  v109 = v81;
  v110 = v43;
  v111 = v55;
  v112 = v44;
  v113 = v52;
  v114 = v45;
  v115 = v53;
  v116 = v46;
  v117 = v82;
  v118 = v87;
  v119 = v8;
  v120 = v11;
  v121 = 100;
  v122 = 1;
  outlined release of Calendar.DatesByMatching.Iterator((uint64_t)v107);
  v56 = v50[3];
  if (v56 < 2)
    return (uint64_t)v50;
  v57 = v56 >> 1;
  v32 = __OFSUB__(v57, v64);
  v58 = v57 - v64;
  if (!v32)
  {
    v50[2] = v58;
    return (uint64_t)v50;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(double *a1)
{
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  double *v16;
  double v17;
  uint64_t v18;
  uint64_t result;
  double v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  unsigned int v41;
  void (*v42)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t);
  _BYTE __src[330];
  char v44;
  char v45;
  uint64_t v46;
  double v47;
  double v48[36];
  _BYTE v49[288];
  _BYTE __dst[296];

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = *((unsigned __int8 *)a1 + 40);
  memcpy(__dst, a1 + 6, 0x11AuLL);
  v8 = *((unsigned __int8 *)a1 + 330);
  ObjectType = swift_getObjectType();
  v42 = *(void (**)(double *__return_ptr, _BYTE *, double *, uint64_t, uint64_t, uint64_t))(v3 + 200);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  v10 = 0;
  v11 = 1.59271755e13;
  if (v4 <= 1.59271755e13)
    v11 = v4;
  v12 = fmax(v11, -2.11845067e11);
  v39 = v5;
  v13 = v5;
  v14 = ObjectType;
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
  v38 = v6;
  v17 = v6;
  v18 = 1;
  v41 = v8;
  v40 = ObjectType;
  while (1)
  {
    memcpy(v48, __dst, 0x11AuLL);
    DateComponents.scaled(by:)(v18, (uint64_t)__src);
    memcpy(v49, __src, 0x11AuLL);
    memcpy(__src, v49, 0x11AuLL);
    v47 = v12;
    swift_unknownObjectRetain();
    v42(v48, __src, &v47, v8, v14, v3);
    swift_unknownObjectRelease();
    result = outlined release of DateComponents((uint64_t)v49);
    if ((LOBYTE(v48[1]) & 1) != 0
      || (v20 = v48[0], (v7 & 1) == 0) && (v48[0] >= v13 ? (v21 = v48[0] < v17) : (v21 = 0), !v21))
    {
      *(double *)__src = v2;
      *(_QWORD *)&__src[8] = v3;
      *(double *)&__src[16] = v4;
      *(double *)&__src[24] = v39;
      *(double *)&__src[32] = v38;
      __src[40] = v7;
      memcpy(&__src[48], __dst, 0x11AuLL);
      v44 = v8;
      v45 = 1;
      v46 = v18;
      result = outlined release of Calendar.DatesByAdding((uint64_t)__src);
      v35 = v15[3];
      if (v35 >= 2)
      {
        v36 = v35 >> 1;
        v34 = __OFSUB__(v36, v10);
        v37 = v36 - v10;
        if (v34)
          goto LABEL_34;
        v15[2] = v37;
      }
      return (uint64_t)v15;
    }
    if (__OFADD__(v18, 1))
      break;
    if (!v10)
    {
      v22 = v15[3];
      if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_33;
      v23 = v7;
      v24 = v3;
      v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1)
        v26 = 1;
      else
        v26 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      v27 = (_QWORD *)swift_allocObject();
      v28 = _swift_stdlib_malloc_size(v27);
      v29 = v28 - 32;
      if (v28 < 32)
        v29 = v28 - 25;
      v30 = v29 >> 3;
      v27[2] = v26;
      v27[3] = 2 * (v29 >> 3);
      v31 = (unint64_t)(v27 + 4);
      v32 = v15[3] >> 1;
      if (v15[2])
      {
        v33 = v15 + 4;
        if (v27 != v15 || v31 >= (unint64_t)v33 + 8 * v32)
          memmove(v27 + 4, v33, 8 * v32);
        v15[2] = 0;
      }
      v16 = (double *)(v31 + 8 * v32);
      v10 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
      result = swift_release();
      v15 = v27;
      v3 = v24;
      v7 = v23;
      v8 = v41;
      v14 = v40;
    }
    v34 = __OFSUB__(v10--, 1);
    if (v34)
      goto LABEL_32;
    *v16++ = v20;
    ++v18;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t inited;
  Swift::Int v9;
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  const char *v13;
  char v14;
  char v15;
  DIR *v16;
  const char *v17;
  char v18;
  char v19;
  uint64_t v20;
  __darwin_ino64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __darwin_ino64_t st_ino;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  Swift::String v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::Int32 v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  DIR *v45;
  dirent *v46;
  char *v47;
  dirent *v48;
  uint64_t v49;
  timespec *p_st_atimespec;
  void *v51;
  uint64_t v52;
  void *v53;
  int v54;
  __darwin_ino64_t v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  int st_mode;
  int v63;
  __darwin_ino64_t v64;
  Swift::String v65;
  uint64_t v66;
  __darwin_ino64_t v67;
  __uint8_t d_type;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  char *v73;
  size_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __darwin_ino64_t v90;
  timespec *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  stat v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v9 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v9 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v10 = 3 * v9;
  if ((unsigned __int128)(v9 * (__int128)3) >> 64 != (3 * v9) >> 63)
  {
    __break(1u);
    goto LABEL_87;
  }
  if (v10 < -1)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  swift_bridgeObjectRetain_n();
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v10 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = (char *)&v87 - v12;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v10 + 1, 1, a1, a2);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_35;
    v16 = opendir(v13);
    if (!v16)
      goto LABEL_35;
LABEL_15:
    *(_QWORD *)(inited + 24) = a1;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 16) = v16;
    *(_BYTE *)(inited + 56) = a3 & 1;
    v20 = *(_QWORD *)(a4 + 16);
    if (v20)
    {
      v92 = swift_bridgeObjectRetain();
      v21 = (__darwin_ino64_t *)(v92 + 40);
      v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v24 = *(v21 - 1);
        st_ino = *v21;
        v26 = HIBYTE(*v21) & 0xF;
        if ((*v21 & 0x2000000000000000) == 0)
          v26 = v24 & 0xFFFFFFFFFFFFLL;
        if (v26)
        {
          swift_bridgeObjectRetain_n();
          String.index(before:)();
          v27 = String.subscript.getter();
          v29 = v28;
          swift_bridgeObjectRelease();
          if (v27 == 47 && v29 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v31 & 1) == 0)
            {
              *(_QWORD *)&v96.st_dev = v24;
              v96.st_ino = st_ino;
              swift_bridgeObjectRetain();
              v32._countAndFlagsBits = 47;
              v32._object = (void *)0xE100000000000000;
              String.append(_:)(v32);
              swift_bridgeObjectRelease();
              v24 = *(_QWORD *)&v96.st_dev;
              st_ino = v96.st_ino;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
          v34 = v22[2];
          v33 = v22[3];
          if (v34 >= v33 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v22);
          v22[2] = v34 + 1;
          v23 = &v22[2 * v34];
          v23[4] = v24;
          v23[5] = st_ino;
        }
        v21 += 2;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v96.st_dev = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v81 = BidirectionalCollection<>.joined(separator:)();
    v83 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 40) = v81;
    *(_QWORD *)(inited + 48) = v83;
    v45 = *(DIR **)(inited + 16);
    if (v45)
      goto LABEL_39;
LABEL_80:
    swift_release();
    v49 = 0;
    v47 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_81;
  }
  v17 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v10 + 1, 1, a1, a2);
  v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
    MEMORY[0x186DA9E78](v17, -1, -1);
  }
  else
  {
    v16 = opendir(v17);
    MEMORY[0x186DA9E78](v17, -1, -1);
    if (v16)
      goto LABEL_15;
  }
LABEL_35:
  v35 = swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 24) = 0;
  *(_QWORD *)(inited + 32) = 0xE000000000000000;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0xE000000000000000;
  *(_BYTE *)(inited + 56) = 0;
  v36 = MEMORY[0x186DA4118](v35);
  v93 = MEMORY[0x1E0DEE9E0];
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v39 = v38;
  v97 = a1;
  *(_QWORD *)&v98 = a2;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v96, (uint64_t)v37, v39);
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v42 = v41;
  URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v97);
  if (v97)
  {
    v94 = v97;
    v95 = v98;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(&v96, 0, 40);
  }
  specialized Dictionary.subscript.setter((uint64_t)&v96, (uint64_t)v40, v42);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v36, 1, 0x7265646C6F46, 0xE600000000000000, v93, &v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)&v96.st_dev;
  v44 = *(void **)(inited + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)(inited + 64) = v43;
  v45 = *(DIR **)(inited + 16);
  if (!v45)
    goto LABEL_80;
LABEL_39:
  v46 = readdir(v45);
  v47 = (char *)MEMORY[0x1E0DEE9D8];
  if (v46)
  {
    v48 = v46;
    v49 = 0;
    p_st_atimespec = &v96.st_atimespec;
    v92 = MEMORY[0x1E0DEE9D8] + 32;
    while (1)
    {
      if (!v48->d_namlen || !v48->d_ino)
        goto LABEL_45;
      v52 = String.init(cString:)();
      v53 = v51;
      if (v52 == 46 && v51 == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v52 == 11822 && v53 == (void *)0xE200000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v52 == 24366 && v53 == (void *)0xE200000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      v54 = *(unsigned __int8 *)(inited + 56);
      v91 = p_st_atimespec;
      if (v54 != 1)
        break;
      if (v48->d_type)
      {
        if (v48->d_type != 4)
          break;
      }
      else
      {
        memset(&v96, 0, 28);
        *p_st_atimespec = 0u;
        p_st_atimespec[1] = 0u;
        p_st_atimespec[2] = 0u;
        p_st_atimespec[3] = 0u;
        p_st_atimespec[4] = 0u;
        p_st_atimespec[5] = 0u;
        p_st_atimespec[6] = 0u;
        v58 = *(_QWORD *)(inited + 32);
        v97 = *(_QWORD *)(inited + 24);
        *(_QWORD *)&v98 = v58;
        swift_bridgeObjectRetain();
        v59._countAndFlagsBits = 47;
        v59._object = (void *)0xE100000000000000;
        String.append(_:)(v59);
        v90 = v98;
        swift_bridgeObjectRetain();
        v60._countAndFlagsBits = v52;
        v60._object = v53;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        v89 = v98;
        v61 = String.utf8CString.getter();
        v90 = v61;
        swift_bridgeObjectRelease();
        LODWORD(v61) = stat((const char *)(v61 + 32), &v96);
        swift_release();
        if ((_DWORD)v61)
          break;
        st_mode = v96.st_mode;
        v63 = S_IFMT.getter() & st_mode;
        if (v63 != (unsigned __int16)S_IFDIR.getter())
          break;
      }
      v55 = *(_QWORD *)(inited + 48);
      *(_QWORD *)&v96.st_dev = *(_QWORD *)(inited + 40);
      v96.st_ino = v55;
      swift_bridgeObjectRetain();
      v56._countAndFlagsBits = v52;
      v56._object = v53;
      String.append(_:)(v56);
      v90 = v96.st_ino;
      swift_bridgeObjectRetain();
      v57._countAndFlagsBits = 47;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
LABEL_64:
      v66 = *(_QWORD *)&v96.st_dev;
      v67 = v96.st_ino;
      d_type = v48->d_type;
      if (v49)
      {
        p_st_atimespec = v91;
        v69 = v92;
      }
      else
      {
        LODWORD(v89) = v48->d_type;
        v90 = v96.st_ino;
        v92 = *(_QWORD *)&v96.st_dev;
        v70 = *((_QWORD *)v47 + 3);
        if ((uint64_t)((v70 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
          return;
        }
        v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
        if (v71 <= 1)
          v72 = 1;
        else
          v72 = v71;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_POSIXDirectoryContentsSequence.Iterator.Element>);
        v73 = (char *)swift_allocObject();
        v74 = _swift_stdlib_malloc_size(v73);
        v75 = (uint64_t)(v74 - 32) / 40;
        *((_QWORD *)v73 + 2) = v72;
        *((_QWORD *)v73 + 3) = 2 * v75;
        v76 = v73 + 32;
        v77 = *((_QWORD *)v47 + 3) >> 1;
        v78 = 40 * v77;
        if (*((_QWORD *)v47 + 2))
        {
          v79 = v47 + 32;
          if (v73 != v47 || v76 >= &v79[v78])
          {
            v87 = (uint64_t)(v74 - 32) / 40;
            v88 = v73 + 32;
            memmove(v73 + 32, v79, 40 * v77);
            v75 = v87;
            v76 = v88;
          }
          *((_QWORD *)v47 + 2) = 0;
        }
        v69 = (uint64_t)&v76[v78];
        v49 = (v75 & 0x7FFFFFFFFFFFFFFFLL) - v77;
        swift_release();
        v47 = v73;
        p_st_atimespec = v91;
        v66 = v92;
        v67 = v90;
        d_type = v89;
      }
      v80 = __OFSUB__(v49--, 1);
      if (v80)
        goto LABEL_89;
      *(_QWORD *)v69 = v52;
      *(_QWORD *)(v69 + 8) = v53;
      *(_QWORD *)(v69 + 16) = v66;
      *(_QWORD *)(v69 + 24) = v67;
      *(_BYTE *)(v69 + 32) = d_type;
      v92 = v69 + 40;
LABEL_45:
      v48 = readdir(v45);
      if (!v48)
        goto LABEL_42;
    }
    v64 = *(_QWORD *)(inited + 48);
    *(_QWORD *)&v96.st_dev = *(_QWORD *)(inited + 40);
    v96.st_ino = v64;
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits = v52;
    v65._object = v53;
    String.append(_:)(v65);
    goto LABEL_64;
  }
  v49 = 0;
LABEL_42:
  closedir(v45);
  *(_QWORD *)(inited + 16) = 0;
  swift_release();
LABEL_81:
  v84 = *((_QWORD *)v47 + 3);
  if (v84 < 2)
    return;
  v85 = v84 >> 1;
  v80 = __OFSUB__(v85, v49);
  v86 = v85 - v49;
  if (v80)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
  }
  *((_QWORD *)v47 + 2) = v86;
}

_QWORD *specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t started;
  uint64_t v1;
  _QWORD *v2;
  _UNKNOWN **v3;
  char **v4;
  char **v5;
  uint64_t isStackAllocationSafe;
  __n128 v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char **v21;
  _UNKNOWN **v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  BOOL v32;
  _QWORD *result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37[1040];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  started = sysdir_start_search_path_enumeration_private();
  v1 = 0;
  v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  v3 = &off_1E0F10000;
  v4 = &selRef_createFileAtPath_contents_attributes_;
  v5 = &selRef_setGroupIdentifier_;
  while (1)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      v7 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v8 = MEMORY[0x186DA9FF8](started, v37, v7);
      if (!(_DWORD)v8)
        goto LABEL_24;
      started = v8;
      v9 = objc_msgSend((id)objc_opt_self(), v4[132]);
      v10 = objc_msgSend(v9, v5[333], v37, strlen(v37));

      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      if (v1)
        goto LABEL_20;
      goto LABEL_8;
    }
    v14 = (const char *)swift_slowAlloc();
    v15 = MEMORY[0x186DA9FF8](started, v14);
    if (!(_DWORD)v15)
      break;
    started = v15;
    v16 = objc_msgSend((id)objc_opt_self(), v4[132]);
    v17 = objc_msgSend(v16, v5[333], v14, strlen(v14));

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v13 = v18;

    MEMORY[0x186DA9E78](v14, -1, -1);
    if (v1)
      goto LABEL_20;
LABEL_8:
    v19 = v38;
    v20 = v38[3];
    if ((uint64_t)((v20 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_29;
    v21 = v4;
    v22 = v3;
    v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
    if (v23 <= 1)
      v24 = 1;
    else
      v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v25 = (_QWORD *)swift_allocObject();
    v26 = _swift_stdlib_malloc_size(v25);
    v27 = v26 - 32;
    if (v26 < 32)
      v27 = v26 - 17;
    v28 = v27 >> 4;
    v25[2] = v24;
    v25[3] = 2 * (v27 >> 4);
    v29 = (unint64_t)(v25 + 4);
    v30 = v19[3] >> 1;
    if (v19[2])
    {
      v31 = v19 + 4;
      if (v25 != v19 || v29 >= (unint64_t)v31 + 16 * v30)
        memmove(v25 + 4, v31, 16 * v30);
      v19[2] = 0;
    }
    v2 = (_QWORD *)(v29 + 16 * v30);
    v1 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
    swift_release();
    v38 = v25;
    v3 = v22;
    v4 = v21;
    v5 = &selRef_setGroupIdentifier_;
LABEL_20:
    v32 = __OFSUB__(v1--, 1);
    if (v32)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    *v2 = v11;
    v2[1] = v13;
    v2 += 2;
  }
  MEMORY[0x186DA9E78](v14, -1, -1);
LABEL_24:
  result = v38;
  v34 = v38[3];
  if (v34 >= 2)
  {
    v35 = v34 >> 1;
    v32 = __OFSUB__(v35, v1);
    v36 = v35 - v1;
    if (v32)
      goto LABEL_30;
    v38[2] = v36;
  }
  return result;
}

_QWORD *specialized _copySequenceToContiguousArray<A>(_:)(const char *a1, int a2)
{
  uint64_t inited;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  FTS *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  FTS *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  stat v43;
  char *v44[15];

  v44[13] = *(char **)MEMORY[0x1E0C80C00];
  type metadata accessor for _FTSSequence.Iterator();
  inited = swift_initStackObject();
  *(_DWORD *)(inited + 56) = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(inited + 72) = v5;
  *(_BYTE *)(inited + 80) = 0;
  *(_QWORD *)(inited + 48) = a1;
  memset(&v43, 0, 28);
  memset(&v43.st_atimespec, 0, 112);
  if (lstat(a1, &v43) || (v44[0] = (char *)a1, v44[1] = 0, (v10 = fts_open(v44, a2, 0)) == 0))
  {
    v6 = MEMORY[0x186DA4118]();
    v8 = String.init(cString:)();
    v9 = 1;
    v10 = (FTS *)v6;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
  }
  *(_QWORD *)(inited + 16) = v10;
  *(_QWORD *)(inited + 24) = v8;
  *(_QWORD *)(inited + 32) = v7;
  *(_BYTE *)(inited + 40) = v9;
  v11 = _FTSSequence.Iterator.next()();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v14 != -1)
  {
    v16 = v11;
    v17 = v12;
    v18 = v13;
    v19 = v14;
    v20 = 0;
    v21 = MEMORY[0x1E0DEE9D8] + 32;
    v42 = inited;
    while (1)
    {
      if (!v20)
      {
        v22 = v15[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_35;
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_FTSSequence.Element>);
        v25 = (_QWORD *)swift_allocObject();
        v26 = _swift_stdlib_malloc_size(v25);
        v27 = v26 - 32;
        if (v26 < 32)
          v27 = v26 - 1;
        v28 = v27 >> 5;
        v25[2] = v24;
        v25[3] = 2 * (v27 >> 5);
        v29 = (unint64_t)(v25 + 4);
        v30 = v15[3] >> 1;
        v31 = 32 * v30;
        if (v15[2])
        {
          if (v25 != v15 || v29 >= (unint64_t)&v15[v31 / 8 + 4])
            memmove(v25 + 4, v15 + 4, v31);
          v15[2] = 0;
        }
        v21 = v29 + v31;
        v20 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        v15 = v25;
        inited = v42;
      }
      v33 = __OFSUB__(v20--, 1);
      if (v33)
        break;
      *(_QWORD *)v21 = v16;
      *(_QWORD *)(v21 + 8) = v17;
      *(_QWORD *)(v21 + 16) = v18;
      *(_BYTE *)(v21 + 24) = v19 & 1;
      v21 += 32;
      v16 = _FTSSequence.Iterator.next()();
      v17 = v34;
      v18 = v35;
      v19 = v36;
      if (v36 == -1)
        goto LABEL_27;
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  v20 = 0;
LABEL_27:
  swift_setDeallocating();
  v37 = *(FTS **)(inited + 16);
  if (*(_BYTE *)(inited + 40))
    outlined consume of _FTSSequence.Iterator.State((uint64_t)v37, *(_QWORD *)(inited + 24), *(_QWORD *)(inited + 32), *(_BYTE *)(inited + 40));
  else
    fts_close(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v15[3];
  if (v38 >= 2)
  {
    v39 = v38 >> 1;
    v33 = __OFSUB__(v39, v20);
    v40 = v39 - v20;
    if (v33)
      goto LABEL_36;
    v15[2] = v40;
  }
  return v15;
}

_QWORD *specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t started;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t isStackAllocationSafe;
  __n128 v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v36[1048];
  uint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  swift_retain();
  started = sysdir_start_search_path_enumeration_private();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = MEMORY[0x1E0DEE9D8] + 32;
  v37 = 32;
  while (1)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!(_DWORD)isStackAllocationSafe)
      break;
    v9 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v10 = MEMORY[0x186DA9FF8](started, v36, v9);
    if (!(_DWORD)v10)
      goto LABEL_22;
    started = v10;
    v11 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v12 = objc_msgSend(v11, sel_stringWithFileSystemRepresentation_length_, v36, strlen(v36));

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

LABEL_7:
    v39[0] = v13;
    v39[1] = v15;
    a3(&v40, v39);
    swift_bridgeObjectRelease();
    v21 = v40;
    v22 = v41;
    if (!v5)
    {
      v23 = v6[3];
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_27;
      v38 = v41;
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1)
        v25 = 1;
      else
        v25 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v26 = (_QWORD *)swift_allocObject();
      v27 = (uint64_t)(_swift_stdlib_malloc_size(v26) - 32) / 24;
      v26[2] = v25;
      v26[3] = 2 * v27;
      v28 = (unint64_t)(v26 + 4);
      v29 = v6[3] >> 1;
      if (v6[2])
      {
        v30 = v6 + 4;
        if (v26 != v6 || v28 >= (unint64_t)v30 + 24 * v29)
          memmove(v26 + 4, v30, 24 * v29);
        v6[2] = 0;
      }
      v7 = v28 + 24 * v29;
      v5 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
      swift_release();
      v6 = v26;
      v22 = v38;
    }
    v31 = __OFSUB__(v5--, 1);
    if (v31)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
    *(_QWORD *)v7 = v21;
    *(_OWORD *)(v7 + 8) = v22;
    v7 += 24;
  }
  v16 = (const char *)swift_slowAlloc();
  v17 = MEMORY[0x186DA9FF8](started, v16);
  if ((_DWORD)v17)
  {
    started = v17;
    v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v19 = objc_msgSend(v18, sel_stringWithFileSystemRepresentation_length_, v16, strlen(v16));

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v15 = v20;

    MEMORY[0x186DA9E78](v16, -1, -1);
    goto LABEL_7;
  }
  MEMORY[0x186DA9E78](v16, -1, -1);
LABEL_22:
  swift_release();
  v32 = v6[3];
  if (v32 >= 2)
  {
    v33 = v32 >> 1;
    v31 = __OFSUB__(v33, v5);
    v34 = v33 - v5;
    if (v31)
      goto LABEL_28;
    v6[2] = v34;
  }
  return v6;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::Int v23;
  double *v24;
  double v25;
  Swift::Int v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(unsigned __int8 *)(v79 + i);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v94 = result;
  v95 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (unsigned __int8 *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v93 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(_QWORD *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v93 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v95;
    v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  v9 = 0;
  v92 = v2;
  v10 = *v2;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v96 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int8 *)(v10 + v9);
      v15 = *(unsigned __int8 *)(v10 + v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v94)
      goto LABEL_47;
    v21 = v13 + v94;
    if (__OFADD__(v13, v94))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (_BYTE *)(v10 + v9);
      do
      {
        v23 = *(unsigned __int8 *)(v10 + v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *(v25 - 1);
          if (v23 >= v26)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v26;
          *--v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v96;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v96;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v10 + *(_QWORD *)v71), (unsigned __int8 *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v96;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v95;
    if (v9 >= v95)
    {
      v2 = v92;
      v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(unsigned __int8 *)(v79 + i);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v94 = result;
  v95 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (unsigned __int8 *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v93 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(_QWORD *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v93 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v95;
    v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  v9 = 0;
  v92 = v2;
  v10 = *v2;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v96 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int8 *)(v10 + v9);
      v15 = *(unsigned __int8 *)(v10 + v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v94)
      goto LABEL_47;
    v21 = v13 + v94;
    if (__OFADD__(v13, v94))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (_BYTE *)(v10 + v9);
      do
      {
        v23 = *(unsigned __int8 *)(v10 + v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *(v25 - 1);
          if (v23 >= v26)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v26;
          *--v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v96;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v96;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v10 + *(_QWORD *)v71), (unsigned __int8 *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v96;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v95;
    if (v9 >= v95)
    {
      v2 = v92;
      v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  int64_t v4;
  char *result;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x186DA58ACLL);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(_QWORD *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  __int128 v25;
  _QWORD v26[36];
  _QWORD v27[36];
  _QWORD __dst[36];
  uint64_t v29;
  _QWORD __src[37];
  uint64_t v31;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = 0;
  v22 = result + 32;
  v20 = (unsigned __int8 *)(a3 + 40);
  v6 = MEMORY[0x1E0DEE9D8];
  v21 = *(_QWORD *)(result + 16);
  do
  {
    if (v5 <= v3)
      v7 = v3;
    else
      v7 = v5;
    v24 = v7;
    while (1)
    {
      if (v5 == v24)
      {
        __break(1u);
        return result;
      }
      v8 = *(double *)(v22 + 8 * v5);
      v9 = *(_QWORD *)(a2 + 8);
      v29 = 4;
      v10 = v8 <= 1.59271755e13 ? v8 : 1.59271755e13;
      v11 = fmax(v10, -2.11845067e11);
      ObjectType = swift_getObjectType();
      *(double *)v27 = v11;
      v13 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t))(v9 + 192);
      swift_unknownObjectRetain();
      v13(__src, &v29, (__int128 *)v27, ObjectType, v9);
      memcpy(__dst, __src, 0x11AuLL);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      v14 = LOBYTE(__dst[9]) ? 0 : __dst[8];
      v26[0] = 4;
      *(double *)&v25 = v11;
      v13(v27, v26, &v25, ObjectType, v9);
      ++v5;
      memcpy(v26, v27, 0x11AuLL);
      result = outlined release of DateComponents((uint64_t)v26);
      v15 = *(_QWORD *)(a3 + 16);
      if (v15)
        break;
LABEL_7:
      if (v5 == v21)
        return v6;
    }
    v16 = v20;
    while (1)
    {
      v17 = *((_QWORD *)v16 - 1) != v14 || BYTE1(v26[35]) == 2;
      if (!v17 && ((((v26[35] & 0x100) == 0) ^ *v16) & 1) != 0)
        break;
      v16 += 16;
      if (!--v15)
        goto LABEL_7;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v31 = v6;
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = v31;
    }
    v19 = *(_QWORD *)(v6 + 16);
    v18 = *(_QWORD *)(v6 + 24);
    if (v19 >= v18 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v6 = v31;
    }
    *(_QWORD *)(v6 + 16) = v19 + 1;
    *(double *)(v6 + 8 * v19 + 32) = v8;
    v3 = v21;
  }
  while (v5 != v21);
  return v6;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v24 = *(_QWORD *)(a1 + 8 * v6 + 32);
    closure #2 in Calendar.RecurrenceRule._expandWeeks(dates:anchor:)((double *)&v24, a2, a3, &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    v8 = v23;
    v9 = *(_QWORD *)(v23 + 16);
    v10 = v7[2];
    v11 = v10 + v9;
    if (__OFADD__(v10, v9))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v10 <= v11)
        v13 = v10 + v9;
      else
        v13 = v10;
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v13, 1, v7);
      if (*(_QWORD *)(v8 + 16))
      {
LABEL_15:
        v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9)
          goto LABEL_30;
        v15 = &v7[v14 + 4];
        if (v8 + 32 < (unint64_t)&v15[v9] && (unint64_t)v15 < v8 + 32 + 8 * v9)
          goto LABEL_32;
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          v17 = v7[2];
          v18 = __OFADD__(v17, v9);
          v19 = v17 + v9;
          if (v18)
            goto LABEL_31;
          v7[2] = v19;
        }
        goto LABEL_4;
      }
    }
    if (v9)
      goto LABEL_29;
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x1E0DEE9D8];
    while (v8 < *(_QWORD *)(v4 + 16))
    {
      v12 = *(_QWORD *)(v4 + 8 * v8 + 32);
      v13 = v12;
      result = a3(&v13, a2);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if ((result & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v14 = v9;
        if ((result & 1) == 0)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v9 = v14;
        }
        v11 = *(_QWORD *)(v9 + 16);
        v10 = *(_QWORD *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v9 = v14;
        }
        *(_QWORD *)(v9 + 16) = v11 + 1;
        *(_QWORD *)(v9 + 8 * v11 + 32) = v12;
      }
      if (v5 == ++v8)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x1E0DEE9D8];
    while (v8 < *(_QWORD *)(v4 + 16))
    {
      v12 = *(_QWORD *)(v4 + 8 * v8 + 32);
      v13 = v12;
      result = closure #1 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)((double *)&v13, a2, a3);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if ((result & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v14 = v9;
        if ((result & 1) == 0)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v9 = v14;
        }
        v11 = *(_QWORD *)(v9 + 16);
        v10 = *(_QWORD *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v9 = v14;
        }
        *(_QWORD *)(v9 + 16) = v11 + 1;
        *(_QWORD *)(v9 + 8 * v11 + 32) = v12;
      }
      if (v5 == ++v8)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t *a2, unsigned __int8 a3)
{
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t ObjectType;
  void (*v10)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t);
  double v11;
  double v12;
  uint64_t v13;
  void (*v14)(double *__return_ptr, uint64_t, uint64_t);
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  double v22[3];
  _QWORD __dst[36];
  _QWORD __src[37];

  if (*(_QWORD *)(a1 + 16))
  {
    v20 = a3;
    v3 = a3;
    v4 = *(double *)(a1 + 32);
    v5 = *a2;
    v6 = a2[1];
    __dst[0] = qword_1820E6438[(char)a3];
    if (v4 <= 1.59271755e13)
      v7 = v4;
    else
      v7 = 1.59271755e13;
    v8 = fmax(v7, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v22[0] = v8;
    v10 = *(void (**)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v6 + 192);
    swift_unknownObjectRetain();
    v10(__src, __dst, v22, ObjectType, v6);
    if (v3 == 14)
    {
      __src[0] = v5;
      __src[1] = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v11 = *(double *)&__src[2];
      if (__src[2])
      {
        v12 = *(double *)&__src[3];
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        v13 = swift_getObjectType();
        v14 = *(void (**)(double *__return_ptr, uint64_t, uint64_t))(v6 + 48);
        swift_unknownObjectRetain();
        v14(v22, v13, v6);
        v21 = *(_OWORD *)v22;
        v15 = specialized static TimeZone.== infix(_:_:)((uint64_t)__dst, (uint64_t)&v21);
        swift_unknownObjectRelease();
        if ((v15 & 1) != 0)
        {
          swift_unknownObjectRelease();
        }
        else
        {
          __dst[0] = 0;
          __dst[1] = 0;
          v22[0] = v11;
          v22[1] = v12;
          v16 = (*(uint64_t (**)(_QWORD *, double *, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v6 + 112))(__dst, v22, 0, 1, 0, 1, v13, v6);
          v18 = v17;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __src[0] = v16;
          __src[1] = v18;
        }
      }
    }
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    __asm { BR              X11 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, double *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  while (1)
  {
    if (v4 == v3)
      return v6;
    if (v7 == v3)
      break;
    v8 = *(double *)(v5 + 8 * v3++);
    if (v8 >= *a2)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      if (v10 >= v9 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v6 + 16) = v10 + 1;
      *(double *)(v6 + 8 * v10 + 32) = v8;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v26 = *(_QWORD *)(a1 + 8 * v7 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitTimeComponent(_:dates:anchor:action:)((double *)&v26, a2, a3, a4, &v25);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    v9 = v25;
    v10 = *(_QWORD *)(v25 + 16);
    v11 = v8[2];
    v12 = v11 + v10;
    if (__OFADD__(v11, v10))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(_QWORD *)(v9 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v11 <= v12)
        v14 = v11 + v10;
      else
        v14 = v11;
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_15:
        v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10)
          goto LABEL_30;
        v16 = &v8[v15 + 4];
        if (v9 + 32 < (unint64_t)&v16[v10] && (unint64_t)v16 < v9 + 32 + 8 * v10)
          goto LABEL_32;
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          v18 = v8[2];
          v19 = __OFADD__(v18, v10);
          v20 = v18 + v10;
          if (v19)
            goto LABEL_31;
          v8[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v10)
      goto LABEL_29;
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v25;
  Foundation::Date v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    *(Foundation::Date *)&v26._time = *(Foundation::Date *)(a1 + 8 * v7 + 32);
    closure #2 in Calendar.RecurrenceRule._expandOrLimitWeekdays(dates:anchor:action:)(&v26._time, a2, a3, a4, &v25, v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    v9 = v25;
    v10 = *(_QWORD *)(v25 + 16);
    v11 = v8[2];
    v12 = v11 + v10;
    if (__OFADD__(v11, v10))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v8[3] >> 1)
    {
      if (*(_QWORD *)(v9 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v11 <= v12)
        v14 = v11 + v10;
      else
        v14 = v11;
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_15:
        v15 = v8[2];
        if ((v8[3] >> 1) - v15 < v10)
          goto LABEL_30;
        v16 = &v8[v15 + 4];
        if (v9 + 32 < (unint64_t)&v16[v10] && (unint64_t)v16 < v9 + 32 + 8 * v10)
          goto LABEL_32;
        memcpy(v16, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          v18 = v8[2];
          v19 = __OFADD__(v18, v10);
          v20 = v18 + v10;
          if (v19)
            goto LABEL_31;
          v8[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v10)
      goto LABEL_29;
LABEL_4:
    ++v7;
    swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule((uint64_t)a2);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of Calendar.RecurrenceRule(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Calendar.RecurrenceRule(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v24 = *(_QWORD *)(a1 + 8 * v6 + 32);
    closure #3 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheMonth(dates:anchor:action:)((double *)&v24, a2, a3, &v23);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    v8 = v23;
    v9 = *(_QWORD *)(v23 + 16);
    v10 = v7[2];
    v11 = v10 + v9;
    if (__OFADD__(v10, v9))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v7[3] >> 1)
    {
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v10 <= v11)
        v13 = v10 + v9;
      else
        v13 = v10;
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v13, 1, v7);
      if (*(_QWORD *)(v8 + 16))
      {
LABEL_15:
        v14 = v7[2];
        if ((v7[3] >> 1) - v14 < v9)
          goto LABEL_30;
        v15 = &v7[v14 + 4];
        if (v8 + 32 < (unint64_t)&v15[v9] && (unint64_t)v15 < v8 + 32 + 8 * v9)
          goto LABEL_32;
        memcpy(v15, (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          v17 = v7[2];
          v18 = __OFADD__(v17, v9);
          v19 = v17 + v9;
          if (v18)
            goto LABEL_31;
          v7[2] = v19;
        }
        goto LABEL_4;
      }
    }
    if (v9)
      goto LABEL_29;
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease();
    if (v4 == v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a2);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    closure #2 in Calendar.RecurrenceRule._expandOrLimitDaysOfTheYear(dates:anchor:action:)(a2, a3, &v25, a4, a5);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }
    v12 = v25;
    v13 = *(_QWORD *)(v25 + 16);
    v14 = v11[2];
    v15 = v14 + v13;
    if (__OFADD__(v14, v13))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v15 <= v11[3] >> 1)
    {
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v14 <= v15)
        v17 = v14 + v13;
      else
        v17 = v14;
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v17, 1, v11);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_15:
        v18 = v11[2];
        if ((v11[3] >> 1) - v18 < v13)
          goto LABEL_30;
        v19 = &v11[v18 + 4];
        if (v12 + 32 < (unint64_t)&v19[v13] && (unint64_t)v19 < v12 + 32 + 8 * v13)
          goto LABEL_32;
        memcpy(v19, (const void *)(v12 + 32), 8 * v13);
        if (v13)
        {
          v21 = v11[2];
          v22 = __OFADD__(v21, v13);
          v23 = v21 + v13;
          if (v22)
            goto LABEL_31;
          v11[2] = v23;
        }
        goto LABEL_4;
      }
    }
    if (v13)
      goto LABEL_29;
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v11;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  outlined release of Calendar.RecurrenceRule(a3);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  _BYTE __dst[288];
  double v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  _QWORD __src[36];
  __int128 v60;
  int v61;
  int v62;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(a2 + 272);
  v62 = *(unsigned __int8 *)(a2 + 280);
  v50 = *(_QWORD *)(a2 + 256);
  v61 = *(unsigned __int8 *)(a2 + 264);
  v49 = *(_QWORD *)(a2 + 240);
  v48 = *(_BYTE *)(a2 + 248);
  v47 = *(_QWORD *)(a2 + 224);
  v46 = *(_BYTE *)(a2 + 232);
  v45 = *(_QWORD *)(a2 + 208);
  v44 = *(_BYTE *)(a2 + 216);
  v43 = *(_QWORD *)(a2 + 192);
  v42 = *(_BYTE *)(a2 + 200);
  v41 = *(_QWORD *)(a2 + 176);
  v40 = *(_BYTE *)(a2 + 184);
  v39 = *(_QWORD *)(a2 + 160);
  v38 = *(_BYTE *)(a2 + 168);
  v37 = *(_QWORD *)(a2 + 144);
  v36 = *(_BYTE *)(a2 + 152);
  v35 = *(_QWORD *)(a2 + 128);
  v34 = *(_BYTE *)(a2 + 136);
  v33 = *(_QWORD *)(a2 + 112);
  v32 = *(_BYTE *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 96);
  v30 = *(_BYTE *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 80);
  v28 = *(_BYTE *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 48);
  v60 = *a3;
  v25 = *(_BYTE *)(a2 + 56);
  v26 = *((_BYTE *)a3 + 16);
  v24 = *(_QWORD *)(a2 + 32);
  v23 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)a2;
  v9 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
  v10 = v4 - 1;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = v7;
  while (1)
  {
    v12 = *((_QWORD *)v9 - 1);
    v13 = v12 == 0x7FFFFFFFFFFFFFFFLL;
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      v12 = 0;
    __src[8] = v12;
    v14 = v13;
    LOBYTE(__src[9]) = v14;
    BYTE1(__src[35]) = *v9;
    __src[0] = v20;
    __src[1] = v8;
    __src[2] = v22;
    __src[3] = v21;
    __src[4] = v24;
    LOBYTE(__src[5]) = v23;
    __src[6] = v27;
    LOBYTE(__src[7]) = v25;
    __src[10] = v29;
    LOBYTE(__src[11]) = v28;
    __src[12] = v31;
    LOBYTE(__src[13]) = v30;
    __src[14] = v33;
    LOBYTE(__src[15]) = v32;
    __src[16] = v35;
    LOBYTE(__src[17]) = v34;
    __src[18] = v37;
    LOBYTE(__src[19]) = v36;
    __src[20] = v39;
    LOBYTE(__src[21]) = v38;
    __src[22] = v41;
    LOBYTE(__src[23]) = v40;
    __src[24] = v43;
    LOBYTE(__src[25]) = v42;
    __src[26] = v45;
    LOBYTE(__src[27]) = v44;
    __src[28] = v47;
    LOBYTE(__src[29]) = v46;
    __src[30] = v49;
    LOBYTE(__src[31]) = v48;
    __src[32] = v50;
    LOBYTE(__src[33]) = v61;
    __src[34] = v7;
    LOBYTE(__src[35]) = v62;
    v57 = 0;
    v58 = 1;
    v56 = v60;
    v55 = a4;
    memcpy(__dst, __src, 0x11AuLL);
    v53 = v26;
    v52 = 0;
    v51 = 0;
    outlined retain of DateComponents(a2);
    specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v55, __dst, &v53, &v52, &v51, &v56, &v57);
    outlined release of DateComponents((uint64_t)__src);
    if ((v58 & 1) == 0)
    {
      v15 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v17 = v11[2];
      v16 = v11[3];
      if (v17 >= v16 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v11);
      v11[2] = v17 + 1;
      v11[v17 + 4] = v15;
      v7 = v19;
    }
    if (!v10)
      break;
    v9 += 16;
    --v10;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t outlined release of Calendar.DatesByMatching.Iterator(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_181B89894()
{
  return swift_deallocObject();
}

uint64_t sub_181B898A4()
{
  return swift_deallocObject();
}

uint64_t outlined release of Calendar.DatesByRecurring(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t outlined init with take of Range<Date>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Calendar.DatesByRecurring(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Calendar.DatesByRecurring.Iterator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t destroy for Calendar.DatesByRecurring.Iterator()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  v28 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v8 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v8;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v9 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v9;
  v10 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v10;
  v11 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v11;
  v12 = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v12;
  v13 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v13;
  v14 = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = v14;
  v15 = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = v15;
  v16 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v16;
  v17 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v17;
  v18 = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = v18;
  v19 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v19;
  v20 = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v20;
  v21 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v21;
  v22 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v22;
  v23 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v23;
  v24 = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = v24;
  v25 = *(_QWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = v25;
  v26 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v26;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = *(_BYTE *)(a2 + 548);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_BYTE *)(a2 + 547);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v11 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 256) = v11;
  v12 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 272) = v12;
  v13 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 288) = v13;
  v14 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v14;
  v15 = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v15;
  v16 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v16;
  v17 = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = v17;
  v18 = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = v18;
  v19 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v19;
  v20 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v20;
  v21 = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = v21;
  v22 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v22;
  v23 = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v23;
  v24 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v24;
  v25 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v25;
  v26 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v26;
  v27 = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = v27;
  v28 = *(_QWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = v28;
  v29 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v29;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = v4[1];
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = v4[13];
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = v4[29];
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy608_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x260uLL);
}

uint64_t assignWithTake for Calendar.DatesByRecurring.Iterator(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_BYTE *)(a2 + 547);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v8 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_unknownObjectRelease();
  v9 = *(_QWORD *)(a2 + 264);
  v10 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 256) = v8;
  *(_QWORD *)(a1 + 264) = v9;
  swift_unknownObjectRelease();
  v11 = *(_QWORD *)(a2 + 280);
  v12 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 272) = v10;
  *(_QWORD *)(a1 + 280) = v11;
  swift_unknownObjectRelease();
  v13 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v12;
  *(_QWORD *)(a1 + 296) = v13;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v14 = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = v14;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v15 = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = v15;
  v16 = *(_QWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = v16;
  v17 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v17;
  *(_BYTE *)(a1 + 545) = *(_BYTE *)(a2 + 545);
  *(_BYTE *)(a1 + 546) = *(_BYTE *)(a2 + 546);
  *(_BYTE *)(a1 + 547) = *(_BYTE *)(a2 + 547);
  *(_BYTE *)(a1 + 548) = v4[1];
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = v4[13];
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = v4[29];
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 608))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.DatesByRecurring.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 600) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 608) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 608) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.DatesByRecurring.Iterator()
{
  return &type metadata for Calendar.DatesByRecurring.Iterator;
}

uint64_t storeEnumTagSinglePayload for ComponentAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B8A6F4 + 4 * byte_1820E6287[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B8A728 + 4 * byte_1820E6282[v4]))();
}

uint64_t sub_181B8A728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B8A730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B8A738);
  return result;
}

uint64_t sub_181B8A744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B8A74CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B8A750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B8A758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComponentAction()
{
  return &type metadata for ComponentAction;
}

unint64_t lazy protocol witness table accessor for type ComponentAction and conformance ComponentAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction;
  if (!lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComponentAction, &type metadata for ComponentAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentAction and conformance ComponentAction);
  }
  return result;
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySnySiGqd__Isgyrzo_10Foundation8IndexSetV9RangeViewVABsAG_pAMRszr__lIetMggrzo_Tp5@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t PredicateExpressions.Conditional.test.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Conditional.trueBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.Conditional.falseBranch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

void PredicateExpressions.Conditional.init(test:trueBranch:falseBranch:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for PredicateExpressions.Conditional();
}

uint64_t sub_181B8A8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

_QWORD *PredicateExpressions.Conditional.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v6 = *a1;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(a2[5] + 16))(&v7, &v6, a2[2]);
  if (!v2)
  {
    v6 = v4;
    if (v7 == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD))(a2[6] + 16))(&v6, a2[3]);
    else
      return (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD))(a2[7] + 16))(&v6, a2[4]);
  }
  return result;
}

_QWORD *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conditional<A, B, C>(uint64_t *a1, _QWORD *a2)
{
  return PredicateExpressions.Conditional.evaluate(_:)(a1, a2);
}

void static PredicateExpressions.build_Conditional<A, B, C>(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  type metadata accessor for PredicateExpressions.Conditional();
}

uint64_t sub_181B8AA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v5 + *(int *)(a1 + 72), v3, v1);
}

uint64_t PredicateExpressions.Conditional.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000182308B90;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x724265757274202CLL;
  v1._object = (void *)0xEE00203A68636E61;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x4265736C6166202CLL;
  v2._object = (void *)0xEF203A68636E6172;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t PredicateExpressions.Conditional<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Conditional<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[18];

  v17[10] = a3;
  v17[3] = a4;
  v17[2] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17[4] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[8] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v6);
  v17[6] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[7] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v9);
  v17[9] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[11] = v11;
  v17[12] = v12;
  v17[5] = v13;
  v17[13] = v13;
  v17[14] = v14;
  v17[15] = v15;
  v17[16] = v16;
  type metadata accessor for PredicateExpressions.Conditional();
}

uint64_t sub_181B8ADFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 224) = v6;
  *(_QWORD *)(v4 - 216) = v8;
  *(_QWORD *)(v4 - 72) = v3;
  v10 = *(_QWORD *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  v11 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 32))(*(_QWORD *)(v4 - 216), v11, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  v12 = *(_QWORD *)(v4 - 176);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 32))(*(_QWORD *)(v4 - 216) + *(int *)(a1 + 68), v12, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 216);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v4 - 208) + 32))(v13 + *(int *)(a1 + 72), *(_QWORD *)(v4 - 192), *(_QWORD *)(v4 - 184));
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  v14 = *(_QWORD *)(v4 - 224);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 16))(*(_QWORD *)(v4 - 200), v13, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[6];
  _QWORD v16[6];

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Conditional<A, B, C>);
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v11 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  v13 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 24);
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = v11;
  v16[3] = v10;
  v16[4] = v13;
  v16[5] = v12;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>, a2, v16);
  v15[0] = v9;
  v15[1] = v8;
  v15[2] = v11;
  v15[3] = v10;
  v15[4] = v13;
  v15[5] = v12;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>, a2, v15);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Conditional<>.init(from:)(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conditional<A, B, C>(_QWORD *a1)
{
  return PredicateExpressions.Conditional<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conditional(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Conditional(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

uint64_t static NSTextCheckingType.allSystemTypes.getter()
{
  return 0xFFFFFFFFLL;
}

unint64_t static NSTextCheckingType.allCustomTypes.getter()
{
  return 0xFFFFFFFF00000000;
}

uint64_t static NSTextCheckingType.allTypes.getter()
{
  return -1;
}

Swift::Void __swiftcall NSDecimal.add(_:)(NSDecimal *a1)
{
  unint64_t v1;
  unsigned int v2;
  int *v3;

  specialized static NSDecimal.+= infix(_:_:)(v3, (unint64_t)a1, v1, v2);
}

Swift::Void __swiftcall NSDecimal.subtract(_:)(NSDecimal *a1)
{
  unint64_t v1;
  unsigned int v2;
  int *v3;
  __int16 v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int isNegative_getter;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  Swift::OpaquePointer v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  int v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _WORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t *v69;
  _WORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int16 v74;
  __int16 v75;
  int v76;
  __int16 v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  __int16 v81;
  unint64_t v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unint64_t v91;
  uint64_t v92;
  Swift::OpaquePointer v93;
  _BYTE *v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  __int16 v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  int v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  int v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  __int128 v135;
  unsigned int v136;
  __int128 v137;
  unsigned int v138;
  __int128 v139;
  unsigned int v140;
  __int128 v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v4 = v2;
  v146 = *MEMORY[0x1E0C80C00];
  v132 = *((_WORD *)v3 + 2);
  v5 = (unint64_t)a1 >> 32;
  v6 = (unint64_t)a1 >> 48;
  v115 = *((_WORD *)v3 + 3);
  v7 = (int)a1;
  v8 = v1 >> 16;
  v118 = *v3;
  v120 = *((_WORD *)v3 + 4);
  v9 = HIDWORD(v1);
  v10 = HIWORD(v1);
  v130 = *((_WORD *)v3 + 5);
  LOWORD(v11) = v1;
  v12 = HIWORD(v2);
  v128 = *((_WORD *)v3 + 6);
  v126 = *((_WORD *)v3 + 7);
  v124 = *((_WORD *)v3 + 8);
  v122 = *((_WORD *)v3 + 9);
  v143 = (int)a1;
  LOWORD(v144) = WORD2(a1);
  WORD1(v144) = HIWORD(a1);
  HIDWORD(v144) = v1;
  LOWORD(v145) = WORD2(v1);
  WORD1(v145) = HIWORD(v1);
  HIDWORD(v145) = v2;
  *(_QWORD *)&v141 = a1;
  *((_QWORD *)&v141 + 1) = v1;
  v142 = v2;
  if (_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v12;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v143);
    v7 = v143;
    LOWORD(v5) = v144;
    LOWORD(v6) = WORD1(v144);
    LOWORD(v11) = WORD2(v144);
    LOWORD(v8) = HIWORD(v144);
    LOWORD(v9) = v145;
    LOWORD(v10) = WORD1(v145);
    v4 = WORD2(v145);
    LOWORD(v14) = HIWORD(v145);
  }
  else
  {
    LOWORD(v14) = v12;
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  LOWORD(v15) = v115;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v118;
    WORD2(v141) = v132;
    WORD3(v141) = v115;
    WORD4(v141) = v120;
    WORD5(v141) = v130;
    WORD6(v141) = v128;
    HIWORD(v141) = v126;
    LOWORD(v142) = v124;
    HIWORD(v142) = v122;
    if (_So9NSDecimala__isNegative_getter(&v141))
      goto LABEL_20;
  }
  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v141) = v7;
    WORD2(v141) = v5;
    WORD3(v141) = v6;
    WORD4(v141) = v11;
    WORD5(v141) = v8;
    WORD6(v141) = v9;
    HIWORD(v141) = v10;
    LOWORD(v142) = v4;
    HIWORD(v142) = v14;
    if (_So9NSDecimala__isNegative_getter(&v141))
      goto LABEL_20;
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LOWORD(v15) = v6;
    LOWORD(v6) = v8;
    v39 = v114;
    LODWORD(v8) = v7;
    LOWORD(v7) = v4;
    goto LABEL_25;
  }
  LODWORD(v141) = v7;
  WORD2(v141) = v5;
  WORD3(v141) = v6;
  WORD4(v141) = v11;
  WORD5(v141) = v8;
  WORD6(v141) = v9;
  HIWORD(v141) = v10;
  LOWORD(v142) = v4;
  HIWORD(v142) = v14;
  if (!_So9NSDecimala__length_getter(&v141))
  {
    LODWORD(v8) = v118;
    LOWORD(v11) = v120;
    LOWORD(v7) = v124;
    LOWORD(v14) = v122;
    LOWORD(v6) = v130;
    LOWORD(v5) = v132;
    v39 = v114;
    LOWORD(v10) = v126;
    LOWORD(v9) = v128;
    goto LABEL_25;
  }
  LODWORD(v141) = v118;
  WORD2(v141) = v132;
  WORD3(v141) = v115;
  WORD4(v141) = v120;
  WORD5(v141) = v130;
  WORD6(v141) = v128;
  HIWORD(v141) = v126;
  LOWORD(v142) = v124;
  HIWORD(v142) = v122;
  LODWORD(v139) = v7;
  WORD2(v139) = v5;
  WORD3(v139) = v6;
  WORD4(v139) = v11;
  WORD5(v139) = v8;
  WORD6(v139) = v9;
  HIWORD(v139) = v10;
  LOWORD(v140) = v4;
  HIWORD(v140) = v14;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v141, (uint64_t)&v139);
  v125 = WORD5(v141);
  v127 = v141;
  v137 = v141;
  v116 = WORD2(v141);
  v131 = WORD4(v141);
  v133 = WORD3(v141);
  v121 = HIWORD(v141);
  v123 = WORD6(v141);
  v119 = (unsigned __int16)v142;
  v138 = v142;
  v129 = HIWORD(v142);
  v16 = _So9NSDecimala__length_getter(&v137);
  v8 = v139;
  v5 = WORD2(v139);
  v15 = WORD3(v139);
  v11 = WORD4(v139);
  v6 = WORD5(v139);
  v9 = WORD6(v139);
  v10 = HIWORD(v139);
  v7 = (unsigned __int16)v140;
  v14 = HIWORD(v140);
  if (!v16)
    goto LABEL_22;
  v137 = v139;
  v138 = v140;
  if (!_So9NSDecimala__length_getter(&v137))
  {
    LOWORD(v6) = v125;
    LODWORD(v8) = v127;
    LOWORD(v5) = v116;
    LOWORD(v11) = v131;
    LOWORD(v15) = v133;
    LOWORD(v10) = v121;
    LOWORD(v9) = v123;
    LOWORD(v7) = v119;
    LOWORD(v14) = v129;
    goto LABEL_22;
  }
  LODWORD(v137) = v127;
  WORD2(v137) = v116;
  WORD3(v137) = v133;
  WORD4(v137) = v131;
  WORD5(v137) = v125;
  WORD6(v137) = v123;
  HIWORD(v137) = v121;
  LOWORD(v138) = v119;
  HIWORD(v138) = v129;
  LODWORD(v135) = v127;
  WORD2(v135) = v116;
  *(_DWORD *)((char *)&v135 + 6) = __PAIR32__(v131, v133);
  WORD5(v135) = v125;
  HIDWORD(v135) = __PAIR32__(v121, v123);
  LOWORD(v136) = v119;
  HIWORD(v136) = v129;
  v113 = _So9NSDecimala__isNegative_getter(&v135);
  LODWORD(v135) = v8;
  WORD2(v135) = v5;
  WORD3(v135) = v15;
  WORD4(v135) = v11;
  WORD5(v135) = v6;
  WORD6(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  HIWORD(v136) = v14;
  if (v113 == _So9NSDecimala__isNegative_getter(&v135))
  {
    LODWORD(v135) = v127;
    WORD2(v135) = v116;
    WORD3(v135) = v133;
    WORD4(v135) = v131;
    WORD5(v135) = v125;
    WORD6(v135) = v123;
    HIWORD(v135) = v121;
    LOWORD(v136) = v119;
    HIWORD(v136) = v129;
    v17 = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(v17, &v137);
    NSDecimal.asVariableLengthInteger()(v127 | (v116 << 32) | (v133 << 48), v131 | (v125 << 16) | (v123 << 32) | (v121 << 48), v119 | (v129 << 16));
    v19 = v18;
    NSDecimal.asVariableLengthInteger()(v8 | (v5 << 32) | (v15 << 48), v11 | (v6 << 16) | (v9 << 32) | (v10 << 48), v7 | (v14 << 16));
    v22 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v19, v20, 9, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v22 + 16);
    if (v23 <= 8)
    {
      v25._rawValue = (void *)v22;
LABEL_31:
      _So9NSDecimala__length_setter(v23, &v137);
      NSDecimal.copyVariableLengthInteger(_:)(v25);
      v37 = v45;
      swift_bridgeObjectRelease();
      if (v45)
        goto LABEL_21;
      goto LABEL_149;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v22, 0);
    v25._rawValue = v24;
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = v137;
    v29 = WORD2(v137);
    v30 = WORD3(v137);
    v31 = WORD4(v137);
    v32 = WORD5(v137);
    v33 = WORD6(v137);
    v34 = HIWORD(v137);
    v35 = v138;
    v135 = v137;
    v136 = v138;
    v134 = HIWORD(v138);
    v36 = _So9NSDecimala__exponent_getter((char *)&v135);
    if (v27 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v27 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v36, (_DWORD)v27))
        {
          if (v36 + (int)v27 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v37 = (void *)swift_allocError();
            *v38 = 0;
            swift_willThrow();
            goto LABEL_21;
          }
          LODWORD(v135) = v28;
          WORD2(v135) = v29;
          WORD3(v135) = v30;
          WORD4(v135) = v31;
          WORD5(v135) = v32;
          WORD6(v135) = v33;
          HIWORD(v135) = v34;
          LOWORD(v136) = v35;
          HIWORD(v136) = v134;
          v83 = _So9NSDecimala__exponent_getter((char *)&v135);
          v84 = __OFADD__(v83, (_DWORD)v27);
          v85 = (v83 + v27);
          if (!v84)
          {
            _So9NSDecimala__exponent_setter(v85, &v137);
            v23 = *((_QWORD *)v25._rawValue + 2);
            if (HIDWORD(v23))
              goto LABEL_163;
            goto LABEL_31;
          }
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          goto LABEL_163;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v110 = v131 | (v125 << 16) | (v123 << 32) | (v121 << 48);
  v111 = v127 | (v116 << 32) | (v133 << 48);
  v109 = v119 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  v41 = v40;
  v107 = v11 | (v6 << 16) | (v9 << 32) | (v10 << 48);
  v108 = v8 | (v5 << 32) | (v15 << 48);
  v106 = v7 | (v14 << 16);
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  v112 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v43 = v112;
  v44 = v133;
  if (v112 == -1)
  {
    v117 = v15;
    NSDecimal.asVariableLengthInteger()(v108, v107, v106);
    v47 = v46;
    NSDecimal.asVariableLengthInteger()(v111, v110, v109);
    v49 = v48;
    v50 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v52 = v49;
    *(_QWORD *)(v50 + 32) = 0;
    v53 = (_WORD *)(v50 + 32);
    *(_QWORD *)(v50 + 16) = 8;
    v54 = (unint64_t *)v50;
    *(_QWORD *)(v50 + 40) = 0;
    v55 = *(_QWORD *)(v47 + 16);
    v56 = *(_QWORD *)(v52 + 16);
    if (v56 >= v55)
      v57 = *(_QWORD *)(v47 + 16);
    else
      v57 = *(_QWORD *)(v52 + 16);
    v105 = v7;
    if (!v57)
    {
      if (!v55)
      {
        v62 = v117;
        if (v56)
        {
          v61 = 0;
          LODWORD(v60) = 1;
          goto LABEL_91;
        }
        v86 = 8;
        goto LABEL_100;
      }
      v61 = 0;
      v62 = v117;
      goto LABEL_83;
    }
    v58 = v47 + 32;
    v59 = (*(unsigned __int16 *)(v47 + 32) | 0x10000) - *(unsigned __int16 *)(v52 + 32);
    LODWORD(v60) = HIWORD(v59);
    *v53 = *(_WORD *)(v47 + 32) - *(_WORD *)(v52 + 32);
    v61 = v57 - 1;
    if (!v61)
    {
      v61 = 1;
      goto LABEL_56;
    }
    v59 = v60 + *(unsigned __int16 *)(v47 + 34) - *(unsigned __int16 *)(v52 + 34) + 0xFFFF;
    LODWORD(v60) = HIWORD(v59);
    *(_WORD *)(v50 + 34) = v59;
    v62 = v117;
    if (v61 == 1)
    {
      v61 = 2;
    }
    else
    {
      v51 = *(unsigned __int16 *)(v52 + 36);
      v59 = v60 + *(unsigned __int16 *)(v47 + 36) - v51 + 0xFFFF;
      LODWORD(v60) = HIWORD(v59);
      *(_WORD *)(v50 + 36) = v59;
      if (v61 == 2)
      {
        v61 = 3;
      }
      else
      {
        v59 = v60 + *(unsigned __int16 *)(v47 + 38) - *(unsigned __int16 *)(v52 + 38) + 0xFFFF;
        LODWORD(v60) = HIWORD(v59);
        *(_WORD *)(v50 + 38) = v59;
        if (v61 == 3)
        {
          v61 = 4;
        }
        else
        {
          v51 = *(unsigned __int16 *)(v52 + 40);
          v59 = v60 + *(unsigned __int16 *)(v47 + 40) - v51 + 0xFFFF;
          LODWORD(v60) = HIWORD(v59);
          *(_WORD *)(v50 + 40) = v59;
          if (v61 == 4)
          {
            v61 = 5;
          }
          else
          {
            v59 = v60 + *(unsigned __int16 *)(v47 + 42) - *(unsigned __int16 *)(v52 + 42) + 0xFFFF;
            LODWORD(v60) = HIWORD(v59);
            *(_WORD *)(v50 + 42) = v59;
            if (v61 != 5)
            {
              v51 = *(unsigned __int16 *)(v52 + 44);
              v59 = v60 + *(unsigned __int16 *)(v47 + 44) - v51 + 0xFFFF;
              LODWORD(v60) = HIWORD(v59);
              *(_WORD *)(v50 + 44) = v59;
              if (v61 != 6)
                goto LABEL_114;
              v61 = 7;
              goto LABEL_56;
            }
            v61 = 6;
          }
        }
      }
    }
    while (1)
    {
      if (v61 >= v55)
        goto LABEL_90;
      if (!HIWORD(v59))
        break;
LABEL_83:
      v58 = v47 + 32;
      if (v61 <= v55)
        v60 = v55;
      else
        v60 = v61;
      while (v60 != v61)
      {
        if (v61 >= *(_QWORD *)(v50 + 16))
          goto LABEL_113;
        v53[v61] = *(_WORD *)(v58 + 2 * v61);
        if ((uint64_t)++v61 >= (uint64_t)v55)
        {
          LODWORD(v60) = 1;
LABEL_90:
          if ((uint64_t)v61 < (uint64_t)v56)
          {
            while (1)
            {
LABEL_91:
              if (v61 >= v56)
                goto LABEL_158;
              v55 = *(_QWORD *)(v50 + 16);
              if (v61 < v55)
                break;
LABEL_96:
              __break(1u);
LABEL_97:
              LODWORD(v60) = HIWORD(v51);
              v61 = v55;
              if ((uint64_t)v55 >= (uint64_t)v56)
                goto LABEL_98;
            }
            v89 = v60 + (*(unsigned __int16 *)(v52 + 32 + 2 * v61) ^ 0xFFFF);
            --v56;
            v55 = v52 + 34;
            while (1)
            {
              LODWORD(v60) = HIWORD(v89);
              v53[v61] = v89;
              if (v56 == v61)
                break;
              v89 = v60 + (*(unsigned __int16 *)(v55 + 2 * v61++) ^ 0xFFFF);
              if (v61 >= *(_QWORD *)(v50 + 16))
                goto LABEL_96;
            }
          }
LABEL_98:
          if (!(_DWORD)v60)
            goto LABEL_105;
          v86 = *(_QWORD *)(v50 + 16);
          if (v86)
          {
LABEL_100:
            if (!v53[v86 - 1])
            {
              do
              {
                *(_QWORD *)(v50 + 16) = v86 - 1;
                if (v86 == 1)
                  break;
              }
              while (!*(unsigned __int16 *)(v50 + 28 + 2 * v86--));
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v91 = v54[2];
          if (!HIDWORD(v91))
          {
            _So9NSDecimala__length_setter(v91, &v137);
            LODWORD(v135) = v8;
            WORD2(v135) = v5;
            WORD3(v135) = v62;
            WORD4(v135) = v11;
            WORD5(v135) = v6;
            WORD6(v135) = v9;
            HIWORD(v135) = v10;
            LOWORD(v136) = v105;
            HIWORD(v136) = v14;
            v92 = _So9NSDecimala__isNegative_getter(&v135);
            _So9NSDecimala__isNegative_setter(v92, &v137);
            v93._rawValue = v54;
            goto LABEL_146;
          }
LABEL_163:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_164:
          v104 = v43;
          type metadata accessor for NSComparisonResult(0);
          *(_QWORD *)&v135 = v104;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
          return;
        }
      }
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      v95 = v60 + *(unsigned __int16 *)(v47 + 46) - *(unsigned __int16 *)(v52 + 46);
      v59 = v95 + 0xFFFF;
      *(_WORD *)(v50 + 46) = v95 - 1;
      if (v61 != 7)
        goto LABEL_161;
      v51 = v47;
      LODWORD(v60) = HIWORD(v59);
      v61 = 8;
LABEL_56:
      v62 = v117;
    }
    while (v61 < *(_QWORD *)(v50 + 16))
    {
      v88 = *(unsigned __int16 *)(v58 + 2 * v61);
      v51 = v88 + 0xFFFF;
      v53[v61] = v88 - 1;
      if (v55 - 1 == v61)
        goto LABEL_97;
      ++v61;
      if (v88)
        goto LABEL_83;
    }
    goto LABEL_153;
  }
  if (!v112)
  {
    LODWORD(v8) = 0;
    LOWORD(v5) = 0;
    LOWORD(v15) = 0;
    LOWORD(v11) = 0;
    LOWORD(v6) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v7) = 0;
    LOWORD(v14) = 0;
    goto LABEL_22;
  }
  if (v112 != 1)
    goto LABEL_164;
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  v64 = v63;
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  v66 = v65;
  v67 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v69 = (unint64_t *)v67;
  *(_QWORD *)(v67 + 32) = 0;
  v70 = (_WORD *)(v67 + 32);
  *(_QWORD *)(v67 + 16) = 8;
  *(_QWORD *)(v67 + 40) = 0;
  v71 = *(_QWORD *)(v64 + 16);
  v72 = *(_QWORD *)(v66 + 16);
  if (v72 >= v71)
    v73 = *(_QWORD *)(v64 + 16);
  else
    v73 = *(_QWORD *)(v66 + 16);
  v74 = v131;
  v75 = v129;
  v77 = v125;
  v76 = v127;
  if (v73)
  {
    v78 = (*(unsigned __int16 *)(v64 + 32) | 0x10000) - *(unsigned __int16 *)(v66 + 32);
    v79 = HIWORD(v78);
    *v70 = *(_WORD *)(v64 + 32) - *(_WORD *)(v66 + 32);
    v80 = v73 - 1;
    v81 = v116;
    if (v80)
    {
      v78 = v79 + *(unsigned __int16 *)(v64 + 34) - *(unsigned __int16 *)(v66 + 34) + 0xFFFF;
      v79 = HIWORD(v78);
      *(_WORD *)(v67 + 34) = v78;
      if (v80 == 1)
      {
        v82 = 2;
      }
      else
      {
        v68 = *(unsigned __int16 *)(v66 + 36);
        v78 = v79 + *(unsigned __int16 *)(v64 + 36) - v68 + 0xFFFF;
        v79 = HIWORD(v78);
        *(_WORD *)(v67 + 36) = v78;
        if (v80 == 2)
        {
          v82 = 3;
        }
        else
        {
          v78 = v79 + *(unsigned __int16 *)(v64 + 38) - *(unsigned __int16 *)(v66 + 38) + 0xFFFF;
          v79 = HIWORD(v78);
          *(_WORD *)(v67 + 38) = v78;
          if (v80 == 3)
          {
            v82 = 4;
          }
          else
          {
            v68 = *(unsigned __int16 *)(v66 + 40);
            v78 = v79 + *(unsigned __int16 *)(v64 + 40) - v68 + 0xFFFF;
            v79 = HIWORD(v78);
            *(_WORD *)(v67 + 40) = v78;
            if (v80 == 4)
            {
              v82 = 5;
            }
            else
            {
              v78 = v79 + *(unsigned __int16 *)(v64 + 42) - *(unsigned __int16 *)(v66 + 42) + 0xFFFF;
              v79 = HIWORD(v78);
              *(_WORD *)(v67 + 42) = v78;
              if (v80 == 5)
              {
                v82 = 6;
              }
              else
              {
                v78 = v79 + *(unsigned __int16 *)(v64 + 44) - *(unsigned __int16 *)(v66 + 44) + 0xFFFF;
                v79 = HIWORD(v78);
                v68 = v67;
                *(_WORD *)(v67 + 44) = v78;
                if (v80 == 6)
                {
                  v82 = 7;
                }
                else
                {
                  v96 = v79 + *(unsigned __int16 *)(v64 + 46) - *(unsigned __int16 *)(v66 + 46);
                  v78 = v96 + 0xFFFF;
                  *(_WORD *)(v67 + 46) = v96 - 1;
                  if (v80 != 7)
                    goto LABEL_162;
                  v79 = HIWORD(v78);
                  v82 = 8;
                }
                v69 = (unint64_t *)v67;
                v81 = v116;
                v74 = v131;
                v44 = v133;
                v75 = v129;
                v77 = v125;
                v76 = v127;
              }
            }
          }
        }
      }
    }
    else
    {
      v82 = 1;
    }
    if (v82 >= v71)
      goto LABEL_131;
    if (!HIWORD(v78))
    {
      while (v82 < v69[2])
      {
        v97 = *(unsigned __int16 *)(v64 + 32 + 2 * v82);
        v68 = v97 + 0xFFFF;
        v70[v82] = v97 - 1;
        if (v71 - 1 == v82)
          goto LABEL_138;
        ++v82;
        if (v97)
          goto LABEL_124;
      }
      goto LABEL_154;
    }
  }
  else
  {
    v81 = v116;
    if (!v71)
    {
      if (v72)
      {
        v82 = 0;
        v79 = 1;
        goto LABEL_132;
      }
      v87 = 8;
LABEL_141:
      if (!v70[v87 - 1])
      {
        do
        {
          v69[2] = v87 - 1;
          if (v87 == 1)
            break;
        }
        while (!*((unsigned __int16 *)v69 + v87-- + 14));
      }
LABEL_144:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v101 = v69[2];
      if (HIDWORD(v101))
        goto LABEL_163;
      _So9NSDecimala__length_setter(v101, &v137);
      LODWORD(v135) = v76;
      WORD2(v135) = v81;
      WORD3(v135) = v44;
      WORD4(v135) = v74;
      WORD5(v135) = v77;
      WORD6(v135) = v123;
      HIWORD(v135) = v121;
      LOWORD(v136) = v119;
      HIWORD(v136) = v75;
      v102 = _So9NSDecimala__isNegative_getter(&v135);
      _So9NSDecimala__isNegative_setter(v102, &v137);
      v93._rawValue = v69;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v93);
      if (v103)
      {
        v37 = v103;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
LABEL_149:
      _So9NSDecimala__isCompact_setter(&v137);
      NSDecimal.compact()();
      LODWORD(v8) = v137;
      LOWORD(v5) = WORD2(v137);
      LOWORD(v15) = WORD3(v137);
      LOWORD(v11) = WORD4(v137);
      LOWORD(v6) = WORD5(v137);
      LOWORD(v9) = WORD6(v137);
      LOWORD(v10) = HIWORD(v137);
      LOWORD(v7) = v138;
      LOWORD(v14) = HIWORD(v138);
      goto LABEL_22;
    }
    v82 = 0;
  }
LABEL_124:
  if (v82 <= v71)
    v98 = v71;
  else
    v98 = v82;
  do
  {
    if (v98 == v82)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v82 >= v69[2])
      goto LABEL_152;
    v70[v82] = *(_WORD *)(v64 + 32 + 2 * v82);
    ++v82;
  }
  while ((uint64_t)v82 < (uint64_t)v71);
  v79 = 1;
LABEL_131:
  if ((uint64_t)v82 < (uint64_t)v72)
  {
    while (1)
    {
LABEL_132:
      if (v82 >= v72)
        goto LABEL_159;
      v71 = v69[2];
      if (v82 < v71)
        break;
LABEL_137:
      __break(1u);
LABEL_138:
      v79 = HIWORD(v68);
      v82 = v71;
      if ((uint64_t)v71 >= (uint64_t)v72)
        goto LABEL_139;
    }
    v99 = v79 + (*(unsigned __int16 *)(v66 + 32 + 2 * v82) ^ 0xFFFF);
    --v72;
    v71 = v66 + 34;
    while (1)
    {
      v79 = HIWORD(v99);
      v70[v82] = v99;
      if (v72 == v82)
        break;
      v99 = v79 + (*(unsigned __int16 *)(v71 + 2 * v82++) ^ 0xFFFF);
      if (v82 >= v69[2])
        goto LABEL_137;
    }
  }
LABEL_139:
  if (v79)
  {
    v87 = v69[2];
    if (v87)
      goto LABEL_141;
    goto LABEL_144;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v37 = (void *)swift_allocError();
  *v94 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  v144 = 0;
  v145 = 0;
  _So9NSDecimala__exponent_setter(0, &v143);
  _So9NSDecimala__length_setter(0, &v143);
  _So9NSDecimala__isNegative_setter(1, &v143);
  _So9NSDecimala__isCompact_setter(&v143);
  _So9NSDecimala__reserved_setter(&v143);

  LODWORD(v8) = v143;
  LOWORD(v5) = v144;
  LOWORD(v15) = WORD1(v144);
  LOWORD(v11) = WORD2(v144);
  LOWORD(v6) = HIWORD(v144);
  LOWORD(v9) = v145;
  LOWORD(v10) = WORD1(v145);
  LOWORD(v7) = WORD2(v145);
  LOWORD(v14) = HIWORD(v145);
LABEL_22:
  v39 = v114;
LABEL_25:
  *(_DWORD *)v39 = v8;
  *(_WORD *)(v39 + 4) = v5;
  *(_WORD *)(v39 + 6) = v15;
  *(_WORD *)(v39 + 8) = v11;
  *(_WORD *)(v39 + 10) = v6;
  *(_WORD *)(v39 + 12) = v9;
  *(_WORD *)(v39 + 14) = v10;
  *(_WORD *)(v39 + 16) = v7;
  *(_WORD *)(v39 + 18) = v14;
}

Swift::Void __swiftcall NSDecimal.multiply(by:)(NSDecimal *by)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int *v3;

  specialized static NSDecimal.*= infix(_:_:)(v3, (unint64_t)by, v1, v2);
}

Swift::Void __swiftcall NSDecimal.divide(by:)(NSDecimal *by)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  *(_QWORD *)v3 = specialized NSDecimal._divide(by:roundingMode:)((unint64_t)by, v1, v2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 16));
  *(_WORD *)(v3 + 8) = v4;
  *(_WORD *)(v3 + 10) = v5;
  *(_WORD *)(v3 + 12) = v6;
  *(_WORD *)(v3 + 14) = v7;
  *(_WORD *)(v3 + 16) = v8;
  *(_WORD *)(v3 + 18) = v9;
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = v1;
  v5 = v2;
  v6 = v3;
  objc_msgSend(objc_allocWithZone((Class)NSDecimalNumber), sel_initWithDecimal_, &v4);
}

id static NSDecimal._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = objc_msgSend(a1, sel_decimalValue);
  v4 = v8;
  v5 = v7;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t static NSDecimal._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  objc_msgSend(a1, sel_decimalValue);
  v3 = v8;
  v4 = v7;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSDecimal()
{
  int *v0;
  int v1;
  id v2;
  int v4;
  __int128 v5;

  v1 = *v0;
  v2 = objc_allocWithZone((Class)NSDecimalNumber);
  v4 = v1;
  v5 = *(_OWORD *)(v0 + 1);
  return objc_msgSend(v2, sel_initWithDecimal_, &v4);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSDecimal(void *a1, uint64_t a2)
{
  id result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = objc_msgSend(a1, sel_decimalValue);
  v4 = v8;
  v5 = v7;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSDecimal(void *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  objc_msgSend(a1, sel_decimalValue);
  v3 = v8;
  v4 = v7;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  return 1;
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSDecimal@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  result = specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(_QWORD *)a2 = result;
  *(_WORD *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 10) = v5;
  *(_WORD *)(a2 + 12) = v6;
  *(_WORD *)(a2 + 14) = v7;
  *(_WORD *)(a2 + 16) = v8;
  *(_WORD *)(a2 + 18) = v9;
  return result;
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
  Swift::UInt v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if ((v3 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    NSDecimal._power(exponent:roundingMode:)((NSDecimal *)v3, v3, NSRoundPlain);
    if (v4)
    {

      v6 = 0;
      v7 = 0;
      _So9NSDecimala__exponent_setter(0, &v5);
      _So9NSDecimala__length_setter(0, &v5);
      _So9NSDecimala__isNegative_setter(1, &v5);
      _So9NSDecimala__isCompact_setter(&v5);
      _So9NSDecimala__reserved_setter(&v5);
    }
  }
}

uint64_t __NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  int isNegative_getter;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  Swift::OpaquePointer v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  int v57;
  void *v58;
  _BYTE *v59;
  id v60;
  uint64_t v61;
  __int128 v62;
  uint64_t result;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _WORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  __int16 v88;
  __int16 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  __int16 v98;
  int v99;
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  int v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  unint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  uint64_t v125;
  int v126;
  char v127;
  __int16 v128;
  unsigned int v129;
  __int16 v130;
  int v131;
  uint64_t v132;
  unint64_t v134;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  uint64_t v152;
  __int16 v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD v163[5];

  v163[3] = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)a2 + 2);
  v5 = *((_WORD *)a2 + 3);
  v6 = *((_WORD *)a2 + 4);
  v7 = *((_WORD *)a2 + 5);
  v8 = *((_WORD *)a2 + 6);
  v9 = *((_WORD *)a2 + 7);
  v10 = *((_WORD *)a2 + 8);
  v11 = *((_WORD *)a2 + 9);
  v12 = *a3;
  v13 = *((_WORD *)a3 + 2);
  v14 = *((_WORD *)a3 + 3);
  v15 = *((_WORD *)a3 + 4);
  v16 = *((_WORD *)a3 + 5);
  v17 = *((_WORD *)a3 + 6);
  v18 = *((_WORD *)a3 + 7);
  v19 = *((_WORD *)a3 + 8);
  v20 = *((_WORD *)a3 + 9);
  v151 = *a2;
  LODWORD(v163[0]) = *a2;
  v148 = v4;
  WORD2(v163[0]) = v4;
  v144 = v5;
  HIWORD(v163[0]) = v5;
  v142 = v6;
  LOWORD(v163[1]) = v6;
  v140 = v7;
  WORD1(v163[1]) = v7;
  v138 = v8;
  WORD2(v163[1]) = v8;
  v136 = v9;
  HIWORD(v163[1]) = v9;
  LOWORD(v163[2]) = v10;
  v146 = v11;
  WORD1(v163[2]) = v11;
  if (!_So9NSDecimala__length_getter(v163))
  {
    LODWORD(v163[0]) = v151;
    WORD2(v163[0]) = v148;
    HIWORD(v163[0]) = v144;
    LOWORD(v163[1]) = v142;
    WORD1(v163[1]) = v140;
    WORD2(v163[1]) = v138;
    HIWORD(v163[1]) = v136;
    LOWORD(v163[2]) = v10;
    WORD1(v163[2]) = v146;
    if (_So9NSDecimala__isNegative_getter(v163))
      goto LABEL_18;
  }
  LODWORD(v163[0]) = v12;
  WORD2(v163[0]) = v13;
  HIWORD(v163[0]) = v14;
  LOWORD(v163[1]) = v15;
  WORD1(v163[1]) = v16;
  WORD2(v163[1]) = v17;
  HIWORD(v163[1]) = v18;
  LOWORD(v163[2]) = v19;
  WORD1(v163[2]) = v20;
  if (!_So9NSDecimala__length_getter(v163))
  {
    LODWORD(v163[0]) = v12;
    WORD2(v163[0]) = v13;
    HIWORD(v163[0]) = v14;
    LOWORD(v163[1]) = v15;
    WORD1(v163[1]) = v16;
    WORD2(v163[1]) = v17;
    HIWORD(v163[1]) = v18;
    LOWORD(v163[2]) = v19;
    WORD1(v163[2]) = v20;
    if (_So9NSDecimala__isNegative_getter(v163))
      goto LABEL_18;
  }
  LODWORD(v163[0]) = v151;
  WORD2(v163[0]) = v148;
  HIWORD(v163[0]) = v144;
  LOWORD(v163[1]) = v142;
  WORD1(v163[1]) = v140;
  WORD2(v163[1]) = v138;
  HIWORD(v163[1]) = v136;
  LOWORD(v163[2]) = v10;
  WORD1(v163[2]) = v146;
  if (!_So9NSDecimala__length_getter(v163))
    goto LABEL_24;
  LODWORD(v163[0]) = v12;
  WORD2(v163[0]) = v13;
  HIWORD(v163[0]) = v14;
  LOWORD(v163[1]) = v15;
  WORD1(v163[1]) = v16;
  WORD2(v163[1]) = v17;
  HIWORD(v163[1]) = v18;
  LOWORD(v163[2]) = v19;
  WORD1(v163[2]) = v20;
  if (!_So9NSDecimala__length_getter(v163))
  {
    v12 = v151;
    v13 = v148;
    v14 = v144;
    v15 = v142;
    v16 = v140;
    v17 = v138;
    v18 = v136;
    v19 = v10;
    v20 = v146;
LABEL_24:
    *(_DWORD *)a1 = v12;
    *(_WORD *)(a1 + 4) = v13;
    *(_WORD *)(a1 + 6) = v14;
    *(_WORD *)(a1 + 8) = v15;
    *(_WORD *)(a1 + 10) = v16;
    *(_WORD *)(a1 + 12) = v17;
    *(_WORD *)(a1 + 14) = v18;
    *(_WORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 18) = v20;
    return 0;
  }
  LODWORD(v163[0]) = v151;
  WORD2(v163[0]) = v148;
  HIWORD(v163[0]) = v144;
  LOWORD(v163[1]) = v142;
  WORD1(v163[1]) = v140;
  WORD2(v163[1]) = v138;
  HIWORD(v163[1]) = v136;
  LOWORD(v163[2]) = v10;
  WORD1(v163[2]) = v146;
  LODWORD(v160) = v12;
  WORD2(v160) = v13;
  HIWORD(v160) = v14;
  LOWORD(v161) = v15;
  WORD1(v161) = v16;
  WORD2(v161) = v17;
  HIWORD(v161) = v18;
  LOWORD(v162) = v19;
  HIWORD(v162) = v20;
  v21 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v163, (uint64_t)&v160);
  v22 = LODWORD(v163[0]);
  v23 = LOWORD(v163[1]);
  v24 = WORD1(v163[1]);
  v25 = WORD2(v163[1]);
  v26 = LOWORD(v163[2]);
  v27 = WORD1(v163[2]);
  v157 = v163[0];
  v147 = HIWORD(v163[0]);
  v149 = WORD2(v163[0]);
  v158 = v163[1];
  v152 = HIWORD(v163[1]);
  v159 = v163[2];
  v28 = _So9NSDecimala__length_getter(&v157);
  v29 = v160;
  v30 = WORD2(v160);
  v31 = HIWORD(v160);
  v32 = v161;
  v33 = WORD1(v161);
  v34 = WORD2(v161);
  v35 = HIWORD(v161);
  v36 = (unsigned __int16)v162;
  v37 = HIWORD(v162);
  if (!v28)
  {
LABEL_150:
    v73 = a1;
LABEL_151:
    *(_DWORD *)v73 = v29;
    *(_WORD *)(v73 + 4) = v30;
    *(_WORD *)(v73 + 6) = v31;
    *(_WORD *)(v73 + 8) = v32;
    *(_WORD *)(v73 + 10) = v33;
    *(_WORD *)(v73 + 12) = v34;
    *(_WORD *)(v73 + 14) = v35;
    *(_WORD *)(v73 + 16) = v36;
    *(_WORD *)(v73 + 18) = v37;
    return (v21 & 1) != 0;
  }
  v130 = v27;
  v131 = HIWORD(v162);
  v157 = v160;
  v158 = v161;
  v159 = v162;
  v141 = v160;
  v143 = WORD2(v160);
  v145 = HIWORD(v160);
  v137 = WORD1(v161);
  v139 = (unsigned __int16)v161;
  v132 = WORD2(v161);
  if (!_So9NSDecimala__length_getter(&v157))
  {
    v29 = v22;
    v30 = v149;
    v31 = v147;
    v32 = v23;
    v33 = v24;
    v34 = v25;
    LOWORD(v35) = v152;
    LOWORD(v36) = v26;
    v37 = v27;
    goto LABEL_150;
  }
  v127 = v21;
  LODWORD(v157) = v22;
  WORD2(v157) = v149;
  HIWORD(v157) = v147;
  LOWORD(v158) = v23;
  WORD1(v158) = v24;
  WORD2(v158) = v25;
  HIWORD(v158) = v152;
  LOWORD(v159) = v26;
  HIWORD(v159) = v27;
  v154 = __PAIR64__(__PAIR32__(v147, v149), v22);
  LOWORD(v155) = v23;
  WORD1(v155) = v24;
  v128 = v25;
  WORD2(v155) = v25;
  HIWORD(v155) = v152;
  LOWORD(v156) = v26;
  HIWORD(v156) = v27;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v154);
  LODWORD(v154) = v141;
  WORD2(v154) = v143;
  HIWORD(v154) = v145;
  LOWORD(v155) = v139;
  WORD1(v155) = v137;
  WORD2(v155) = v132;
  HIWORD(v155) = v35;
  v129 = v36;
  LOWORD(v156) = v36;
  HIWORD(v156) = v131;
  v39 = v35;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v154))
  {
    LODWORD(v154) = v22;
    WORD2(v154) = v149;
    HIWORD(v154) = v147;
    LOWORD(v155) = v23;
    WORD1(v155) = v24;
    v125 = v35;
    WORD2(v155) = v25;
    HIWORD(v155) = v152;
    LOWORD(v156) = v26;
    HIWORD(v156) = v27;
    v40 = _So9NSDecimala__isNegative_getter(&v154);
    _So9NSDecimala__isNegative_setter(v40, &v157);
    NSDecimal.asVariableLengthInteger()(v22 | (v149 << 32) | (v147 << 48), v23 | (v24 << 16) | (v25 << 32) | (v152 << 48), v26 | (v27 << 16));
    v42 = v41;
    NSDecimal.asVariableLengthInteger()(v141 | (v143 << 32) | (v145 << 48), v139 | (v137 << 16) | (v132 << 32) | (v125 << 48), v129 | (v131 << 16));
    v45 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v42, v43, 9, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = *(_QWORD *)(v45 + 16);
    if (v46 <= 8)
    {
      v48._rawValue = (void *)v45;
    }
    else
    {
      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v45, a4);
      v48._rawValue = v47;
      v72 = v49;
      swift_bridgeObjectRelease();
      v50 = v157;
      v51 = WORD2(v157);
      v52 = HIWORD(v157);
      v53 = v158;
      v54 = WORD1(v158);
      v55 = WORD2(v158);
      v56 = HIWORD(v158);
      v154 = v157;
      v155 = v158;
      v153 = v159;
      v156 = v159;
      v150 = HIWORD(v159);
      v57 = _So9NSDecimala__exponent_getter((char *)&v154);
      if (v72 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
      if (v72 > 0x7FFFFFFF)
      {
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      if (__OFADD__(v57, (_DWORD)v72))
      {
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
      }
      if (v57 + (int)v72 > 127)
      {
        swift_bridgeObjectRelease();
LABEL_18:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        v58 = (void *)swift_allocError();
        *v59 = 0;
        swift_willThrow();
        goto LABEL_19;
      }
      LODWORD(v154) = v50;
      WORD2(v154) = v51;
      HIWORD(v154) = v52;
      LOWORD(v155) = v53;
      WORD1(v155) = v54;
      WORD2(v155) = v55;
      HIWORD(v155) = v56;
      LOWORD(v156) = v153;
      HIWORD(v156) = v150;
      v103 = _So9NSDecimala__exponent_getter((char *)&v154);
      v104 = __OFADD__(v103, (_DWORD)v72);
      v105 = (v103 + v72);
      if (v104)
      {
        __break(1u);
        goto LABEL_164;
      }
      _So9NSDecimala__exponent_setter(v105, &v157);
      v46 = *((_QWORD *)v48._rawValue + 2);
      v21 = v127;
      if (HIDWORD(v46))
        goto LABEL_166;
    }
    _So9NSDecimala__length_setter(v46, &v157);
LABEL_147:
    NSDecimal.copyVariableLengthInteger(_:)(v48);
    if (v120)
    {
      v58 = v120;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    _So9NSDecimala__isCompact_setter(&v157);
    NSDecimal.compact()();
    v29 = v157;
    v30 = WORD2(v157);
    v31 = HIWORD(v157);
    v32 = v158;
    v33 = WORD1(v158);
    v34 = WORD2(v158);
    LOWORD(v35) = HIWORD(v158);
    LOWORD(v36) = v159;
    v37 = HIWORD(v159);
    goto LABEL_150;
  }
  v124 = v24;
  v126 = v22;
  v123 = v23;
  v64 = v23 | (v24 << 16) | (v25 << 32) | (v152 << 48);
  v122 = v26;
  v65 = v26 | (v27 << 16);
  v134 = v22 | (v149 << 32) | (v147 << 48);
  NSDecimal.asVariableLengthInteger()(v134, v64, v65);
  v67 = v66;
  v68 = v141 | (v143 << 32) | (v145 << 48);
  v69 = v139 | (v137 << 16) | (v132 << 32) | (v39 << 48);
  v70 = v129 | (v131 << 16);
  NSDecimal.asVariableLengthInteger()(v68, v69, v70);
  v72 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v67, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v72 == -1)
  {
    v126 = v39;
    v72 = v145;
    v74 = v21;
    NSDecimal.asVariableLengthInteger()(v68, v69, v70);
    v76 = v75;
    NSDecimal.asVariableLengthInteger()(v134, v64, v65);
    v78 = v77;
    v79 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v48._rawValue = (void *)v79;
    *(_QWORD *)(v79 + 32) = 0;
    v81 = (_WORD *)(v79 + 32);
    *(_QWORD *)(v79 + 16) = 8;
    *(_QWORD *)(v79 + 40) = 0;
    v82 = *(_QWORD *)(v76 + 16);
    v83 = *(_QWORD *)(v78 + 16);
    if (v83 >= v82)
      v84 = *(_QWORD *)(v76 + 16);
    else
      v84 = *(_QWORD *)(v78 + 16);
    if (!v84)
    {
      v88 = v143;
      v89 = v145;
      if (!v82)
      {
        if (v83)
        {
          v90 = 0;
          v86 = 1;
          v72 = v129;
          goto LABEL_99;
        }
        v106 = 8;
        v72 = v129;
        goto LABEL_108;
      }
      v90 = 0;
      v72 = v129;
LABEL_91:
      v95 = v76 + 32;
      if (v90 <= v82)
        v97 = v82;
      else
        v97 = v90;
      while (v97 != v90)
      {
        if (v90 >= *(_QWORD *)(v79 + 16))
          goto LABEL_115;
        v81[v90] = *(_WORD *)(v95 + 2 * v90);
        if ((uint64_t)++v90 >= (uint64_t)v82)
        {
          v86 = 1;
LABEL_98:
          if ((uint64_t)v90 < (uint64_t)v83)
          {
            while (1)
            {
LABEL_99:
              if (v90 >= v83)
                goto LABEL_161;
              v82 = *(_QWORD *)(v79 + 16);
              if (v90 < v82)
                break;
LABEL_104:
              __break(1u);
LABEL_105:
              v86 = HIWORD(v80);
              v90 = v82;
              if ((uint64_t)v82 >= (uint64_t)v83)
                goto LABEL_106;
            }
            v110 = v86 + (*(unsigned __int16 *)(v78 + 32 + 2 * v90) ^ 0xFFFF);
            --v83;
            v82 = v78 + 34;
            while (1)
            {
              v86 = HIWORD(v110);
              v81[v90] = v110;
              if (v83 == v90)
                break;
              v110 = v86 + (*(unsigned __int16 *)(v82 + 2 * v90++) ^ 0xFFFF);
              if (v90 >= *(_QWORD *)(v79 + 16))
                goto LABEL_104;
            }
          }
LABEL_106:
          if (!v86)
            goto LABEL_153;
          v106 = *(_QWORD *)(v79 + 16);
          if (v106)
          {
LABEL_108:
            if (!v81[v106 - 1])
            {
              do
              {
                *(_QWORD *)(v79 + 16) = v106 - 1;
                if (v106 == 1)
                  break;
              }
              while (!*(unsigned __int16 *)(v79 + 28 + 2 * v106--));
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v112 = *((_QWORD *)v48._rawValue + 2);
          if (!HIDWORD(v112))
          {
            _So9NSDecimala__length_setter(v112, &v157);
            LODWORD(v154) = v141;
            WORD2(v154) = v88;
            HIWORD(v154) = v89;
            LOWORD(v155) = v139;
            WORD1(v155) = v137;
            WORD2(v155) = v132;
            HIWORD(v155) = v126;
            LOWORD(v156) = v72;
            HIWORD(v156) = v131;
            goto LABEL_146;
          }
LABEL_166:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_167:
          type metadata accessor for NSComparisonResult(0);
          v154 = v72;
          result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
          return result;
        }
      }
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      v113 = v97 + *(unsigned __int16 *)(v72 + 46) - *(unsigned __int16 *)(v78 + 46);
      v96 = v113 + 0xFFFF;
      *((_WORD *)v48._rawValue + 23) = v113 - 1;
      if (v90 == 7)
      {
        LODWORD(v97) = HIWORD(v96);
        v101 = 8;
        goto LABEL_118;
      }
LABEL_165:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_166;
    }
    v85 = (*(unsigned __int16 *)(v76 + 32) | 0x10000) - *(unsigned __int16 *)(v78 + 32);
    v86 = HIWORD(v85);
    *v81 = *(_WORD *)(v76 + 32) - *(_WORD *)(v78 + 32);
    v87 = v84 - 1;
    v88 = v143;
    v89 = v145;
    if (!v87)
    {
      v90 = 1;
      goto LABEL_86;
    }
    v85 = v86 + *(unsigned __int16 *)(v76 + 34) - *(unsigned __int16 *)(v78 + 34) + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 34) = v85;
    if (v87 == 1)
    {
      v90 = 2;
      goto LABEL_86;
    }
    v80 = *(unsigned __int16 *)(v78 + 36);
    v85 = v86 + *(unsigned __int16 *)(v76 + 36) - v80 + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 36) = v85;
    if (v87 == 2)
    {
      v90 = 3;
      goto LABEL_86;
    }
    v85 = v86 + *(unsigned __int16 *)(v76 + 38) - *(unsigned __int16 *)(v78 + 38) + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 38) = v85;
    if (v87 == 3)
    {
      v90 = 4;
      goto LABEL_86;
    }
    v80 = *(unsigned __int16 *)(v78 + 40);
    v85 = v86 + *(unsigned __int16 *)(v76 + 40) - v80 + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 40) = v85;
    if (v87 == 4)
    {
      v90 = 5;
      goto LABEL_86;
    }
    v85 = v86 + *(unsigned __int16 *)(v76 + 42) - *(unsigned __int16 *)(v78 + 42) + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 42) = v85;
    if (v87 == 5)
    {
      v90 = 6;
      goto LABEL_86;
    }
    v80 = *(unsigned __int16 *)(v78 + 44);
    v85 = v86 + *(unsigned __int16 *)(v76 + 44) - v80 + 0xFFFF;
    v86 = HIWORD(v85);
    *(_WORD *)(v79 + 44) = v85;
    if (v87 == 6)
    {
      v90 = 7;
LABEL_85:
      v88 = v143;
      v89 = v145;
LABEL_86:
      v72 = v129;
      if (v90 >= v82)
        goto LABEL_98;
      if (!HIWORD(v85))
      {
        while (v90 < *(_QWORD *)(v79 + 16))
        {
          v109 = *(unsigned __int16 *)(v76 + 32 + 2 * v90);
          v80 = v109 + 0xFFFF;
          v81[v90] = v109 - 1;
          if (v82 - 1 == v90)
            goto LABEL_105;
          ++v90;
          if (v109)
            goto LABEL_91;
        }
        goto LABEL_156;
      }
      goto LABEL_91;
    }
    v108 = v86 + *(unsigned __int16 *)(v76 + 46) - *(unsigned __int16 *)(v78 + 46);
    v85 = v108 + 0xFFFF;
    *(_WORD *)(v79 + 46) = v108 - 1;
    if (v87 == 7)
    {
      v86 = HIWORD(v85);
      v90 = 8;
      goto LABEL_85;
    }
LABEL_164:
    __break(1u);
    goto LABEL_165;
  }
  if (!v72)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    LOWORD(v35) = 0;
    LOWORD(v36) = 0;
    v37 = 0;
    v73 = a1;
    goto LABEL_151;
  }
  v74 = v21;
  if (v72 != 1)
    goto LABEL_167;
  NSDecimal.asVariableLengthInteger()(v134, v64, v65);
  v72 = v91;
  NSDecimal.asVariableLengthInteger()(v68, v69, v70);
  v78 = v92;
  v93 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v48._rawValue = (void *)v93;
  *(_QWORD *)(v93 + 32) = 0;
  v81 = (_WORD *)(v93 + 32);
  *(_QWORD *)(v93 + 16) = 8;
  *(_QWORD *)(v93 + 40) = 0;
  v82 = *(_QWORD *)(v72 + 16);
  v83 = *(_QWORD *)(v78 + 16);
  if (v83 >= v82)
    v94 = *(_QWORD *)(v72 + 16);
  else
    v94 = *(_QWORD *)(v78 + 16);
  if (v94)
  {
    v95 = v72 + 32;
    v96 = (*(unsigned __int16 *)(v72 + 32) | 0x10000) - *(unsigned __int16 *)(v78 + 32);
    LODWORD(v97) = HIWORD(v96);
    *v81 = *(_WORD *)(v72 + 32) - *(_WORD *)(v78 + 32);
    v90 = v94 - 1;
    v98 = v130;
    v100 = v124;
    v99 = v126;
    if (!v90)
    {
      v101 = 1;
      goto LABEL_119;
    }
    v96 = v97 + *(unsigned __int16 *)(v72 + 34) - *(unsigned __int16 *)(v78 + 34) + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 34) = v96;
    if (v90 == 1)
    {
      v101 = 2;
      goto LABEL_119;
    }
    v80 = *(unsigned __int16 *)(v78 + 36);
    v96 = v97 + *(unsigned __int16 *)(v72 + 36) - v80 + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 36) = v96;
    if (v90 == 2)
    {
      v101 = 3;
      goto LABEL_119;
    }
    v96 = v97 + *(unsigned __int16 *)(v72 + 38) - *(unsigned __int16 *)(v78 + 38) + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 38) = v96;
    if (v90 == 3)
    {
      v101 = 4;
      goto LABEL_119;
    }
    v80 = *(unsigned __int16 *)(v78 + 40);
    v96 = v97 + *(unsigned __int16 *)(v72 + 40) - v80 + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 40) = v96;
    if (v90 == 4)
    {
      v101 = 5;
      goto LABEL_119;
    }
    v96 = v97 + *(unsigned __int16 *)(v72 + 42) - *(unsigned __int16 *)(v78 + 42) + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 42) = v96;
    if (v90 == 5)
    {
      v101 = 6;
      goto LABEL_119;
    }
    v80 = *(unsigned __int16 *)(v78 + 44);
    v96 = v97 + *(unsigned __int16 *)(v72 + 44) - v80 + 0xFFFF;
    LODWORD(v97) = HIWORD(v96);
    *(_WORD *)(v93 + 44) = v96;
    if (v90 == 6)
    {
      v101 = 7;
LABEL_118:
      v21 = v74;
      v98 = v130;
      v100 = v124;
      v99 = v126;
LABEL_119:
      v102 = v149;
      if (v101 >= v82)
        goto LABEL_131;
      if (!HIWORD(v96))
      {
        while (v101 < *((_QWORD *)v48._rawValue + 2))
        {
          v114 = *(unsigned __int16 *)(v95 + 2 * v101);
          v80 = v114 + 0xFFFF;
          v81[v101] = v114 - 1;
          if (v82 - 1 == v101)
            goto LABEL_138;
          ++v101;
          if (v114)
            goto LABEL_124;
        }
        goto LABEL_157;
      }
      goto LABEL_124;
    }
    goto LABEL_116;
  }
  v98 = v130;
  v100 = v124;
  v99 = v126;
  if (!v82)
  {
    if (v83)
    {
      v101 = 0;
      LODWORD(v97) = 1;
      v102 = v149;
      goto LABEL_132;
    }
    v107 = 8;
    v102 = v149;
LABEL_141:
    if (!v81[v107 - 1])
    {
      do
      {
        *((_QWORD *)v48._rawValue + 2) = v107 - 1;
        if (v107 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v48._rawValue + v107-- + 14));
    }
LABEL_144:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v118 = *((_QWORD *)v48._rawValue + 2);
    if (HIDWORD(v118))
      goto LABEL_166;
    _So9NSDecimala__length_setter(v118, &v157);
    LODWORD(v154) = v99;
    WORD2(v154) = v102;
    HIWORD(v154) = v147;
    LOWORD(v155) = v123;
    WORD1(v155) = v100;
    WORD2(v155) = v128;
    HIWORD(v155) = v152;
    LOWORD(v156) = v122;
    HIWORD(v156) = v98;
LABEL_146:
    v119 = _So9NSDecimala__isNegative_getter(&v154);
    _So9NSDecimala__isNegative_setter(v119, &v157);
    goto LABEL_147;
  }
  v101 = 0;
  v102 = v149;
LABEL_124:
  if (v101 <= v82)
    v115 = v82;
  else
    v115 = v101;
  do
  {
    if (v115 == v101)
    {
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (v101 >= *((_QWORD *)v48._rawValue + 2))
      goto LABEL_155;
    v81[v101] = *(_WORD *)(v72 + 32 + 2 * v101);
    ++v101;
  }
  while ((uint64_t)v101 < (uint64_t)v82);
  LODWORD(v97) = 1;
LABEL_131:
  if ((uint64_t)v101 < (uint64_t)v83)
  {
    while (1)
    {
LABEL_132:
      if (v101 >= v83)
        goto LABEL_162;
      v82 = *((_QWORD *)v48._rawValue + 2);
      if (v101 < v82)
        break;
LABEL_137:
      __break(1u);
LABEL_138:
      LODWORD(v97) = HIWORD(v80);
      v101 = v82;
      if ((uint64_t)v82 >= (uint64_t)v83)
        goto LABEL_139;
    }
    v116 = v97 + (*(unsigned __int16 *)(v78 + 32 + 2 * v101) ^ 0xFFFF);
    --v83;
    v82 = v78 + 34;
    while (1)
    {
      LODWORD(v97) = HIWORD(v116);
      v81[v101] = v116;
      if (v83 == v101)
        break;
      v116 = v97 + (*(unsigned __int16 *)(v82 + 2 * v101++) ^ 0xFFFF);
      if (v101 >= *((_QWORD *)v48._rawValue + 2))
        goto LABEL_137;
    }
  }
LABEL_139:
  if ((_DWORD)v97)
  {
    v107 = *((_QWORD *)v48._rawValue + 2);
    if (v107)
      goto LABEL_141;
    goto LABEL_144;
  }
LABEL_153:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v58 = (void *)swift_allocError();
  *v121 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_19:
  v163[0] = v58;
  v60 = v58;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
    v61 = qword_1820E66F0[(char)v160];
  else
    v61 = 0;
  *(_OWORD *)((char *)v163 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v163);
  _So9NSDecimala__length_setter(0, v163);
  _So9NSDecimala__isNegative_setter(1, v163);
  _So9NSDecimala__isCompact_setter(v163);
  _So9NSDecimala__reserved_setter(v163);
  v62 = *(_OWORD *)((char *)v163 + 4);
  *(_DWORD *)a1 = v163[0];
  *(_OWORD *)(a1 + 4) = v62;

  return v61;
}

uint64_t NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  int isNegative_getter;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  Swift::OpaquePointer v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  int v56;
  void *v57;
  _BYTE *v58;
  id v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _WORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  __int16 v95;
  __int16 v96;
  int v97;
  unint64_t v98;
  __int16 v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  unint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unsigned int v113;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t result;
  _BYTE *v119;
  __int16 v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  char v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v132;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  int v146;
  int v147;
  __int16 v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  _QWORD v161[5];

  v161[3] = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)a2 + 2);
  v5 = *((_WORD *)a2 + 3);
  v6 = *((_WORD *)a2 + 4);
  v7 = *((_WORD *)a2 + 5);
  v8 = *((_WORD *)a2 + 6);
  v9 = *((_WORD *)a2 + 7);
  v10 = *((_WORD *)a2 + 8);
  v11 = *a3;
  v12 = *((_WORD *)a3 + 2);
  v13 = *((_WORD *)a3 + 3);
  v14 = *((_WORD *)a3 + 4);
  v15 = *((_WORD *)a3 + 5);
  v16 = *((_WORD *)a3 + 6);
  v17 = *((_WORD *)a3 + 7);
  v18 = *((_WORD *)a3 + 8);
  v19 = *((_WORD *)a3 + 9);
  v146 = *a2;
  v149 = *((_WORD *)a2 + 9);
  LODWORD(v161[0]) = *a2;
  v144 = v4;
  WORD2(v161[0]) = v4;
  v142 = v5;
  HIWORD(v161[0]) = v5;
  v140 = v6;
  LOWORD(v161[1]) = v6;
  v138 = v7;
  WORD1(v161[1]) = v7;
  v136 = v8;
  WORD2(v161[1]) = v8;
  v134 = v9;
  HIWORD(v161[1]) = v9;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v146;
    WORD2(v161[0]) = v144;
    HIWORD(v161[0]) = v142;
    LOWORD(v161[1]) = v140;
    WORD1(v161[1]) = v138;
    WORD2(v161[1]) = v136;
    HIWORD(v161[1]) = v134;
    LOWORD(v161[2]) = v10;
    WORD1(v161[2]) = v149;
    if (_So9NSDecimala__isNegative_getter(v161))
      goto LABEL_17;
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v11;
    WORD2(v161[0]) = v12;
    HIWORD(v161[0]) = v13;
    LOWORD(v161[1]) = v14;
    WORD1(v161[1]) = v15;
    WORD2(v161[1]) = v16;
    HIWORD(v161[1]) = v17;
    LOWORD(v161[2]) = v18;
    WORD1(v161[2]) = v19;
    if (_So9NSDecimala__isNegative_getter(v161))
      goto LABEL_17;
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    v60 = 0;
    *(_DWORD *)a1 = v11;
    *(_WORD *)(a1 + 4) = v12;
    *(_WORD *)(a1 + 6) = v13;
    *(_WORD *)(a1 + 8) = v14;
    *(_WORD *)(a1 + 10) = v15;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v17;
    *(_WORD *)(a1 + 16) = v18;
    *(_WORD *)(a1 + 18) = v19;
    return v60;
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    *(_DWORD *)a1 = v146;
    *(_WORD *)(a1 + 4) = v144;
    *(_WORD *)(a1 + 6) = v142;
    *(_WORD *)(a1 + 8) = v140;
    *(_WORD *)(a1 + 10) = v138;
    *(_WORD *)(a1 + 12) = v136;
    *(_WORD *)(a1 + 14) = v134;
    *(_WORD *)(a1 + 16) = v10;
    v60 = 0;
    *(_WORD *)(a1 + 18) = v149;
    return v60;
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  LODWORD(v158) = v11;
  WORD2(v158) = v12;
  HIWORD(v158) = v13;
  LOWORD(v159) = v14;
  WORD1(v159) = v15;
  WORD2(v159) = v16;
  HIWORD(v159) = v17;
  LOWORD(v160) = v18;
  HIWORD(v160) = v19;
  v20 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v161, (uint64_t)&v158);
  v21 = LODWORD(v161[0]);
  v22 = LOWORD(v161[1]);
  v23 = WORD1(v161[1]);
  v24 = WORD2(v161[1]);
  v25 = WORD1(v161[2]);
  v155 = v161[0];
  v143 = HIWORD(v161[0]);
  v145 = WORD2(v161[0]);
  v156 = v161[1];
  v150 = HIWORD(v161[1]);
  v147 = LOWORD(v161[2]);
  v157 = v161[2];
  v26 = _So9NSDecimala__length_getter(&v155);
  v27 = v158;
  v28 = WORD2(v158);
  v29 = HIWORD(v158);
  v30 = v159;
  v31 = WORD1(v159);
  v32 = WORD2(v159);
  v33 = HIWORD(v159);
  v34 = v160;
  v35 = HIWORD(v160);
  if (!v26)
    goto LABEL_147;
  v127 = v25;
  v155 = v158;
  v156 = v159;
  v157 = v160;
  v129 = HIWORD(v160);
  v130 = (unsigned __int16)v160;
  v128 = v158;
  v139 = HIWORD(v158);
  v141 = WORD2(v158);
  v135 = WORD1(v159);
  v137 = (unsigned __int16)v159;
  if (!_So9NSDecimala__length_getter(&v155))
  {
    v27 = v21;
    v28 = v145;
    v29 = v143;
    v30 = v22;
    v31 = v23;
    LOWORD(v32) = v24;
    LOWORD(v33) = v150;
    v34 = v147;
    v35 = v25;
LABEL_147:
    v70 = a1;
    goto LABEL_148;
  }
  v124 = v20;
  LODWORD(v155) = v21;
  WORD2(v155) = v145;
  HIWORD(v155) = v143;
  LOWORD(v156) = v22;
  WORD1(v156) = v23;
  WORD2(v156) = v24;
  HIWORD(v156) = v150;
  LOWORD(v157) = v147;
  HIWORD(v157) = v25;
  v152 = __PAIR64__(__PAIR32__(v143, v145), v21);
  LOWORD(v153) = v22;
  WORD1(v153) = v23;
  v125 = v24;
  WORD2(v153) = v24;
  HIWORD(v153) = v150;
  LOWORD(v154) = v147;
  HIWORD(v154) = v25;
  v36 = v33;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v152);
  LODWORD(v152) = v128;
  WORD2(v152) = v141;
  HIWORD(v152) = v139;
  LOWORD(v153) = v137;
  WORD1(v153) = v135;
  WORD2(v153) = v32;
  HIWORD(v153) = v36;
  LOWORD(v154) = v130;
  HIWORD(v154) = v129;
  v126 = v32;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v152))
  {
    LODWORD(v152) = v21;
    WORD2(v152) = v145;
    HIWORD(v152) = v143;
    LOWORD(v153) = v22;
    WORD1(v153) = v23;
    WORD2(v153) = v24;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v25;
    v38 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v38, &v155);
    NSDecimal.asVariableLengthInteger()(v21 | (v145 << 32) | (v143 << 48), v22 | (v23 << 16) | (v24 << 32) | (v150 << 48), v147 | (v25 << 16));
    v40 = v39;
    NSDecimal.asVariableLengthInteger()(v128 | (v141 << 32) | (v139 << 48), v137 | (v135 << 16) | (v126 << 32) | (v36 << 48), v130 | (v129 << 16));
    v43 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v40, v41, 9, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(v43 + 16);
    if (v44 <= 8)
    {
      v46._rawValue = (void *)v43;
LABEL_29:
      _So9NSDecimala__length_setter(v44, &v155);
LABEL_144:
      NSDecimal.copyVariableLengthInteger(_:)(v46);
      if (v117)
      {
        v57 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v155);
      NSDecimal.compact()();
      v27 = v155;
      v28 = WORD2(v155);
      v29 = HIWORD(v155);
      v30 = v156;
      v31 = WORD1(v156);
      LOWORD(v32) = WORD2(v156);
      LOWORD(v33) = HIWORD(v156);
      v34 = v157;
      v35 = HIWORD(v157);
      goto LABEL_147;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v43, a4);
    v46._rawValue = v45;
    v48 = v47;
    swift_bridgeObjectRelease();
    v49 = v155;
    v50 = WORD2(v155);
    v51 = HIWORD(v155);
    v52 = v156;
    v53 = WORD1(v156);
    v54 = WORD2(v156);
    v55 = HIWORD(v156);
    v152 = v155;
    v153 = v156;
    v148 = HIWORD(v157);
    v151 = v157;
    v154 = v157;
    v56 = _So9NSDecimala__exponent_getter((char *)&v152);
    if (v48 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v48 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v56, (_DWORD)v48))
        {
          if (v56 + (int)v48 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v57 = (void *)swift_allocError();
            *v58 = 0;
            swift_willThrow();
            goto LABEL_18;
          }
          LODWORD(v152) = v49;
          WORD2(v152) = v50;
          HIWORD(v152) = v51;
          LOWORD(v153) = v52;
          WORD1(v153) = v53;
          WORD2(v153) = v54;
          HIWORD(v153) = v55;
          LOWORD(v154) = v151;
          HIWORD(v154) = v148;
          v100 = _So9NSDecimala__exponent_getter((char *)&v152);
          v101 = __OFADD__(v100, (_DWORD)v48);
          v102 = (v100 + v48);
          if (!v101)
          {
            _So9NSDecimala__exponent_setter(v102, &v155);
            v44 = *((_QWORD *)v46._rawValue + 2);
            v20 = v124;
            if (HIDWORD(v44))
              goto LABEL_163;
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_161;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v120 = v23;
  v121 = v21;
  LOWORD(v123) = v22;
  v62 = v22 | (v23 << 16) | (v24 << 32) | (v150 << 48);
  v132 = v21 | (v145 << 32) | (v143 << 48);
  v122 = v147 | (v25 << 16);
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  v64 = v63;
  v65 = v128 | (v141 << 32) | (v139 << 48);
  v66 = v36;
  v67 = v137 | (v135 << 16) | (v32 << 32) | (v36 << 48);
  v68 = v130 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  v48 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v64, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48 == -1)
  {
    v123 = v66;
    v48 = v141;
    v71 = v124;
    NSDecimal.asVariableLengthInteger()(v65, v67, v68);
    v73 = v72;
    NSDecimal.asVariableLengthInteger()(v132, v62, v122);
    v75 = v74;
    v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v46._rawValue = (void *)v76;
    *(_QWORD *)(v76 + 32) = 0;
    v78 = (_WORD *)(v76 + 32);
    *(_QWORD *)(v76 + 16) = 8;
    *(_QWORD *)(v76 + 40) = 0;
    v79 = *(_QWORD *)(v73 + 16);
    v80 = *(_QWORD *)(v75 + 16);
    if (v80 >= v79)
      v81 = *(_QWORD *)(v73 + 16);
    else
      v81 = *(_QWORD *)(v75 + 16);
    if (v81)
    {
      v82 = (*(unsigned __int16 *)(v73 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
      v83 = HIWORD(v82);
      *v78 = *(_WORD *)(v73 + 32) - *(_WORD *)(v75 + 32);
      v84 = v81 - 1;
      v85 = v128;
      v86 = v141;
      if (v84)
      {
        v82 = v83 + *(unsigned __int16 *)(v73 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
        v83 = HIWORD(v82);
        *(_WORD *)(v76 + 34) = v82;
        v20 = v124;
        if (v84 == 1)
        {
          v87 = 2;
        }
        else
        {
          v77 = *(unsigned __int16 *)(v75 + 36);
          v82 = v83 + *(unsigned __int16 *)(v73 + 36) - v77 + 0xFFFF;
          v83 = HIWORD(v82);
          *(_WORD *)(v76 + 36) = v82;
          if (v84 == 2)
          {
            v87 = 3;
          }
          else
          {
            v82 = v83 + *(unsigned __int16 *)(v73 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
            v83 = HIWORD(v82);
            *(_WORD *)(v76 + 38) = v82;
            if (v84 == 3)
            {
              v87 = 4;
            }
            else
            {
              v77 = *(unsigned __int16 *)(v75 + 40);
              v82 = v83 + *(unsigned __int16 *)(v73 + 40) - v77 + 0xFFFF;
              v83 = HIWORD(v82);
              *(_WORD *)(v76 + 40) = v82;
              if (v84 == 4)
              {
                v87 = 5;
              }
              else
              {
                v82 = v83 + *(unsigned __int16 *)(v73 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
                v83 = HIWORD(v82);
                *(_WORD *)(v76 + 42) = v82;
                if (v84 == 5)
                {
                  v87 = 6;
                }
                else
                {
                  v77 = *(unsigned __int16 *)(v75 + 44);
                  v82 = v83 + *(unsigned __int16 *)(v73 + 44) - v77 + 0xFFFF;
                  v83 = HIWORD(v82);
                  *(_WORD *)(v76 + 44) = v82;
                  if (v84 == 6)
                  {
                    v87 = 7;
                  }
                  else
                  {
                    v105 = v83 + *(unsigned __int16 *)(v73 + 46) - *(unsigned __int16 *)(v75 + 46);
                    v82 = v105 + 0xFFFF;
                    *(_WORD *)(v76 + 46) = v105 - 1;
                    if (v84 != 7)
                    {
LABEL_161:
                      __break(1u);
                      goto LABEL_162;
                    }
                    v83 = HIWORD(v82);
                    v87 = 8;
                  }
                  v20 = v124;
                  v85 = v128;
                  v86 = v141;
                }
              }
            }
          }
        }
      }
      else
      {
        v87 = 1;
        v20 = v124;
      }
      v48 = v123;
      if (v87 >= v79)
        goto LABEL_95;
      if (!HIWORD(v82))
      {
        while (v87 < *(_QWORD *)(v76 + 16))
        {
          v106 = *(unsigned __int16 *)(v73 + 32 + 2 * v87);
          v77 = v106 + 0xFFFF;
          v78[v87] = v106 - 1;
          if (v79 - 1 == v87)
            goto LABEL_102;
          ++v87;
          if (v106)
            goto LABEL_88;
        }
        goto LABEL_153;
      }
    }
    else
    {
      v85 = v128;
      v86 = v141;
      if (!v79)
      {
        v20 = v124;
        if (v80)
        {
          v87 = 0;
          v83 = 1;
          v48 = v123;
          goto LABEL_96;
        }
        v103 = 8;
        v48 = v123;
        goto LABEL_105;
      }
      v87 = 0;
      v20 = v124;
      v48 = v123;
    }
LABEL_88:
    v92 = v73 + 32;
    if (v87 <= v79)
      v94 = v79;
    else
      v94 = v87;
    while (v94 != v87)
    {
      if (v87 >= *(_QWORD *)(v76 + 16))
        goto LABEL_112;
      v78[v87] = *(_WORD *)(v92 + 2 * v87);
      if ((uint64_t)++v87 >= (uint64_t)v79)
      {
        v83 = 1;
LABEL_95:
        if ((uint64_t)v87 < (uint64_t)v80)
        {
          while (1)
          {
LABEL_96:
            if (v87 >= v80)
              goto LABEL_158;
            v79 = *(_QWORD *)(v76 + 16);
            if (v87 < v79)
              break;
LABEL_101:
            __break(1u);
LABEL_102:
            v83 = HIWORD(v77);
            v87 = v79;
            if ((uint64_t)v79 >= (uint64_t)v80)
              goto LABEL_103;
          }
          v107 = v83 + (*(unsigned __int16 *)(v75 + 32 + 2 * v87) ^ 0xFFFF);
          --v80;
          v79 = v75 + 34;
          while (1)
          {
            v83 = HIWORD(v107);
            v78[v87] = v107;
            if (v80 == v87)
              break;
            v107 = v83 + (*(unsigned __int16 *)(v79 + 2 * v87++) ^ 0xFFFF);
            if (v87 >= *(_QWORD *)(v76 + 16))
              goto LABEL_101;
          }
        }
LABEL_103:
        if (!v83)
          goto LABEL_150;
        v103 = *(_QWORD *)(v76 + 16);
        if (v103)
        {
LABEL_105:
          if (!v78[v103 - 1])
          {
            do
            {
              *(_QWORD *)(v76 + 16) = v103 - 1;
              if (v103 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v76 + 28 + 2 * v103--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = *((_QWORD *)v46._rawValue + 2);
        if (!HIDWORD(v109))
        {
          _So9NSDecimala__length_setter(v109, &v155);
          LODWORD(v152) = v85;
          WORD2(v152) = v86;
          HIWORD(v152) = v139;
          LOWORD(v153) = v137;
          WORD1(v153) = v135;
          WORD2(v153) = v126;
          HIWORD(v153) = v48;
          LOWORD(v154) = v130;
          HIWORD(v154) = v129;
          goto LABEL_143;
        }
LABEL_163:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_164:
        type metadata accessor for NSComparisonResult(0);
        v152 = v48;
        result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!v48)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v33) = 0;
    v34 = 0;
    v35 = 0;
    v70 = a1;
    v20 = v124;
LABEL_148:
    *(_DWORD *)v70 = v27;
    *(_WORD *)(v70 + 4) = v28;
    *(_WORD *)(v70 + 6) = v29;
    *(_WORD *)(v70 + 8) = v30;
    *(_WORD *)(v70 + 10) = v31;
    *(_WORD *)(v70 + 12) = v32;
    *(_WORD *)(v70 + 14) = v33;
    *(_WORD *)(v70 + 16) = v34;
    v60 = v20 & 1;
    *(_WORD *)(v70 + 18) = v35;
    return v60;
  }
  v71 = v124;
  if (v48 != 1)
    goto LABEL_164;
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  v48 = v88;
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  v75 = v89;
  v90 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v46._rawValue = (void *)v90;
  *(_QWORD *)(v90 + 32) = 0;
  v78 = (_WORD *)(v90 + 32);
  *(_QWORD *)(v90 + 16) = 8;
  *(_QWORD *)(v90 + 40) = 0;
  v79 = *(_QWORD *)(v48 + 16);
  v80 = *(_QWORD *)(v75 + 16);
  if (v80 >= v79)
    v91 = *(_QWORD *)(v48 + 16);
  else
    v91 = *(_QWORD *)(v75 + 16);
  if (v91)
  {
    v92 = v48 + 32;
    v93 = (*(unsigned __int16 *)(v48 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
    LODWORD(v94) = HIWORD(v93);
    *v78 = *(_WORD *)(v48 + 32) - *(_WORD *)(v75 + 32);
    v87 = v91 - 1;
    v95 = v123;
    v96 = v127;
    v97 = v121;
    if (!v87)
    {
      v98 = 1;
      v20 = v124;
      goto LABEL_116;
    }
    v93 = v94 + *(unsigned __int16 *)(v48 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 34) = v93;
    v20 = v124;
    if (v87 == 1)
    {
      v98 = 2;
      goto LABEL_116;
    }
    v77 = *(unsigned __int16 *)(v75 + 36);
    v93 = v94 + *(unsigned __int16 *)(v48 + 36) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 36) = v93;
    if (v87 == 2)
    {
      v98 = 3;
      goto LABEL_116;
    }
    v93 = v94 + *(unsigned __int16 *)(v48 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 38) = v93;
    if (v87 == 3)
    {
      v98 = 4;
      goto LABEL_116;
    }
    v77 = *(unsigned __int16 *)(v75 + 40);
    v93 = v94 + *(unsigned __int16 *)(v48 + 40) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 40) = v93;
    if (v87 == 4)
    {
      v98 = 5;
      goto LABEL_116;
    }
    v93 = v94 + *(unsigned __int16 *)(v48 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 42) = v93;
    if (v87 == 5)
    {
      v98 = 6;
      goto LABEL_116;
    }
    v77 = *(unsigned __int16 *)(v75 + 44);
    v93 = v94 + *(unsigned __int16 *)(v48 + 44) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 44) = v93;
    if (v87 == 6)
    {
      v98 = 7;
LABEL_115:
      v20 = v71;
      v95 = v123;
      v96 = v127;
      v97 = v121;
LABEL_116:
      v99 = v145;
      if (v98 >= v79)
        goto LABEL_128;
      if (!HIWORD(v93))
      {
        while (v98 < *((_QWORD *)v46._rawValue + 2))
        {
          v111 = *(unsigned __int16 *)(v92 + 2 * v98);
          v77 = v111 + 0xFFFF;
          v78[v98] = v111 - 1;
          if (v79 - 1 == v98)
            goto LABEL_135;
          ++v98;
          if (v111)
            goto LABEL_121;
        }
        goto LABEL_154;
      }
      goto LABEL_121;
    }
LABEL_113:
    v110 = v94 + *(unsigned __int16 *)(v48 + 46) - *(unsigned __int16 *)(v75 + 46);
    v93 = v110 + 0xFFFF;
    *((_WORD *)v46._rawValue + 23) = v110 - 1;
    if (v87 != 7)
    {
LABEL_162:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_163;
    }
    LODWORD(v94) = HIWORD(v93);
    v98 = 8;
    goto LABEL_115;
  }
  v95 = v123;
  v96 = v127;
  v97 = v121;
  if (!v79)
  {
    v20 = v124;
    if (v80)
    {
      v98 = 0;
      LODWORD(v94) = 1;
      v99 = v145;
      goto LABEL_129;
    }
    v104 = 8;
    v99 = v145;
LABEL_138:
    if (!v78[v104 - 1])
    {
      do
      {
        *((_QWORD *)v46._rawValue + 2) = v104 - 1;
        if (v104 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v46._rawValue + v104-- + 14));
    }
LABEL_141:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v115 = *((_QWORD *)v46._rawValue + 2);
    if (HIDWORD(v115))
      goto LABEL_163;
    _So9NSDecimala__length_setter(v115, &v155);
    LODWORD(v152) = v97;
    WORD2(v152) = v99;
    HIWORD(v152) = v143;
    LOWORD(v153) = v95;
    WORD1(v153) = v120;
    WORD2(v153) = v125;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v96;
LABEL_143:
    v116 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v116, &v155);
    goto LABEL_144;
  }
  v98 = 0;
  v20 = v124;
  v99 = v145;
LABEL_121:
  if (v98 <= v79)
    v112 = v79;
  else
    v112 = v98;
  do
  {
    if (v112 == v98)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v98 >= *((_QWORD *)v46._rawValue + 2))
      goto LABEL_152;
    v78[v98] = *(_WORD *)(v48 + 32 + 2 * v98);
    ++v98;
  }
  while ((uint64_t)v98 < (uint64_t)v79);
  LODWORD(v94) = 1;
LABEL_128:
  if ((uint64_t)v98 < (uint64_t)v80)
  {
    while (1)
    {
LABEL_129:
      if (v98 >= v80)
        goto LABEL_159;
      v79 = *((_QWORD *)v46._rawValue + 2);
      if (v98 < v79)
        break;
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v94) = HIWORD(v77);
      v98 = v79;
      if ((uint64_t)v79 >= (uint64_t)v80)
        goto LABEL_136;
    }
    v113 = v94 + (*(unsigned __int16 *)(v75 + 32 + 2 * v98) ^ 0xFFFF);
    --v80;
    v79 = v75 + 34;
    while (1)
    {
      LODWORD(v94) = HIWORD(v113);
      v78[v98] = v113;
      if (v80 == v98)
        break;
      v113 = v94 + (*(unsigned __int16 *)(v79 + 2 * v98++) ^ 0xFFFF);
      if (v98 >= *((_QWORD *)v46._rawValue + 2))
        goto LABEL_134;
    }
  }
LABEL_136:
  if ((_DWORD)v94)
  {
    v104 = *((_QWORD *)v46._rawValue + 2);
    if (v104)
      goto LABEL_138;
    goto LABEL_141;
  }
LABEL_150:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v57 = (void *)swift_allocError();
  *v119 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v161[0] = v57;
  v59 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
    v60 = qword_1820E66F0[(char)v158];
  else
    v60 = 0;
  *(_OWORD *)((char *)v161 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v161);
  _So9NSDecimala__length_setter(0, v161);
  _So9NSDecimala__isNegative_setter(1, v161);
  _So9NSDecimala__isCompact_setter(v161);
  _So9NSDecimala__reserved_setter(v161);
  v61 = *(_OWORD *)((char *)v161 + 4);
  *(_DWORD *)a1 = v161[0];
  *(_OWORD *)(a1 + 4) = v61;

  return v60;
}

uint64_t __NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  int isNegative_getter;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unsigned __int16 v33;
  __int16 v34;
  __int16 v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  int v39;
  void *v40;
  _BYTE *v41;
  id v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _WORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  unsigned __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  Swift::OpaquePointer v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  unint64_t v89;
  _BYTE *v90;
  int v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  __int16 v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  __int16 v106;
  uint64_t v107;
  int v108;
  unint64_t v110;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  __int16 v115;
  unsigned __int16 v116;
  int v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  unsigned __int16 v122;
  int v123;
  unsigned __int16 v124;
  uint64_t v125;
  unsigned __int16 v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE v129[10];
  unsigned int v130;
  unsigned __int16 v131;
  unsigned __int16 v132;
  unsigned __int16 v133;
  uint64_t v134;
  unsigned __int16 v135;
  unsigned int v136;
  unsigned __int16 v137;
  unsigned __int16 v138;
  unsigned __int16 v139;
  uint64_t v140;
  unsigned __int16 v141;
  unsigned int v142;
  unsigned __int16 v143;
  unsigned __int16 v144;
  unsigned __int16 v145;
  uint64_t v146;
  unsigned __int16 v147;
  unsigned int v148;
  unsigned __int16 v149;
  unsigned __int16 v150;
  unsigned __int16 v151;
  _QWORD v152[5];

  v152[3] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v112 = *((_WORD *)a2 + 2);
  v114 = *((_WORD *)a2 + 3);
  v116 = *((_WORD *)a2 + 4);
  v118 = *((_WORD *)a2 + 5);
  v120 = *((_WORD *)a2 + 6);
  v122 = *((_WORD *)a2 + 8);
  v124 = *((_WORD *)a2 + 7);
  v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    v149 = v11;
    v150 = v12;
    v151 = v13;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    v13 = WORD1(v152[2]);
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    v149 = v124;
    v150 = v122;
    v151 = v126;
    if (_So9NSDecimala__isNegative_getter(&v146))
      goto LABEL_19;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    v149 = v11;
    v150 = v12;
    v151 = v13;
    if (_So9NSDecimala__isNegative_getter(&v146))
      goto LABEL_19;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    v45 = a1;
    v18 = v8;
    v19 = v13;
LABEL_27:
    v43 = 0;
    *(_DWORD *)v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    v19 = v126;
    goto LABEL_26;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  v143 = v11;
  v144 = v12;
  v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  v15 = WORD2(v146);
  v16 = HIWORD(v148);
  v113 = v146;
  v134 = v146;
  v125 = v147;
  v127 = HIWORD(v146);
  v135 = v147;
  v119 = v149;
  v121 = (unsigned __int16)v148;
  v136 = v148;
  v137 = v149;
  v117 = v150;
  v138 = v150;
  v123 = v151;
  v139 = v151;
  v17 = _So9NSDecimala__length_getter(&v134);
  v5 = v140;
  v6 = WORD2(v140);
  v7 = HIWORD(v140);
  v18 = v141;
  v9 = (unsigned __int16)v142;
  v10 = HIWORD(v142);
  v11 = v143;
  v12 = v144;
  v19 = v145;
  if (!v17)
  {
LABEL_26:
    v45 = a1;
    goto LABEL_27;
  }
  v115 = v16;
  v134 = v140;
  v135 = v141;
  v136 = v142;
  v137 = v143;
  v138 = v144;
  v139 = v145;
  v108 = v145;
  v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    v19 = v123;
    goto LABEL_26;
  }
  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  v137 = v119;
  v138 = v117;
  v139 = v123;
  *(_DWORD *)v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  v130 = __PAIR32__(v16, v121);
  v131 = v119;
  v132 = v117;
  v133 = v123;
  v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)v129 = v5;
  v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  v131 = v11;
  v132 = v12;
  v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    v131 = v119;
    v132 = v117;
    v133 = v123;
    v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()(v113 | (v15 << 32) | (v127 << 48), v125 | (v121 << 16) | (v16 << 32) | (v119 << 48), v117 | (v123 << 16));
    v22 = v21;
    NSDecimal.asVariableLengthInteger()(v5 | (v6 << 32) | (v7 << 48), v107 | (v9 << 16) | (v10 << 32) | (v11 << 48), v12 | (v108 << 16));
    v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      v19 = v139;
      goto LABEL_26;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    v28 = v27;
    v128 = v29;
    swift_bridgeObjectRelease();
    v30 = v134;
    v31 = WORD2(v134);
    v32 = HIWORD(v134);
    v33 = v135;
    v34 = v136;
    v35 = HIWORD(v136);
    v36 = v137;
    v37 = v138;
    v38 = v139;
    *(_QWORD *)v129 = v134;
    *(_WORD *)&v129[8] = v135;
    v130 = v136;
    v131 = v137;
    v132 = v138;
    v133 = v139;
    v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, (_DWORD)v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v40 = (void *)swift_allocError();
            *v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }
          *(_DWORD *)v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          v131 = v36;
          v132 = v37;
          v133 = v38;
          v79 = _So9NSDecimala__exponent_getter(v129);
          v80 = __OFADD__(v79, (_DWORD)v28);
          v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            v25 = v128;
            v26 = *(_QWORD *)(v128 + 16);
            if (HIDWORD(v26))
              goto LABEL_162;
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v99 = v15;
  v110 = v113 | (v15 << 32) | (v127 << 48);
  v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  v48 = v47;
  v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  v102 = v5 | (v6 << 32) | (v7 << 48);
  v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  v28 = v50;
  swift_bridgeObjectRelease();
  v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    v28 = v54;
    v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v57 = v55;
    *(_QWORD *)(v55 + 32) = 0;
    v58 = (_WORD *)(v55 + 32);
    *(_QWORD *)(v55 + 16) = 8;
    *(_QWORD *)(v55 + 40) = 0;
    v59 = *(_QWORD *)(v53 + 16);
    v60 = *(_QWORD *)(v28 + 16);
    if (v60 >= v59)
      v61 = *(_QWORD *)(v53 + 16);
    else
      v61 = *(_QWORD *)(v28 + 16);
    if (v61)
    {
      v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      v63 = HIWORD(v62);
      *v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      v64 = v61 - 1;
      if (v64)
      {
        v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          v65 = 2;
        }
        else
        {
          v56 = *(unsigned __int16 *)(v28 + 36);
          v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            v65 = 3;
          }
          else
          {
            v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              v65 = 4;
            }
            else
            {
              v56 = *(unsigned __int16 *)(v28 + 40);
              v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                v65 = 5;
              }
              else
              {
                v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  v65 = 6;
                }
                else
                {
                  v56 = *(unsigned __int16 *)(v28 + 44);
                  v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    v65 = 7;
                  }
                  else
                  {
                    v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    v56 = v53;
                    v63 = HIWORD(v62);
                    v65 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v65 = 1;
      }
      if (v65 >= v59)
        goto LABEL_97;
      if (!HIWORD(v62))
      {
        while (v65 < *(_QWORD *)(v55 + 16))
        {
          v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65)
            goto LABEL_104;
          ++v65;
          if (v86)
            goto LABEL_90;
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v59)
      {
        if (v60)
        {
          v65 = 0;
          v63 = 1;
          goto LABEL_98;
        }
        v83 = 8;
        goto LABEL_107;
      }
      v65 = 0;
    }
LABEL_90:
    v74 = v53 + 32;
    if (v65 <= v59)
      v76 = v59;
    else
      v76 = v65;
    while (v76 != v65)
    {
      if (v65 >= *(_QWORD *)(v55 + 16))
        goto LABEL_114;
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60)
              goto LABEL_157;
            v59 = *(_QWORD *)(v55 + 16);
            if (v65 < v59)
              break;
LABEL_103:
            __break(1u);
LABEL_104:
            v63 = HIWORD(v56);
            v65 = v59;
            if ((uint64_t)v59 >= (uint64_t)v60)
              goto LABEL_105;
          }
          v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          v59 = v28 + 34;
          while (1)
          {
            v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65)
              break;
            v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(_QWORD *)(v55 + 16))
              goto LABEL_103;
          }
        }
LABEL_105:
        if (!v63)
          goto LABEL_112;
        v83 = *(_QWORD *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(_QWORD *)(v55 + 16) = v83 - 1;
              if (v83 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v89 = *(_QWORD *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          v131 = v127;
          v132 = v125;
          v133 = v108;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        *(_QWORD *)v129 = v28;
        result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    v19 = 0;
    goto LABEL_26;
  }
  if (v50 != 1)
    goto LABEL_163;
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  v7 = v67;
  v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v57 = v68;
  *(_QWORD *)(v68 + 32) = 0;
  v58 = (_WORD *)(v68 + 32);
  *(_QWORD *)(v68 + 16) = 8;
  *(_QWORD *)(v68 + 40) = 0;
  v59 = *(_QWORD *)(v28 + 16);
  v60 = *(_QWORD *)(v7 + 16);
  if (v60 >= v59)
    v69 = *(_QWORD *)(v28 + 16);
  else
    v69 = *(_QWORD *)(v7 + 16);
  v70 = v125;
  v71 = v123;
  v72 = v113;
  v73 = v121;
  if (v69)
  {
    v74 = v28 + 32;
    v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    *v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    v65 = v69 - 1;
    v77 = v127;
    if (!v65)
    {
      v78 = 1;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      v78 = 2;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 36);
    v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      v78 = 3;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      v78 = 4;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 40);
    v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      v78 = 5;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      v78 = 6;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 44);
    v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      v78 = 7;
LABEL_117:
      v70 = v125;
      v77 = v127;
      v71 = v123;
      v72 = v113;
      v51 = v115;
      v73 = v121;
LABEL_118:
      if (v78 >= v59)
        goto LABEL_130;
      if (!HIWORD(v75))
      {
        while (v78 < *(_QWORD *)(v57 + 16))
        {
          v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78)
            goto LABEL_137;
          ++v78;
          if (v92)
            goto LABEL_123;
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v76) = HIWORD(v75);
    v78 = 8;
    goto LABEL_117;
  }
  v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      v78 = 0;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }
    v84 = 8;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(_QWORD *)(v57 + 16) = v84 - 1;
        if (v84 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v96 = *(_QWORD *)(v57 + 16);
    if (HIDWORD(v96))
      goto LABEL_162;
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    v131 = v119;
    v132 = v117;
    v133 = v71;
LABEL_145:
    v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }
  v78 = 0;
LABEL_123:
  if (v78 <= v59)
    v93 = v59;
  else
    v93 = v78;
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v78 >= *(_QWORD *)(v57 + 16))
      goto LABEL_151;
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }
  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60)
        goto LABEL_158;
      v59 = *(_QWORD *)(v57 + 16);
      if (v78 < v59)
        break;
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      v78 = v59;
      if ((uint64_t)v59 >= (uint64_t)v60)
        goto LABEL_138;
    }
    v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78)
        break;
      v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(_QWORD *)(v57 + 16))
        goto LABEL_136;
    }
  }
LABEL_138:
  if ((_DWORD)v76)
  {
    v84 = *(_QWORD *)(v57 + 16);
    if (v84)
      goto LABEL_140;
    goto LABEL_143;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v40 = (void *)swift_allocError();
  *v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
    v43 = qword_1820E66F0[(char)v146];
  else
    v43 = 0;
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v152);
  _So9NSDecimala__length_setter(0, v152);
  _So9NSDecimala__isNegative_setter(1, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

uint64_t NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  int isNegative_getter;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unsigned __int16 v33;
  __int16 v34;
  __int16 v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  int v39;
  void *v40;
  _BYTE *v41;
  id v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _WORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  unsigned __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  Swift::OpaquePointer v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  unint64_t v89;
  _BYTE *v90;
  int v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  __int16 v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  __int16 v106;
  uint64_t v107;
  int v108;
  unint64_t v110;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  __int16 v115;
  unsigned __int16 v116;
  int v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  unsigned __int16 v122;
  int v123;
  unsigned __int16 v124;
  uint64_t v125;
  unsigned __int16 v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE v129[10];
  unsigned int v130;
  unsigned __int16 v131;
  unsigned __int16 v132;
  unsigned __int16 v133;
  uint64_t v134;
  unsigned __int16 v135;
  unsigned int v136;
  unsigned __int16 v137;
  unsigned __int16 v138;
  unsigned __int16 v139;
  uint64_t v140;
  unsigned __int16 v141;
  unsigned int v142;
  unsigned __int16 v143;
  unsigned __int16 v144;
  unsigned __int16 v145;
  uint64_t v146;
  unsigned __int16 v147;
  unsigned int v148;
  unsigned __int16 v149;
  unsigned __int16 v150;
  unsigned __int16 v151;
  _QWORD v152[5];

  v152[3] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v112 = *((_WORD *)a2 + 2);
  v114 = *((_WORD *)a2 + 3);
  v116 = *((_WORD *)a2 + 4);
  v118 = *((_WORD *)a2 + 5);
  v120 = *((_WORD *)a2 + 6);
  v122 = *((_WORD *)a2 + 8);
  v124 = *((_WORD *)a2 + 7);
  v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    v149 = v11;
    v150 = v12;
    v151 = v13;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    v13 = WORD1(v152[2]);
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    v149 = v124;
    v150 = v122;
    v151 = v126;
    if (_So9NSDecimala__isNegative_getter(&v146))
      goto LABEL_19;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    v149 = v11;
    v150 = v12;
    v151 = v13;
    if (_So9NSDecimala__isNegative_getter(&v146))
      goto LABEL_19;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    v45 = a1;
    v18 = v8;
    v19 = v13;
LABEL_27:
    v43 = 0;
    *(_DWORD *)v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  v149 = v11;
  v150 = v12;
  v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    v19 = v126;
    goto LABEL_26;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  v149 = v124;
  v150 = v122;
  v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  v143 = v11;
  v144 = v12;
  v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  v15 = WORD2(v146);
  v16 = HIWORD(v148);
  v113 = v146;
  v134 = v146;
  v125 = v147;
  v127 = HIWORD(v146);
  v135 = v147;
  v119 = v149;
  v121 = (unsigned __int16)v148;
  v136 = v148;
  v137 = v149;
  v117 = v150;
  v138 = v150;
  v123 = v151;
  v139 = v151;
  v17 = _So9NSDecimala__length_getter(&v134);
  v5 = v140;
  v6 = WORD2(v140);
  v7 = HIWORD(v140);
  v18 = v141;
  v9 = (unsigned __int16)v142;
  v10 = HIWORD(v142);
  v11 = v143;
  v12 = v144;
  v19 = v145;
  if (!v17)
  {
LABEL_26:
    v45 = a1;
    goto LABEL_27;
  }
  v115 = v16;
  v134 = v140;
  v135 = v141;
  v136 = v142;
  v137 = v143;
  v138 = v144;
  v139 = v145;
  v108 = v145;
  v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    v19 = v123;
    goto LABEL_26;
  }
  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  v137 = v119;
  v138 = v117;
  v139 = v123;
  *(_DWORD *)v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  v130 = __PAIR32__(v16, v121);
  v131 = v119;
  v132 = v117;
  v133 = v123;
  v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)v129 = v5;
  v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  v131 = v11;
  v132 = v12;
  v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    v131 = v119;
    v132 = v117;
    v133 = v123;
    v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()(v113 | (v15 << 32) | (v127 << 48), v125 | (v121 << 16) | (v16 << 32) | (v119 << 48), v117 | (v123 << 16));
    v22 = v21;
    NSDecimal.asVariableLengthInteger()(v5 | (v6 << 32) | (v7 << 48), v107 | (v9 << 16) | (v10 << 32) | (v11 << 48), v12 | (v108 << 16));
    v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      v19 = v139;
      goto LABEL_26;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    v28 = v27;
    v128 = v29;
    swift_bridgeObjectRelease();
    v30 = v134;
    v31 = WORD2(v134);
    v32 = HIWORD(v134);
    v33 = v135;
    v34 = v136;
    v35 = HIWORD(v136);
    v36 = v137;
    v37 = v138;
    v38 = v139;
    *(_QWORD *)v129 = v134;
    *(_WORD *)&v129[8] = v135;
    v130 = v136;
    v131 = v137;
    v132 = v138;
    v133 = v139;
    v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, (_DWORD)v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v40 = (void *)swift_allocError();
            *v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }
          *(_DWORD *)v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          v131 = v36;
          v132 = v37;
          v133 = v38;
          v79 = _So9NSDecimala__exponent_getter(v129);
          v80 = __OFADD__(v79, (_DWORD)v28);
          v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            v25 = v128;
            v26 = *(_QWORD *)(v128 + 16);
            if (HIDWORD(v26))
              goto LABEL_162;
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v99 = v15;
  v110 = v113 | (v15 << 32) | (v127 << 48);
  v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  v48 = v47;
  v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  v102 = v5 | (v6 << 32) | (v7 << 48);
  v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  v28 = v50;
  swift_bridgeObjectRelease();
  v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    v28 = v54;
    v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v57 = v55;
    *(_QWORD *)(v55 + 32) = 0;
    v58 = (_WORD *)(v55 + 32);
    *(_QWORD *)(v55 + 16) = 8;
    *(_QWORD *)(v55 + 40) = 0;
    v59 = *(_QWORD *)(v53 + 16);
    v60 = *(_QWORD *)(v28 + 16);
    if (v60 >= v59)
      v61 = *(_QWORD *)(v53 + 16);
    else
      v61 = *(_QWORD *)(v28 + 16);
    if (v61)
    {
      v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      v63 = HIWORD(v62);
      *v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      v64 = v61 - 1;
      if (v64)
      {
        v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          v65 = 2;
        }
        else
        {
          v56 = *(unsigned __int16 *)(v28 + 36);
          v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            v65 = 3;
          }
          else
          {
            v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              v65 = 4;
            }
            else
            {
              v56 = *(unsigned __int16 *)(v28 + 40);
              v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                v65 = 5;
              }
              else
              {
                v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  v65 = 6;
                }
                else
                {
                  v56 = *(unsigned __int16 *)(v28 + 44);
                  v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    v65 = 7;
                  }
                  else
                  {
                    v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    v56 = v53;
                    v63 = HIWORD(v62);
                    v65 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v65 = 1;
      }
      if (v65 >= v59)
        goto LABEL_97;
      if (!HIWORD(v62))
      {
        while (v65 < *(_QWORD *)(v55 + 16))
        {
          v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65)
            goto LABEL_104;
          ++v65;
          if (v86)
            goto LABEL_90;
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v59)
      {
        if (v60)
        {
          v65 = 0;
          v63 = 1;
          goto LABEL_98;
        }
        v83 = 8;
        goto LABEL_107;
      }
      v65 = 0;
    }
LABEL_90:
    v74 = v53 + 32;
    if (v65 <= v59)
      v76 = v59;
    else
      v76 = v65;
    while (v76 != v65)
    {
      if (v65 >= *(_QWORD *)(v55 + 16))
        goto LABEL_114;
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60)
              goto LABEL_157;
            v59 = *(_QWORD *)(v55 + 16);
            if (v65 < v59)
              break;
LABEL_103:
            __break(1u);
LABEL_104:
            v63 = HIWORD(v56);
            v65 = v59;
            if ((uint64_t)v59 >= (uint64_t)v60)
              goto LABEL_105;
          }
          v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          v59 = v28 + 34;
          while (1)
          {
            v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65)
              break;
            v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(_QWORD *)(v55 + 16))
              goto LABEL_103;
          }
        }
LABEL_105:
        if (!v63)
          goto LABEL_112;
        v83 = *(_QWORD *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(_QWORD *)(v55 + 16) = v83 - 1;
              if (v83 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v89 = *(_QWORD *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          v131 = v127;
          v132 = v125;
          v133 = v108;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        *(_QWORD *)v129 = v28;
        result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    v19 = 0;
    goto LABEL_26;
  }
  if (v50 != 1)
    goto LABEL_163;
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  v7 = v67;
  v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v57 = v68;
  *(_QWORD *)(v68 + 32) = 0;
  v58 = (_WORD *)(v68 + 32);
  *(_QWORD *)(v68 + 16) = 8;
  *(_QWORD *)(v68 + 40) = 0;
  v59 = *(_QWORD *)(v28 + 16);
  v60 = *(_QWORD *)(v7 + 16);
  if (v60 >= v59)
    v69 = *(_QWORD *)(v28 + 16);
  else
    v69 = *(_QWORD *)(v7 + 16);
  v70 = v125;
  v71 = v123;
  v72 = v113;
  v73 = v121;
  if (v69)
  {
    v74 = v28 + 32;
    v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    *v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    v65 = v69 - 1;
    v77 = v127;
    if (!v65)
    {
      v78 = 1;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      v78 = 2;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 36);
    v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      v78 = 3;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      v78 = 4;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 40);
    v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      v78 = 5;
      goto LABEL_118;
    }
    v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      v78 = 6;
      goto LABEL_118;
    }
    v56 = *(unsigned __int16 *)(v7 + 44);
    v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      v78 = 7;
LABEL_117:
      v70 = v125;
      v77 = v127;
      v71 = v123;
      v72 = v113;
      v51 = v115;
      v73 = v121;
LABEL_118:
      if (v78 >= v59)
        goto LABEL_130;
      if (!HIWORD(v75))
      {
        while (v78 < *(_QWORD *)(v57 + 16))
        {
          v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78)
            goto LABEL_137;
          ++v78;
          if (v92)
            goto LABEL_123;
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v76) = HIWORD(v75);
    v78 = 8;
    goto LABEL_117;
  }
  v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      v78 = 0;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }
    v84 = 8;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(_QWORD *)(v57 + 16) = v84 - 1;
        if (v84 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v96 = *(_QWORD *)(v57 + 16);
    if (HIDWORD(v96))
      goto LABEL_162;
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    v131 = v119;
    v132 = v117;
    v133 = v71;
LABEL_145:
    v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }
  v78 = 0;
LABEL_123:
  if (v78 <= v59)
    v93 = v59;
  else
    v93 = v78;
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v78 >= *(_QWORD *)(v57 + 16))
      goto LABEL_151;
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }
  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60)
        goto LABEL_158;
      v59 = *(_QWORD *)(v57 + 16);
      if (v78 < v59)
        break;
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      v78 = v59;
      if ((uint64_t)v59 >= (uint64_t)v60)
        goto LABEL_138;
    }
    v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78)
        break;
      v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(_QWORD *)(v57 + 16))
        goto LABEL_136;
    }
  }
LABEL_138:
  if ((_DWORD)v76)
  {
    v84 = *(_QWORD *)(v57 + 16);
    if (v84)
      goto LABEL_140;
    goto LABEL_143;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v40 = (void *)swift_allocError();
  *v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
    v43 = qword_1820E66F0[(char)v146];
  else
    v43 = 0;
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v152);
  _So9NSDecimala__length_setter(0, v152);
  _So9NSDecimala__isNegative_setter(1, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

uint64_t __NSDecimalMultiply(_:_:_:_:)(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  __int16 v39;
  __int16 v40;
  int isNegative_getter;
  _BOOL8 v42;
  int v43;
  uint64_t v44;
  Swift::OpaquePointer v45;
  void *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  __int16 v95;
  _QWORD v96[4];

  v4 = *a2;
  v5 = *((unsigned __int16 *)a2 + 2);
  v6 = *((unsigned __int16 *)a2 + 3);
  v7 = *((unsigned __int16 *)a2 + 4);
  v8 = *((unsigned __int16 *)a2 + 5);
  v9 = *((unsigned __int16 *)a2 + 6);
  v10 = *((unsigned __int16 *)a2 + 7);
  v11 = *((unsigned __int16 *)a2 + 8);
  v12 = *((unsigned __int16 *)a2 + 9);
  v13 = *(unsigned int *)a3;
  v14 = a3[2];
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[5];
  v18 = a3[6];
  v19 = a3[7];
  v20 = a3[8];
  v21 = a3[9];
  LODWORD(v96[0]) = *a2;
  v82 = v7;
  v83 = v5;
  WORD2(v96[0]) = v5;
  v79 = v6;
  v80 = v9;
  HIWORD(v96[0]) = v6;
  LOWORD(v96[1]) = v7;
  v81 = v8;
  WORD1(v96[1]) = v8;
  WORD2(v96[1]) = v9;
  v86 = v10;
  HIWORD(v96[1]) = v10;
  v84 = v12;
  v85 = v11;
  LOWORD(v96[2]) = v11;
  WORD1(v96[2]) = v12;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v4;
    WORD2(v96[0]) = v83;
    HIWORD(v96[0]) = v79;
    LOWORD(v96[1]) = v82;
    WORD1(v96[1]) = v81;
    WORD2(v96[1]) = v80;
    HIWORD(v96[1]) = v86;
    LOWORD(v96[2]) = v85;
    WORD1(v96[2]) = v84;
    if (_So9NSDecimala__isNegative_getter(v96))
      goto LABEL_15;
  }
  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    LODWORD(v96[0]) = v13;
    WORD2(v96[0]) = v14;
    HIWORD(v96[0]) = v15;
    LOWORD(v96[1]) = v16;
    WORD1(v96[1]) = v17;
    WORD2(v96[1]) = v18;
    HIWORD(v96[1]) = v19;
    LOWORD(v96[2]) = v20;
    WORD1(v96[2]) = v21;
    if (_So9NSDecimala__isNegative_getter(v96))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      v32 = (void *)swift_allocError();
      *v33 = 0;
      swift_willThrow();
LABEL_16:
      v34 = a1;
      goto LABEL_17;
    }
  }
  v73 = v21;
  v74 = v20;
  v75 = v18;
  v76 = v17;
  v77 = v15;
  LODWORD(v96[0]) = v4;
  WORD2(v96[0]) = v83;
  HIWORD(v96[0]) = v79;
  LOWORD(v96[1]) = v82;
  WORD1(v96[1]) = v81;
  WORD2(v96[1]) = v80;
  HIWORD(v96[1]) = v86;
  LOWORD(v96[2]) = v85;
  WORD1(v96[2]) = v84;
  v22 = _So9NSDecimala__length_getter(v96);
  v23 = 0uLL;
  if (!v22)
  {
    v38 = 0;
    v34 = a1;
    goto LABEL_26;
  }
  LODWORD(v96[0]) = v13;
  WORD2(v96[0]) = v14;
  HIWORD(v96[0]) = v15;
  LOWORD(v96[1]) = v16;
  WORD1(v96[1]) = v17;
  WORD2(v96[1]) = v18;
  HIWORD(v96[1]) = v19;
  LOWORD(v96[2]) = v20;
  WORD1(v96[2]) = v21;
  if (!_So9NSDecimala__length_getter(v96))
  {
    v38 = 0;
    v34 = a1;
    v23 = 0uLL;
    goto LABEL_26;
  }
  v70 = v4;
  NSDecimal.asVariableLengthInteger()(v4 | (v83 << 32) | (v79 << 48), v82 | (v81 << 16) | (v80 << 32) | (v86 << 48), v85 | (v84 << 16));
  v25 = v24;
  NSDecimal.asVariableLengthInteger()(v13 | (v14 << 32) | (v15 << 48), v16 | (v76 << 16) | (v18 << 32) | (v19 << 48), v20 | (v21 << 16));
  v27 = v26;
  v28 = *(_QWORD *)(v25 + 16);
  if (v28)
  {
    v29 = *(_QWORD *)(v26 + 16);
    if (v29)
    {
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
        goto LABEL_74;
      if (v30 > 15)
      {
        v30 = 16;
        goto LABEL_29;
      }
      if ((v30 & 0x8000000000000000) == 0)
      {
        if (!v30)
        {
          v31 = MEMORY[0x1E0DEE9D8];
          goto LABEL_30;
        }
LABEL_29:
        v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v31 + 16) = v30;
        bzero((void *)(v31 + 32), 2 * v30);
LABEL_30:
        v49 = 0;
        v50 = v27 + 32;
        v51 = v31 + 32;
LABEL_31:
        if (v49 == v29)
          goto LABEL_73;
        v52 = 0;
        v53 = 0;
        v54 = v49 + 1;
        while (v28 != v53)
        {
          v55 = v53 + v49;
          if (__OFADD__(v53, v49))
            goto LABEL_69;
          if (v55 >= v30)
          {
            if (v52)
              goto LABEL_57;
            v52 = *(unsigned __int16 *)(v50 + 2 * v49);
            if (*(_WORD *)(v50 + 2 * v49))
            {
              v52 = *(unsigned __int16 *)(v25 + 2 * v53 + 32);
              if (*(_WORD *)(v25 + 2 * v53 + 32))
                goto LABEL_57;
            }
          }
          else
          {
            if (v55 < 0)
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            if ((unint64_t)v55 >= *(_QWORD *)(v31 + 16))
              goto LABEL_72;
            v56 = 2 * v55;
            v57 = v52
                + *(unsigned __int16 *)(v51 + v56)
                + *(unsigned __int16 *)(v25 + 2 * v53 + 32) * *(unsigned __int16 *)(v50 + 2 * v49);
            v52 = HIWORD(v57);
            *(_WORD *)(v51 + v56) = v57;
          }
          if (v28 == ++v53)
          {
            if (v52)
            {
              v58 = __OFADD__(v28, v49);
              v59 = v28 + v49;
              if (v58)
                goto LABEL_75;
              if (v59 >= v30)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                v32 = (void *)swift_allocError();
                *v63 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_16;
              }
              if (v59 < 0)
                goto LABEL_76;
              if ((unint64_t)v59 >= *(_QWORD *)(v31 + 16))
                goto LABEL_77;
              *(_WORD *)(v51 + 2 * v59) = v52;
            }
            v49 = v54;
            if (v54 != v29)
              goto LABEL_31;
            v60 = *(_QWORD *)(v31 + 16);
            v71 = v14;
            v69 = v31;
            if (v60 && !*(_WORD *)(v51 + 2 * v60 - 2))
            {
              v61 = v60 + 14;
              do
              {
                *(_QWORD *)(v31 + 16) = v61 - 15;
                if (v61 == 15)
                  break;
              }
              while (!*(unsigned __int16 *)(v31 + 2 * v61--));
            }
LABEL_70:
            v39 = v79;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      goto LABEL_81;
    }
  }
  v71 = v14;
  v39 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  memset(v96, 0, 20);
  v87 = v70;
  v88 = v83;
  v40 = v39;
  v89 = v39;
  v90 = v82;
  v91 = v81;
  v92 = v80;
  v93 = v86;
  v94 = v85;
  v95 = v84;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v87);
  v87 = v13;
  v88 = v71;
  v89 = v77;
  v90 = v16;
  v91 = v76;
  v92 = v75;
  v93 = v19;
  v94 = v74;
  v95 = v73;
  v42 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v87);
  _So9NSDecimala__isNegative_setter(v42, v96);
  v87 = v70;
  v88 = v83;
  v89 = v40;
  v90 = v82;
  v91 = v81;
  v92 = v80;
  v93 = v86;
  v94 = v85;
  v95 = v84;
  v43 = _So9NSDecimala__exponent_getter((char *)&v87);
  v87 = v13;
  v88 = v71;
  v89 = v77;
  v90 = v16;
  v91 = v76;
  v92 = v75;
  v93 = v19;
  v94 = v74;
  v95 = v73;
  v44 = _So9NSDecimala__exponent_getter((char *)&v87) + v43;
  v45._rawValue = (void *)v69;
  if (*(_QWORD *)(v69 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v69, a4);
    v64 = v46;
    v65 = v47;
    swift_bridgeObjectRelease();
    if (v65 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_78;
    if (v65 > 0x7FFFFFFF)
    {
LABEL_79:
      __break(1u);
    }
    else
    {
      v58 = __OFADD__((_DWORD)v44, (_DWORD)v65);
      v44 = (v44 + v65);
      if (!v58)
      {
        v45._rawValue = v64;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_81:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_82;
  }
LABEL_62:
  v34 = a1;
  NSDecimal.copyVariableLengthInteger(_:)(v45);
  if (v66)
  {
    v32 = v66;
    swift_bridgeObjectRelease();
LABEL_17:
    v96[0] = v32;
    v35 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) != 0)
      v36 = qword_1820E66F0[(char)v87];
    else
      v36 = 0;
    *(_OWORD *)((char *)v96 + 4) = 0uLL;
    _So9NSDecimala__exponent_setter(0, v96);
    _So9NSDecimala__length_setter(0, v96);
    _So9NSDecimala__isNegative_setter(1, v96);
    _So9NSDecimala__isCompact_setter(v96);
    _So9NSDecimala__reserved_setter(v96);
    v37 = *(_OWORD *)((char *)v96 + 4);
    *(_DWORD *)v34 = v96[0];
    *(_OWORD *)(v34 + 4) = v37;

    return v36;
  }
  v67 = *((_QWORD *)v45._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v67))
  {
    _So9NSDecimala__length_setter(v67, v96);
    _So9NSDecimala__isCompact_setter(v96);
    if ((int)v44 >= 128)
    {
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      v32 = (void *)swift_allocError();
      *v68 = 0;
      swift_willThrow();
      goto LABEL_17;
    }
    _So9NSDecimala__exponent_setter(v44, v96);
    NSDecimal.compact()();
    v38 = v96[0];
    v23 = *(_OWORD *)((char *)v96 + 4);
LABEL_26:
    v36 = 0;
    *(_DWORD *)v34 = v38;
    *(_OWORD *)(v34 + 4) = v23;
    return v36;
  }
LABEL_82:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __NSDecimalPower(_:_:_:_:)(uint64_t a1, int a2, Swift::UInt exponent, NSDecimal *retstr)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _BYTE v13[20];
  char v14;

  if ((exponent & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    NSDecimal._power(exponent:roundingMode:)(retstr, exponent, (NSRoundingMode)retstr);
    if (v8)
    {
      *(_QWORD *)v13 = v8;
      v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
        v10 = qword_1820E66F0[v14];
      else
        v10 = 0;
      *(_OWORD *)&v13[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0, v13);
      _So9NSDecimala__length_setter(0, v13);
      _So9NSDecimala__isNegative_setter(1, v13);
      _So9NSDecimala__isCompact_setter(v13);
      _So9NSDecimala__reserved_setter(v13);
      v11 = *(_OWORD *)&v13[4];
      *(_DWORD *)a1 = *(_DWORD *)v13;
      *(_OWORD *)(a1 + 4) = v11;

    }
    else
    {
      v10 = 0;
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a1 + 16) = v7;
    }
    return v10;
  }
  return result;
}

uint64_t __NSDecimalCompare(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

NSComparisonResult NSDecimalCompare(const NSDecimal *leftOperand, const NSDecimal *rightOperand)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)leftOperand, *(_QWORD *)&leftOperand->_mantissa[2], *(_DWORD *)&leftOperand->_mantissa[6], *(_QWORD *)rightOperand, *(_QWORD *)&rightOperand->_mantissa[2], *(_DWORD *)&rightOperand->_mantissa[6]);
}

uint64_t NSDecimalCompare(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

void __NSDecimalRound(_:_:_:_:)(uint64_t a1, int a2, Swift::Int scale, NSDecimal *retstr)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;

  NSDecimal._round(scale:roundingMode:)(retstr, scale, (NSRoundingMode)retstr);
  if (v8)
  {

  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }
}

void NSDecimalRound(NSDecimal *result, const NSDecimal *number, NSInteger scale, NSRoundingMode roundingMode)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;

  NSDecimal._round(scale:roundingMode:)((NSDecimal *)roundingMode, scale, roundingMode);
  if (v8)
  {

  }
  else
  {
    *(_QWORD *)result = v5;
    *(_QWORD *)&result->_mantissa[2] = v6;
    *(_DWORD *)&result->_mantissa[6] = v7;
  }
}

void NSDecimalRound(_:_:_:_:)(uint64_t a1, int a2, Swift::Int scale, NSDecimal *retstr)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;

  NSDecimal._round(scale:roundingMode:)(retstr, scale, (NSRoundingMode)retstr);
  if (v8)
  {

  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
  }
}

double NSDecimalCompact(_:)(int *a1)
{
  double result;
  int v3;
  __int128 v4;

  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  NSDecimal.compact()();
  *a1 = v3;
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 1) = v4;
  return result;
}

uint64_t __NSDecimalString(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;
  Swift::String v26;
  int v27;
  __int16 v28;
  Swift::String v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  Swift::String v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int i;
  Swift::String v46;
  int v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t result;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unsigned int v62;
  __int128 v63;
  uint64_t v64;
  _OWORD v65[2];
  __int128 v66;

  outlined init with copy of Any?(a2, (uint64_t)&v62);
  if (!v64)
  {
    outlined destroy of Any?((uint64_t)&v62);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v10 = (void *)0xE100000000000000;
    v7 = 46;
    goto LABEL_8;
  }
  v4 = *((_QWORD *)&v65[0] + 1);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 224);
  swift_unknownObjectRetain();
  v7 = v6(ObjectType, v4);
  v9 = v8;
  swift_unknownObjectRelease_n();
  if (v9)
  {
    v10 = v9;
  }
  else
  {
    v7 = 46;
    v10 = (void *)0xE100000000000000;
  }
LABEL_8:
  outlined init with copy of Any?(a2, (uint64_t)&v62);
  if (v64)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v54 = v7;
      goto LABEL_29;
    }
    v11 = *(_QWORD *)&v65[0];
    *(_QWORD *)&v65[0] = 0xD000000000000012;
    *((_QWORD *)&v65[0] + 1) = 0x8000000182308BB0;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v11 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v13 & 1) != 0))
      outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)v65);
    else
      memset(v65, 0, sizeof(v65));
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((_QWORD *)&v65[1] + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v10 = (void *)*((_QWORD *)&v66 + 1);
        v7 = v66;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v65);
    }
    *(_QWORD *)&v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997C8]);
    *((_QWORD *)&v66 + 1) = v15;
    AnyHashable.init<A>(_:)();
    v54 = v7;
    if (*(_QWORD *)(v11 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v17 & 1) != 0))
      outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v16, (uint64_t)v65);
    else
      memset(v65, 0, sizeof(v65));
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((_QWORD *)&v65[1] + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v10 = (void *)*((_QWORD *)&v66 + 1);
        v54 = v66;
      }
      goto LABEL_29;
    }
    v14 = (unsigned int *)v65;
  }
  else
  {
    v54 = v7;
    v14 = &v62;
  }
  outlined destroy of Any?((uint64_t)v14);
LABEL_29:
  LODWORD(v18) = *(_DWORD *)a1;
  v19 = *(_WORD *)(a1 + 4);
  v20 = *(_WORD *)(a1 + 6);
  LOWORD(v21) = *(_WORD *)(a1 + 8);
  v22 = *(_WORD *)(a1 + 10);
  v23 = *(_WORD *)(a1 + 12);
  LOWORD(v24) = *(_WORD *)(a1 + 14);
  LOWORD(v25) = *(_WORD *)(a1 + 16);
  LOWORD(a1) = *(_WORD *)(a1 + 18);
  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    v62 = v18;
    LOWORD(v63) = v19;
    WORD1(v63) = v20;
    WORD2(v63) = v21;
    WORD3(v63) = v22;
    WORD4(v63) = v23;
    WORD5(v63) = v24;
    WORD6(v63) = v25;
    HIWORD(v63) = a1;
    if (_So9NSDecimala__isNegative_getter(&v62))
    {
      swift_bridgeObjectRelease();
      return 5136718;
    }
  }
  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    swift_bridgeObjectRelease();
    return 48;
  }
  v53 = v10;
  *(_QWORD *)&v66 = 0;
  *((_QWORD *)&v66 + 1) = 0xE000000000000000;
  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if ((int)_So9NSDecimala__exponent_getter((char *)v65) >= 1)
  {
    do
    {
      v26._countAndFlagsBits = 48;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v19;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      v27 = _So9NSDecimala__exponent_getter((char *)v65);
      _So9NSDecimala__exponent_setter((v27 - 1), &v62);
      LODWORD(v18) = v62;
      v19 = v63;
      v20 = WORD1(v63);
      LOWORD(v21) = WORD2(v63);
      v22 = WORD3(v63);
      v23 = WORD4(v63);
      LOWORD(v24) = WORD5(v63);
      LOWORD(v25) = WORD6(v63);
      LOWORD(a1) = HIWORD(v63);
      *(_QWORD *)&v65[0] = __PAIR64__(v63, v62);
      *((_QWORD *)&v65[0] + 1) = *(_QWORD *)((char *)&v63 + 4);
      LODWORD(v65[1]) = HIDWORD(v63);
    }
    while ((int)_So9NSDecimala__exponent_getter((char *)v65) > 0);
  }
  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__exponent_getter((char *)v65))
  {
    _So9NSDecimala__exponent_setter(1, &v62);
    LODWORD(v18) = v62;
    v19 = v63;
    v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    v22 = WORD3(v63);
    v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
  }
  LODWORD(v65[0]) = v18;
  v59 = v19;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__length_getter(v65))
  {
LABEL_57:
    v28 = v59;
LABEL_58:
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    v42 = v28;
    v43 = _So9NSDecimala__exponent_getter((char *)v65);
    v44 = v42;
    if (v43 <= 0)
    {
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v42;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      for (i = v18; _So9NSDecimala__exponent_getter((char *)v65); LODWORD(v65[1]) = HIDWORD(v63))
      {
        v46._countAndFlagsBits = 48;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        LODWORD(v65[0]) = i;
        WORD2(v65[0]) = v42;
        WORD3(v65[0]) = v20;
        WORD4(v65[0]) = v21;
        WORD5(v65[0]) = v22;
        WORD6(v65[0]) = v23;
        HIWORD(v65[0]) = v24;
        LOWORD(v65[1]) = v25;
        WORD1(v65[1]) = a1;
        v47 = _So9NSDecimala__exponent_getter((char *)v65);
        _So9NSDecimala__exponent_setter((v47 + 1), &v62);
        i = v62;
        v42 = v63;
        v20 = WORD1(v63);
        LOWORD(v21) = WORD2(v63);
        v22 = WORD3(v63);
        v23 = WORD4(v63);
        LOWORD(v24) = WORD5(v63);
        LOWORD(v25) = WORD6(v63);
        LOWORD(a1) = HIWORD(v63);
        *(_QWORD *)&v65[0] = __PAIR64__(v63, v62);
        *((_QWORD *)&v65[0] + 1) = *(_QWORD *)((char *)&v63 + 4);
      }
      v48._object = v53;
      v48._countAndFlagsBits = v54;
      String.append(_:)(v48);
      v49._countAndFlagsBits = 48;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      LODWORD(v18) = i;
      v44 = v42;
    }
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v44;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (_So9NSDecimala__isNegative_getter(v65))
    {
      v50._countAndFlagsBits = 45;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
    }
    v65[0] = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    v41 = String.init<A>(_:)();
    swift_bridgeObjectRelease();
    return v41;
  }
  v28 = v19;
  while (1)
  {
    v60 = v28;
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (!_So9NSDecimala__exponent_getter((char *)v65))
    {
      v29._object = v10;
      v29._countAndFlagsBits = v54;
      String.append(_:)(v29);
    }
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v60;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    v30 = _So9NSDecimala__exponent_getter((char *)v65);
    _So9NSDecimala__exponent_setter((v30 + 1), &v62);
    v31 = v62;
    v20 = WORD1(v63);
    v23 = WORD5(v63);
    v59 = v63;
    v57 = WORD3(v63);
    v58 = WORD2(v63);
    v56 = WORD4(v63);
    v22 = HIWORD(v63);
    v55 = WORD6(v63);
    NSDecimal.asVariableLengthInteger()(v62 | ((unint64_t)(unsigned __int16)v63 << 32) | ((unint64_t)WORD1(v63) << 48), WORD2(v63) | ((unint64_t)WORD3(v63) << 16) | ((unint64_t)WORD4(v63) << 32) | ((unint64_t)WORD5(v63) << 48), WORD6(v63) | (HIWORD(v63) << 16));
    v18 = v32;
    v21 = *(_QWORD *)(v32 + 16);
    if (!v21)
    {
      v25 = 0;
      a1 = MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v36)
        goto LABEL_50;
LABEL_47:
      if (!*(_WORD *)(a1 + 2 * v36 + 30))
      {
        do
        {
          *(_QWORD *)(a1 + 16) = v36 - 1;
          if (v36 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(a1 + 28 + 2 * v36--));
      }
      goto LABEL_50;
    }
    v52 = v31;
    a1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v24 = a1 + 30;
    *(_QWORD *)(a1 + 16) = v21;
    bzero((void *)(a1 + 32), 2 * v21);
    v33 = *(unsigned __int16 *)(2 * v21 + v18 + 30);
    v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v24 + 2 * v21) = v34;
      v25 = v33 % 0xA;
      if (v21 == 1)
        break;
      v33 = *(unsigned __int16 *)(v18 + 28 + 2 * v21) | (v25 << 16);
      v34 = v33 / 0xA;
      v35 = v21 - 2;
      --v21;
      if (v35 >= *(_QWORD *)(a1 + 16))
      {
        __break(1u);
        goto LABEL_57;
      }
    }
    v31 = v52;
    v36 = *(_QWORD *)(a1 + 16);
    if (v36)
      goto LABEL_47;
LABEL_50:
    swift_bridgeObjectRelease();
    LODWORD(v65[0]) = v31;
    WORD2(v65[0]) = v59;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v58;
    WORD5(v65[0]) = v57;
    WORD6(v65[0]) = v56;
    HIWORD(v65[0]) = v23;
    LOWORD(v65[1]) = v55;
    WORD1(v65[1]) = v22;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)a1);
    if (v38)
      break;
    v18 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v18))
      goto LABEL_67;
    _So9NSDecimala__length_setter(v18, v65);
    v62 = v65[0];
    v63 = *(_OWORD *)((char *)v65 + 4);
    *(_QWORD *)&v65[0] = v25 | 0x30;
    v39._countAndFlagsBits = MEMORY[0x186DA46D0](v65, 1);
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    LODWORD(v18) = v62;
    v61 = v63;
    v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    v22 = WORD3(v63);
    v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
    *(_QWORD *)&v65[0] = __PAIR64__(v63, v62);
    *((_QWORD *)&v65[0] + 1) = *(_QWORD *)((char *)&v63 + 4);
    LODWORD(v65[1]) = HIDWORD(v63);
    v40 = _So9NSDecimala__length_getter(v65);
    v28 = v61;
    if (!v40)
      goto LABEL_58;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_67:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _NSStringToDecimal(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v12[40];
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  char v16;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((unint64_t)v5, v6, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v12);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)v13);
  if (v16 == 1)
  {
    *a2 = 0;
  }
  else
  {
    v7 = v13[0];
    v8 = HIWORD(v13[0]);
    v9 = HIDWORD(v13[0]);
    v10 = v14;
    *a2 = v15;
    *(_DWORD *)a3 = v7;
    *(_WORD *)(a3 + 4) = v9;
    *(_WORD *)(a3 + 6) = v8;
    *(_QWORD *)(a3 + 8) = v13[1];
    *(_DWORD *)(a3 + 16) = v10;
  }
  return swift_bridgeObjectRelease();
}

unint64_t specialized static NSDecimal._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    objc_msgSend(a1, sel_decimalValue);
  }
  else
  {
    v3 = 0;
    v4 = 0;
    _So9NSDecimala__exponent_setter(0, &v2);
    _So9NSDecimala__length_setter(0, &v2);
    _So9NSDecimala__isNegative_setter(0, &v2);
    _So9NSDecimala__isCompact_setter(&v2);
    _So9NSDecimala__reserved_setter(&v2);
  }
  return v2 | ((unint64_t)(unsigned __int16)v3 << 32) | ((unint64_t)WORD1(v3) << 48);
}

uint64_t specialized __NSDecimalDivide(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  *(_QWORD *)a1 = specialized NSDecimal._divide(by:roundingMode:)(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0;
}

uint64_t specialized __NSDecimalMultiplyByPowerOf10(_:_:_:_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  *(_QWORD *)a1 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(a3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return 0;
}

uint64_t specialized __NSDecimalNormalize(_:_:_:)(uint64_t a1, int *a2)
{
  char v4;
  int v6;
  __int128 v7;
  int v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = *(_DWORD *)a1;
  *(_OWORD *)&v8[1] = *(_OWORD *)(a1 + 4);
  v6 = *a2;
  v7 = *(_OWORD *)(a2 + 1);
  v4 = specialized static NSDecimal._normalize(a:b:roundingMode:)(v8, (uint64_t)&v6);
  *(_DWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 4) = *(_OWORD *)&v8[1];
  *a2 = v6;
  *(_OWORD *)(a2 + 1) = v7;
  return v4 & 1;
}

uint64_t one-time initialization function for processInfo()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for _ProcessInfo();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_ProcessInfo.State>._Buffer);
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<String?>._Buffer);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(v0 + 24) = result;
  static _ProcessInfo.processInfo = v0;
  return result;
}

unint64_t closure #1 in _ProcessInfo.arguments.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    *a2 = v4;
    return swift_bridgeObjectRetain();
  }
  v5 = static CommandLine.arguments.getter();
  if (!_CFProcessPath())
  {
LABEL_28:
    *(_QWORD *)(a1 + 16) = v5;
    *a2 = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v6 = String.init(cString:)();
  v8 = v7;
  swift_bridgeObjectRetain();
  v9 = specialized Collection.first.getter(v6, v8);
  if (!v10)
    goto LABEL_11;
  if (v9 != 126 || v10 != 0xE100000000000000)
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_9;
LABEL_11:
    v15 = v8;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  v12 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v6, v8);
  if ((v13 & 1) != 0)
  {
    v16 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v16 = v6;
    v17 = v16 << 16;
    if ((v8 & 0x1000000000000000) == 0 || (v6 & 0x800000000000000) != 0)
      v14 = v17 | 7;
    else
      v14 = v17 | 0xB;
  }
  else
  {
    v14 = v12;
  }
  result = String.index(after:)();
  if (v14 >> 14 == result >> 14)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    if (v14 >> 14 < result >> 14)
      goto LABEL_32;
    v21 = String.subscript.getter();
    v19 = MEMORY[0x186DA4634](v21);
    v20 = v22;
    swift_bridgeObjectRelease();
  }
  v28 = static String.homeDirectoryPath(forUser:)(v19, v20);
  v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.suffix(from:)(v14, v6, v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v28;
  v15 = v24;
LABEL_23:
  v25 = String._standardizingPath.getter(v6, v15);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_18205C850;
    *(_QWORD *)(v5 + 32) = v25;
    *(_QWORD *)(v5 + 40) = v27;
    goto LABEL_28;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_26:
      *(_QWORD *)(v5 + 32) = v25;
      *(_QWORD *)(v5 + 40) = v27;
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  else
  {
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v5);
    v5 = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_26;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t closure #1 in _ProcessInfo.processName.getter@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t Process;
  unint64_t v6;
  unint64_t v7;

  v4 = a1[1];
  if (v4)
  {
    Process = *a1;
    v6 = v4;
  }
  else
  {
    Process = specialized static _ProcessInfo._getProcessName()();
    v6 = v7;
    *a1 = Process;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  *a2 = Process;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in _ProcessInfo.processName.setter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t _ProcessInfo.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _ProcessInfo()
{
  return objc_opt_self();
}

_QWORD *assignWithCopy for _ProcessInfo.State(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ProcessInfo.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ProcessInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ProcessInfo.State()
{
  return &type metadata for _ProcessInfo.State;
}

id closure #1 in _ProcessInfo.hostName.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[1];
  if (v4)
  {
    *a2 = *a1;
    a2[1] = v4;
    return (id)swift_bridgeObjectRetain();
  }
  result = (id)_getCurrentNSHostName();
  if (result)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    *a1 = v7;
    a1[1] = v9;
    *a2 = v7;
    a2[1] = v9;
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t specialized _ProcessInfo.environment.getter()
{
  char **environ;
  char **v1;
  const char *v2;
  const char **v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  void *v70;
  uint64_t result;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  _platform_shims_lock_environ();
  environ = _platform_shims_get_environ();
  if (!environ)
  {
    _platform_shims_unlock_environ();
    return MEMORY[0x1E0DEE9E0];
  }
  v1 = environ;
  v2 = *environ;
  if (v2)
  {
    v3 = (const char **)(v1 + 1);
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v5 = strdup(v2);
      if (!v5)
        goto LABEL_78;
      v6 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v8 = v4[2];
      v7 = v4[3];
      if (v8 >= v7 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v4);
      v4[2] = v8 + 1;
      v4[v8 + 4] = v6;
      v9 = *v3++;
      v2 = v9;
    }
    while (v9);
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  _platform_shims_unlock_environ();
  v11 = v4[2];
  if (!v11)
  {
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x1E0DEE9E0];
LABEL_69:
    swift_bridgeObjectRelease();
    v68 = v4[2];
    if (v68)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v68; ++i)
      {
        v70 = (void *)v4[i + 4];
        free(v70);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v10;
  }
  swift_bridgeObjectRetain_n();
  v12 = 0;
  v10 = MEMORY[0x1E0DEE9E0];
  v76 = v11;
  while (v12 < v4[2])
  {
    v13 = String.init(cString:)();
    v15 = v14;
    specialized Collection<>.firstIndex(of:)(61, 0xE100000000000000, v13, v14);
    if ((v16 & 1) == 0)
    {
      v78 = v10;
      v17 = String.subscript.getter();
      v18 = MEMORY[0x186DA4634](v17);
      v20 = v19;
      swift_bridgeObjectRelease();
      v21 = String.index(after:)();
      v22 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v22 = v13 & 0xFFFFFFFFFFFFLL;
      if (4 * v22 < v21 >> 14)
        goto LABEL_76;
      v23 = String.subscript.getter();
      v25 = v24;
      v27 = v26;
      v29 = v28;
      swift_bridgeObjectRelease();
      v30 = MEMORY[0x186DA4634](v23, v25, v27, v29);
      v77 = v31;
      swift_bridgeObjectRelease();
      v32 = v78;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v18;
      v35 = v18;
      v36 = v78;
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v20);
      v39 = *(_QWORD *)(v78 + 16);
      v40 = (v37 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
        goto LABEL_77;
      v42 = v37;
      if (*(_QWORD *)(v78 + 24) >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v37 & 1) == 0)
            goto LABEL_65;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
          v46 = static _DictionaryStorage.copy(original:)();
          v32 = v46;
          if (*(_QWORD *)(v78 + 16))
          {
            v47 = (char *)(v46 + 64);
            v48 = (char *)(v78 + 64);
            v49 = (unint64_t)((1 << *(_BYTE *)(v32 + 32)) + 63) >> 6;
            v72 = v78 + 64;
            if (v32 != v78 || v47 >= &v48[8 * v49])
              memmove(v47, v48, 8 * v49);
            v50 = 0;
            *(_QWORD *)(v32 + 16) = *(_QWORD *)(v78 + 16);
            v51 = 1 << *(_BYTE *)(v78 + 32);
            if (v51 < 64)
              v52 = ~(-1 << v51);
            else
              v52 = -1;
            v53 = v52 & *(_QWORD *)(v78 + 64);
            v73 = (unint64_t)(v51 + 63) >> 6;
            while (1)
            {
              if (v53)
              {
                v74 = (v53 - 1) & v53;
                v75 = v50;
                v54 = __clz(__rbit64(v53)) | (v50 << 6);
              }
              else
              {
                v64 = v50 + 1;
                if (__OFADD__(v50, 1))
                  goto LABEL_79;
                if (v64 >= v73)
                  break;
                v65 = *(_QWORD *)(v72 + 8 * v64);
                v66 = v50 + 1;
                if (!v65)
                {
                  v66 = v50 + 2;
                  if (v50 + 2 >= v73)
                    break;
                  v65 = *(_QWORD *)(v72 + 8 * v66);
                  if (!v65)
                  {
                    v66 = v50 + 3;
                    if (v50 + 3 >= v73)
                      break;
                    v65 = *(_QWORD *)(v72 + 8 * v66);
                    if (!v65)
                    {
                      v66 = v50 + 4;
                      if (v50 + 4 >= v73)
                        break;
                      v65 = *(_QWORD *)(v72 + 8 * v66);
                      if (!v65)
                      {
                        v66 = v50 + 5;
                        if (v50 + 5 >= v73)
                          break;
                        v65 = *(_QWORD *)(v72 + 8 * v66);
                        if (!v65)
                        {
                          v66 = v50 + 6;
                          if (v50 + 6 >= v73)
                            break;
                          v65 = *(_QWORD *)(v72 + 8 * v66);
                          if (!v65)
                          {
                            v66 = v50 + 7;
                            if (v50 + 7 >= v73)
                              break;
                            v65 = *(_QWORD *)(v72 + 8 * v66);
                            if (!v65)
                            {
                              v67 = v50 + 8;
                              if (v50 + 8 >= v73)
                                break;
                              v65 = *(_QWORD *)(v72 + 8 * v67);
                              if (!v65)
                              {
                                v36 = v78;
                                while (1)
                                {
                                  v66 = v67 + 1;
                                  if (__OFADD__(v67, 1))
                                    goto LABEL_80;
                                  if (v66 >= v73)
                                    goto LABEL_64;
                                  v65 = *(_QWORD *)(v72 + 8 * v66);
                                  ++v67;
                                  if (v65)
                                    goto LABEL_63;
                                }
                              }
                              v66 = v50 + 8;
                              v36 = v78;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_63:
                v74 = (v65 - 1) & v65;
                v75 = v66;
                v54 = __clz(__rbit64(v65)) + (v66 << 6);
              }
              v55 = 16 * v54;
              v56 = (uint64_t *)(*(_QWORD *)(v36 + 48) + v55);
              v58 = *v56;
              v57 = v56[1];
              v59 = (uint64_t *)(*(_QWORD *)(v36 + 56) + v55);
              v60 = *v59;
              v61 = v59[1];
              v62 = (_QWORD *)(*(_QWORD *)(v32 + 48) + v55);
              *v62 = v58;
              v62[1] = v57;
              v63 = (_QWORD *)(*(_QWORD *)(v32 + 56) + v55);
              *v63 = v60;
              v63[1] = v61;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v53 = v74;
              v50 = v75;
            }
          }
LABEL_64:
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0)
            goto LABEL_65;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
        v32 = v78;
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v20);
        if ((v42 & 1) != (v44 & 1))
          goto LABEL_81;
        v38 = v43;
        if ((v42 & 1) == 0)
        {
LABEL_65:
          specialized _NativeDictionary._insert(at:key:value:)(v38, v34, v20, v30, v77, (_QWORD *)v32);
          swift_bridgeObjectRetain();
          goto LABEL_66;
        }
      }
      v45 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v38);
      swift_bridgeObjectRelease();
      *v45 = v30;
      v45[1] = v77;
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v32;
      v11 = v76;
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
LABEL_16:
    if (++v12 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized static _ProcessInfo._getProcessName()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD v15[2];

  v0 = (_QWORD *)static CommandLine.arguments.getter();
  if (!v0[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = v0[4];
  v1 = v0[5];
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRelease();
  v15[0] = 47;
  v15[1] = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v3);
  v14[2] = v15;
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v14, v2, v1);
  if ((v4 & 1) != 0)
    return v2;
  result = String.index(after:)();
  v6 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v6 = v2 & 0xFFFFFFFFFFFFLL;
  if (4 * v6 >= result >> 14)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x186DA4634](v7, v9, v11, v13);
    swift_bridgeObjectRelease();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ProcessInfo.processorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x300000006));
}

uint64_t specialized _ProcessInfo.activeProcessorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x1900000006));
}

uint64_t specialized _ProcessInfo.processorCount.getter(double a1)
{
  uint64_t inited;
  int v3;
  int v4;
  size_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205F0D0;
  *(double *)(inited + 32) = a1;
  v6 = 4;
  v3 = sysctl((int *)(inited + 32), 2u, &v7, &v6, 0, 0);
  swift_bridgeObjectRelease();
  v4 = v7;
  if (v3)
    return 0;
  return v4;
}

uint64_t ICUNumberFormatterBase.__deallocating_deinit()
{
  unumf_close();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUNumberFormatterBase()
{
  return objc_opt_self();
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v16;
  _QWORD v17[2];
  int v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = unumf_openResult();
  if (!v8)
LABEL_14:
    __break(1u);
  *(_QWORD *)(v4 + 16) = v8;
  v17[0] = a2;
  v17[1] = a3;
  v18 = a4;
  memset(v19, 0, sizeof(v19));
  v9 = __NSDecimalString(_:_:)((uint64_t)v17, (uint64_t)v19);
  v11 = v10;
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Any?);
  if ((v11 & 0x1000000000000000) != 0)
  {
    v9 = static String._copying(_:)();
    v14 = v13;
    swift_bridgeObjectRelease();
    v11 = v14;
    if ((v14 & 0x2000000000000000) == 0)
    {
LABEL_4:
      if ((v9 & 0x1000000000000000) != 0)
      {
        v12 = v9 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        _StringObject.sharedUTF8.getter();
        if (v16 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        v12 = v16;
      }
      if (v12 <= 0x7FFFFFFF)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
  else if ((v11 & 0x2000000000000000) == 0)
  {
    goto LABEL_4;
  }
  *(_QWORD *)&v19[0] = v9;
  *((_QWORD *)&v19[0] + 1) = v11 & 0xFFFFFFFFFFFFFFLL;
LABEL_10:
  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  v6 = unumf_openResult();
  if (!v6)
LABEL_13:
    __break(1u);
  *(_QWORD *)(v3 + 16) = v6;
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 0x2000000000000000) == 0)
    {
LABEL_4:
      if ((a2 & 0x1000000000000000) != 0)
      {
        v7 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        _StringObject.sharedUTF8.getter();
        if (v11 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
        v7 = v11;
      }
      if (v7 <= 0x7FFFFFFF)
        goto LABEL_9;
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x2000000000000000) == 0)
  {
    goto LABEL_4;
  }
LABEL_9:
  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUNumberFormatter.Signature(uint64_t a1)
{
  ICUNumberFormatter.Signature.hash(into:)(a1, type metadata accessor for ICUNumberFormatter.Signature);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(a1, a2, type metadata accessor for ICUNumberFormatter.Signature);
}

void ICUCurrencyNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  _BYTE v59[144];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  _BYTE v78[144];
  _BYTE v79[144];
  _BYTE v80[72];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(unsigned int *)(v1 + 74);
  if (*(_DWORD *)(v1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  v17 = *(unsigned __int8 *)(v1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v1 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = v1 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = v22;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v19[11]));
  v24 = *(unsigned __int8 *)(v1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(v25 + 28), (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    v26 = 0;
  }
  else
  {
    v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    v32 = &v60;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v27 + 16));
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v30 = v64;
    if (!v64)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v30);
    swift_bridgeObjectRelease();
    v31 = v65;
    if (!v65)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v30 = v64;
  if (v64)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  v34 = v66;
  v33 = v67;
  v36 = v68;
  v35 = v69;
  v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v33;
    v39 = v36;
    v40 = v35;
    v41 = v37;
    v42 = v34;
    _CFObject.hash(into:)();
    if (v33)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v47 = v37;
    v48 = v33;
    v49 = v36;
    v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v43 = v33;
      _CFObject.hash(into:)();

      if (v36)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v36;
    _CFObject.hash(into:)();

    if (v35)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v35)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v46 = 0;
LABEL_62:

  v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
    v52 = v72;
    if (v72)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v52 = v72;
  if (!v72)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v73)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    v55 = 0;
  }
  else
  {
    v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    v56 = 0;
  }
  else
  {
    v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUCurrencyNumberFormatter.Signature.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  int v11;
  Swift::UInt v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  Swift::UInt v16;
  int *v17;
  uint64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::UInt64 v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  _BYTE v58[144];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE v77[144];
  _BYTE v78[144];
  _BYTE v79[72];
  _BYTE v80[64];

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v9;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
  }
  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v11 = *(unsigned __int8 *)(v0 + 73);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = v11 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  v13 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v13) & 1);
    v14 = BYTE3(v13) & 1;
  }
  Hasher._combine(_:)(v14);
  v15 = *(unsigned __int8 *)(v0 + 78);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = v15 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v0 + v17[9], (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  v18 = v0 + v17[10];
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v21 = v20;
      else
        v21 = 0;
      Hasher._combine(_:)(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v17[11]));
  v22 = *(unsigned __int8 *)(v0 + v17[12]);
  if (v22 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
  }
  v23 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + *(int *)(v23 + 28), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    v24 = 0;
  }
  else
  {
    v24 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v24);
  v25 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v59);
    v30 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v25 + 16));
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v30 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v30);
    if (!v61)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v28 = v63;
    if (!v63)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v28);
    swift_bridgeObjectRelease();
    v29 = v64;
    if (!v64)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v28 = v63;
  if (v63)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v29 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
  swift_bridgeObjectRelease();
LABEL_51:
  v32 = v65;
  v31 = v66;
  v34 = v67;
  v33 = v68;
  v35 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v36 = v31;
    v37 = v34;
    v38 = v33;
    v39 = v35;
    v40 = v32;
    _CFObject.hash(into:)();
    if (v31)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v45 = v35;
    v46 = v31;
    v47 = v34;
    v48 = v33;
    if (v31)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v41 = v31;
      _CFObject.hash(into:)();

      if (v34)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v42 = v34;
    _CFObject.hash(into:)();

    if (v33)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v35)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v33)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v44 = 0;
LABEL_62:

  v49 = v70;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v49);
    swift_bridgeObjectRelease();
    v50 = v71;
    if (v71)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v50 = v71;
  if (!v71)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
  swift_bridgeObjectRelease();
  if (!v72)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v75 == 2)
  {
    v53 = 0;
  }
  else
  {
    v53 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v53);
  if (v76 == 2)
  {
    v54 = 0;
  }
  else
  {
    v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    v54 = v55;
  }
  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  _BYTE v58[144];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE v77[144];
  _BYTE v78[144];
  _BYTE v79[72];
  _BYTE v80[72];

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(unsigned int *)(v2 + 74);
  if (*(_DWORD *)(v2 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  v17 = *(unsigned __int8 *)(v2 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = v2 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = v22;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v19[11]));
  v24 = *(unsigned __int8 *)(v2 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(a2 + 28), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    v25 = 0;
  }
  else
  {
    v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    v31 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v29 = v63;
    if (!v63)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    v30 = v64;
    if (!v64)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v63;
  if (v63)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  v33 = v65;
  v32 = v66;
  v35 = v67;
  v34 = v68;
  v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v37 = v32;
    v38 = v35;
    v39 = v34;
    v40 = v36;
    v41 = v33;
    _CFObject.hash(into:)();
    if (v32)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v46 = v36;
    v47 = v32;
    v48 = v35;
    v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v42 = v32;
      _CFObject.hash(into:)();

      if (v35)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v43 = v35;
    _CFObject.hash(into:)();

    if (v34)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v34)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v45 = 0;
LABEL_62:

  v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    v51 = v71;
    if (v71)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v51 = v71;
  if (!v71)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    v54 = 0;
  }
  else
  {
    v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    v55 = 0;
  }
  else
  {
    v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    v55 = v56;
  }
  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t static ICUCurrencyNumberFormatter.create<A>(for:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return static ICUCurrencyNumberFormatter.create<A>(for:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, __n128))type metadata accessor for IntegerFormatStyle.Currency);
}

{
  return static ICUCurrencyNumberFormatter.create<A>(for:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, __n128))type metadata accessor for FloatingPointFormatStyle.Currency);
}

uint64_t static ICUCurrencyNumberFormatter.create<A>(for:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, __n128))
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_unfair_lock_s *v78;
  char *v79;
  _QWORD v80[19];
  _QWORD *v81;
  _QWORD v82[18];
  _BYTE v83[152];

  v8 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v75 = *((_QWORD *)v8 - 1);
  MEMORY[0x1E0C80A78](v8);
  v76 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v69 - v12;
  v78 = (os_unfair_lock_s *)((char *)a1 + *(int *)(a4(0, a2, a3, v11) + 40));
  v14 = a1[3];
  v79 = (char *)a1[2];
  v15 = a1[1];
  ObjectType = swift_getObjectType();
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v18 = v17(ObjectType, v15);
  v20 = v19;
  swift_unknownObjectRelease();
  v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 464);
  swift_unknownObjectRetain();
  v21(v82, ObjectType, v15);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v78, (uint64_t)v13, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v22 = &v13[v8[5]];
  *(_QWORD *)v22 = v79;
  *((_QWORD *)v22 + 1) = v14;
  v23 = (uint64_t *)&v13[v8[6]];
  *v23 = v18;
  v23[1] = v20;
  v74 = v8;
  v24 = (uint64_t)&v13[v8[7]];
  outlined init with take of LocalePreferences?((uint64_t)v83, v24, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v26 = static ICUCurrencyNumberFormatter.cache;
  v25 = *(_QWORD *)algn_1EDC41C48;
  v27 = *(_QWORD *)algn_1EDC41C48 + 16;
  v28 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC41C48 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v28);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v27, (uint64_t)v13, (uint64_t *)&v81);
  os_unfair_lock_unlock(v28);
  swift_release();
  v29 = v81;
  if (v81 != (_QWORD *)1)
    goto LABEL_53;
  v79 = v13;
  v30 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)((uint64_t)v13);
  v31 = v26;
  v33 = v32;
  v78 = v28;
  v35 = *v23;
  v34 = v23[1];
  outlined init with take of LocalePreferences?(v24, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  v36 = v34;
  v37 = v78;
  v29 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v30, v33, v35, v36, (uint64_t)v80);
  swift_retain();
  os_unfair_lock_lock(v37);
  v38 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 16);
  v77 = *(_QWORD *)(v25 + 16);
  if (v31 >= v38)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v27 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v80[0] = *(_QWORD *)v27;
  v40 = v80[0];
  *(_QWORD *)v27 = 0x8000000000000000;
  v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v79);
  v43 = *(_QWORD *)(v40 + 16);
  v44 = (v41 & 1) == 0;
  v45 = v43 + v44;
  if (__OFADD__(v43, v44))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v27) = v41;
    if (*(_QWORD *)(v40 + 24) < v45)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
      v13 = v79;
      v46 = v80[0];
      v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v79);
      if ((v27 & 1) != (v48 & 1))
        goto LABEL_56;
      v42 = v47;
      if ((v27 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v49 = *(_QWORD *)(v46 + 56);
      swift_release();
      *(_QWORD *)(v49 + 8 * v42) = v29;
LABEL_52:
      *(_QWORD *)(v25 + 16) = v46;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v37);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v81);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v13, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v29;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v46 = v40;
      v13 = v79;
      if ((v41 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      v67 = v76;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v13, v76, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v42, v67, (uint64_t)v29, (_QWORD *)v46);
      goto LABEL_52;
    }
  }
  v70 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v50 = static _DictionaryStorage.copy(original:)();
  v46 = v50;
  if (!*(_QWORD *)(v40 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v13 = v79;
    v42 = v70;
    if ((v27 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v51 = (char *)(v50 + 64);
  v52 = 1 << *(_BYTE *)(v46 + 32);
  v72 = (char *)(v40 + 64);
  v53 = (unint64_t)(v52 + 63) >> 6;
  if (v46 != v40 || v51 >= &v72[8 * v53])
    memmove(v51, v72, 8 * v53);
  v54 = 0;
  *(_QWORD *)(v46 + 16) = *(_QWORD *)(v40 + 16);
  v55 = 1 << *(_BYTE *)(v40 + 32);
  v56 = -1;
  if (v55 < 64)
    v56 = ~(-1 << v55);
  v57 = v56 & *(_QWORD *)(v40 + 64);
  v71 = (unint64_t)(v55 + 63) >> 6;
  while (1)
  {
    v37 = v78;
    if (v57)
    {
      v73 = (v57 - 1) & v57;
      v74 = v54;
      v58 = __clz(__rbit64(v57)) | ((_QWORD)v54 << 6);
      goto LABEL_24;
    }
    v63 = (int64_t)v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v63 >= v71)
      goto LABEL_50;
    v64 = *(_QWORD *)&v72[8 * v63];
    v65 = (int64_t)v54 + 1;
    if (!v64)
    {
      v65 = v63 + 1;
      if (v63 + 1 >= v71)
        goto LABEL_50;
      v64 = *(_QWORD *)&v72[8 * v65];
      if (!v64)
      {
        v65 = v63 + 2;
        if (v63 + 2 >= v71)
          goto LABEL_50;
        v64 = *(_QWORD *)&v72[8 * v65];
        if (!v64)
        {
          v65 = v63 + 3;
          if (v63 + 3 >= v71)
            goto LABEL_50;
          v64 = *(_QWORD *)&v72[8 * v65];
          if (!v64)
          {
            v65 = v63 + 4;
            if (v63 + 4 >= v71)
              goto LABEL_50;
            v64 = *(_QWORD *)&v72[8 * v65];
            if (!v64)
            {
              v65 = v63 + 5;
              if (v63 + 5 >= v71)
                goto LABEL_50;
              v64 = *(_QWORD *)&v72[8 * v65];
              if (!v64)
              {
                v65 = v63 + 6;
                if (v63 + 6 >= v71)
                  goto LABEL_50;
                v64 = *(_QWORD *)&v72[8 * v65];
                if (!v64)
                {
                  v65 = v63 + 7;
                  if (v63 + 7 >= v71)
                    goto LABEL_50;
                  v64 = *(_QWORD *)&v72[8 * v65];
                  if (!v64)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v73 = (v64 - 1) & v64;
    v74 = (int *)v65;
    v58 = __clz(__rbit64(v64)) + (v65 << 6);
LABEL_24:
    v59 = v76;
    v60 = *(_QWORD *)(v75 + 72) * v58;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v40 + 48) + v60, v76, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v61 = 8 * v58;
    v62 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v58);
    outlined init with take of ICUNumberFormatter.Signature(v59, *(_QWORD *)(v46 + 48) + v60, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v46 + 56) + v61) = v62;
    swift_retain();
    v57 = v73;
    v54 = v74;
  }
  v66 = v63 + 8;
  if (v66 >= v71)
    goto LABEL_50;
  v64 = *(_QWORD *)&v72[8 * v66];
  if (v64)
  {
    v65 = v66;
    goto LABEL_49;
  }
  while (1)
  {
    v65 = v66 + 1;
    if (__OFADD__(v66, 1))
      break;
    v37 = v78;
    if (v65 >= v71)
      goto LABEL_50;
    v64 = *(_QWORD *)&v72[8 * v65];
    ++v66;
    if (v64)
      goto LABEL_49;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICUCurrencyNumberFormatter()
{
  return objc_opt_self();
}

void ICUNumberFormatter.Signature.hash(into:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  int v14;
  Swift::UInt v15;
  int v16;
  unsigned int v17;
  int v18;
  Swift::UInt v19;
  int *v20;
  uint64_t v21;
  int v22;
  Swift::UInt v23;
  Swift::UInt64 v24;
  Swift::UInt v25;
  uint64_t v26;
  Swift::UInt8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t (*v59)(_QWORD);
  _BYTE v60[144];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  _BYTE v79[144];
  _BYTE v80[144];
  _BYTE v81[72];

  v59 = a2;
  v3 = v2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v13 = v12;
    else
      v13 = 0;
    Hasher._combine(_:)(v13);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v81, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v14 = *(unsigned __int8 *)(v2 + 73);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = *(unsigned __int16 *)(v2 + 74);
  v17 = v16 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17 & 1);
    Hasher._combine(_:)((v17 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v17) & 1);
  }
  v18 = *(unsigned __int8 *)(v2 + 77);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = v18 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }
  v20 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v20[9], (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
  v21 = v2 + v20[10];
  v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = *(_QWORD *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v24 = v23;
      else
        v24 = 0;
      Hasher._combine(_:)(v24);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v23);
    }
  }
  v25 = *(unsigned __int8 *)(v2 + v20[11]);
  if (v25 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
  }
  v26 = v59(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v3 + *(int *)(v26 + 24), (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v61, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v61 == 2)
  {
    v27 = 0;
  }
  else
  {
    v27 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v27);
  v28 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v61);
    v33 = &v61;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v28 + 16));
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v33 = (uint64_t *)v60;
LABEL_46:
    outlined retain of LocalePreferences(v33);
    if (!v63)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v30 = v28 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 += 16;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v64)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v31 = v65;
    if (!v65)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v31);
    swift_bridgeObjectRelease();
    v32 = v66;
    if (!v66)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v31 = v65;
  if (v65)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v32 = v66;
  if (!v66)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v32);
  swift_bridgeObjectRelease();
LABEL_51:
  v35 = v67;
  v34 = v68;
  v37 = v69;
  v36 = v70;
  v38 = v71;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v39 = v34;
    v40 = v37;
    v41 = v36;
    v42 = v38;
    v43 = v35;
    _CFObject.hash(into:)();
    if (v34)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v48 = v38;
    v49 = v34;
    v50 = v37;
    v51 = v36;
    if (v34)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v44 = v34;
      _CFObject.hash(into:)();

      if (v37)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v37)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v37;
    _CFObject.hash(into:)();

    if (v36)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v38)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v36)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v46 = v36;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v47 = v38;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v47 = 0;
LABEL_62:

  v52 = v72;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v52);
    swift_bridgeObjectRelease();
    v53 = v73;
    if (v73)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v74)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v53 = v73;
  if (!v73)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v53);
  swift_bridgeObjectRelease();
  if (!v74)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v55 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }
  if (v77 == 2)
  {
    v56 = 0;
  }
  else
  {
    v56 = v77 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v56);
  if (v78 == 2)
  {
    v57 = 0;
  }
  else
  {
    v58 = v78 & 1;
    Hasher._combine(_:)(1u);
    v57 = v58;
  }
  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUNumberFormatter.Signature.hashValue.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  int v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  _BYTE v59[144];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  _BYTE v78[144];
  _BYTE v79[144];
  _BYTE v80[72];
  _BYTE v81[72];

  v3 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v81, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(unsigned __int16 *)(v1 + 74);
  v16 = v15 | (*(unsigned __int8 *)(v1 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }
  v17 = *(unsigned __int8 *)(v1 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v1 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = v1 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = v22;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  v24 = *(unsigned __int8 *)(v1 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  v25 = a1(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v3 + *(int *)(v25 + 24), (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    v26 = 0;
  }
  else
  {
    v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    v32 = &v60;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v27 + 16));
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v30 = v64;
    if (!v64)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v30);
    swift_bridgeObjectRelease();
    v31 = v65;
    if (!v65)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v30 = v64;
  if (v64)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v31);
  swift_bridgeObjectRelease();
LABEL_51:
  v34 = v66;
  v33 = v67;
  v36 = v68;
  v35 = v69;
  v37 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v33;
    v39 = v36;
    v40 = v35;
    v41 = v37;
    v42 = v34;
    _CFObject.hash(into:)();
    if (v33)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v47 = v37;
    v48 = v33;
    v49 = v36;
    v50 = v35;
    if (v33)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v43 = v33;
      _CFObject.hash(into:)();

      if (v36)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v36;
    _CFObject.hash(into:)();

    if (v35)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v37)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v35)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v46 = 0;
LABEL_62:

  v51 = v71;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v51);
    swift_bridgeObjectRelease();
    v52 = v72;
    if (v72)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v73)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v52 = v72;
  if (!v72)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v52);
  swift_bridgeObjectRelease();
  if (!v73)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v76 == 2)
  {
    v55 = 0;
  }
  else
  {
    v55 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v77 == 2)
  {
    v56 = 0;
  }
  else
  {
    v57 = v77 & 1;
    Hasher._combine(_:)(1u);
    v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPercentNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUPercentNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUPercentNumberFormatter.Signature(uint64_t a1)
{
  ICUNumberFormatter.Signature.hash(into:)(a1, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  int v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  _BYTE v58[144];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE v77[144];
  _BYTE v78[144];
  _BYTE v79[72];
  _BYTE v80[72];

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(v2 + 16, (uint64_t)v80, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(unsigned __int16 *)(v2 + 74);
  v16 = v15 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }
  v17 = *(unsigned __int8 *)(v2 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v2 + v19[9], (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = v2 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = v22;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  v24 = *(unsigned __int8 *)(v2 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v2 + *(int *)(a2 + 24), (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v59, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    v25 = 0;
  }
  else
  {
    v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    v31 = &v59;
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
    v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61)
      goto LABEL_40;
    goto LABEL_47;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62)
      goto LABEL_41;
    goto LABEL_48;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_41:
    Hasher._combine(_:)(0);
    v29 = v63;
    if (!v63)
      goto LABEL_42;
LABEL_49:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v29);
    swift_bridgeObjectRelease();
    v30 = v64;
    if (!v64)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v63;
  if (v63)
    goto LABEL_49;
LABEL_42:
  Hasher._combine(_:)(0);
  v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v30);
  swift_bridgeObjectRelease();
LABEL_51:
  v33 = v65;
  v32 = v66;
  v35 = v67;
  v34 = v68;
  v36 = v69;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v37 = v32;
    v38 = v35;
    v39 = v34;
    v40 = v36;
    v41 = v33;
    _CFObject.hash(into:)();
    if (v32)
      goto LABEL_53;
  }
  else
  {
    Hasher._combine(_:)(0);
    v46 = v36;
    v47 = v32;
    v48 = v35;
    v49 = v34;
    if (v32)
    {
LABEL_53:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v42 = v32;
      _CFObject.hash(into:)();

      if (v35)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_54:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v43 = v35;
    _CFObject.hash(into:)();

    if (v34)
      goto LABEL_55;
LABEL_60:
    Hasher._combine(_:)(0);
    if (v36)
      goto LABEL_56;
    goto LABEL_61;
  }
LABEL_59:
  Hasher._combine(_:)(0);
  if (!v34)
    goto LABEL_60;
LABEL_55:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_56:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_62;
  }
LABEL_61:
  Hasher._combine(_:)(0);
  v45 = 0;
LABEL_62:

  v50 = v70;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v79, v50);
    swift_bridgeObjectRelease();
    v51 = v71;
    if (v71)
      goto LABEL_64;
LABEL_67:
    Hasher._combine(_:)(0);
    if (v72)
      goto LABEL_65;
LABEL_68:
    Hasher._combine(_:)(0);
    goto LABEL_69;
  }
  Hasher._combine(_:)(0);
  v51 = v71;
  if (!v71)
    goto LABEL_67;
LABEL_64:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v79, v51);
  swift_bridgeObjectRelease();
  if (!v72)
    goto LABEL_68;
LABEL_65:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_69:
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v75 == 2)
  {
    v54 = 0;
  }
  else
  {
    v54 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  if (v76 == 2)
  {
    v55 = 0;
  }
  else
  {
    v56 = v76 & 1;
    Hasher._combine(_:)(1u);
    v55 = v56;
  }
  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPercentNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(a1, a2, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

uint64_t static ICUPercentNumberFormatter._create(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  v50 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v51 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static ICUPercentNumberFormatter.cache;
  v4 = *(_QWORD *)algn_1EDC3B488;
  v6 = *(_QWORD *)algn_1EDC3B488 + 16;
  v7 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC3B488 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  v8 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v6, a1);
  os_unfair_lock_unlock(v7);
  swift_release();
  if (v8 != 1)
    goto LABEL_17;
  closure #1 in static ICUPercentNumberFormatter._create(with:)(a1, &v53);
  swift_retain();
  os_unfair_lock_lock(v7);
  v9 = *(_QWORD *)(v4 + 16);
  if (v5 >= *(_QWORD *)(v9 + 16))
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v6 = MEMORY[0x1E0DEE9E0];
  v8 = v53;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52 = *(_QWORD *)v6;
  v11 = v52;
  *(_QWORD *)v6 = 0x8000000000000000;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v6) = v12;
    if (*(_QWORD *)(v11 + 24) < v16)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v17 = v52;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v6 & 1) != (v19 & 1))
        goto LABEL_54;
      v13 = v18;
      goto LABEL_13;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v17 = v11;
LABEL_13:
      if ((v6 & 1) != 0)
      {
        v20 = *(_QWORD *)(v17 + 56);
        v21 = 8 * v13;
        swift_release();
        *(_QWORD *)(v20 + v21) = v8;
      }
      else
      {
        v22 = a1;
        v23 = v51;
        v24 = v13;
        outlined init with copy of ICUNumberFormatter.Signature(v22, v51, type metadata accessor for ICUPercentNumberFormatter.Signature);
        specialized _NativeDictionary._insert(at:key:value:)(v24, v23, v8, (_QWORD *)v17);
      }
      *(_QWORD *)(v4 + 16) = v17;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v7);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_17:
      swift_release();
      return v8;
    }
  }
  v44 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  v26 = static _DictionaryStorage.copy(original:)();
  v17 = v26;
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v13 = v44;
    goto LABEL_13;
  }
  v43 = v9;
  v27 = (char *)(v26 + 64);
  v28 = 1 << *(_BYTE *)(v17 + 32);
  v46 = (char *)(v11 + 64);
  v29 = (unint64_t)(v28 + 63) >> 6;
  if (v17 != v11 || v27 >= &v46[8 * v29])
    memmove(v27, v46, 8 * v29);
  v30 = 0;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v11 + 16);
  v31 = 1 << *(_BYTE *)(v11 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v11 + 64);
  v45 = (unint64_t)(v31 + 63) >> 6;
  v34 = v51;
  while (1)
  {
    if (v33)
    {
      v48 = (v33 - 1) & v33;
      v49 = v30;
      v35 = __clz(__rbit64(v33)) | (v30 << 6);
      goto LABEL_27;
    }
    v39 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v39 >= v45)
      goto LABEL_51;
    v40 = *(_QWORD *)&v46[8 * v39];
    v41 = v30 + 1;
    if (!v40)
    {
      v41 = v39 + 1;
      if (v39 + 1 >= v45)
        goto LABEL_51;
      v40 = *(_QWORD *)&v46[8 * v41];
      if (!v40)
      {
        v41 = v39 + 2;
        if (v39 + 2 >= v45)
          goto LABEL_51;
        v40 = *(_QWORD *)&v46[8 * v41];
        if (!v40)
        {
          v41 = v39 + 3;
          if (v39 + 3 >= v45)
            goto LABEL_51;
          v40 = *(_QWORD *)&v46[8 * v41];
          if (!v40)
          {
            if (v39 + 4 >= v45)
              goto LABEL_51;
            v41 = v39 + 4;
            v40 = *(_QWORD *)&v46[8 * v39 + 32];
            if (!v40)
            {
              if (v39 + 5 >= v45)
                goto LABEL_51;
              v41 = v39 + 5;
              v40 = *(_QWORD *)&v46[8 * v39 + 40];
              if (!v40)
              {
                if (v39 + 6 >= v45)
                  goto LABEL_51;
                v41 = v39 + 6;
                v40 = *(_QWORD *)&v46[8 * v39 + 48];
                if (!v40)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_50:
    v48 = (v40 - 1) & v40;
    v49 = v41;
    v35 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_27:
    v36 = *(_QWORD *)(v11 + 48);
    v47 = *(_QWORD *)(v50 + 72) * v35;
    outlined init with copy of ICUNumberFormatter.Signature(v36 + v47, v34, type metadata accessor for ICUPercentNumberFormatter.Signature);
    v37 = 8 * v35;
    v38 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v35);
    outlined init with take of ICUNumberFormatter.Signature(v34, *(_QWORD *)(v17 + 48) + v47, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + v37) = v38;
    swift_retain();
    v33 = v48;
    v30 = v49;
  }
  v42 = v39 + 7;
  if (v42 >= v45)
    goto LABEL_51;
  v40 = *(_QWORD *)&v46[8 * v42];
  if (v40)
  {
    v41 = v42;
    goto LABEL_50;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v45)
      goto LABEL_51;
    v40 = *(_QWORD *)&v46[8 * v41];
    ++v42;
    if (v40)
      goto LABEL_50;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

