uint64_t CustomNSError.errorCode.getter()
{
  return _swift_stdlib_getDefaultErrorCode();
}

uint64_t dispatch thunk of CustomNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CustomNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t Notification.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

void sub_1819AA4C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1819AA4EC(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;
  uint64_t v11;

  if (a2)
  {
    if (a2 == 2)
    {
      v9 = objc_begin_catch(exc_buf);
      v10 = _NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = objc_msgSend(v9, "description");
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v11;
        _os_log_error_impl(&dword_1817D9000, v10, OS_LOG_TYPE_ERROR, "NSProgress Exception caught: %@", (uint8_t *)&a9, 0xCu);
      }
      objc_end_catch();
      JUMPOUT(0x1819AA478);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1819AA47CLL);
  }
  JUMPOUT(0x1819AA4E0);
}

void sub_1819AB318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1819AB640(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1819AB960(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1819AC41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose((const void *)(v3 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1819AD5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSRunLoopMode);
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for NSFastEnumerationState(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSFastEnumerationState);
}

void type metadata accessor for UATimeUnitStyle(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for UATimeUnitStyle);
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DIR(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DIR(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for DIR(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for DIR);
}

void type metadata accessor for NSStringCompareOptions(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for NSStringCompareOptions);
}

uint64_t getEnumTagSinglePayload for BPlistTrailer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BPlistTrailer(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for BPlistTrailer(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for BPlistTrailer);
}

void type metadata accessor for NSSearchPathDomainMask(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSSearchPathDomainMask);
}

void type metadata accessor for NSSearchPathDirectory(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSSearchPathDirectory);
}

void type metadata accessor for NSKeyValueChange(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueChange);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for os_unfair_recursive_lock_s);
}

void type metadata accessor for NSKeyValueObservingOptions(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueObservingOptions);
}

void type metadata accessor for NSCalendarUnit(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSCalendarUnit);
}

void type metadata accessor for NSURLFileProtectionType(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLFileProtectionType);
}

void type metadata accessor for NSURLUbiquitousSharedItemPermissions(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLUbiquitousSharedItemPermissions);
}

void type metadata accessor for NSURLUbiquitousSharedItemRole(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLUbiquitousSharedItemRole);
}

void type metadata accessor for NSURLUbiquitousItemDownloadingStatus(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLUbiquitousItemDownloadingStatus);
}

void type metadata accessor for NSURLFileResourceType(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLFileResourceType);
}

void type metadata accessor for NSLinguisticTag(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSLinguisticTag);
}

void type metadata accessor for SecTrustRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for SecTrustRef);
}

void type metadata accessor for NSURLRequestNetworkServiceType(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLRequestNetworkServiceType);
}

void type metadata accessor for NSComparisonResult(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSComparisonResult);
}

uint64_t getEnumTagSinglePayload for NSDecimal(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NSDecimal(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for iovec(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for iovec);
}

void type metadata accessor for NSPropertyListFormat(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for NSPropertyListFormat);
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for CGAffineTransform);
}

void type metadata accessor for CGVector(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CGVector);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for _NSRange);
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance String._BlockSearchingOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance String._BlockSearchingOptions(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

BOOL specialized OptionSet<>.insert(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  if (*v2)
  {
    v4 = v3 & a2;
    if ((v3 & a2) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = (unsigned __int16)a2;
  if (!(_WORD)a2)
LABEL_3:
    v4 = 0xFFFFLL;
LABEL_4:
  if (v4 != a2)
  {
    v5 = v3 | a2;
    if (!v5)
      v5 = 0xFFFFLL;
    *v2 = v5;
  }
  *a1 = a2;
  return v4 != a2;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance String._BlockSearchingOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance String._BlockSearchingOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance String._BlockSearchingOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance String._BlockSearchingOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t specialized SetAlgebra.init<A>(_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v7 - v2;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v4 = 0;
  if ((v8 & 1) == 0)
  {
    v4 = 0;
    do
    {
      v5 = v7;
      if ((v7 & ~v4) == 0)
        v5 = 0;
      v4 |= v5;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v8 != 1);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v15;
  void *v16;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v15 = a2;
  for (i = 0; i != v6; ++i)
  {
    v12 = *(_QWORD *)(a1 + 8 * i + 32);
    if ((*(_BYTE *)(v5 + 24) & 1) == 0)
    {
      v8 = *(void **)(v5 + 16);
LABEL_4:
      v9 = v8;
      objc_msgSend(v9, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMutableIndexSet();
      swift_dynamicCast();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v16;
      *(_BYTE *)(v10 + 24) = 1;
      v11 = v16;
      swift_release();
      objc_msgSend(v11, sel_addIndex_, v12);

      v5 = v10;
      continue;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(void **)(v5 + 16);
    if ((*(_BYTE *)(v5 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_4;
    objc_msgSend(v8, sel_addIndex_, v12);
  }
  result = swift_bridgeObjectRelease();
  a2 = v15;
LABEL_13:
  *a2 = v5;
  return result;
}

void *specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  CFIndex v9;
  unsigned int v10;
  char v11;
  const __CFCharacterSet *v12;
  void *v13;
  uint64_t v14;
  __CFCharacterSet *v15;
  const __CFCharacterSet *v16;
  void *v17;
  __CFCharacterSet *v18;
  void *v19;
  uint64_t *v20;
  CFRange v21;
  CFRange v22;

  result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    v5 = result;
    v20 = a2;
    type metadata accessor for __CharacterSetStorage();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    v7 = *(_QWORD *)(a1 + 16);
    if (!v7)
    {
LABEL_14:
      result = (void *)swift_bridgeObjectRelease();
      *v20 = v6;
      return result;
    }
    v8 = (unsigned int *)(a1 + 32);
    while (1)
    {
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v11 = *(_BYTE *)(v6 + 24);
          v12 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          result = CFCharacterSetCreateMutableCopy(0, v12);
          v13 = result;
          if ((v11 & 1) != 0)
          {
            if (!result)
              goto LABEL_16;
          }
          else if (!result)
          {
            goto LABEL_17;
          }

          v14 = swift_allocObject();
          *(_QWORD *)(v14 + 16) = v13;
          *(_BYTE *)(v14 + 24) = 1;
          swift_release();
          v6 = v14;
        }
        v15 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(_BYTE *)(v6 + 24) & 1) == 0)
          break;
        v21.location = v9;
        v21.length = 1;
        CFCharacterSetAddCharactersInRange(v15, v21);
        if (!--v7)
          goto LABEL_14;
      }
      v16 = v15;
      result = CFCharacterSetCreateMutableCopy(0, v16);
      if (!result)
        break;
      v17 = result;
      v18 = result;
      v22.location = v9;
      v22.length = 1;
      CFCharacterSetAddCharactersInRange(v18, v22);

      v19 = *(void **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = v17;
      *(_BYTE *)(v6 + 24) = 1;

      if (!--v7)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

CFMutableCharacterSetRef specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  char *v3;
  CFMutableCharacterSetRef result;
  CFMutableCharacterSetRef v5;
  uint64_t v6;
  CFIndex v7;
  char v8;
  const __CFCharacterSet *v9;
  CFMutableCharacterSetRef v10;
  uint64_t v11;
  __CFCharacterSet *v12;
  const __CFCharacterSet *v13;
  CFMutableCharacterSetRef v14;
  __CFCharacterSet *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  char v21;
  CFRange v22;
  CFRange v23;

  v19 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v17 - v2;
  result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    v5 = result;
    type metadata accessor for __CharacterSetStorage();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      while (1)
      {
        dispatch thunk of IteratorProtocol.next()();
        if ((v21 & 1) != 0)
        {
          result = (CFMutableCharacterSetRef)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v3, AssociatedTypeWitness);
          *v19 = v6;
          return result;
        }
        v7 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v8 = *(_BYTE *)(v6 + 24);
          v9 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          result = CFCharacterSetCreateMutableCopy(0, v9);
          v10 = result;
          if ((v8 & 1) != 0)
          {
            if (!result)
              goto LABEL_16;
          }
          else if (!result)
          {
            goto LABEL_17;
          }

          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = v10;
          *(_BYTE *)(v11 + 24) = 1;
          swift_release();
          v6 = v11;
        }
        v12 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(_BYTE *)(v6 + 24) & 1) == 0)
          break;
        v22.location = v7;
        v22.length = 1;
        CFCharacterSetAddCharactersInRange(v12, v22);
      }
      v13 = v12;
      result = CFCharacterSetCreateMutableCopy(0, v13);
      if (!result)
        break;
      v14 = result;
      v15 = result;
      v23.location = v7;
      v23.length = 1;
      CFCharacterSetAddCharactersInRange(v15, v23);

      v16 = *(void **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = v14;
      *(_BYTE *)(v6 + 24) = 1;

    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v9 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v6 = 0;
  if ((v10 & 1) == 0)
  {
    v6 = 0;
    do
    {
      v7 = v9;
      if ((v9 & ~v6) == 0)
        v7 = 0;
      v6 |= v7;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v10 != 1);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 32);
    v5 = 0xFFFFLL;
    while (1)
    {
      v7 = *v4++;
      v6 = v7;
      v8 = v7 & v5;
      if ((v7 & v5) != 0)
      {
        if (v8 == v6)
          goto LABEL_4;
      }
      else if (v6 == 0xFFFF)
      {
        goto LABEL_4;
      }
      v5 |= v6;
LABEL_4:
      if (!--v3)
        goto LABEL_11;
    }
  }
  v5 = 0xFFFFLL;
LABEL_11:
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t one-time initialization function for lineSeparators()
{
  int64_t v0;
  __objc2_meth_list **p_opt_inst_meths;
  _QWORD *v2;
  int64_t v3;
  int64_t v4;
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;

  if (one-time initialization token for paragraphSeparators != -1)
    swift_once();
  p_opt_inst_meths = &OBJC_PROTOCOL___NSXPCListenerDelegate.opt_inst_meths;
  v2 = (_QWORD *)static String.paragraphSeparators;
  v3 = *(_QWORD *)(static String.paragraphSeparators + 16);
  v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
    __break(1u);
LABEL_14:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)((unint64_t)p_opt_inst_meths > 1), v0, 1, v2);
    v2 = (_QWORD *)result;
    p_opt_inst_meths = *(__objc2_meth_list ***)(result + 24);
    v7 = (unint64_t)p_opt_inst_meths >> 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v6 = (_QWORD *)result;
  if (!(_DWORD)result
    || (p_opt_inst_meths = (__objc2_meth_list **)v2[3],
        v7 = (unint64_t)p_opt_inst_meths >> 1,
        (uint64_t)((unint64_t)p_opt_inst_meths >> 1) < v4))
  {
    if (v3 <= v4)
      v3 += 2;
    swift_bridgeObjectRetain();
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v3, 1, v2);
    result = swift_bridgeObjectRelease();
    p_opt_inst_meths = (__objc2_meth_list **)v8[3];
    v7 = (unint64_t)p_opt_inst_meths >> 1;
    v2 = v8;
  }
  v3 = v2[2];
  v0 = v3 + 1;
  if (v7 <= v3)
    goto LABEL_14;
LABEL_10:
  v2[2] = v0;
  v2[v3 + 4] = &outlined read-only object #0 of one-time initialization function for lineSeparators;
  v9 = v3 + 2;
  if ((uint64_t)v7 < v9)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)((unint64_t)p_opt_inst_meths > 1), v9, 1, v2);
    v2 = (_QWORD *)result;
  }
  v2[2] = v9;
  v2[v0 + 4] = &outlined read-only object #1 of one-time initialization function for lineSeparators;
  static String.lineSeparators = (uint64_t)v2;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UErrorCode@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UErrorCode(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UBlockCode(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSFileAttributeKey()
{
  void **v0;
  uint64_t v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(void *a1, id *a2)
{
  uint64_t v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = String._bridgeToObjectiveCImpl()();
  result = swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(void *a1, id *a2)
{
  uint64_t v4;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *a2 = (id)v4;
  return 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSFileAttributeKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3 = String._bridgeToObjectiveCImpl()();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance NSCalendarUnit@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSCalendarUnit(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance NSCalendarUnit()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSCalendarUnit@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized SetAlgebra.init<A>(_:)();
  *a1 = result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFDictionaryRef(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFDictionaryRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFDictionaryRef()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFDictionaryRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFDictionaryRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFDictionaryRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileProtectionType()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType, (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType, (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

id protocol witness for RawRepresentable.rawValue.getter in conformance NSLocaleKey@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  id result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSCalendarUnit@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLinguisticTag()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileResourceType()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType, (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType, (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousItemDownloadingStatus()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousSharedItemRole()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemRole, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemRole);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemRole, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemRole);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousSharedItemPermissions()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemPermissions, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemPermissions);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemPermissions, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemPermissions);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = String._bridgeToObjectiveCImpl()();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileProtectionType()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType, (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType, (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSFileAttributeKey()
{
  void **v0;
  uint64_t v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v1 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSFileAttributeKey()
{
  void **v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSFileAttributeKey()
{
  void **v0;
  Swift::Int v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  Hasher.init(_seed:)();
  String.hash(into:)();
  v1 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t base witness table accessor for Equatable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&protocol conformance descriptor for NSLinguisticTag);
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType, (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType, (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for Equatable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileResourceType, (uint64_t)&protocol conformance descriptor for NSURLFileResourceType);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousItemDownloadingStatus, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemRole, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemRole, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemRole, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemPermissions, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemPermissions, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, (uint64_t (*)(uint64_t))type metadata accessor for NSURLUbiquitousSharedItemPermissions, (uint64_t)&protocol conformance descriptor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType, (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType, (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSURLFileProtectionType, (uint64_t)&protocol conformance descriptor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for RawRepresentable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for SetAlgebra in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for RawRepresentable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for SetAlgebra in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for Equatable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions, (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions, (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions, (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueObservingOptions, (uint64_t)&protocol conformance descriptor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for Equatable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask, (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask, (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for RawRepresentable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask, (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for SetAlgebra in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, (uint64_t (*)(uint64_t))type metadata accessor for NSSearchPathDomainMask, (uint64_t)&protocol conformance descriptor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for Equatable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions, (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions, (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions, (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, (uint64_t (*)(uint64_t))type metadata accessor for NSStringCompareOptions, (uint64_t)&protocol conformance descriptor for NSStringCompareOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Hashable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for CFRange(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CFRange);
}

void type metadata accessor for URelativeDateTimeUnit(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for URelativeDateTimeUnit);
}

void type metadata accessor for UDateFormatField(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for UDateFormatField);
}

void type metadata accessor for NSFileProtectionType(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSFileProtectionType);
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for stat(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for stat(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 144) = v3;
  return result;
}

void type metadata accessor for stat(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for stat);
}

void type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSFileAttributeKey);
}

void type metadata accessor for NSURLSessionResponseDisposition(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLSessionResponseDisposition);
}

void type metadata accessor for NSGrammaticalDefiniteness(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSGrammaticalDefiniteness);
}

void type metadata accessor for UErrorCode(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for UErrorCode);
}

void type metadata accessor for UCalendarWeekdayType(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for UCalendarWeekdayType);
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for _ftsent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ftsent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

void type metadata accessor for _ftsent(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for _ftsent);
}

void type metadata accessor for NSTimeZoneNameStyle(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSTimeZoneNameStyle);
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSProcessInfoThermalState);
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for _opaque_pthread_mutex_t);
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FTS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FTS(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for FTS(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for FTS);
}

void type metadata accessor for CFMutableCharacterSetRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for CFMutableCharacterSetRef);
}

uint64_t type metadata completion function for CFMutableCharacterSetRef(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CFCharacterSetRef(255);
  *(_QWORD *)(a1 + 16) = v2;
  return 0;
}

uint64_t base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

uint64_t base witness table accessor for RawRepresentable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType, (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType, (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProtectionType, (uint64_t)&protocol conformance descriptor for NSFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
}

void type metadata accessor for timespec(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for timespec);
}

void type metadata accessor for UNumberFormatFields(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for UNumberFormatFields);
}

void type metadata accessor for FTS.__Unnamed_union___Anonymous_field8(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, (unint64_t *)&lazy cache variable for type metadata for FTS.__Unnamed_union___Anonymous_field8);
}

void PredicateCodableError.description.getter()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of PredicateCodableError(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1819B0DF0()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(63);
  v0._countAndFlagsBits = 0x2720656854;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  String.append(_:)(v4);
  v1._countAndFlagsBits = 0xD000000000000035;
  v1._object = (void *)0x8000000182304690;
  String.append(_:)(v1);
  String.append(_:)(v5);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

void protocol witness for CustomStringConvertible.description.getter in conformance PredicateCodableError()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of PredicateCodableError(v0, (uint64_t)v1);
  PredicateCodableError.description.getter();
}

_QWORD *ExpressionStructure.Argument.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  char v3;

  result = specialized ExpressionStructure.Argument.init(from:)(a1);
  if (v1)
    return (_QWORD *)(v3 & 1);
  return result;
}

uint64_t ExpressionStructure.Argument.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE v6[24];
  uint64_t v7;

  if ((a5 & 1) != 0)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure]);
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure], (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure, MEMORY[0x1E0DEAF10]);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  }
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ExpressionStructure.Argument@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = ExpressionStructure.Argument.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure.Argument(_QWORD *a1)
{
  uint64_t v1;

  return ExpressionStructure.Argument.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExpressionStructure.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExpressionStructure.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExpressionStructure.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ExpressionStructure.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1936159329;
  else
    return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpressionStructure.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ExpressionStructure.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ExpressionStructure.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance ExpressionStructure.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpressionStructure.CodingKeys()
{
  lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpressionStructure.CodingKeys()
{
  lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ExpressionStructure.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[4];
  char v15;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpressionStructure.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a4 + 16))
  {
    v13 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v14[0]) = 0;
    v11 = v13;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v11)
    {
      v14[0] = a4;
      v15 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
      lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure.Argument], (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument, MEMORY[0x1E0DEAF10]);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v14[3]);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpressionStructure@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = specialized ExpressionStructure.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure(_QWORD *a1)
{
  uint64_t *v1;

  return ExpressionStructure.encode(to:)(a1, *v1, v1[1], v1[2]);
}

_QWORD *assignWithCopy for ExpressionStructure(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExpressionStructure(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressionStructure()
{
  return &type metadata for ExpressionStructure;
}

uint64_t outlined copy of PredicateCodableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a5 != 2)
  {
    if (a5 != 3)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for PredicateCodableError(uint64_t a1)
{
  return outlined consume of PredicateCodableError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of PredicateCodableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a5 != 2)
  {
    if (a5 != 3)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PredicateCodableError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PredicateCodableError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of PredicateCodableError(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of PredicateCodableError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PredicateCodableError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for PredicateCodableError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableError()
{
  return &type metadata for PredicateCodableError;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressionCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PredicateExpressionCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressionCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressionCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressionCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  return CodingKey.debugDescription.getter();
}

void PredicateCodableConfiguration.allowInputs<each A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;

  if (*(_BYTE *)(v3 + 16) == 1)
  {
    v4 = a2;
    if (a2)
    {
      v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v7 = v6[2];
      do
      {
        v8 = v6[3];
        v9 = v7 + 1;
        if (v7 >= v8 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v7 + 1, 1, v6);
        v10 = *v5++;
        v6[2] = v9;
        v6[v7++ + 4] = v10;
        --v4;
      }
      while (v4);
    }
    else
    {
      v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v9 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    v11 = 0;
    do
    {
      v12 = v6[v11 + 4];
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v12, 0xD00000000000001BLL, (void *)0x8000000182304720, 1);
      swift_bridgeObjectRelease();
      ++v11;
    }
    while (v9 != v11);
    swift_bridgeObjectRelease();
  }
}

uint64_t _withPredicateArchivingState<A>(_:_:)(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  pthread_key_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v3 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v6 = static _ThreadLocal.Key<A>.predicateArchivingState;
  v7 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v7)
  {
    v8 = *v7;
    v9 = *(_BYTE *)(*v7 + 32);
    *(_BYTE *)(*v7 + 32) = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    v14 = *(_OWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v4;
    *(_QWORD *)(v8 + 24) = v3;
    a2(v10);
    *(_OWORD *)(v8 + 16) = v14;
    *(_BYTE *)(v8 + 32) = v9;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PredicateArchivingState();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v4;
    *(_QWORD *)(v12 + 24) = v3;
    *(_BYTE *)(v12 + 32) = v5;
    *(_QWORD *)(v12 + 40) = MEMORY[0x1E0DEE9E0];
    v15[0] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v6))
      __break(1u);
    v13 = pthread_setspecific(v6, v15);
    a2(v13);
    pthread_setspecific(v6, 0);
    return swift_release();
  }
}

uint64_t closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  result = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0)
    return KeyedEncodingContainer.encode<A>(_:forKey:)();
  return result;
}

uint64_t KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t MetatypeMetadata;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  Swift::String v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD **v74;
  char *v75;
  int *v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD **v84;
  __int128 *v85;
  _QWORD *TupleTypeMetadata2;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94[2];
  char v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v84 = a2;
  v83 = a1;
  v91 = a7;
  v11 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v88 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v87 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = a8;
  *(_QWORD *)&v96 = a8;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v17 = 8 * a6;
  v93 = v12;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v11, v15, v16);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    TupleTypeMetadata2 = v80;
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    if (a6)
    {
      v21 = v11;
      v22 = (_QWORD *)((char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      v23 = a6;
      do
      {
        v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255, v24, v19, v20);
        --v23;
      }
      while (v23);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v82 = TupleTypeMetadata;
  TupleTypeMetadata2 = (_QWORD *)swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v85 = (__int128 *)((char *)v80 - v26);
  if (a6 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    v81 = v80;
    MEMORY[0x1E0C80A78](v25);
    if (a6)
    {
      v28 = v11;
      v29 = (_QWORD *)((char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      v30 = a6;
      do
      {
        ++v28;
        *v29++ = swift_getMetatypeMetadata();
        --v30;
      }
      while (v30);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v31 = *(_QWORD *)(a5 + 8);
  v32 = *(_BYTE *)(a5 + 16);
  v98 = *(_QWORD *)a5;
  v99 = v31;
  v100 = v32;
  MEMORY[0x1E0C80A78](v98);
  v35 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a6)
  {
    v36 = (int *)(v33 + 32);
    v37 = v35;
    v38 = a6;
    do
    {
      if (a6 == 1)
        v39 = 0;
      else
        v39 = *v36;
      v40 = *v11++;
      *(_QWORD *)(v34 + v39) = v40;
      *v37++ = v34 + v39;
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v35, a6, v91);
  LOBYTE(v94[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v41 = v90;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v41)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v80[2] = v80;
  v80[1] = v80;
  v43 = v96;
  v81 = v97;
  v44 = v99;
  v45 = v100;
  v46 = *(_QWORD *)(v99 + 16);
  v90 = v98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v46)
    goto LABEL_26;
  swift_bridgeObjectRetain();
  v47 = specialized __RawDictionaryStorage.find<A>(_:)(v43, *((uint64_t *)&v43 + 1));
  if ((v48 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    *(_QWORD *)&v96 = 47;
    *((_QWORD *)&v96 + 1) = 0xE100000000000000;
    v94[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v55._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56 = v96;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)v57 = v43;
    *(_OWORD *)(v57 + 16) = v56;
    *(_BYTE *)(v57 + 32) = 1;
    swift_willThrow();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v49 = *(_QWORD *)(v44 + 56) + 16 * v47;
  v50 = *(_QWORD *)v49;
  v51 = *(_BYTE *)(v49 + 8);
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = v92;
    goto LABEL_29;
  }
  v80[0] = v50;
  v52 = v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = v45;
  v54 = swift_bridgeObjectRetain();
  v64 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v54, v52, v44, v45, MEMORY[0x1E0DEE9D8], v43, *((uint64_t *)&v43 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v80[0];
  v66 = PartialType.create2(with:)();
  if (!v66)
  {
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v73 = v65;
    *(_QWORD *)(v73 + 8) = v64;
    *(_QWORD *)(v73 + 16) = 0;
    *(_QWORD *)(v73 + 24) = 0;
    *(_BYTE *)(v73 + 32) = 2;
    swift_willThrow();
    goto LABEL_27;
  }
  v67 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v67;
  v58 = v92;
  v45 = v53;
  v50 = v68;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94[0] = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v101 = v89;
  swift_getExtendedExistentialTypeMetadata();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v92 = v96;
    v59 = v97;
    LOBYTE(v94[0]) = 0;
    v60 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    v94[0] = v90;
    v94[1] = v44;
    v95 = v45;
    MEMORY[0x1E0C80A78](v60);
    v69 = v91;
    v80[-8] = a6;
    v80[-7] = v69;
    v80[-6] = v89;
    v80[-5] = &v96;
    *(_OWORD *)&v80[-4] = v92;
    v80[-2] = v59;
    v80[-1] = v70;
    v71 = v85;
    v72 = TupleTypeMetadata2;
    _withPredicateArchivingState<A>(_:_:)(v94, (void (*)(uint64_t))partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of any PredicateExpression<Self.Output == B1>(v71, v83);
    v74 = v84;
    if (a6)
    {
      v75 = (char *)v71 + *((int *)v72 + 12);
      v76 = (int *)(v82 + 32);
      v77 = a6;
      do
      {
        if (a6 == 1)
          v78 = 0;
        else
          v78 = *v76;
        v79 = *v74++;
        *v79 = *(_QWORD *)&v75[v78];
        v76 += 4;
        --v77;
      }
      while (v77);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v96) = 2;
    v62 = v87;
    v61 = v88;
    v63 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v58, v93);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    return swift_willThrow();
  }
}

uint64_t closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v43 = a8;
  v46 = a5;
  v47 = a3;
  v48 = a2;
  v49 = a4;
  v54 = a1;
  v12 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v51 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a6;
  if (a6 == 1)
  {
    v18 = type metadata accessor for PredicateExpressions.Variable(0, *v12, v15, v16);
    v52 = &v42;
    v53 = v18;
    v42 = *(_QWORD *)(v18 - 8);
    MEMORY[0x1E0C80A78](v18);
    v55 = (char *)&v42 - v21;
  }
  else
  {
    MEMORY[0x1E0C80A78](v14);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v26 = v12;
      v27 = (uint64_t *)((char *)&v42 - v25);
      v28 = v56;
      do
      {
        v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255, v29, v22, v23);
        --v28;
      }
      while (v28);
    }
    a6 = v56;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v52 = &v42;
    v53 = TupleTypeMetadata;
    v42 = *(_QWORD *)(TupleTypeMetadata - 8);
    v31 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v55 = (char *)&v42 - v32;
    if (!a6)
    {
LABEL_11:
      v38 = v50;
      v37 = v51;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v51 + 16))(v50, v46, v13, v31);
      v58 = 1;
      v39 = v47;
      a9[3] = v48;
      a9[4] = v39;
      __swift_allocate_boxed_opaque_existential_1(a9);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v13);
        return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a9);
      }
      else
      {
        v57 = v43;
        swift_getExtendedExistentialTypeMetadata();
        v40 = v53;
        v41 = (char *)a9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v13);
        return (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 16))(v41, v55, v40);
      }
    }
  }
  v44 = v13;
  v45 = a9;
  v33 = 32;
  v34 = a6;
  while (1)
  {
    v35 = type metadata accessor for PredicateExpressions.Variable(0, *v12, v19, v20);
    __swift_mutable_project_boxed_opaque_existential_1(v54, *(_QWORD *)(v54 + 24));
    MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v35);
    result = dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (v9)
      return result;
    v33 += 16;
    ++v12;
    if (!--v34)
    {
      v13 = v44;
      a9 = v45;
      goto LABEL_11;
    }
  }
}

uint64_t specialized ExpressionStructure.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  _QWORD v13[4];
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?((uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.singleValueContainer()();
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    LOBYTE(v13[0]) = 0;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
    v14 = 1;
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure.Argument], (uint64_t (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v11;
}

_QWORD *specialized ExpressionStructure.Argument.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD v6[4];

  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v3 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t specialized ExpressionStructure.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936159329 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized PredicateExpressionCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C626169726176 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6973736572707865 && a2 == 0xEA00000000006E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7275746375727473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_1E0F21740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_1E0F21740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_1E0F21740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.CodingKeys, &unk_1E0F21740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.Argument, &type metadata for ExpressionStructure.Argument);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure.Argument, &type metadata for ExpressionStructure.Argument);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }
  return result;
}

uint64_t outlined init with take of PredicateCodableError(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined copy of GenericArgument(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of GenericArgument(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure, &type metadata for ExpressionStructure);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure;
  if (!lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ExpressionStructure, &type metadata for ExpressionStructure);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure and conformance ExpressionStructure);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError;
  if (!lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateCodableError, &type metadata for PredicateCodableError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError);
  }
  return result;
}

uint64_t partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(v1[5], v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], a1);
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x186DA9E78);
  return result;
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1819B36A0 + 4 * byte_18205EC63[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1819B36D4 + 4 * byte_18205EC5E[v4]))();
}

uint64_t sub_1819B36D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1819B36DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1819B36E4);
  return result;
}

uint64_t sub_1819B36F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1819B36F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1819B36FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1819B3704(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ExpressionStructure.CodingKeys()
{
  return &unk_1E0F21740;
}

uint64_t outlined copy of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ExpressionStructure.Argument(uint64_t a1)
{
  return outlined consume of ExpressionStructure.Argument(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of ExpressionStructure.Argument(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of ExpressionStructure.Argument(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.Argument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ExpressionStructure.Argument(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for ExpressionStructure.Argument(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExpressionStructure.Argument()
{
  return &type metadata for ExpressionStructure.Argument;
}

uint64_t lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x186DA9D64](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NSObject.KeyValueObservingPublisher.init(object:keyPath:options:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t NSObject.KeyValueObservingPublisher.didChange()(uint64_t a1)
{
  *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)(a1 + 16);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, a1);
  Publisher.map<A>(_:)();
  return swift_release();
}

uint64_t sub_1819B3B40()
{
  return swift_deallocObject();
}

id NSObject.KeyValueObservingPublisher.object.getter()
{
  id *v0;

  return *v0;
}

uint64_t NSObject.KeyValueObservingPublisher.keyPath.getter()
{
  return swift_retain();
}

uint64_t NSObject.KeyValueObservingPublisher.options.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t static NSObject.KeyValueObservingPublisher.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  if (*a1 != *a2)
    return 0;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a1[1];
  v6 = a1[2];
  type metadata accessor for AnyKeyPath();
  swift_retain();
  swift_retain();
  v7 = MEMORY[0x186DA51E0](v5, v3);
  swift_release();
  swift_release();
  return v7 & (v6 == v4);
}

void NSObject.KVOSubscription.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 176));
  os_unfair_lock_lock(v9);
  v17 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18205F0D0;
  *(_QWORD *)(v10 + 32) = 0x746176726573626FLL;
  *(_QWORD *)(v10 + 40) = 0xEB000000006E6F69;
  v11 = (void *)v0[2];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservation?);
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = 0x646E616D6564;
  v13 = v0[3];
  *(_QWORD *)(v10 + 120) = MEMORY[0x1E0C95D60];
  *(_QWORD *)(v10 + 88) = 0xE600000000000000;
  *(_QWORD *)(v10 + 96) = v13;
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  v15 = v11;
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v9);
}

void NSObject.KVOSubscription.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x63736275534F564BLL;
  a1[1] = 0xEF6E6F6974706972;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return 0x63736275534F564BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  NSObject.KVOSubscription.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSObject.KVOSubscription<A, B, C>(_QWORD *a1@<X8>)
{
  NSObject.KVOSubscription.playgroundDescription.getter(a1);
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t assignWithCopy for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_1819B3F1C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1819B3F40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF15LL8variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  Swift::UInt *v6;
  Swift::UInt v7;
  Swift::UInt v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v20;
    v6 = (Swift::UInt *)(a1 + 32);
    do
    {
      v8 = *v6++;
      v7 = v8;
      v9 = *a2;
      if (*(_QWORD *)(*a2 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
        v13 = *v12;
        v14 = v12[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v13 = 0x566E776F6E6B6E75;
        v14 = 0xEF656C6261697261;
      }
      v17 = *(_QWORD *)(v20 + 16);
      v16 = *(_QWORD *)(v20 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v20 + 16) = v17 + 1;
      v18 = v20 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v14;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  Swift::String v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  unint64_t result;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;

  if (!_foundation_swift_url_feature_enabled())
  {
    v8 = objc_msgSend(a1, sel_description);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

LABEL_35:
    v52._countAndFlagsBits = (uint64_t)v9;
    v52._object = v11;
    String.append(_:)(v52);
    return swift_bridgeObjectRelease();
  }
  v53 = a1;
  v54 = a2;
  v55 = a3;
  URL.scheme.getter();
  if (!v6)
    goto LABEL_16;
  v7 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v7._countAndFlagsBits == 1635017060 && v7._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_16:
    swift_retain();
    v18 = a1;
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      v19 = objc_msgSend(v18, sel_relativeString);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v11 = v20;
      swift_release();
      swift_release();

      goto LABEL_33;
    }
    if (a2)
    {
      v9 = *(id *)(a2 + 16);
      v11 = *(void **)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_33;
    }
    goto LABEL_37;
  }
LABEL_8:
  swift_retain();
  v13 = a1;
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v15 = objc_msgSend(v13, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    swift_release();
    swift_release();

  }
  v16 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v16 < 129)
    goto LABEL_16;
  v53 = 0;
  v54 = 0xE000000000000000;
  v17 = v13;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v21 = objc_msgSend(v17, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    swift_release();
    swift_release();

  }
  v22 = specialized Collection.prefix(_:)(120);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = MEMORY[0x186DA4634](v22, v24, v26, v28);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x202E2E2E20;
  v30._object = (void *)0xE500000000000000;
  String.append(_:)(v30);
  v31 = v17;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v35 = objc_msgSend(v31, sel_relativeString);
    v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v32 = v36;
    swift_release();
    swift_release();

    if ((v32 & 0x2000000000000000) != 0)
      goto LABEL_24;
    goto LABEL_26;
  }
  if (a2)
  {
    v33 = *(_QWORD *)(a2 + 16);
    v32 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

    if ((v32 & 0x2000000000000000) != 0)
    {
LABEL_24:
      v34 = v33 & 0xFFFFFFFFFFFFLL;
LABEL_27:
      result = String.index(_:offsetBy:limitedBy:)();
      if ((v37 & 1) != 0)
        result = 15;
      v38 = HIBYTE(v32) & 0xF;
      if ((v32 & 0x2000000000000000) == 0)
        v38 = v34;
      if (4 * v38 >= result >> 14)
      {
        v39 = String.subscript.getter();
        v41 = v40;
        v43 = v42;
        v45 = v44;
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = MEMORY[0x186DA4634](v39, v41, v43, v45);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = v53;
        v11 = (void *)v54;
LABEL_33:
        URL.baseURL.getter((uint64_t *)&v53);
        v47 = v53;
        if (v53)
        {
          v49 = v54;
          v48 = v55;
          v53 = 0;
          v54 = 0xE000000000000000;
          v50._countAndFlagsBits = (uint64_t)v9;
          v50._object = v11;
          String.append(_:)(v50);
          swift_bridgeObjectRelease();
          v51._countAndFlagsBits = 539831584;
          v51._object = (void *)0xE400000000000000;
          String.append(_:)(v51);
          specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v47, v49, v48);
          outlined consume of URL?(v47);
          v9 = v53;
          v11 = (void *)v54;
        }
        goto LABEL_35;
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_26:
    v34 = v33 & 0xFFFFFFFFFFFFLL;
    goto LABEL_27;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v10 = a1 + 32;
    do
    {
      v4 = *(_QWORD *)(v10 + 8 * v3++);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v11 + 16);
      v6 = *(_QWORD *)(v11 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v8 = (_QWORD *)(v11 + 24 * v7);
      v8[4] = v4;
      v8[5] = 0x7475706E69;
      v8[6] = 0xE500000000000000;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t DebugStringConversionState.subscript.getter(Swift::UInt *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  Swift::String v6;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x566E776F6E6B6E75;
  }
  return v5;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unsigned __int8 v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a3 >> 14;
  if (a3 >> 14 != a2 >> 14)
  {
    v11 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v11) = 1;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = 4 << v11;
    v12 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0)
      v12 = a4 & 0xFFFFFFFFFFFFLL;
    v18 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = 0;
    v13 = a2;
    while (1)
    {
      result = Substring.UTF8View.subscript.getter();
      v15 = result;
      if ((v13 & 0xC) == v20)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a4, a5);
        v13 = result;
        if ((a5 & 0x1000000000000000) == 0)
        {
LABEL_10:
          v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_14;
        }
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
        goto LABEL_10;
      }
      if (v18 <= v13 >> 16)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      v13 = String.UTF8View._foreignIndex(after:)();
LABEL_14:
      v16 = v19 == v7;
      if (v19 == v7 || *(unsigned __int8 *)(a1 + v7 + 32) != v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v16;
      }
      ++v7;
      if (v6 == v13 >> 14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
  }
  swift_bridgeObjectRetain();
  v7 = 0;
LABEL_18:
  v17 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRelease();
  if (v7 == v17)
    return 1;
  if (v7 >= v17)
    goto LABEL_25;
  return 0;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;

  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v6 = 11;
  v7 = v6 | (v5 << 16);
  v8 = a3 >> 14;
  swift_bridgeObjectRetain();
  v24 = v8;
  if (v8 != a4 >> 14)
  {
    swift_bridgeObjectRetain();
    v9 = Substring.index(before:)();
    v10 = Substring.subscript.getter();
    v12 = v11;
    if (!v5)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = 1;
      goto LABEL_21;
    }
    v13 = v10;
    v7 = String.index(before:)();
    if (v13 == String.subscript.getter() && v12 == v14)
      goto LABEL_13;
LABEL_14:
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v22 = 0;
      goto LABEL_21;
    }
    while (v24 != v9 >> 14)
    {
      v9 = Substring.index(before:)();
      v17 = Substring.subscript.getter();
      v19 = v18;
      if (v7 < 0x4000)
        goto LABEL_22;
      v20 = v17;
      v7 = String.index(before:)();
      if (v20 != String.subscript.getter() || v19 != v21)
        goto LABEL_14;
LABEL_13:
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
  }
  if (v7 < 0x4000)
  {
    v22 = 1;
  }
  else
  {
    String.index(before:)();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v22 = 0;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return v22;
}

unint64_t specialized Sequence<>.starts<A>(with:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v5 = result;
  v6 = 0;
  if ((a3 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a3) & 0xF;
  else
    v7 = a2 & 0xFFFFFFFFFFFFLL;
  v8 = 4 * v7;
  v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v20 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v21 = a3 & 0xFFFFFFFFFFFFFFLL;
  v11 = result + 32;
  v12 = 15;
  while (v8 != v12 >> 14)
  {
    v13 = v12 & 0xC;
    result = v12;
    if (v13 == v10)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
      v8 = 4 * v7;
    }
    v14 = result >> 16;
    if (result >> 16 >= v7)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v8 = 4 * v7;
      v15 = result;
      if (v13 != v10)
        goto LABEL_18;
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v22[0] = a2;
      v22[1] = v21;
      v15 = *((_BYTE *)v22 + v14);
      if (v13 != v10)
        goto LABEL_18;
    }
    else
    {
      result = v20;
      if ((a2 & 0x1000000000000000) == 0)
      {
        result = _StringObject.sharedUTF8.getter();
        v8 = 4 * v7;
      }
      v15 = *(_BYTE *)(result + v14);
      if (v13 != v10)
      {
LABEL_18:
        if ((a3 & 0x1000000000000000) == 0)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
    v8 = 4 * v7;
    v12 = result;
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_19:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 <= v12 >> 16)
      goto LABEL_35;
    v16 = String.UTF8View._foreignIndex(after:)();
    v8 = 4 * v7;
    v12 = v16;
LABEL_24:
    v17 = *(_QWORD *)(v5 + 16);
    result = v6 == v17;
    if (v6 == v17)
      return result;
    if (v6 >= v17)
      goto LABEL_34;
    v18 = *(unsigned __int8 *)(v11 + v6++);
    if (v18 != v15)
      return result;
  }
  v19 = *(_QWORD *)(v5 + 16);
  if (v19 == v6)
    return 1;
  if (v6 < v19)
    return 0;
LABEL_36:
  __break(1u);
  return result;
}

uint64_t PredicateExpressions.Variable.debugString(state:)(__int128 *a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v6 = v2;
  return DebugStringConversionState.subscript.getter(&v6);
}

uint64_t PredicateExpressions.KeyPath<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  char v33[16];
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;

  v31 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  v32 = v3;
  v4 = AnyKeyPath.debugDescription.getter();
  v6 = v5;
  v35 = 46;
  v36 = 0xE100000000000000;
  v34 = &v35;
  swift_bridgeObjectRetain();
  v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v33, v4, v6);
  result = swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v7 + 16);
  v10 = v9 - 1;
  v11 = v9 - 2;
  if (v9 < 2)
    goto LABEL_14;
  v12 = (unint64_t *)(v7 + 32 + 32 * v10);
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain();
  LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v13, v14);
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_14;
  v15 = v9 - 3;
  if (v9 < 3)
  {
    v10 = 0;
    goto LABEL_14;
  }
  if (v11 < *(_QWORD *)(v7 + 16))
  {
    v16 = (unint64_t *)(v7 + 32 + 32 * v11);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    LOBYTE(v17) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v17, v18);
    result = swift_bridgeObjectRelease();
    v10 = v9 - 2;
    if ((v17 & 1) == 0)
    {
      v19 = (unint64_t *)(v7 + 32 * v9 - 64);
      while ((uint64_t)(v15 + 1) >= 2)
      {
        if (v15 >= *(_QWORD *)(v7 + 16))
          goto LABEL_22;
        v20 = *v19;
        v21 = v19[1];
        swift_bridgeObjectRetain();
        LOBYTE(v20) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v20, v21);
        result = swift_bridgeObjectRelease();
        --v15;
        v19 -= 4;
        if ((v20 & 1) != 0)
        {
          v10 = v15 + 1;
          goto LABEL_13;
        }
      }
      v10 = 0;
LABEL_13:
      if ((uint64_t)v9 <= v10)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
LABEL_14:
    v22 = *(_QWORD *)(v7 + 16);
    if (v22 >= v10 + 1 && v22 >= v9)
    {
      v35 = v7;
      v36 = v7 + 32;
      v37 = v10 + 1;
      v38 = (2 * v9) | 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Substring>, MEMORY[0x1E0DEBF78]);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v24 = Sequence<>.joined(separator:)();
      v26 = v25;
      swift_bridgeObjectRelease();
      v35 = 46;
      v36 = 0xE100000000000000;
      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28 = v35;
      v29 = (void *)v36;
      v35 = v31;
      v36 = v32;
      swift_bridgeObjectRetain();
      v30._countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.KeyPath<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.KeyPath<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.Value<A>.debugString(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  __int128 v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v39 = *(_QWORD *)(a2 + 16);
  v4 = v39;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v2, v4);
  outlined init with copy of Any((uint64_t)v38, (uint64_t)v37);
  outlined init with copy of Any((uint64_t)v37, (uint64_t)&v33);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (v36)
  {
    outlined destroy of Any?((uint64_t)&v35, &demangling cache variable for type metadata for Any?);
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)&v35 = 0;
      *((_QWORD *)&v35 + 1) = 0xE000000000000000;
      if ((_BYTE)v33)
        v6 = 1702195828;
      else
        v6 = 0x65736C6166;
      if ((_BYTE)v33)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      v8 = v7;
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)&v33);
      _print_unlocked<A, B>(_:_:)();
      v10 = (void *)0xE000000000000000;
      v9 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    }
    else
    {
      if (swift_dynamicCast())
      {
        v33 = 34;
        v34 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
        swift_bridgeObjectRelease();
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        v11 = 34;
      }
      else
      {
        if (swift_dynamicCast())
        {
          *(_QWORD *)&v35 = 0;
          *((_QWORD *)&v35 + 1) = 0xE000000000000000;
          v12._countAndFlagsBits = 0x20657461443CLL;
          v12._object = (void *)0xE600000000000000;
          String.append(_:)(v12);
          Double.write<A>(to:)();
          v13._countAndFlagsBits = 62;
          v13._object = (void *)0xE100000000000000;
          String.append(_:)(v13);
LABEL_10:
          v10 = (void *)*((_QWORD *)&v35 + 1);
          v9 = v35;
          goto LABEL_25;
        }
        if (swift_dynamicCast())
        {
          v33 = 0x20617461443CLL;
          v34 = 0xE600000000000000;
          __asm { BR              X10 }
        }
        if (swift_dynamicCast())
        {
          v33 = 0x20444955553CLL;
          v34 = 0xE600000000000000;
          v14 = UUID.uuidString.getter();
        }
        else
        {
          v33 = 60;
          v34 = 0xE100000000000000;
          __swift_project_boxed_opaque_existential_1(v38, v39);
          swift_getDynamicType();
          v16._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
          v17._countAndFlagsBits = 8250;
          v17._object = (void *)0xE200000000000000;
          String.append(_:)(v17);
          outlined init with copy of Any((uint64_t)v38, (uint64_t)&v35);
          String.init<A>(describing:)();
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          swift_bridgeObjectRelease();
          v15 = *((_QWORD *)&v35 + 1);
          v14 = v35;
        }
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        v11 = 62;
      }
      v18 = 0xE100000000000000;
      String.append(_:)(*(Swift::String *)&v11);
      v9 = v33;
      v10 = (void *)v34;
    }
  }
  else
  {
    v10 = (void *)0xE300000000000000;
    v9 = 7104878;
  }
LABEL_25:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v35 = 0x65727574706163;
  *((_QWORD *)&v35 + 1) = 0xE700000000000000;
  v19 = *(_QWORD *)(a1 + 24);
  v33 = v19;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 10272;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  __swift_project_boxed_opaque_existential_1(v38, v39);
  swift_getDynamicType();
  v22._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 2112041;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v9;
  v24._object = v10;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = v35;
  v26 = *(_QWORD **)(a1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  *(_OWORD *)&v26[2 * v28 + 4] = v25;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)&v35 = 0x65727574706163;
  *((_QWORD *)&v35 + 1) = 0xE700000000000000;
  v33 = v19;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    JUMPOUT(0x1819B5B6CLL);
  }
  v30 = v35;
  *(_QWORD *)(a1 + 24) = v19 + 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v30;
}

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 539371040);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Disjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 545029152);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Disjunction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Disjunction<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540884256, (void *)0xE400000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Equal<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.NotEqual<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540877088, (void *)0xE400000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NotEqual<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NotEqual<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Arithmetic<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v8 = *(_QWORD *)&asc_18205FCF0[8 * *v4];
  v9._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v8;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Arithmetic<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Arithmetic<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void PredicateExpressions.Comparison<>.debugString(state:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1819B5D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v7._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(v4, *(_QWORD *)(v5 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 60;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v4, *(_QWORD *)(v5 + 24), v3);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 40;
}

void protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Comparison<A, B>()
{
  PredicateExpressions.Comparison<>.debugString(state:)();
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 45);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.UnaryMinus<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 0x29286E696D2ELL, (void *)0xE600000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMaximum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 0x292878616D2ELL, (void *)0xE600000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.ClosedRange<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x202E2E2E20, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ClosedRange<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Range<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x203C2E2E20, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Range<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Range<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Conditional<>.debugString(state:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, a2[2], a3);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x202020200A7B20;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, a2[3], a4);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = v12;
  v15 = 7;
  if (((v13 >> 60) & ((v12 & 0x800000000000000) == 0)) != 0)
    v15 = 11;
  v16 = v15 | (v14 << 16);
  if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0)
    v17 = String.index(after:)();
  else
    v17 = 15;
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  result = String.hasSuffix(_:)(v18);
  if ((result & 1) != 0)
  {
    result = String.index(before:)();
    v16 = result;
  }
  if (v16 >> 14 < v17 >> 14)
  {
    __break(1u);
  }
  else
  {
    String.subscript.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x186DA4634](0, 0xE000000000000000);
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x2065736C65207D0ALL;
    v24._object = (void *)0xEE00202020200A7BLL;
    String.append(_:)(v24);
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a5 + 16))(a1, a2[4], a5);
    v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0)
      v27 = v25;
    v28 = 7;
    if (((v26 >> 60) & ((v25 & 0x800000000000000) == 0)) != 0)
      v28 = 11;
    v29 = v28 | (v27 << 16);
    if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0)
      v30 = String.index(after:)();
    else
      v30 = 15;
    v31._countAndFlagsBits = 41;
    v31._object = (void *)0xE100000000000000;
    result = String.hasSuffix(_:)(v31);
    if ((result & 1) != 0)
    {
      result = String.index(before:)();
      v29 = result;
    }
    if (v29 >> 14 >= v30 >> 14)
    {
      String.subscript.getter();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      v32 = MEMORY[0x186DA4634](0, 0xE000000000000000);
      v34 = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 32010;
      v36._object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      return 2123369;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return PredicateExpressions.Conditional<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, a3, a4, 91, (void *)0xE100000000000000, 93);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;

  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  v7._countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._object = (void *)0xEA00000000002873;
  String.append(_:)(v7);
  v8._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionContainsCollection<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 0x203F736120, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.ForceCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 0x2021736120, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForceCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForceCast<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.TypeCheck<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 544434464, (void *)0xE400000000000000);
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v7._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  v9._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.TypeCheck<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.TypeCheck<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.ForcedUnwrap<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 33, (void *)0xE100000000000000);
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Swift::String v7;
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  v7._countAndFlagsBits = a4;
  v7._object = a5;
  String.append(_:)(v7);
  return v9;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForcedUnwrap<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.OptionalFlatMap<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  Swift::UInt v10;
  Swift::String v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  Swift::UInt v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::UInt v67;
  Swift::UInt v68;
  Swift::UInt v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t result;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  __int128 v81;
  Swift::UInt v82[4];
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v6 = v4;
  v79 = *(int *)(a2 + 72);
  v10 = *(_QWORD *)(v4 + v79);
  *(_QWORD *)&v83 = 0x656C626169726176;
  *((_QWORD *)&v83 + 1) = 0xE800000000000000;
  v82[0] = a1[1];
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v81 = v83;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v83 = *a1;
  v13 = v83;
  *a1 = 0x8000000000000000;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = v14;
  if (*(_QWORD *)(v13 + 24) >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v19 = v13;
      v22 = *((_QWORD *)&v81 + 1);
      v23 = v81;
      if ((v14 & 1) == 0)
      {
LABEL_45:
        *(_QWORD *)(v19 + 8 * (v15 >> 6) + 64) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v15) = v10;
        v45 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 16 * v15);
        *v45 = v23;
        v45[1] = v22;
        v46 = *(_QWORD *)(v19 + 16);
        v47 = __OFADD__(v46, 1);
        v48 = v46 + 1;
        if (v47)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        *(_QWORD *)(v19 + 16) = v48;
LABEL_47:
        *a1 = v19;
        swift_bridgeObjectRelease();
        v49 = a1[1];
        v47 = __OFADD__(v49, 1);
        v50 = v49 + 1;
        if (v47)
        {
          __break(1u);
        }
        else
        {
          a1[1] = v50;
          *(_QWORD *)&v83 = 0;
          *((_QWORD *)&v83 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(28);
          v51 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(a3 + 16))(a1, *(_QWORD *)(a2 + 16), a3);
          v53 = v52;
          swift_bridgeObjectRelease();
          v86 = v51;
          v87 = v53;
          v54._countAndFlagsBits = 0x70614D74616C662ELL;
          v54._object = (void *)0xEB00000000207B28;
          String.append(_:)(v54);
          v55 = a1[2];
          v56 = a1[3];
          v57 = *(_QWORD *)(v6 + v79);
          v83 = *(_OWORD *)a1;
          v84 = v55;
          v85 = v56;
          v82[0] = v57;
          v58._countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v58);
          swift_bridgeObjectRelease();
          v59._countAndFlagsBits = 0x202020200A6E6920;
          v59._object = (void *)0xE800000000000000;
          String.append(_:)(v59);
          v60 = (*(uint64_t (**)(uint64_t *, _QWORD))(a4 + 16))(a1, *(_QWORD *)(a2 + 32));
          v62 = HIBYTE(v61) & 0xF;
          if ((v61 & 0x2000000000000000) == 0)
            v62 = v60;
          v63 = 7;
          if (((v61 >> 60) & ((v60 & 0x800000000000000) == 0)) != 0)
            v63 = 11;
          v64 = v63 | (v62 << 16);
          if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0)
            v65 = String.index(after:)();
          else
            v65 = 15;
          v66._countAndFlagsBits = 41;
          v66._object = (void *)0xE100000000000000;
          if (String.hasSuffix(_:)(v66))
            v64 = String.index(before:)();
          if (v64 >> 14 >= v65 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v67;
            v82[2] = v68;
            v82[3] = v69;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            v70 = MEMORY[0x186DA4634](v83, *((_QWORD *)&v83 + 1), v84, v85);
            v72 = v71;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = v70;
            v73._object = v72;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            v74._countAndFlagsBits = 2718986;
            v74._object = (void *)0xE300000000000000;
            String.append(_:)(v74);
            return v86;
          }
        }
        __break(1u);
        goto LABEL_61;
      }
LABEL_8:
      v24 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 16 * v15);
      *v24 = v23;
      v24[1] = v22;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    v25 = static _DictionaryStorage.copy(original:)();
    v19 = v25;
    if (*(_QWORD *)(v13 + 16))
    {
      v26 = (void *)(v25 + 64);
      v27 = (unint64_t)((1 << *(_BYTE *)(v19 + 32)) + 63) >> 6;
      if (v19 != v13 || (unint64_t)v26 >= v13 + 64 + 8 * v27)
        memmove(v26, (const void *)(v13 + 64), 8 * v27);
      v76 = v13 + 64;
      v28 = 0;
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v13 + 16);
      v29 = 1 << *(_BYTE *)(v13 + 32);
      v30 = -1;
      if (v29 < 64)
        v30 = ~(-1 << v29);
      v31 = v30 & *(_QWORD *)(v13 + 64);
      v77 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          v78 = v28;
          v33 = v32 | (v28 << 6);
        }
        else
        {
          v41 = v28 + 1;
          if (__OFADD__(v28, 1))
            goto LABEL_62;
          if (v41 >= v77)
            break;
          v42 = *(_QWORD *)(v76 + 8 * v41);
          v43 = v28 + 1;
          if (!v42)
          {
            v43 = v28 + 2;
            if (v28 + 2 >= v77)
              break;
            v42 = *(_QWORD *)(v76 + 8 * v43);
            if (!v42)
            {
              v43 = v28 + 3;
              if (v28 + 3 >= v77)
                break;
              v42 = *(_QWORD *)(v76 + 8 * v43);
              if (!v42)
              {
                v43 = v28 + 4;
                if (v28 + 4 >= v77)
                  break;
                v42 = *(_QWORD *)(v76 + 8 * v43);
                if (!v42)
                {
                  v43 = v28 + 5;
                  if (v28 + 5 >= v77)
                    break;
                  v42 = *(_QWORD *)(v76 + 8 * v43);
                  if (!v42)
                  {
                    v43 = v28 + 6;
                    if (v28 + 6 >= v77)
                      break;
                    v42 = *(_QWORD *)(v76 + 8 * v43);
                    if (!v42)
                    {
                      v43 = v28 + 7;
                      if (v28 + 7 >= v77)
                        break;
                      v42 = *(_QWORD *)(v76 + 8 * v43);
                      if (!v42)
                      {
                        v43 = v28 + 8;
                        if (v28 + 8 >= v77)
                          break;
                        v42 = *(_QWORD *)(v76 + 8 * v43);
                        if (!v42)
                        {
                          v44 = v28 + 9;
                          if (v28 + 9 >= v77)
                            break;
                          v42 = *(_QWORD *)(v76 + 8 * v44);
                          if (!v42)
                          {
                            while (1)
                            {
                              v43 = v44 + 1;
                              if (__OFADD__(v44, 1))
                                goto LABEL_63;
                              if (v43 >= v77)
                                goto LABEL_44;
                              v42 = *(_QWORD *)(v76 + 8 * v43);
                              ++v44;
                              if (v42)
                                goto LABEL_43;
                            }
                          }
                          v43 = v28 + 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_43:
          v31 = (v42 - 1) & v42;
          v78 = v43;
          v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }
        v34 = 8 * v33;
        v35 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v33);
        v36 = 16 * v33;
        v37 = (uint64_t *)(*(_QWORD *)(v13 + 56) + v36);
        v39 = *v37;
        v38 = v37[1];
        *(_QWORD *)(*(_QWORD *)(v19 + 48) + v34) = v35;
        v40 = (_QWORD *)(*(_QWORD *)(v19 + 56) + v36);
        *v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        v28 = v78;
      }
    }
LABEL_44:
    swift_bridgeObjectRelease();
    v22 = *((_QWORD *)&v81 + 1);
    v23 = v81;
    if ((v5 & 1) == 0)
      goto LABEL_45;
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
  v19 = v83;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v5 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = *((_QWORD *)&v81 + 1);
    v23 = v81;
    if ((v5 & 1) == 0)
      goto LABEL_45;
    goto LABEL_8;
  }
LABEL_64:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.OptionalFlatMap<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, a3, a4, 91, (void *)0xE100000000000000, 93);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;

  _StringGuts.grow(_:)(19);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, a2[2], a3);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, a2[3], a4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6C7561666564202CLL;
  v13._object = (void *)0xEB00000000203A74;
  String.append(_:)(v13);
  v14._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a5 + 16))(a1, a2[4], a5);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v10;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24));
}

uint64_t PredicateExpressions.FloatDivision<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2109216, (void *)0xE300000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntDivision<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.FloatDivision<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.IntRemainder<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2106656, (void *)0xE300000000000000);
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v11._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = a5;
  v12._object = a6;
  String.append(_:)(v12);
  v13._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.IntRemainder<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Negation<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 33);
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v4;

  v4._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Negation<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Negation<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.NilCoalesce<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 541015840);
}

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v9._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = a5;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NilCoalesce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NilCoalesce<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.NilLiteral.debugString(state:)()
{
  return 7104878;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, a3, a4, 0x6E6961746E6F632ELL, (void *)0xEA00000000002873, 41);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;

  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  v13._countAndFlagsBits = a5;
  v13._object = a6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = a7;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.RangeExpressionContains<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, a3, a4, 0x6E6961746E6F632ELL, (void *)0xEA00000000002873, 41);
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;

  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a1, *(_QWORD *)(a2 + 16));
  v13._countAndFlagsBits = a5;
  v13._object = a6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = a7;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContains<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceStartsWith<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(19);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, *(_QWORD *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x287374726174732ELL;
  v9._object = (void *)0xEE00203A68746977;
  String.append(_:)(v9);
  v10._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceStartsWith<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 36, 0xD000000000000013, (void *)0x8000000182304780);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 31, 0x697461536C6C612ELL, (void *)0xEE00207B28796673);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.Filter<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 27, 0x287265746C69662ELL, (void *)0xEA0000000000207BLL);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::UInt v13;
  Swift::String v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::UInt v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  Swift::String v64;
  Swift::UInt v65;
  Swift::UInt v66;
  Swift::UInt v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t result;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v78;
  Swift::String v79;
  __int128 v81;
  Swift::UInt v82[4];
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v79._countAndFlagsBits = a6;
  v79._object = a7;
  v9 = v7;
  v78 = *(int *)(a2 + 64);
  v13 = *(_QWORD *)(v7 + v78);
  *(_QWORD *)&v83 = 0x656C626169726176;
  *((_QWORD *)&v83 + 1) = 0xE800000000000000;
  v82[0] = a1[1];
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v81 = v83;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v83 = *a1;
  v16 = v83;
  *a1 = 0x8000000000000000;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = v17;
  if (*(_QWORD *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v16;
      if ((v17 & 1) == 0)
      {
LABEL_43:
        *(_QWORD *)(v22 + 8 * (v18 >> 6) + 64) |= 1 << v18;
        *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * v18) = v13;
        *(_OWORD *)(*(_QWORD *)(v22 + 56) + 16 * v18) = v81;
        v45 = *(_QWORD *)(v22 + 16);
        v46 = __OFADD__(v45, 1);
        v47 = v45 + 1;
        if (v46)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        *(_QWORD *)(v22 + 16) = v47;
LABEL_45:
        *a1 = v22;
        swift_bridgeObjectRelease();
        v48 = a1[1];
        v46 = __OFADD__(v48, 1);
        v49 = v48 + 1;
        if (v46)
        {
          __break(1u);
        }
        else
        {
          a1[1] = v49;
          *(_QWORD *)&v83 = 0;
          *((_QWORD *)&v83 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(a5);
          v50 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(a3 + 16))(a1, *(_QWORD *)(a2 + 16), a3);
          v52 = v51;
          swift_bridgeObjectRelease();
          v86 = v50;
          v87 = v52;
          String.append(_:)(v79);
          v53 = a1[2];
          v54 = a1[3];
          v55 = *(_QWORD *)(v9 + v78);
          v83 = *(_OWORD *)a1;
          v84 = v53;
          v85 = v54;
          v82[0] = v55;
          v56._countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          v57._countAndFlagsBits = 0x202020200A6E6920;
          v57._object = (void *)0xE800000000000000;
          String.append(_:)(v57);
          v58 = (*(uint64_t (**)(uint64_t *, _QWORD))(a4 + 16))(a1, *(_QWORD *)(a2 + 24));
          v60 = HIBYTE(v59) & 0xF;
          if ((v59 & 0x2000000000000000) == 0)
            v60 = v58;
          v61 = 7;
          if (((v59 >> 60) & ((v58 & 0x800000000000000) == 0)) != 0)
            v61 = 11;
          v62 = v61 | (v60 << 16);
          if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0)
            v63 = String.index(after:)();
          else
            v63 = 15;
          v64._countAndFlagsBits = 41;
          v64._object = (void *)0xE100000000000000;
          if (String.hasSuffix(_:)(v64))
            v62 = String.index(before:)();
          if (v62 >> 14 >= v63 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v65;
            v82[2] = v66;
            v82[3] = v67;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            v68 = MEMORY[0x186DA4634](v83, *((_QWORD *)&v83 + 1), v84, v85);
            v70 = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v71._countAndFlagsBits = v68;
            v71._object = v70;
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            v72._countAndFlagsBits = 2718986;
            v72._object = (void *)0xE300000000000000;
            String.append(_:)(v72);
            return v86;
          }
        }
        __break(1u);
        goto LABEL_59;
      }
LABEL_8:
      *(_OWORD *)(*(_QWORD *)(v22 + 56) + 16 * v18) = v81;
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    v25 = static _DictionaryStorage.copy(original:)();
    v22 = v25;
    if (*(_QWORD *)(v16 + 16))
    {
      v26 = (void *)(v25 + 64);
      v27 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
      if (v22 != v16 || (unint64_t)v26 >= v16 + 64 + 8 * v27)
        memmove(v26, (const void *)(v16 + 64), 8 * v27);
      v74 = v16 + 64;
      v28 = 0;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v16 + 16);
      v29 = 1 << *(_BYTE *)(v16 + 32);
      v30 = -1;
      if (v29 < 64)
        v30 = ~(-1 << v29);
      v31 = v30 & *(_QWORD *)(v16 + 64);
      v75 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          v76 = v28;
          v33 = v32 | (v28 << 6);
        }
        else
        {
          v41 = v28 + 1;
          if (__OFADD__(v28, 1))
            goto LABEL_60;
          if (v41 >= v75)
            break;
          v42 = *(_QWORD *)(v74 + 8 * v41);
          v43 = v28 + 1;
          if (!v42)
          {
            v43 = v28 + 2;
            if (v28 + 2 >= v75)
              break;
            v42 = *(_QWORD *)(v74 + 8 * v43);
            if (!v42)
            {
              v43 = v28 + 3;
              if (v28 + 3 >= v75)
                break;
              v42 = *(_QWORD *)(v74 + 8 * v43);
              if (!v42)
              {
                v43 = v28 + 4;
                if (v28 + 4 >= v75)
                  break;
                v42 = *(_QWORD *)(v74 + 8 * v43);
                if (!v42)
                {
                  v43 = v28 + 5;
                  if (v28 + 5 >= v75)
                    break;
                  v42 = *(_QWORD *)(v74 + 8 * v43);
                  if (!v42)
                  {
                    v43 = v28 + 6;
                    if (v28 + 6 >= v75)
                      break;
                    v42 = *(_QWORD *)(v74 + 8 * v43);
                    if (!v42)
                    {
                      v43 = v28 + 7;
                      if (v28 + 7 >= v75)
                        break;
                      v42 = *(_QWORD *)(v74 + 8 * v43);
                      if (!v42)
                      {
                        v44 = v28 + 8;
                        if (v28 + 8 >= v75)
                          break;
                        v42 = *(_QWORD *)(v74 + 8 * v44);
                        if (!v42)
                        {
                          while (1)
                          {
                            v43 = v44 + 1;
                            if (__OFADD__(v44, 1))
                              goto LABEL_61;
                            if (v43 >= v75)
                              goto LABEL_42;
                            v42 = *(_QWORD *)(v74 + 8 * v43);
                            ++v44;
                            if (v42)
                              goto LABEL_41;
                          }
                        }
                        v43 = v28 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_41:
          v31 = (v42 - 1) & v42;
          v76 = v43;
          v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }
        v34 = 8 * v33;
        v35 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v33);
        v36 = 16 * v33;
        v37 = (uint64_t *)(*(_QWORD *)(v16 + 56) + v36);
        v39 = *v37;
        v38 = v37[1];
        *(_QWORD *)(*(_QWORD *)(v22 + 48) + v34) = v35;
        v40 = (_QWORD *)(*(_QWORD *)(v22 + 56) + v36);
        *v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        v28 = v76;
      }
    }
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      goto LABEL_43;
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  v22 = v83;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v8 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v8 & 1) == 0)
      goto LABEL_43;
    goto LABEL_8;
  }
LABEL_62:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Filter<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Filter<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.StringContainsRegex<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  v11 = v5(a1, v6);
  v7._countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._object = (void *)0xEA00000000002873;
  String.append(_:)(v7);
  v8._countAndFlagsBits = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(a1, v6, a3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringContainsRegex<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.debugString(state:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(__n128);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a3;
  v60 = TupleTypeMetadata;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)&v10[-v12] < 0x20)
        goto LABEL_9;
      v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (__int128 *)(v12 + 16);
      v14 = v10 + 16;
      v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        v17 = v7 - v11;
        v18 = 8 * v11;
        v19 = &v10[8 * v11];
        v20 = (uint64_t *)(v12 + v18);
        do
        {
          v21 = *v20++;
          *(_QWORD *)v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v22 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v4;
  v53 = v25;
  v26 = *(uint64_t (**)(__n128))(v25 + 16);
  v59 = v24;
  isUniquelyReferenced_nonNull_native = v26(v22);
  v54 = v8;
  v55 = a2;
  if (v7)
  {
    v28 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v29 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    v30 = v8 + 32;
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v32 = v7;
    v58 = v7;
    do
    {
      v33 = *v28;
      v34 = *v29;
      v35 = *(_QWORD *)(*v28 - 8);
      v36 = MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
      v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v35 + 16))(v38, v36);
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v60, v33, v34);
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v31 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v42 = v31[2];
      v41 = v31[3];
      if (v42 >= v41 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v31);
        v31 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v31[2] = v42 + 1;
      v43 = &v31[2 * v42];
      v43[4] = v61;
      v43[5] = v40;
      v30 += 16;
      ++v29;
      ++v28;
      --v32;
    }
    while (v32);
  }
  else
  {
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v63 = (*(uint64_t (**)(uint64_t, _QWORD))(v57 + 16))(v60, *(_QWORD *)(v55 + 24));
  v64 = v44;
  v45._countAndFlagsBits = 0x7461756C6176652ELL;
  v45._object = (void *)0xEA00000000002865;
  String.append(_:)(v45);
  v62 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v46 = BidirectionalCollection<>.joined(separator:)();
  v48 = v47;
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 41;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51 = v63;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v54);
  return v51;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ExpressionEvaluate<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.PredicateEvaluate<>.debugString(state:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(__n128);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a3;
  v60 = TupleTypeMetadata;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)&v10[-v12] < 0x20)
        goto LABEL_9;
      v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (__int128 *)(v12 + 16);
      v14 = v10 + 16;
      v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        v17 = v7 - v11;
        v18 = 8 * v11;
        v19 = &v10[8 * v11];
        v20 = (uint64_t *)(v12 + v18);
        do
        {
          v21 = *v20++;
          *(_QWORD *)v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v22 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v4;
  v53 = v25;
  v26 = *(uint64_t (**)(__n128))(v25 + 16);
  v59 = v24;
  isUniquelyReferenced_nonNull_native = v26(v22);
  v54 = v8;
  v55 = a2;
  if (v7)
  {
    v28 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v29 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    v30 = v8 + 32;
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v32 = v7;
    v58 = v7;
    do
    {
      v33 = *v28;
      v34 = *v29;
      v35 = *(_QWORD *)(*v28 - 8);
      v36 = MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
      v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v35 + 16))(v38, v36);
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v60, v33, v34);
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v31 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v42 = v31[2];
      v41 = v31[3];
      if (v42 >= v41 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v31);
        v31 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v31[2] = v42 + 1;
      v43 = &v31[2 * v42];
      v43[4] = v61;
      v43[5] = v40;
      v30 += 16;
      ++v29;
      ++v28;
      --v32;
    }
    while (v32);
  }
  else
  {
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v63 = (*(uint64_t (**)(uint64_t, _QWORD))(v57 + 16))(v60, *(_QWORD *)(v55 + 24));
  v64 = v44;
  v45._countAndFlagsBits = 0x7461756C6176652ELL;
  v45._object = (void *)0xEA00000000002865;
  String.append(_:)(v45);
  v62 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v46 = BidirectionalCollection<>.joined(separator:)();
  v48 = v47;
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 41;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51 = v63;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v54);
  return v51;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.PredicateEvaluate<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(29);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, *(_QWORD *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001823047A0;
  v9._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

id createDescription<each A, B, C>(variable:expression:typeName:outputType:)(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Swift::String v76;
  unint64_t v77;
  Swift::String v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  Swift::String v98;
  Swift::String v99;
  id v100;
  void *v102;
  id v103;
  Swift::String v104;
  Swift::String v105;
  _QWORD v106[5];
  Swift::String v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  id v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v107._object = a7;
  v106[0] = a5;
  v109 = a4;
  v108 = a3;
  v10 = a1;
  v11 = *(_QWORD *)(a9 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v17)
  {
    v107._countAndFlagsBits = v12;
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8], &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
    v18 = v16[2];
    v19 = a6;
    do
    {
      v20 = **v10;
      v21 = v16[3];
      if (v18 >= v21 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v18 + 1, 1, v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
      v16[2] = v18 + 1;
      v16[v18 + 4] = v20;
      ++v10;
      ++v18;
      --v19;
    }
    while (v19);
  }
  (*(void (**)(char *, __n128))(v11 + 16))(v15, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression);
  if (!swift_dynamicCast())
    goto LABEL_60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v125, (uint64_t)&v128);
  if (a6)
  {
    v22 = (uint64_t *)((unint64_t)v107._object & 0xFFFFFFFFFFFFFFFELL);
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v24 = v23[2];
    do
    {
      v25 = v23[3];
      v26 = v24 + 1;
      if (v24 >= v25 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v24 + 1, 1, v23);
      v27 = *v22++;
      v23[2] = v26;
      v23[v24++ + 4] = v27;
      --a6;
    }
    while (a6);
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
    v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v26)
      goto LABEL_19;
  }
  *(_QWORD *)&v125 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
  v29 = 0;
  v28 = v125;
  do
  {
    v30 = _typeName(_:qualified:)();
    v32 = v31;
    *(_QWORD *)&v125 = v28;
    v34 = *(_QWORD *)(v28 + 16);
    v33 = *(_QWORD *)(v28 + 24);
    if (v34 >= v33 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      v28 = v125;
    }
    ++v29;
    *(_QWORD *)(v28 + 16) = v34 + 1;
    v35 = v28 + 16 * v34;
    *(_QWORD *)(v35 + 32) = v30;
    *(_QWORD *)(v35 + 40) = v32;
  }
  while (v26 != v29);
  swift_bridgeObjectRelease();
LABEL_19:
  *(_QWORD *)&v125 = v28;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v106[3] = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v107._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  v107._object = v37;
  swift_bridgeObjectRelease();
  v38 = swift_bridgeObjectRetain();
  v39 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n(v38);
  v106[2] = 0;
  v106[1] = v16;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v39 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    v40 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v41 = *(_QWORD *)(v39 + 16);
  }
  else
  {
    v41 = 0;
    v40 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v106[4] = v36;
  v118 = (uint64_t)v40;
  swift_bridgeObjectRetain_n();
  if (v41)
  {
    v42 = 0;
    v43 = (uint64_t *)(v39 + 48);
    while (v42 < *(_QWORD *)(v39 + 16))
    {
      v44 = *(v43 - 1);
      v45 = *v43;
      v46 = *(v43 - 2);
      swift_bridgeObjectRetain();
      if (!v45)
        goto LABEL_32;
      v114 = v46;
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
      v49 = v40[2];
      v50 = (v48 & 1) == 0;
      v51 = __OFADD__(v49, v50);
      v52 = v49 + v50;
      if (v51)
        goto LABEL_52;
      v53 = v48;
      if (v40[3] < v52)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, 1);
        v40 = (_QWORD *)v118;
        v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
        if ((v53 & 1) != (v54 & 1))
          goto LABEL_58;
      }
      if ((v53 & 1) != 0)
        goto LABEL_55;
      v40[(v47 >> 6) + 8] |= 1 << v47;
      *(_QWORD *)(v40[6] + 8 * v47) = v46;
      v55 = (_QWORD *)(v40[7] + 16 * v47);
      *v55 = v44;
      v55[1] = v45;
      v56 = v40[2];
      v51 = __OFADD__(v56, 1);
      v57 = v56 + 1;
      if (v51)
        goto LABEL_53;
      ++v42;
      v40[2] = v57;
      v43 += 3;
      if (v41 == v42)
        goto LABEL_32;
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    v102 = (void *)swift_allocError();
    swift_willThrow();
    v123 = v102;
    v103 = v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_59;
    *(_QWORD *)&v125 = 0;
    *((_QWORD *)&v125 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v104._object = (void *)0x80000001823049D0;
    v104._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v104);
    _print_unlocked<A, B>(_:_:)();
    v105._countAndFlagsBits = 39;
    v105._object = (void *)0xE100000000000000;
    String.append(_:)(v105);
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_58:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_59:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      swift_unexpectedError();
      __break(1u);
LABEL_60:
      v127 = 0;
      v125 = 0u;
      v126 = 0u;
      outlined destroy of Any?((uint64_t)&v125, &demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression?);
    }
  }
LABEL_32:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v125 = v40;
  *((_QWORD *)&v125 + 1) = 1;
  *(_QWORD *)&v126 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v126 + 1) = 1;
  v58 = swift_bridgeObjectRetain();
  v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF158variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n(v58, (uint64_t *)&v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v118 = v59;
  v60 = BidirectionalCollection<>.joined(separator:)();
  v62 = v61;
  swift_bridgeObjectRelease();
  v63 = v129;
  v64 = v130;
  __swift_project_boxed_opaque_existential_1(&v128, v129);
  v65 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v64 + 16))(&v125, v63, v64);
  v67 = v66;
  v68 = v126;
  v118 = v126;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v69 = BidirectionalCollection<>.joined(separator:)();
  v71 = v70;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v72 = (void *)(HIBYTE(v71) & 0xF);
  if ((v71 & 0x2000000000000000) == 0)
    v72 = (void *)(v69 & 0xFFFFFFFFFFFFLL);
  if (v72)
  {
    v118 = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v73 = BidirectionalCollection<>.joined(separator:)();
    v75 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v118 = v73;
    v119 = v75;
    v76._countAndFlagsBits = 10;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    v72 = (void *)v118;
    v77 = v119;
  }
  else
  {
    v77 = 0xE000000000000000;
  }
  v123 = v72;
  v124 = v77;
  if (v106[0] == MEMORY[0x1E0DEE9C0] + 8)
  {
    v79 = 0;
    v80 = (void *)0xE000000000000000;
  }
  else
  {
    v118 = 8236;
    v119 = 0xE200000000000000;
    v78._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    v79 = v118;
    v80 = (void *)v119;
  }
  v118 = 0;
  v119 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v81 = v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v122._countAndFlagsBits = v108;
  v122._object = v81;
  v82._countAndFlagsBits = 60;
  v82._object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = v79;
  v83._object = v80;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._countAndFlagsBits = 544940094;
  v84._object = (void *)0xE400000000000000;
  String.append(_:)(v84);
  v85._countAndFlagsBits = v60;
  v85._object = v62;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._countAndFlagsBits = 0x202020200A6E6920;
  v86._object = (void *)0xE800000000000000;
  String.append(_:)(v86);
  v87 = HIBYTE(v67) & 0xF;
  if ((v67 & 0x2000000000000000) == 0)
    v87 = v65;
  v88 = 7;
  if (((v67 >> 60) & ((v65 & 0x800000000000000) == 0)) != 0)
    v88 = 11;
  v89 = v88 | (v87 << 16);
  if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0)
    v90 = String.index(after:)();
  else
    v90 = 15;
  v91._countAndFlagsBits = 41;
  v91._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v91))
    v89 = String.index(before:)();
  if (v89 >> 14 < v90 >> 14)
    goto LABEL_54;
  v114 = String.subscript.getter();
  v115 = v92;
  v116 = v93;
  v117 = v94;
  v112 = 10;
  v113 = 0xE100000000000000;
  v110 = 0x202020200ALL;
  v111 = 0xE500000000000000;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  v95 = MEMORY[0x186DA4634](v118, v119, v120, v121);
  v97 = v96;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = v95;
  v98._object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease();
  v99._countAndFlagsBits = 32010;
  v99._object = (void *)0xE200000000000000;
  String.append(_:)(v99);
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v100 = v123;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v128);
  return v100;
}

id Predicate.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t j;
  int v26;
  uint64_t *v27;
  int v28;
  Swift::String v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD v39[3];
  uint64_t v40;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), a3, a4);
    v9 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (i = 0; i < v7; ++i)
      *(_QWORD *)&v13[8 * i] = type metadata accessor for PredicateExpressions.Variable(255, *(_QWORD *)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL) + 8 * i), v10, v11);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v9 = TupleTypeMetadata;
  }
  v15 = *(_QWORD *)(v9 - 8);
  v38 = &v34;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &v34;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v34 - v19;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v39);
  v21 = v40;
  v35 = __swift_project_boxed_opaque_existential_1(v39, v40);
  v36 = &v34;
  v22 = MEMORY[0x1E0C80A78](v35);
  v24 = (uint64_t **)((char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, v5 + *(int *)(a1 + 36), v9, v22);
  for (j = 0; j != v7; ++j)
  {
    if (v7 == 1)
      v26 = 0;
    else
      v26 = *(_DWORD *)(v9 + 24 + 16 * j + 8);
    v27 = (uint64_t *)&v20[v26];
    if (v7 == 1)
      v28 = 0;
    else
      v28 = *(_DWORD *)(v9 + 24 + 16 * j + 8);
    *v27 = *(_QWORD *)&v17[v28];
    v24[j] = v27;
  }
  v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Predicate", 9uLL, 1);
  v30 = *(void **)(a1 + 24);
  v31 = MEMORY[0x1E0DEE9C0] + 8;
  destructiveProjectEnumData for PredicateCodableError(v7, v30);
  v32 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)(v24, (uint64_t)v35, v29._countAndFlagsBits, v29._object, v31, v7, v30, v31, v21);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return v32;
}

id Expression.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t **v26;
  int *v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  _QWORD v34[3];
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 8 * v7;
  if (v7 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    v10 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v7)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v14 = (_QWORD *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = v7;
      do
      {
        v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v11, v12);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v10 = TupleTypeMetadata;
  }
  v17 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[2] = v34;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v34 - v21;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v35);
  v23 = v36;
  v34[0] = v37;
  v24 = __swift_project_boxed_opaque_existential_1(v35, v36);
  v34[1] = v34;
  v25 = MEMORY[0x1E0C80A78](v24);
  v26 = (uint64_t **)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v19, v5 + *(int *)(a1 + 44), v10, v25);
  if (v7)
  {
    v27 = (int *)(v10 + 32);
    v28 = v26;
    v29 = v7;
    do
    {
      if (v7 == 1)
      {
        LODWORD(v30) = 0;
        v31 = v22;
      }
      else
      {
        v30 = *v27;
        v31 = &v22[v30];
      }
      *(_QWORD *)v31 = *(_QWORD *)&v19[(int)v30];
      *v28++ = (uint64_t *)v31;
      v27 += 4;
      --v29;
    }
    while (v29);
  }
  v32 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)(v26, (uint64_t)v24, 0x6973736572707845, (void *)0xEA00000000006E6FLL, *(_QWORD *)(a1 + 32), v7, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v32;
}

uint64_t Predicate.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    v8 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v6)
    {
      v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v13 = (_QWORD *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      v14 = v6;
      do
      {
        v15 = *v12++;
        *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
        --v14;
      }
      while (v14);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = a1;
  v40[2] = v4;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v18, v4 + *(int *)(a1 + 36), v8, v16);
  if (v6)
  {
    v20 = (int *)(v8 + 32);
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = v6;
    do
    {
      if (v6 == 1)
        v23 = 0;
      else
        v23 = *v20;
      v41 = *(_QWORD **)&v18[v23];
      v42 = 0x656C626169726156;
      v43 = 0xE900000000000028;
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      v27 = v42;
      v26 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v21);
      v21[2] = v29 + 1;
      v30 = &v21[2 * v29];
      v30[4] = v27;
      v30[5] = v26;
      v20 += 4;
      --v22;
    }
    while (v22);
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v31._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x6C62616972617628;
  v32._object = (void *)0xEC00000028203A65;
  String.append(_:)(v32);
  v41 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v33 = BidirectionalCollection<>.joined(separator:)();
  v35 = v34;
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0x6572707865202C29;
  v37._object = (void *)0xEF203A6E6F697373;
  String.append(_:)(v37);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
  _print_unlocked<A, B>(_:_:)();
  v38._countAndFlagsBits = 41;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  return v42;
}

uint64_t Expression.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    v8 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v6)
    {
      v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v13 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      v14 = v6;
      do
      {
        v15 = *v12++;
        *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
        --v14;
      }
      while (v14);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  v43 = v4;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v18, v4 + *(int *)(a1 + 44), v8, v16);
  if (v6)
  {
    v20 = (int *)(v8 + 32);
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = v6;
    do
    {
      if (v6 == 1)
        v23 = 0;
      else
        v23 = *v20;
      v44 = *(_QWORD **)&v18[v23];
      v45 = 0x656C626169726156;
      v46 = 0xE900000000000028;
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      v27 = v45;
      v26 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v21);
      v21[2] = v29 + 1;
      v30 = &v21[2 * v29];
      v30[4] = v27;
      v30[5] = v26;
      v20 += 4;
      --v22;
    }
    while (v22);
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v31 = v42;
  v32._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6C62616972617628;
  v33._object = (void *)0xEC00000028203A65;
  String.append(_:)(v33);
  v44 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v34 = BidirectionalCollection<>.joined(separator:)();
  v36 = v35;
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x6572707865202C29;
  v38._object = (void *)0xEF203A6E6F697373;
  String.append(_:)(v38);
  v44 = *(_QWORD **)(v31 + 32);
  swift_getExtendedExistentialTypeMetadata();
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 41;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  return v45;
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1819B9A38()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1819B9B3C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;

  Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    v5 = 10;
    if (a2 < 10)
      v5 = a2;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    MEMORY[0x186DA4928](103, 0xE100000000000000, v6);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v5;
  uint64_t v6;

  Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    v5 = 10;
    if (a2 < 10)
      v5 = a2;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    MEMORY[0x186DA4928](89, 0xE100000000000000, v6);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1819B9CDC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1819B9D90()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1819B9EF4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v2;

  v2 = specialized RawRepresentable<>._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t *a1)
{
  Swift::UInt8 v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::Int v34;
  _BYTE v36[144];
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE v55[72];
  _BYTE v56[144];
  _BYTE v57[152];

  Hasher.init(_seed:)();
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v37, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37[0] == 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = v37[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    v8 = v37;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  v4 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v36, &demangling cache variable for type metadata for LocalePreferences?);
    v8 = v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v6 = v41;
    if (!v41)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    v7 = v42;
    if (!v42)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = v41;
  if (v41)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  v10 = v43;
  v9 = v44;
  v12 = v45;
  v11 = v46;
  v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v14 = v9;
    v15 = v12;
    v16 = v11;
    v17 = v13;
    v18 = v10;
    _CFObject.hash(into:)();
    if (v9)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v23 = v13;
    v24 = v9;
    v25 = v12;
    v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v19 = v9;
      _CFObject.hash(into:)();

      if (v12)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v12;
    _CFObject.hash(into:)();

    if (v11)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v11)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v22 = 0;
LABEL_33:

  v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    v28 = v49;
    if (v49)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v28 = v49;
  if (!v49)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v53 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    v32 = 0;
  }
  else
  {
    v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

{
  Swift::UInt8 v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::Int v34;
  _BYTE v36[144];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE v55[72];
  _BYTE v56[144];
  _BYTE v57[152];

  Hasher.init(_seed:)();
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_53;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)&v37, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = v37 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  v3 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v37);
    v8 = &v37;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  v4 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (!v4)
  {
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v36, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v8 = (uint64_t *)v36;
LABEL_17:
    outlined retain of LocalePreferences(v8);
    if (!v39)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v5 = v3 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v6 = v41;
    if (!v41)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    v7 = v42;
    if (!v42)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = v41;
  if (v41)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  v10 = v43;
  v9 = v44;
  v12 = v45;
  v11 = v46;
  v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v14 = v9;
    v15 = v12;
    v16 = v11;
    v17 = v13;
    v18 = v10;
    _CFObject.hash(into:)();
    if (v9)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v23 = v13;
    v24 = v9;
    v25 = v12;
    v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v19 = v9;
      _CFObject.hash(into:)();

      if (v12)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v12;
    _CFObject.hash(into:)();

    if (v11)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v11)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v22 = 0;
LABEL_33:

  v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    v28 = v49;
    if (v49)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v28 = v49;
  if (!v49)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v53 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    v32 = 0;
  }
  else
  {
    v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *__src)
{
  Swift::Int v2;
  _BYTE v4[72];
  _BYTE __dst[352];

  memcpy(__dst, __src, sizeof(__dst));
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__src, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 *a1)
{
  Swift::UInt v2;
  Swift::Int v3;
  _BYTE __dst[352];
  _BYTE v6[72];

  Hasher.init(_seed:)();
  memcpy(__dst, a1, sizeof(__dst));
  v2 = a1[352];
  Locale.Components.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::Int v44;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  _QWORD v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[72];
  __int128 v69;
  _OWORD v70[2];

  Hasher.init(_seed:)();
  v2 = *((_QWORD *)a1 + 1);
  Hasher._combine(_:)(*a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v68, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v3 = *((_OWORD *)a1 + 1);
  v69 = *((_OWORD *)a1 + 2);
  v70[0] = v3;
  v4 = *((_QWORD *)&v3 + 1);
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 120);
  outlined retain of Locale((uint64_t)v70);
  v6(v68, ObjectType, v4);
  outlined release of Locale((uint64_t)v70);
  v7 = *((_QWORD *)&v69 + 1);
  v8 = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  outlined retain of Locale((uint64_t)&v69);
  if ((v9(v8, v7) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v8, v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  outlined retain of Locale((uint64_t)&v69);
  v11(v65, v8, v7);
  outlined release of Locale((uint64_t)&v69);
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    v18 = v47;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
    v18 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v16 = v51;
    if (!v51)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
    v17 = v52;
    if (!v52)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v16 = v51;
  if (v51)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v17 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  v20 = v53;
  v19 = v54;
  v22 = v55;
  v21 = v56;
  v23 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v19;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    v28 = v20;
    _CFObject.hash(into:)();
    if (v19)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v33 = v23;
    v34 = v19;
    v35 = v22;
    v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v29 = v19;
      _CFObject.hash(into:)();

      if (v22)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v22;
    _CFObject.hash(into:)();

    if (v21)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v32 = 0;
LABEL_39:

  v37 = v58;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v37);
    swift_bridgeObjectRelease();
    v38 = v59;
    if (v59)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v38 = v59;
  if (!v59)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v38);
  swift_bridgeObjectRelease();
  if (!v60)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v63 == 2)
  {
    v41 = 0;
  }
  else
  {
    v41 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v64 == 2)
  {
    v42 = 0;
  }
  else
  {
    v43 = v64 & 1;
    Hasher._combine(_:)(1u);
    v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  outlined release of Locale((uint64_t)&v69);
  Hasher._combine(_:)(a1[48] & 1);
  v44 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v44);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned int a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)((a2 >> 8) & 1);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x101, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((a3 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(HIDWORD(a4));
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, v8);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  int v5;
  Swift::Int v6;
  uint64_t result;

  v5 = a3;
  Hasher.init(_seed:)();
  if (v5)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, 0);
    v6 = Hasher._finalize()();
    return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, 0, v6);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3 & 1);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = *(_QWORD *)&aSun_1[8 * a1];
    while (*(_QWORD *)&aSun_1[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4)] != v6)
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v7 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  id v36;
  char v37;
  id v38;
  char v39;
  id v40;
  char v41;
  char v42;
  id v43;
  id v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD v84[17];
  char v85;
  char v86;
  char v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[28];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[28];
  _BYTE v105[144];
  uint64_t v106;
  _BYTE v107[29];
  __int128 v108;
  _OWORD v109[7];
  _OWORD v110[2];
  _BYTE v111[152];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v83 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return v4;
  v5 = v2;
  v6 = ~v3;
  v7 = *a1;
  v8 = a1[1];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v111, &demangling cache variable for type metadata for LocalePreferences?);
  while (1)
  {
    v9 = (__int128 *)(*(_QWORD *)(v5 + 48) + 160 * v4);
    v10 = v9[1];
    v108 = *v9;
    v109[0] = v10;
    v11 = v9[4];
    v13 = v9[2];
    v12 = v9[3];
    v109[4] = v9[5];
    v109[3] = v11;
    v109[1] = v13;
    v109[2] = v12;
    v15 = v9[7];
    v14 = v9[8];
    v16 = v9[6];
    *(_OWORD *)((char *)v110 + 12) = *(__int128 *)((char *)v9 + 140);
    v110[0] = v14;
    v109[5] = v16;
    v109[6] = v15;
    if (v108 != __PAIR128__(v8, v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_5;
    outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v105) == 1)
        return v4;
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)&v97, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v105) == 1)
    {
      v95 = v103;
      *(_OWORD *)v96 = *(_OWORD *)v104;
      *(_OWORD *)&v96[12] = *(_OWORD *)&v104[12];
      v91 = v99;
      v92 = v100;
      v93 = v101;
      v94 = v102;
      v89 = v97;
      v90 = v98;
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined release of LocalePreferences(&v89);
LABEL_4:
      outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v106, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v105);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v111, (uint64_t)&v89, &demangling cache variable for type metadata for LocalePreferences?);
    v17 = v97;
    v18 = *((_QWORD *)&v97 + 1);
    v82 = *((_QWORD *)&v98 + 1);
    v80 = v98;
    v81 = *((_QWORD *)&v99 + 1);
    v78 = v99;
    v79 = v100;
    v76 = (void *)v101;
    v77 = *((_QWORD *)&v100 + 1);
    v74 = (void *)v102;
    v75 = (void *)*((_QWORD *)&v101 + 1);
    v72 = (void *)v103;
    v73 = (void *)*((_QWORD *)&v102 + 1);
    v70 = *(_QWORD *)v104;
    v71 = *((_QWORD *)&v103 + 1);
    v67 = *(_QWORD *)&v104[8];
    v69 = *(_QWORD *)&v104[16];
    v68 = v104[24];
    v65 = v104[26];
    v66 = v104[25];
    v64 = v104[27];
    if (v97 == 2)
    {
      if (v89 != 2)
        goto LABEL_50;
    }
    else if (v89 == 2 || ((((v97 & 1) == 0) ^ v89) & 1) == 0)
    {
LABEL_50:
      v33 = v18;
LABEL_51:
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v31 = v33;
LABEL_52:
      LOBYTE(v32) = 0;
      goto LABEL_53;
    }
    v19 = *((_QWORD *)&v89 + 1);
    if (!*((_QWORD *)&v97 + 1))
    {
      v61 = v6;
      if (*((_QWORD *)&v89 + 1))
      {
        v31 = *((_QWORD *)&v97 + 1);
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
LABEL_36:
        LOBYTE(v32) = 0;
        v6 = v61;
        goto LABEL_53;
      }
      goto LABEL_37;
    }
    if (!*((_QWORD *)&v89 + 1))
      goto LABEL_50;
    v20 = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 16);
    if (v20 != *(_QWORD *)(*((_QWORD *)&v89 + 1) + 16))
    {
      v31 = *((_QWORD *)&v97 + 1);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      goto LABEL_52;
    }
    v61 = v6;
    if (v20 && *((_QWORD *)&v97 + 1) != *((_QWORD *)&v89 + 1))
    {
      result = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 32);
      if (*(_OWORD *)(*((_QWORD *)&v97 + 1) + 32) != *(_OWORD *)(*((_QWORD *)&v89 + 1) + 32))
      {
        v22 = *((_QWORD *)&v97 + 1);
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v18 = v22;
        if ((result & 1) == 0)
        {
          outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
          outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          v31 = v22;
          goto LABEL_36;
        }
      }
      v23 = v20 - 1;
      if (v20 != 1)
        break;
    }
LABEL_37:
    if (v82)
    {
      v6 = v61;
      if (!*((_QWORD *)&v90 + 1))
        goto LABEL_50;
      if (__PAIR128__(v82, v80) != v90)
      {
        v33 = v18;
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v18 = v33;
        if ((v34 & 1) == 0)
          goto LABEL_51;
      }
    }
    else
    {
      v6 = v61;
      if (*((_QWORD *)&v90 + 1))
        goto LABEL_50;
    }
    if (v81)
    {
      if (!*((_QWORD *)&v91 + 1))
        goto LABEL_50;
      if (__PAIR128__(v81, v78) != v91)
      {
        v33 = v18;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v18 = v33;
        if ((v35 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (*((_QWORD *)&v91 + 1))
    {
      goto LABEL_50;
    }
    v60 = v18;
    if (v79)
    {
      if (!(_QWORD)v92 || (specialized static Dictionary<>.== infix(_:_:)(v79, v92) & 1) == 0)
      {
LABEL_69:
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
LABEL_70:
        LOBYTE(v32) = 0;
        v31 = v60;
        goto LABEL_53;
      }
    }
    else if ((_QWORD)v92)
    {
      goto LABEL_69;
    }
    if (v77)
    {
      if (!*((_QWORD *)&v92 + 1)
        || (specialized static Dictionary<>.== infix(_:_:)(v77, *((uint64_t *)&v92 + 1)) & 1) == 0)
      {
        goto LABEL_69;
      }
    }
    else if (*((_QWORD *)&v92 + 1))
    {
      goto LABEL_69;
    }
    v62 = (void *)*((_QWORD *)&v93 + 1);
    v32 = v93;
    if (v76)
    {
      if (!(_QWORD)v93)
      {
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        v31 = v60;
        goto LABEL_53;
      }
      v54 = (void *)*((_QWORD *)&v94 + 1);
      v57 = (void *)v94;
      v53 = (void *)v95;
      type metadata accessor for CFDictionaryRef(0);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v36 = (id)v32;
      v50 = v76;
      v37 = static _CFObject.== infix(_:_:)();

      if ((v37 & 1) == 0)
        goto LABEL_70;
    }
    else
    {
      v54 = (void *)*((_QWORD *)&v94 + 1);
      v57 = (void *)v94;
      v53 = (void *)v95;
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      if (v32)
        goto LABEL_70;
    }
    if (v75)
    {
      if (!v62)
        goto LABEL_70;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v38 = v62;
      v63 = v75;
      v39 = static _CFObject.== infix(_:_:)();

      if ((v39 & 1) == 0)
        goto LABEL_70;
    }
    else if (v62)
    {
      goto LABEL_70;
    }
    v31 = v60;
    if (v74)
    {
      if (!v57)
        goto LABEL_52;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v40 = v57;
      v58 = v74;
      v41 = static _CFObject.== infix(_:_:)();

      v31 = v60;
      if ((v41 & 1) == 0)
        goto LABEL_52;
    }
    else if (v57)
    {
      goto LABEL_52;
    }
    if (v73)
    {
      LOBYTE(v32) = (_BYTE)v54;
      if (!v54)
      {
        v31 = v60;
        goto LABEL_53;
      }
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v59 = v54;
      v55 = v73;
      v42 = static _CFObject.== infix(_:_:)();

      if ((v42 & 1) == 0)
        goto LABEL_70;
    }
    else if (v54)
    {
      goto LABEL_70;
    }
    v51 = v7;
    v52 = v8;
    v56 = v5;
    if (v72)
    {
      if (!v53)
        goto LABEL_109;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v43 = v53;
      v44 = v72;
      v45 = static _CFObject.== infix(_:_:)();

      if ((v45 & 1) == 0)
        goto LABEL_109;
    }
    else if (v53)
    {
      goto LABEL_109;
    }
    v32 = *((_QWORD *)&v95 + 1);
    if (v71)
    {
      if (!*((_QWORD *)&v95 + 1))
        goto LABEL_110;
      swift_bridgeObjectRetain();
      v46 = swift_bridgeObjectRetain();
      v47 = specialized static Dictionary<>.== infix(_:_:)(v46, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
        goto LABEL_109;
    }
    else if (*((_QWORD *)&v95 + 1))
    {
      goto LABEL_109;
    }
    v32 = *(_QWORD *)v96;
    if (v70)
    {
      if (!*(_QWORD *)v96)
        goto LABEL_110;
      swift_bridgeObjectRetain();
      v48 = swift_bridgeObjectRetain();
      v49 = specialized static Dictionary<>.== infix(_:_:)(v48, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
      {
LABEL_109:
        LOBYTE(v32) = 0;
LABEL_110:
        v31 = v60;
        v5 = v56;
        v7 = v51;
        v8 = v52;
        goto LABEL_53;
      }
    }
    else if (*(_QWORD *)v96)
    {
      goto LABEL_109;
    }
    if (!v69)
    {
      v31 = v60;
      v5 = v56;
      v7 = v51;
      v8 = v52;
      if (*(_QWORD *)&v96[16])
        goto LABEL_52;
LABEL_112:
      if (v68 == 2)
      {
        v5 = v56;
        v7 = v51;
        v8 = v52;
        if (v96[24] != 2)
          goto LABEL_52;
        goto LABEL_117;
      }
      LOBYTE(v32) = 0;
      if (v96[24] != 2)
      {
        v5 = v56;
        v7 = v51;
        v8 = v52;
        if (((v96[24] ^ v68) & 1) != 0)
          goto LABEL_53;
LABEL_117:
        if (v66 == 2)
        {
          v5 = v56;
          v7 = v51;
          v8 = v52;
          if (v96[25] != 2)
            goto LABEL_52;
          goto LABEL_122;
        }
        LOBYTE(v32) = 0;
        if (v96[25] != 2)
        {
          v5 = v56;
          v7 = v51;
          v8 = v52;
          if (((v96[25] ^ v66) & 1) != 0)
            goto LABEL_53;
LABEL_122:
          if (v65 == 2)
          {
            v5 = v56;
            v7 = v51;
            v8 = v52;
            if (v96[26] != 2)
              goto LABEL_52;
            goto LABEL_127;
          }
          LOBYTE(v32) = 0;
          if (v96[26] != 2)
          {
            v5 = v56;
            v7 = v51;
            v8 = v52;
            if (((((v65 & 1) == 0) ^ v96[26]) & 1) == 0)
              goto LABEL_53;
LABEL_127:
            if (v64 == 2)
            {
              v5 = v56;
              v7 = v51;
              v8 = v52;
              if (v96[27] != 2)
                goto LABEL_52;
LABEL_132:
              LOBYTE(v32) = 1;
              goto LABEL_53;
            }
            LOBYTE(v32) = 0;
            if (v96[27] != 2)
            {
              v5 = v56;
              v7 = v51;
              v8 = v52;
              if (((((v64 & 1) == 0) ^ v96[27]) & 1) == 0)
                goto LABEL_53;
              goto LABEL_132;
            }
          }
        }
      }
      v5 = v56;
      v7 = v51;
      v8 = v52;
      goto LABEL_53;
    }
    if (!*(_QWORD *)&v96[16])
      goto LABEL_109;
    v31 = v60;
    v5 = v56;
    v7 = v51;
    v8 = v52;
    if (__PAIR128__(v69, v67) == *(_OWORD *)&v96[8])
      goto LABEL_112;
    LOBYTE(v32) = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_112;
LABEL_53:
    LOBYTE(v84[0]) = v17;
    v84[1] = v31;
    v84[2] = v80;
    v84[3] = v82;
    v84[4] = v78;
    v84[5] = v81;
    v84[6] = v79;
    v84[7] = v77;
    v84[8] = v76;
    v84[9] = v75;
    v84[10] = v74;
    v84[11] = v73;
    v84[12] = v72;
    v84[13] = v71;
    v84[14] = v70;
    v84[15] = v67;
    v84[16] = v69;
    v85 = v68;
    v86 = v66;
    v87 = v65;
    v88 = v64;
    outlined release of LocalePreferences(v84);
    outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
    if ((v32 & 1) != 0)
      return v4;
LABEL_5:
    v4 = (v4 + 1) & v6;
    if (((*(_QWORD *)(v83 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      return v4;
  }
  v24 = (_QWORD *)(v19 + 56);
  v25 = (_QWORD *)(v18 + 56);
  while (v23)
  {
    v26 = v7;
    v27 = v8;
    v28 = v5;
    v29 = v17;
    result = *(v25 - 1);
    if (result != *(v24 - 1) || *v25 != *v24)
    {
      v17 = v18;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v18 = v17;
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        v31 = v17;
        LOBYTE(v32) = 0;
        v6 = v61;
        LOBYTE(v17) = v29;
        v5 = v28;
        v8 = v27;
        v7 = v26;
        goto LABEL_53;
      }
    }
    v24 += 2;
    v25 += 2;
    --v23;
    v17 = v29;
    v5 = v28;
    v8 = v27;
    v7 = v26;
    if (!v23)
      goto LABEL_37;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  id v32;
  char v33;
  id v34;
  char v35;
  id v36;
  char v37;
  id v38;
  char v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  int v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD v81[15];
  __int128 v82;
  char v83;
  char v84;
  char v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[28];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];
  _BYTE v103[144];
  uint64_t v104;
  _BYTE v105[45];
  __int128 v106;
  __int128 v107;
  _OWORD v108[7];
  _OWORD v109[2];
  _BYTE v110[152];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    return v5;
  v6 = v2;
  v7 = ~v4;
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
  v80 = v10;
  v58 = v11;
  v59 = v7;
  while (1)
  {
    v12 = (__int128 *)(*(_QWORD *)(v6 + 48) + 176 * v5);
    v14 = v12[1];
    v13 = v12[2];
    v106 = *v12;
    v107 = v14;
    v108[0] = v13;
    v15 = v12[5];
    v17 = v12[3];
    v16 = v12[4];
    v108[4] = v12[6];
    v108[3] = v15;
    v108[1] = v17;
    v108[2] = v16;
    v19 = v12[8];
    v18 = v12[9];
    v20 = v12[7];
    *(_OWORD *)((char *)v109 + 12) = *(__int128 *)((char *)v12 + 156);
    v109[0] = v18;
    v108[5] = v20;
    v108[6] = v19;
    if (v106 != __PAIR128__(v9, v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || v107 != __PAIR128__(v11, v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v108, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v105) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
        return v5;
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v108, (uint64_t)&v95, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
    {
      v93 = v101;
      *(_OWORD *)v94 = *(_OWORD *)v102;
      *(_OWORD *)&v94[12] = *(_OWORD *)&v102[12];
      v89 = v97;
      v90 = v98;
      v91 = v99;
      v92 = v100;
      v87 = v95;
      v88 = v96;
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      outlined release of LocalePreferences(&v87);
LABEL_4:
      outlined init with take of LocalePreferences?((uint64_t)v108, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v104, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v103);
      outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      v10 = v80;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v87, &demangling cache variable for type metadata for LocalePreferences?);
    v21 = (uint64_t *)*((_QWORD *)&v95 + 1);
    v79 = *((_QWORD *)&v96 + 1);
    v75 = v97;
    v77 = v96;
    v78 = *((_QWORD *)&v97 + 1);
    v76 = v98;
    v72 = (void *)v99;
    v73 = *((_QWORD *)&v98 + 1);
    v70 = (void *)v100;
    v71 = (void *)*((_QWORD *)&v99 + 1);
    v68 = (void *)v101;
    v69 = (void *)*((_QWORD *)&v100 + 1);
    v66 = *(_QWORD *)v102;
    v67 = *((_QWORD *)&v101 + 1);
    v65 = *(_OWORD *)&v102[8];
    v63 = v102[25];
    v64 = v102[24];
    v61 = v102[27];
    v62 = v102[26];
    v60 = v95;
    v74 = (uint64_t *)*((_QWORD *)&v95 + 1);
    if (v95 == 2)
    {
      if (v87 != 2)
        goto LABEL_68;
    }
    else if (v87 == 2 || ((((v95 & 1) == 0) ^ v87) & 1) == 0)
    {
LABEL_68:
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
LABEL_69:
      LOBYTE(v22) = 0;
      goto LABEL_70;
    }
    v22 = *((_QWORD *)&v87 + 1);
    if (!*((_QWORD *)&v95 + 1))
    {
      v54 = v3;
      if (*((_QWORD *)&v87 + 1))
        goto LABEL_33;
      goto LABEL_42;
    }
    if (!*((_QWORD *)&v87 + 1))
      goto LABEL_66;
    v23 = *(_QWORD *)(*((_QWORD *)&v95 + 1) + 16);
    if (v23 != *(_QWORD *)(*((_QWORD *)&v87 + 1) + 16))
      goto LABEL_68;
    v54 = v3;
    if (v23)
    {
      if (*((_QWORD *)&v95 + 1) != *((_QWORD *)&v87 + 1))
      {
        if (*(_OWORD *)(*((_QWORD *)&v95 + 1) + 32) != *(_OWORD *)(*((_QWORD *)&v87 + 1) + 32))
        {
          v24 = *(_QWORD *)(*((_QWORD *)&v95 + 1) + 16);
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v23 = v24;
          v21 = v74;
          if ((v25 & 1) == 0)
            goto LABEL_33;
        }
        if (v23 != 1)
        {
          result = v21[6];
          if (result != *(_QWORD *)(v22 + 48) || v21[7] != *(_QWORD *)(v22 + 56))
          {
            v27 = v23;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v23 = v27;
            v21 = v74;
            if ((result & 1) == 0)
            {
LABEL_33:
              outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
              LOBYTE(v22) = 0;
              v3 = v54;
              goto LABEL_70;
            }
          }
          v28 = v23 - 2;
          if (v23 != 2)
            break;
        }
      }
    }
LABEL_42:
    if (v79)
    {
      v3 = v54;
      if (!*((_QWORD *)&v88 + 1)
        || __PAIR128__(v79, v77) != v88 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_68;
      }
    }
    else
    {
      v3 = v54;
      if (*((_QWORD *)&v88 + 1))
        goto LABEL_68;
    }
    if (v78)
    {
      if (!*((_QWORD *)&v89 + 1)
        || __PAIR128__(v78, v75) != v89 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_68;
      }
    }
    else if (*((_QWORD *)&v89 + 1))
    {
      goto LABEL_68;
    }
    if (v76)
    {
      if (!(_QWORD)v90 || (specialized static Dictionary<>.== infix(_:_:)(v76, v90) & 1) == 0)
        goto LABEL_68;
    }
    else if ((_QWORD)v90)
    {
      goto LABEL_68;
    }
    if (v73)
    {
      if (!*((_QWORD *)&v90 + 1)
        || (specialized static Dictionary<>.== infix(_:_:)(v73, *((uint64_t *)&v90 + 1)) & 1) == 0)
      {
        goto LABEL_68;
      }
    }
    else if (*((_QWORD *)&v90 + 1))
    {
      goto LABEL_68;
    }
    v55 = (void *)*((_QWORD *)&v91 + 1);
    v22 = v91;
    if (v72)
    {
      if (!(_QWORD)v91)
      {
LABEL_66:
        outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
        goto LABEL_70;
      }
      v50 = (void *)*((_QWORD *)&v92 + 1);
      v51 = (void *)v92;
      v49 = (void *)v93;
      type metadata accessor for CFDictionaryRef(0);
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v32 = (id)v22;
      v48 = v72;
      v33 = static _CFObject.== infix(_:_:)();

      if ((v33 & 1) == 0)
        goto LABEL_92;
    }
    else
    {
      v50 = (void *)*((_QWORD *)&v92 + 1);
      v51 = (void *)v92;
      v49 = (void *)v93;
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      if (v22)
        goto LABEL_69;
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    }
    if (v71)
    {
      if (!v55
        || (type metadata accessor for CFDictionaryRef(0),
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef), v34 = v55, v56 = v71, v35 = static _CFObject.== infix(_:_:)(), v56, v34, (v35 & 1) == 0))
      {
LABEL_92:
        outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_69;
      }
    }
    else if (v55)
    {
      goto LABEL_92;
    }
    if (v70)
    {
      if (!v51)
        goto LABEL_92;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v36 = v51;
      v52 = v70;
      v37 = static _CFObject.== infix(_:_:)();

      if ((v37 & 1) == 0)
        goto LABEL_92;
    }
    else if (v51)
    {
      goto LABEL_92;
    }
    if (v69)
    {
      if (!v50)
        goto LABEL_92;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v38 = v50;
      v53 = v69;
      v39 = static _CFObject.== infix(_:_:)();

      if ((v39 & 1) == 0)
        goto LABEL_92;
    }
    else if (v50)
    {
      goto LABEL_92;
    }
    v57 = v3;
    if (v68)
    {
      if (!v49)
        goto LABEL_119;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v40 = v49;
      v41 = v68;
      v42 = static _CFObject.== infix(_:_:)();

      if ((v42 & 1) == 0)
        goto LABEL_119;
    }
    else if (v49)
    {
      goto LABEL_119;
    }
    v22 = *((_QWORD *)&v93 + 1);
    if (v67)
    {
      if (!*((_QWORD *)&v93 + 1))
        goto LABEL_103;
      swift_bridgeObjectRetain();
      v43 = swift_bridgeObjectRetain();
      v44 = specialized static Dictionary<>.== infix(_:_:)(v43, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
      {
LABEL_119:
        outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_120:
        LOBYTE(v22) = 0;
LABEL_121:
        v3 = v57;
        v10 = v80;
        goto LABEL_70;
      }
    }
    else if (*((_QWORD *)&v93 + 1))
    {
      goto LABEL_119;
    }
    v22 = *(_QWORD *)v94;
    if (v66)
    {
      if (!*(_QWORD *)v94)
      {
LABEL_103:
        outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_121;
      }
      swift_bridgeObjectRetain();
      v45 = swift_bridgeObjectRetain();
      v46 = specialized static Dictionary<>.== infix(_:_:)(v45, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0)
        goto LABEL_119;
    }
    else if (*(_QWORD *)v94)
    {
      goto LABEL_119;
    }
    if (*((_QWORD *)&v65 + 1))
    {
      if (!*(_QWORD *)&v94[16] || v65 != *(_OWORD *)&v94[8] && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_119;
    }
    else if (*(_QWORD *)&v94[16])
    {
      goto LABEL_119;
    }
    if (v64 == 2)
    {
      if (v94[24] != 2)
        goto LABEL_119;
    }
    else if (v94[24] == 2 || ((v94[24] ^ v64) & 1) != 0)
    {
      goto LABEL_119;
    }
    v47 = v94[25];
    if (v63 == 2)
    {
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      if (v47 != 2)
        goto LABEL_120;
    }
    else
    {
      outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      if (v47 == 2 || ((v47 ^ v63) & 1) != 0)
        goto LABEL_120;
    }
    if (v62 == 2)
    {
      v3 = v57;
      v10 = v80;
      if (v94[26] != 2)
        goto LABEL_69;
    }
    else
    {
      LOBYTE(v22) = 0;
      if (v94[26] == 2)
        goto LABEL_121;
      v3 = v57;
      v10 = v80;
      if (((((v62 & 1) == 0) ^ v94[26]) & 1) == 0)
        goto LABEL_70;
    }
    if (v61 == 2)
    {
      v3 = v57;
      v10 = v80;
      if (v94[27] == 2)
        goto LABEL_134;
      goto LABEL_69;
    }
    LOBYTE(v22) = 0;
    if (v94[27] == 2)
      goto LABEL_121;
    v3 = v57;
    v10 = v80;
    if (((((v61 & 1) == 0) ^ v94[27]) & 1) != 0)
LABEL_134:
      LOBYTE(v22) = 1;
LABEL_70:
    LOBYTE(v81[0]) = v60;
    v81[1] = v74;
    v81[2] = v77;
    v81[3] = v79;
    v81[4] = v75;
    v81[5] = v78;
    v81[6] = v76;
    v81[7] = v73;
    v81[8] = v72;
    v81[9] = v71;
    v81[10] = v70;
    v81[11] = v69;
    v81[12] = v68;
    v81[13] = v67;
    v81[14] = v66;
    v82 = v65;
    v83 = v64;
    v84 = v63;
    v85 = v62;
    v86 = v61;
    outlined release of LocalePreferences(v81);
    outlined retain of LocalePreferences?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
    if ((v22 & 1) != 0)
      return v5;
    v11 = v58;
    v7 = v59;
LABEL_5:
    v5 = (v5 + 1) & v7;
    if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      return v5;
  }
  v29 = (_QWORD *)(v22 + 72);
  v30 = v21 + 9;
  while (v28)
  {
    result = *(v30 - 1);
    if (result != *(v29 - 1) || *v30 != *v29)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
        goto LABEL_33;
    }
    v29 += 2;
    v30 += 2;
    if (!--v28)
      goto LABEL_42;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *__src, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[352];
  _BYTE __dst[352];

  memcpy(__dst, __src, sizeof(__dst));
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    memcpy(v7, (const void *)(*(_QWORD *)(v2 + 48) + 352 * v5), sizeof(v7));
    while (!specialized static Locale.Components.== infix(_:_:)((uint64_t)v7, (uint64_t)__dst))
    {
      v5 = (v5 + 1) & ~v4;
      if ((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) & (1 << v5)) == 0)
        break;
      memcpy(v7, (const void *)(*(_QWORD *)(v2 + 48) + 352 * v5), sizeof(v7));
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      if (!((*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1) | (a2 ^ *(unsigned __int8 *)(*(_QWORD *)(v3 + 48)
                                                                                                + 16 * result
                                                                                                + 8)) & 1 | (*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 16 * result + 9) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1))
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v16 = (_QWORD *)(v14 + 32 * v8);
      v18 = v16[2];
      v17 = v16[3];
      v19 = *v16 == a1 && v16[1] == a2;
      if ((v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v18 == a3 && v17 == a4)
        break;
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v38;
  uint64_t v39;
  char v40;
  _BYTE *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  id v43;
  uint64_t v44;
  void *v45;
  char v46;
  id v47;
  char v48;
  id v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  char *v60;
  id v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _OWORD v84[7];
  _OWORD v85[2];
  _QWORD v86[17];
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  char *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[2];
  _BYTE v120[144];
  uint64_t v121;
  _BYTE v122[144];
  _BYTE v123[144];
  _BYTE v124[152];

  v3 = v2;
  v6 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return v11;
  v12 = ~v10;
  v13 = *(_QWORD *)(v7 + 72);
  v83 = &v121;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v3 + 48) + v13 * v11, (uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    if (!specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v9, a1))
      goto LABEL_5;
    v14 = v6[5];
    v15 = *(_QWORD *)&v9[v14];
    v16 = *(_QWORD *)&v9[v14 + 8];
    v17 = (_QWORD *)(a1 + v14);
    v18 = v15 == *v17 && v16 == v17[1];
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_5;
    v19 = v6[6];
    v20 = *(_QWORD *)&v9[v19];
    v21 = *(_QWORD *)&v9[v19 + 8];
    v22 = (_QWORD *)(a1 + v19);
    v23 = v20 == *v22 && v21 == v22[1];
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_5;
    outlined init with take of LocalePreferences?((uint64_t)&v9[v6[7]], (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a1 + v6[7], (uint64_t)v123, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v124, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v124) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v123, (uint64_t)v120, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v120) == 1)
        goto LABEL_154;
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)&v112, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v123, (uint64_t)v120, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v120) == 1)
    {
      v84[6] = v118;
      v85[0] = v119[0];
      *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)((char *)v119 + 12);
      v84[2] = v114;
      v84[3] = v115;
      v84[4] = v116;
      v84[5] = v117;
      v84[0] = v112;
      v84[1] = v113;
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)&v91, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v91);
      outlined retain of LocalePreferences(v86);
      outlined release of LocalePreferences(v84);
LABEL_4:
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v120, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v123, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v120);
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v123, (uint64_t)&v91, &demangling cache variable for type metadata for LocalePreferences?);
    v24 = (uint64_t *)*((_QWORD *)&v112 + 1);
    v82 = *((_QWORD *)&v113 + 1);
    v78 = v114;
    v80 = v113;
    v81 = *((_QWORD *)&v114 + 1);
    v79 = v115;
    v75 = (id)v116;
    v76 = *((_QWORD *)&v115 + 1);
    v73 = (id)v117;
    v74 = (id)*((_QWORD *)&v116 + 1);
    v71 = (id)v118;
    v72 = (id)*((_QWORD *)&v117 + 1);
    v69 = *(_QWORD *)&v119[0];
    v70 = *((_QWORD *)&v118 + 1);
    v67 = *((_QWORD *)&v119[0] + 1);
    v68 = *(_QWORD *)&v119[1];
    v65 = BYTE9(v119[1]);
    v66 = BYTE8(v119[1]);
    v62 = BYTE11(v119[1]);
    v63 = BYTE10(v119[1]);
    v64 = v112;
    v77 = (uint64_t *)*((_QWORD *)&v112 + 1);
    if (v112 == 2)
    {
      if (v91 != 2)
        goto LABEL_39;
    }
    else if (v91 == 2 || ((((v112 & 1) == 0) ^ v91) & 1) == 0)
    {
LABEL_39:
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v86);
      v34 = v84;
LABEL_40:
      outlined retain of LocalePreferences(v34);
      goto LABEL_41;
    }
    v25 = v92;
    if (!*((_QWORD *)&v112 + 1))
    {
      v61 = (id)v12;
      if (!v92)
        goto LABEL_57;
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v86);
      v36 = v84;
LABEL_46:
      outlined retain of LocalePreferences(v36);
      goto LABEL_47;
    }
    if (!v92)
      goto LABEL_39;
    v26 = *(_QWORD *)(*((_QWORD *)&v112 + 1) + 16);
    if (v26 != v92[2])
    {
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v34 = v86;
      goto LABEL_40;
    }
    v61 = (id)v12;
    if (!v26 || *((_QWORD **)&v112 + 1) == v92)
      goto LABEL_57;
    if (*(_QWORD *)(*((_QWORD *)&v112 + 1) + 32) != v92[4] || *(_QWORD *)(*((_QWORD *)&v112 + 1) + 40) != v92[5])
    {
      v27 = v26;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v26 = v27;
      v24 = v77;
      if ((v28 & 1) == 0)
      {
LABEL_76:
        outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        v36 = v86;
        goto LABEL_46;
      }
    }
    if (v26 != 1)
    {
      result = v24[6];
      if (result != v25[6] || v24[7] != v25[7])
      {
        v30 = v26;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v26 = v30;
        v24 = v77;
        if ((result & 1) == 0)
          goto LABEL_76;
      }
      v31 = (char *)(v26 - 2);
      if (v26 != 2)
        break;
    }
LABEL_57:
    if (v82)
    {
      v12 = (uint64_t)v61;
      if (!v94 || (v80 != v93 || v82 != v94) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_86:
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        v41 = v122;
        v42 = outlined copy of LocalePreferences?;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = (uint64_t)v61;
      if (v94)
        goto LABEL_86;
    }
    if (v81)
    {
      if (!v96 || (v78 != v95 || v81 != v96) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_86;
    }
    else if (v96)
    {
      goto LABEL_86;
    }
    if (v79)
    {
      if (!v97 || (specialized static Dictionary<>.== infix(_:_:)(v79, v97) & 1) == 0)
        goto LABEL_86;
    }
    else if (v97)
    {
      goto LABEL_86;
    }
    if (v76)
    {
      if (!v98 || (specialized static Dictionary<>.== infix(_:_:)(v76, v98) & 1) == 0)
        goto LABEL_86;
    }
    else if (v98)
    {
      goto LABEL_86;
    }
    v38 = v99;
    if (v75)
    {
      if (!v99)
        goto LABEL_86;
      v60 = v101;
      v61 = v100;
      v58 = v103;
      v59 = v102;
      type metadata accessor for CFDictionaryRef(0);
      v57 = v39;
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v56 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v55 = v38;
      v54 = v75;
      v40 = static _CFObject.== infix(_:_:)();

      if ((v40 & 1) == 0)
      {
LABEL_104:
        v41 = v123;
        v42 = outlined consume of LocalePreferences?;
LABEL_87:
        outlined retain of LocalePreferences?((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v42);
LABEL_41:
        LOBYTE(v35) = 0;
        goto LABEL_42;
      }
    }
    else
    {
      v60 = v101;
      v61 = v100;
      v58 = v103;
      v59 = v102;
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      if (v38)
        goto LABEL_41;
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    }
    if (v74)
    {
      if (!v61)
        goto LABEL_104;
      v43 = v61;
      type metadata accessor for CFDictionaryRef(0);
      v57 = v44;
      v56 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v61 = v43;
      v55 = v74;
      LOBYTE(v43) = static _CFObject.== infix(_:_:)();

      if ((v43 & 1) == 0)
        goto LABEL_104;
    }
    else if (v61)
    {
      goto LABEL_104;
    }
    if (v73)
    {
      v35 = (uint64_t)v60;
      if (!v60)
      {
        outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_42;
      }
      type metadata accessor for CFDictionaryRef(0);
      v61 = v45;
      v57 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v60 = (char *)(id)v35;
      v56 = v73;
      v46 = static _CFObject.== infix(_:_:)();

      if ((v46 & 1) == 0)
        goto LABEL_104;
    }
    else if (v60)
    {
      goto LABEL_104;
    }
    v61 = (id)v12;
    if (v72)
    {
      if (!v59)
        goto LABEL_138;
      type metadata accessor for CFDictionaryRef(0);
      v60 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v47 = v59;
      v59 = v72;
      v48 = static _CFObject.== infix(_:_:)();

      if ((v48 & 1) == 0)
        goto LABEL_138;
    }
    else if (v59)
    {
      goto LABEL_138;
    }
    if (v71)
    {
      if (!v58)
        goto LABEL_138;
      type metadata accessor for CFDictionaryRef(0);
      v60 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v49 = v58;
      v59 = v71;
      v50 = static _CFObject.== infix(_:_:)();

      if ((v50 & 1) == 0)
        goto LABEL_138;
    }
    else if (v58)
    {
      goto LABEL_138;
    }
    v35 = v104;
    if (v70)
    {
      if (!v104)
        goto LABEL_121;
      swift_bridgeObjectRetain();
      v51 = swift_bridgeObjectRetain();
      LODWORD(v60) = specialized static Dictionary<>.== infix(_:_:)(v51, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
        goto LABEL_138;
    }
    else if (v104)
    {
      goto LABEL_138;
    }
    v35 = v105;
    if (v69)
    {
      if (!v105)
      {
LABEL_121:
        outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        v12 = (uint64_t)v61;
        goto LABEL_42;
      }
      swift_bridgeObjectRetain();
      v52 = swift_bridgeObjectRetain();
      LODWORD(v60) = specialized static Dictionary<>.== infix(_:_:)(v52, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
        goto LABEL_138;
    }
    else if (v105)
    {
      goto LABEL_138;
    }
    if (v68)
    {
      if (v107 && (v67 == v106 && v68 == v107 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        goto LABEL_130;
LABEL_138:
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_47:
      LOBYTE(v35) = 0;
      v12 = (uint64_t)v61;
      goto LABEL_42;
    }
    if (v107)
      goto LABEL_138;
LABEL_130:
    if (v66 == 2)
    {
      if (v108 != 2)
        goto LABEL_138;
    }
    else if (v108 == 2 || ((v108 ^ v66) & 1) != 0)
    {
      goto LABEL_138;
    }
    v53 = v109;
    if (v65 == 2)
    {
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      if (v53 != 2)
        goto LABEL_47;
    }
    else
    {
      outlined retain of LocalePreferences?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      if (v53 == 2 || ((v53 ^ v65) & 1) != 0)
        goto LABEL_47;
    }
    if (v63 == 2)
    {
      v12 = (uint64_t)v61;
      if (v110 != 2)
        goto LABEL_41;
    }
    else
    {
      LOBYTE(v35) = 0;
      if (v110 == 2)
        goto LABEL_152;
      v12 = (uint64_t)v61;
      if (((((v63 & 1) == 0) ^ v110) & 1) == 0)
        goto LABEL_42;
    }
    if (v62 == 2)
    {
      v12 = (uint64_t)v61;
      if (v111 != 2)
        goto LABEL_41;
LABEL_151:
      LOBYTE(v35) = 1;
      goto LABEL_42;
    }
    LOBYTE(v35) = 0;
    if (v111 != 2)
    {
      v12 = (uint64_t)v61;
      if (((((v62 & 1) == 0) ^ v111) & 1) == 0)
        goto LABEL_42;
      goto LABEL_151;
    }
LABEL_152:
    v12 = (uint64_t)v61;
LABEL_42:
    LOBYTE(v86[0]) = v64;
    v86[1] = v77;
    v86[2] = v80;
    v86[3] = v82;
    v86[4] = v78;
    v86[5] = v81;
    v86[6] = v79;
    v86[7] = v76;
    v86[8] = v75;
    v86[9] = v74;
    v86[10] = v73;
    v86[11] = v72;
    v86[12] = v71;
    v86[13] = v70;
    v86[14] = v69;
    v86[15] = v67;
    v86[16] = v68;
    v87 = v66;
    v88 = v65;
    v89 = v63;
    v90 = v62;
    outlined release of LocalePreferences(v86);
    outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    if ((v35 & 1) != 0)
    {
LABEL_154:
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return v11;
    }
LABEL_5:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v11 = (v11 + 1) & v12;
    if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      return v11;
  }
  v32 = v25 + 9;
  v33 = v24 + 9;
  while (v31)
  {
    result = *(v33 - 1);
    if (result != *(v32 - 1) || *v33 != *v32)
    {
      v60 = v31;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v31 = v60;
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_47;
      }
    }
    v32 += 2;
    v33 += 2;
    if (!--v31)
      goto LABEL_57;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  int v18;
  uint64_t v20;
  char v21;
  BOOL v22;
  unint64_t v24;
  int v25;
  uint64_t v26;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v24 = HIDWORD(a4);
    v25 = a4;
    v11 = ~v7;
    v12 = *(_QWORD *)(v5 + 48);
    v26 = a3;
    do
    {
      v14 = v12 + 32 * v8;
      v15 = *(_DWORD *)(v14 + 16);
      v16 = *(_BYTE *)(v14 + 20);
      v18 = *(_DWORD *)(v14 + 24);
      v17 = *(_DWORD *)(v14 + 28);
      if (*(_QWORD *)v14 != a1 || *(_QWORD *)(v14 + 8) != a2)
      {
        v20 = v11;
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v11 = v20;
        a3 = v26;
        if ((v21 & 1) == 0)
          goto LABEL_7;
      }
      if ((v16 & 1) != 0)
      {
        if ((a3 & 0x100000000) == 0)
          goto LABEL_7;
        v22 = v18 == v25;
      }
      else
      {
        if ((a3 & 0x100000000) != 0)
          goto LABEL_7;
        v22 = v15 == (_DWORD)a3 && v18 == v25;
      }
      if (v22 && v17 == (_DWORD)v24)
        return v8;
LABEL_7:
      v8 = (v8 + 1) & v11;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 1);
    v15 = (__int128 *)(a1 + 32);
    v16 = (__int128 *)(a1 + 16);
    v14 = a1[48];
    do
    {
      v8 = (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 56 * v4);
      if (*v8 == v6)
      {
        v9 = *((_QWORD *)v8 + 1);
        v10 = *((_OWORD *)v8 + 1);
        v11 = v8[48];
        v18 = *((_OWORD *)v8 + 2);
        if (v9)
        {
          if (!v7)
            goto LABEL_4;
          v17 = *((_OWORD *)v8 + 1);
          v12 = specialized static Set.== infix(_:_:)(v9, v7);
          v10 = v17;
          if ((v12 & 1) == 0)
            goto LABEL_4;
        }
        else if (v7)
        {
          goto LABEL_4;
        }
        v20 = *v16;
        v21 = v10;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20) & 1) != 0)
        {
          v20 = *v15;
          v21 = v18;
          v19 = specialized static Locale.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0 && ((v14 ^ v11) & 1) == 0)
            return v4;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
LABEL_4:
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return v7;
  v10 = ~v6;
  v11 = *(_QWORD *)(v4 + 48);
  v12 = a3;
  while (1)
  {
    v13 = v11 + 24 * v7;
    if (*(_BYTE *)(v13 + 16) || v12 != 0)
      break;
    if ((*(_QWORD *)v13 != a1 || *(_QWORD *)(v13 + 8) != a2)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v7 = (v7 + 1) & v10;
      if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        continue;
    }
    return v7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v13 = ~v4;
      v5 = (v5 + 1) & v13;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v16 = v15;
          if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v16 == v17)
            break;
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            v5 = (v5 + 1) & v13;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = v12 + 24 * v7;
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (*(_QWORD *)v13 == a1 && *(_QWORD *)(v13 + 8) == a2)
      {
        if (v14 == (a3 & 1))
          return v7;
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v14 ^ a3) & 1) == 0)
      {
        return v7;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v14 >> 14 == v16 >> 14 && (a2 & 1) != 0)
  {
    v14 = String.index(after:)();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = String.subscript.getter();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = String.index(after:)();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  v15 = v29;
  if (v13[2] != v42)
  {
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
LABEL_29:
  if (v48 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v15 >> 14)
  {
    v31 = String.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v5;
  if (!(_DWORD)result)
  {
    result = a2(result, *(_QWORD *)(v5 + 16) + 1, 1, v5, a1);
    *v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t a2, uint64_t (*a3)(BOOL))
{
  uint64_t v3;
  unint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (result + 1 > (uint64_t)(v4 >> 1))
  {
    result = a3(v4 > 1);
    *(_QWORD *)v3 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_DWORD *)(v3 + 4 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v5;
  *(_QWORD *)(v6 + 16) = result + 1;
  v7 = (_QWORD *)(v6 + 32 * result);
  v7[4] = a2;
  v7[5] = a3;
  v7[6] = a4;
  v7[7] = a5;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 1;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4])
          memmove(v16, a4 + 4, 32 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 72);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[9 * v11 + 4])
          memmove(v15, a4 + 4, 72 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v40 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v39 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature(v26, (uint64_t)v7, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v26, (uint64_t)v7, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    Hasher.init(_seed:)();
    ICULegacyNumberFormatter.Signature.hash(into:)();
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = outlined init with take of ICUNumberFormatter.Signature((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v3 = v2;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v40 = v2;
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 64);
    v42 = (_QWORD *)(v6 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v41 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 64;
    result = swift_retain();
    v15 = 0;
    v16 = v44;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v15 << 6);
      }
      else
      {
        v21 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v15;
        if (!v22)
        {
          v15 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v15];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v6 + 32);
                if (v39 >= 64)
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v39;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v15 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v15 >= v41)
                  goto LABEL_34;
                v22 = v42[v15];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v15 = v23;
          }
        }
LABEL_21:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v15 << 6);
      }
      v24 = *(_QWORD *)(v6 + 56);
      v25 = v6;
      v26 = *(_QWORD *)(v6 + 48) + 24 * v20;
      v27 = *(_QWORD *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(_BYTE *)(v26 + 16);
      v30 = *(_QWORD *)(v16 + 72);
      v31 = v24 + v30 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v45, v31, v46);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v45, v31, v46);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v8 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
        v16 = v44;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        v16 = v44;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v13 + 8 * v34);
        }
        while (v38 == -1);
        v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = *(_QWORD *)(v8 + 48) + 24 * v17;
      *(_QWORD *)v18 = v27;
      *(_QWORD *)(v18 + 8) = v28;
      *(_BYTE *)(v18 + 16) = v29;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(_QWORD *)(v8 + 56) + v30 * v17, v45, v46);
      ++*(_QWORD *)(v8 + 16);
      v6 = v25;
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)outlined init with take of Any(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  __int128 v40;

  v3 = v2;
  v5 = type metadata accessor for CombineIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v40 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v40 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      swift_retain();
    }
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95660], MEMORY[0x1E0C95670]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19) = v40;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  void *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = memcpy((void *)(a4[6] + 392 * a1), a2, 0x188uLL);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 176 * result);
  v5 = a2[9];
  v4[8] = a2[8];
  v4[9] = v5;
  *(_OWORD *)((char *)v4 + 156) = *(_OWORD *)((char *)a2 + 156);
  v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  v7 = a2[7];
  v4[6] = a2[6];
  v4[7] = v7;
  v8 = a2[1];
  *v4 = *a2;
  v4[1] = v8;
  v9 = a2[3];
  v4[2] = a2[2];
  v4[3] = v9;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 96 * result);
  v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  v7 = a2[1];
  *v4 = *a2;
  v4[1] = v7;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 160 * result);
  v5 = a2[7];
  v4[6] = a2[6];
  v4[7] = v5;
  v4[8] = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  v6 = a2[3];
  v4[2] = a2[2];
  v4[3] = v6;
  v7 = a2[5];
  v4[4] = a2[4];
  v4[5] = v7;
  v8 = a2[1];
  *v4 = *a2;
  v4[1] = v8;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 32 * result);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 20) = BYTE4(a4) & 1;
  *(_QWORD *)(v7 + 24) = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, _QWORD *a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = a8[7] + 32 * result;
  *(_QWORD *)v9 = a4;
  *(_BYTE *)(v9 + 8) = a5;
  *(_QWORD *)(v9 + 16) = a6;
  *(_BYTE *)(v9 + 24) = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = a8[6] + 24 * result;
  *(_QWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *(_BYTE *)(v8 + 16) = a4;
  v9 = a8[7] + 24 * result;
  *(_QWORD *)v9 = a5;
  *(_QWORD *)(v9 + 8) = a6;
  *(_BYTE *)(v9 + 16) = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 80 * result);
  v7 = a4[4];
  v8 = a4[2];
  v6[3] = a4[3];
  v6[4] = v7;
  v9 = a4[1];
  *v6 = *a4;
  v6[1] = v9;
  v6[2] = v8;
  v10 = a5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a5[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, char a4, _QWORD *a5)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_OWORD *)(a5[6] + 96 * result);
  v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  v8 = a2[1];
  *v5 = *a2;
  v5[1] = v8;
  v9 = a5[7] + 16 * result;
  *(_QWORD *)v9 = a3;
  *(_BYTE *)(v9 + 8) = a4 & 1;
  v10 = a5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a5[2] = v12;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a6[6] + 24 * a1;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_BYTE *)(v9 + 16) = a4;
  v10 = a6[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5, v11);
  v13 = a6[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a6[2] = v15;
  return result;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Disjunction<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NotEqual<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Comparison<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.TypeCheck<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  _QWORD v9[2];

  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v9[0] = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v5 = v9[0];
  v9[1] = v6;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>, a2, v9);
  v8[0] = v5;
  v8[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>, a2, v8);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];

  v5 = *(_QWORD *)(a3[1] + 8);
  v6 = *(_QWORD *)(a3[2] + 8);
  v8[0] = *(_QWORD *)(*a3 + 8);
  v8[1] = v5;
  v8[2] = v6;
  result = MEMORY[0x186DA9D64](a4, a2, v8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Negation<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Negation<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  _QWORD v9[2];

  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v9[0] = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v5 = v9[0];
  v9[1] = v6;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Negation<A>, a2, v9);
  v8[0] = v5;
  v8[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Negation<A>, a2, v8);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>);
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContains<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];

  MEMORY[0x1E0C80A78]();
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    v8 = (uint64_t *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    v9 = v7;
    do
    {
      v10 = *v8++;
      *v9++ = *(_QWORD *)(v10 + 8);
      --v5;
    }
    while (v5);
  }
  v12[0] = v4;
  v12[1] = v7;
  result = MEMORY[0x186DA9D64](v3);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v5 = *(_QWORD *)(a3[1] + 8);
  v7[0] = *(_QWORD *)(*a3 + 8);
  v7[1] = v5;
  result = MEMORY[0x186DA9D64](a4, a2, v7);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeWithCopy for DebugStringConversionState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DebugStringConversionState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for DebugStringConversionState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for DebugStringConversionState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugStringConversionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugStringConversionState()
{
  return &type metadata for DebugStringConversionState;
}

uint64_t dispatch thunk of DebugStringConvertiblePredicateExpression.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t outlined retain of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

uint64_t _s10Foundation17LocalePreferencesVSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined release of (LocalePreferences?, LocalePreferences?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_QWORD *)(a1 + 200);
  v12 = *(_OWORD *)(a1 + 208);
  v10 = *(_OWORD *)(a1 + 240);
  v11 = *(_OWORD *)(a1 + 224);
  outlined consume of LocalePreferences?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 96));
  outlined consume of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

uint64_t outlined release of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?(v13, v2, v3, v4, v5, v6, v7, v8, (void *)v12, *((void **)&v12 + 1), (void *)v11, *((void **)&v11 + 1), (void *)v10);
  return a1;
}

_QWORD *outlined release of LocalePreferences(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[8];
  v4 = (void *)a1[9];
  v3 = (void *)a1[10];
  v6 = (void *)a1[11];
  v5 = (void *)a1[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      result = swift_bridgeObjectRetain();
      break;
    case 5:
      result = outlined copy of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      result = outlined consume of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 72 * a1 + 32;
    v7 = a3 + 72 * v5;
    if (v6 >= v7 || v6 + 72 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *outlined retain of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v8 = a1[14];
  v9 = a1[18];
  v10 = a1[17];
  v11 = a1[22];
  v12 = a1[21];
  v13 = a1[27];
  v14 = a1[26];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[35];
  v18 = a1[34];
  v19 = a1[41];
  v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *outlined release of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v8 = a1[14];
  v9 = a1[18];
  v10 = a1[17];
  v11 = a1[22];
  v12 = a1[21];
  v13 = a1[27];
  v14 = a1[26];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[35];
  v18 = a1[34];
  v19 = a1[41];
  v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v10 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?(v13, v12, v2, v3, v4, v5, v6, v7, (void *)v11, *((void **)&v11 + 1), (void *)v10, *((void **)&v10 + 1), (void *)v9);
  return a1;
}

uint64_t *outlined retain of Locale.Components(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v8 = a1[14];
  v9 = a1[18];
  v10 = a1[17];
  v11 = a1[22];
  v12 = a1[21];
  v13 = a1[27];
  v14 = a1[26];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[35];
  v18 = a1[34];
  v19 = a1[41];
  v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  return a1;
}

void *outlined consume of URL?(void *result)
{
  if (result)
  {

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_1819CEDB8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1819CEDDC()
{
  return swift_deallocObject();
}

unint64_t outlined copy of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t URL.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = type metadata accessor for FilePath();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v6);
  v8 = String.init(validating:)();
  if (v9)
  {
    URL.init(fileURLWithPath:)(v8, v9, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v11 = v14;
    v12 = v15;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v11 = 0;
    v12 = 0uLL;
  }
  *(_QWORD *)a2 = v11;
  *(_OWORD *)(a2 + 8) = v12;
  return result;
}

uint64_t URL.init(_:isDirectory:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = type metadata accessor for FilePath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v8);
  v10 = String.init(validating:)();
  if (v11)
  {
    URL.init(fileURLWithPath:isDirectory:)(v10, v11, a2 & 1, (uint64_t)&v16);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v13 = v16;
    v14 = v17;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v13 = 0;
    v14 = 0uLL;
  }
  *(_QWORD *)a3 = v13;
  *(_OWORD *)(a3 + 8) = v14;
  return result;
}

uint64_t FilePath.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  unsigned __int8 v9;
  id v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  unint64_t object;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  unint64_t v34;
  id v35;
  Swift::String v36;
  uint64_t v37;
  _QWORD v38[4];
  id v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  Swift::String v43;
  uint64_t v44;

  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v6 = v3;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v43._countAndFlagsBits = (uint64_t)v6;
    v43._object = v4;
    v44 = v5;
    URL.scheme.getter();
    if (!v7)
    {
      swift_release_n();
      swift_release_n();

LABEL_18:
      v27 = type metadata accessor for FilePath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
    }
    v8 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
LABEL_17:
      swift_release();
      swift_release();
      goto LABEL_18;
    }
  }
  else
  {
    v9 = objc_msgSend(v6, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v9 & 1) == 0)
      goto LABEL_17;
  }
LABEL_7:
  if (_foundation_swift_url_feature_enabled())
  {
    v44 = v5;
    v10 = v6;
    swift_retain();
    swift_retain();
    v11 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v11._countAndFlagsBits;
    v43 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v11._object;
    }
    else
    {
      object = (unint64_t)v11._object;
      if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v43._countAndFlagsBits;
        object = (unint64_t)v43._object;
      }
    }
    v40 = Set.init(minimumCapacity:)();
    v29 = specialized Set._Variant.insert(_:)(&v42, 0x2FuLL);
    v30 = v40;
    v31 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v31 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v31)
    {
      v39 = v10;
      v40 = countAndFlagsBits;
      v41 = object;
      MEMORY[0x1E0C80A78](v29);
      v38[2] = &v40;
      v38[3] = v30;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v38, countAndFlagsBits, object);
      if (v32 == 1)
      {
        v33 = v40;
        v34 = v41;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v33, v34, v30);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v39;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v14 = objc_msgSend(v6, sel__parameterString);
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v19 = objc_msgSend(v6, sel_path)) != 0)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

        v43._countAndFlagsBits = (uint64_t)v21;
        v43._object = v23;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = 59;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = (uint64_t)v16;
        v25._object = v18;
        String.append(_:)(v25);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v43._countAndFlagsBits = 59;
        v43._object = (void *)0xE100000000000000;
        v36._countAndFlagsBits = (uint64_t)v16;
        v36._object = v18;
        String.append(_:)(v36);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    v35 = objc_msgSend(v6, sel_path);
    if (!v35)
    {
      swift_release();
      swift_release();

      goto LABEL_33;
    }
    v10 = v35;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    swift_release();
    swift_release();

  }
LABEL_33:
  FilePath.init(_:)();
  v37 = type metadata accessor for FilePath();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a2, 0, 1, v37);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

_OWORD *AttributedString.Guts.copy(in:)(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _OWORD v26[10];

  v2 = v1;
  v4 = *(_OWORD *)(v1 + 32);
  v26[6] = *(_OWORD *)(v1 + 16);
  v26[7] = v4;
  v26[8] = *(_OWORD *)(v1 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v25);
  BigString.init(_:)();
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(_QWORD *)(v2 + 80);
  v8 = *a1;
  v9 = *a1 >> 11;
  v10 = a1[4];
  swift_unknownObjectRetain();
  v11 = specialized Rope.extract<A>(from:to:in:)(v9, v10 >> 11, v5, v6, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_unknownObjectRelease();
  v18 = (_OWORD *)swift_allocObject();
  outlined retain of Locale((uint64_t)v26);
  swift_unknownObjectRetain();
  AttributedString.Guts.init(string:runs:)(v26, v11, v13, v15, v17);
  if ((BigString.startIndex.getter() ^ v8) > 0x3FF || (BigString.endIndex.getter() ^ v10) >= 0x400)
  {
    v19 = v18[2];
    v26[3] = v18[1];
    v26[4] = v19;
    v26[5] = v18[3];
    v20 = BigString.startIndex.getter();
    v21 = BigString.endIndex.getter();
    v22 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v20 >> 11, v21 >> 11);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v22, v23, 1, 0);
  }
  swift_release();
  outlined release of Locale((uint64_t)v26);
  swift_unknownObjectRelease();
  return v18;
}

Swift::UInt AttributedString.Guts.characterwiseHash(in:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::UInt v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char v112[48];
  char v113;
  char v114;
  char v115[112];
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135[3];
  _BYTE v136[40];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  v4 = swift_retain();
  AttributedString.Runs.init(_:in:)(v4, &v137);
  v5 = *((_QWORD *)&v137 + 1);
  v6 = *((_QWORD *)&v141 + 1);
  result = *((_QWORD *)&v141 + 1) - *((_QWORD *)&v137 + 1);
  if (__OFSUB__(*((_QWORD *)&v141 + 1), *((_QWORD *)&v137 + 1)))
    goto LABEL_140;
  v87 = *((_QWORD *)&v138 + 1);
  v88 = v138;
  v8 = *((_QWORD *)&v139 + 1);
  v9 = v139;
  v11 = *((_QWORD *)&v140 + 1);
  v10 = v140;
  v90 = v141;
  Hasher._combine(_:)(result);
  if (v5 == v6)
    return outlined release of AttributedString.Runs((uint64_t)&v137);
  v80 = *((_QWORD *)&v146 + 1);
  v81 = v146;
  v78 = *((_QWORD *)&v145 + 1);
  v79 = v147;
  v76 = *((_QWORD *)&v147 + 1) >> 11;
  v77 = *((_QWORD *)&v145 + 1) >> 10;
  v89 = (_QWORD *)v137;
  v85 = (__int128 *)(v137 + 16);
  v73 = (_OWORD *)(v2 + 16);
  result = outlined retain of AttributedString.Runs((uint64_t)&v137);
  v74 = v6;
  v75 = a2;
  do
  {
    if (v5 >= v6)
    {
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    v109 = v147;
    v110 = v148;
    v111 = v149;
    v105 = v143;
    v106 = v144;
    v107 = v145;
    v108 = v146;
    v101 = v139;
    v102 = v140;
    v103 = v141;
    v104 = v142;
    v99 = v137;
    v100 = v138;
    v98[0] = v5;
    v98[1] = v88;
    v98[2] = v87;
    v98[3] = v9;
    v98[4] = v8;
    v98[5] = v10;
    v98[6] = v11;
    v98[7] = v90;
    result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v98, &v91);
    if (v91 != v89[11])
      goto LABEL_121;
    v82 = v8;
    v18 = v5;
    v19 = v92;
    v21 = v94;
    v20 = v95;
    v22 = v96;
    v23 = v97;
    if (v93)
    {
      v24 = (_QWORD *)(v93 + 24 * ((v92 >> ((4 * *(_BYTE *)(v93 + 18) + 8) & 0x3C)) & 0xF));
      v26 = v24[3];
      v25 = v24[4];
      v27 = v24[5];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      v84 = v25;
      swift_bridgeObjectRetain();
      v83 = v27;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v28 = v89[8];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      swift_unknownObjectRetain();
      v26 = specialized Rope._Node.subscript.getter(v19, v28);
      v83 = v30;
      v84 = v29;
      result = swift_unknownObjectRelease();
    }
    if (v77 >= v21 >> 10)
      v31 = v78;
    else
      v31 = v21;
    if (v77 >= v21 >> 10)
    {
      v20 = v81;
      v22 = v80;
      v23 = v79;
    }
    if (__OFADD__(v26, v21 >> 11))
      goto LABEL_122;
    if (v76 >= (uint64_t)(v26 + (v21 >> 11)))
      v32 = v26 + (v21 >> 11);
    else
      v32 = v76;
    v33 = v85[1];
    v132 = *v85;
    v133 = v33;
    v134 = v85[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v32, v31 >> 11))
      goto LABEL_123;
    v34 = BigString.UTF8View.index(_:offsetBy:)();
    v36 = v35;
    v38 = v37;
    v40 = v39;
    result = outlined release of Locale((uint64_t)v112);
    if (v34 >> 10 < v31 >> 10)
      goto LABEL_124;
    v116 = v31;
    v117 = v20;
    v118 = v22;
    v119 = v23;
    v120 = v34;
    v121 = v36;
    v122 = v38;
    v123 = v40;
    v41 = v88;
    v42 = v89[8];
    v43 = v89[9];
    v44 = v89[11];
    v86 = v89[10];
    if (v9 == 1 || v88 != v44)
    {
      if (v42)
        v48 = v89[9];
      else
        v48 = 0;
      if (v18 < 0)
        goto LABEL_133;
      v45 = v18;
      if (v48 < v18)
        goto LABEL_133;
      if (!v42 || v18 >= v43 || !*(_WORD *)(v42 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        v62 = swift_unknownObjectRetain();
        v46 = specialized Rope._endPath.getter(v62);
        result = swift_unknownObjectRelease();
        v9 = 0;
        if (!v42)
        {
          v47 = 0;
          goto LABEL_105;
        }
LABEL_67:
        swift_unknownObjectRetain();
        v47 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v44, v46, v9, v42, v43, v86);
        result = swift_unknownObjectRelease_n();
LABEL_105:
        v41 = v44;
        goto LABEL_106;
      }
      v49 = *(unsigned __int8 *)(v42 + 18);
      if (*(_BYTE *)(v42 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        result = swift_unknownObjectRetain();
        v50 = v18;
        v51 = v42;
        while (1)
        {
          v53 = *(unsigned __int16 *)(v51 + 16);
          if (*(_WORD *)(v51 + 16))
          {
            v54 = *(_QWORD *)(v51 + 32);
            v55 = __OFSUB__(v50, v54);
            v56 = v50 - v54;
            if (v55)
              goto LABEL_118;
            if (__OFADD__(v56, 1))
              goto LABEL_119;
            if (v56 + 1 <= 0)
            {
              v53 = 0;
              goto LABEL_39;
            }
            if ((_DWORD)v53 != 1)
            {
              v57 = *(_QWORD *)(v51 + 56);
              v50 = v56 - v57;
              if (__OFSUB__(v56, v57))
                goto LABEL_131;
              if (__OFADD__(v50, 1))
                goto LABEL_132;
              if (v50 + 1 < 1)
              {
                v53 = 1;
                v50 = v56;
                goto LABEL_39;
              }
              if ((_DWORD)v53 == 2)
                goto LABEL_38;
              v58 = *(_QWORD *)(v51 + 80);
              v55 = __OFSUB__(v50, v58);
              v56 = v50 - v58;
              if (v55)
                goto LABEL_135;
              if (__OFADD__(v56, 1))
                goto LABEL_136;
              if (v56 + 1 < 1)
              {
                v53 = 2;
                goto LABEL_39;
              }
              if ((_DWORD)v53 != 3)
              {
                v59 = 3;
                if (v53 > 3)
                  v59 = *(unsigned __int16 *)(v51 + 16);
                v60 = (_QWORD *)(v51 + 104);
                v61 = 3;
                while (v59 != v61)
                {
                  v50 = v56 - *v60;
                  if (__OFSUB__(v56, *v60))
                    goto LABEL_129;
                  if (__OFADD__(v50, 1))
                    goto LABEL_130;
                  if (v50 + 1 < 1)
                  {
                    v53 = v61;
                    v50 = v56;
                    goto LABEL_39;
                  }
                  ++v61;
                  v60 += 3;
                  v56 = v50;
                  if (v53 == v61)
                    goto LABEL_38;
                }
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
            }
            v50 = v56;
          }
LABEL_38:
          if (v50)
          {
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
LABEL_39:
          v52 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
          v49 = ((-15 << v52) - 1) & v49 | (v53 << v52);
          v9 = *(_QWORD *)(v51 + 24 + 24 * v53);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v51 = v9;
          if (!*(_BYTE *)(v9 + 18))
            goto LABEL_71;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      result = swift_unknownObjectRetain();
      v50 = v18;
      v9 = v42;
LABEL_71:
      v63 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16))
      {
        v64 = v50;
        goto LABEL_97;
      }
      v64 = v50 - 1;
      if (__OFSUB__(v50, 1))
        goto LABEL_138;
      if (!__OFADD__(v64, 1))
      {
        if (v50 <= 0)
        {
          v63 = 0;
          goto LABEL_103;
        }
        if ((_DWORD)v63 != 1)
        {
          v55 = __OFSUB__(v64, 1);
          v64 = v50 - 2;
          if (v55)
            goto LABEL_143;
          if (__OFADD__(v64, 1))
            goto LABEL_144;
          if (v50 - 1 < 1)
          {
            v63 = 1;
            goto LABEL_103;
          }
          if ((_DWORD)v63 != 2)
          {
            v55 = __OFSUB__(v64, 1);
            v64 = v50 - 3;
            if (v55)
              goto LABEL_145;
            if (__OFADD__(v64, 1))
              goto LABEL_146;
            if (v50 - 2 >= 1)
            {
              if ((_DWORD)v63 != 3)
              {
                v65 = 0;
                v66 = 3;
                if (v63 > 3)
                  v66 = *(unsigned __int16 *)(v9 + 16);
                v67 = v66 - 3;
                if (v64 >= v63 - 4)
                  v68 = v63 - 4;
                else
                  v68 = v50 - 3;
                if (v68 >= v50 + 0x7FFFFFFFFFFFFFFDLL)
                  v68 = v50 + 0x7FFFFFFFFFFFFFFDLL;
                while (v67 > v68)
                {
                  if (v50 + 0x7FFFFFFFFFFFFFFDLL == v65)
                    goto LABEL_142;
                  if (v64 == v65)
                  {
                    v63 = v50;
                    goto LABEL_103;
                  }
                  if (v63 - 3 == ++v65)
                  {
                    v64 -= v65;
                    goto LABEL_97;
                  }
                }
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
                return result;
              }
              goto LABEL_97;
            }
            v63 = 2;
LABEL_103:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v46 = v49 & 0xFFFFFFFFFFFFF0FFLL | (v63 << 8);
            goto LABEL_67;
          }
        }
LABEL_97:
        if (v64)
          goto LABEL_137;
        goto LABEL_103;
      }
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    v45 = v18;
    if (v90 == 2)
    {
      v46 = v87;
      if (v42)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v88, v87, v9, v42, v43, v86);
        v47 = result;
      }
      else
      {
        result = swift_retain();
        v47 = 0;
      }
    }
    else
    {
      v47 = v82 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      result = swift_unknownObjectRetain();
      v46 = v87;
    }
LABEL_106:
    *(_QWORD *)&v99 = v41;
    *((_QWORD *)&v99 + 1) = v46;
    *(_QWORD *)&v100 = v9;
    v55 = __OFADD__(v45, 1);
    v5 = v45 + 1;
    if (v55)
      goto LABEL_125;
    if (v41 != v44)
      goto LABEL_126;
    if (v9)
    {
      v69 = *(_QWORD *)(v9 + 24 * ((v46 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v70 = v86;
    }
    else
    {
      swift_unknownObjectRetain();
      v71 = v46;
      v70 = v86;
      v69 = specialized Rope._Node.subscript.getter(v71, v42);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (__OFADD__(v47, v69))
      goto LABEL_127;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v99, v42, v43, v70, v44);
    swift_unknownObjectRelease_n();
    v87 = *((_QWORD *)&v99 + 1);
    v88 = v99;
    v9 = v100;
    if (v90 == 2)
    {
      v12 = v85[1];
      v129 = *v85;
      v130 = v12;
      v131 = v85[2];
      v13 = &v114;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v72 = v85[1];
      v126 = *v85;
      v127 = v72;
      v128 = v85[2];
      BigString.utf8.getter();
      result = v82;
      if (__OFSUB__(v47 + v69, v82 >> 11))
        goto LABEL_134;
      v13 = &v113;
    }
    v8 = BigString.UTF8View.index(_:offsetBy:)();
    v10 = v14;
    v11 = v15;
    v90 = v16;
    outlined release of Locale((uint64_t)v13);
    outlined release of AttributedString.Runs((uint64_t)&v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v75, v84);
    specialized Set.hash(into:)(v75, v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v73[1];
    v124[0] = *v73;
    v124[1] = v17;
    v125 = v73[2];
    v135[0] = v124[0];
    v135[1] = v17;
    v135[2] = v125;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v135, (uint64_t)v136);
    outlined retain of Locale((uint64_t)v136);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v124);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined release of Locale((uint64_t)v115);
    v6 = v74;
  }
  while (v5 != v74);
  outlined release of AttributedString.Runs((uint64_t)&v137);
  return outlined release of AttributedString.Runs((uint64_t)&v137);
}

uint64_t AttributedString.Guts.description(in:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  unint64_t object;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  int64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  void *v96;
  uint64_t v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  uint64_t v106;
  void *v107;
  __int128 *v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t countAndFlagsBits;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Swift::String v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  Swift::String v149;
  Swift::String v150;
  uint64_t v151[8];
  Swift::String v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE v156[24];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  char v168[48];
  char v169;
  char v170;
  char v171[48];
  char v172[112];
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;

  v166 = 0;
  v167 = 0xE000000000000000;
  v1 = swift_retain();
  AttributedString.Runs.init(_:in:)(v1, &v193);
  v2 = v194;
  v3 = v193;
  v122 = v202;
  v4 = v202;
  if (v194 == (void *)v202)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v193);
    v5 = 0;
    goto LABEL_151;
  }
  v120 = v196;
  v121 = v195;
  v6 = v197;
  v7 = v198;
  v118 = v200;
  v119 = v199;
  v113 = v204;
  v114 = v203;
  v112 = v205;
  v8 = v201;
  v9 = v206;
  v125 = v208;
  v126 = v207;
  v124 = v209;
  v117 = v210;
  v108 = (__int128 *)(v0 + 16);
  v110 = v211;
  result = outlined retain of AttributedString.Runs((uint64_t)&v193);
  v127 = v9;
  v109 = v9 >> 10;
  v123 = (__int128 *)(v3 + 16);
  v11 = v120;
  countAndFlagsBits = v121;
  v135 = v6;
  v115 = v7;
  v116 = v6;
  v131 = v118;
  v132 = v119;
  v111 = v8;
  v140 = v8;
  v12 = (uint64_t)v2;
  v106 = v4;
  v107 = v2;
  v133 = (_QWORD *)v3;
  while (2)
  {
    if (v12 >= v4)
      goto LABEL_156;
    v152._countAndFlagsBits = v3;
    v152._object = v2;
    *(_QWORD *)&v153 = v121;
    *((_QWORD *)&v153 + 1) = v120;
    *(_QWORD *)&v154 = v116;
    *((_QWORD *)&v154 + 1) = v115;
    *(_QWORD *)&v155 = v119;
    *((_QWORD *)&v155 + 1) = v118;
    *(_OWORD *)&v156[8] = v122;
    v157 = v114;
    v158 = v113;
    v159 = v112;
    *(_QWORD *)v156 = v111;
    v160 = v127;
    v161 = v126;
    v162 = v125;
    v163 = v124;
    v164 = v117;
    v165 = v110;
    v141 = v12;
    v151[0] = v12;
    v151[1] = countAndFlagsBits;
    v136 = v11;
    v151[2] = v11;
    v151[3] = v135;
    v151[4] = v7;
    v151[5] = v132;
    v151[6] = v131;
    v151[7] = v140;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(v151, &v143._countAndFlagsBits);
    if (v143._countAndFlagsBits != *(_QWORD *)(v3 + 88))
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
    object = (unint64_t)v143._object;
    v15 = *((_QWORD *)&v145 + 1);
    v16 = *((_QWORD *)&v146 + 1);
    v18 = v146;
    v17 = v147;
    v138 = v7;
    if ((_QWORD)v144)
    {
      v19 = v144 + 24 * (((unint64_t)v143._object >> ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C)) & 0xF);
      v20 = *(_QWORD *)(v19 + 24);
      v21 = *(_QWORD *)(v19 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v22 = *((_QWORD *)&v146 + 1);
      v23 = v133[8];
      v24 = v147;
      swift_retain();
      swift_unknownObjectRetain();
      v17 = v24;
      v20 = specialized Rope._Node.subscript.getter(object, v23);
      v21 = v25;
      v16 = v22;
      result = swift_unknownObjectRelease();
    }
    if (v109 >= v15 >> 10)
      v26 = v127;
    else
      v26 = v15;
    if (v109 >= v15 >> 10)
      v27 = v126;
    else
      v27 = v18;
    if (v109 >= v15 >> 10)
      v28 = v125;
    else
      v28 = v16;
    if (v109 >= v15 >> 10)
      v17 = v124;
    if (__OFADD__(v20, v15 >> 11))
      goto LABEL_158;
    if ((uint64_t)((unint64_t)v117 >> 11) >= (uint64_t)(v20 + (v15 >> 11)))
      v29 = v20 + (v15 >> 11);
    else
      v29 = (unint64_t)v117 >> 11;
    v30 = v123[1];
    v190 = *v123;
    v191 = v30;
    v192 = v123[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v29, v26 >> 11))
      goto LABEL_159;
    v31 = BigString.UTF8View.index(_:offsetBy:)();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    result = outlined release of Locale((uint64_t)v168);
    if (v31 >> 10 < v26 >> 10)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    v173 = v26;
    v174 = v27;
    v175 = v28;
    v176 = v17;
    v177 = v31;
    v178 = v33;
    v179 = v35;
    v180 = v37;
    v38 = countAndFlagsBits;
    v39 = v133[8];
    v40 = v133[10];
    v41 = v135;
    v129 = v40;
    v130 = v133[11];
    v128 = v133[9];
    if (v135 != 1 && countAndFlagsBits == v133[11])
    {
      if (v140 != 2)
      {
        v43 = v138 >> 11;
        swift_unknownObjectRetain();
        result = swift_retain();
        v42 = v136;
        goto LABEL_111;
      }
      v42 = v136;
      if (v39)
      {
        swift_retain();
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(countAndFlagsBits, v136, v135, v39, v128, v40);
        v43 = result;
        goto LABEL_111;
      }
      result = swift_retain();
      goto LABEL_110;
    }
    if (v39)
      v44 = v133[9];
    else
      v44 = 0;
    if (v141 < 0 || v44 < v141)
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    if (v39 && v141 < v133[9] && *(_WORD *)(v39 + 16))
    {
      v45 = *(unsigned __int8 *)(v39 + 18);
      if (*(_BYTE *)(v39 + 18))
      {
        swift_unknownObjectRetain_n();
        result = swift_retain();
        v46 = v141;
        v47 = v39;
        while (1)
        {
          v50 = *(unsigned __int16 *)(v47 + 16);
          if (*(_WORD *)(v47 + 16))
          {
            v51 = *(_QWORD *)(v47 + 32);
            v52 = __OFSUB__(v46, v51);
            v53 = v46 - v51;
            if (v52)
              goto LABEL_154;
            if (__OFADD__(v53, 1))
              goto LABEL_155;
            if (v53 + 1 <= 0)
            {
              v50 = 0;
              goto LABEL_44;
            }
            if ((_DWORD)v50 != 1)
            {
              v54 = *(_QWORD *)(v47 + 56);
              v46 = v53 - v54;
              if (__OFSUB__(v53, v54))
                goto LABEL_168;
              if (__OFADD__(v46, 1))
                goto LABEL_169;
              if (v46 + 1 < 1)
              {
                v50 = 1;
                v46 = v53;
                goto LABEL_44;
              }
              if ((_DWORD)v50 == 2)
                goto LABEL_43;
              v55 = *(_QWORD *)(v47 + 80);
              v52 = __OFSUB__(v46, v55);
              v53 = v46 - v55;
              if (v52)
                goto LABEL_172;
              if (__OFADD__(v53, 1))
                goto LABEL_173;
              if (v53 + 1 < 1)
              {
                v50 = 2;
                goto LABEL_44;
              }
              if ((_DWORD)v50 != 3)
              {
                v56 = 3;
                if (v50 > 3)
                  v56 = *(unsigned __int16 *)(v47 + 16);
                v57 = (_QWORD *)(v47 + 104);
                v58 = 3;
                while (1)
                {
                  if (v56 == v58)
                    goto LABEL_164;
                  v46 = v53 - *v57;
                  if (__OFSUB__(v53, *v57))
                    goto LABEL_165;
                  if (__OFADD__(v46, 1))
                    goto LABEL_166;
                  if (v46 + 1 < 1)
                    break;
                  ++v58;
                  v57 += 3;
                  v53 = v46;
                  if (v50 == v58)
                    goto LABEL_43;
                }
                v50 = v58;
                v46 = v53;
                goto LABEL_44;
              }
            }
            v46 = v53;
          }
LABEL_43:
          if (v46)
          {
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
            goto LABEL_157;
          }
LABEL_44:
          v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
          v45 = ((-15 << v48) - 1) & v45 | (v50 << v48);
          v49 = *(_QWORD *)(v47 + 24 + 24 * v50);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v47 = v49;
          if (!*(_BYTE *)(v49 + 18))
            goto LABEL_76;
        }
      }
      swift_unknownObjectRetain_n();
      result = swift_retain();
      v46 = v141;
      v49 = v39;
LABEL_76:
      v59 = *(unsigned __int16 *)(v49 + 16);
      if (*(_WORD *)(v49 + 16))
      {
        v60 = v46 - 1;
        if (__OFSUB__(v46, 1))
        {
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
          goto LABEL_180;
        }
        if (__OFADD__(v60, 1))
          goto LABEL_176;
        if (v46 <= 0)
        {
          v59 = 0;
        }
        else
        {
          if ((_DWORD)v59 == 1)
            goto LABEL_102;
          v52 = __OFSUB__(v60, 1);
          v60 = v46 - 2;
          if (v52)
            goto LABEL_179;
          if (__OFADD__(v60, 1))
          {
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          if (v46 - 1 < 1)
          {
            v59 = 1;
          }
          else
          {
            if ((_DWORD)v59 == 2)
              goto LABEL_102;
            v52 = __OFSUB__(v60, 1);
            v60 = v46 - 3;
            if (v52)
              goto LABEL_181;
            if (__OFADD__(v60, 1))
            {
LABEL_182:
              __break(1u);
              return result;
            }
            if (v46 - 2 < 1)
            {
              v59 = 2;
            }
            else
            {
              if ((_DWORD)v59 == 3)
                goto LABEL_102;
              v61 = 0;
              v62 = 3;
              if (v59 > 3)
                v62 = *(unsigned __int16 *)(v49 + 16);
              v63 = v62 - 3;
              if (v60 >= v59 - 4)
                v64 = v59 - 4;
              else
                v64 = v46 - 3;
              if (v64 >= v46 + 0x7FFFFFFFFFFFFFFDLL)
                v64 = v46 + 0x7FFFFFFFFFFFFFFDLL;
              while (1)
              {
                if (v63 <= v64)
                  goto LABEL_177;
                if (v46 + 0x7FFFFFFFFFFFFFFDLL == v61)
                  goto LABEL_178;
                if (v60 == v61)
                  break;
                if (v59 - 3 == ++v61)
                {
                  v60 -= v61;
                  goto LABEL_102;
                }
              }
              v59 = v46;
            }
          }
        }
      }
      else
      {
        v60 = v46;
LABEL_102:
        if (v60)
        {
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v65 = v45 & 0xFFFFFFFFFFFFF0FFLL;
      v41 = v49;
      v42 = v65 | (v59 << 8);
      v40 = v129;
      v38 = v130;
LABEL_109:
      swift_unknownObjectRetain();
      v43 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v42, v41, v39, v128, v40);
      result = swift_unknownObjectRelease_n();
      goto LABEL_111;
    }
    swift_unknownObjectRetain_n();
    swift_retain();
    v38 = v130;
    v42 = specialized Rope._endPath.getter(v39);
    result = swift_unknownObjectRelease();
    v41 = 0;
    if (v39)
      goto LABEL_109;
LABEL_110:
    v43 = 0;
LABEL_111:
    v152._countAndFlagsBits = v38;
    v152._object = (void *)v42;
    *(_QWORD *)&v153 = v41;
    if (__OFADD__(v141, 1))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (v38 != v130)
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    v142 = v141 + 1;
    if (v41)
    {
      v66 = *(_QWORD *)(v41 + 24 * ((v42 >> ((4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67 = v128;
    }
    else
    {
      swift_unknownObjectRetain();
      v68 = v42;
      v67 = v128;
      v66 = specialized Rope._Node.subscript.getter(v68, v39);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v52 = __OFADD__(v43, v66);
    v69 = v43 + v66;
    if (v52)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v152, v39, v67, v129, v130);
    swift_unknownObjectRelease_n();
    v135 = v153;
    v137 = v152._object;
    countAndFlagsBits = v152._countAndFlagsBits;
    if (v140 != 2)
    {
      v76 = v123[1];
      v184 = *v123;
      v185 = v76;
      v186 = v123[2];
      BigString.utf8.getter();
      result = v138;
      if (!__OFSUB__(v69, v138 >> 11))
      {
        v71 = BigString.UTF8View.index(_:offsetBy:)();
        v131 = v78;
        v132 = v77;
        v140 = v79;
        v75 = &v169;
        goto LABEL_121;
      }
      goto LABEL_171;
    }
    v70 = v123[1];
    v187 = *v123;
    v188 = v70;
    v189 = v123[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v71 = BigString.UTF8View.index(_:offsetBy:)();
    v131 = v73;
    v132 = v72;
    v140 = v74;
    v75 = &v170;
LABEL_121:
    outlined release of Locale((uint64_t)v75);
    swift_release();
    v139 = v71;
    v80 = v108[1];
    v181 = *v108;
    v182 = v80;
    v183 = v108[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v171);
    v81 = MEMORY[0x186DA46DC](v172);
    v83 = v82;
    v84 = v166 & 0xFFFFFFFFFFFFLL;
    if ((v167 & 0x2000000000000000) != 0)
      v84 = HIBYTE(v167) & 0xF;
    if (v84)
    {
      v85._countAndFlagsBits = 10;
      v85._object = (void *)0xE100000000000000;
      String.append(_:)(v85);
    }
    v150._countAndFlagsBits = v81;
    v150._object = v83;
    v86._countAndFlagsBits = 32;
    v86._object = (void *)0xE100000000000000;
    String.append(_:)(v86);
    v149._countAndFlagsBits = 0;
    v149._object = (void *)0xE000000000000000;
    v87 = v21 + 64;
    v88 = 1 << *(_BYTE *)(v21 + 32);
    if (v88 < 64)
      v89 = ~(-1 << v88);
    else
      v89 = -1;
    v90 = v89 & *(_QWORD *)(v21 + 64);
    v91 = (unint64_t)(v88 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    v92 = 0;
    while (1)
    {
      if (v90)
      {
        v93 = __clz(__rbit64(v90));
        v90 &= v90 - 1;
        v94 = v93 | (v92 << 6);
        goto LABEL_130;
      }
      v103 = v92 + 1;
      if (__OFADD__(v92, 1))
      {
        __break(1u);
        goto LABEL_153;
      }
      if (v103 >= v91)
        break;
      v104 = *(_QWORD *)(v87 + 8 * v103);
      ++v92;
      if (!v104)
      {
        v92 = v103 + 1;
        if (v103 + 1 >= v91)
          break;
        v104 = *(_QWORD *)(v87 + 8 * v92);
        if (!v104)
        {
          v92 = v103 + 2;
          if (v103 + 2 >= v91)
            break;
          v104 = *(_QWORD *)(v87 + 8 * v92);
          if (!v104)
          {
            v92 = v103 + 3;
            if (v103 + 3 >= v91)
              break;
            v104 = *(_QWORD *)(v87 + 8 * v92);
            if (!v104)
            {
              v92 = v103 + 4;
              if (v103 + 4 >= v91)
                break;
              v104 = *(_QWORD *)(v87 + 8 * v92);
              if (!v104)
              {
                v105 = v103 + 5;
                if (v105 >= v91)
                  break;
                v104 = *(_QWORD *)(v87 + 8 * v105);
                if (!v104)
                {
                  while (1)
                  {
                    v92 = v105 + 1;
                    if (__OFADD__(v105, 1))
                      goto LABEL_167;
                    if (v92 >= v91)
                      goto LABEL_4;
                    v104 = *(_QWORD *)(v87 + 8 * v92);
                    ++v105;
                    if (v104)
                      goto LABEL_149;
                  }
                }
                v92 = v105;
              }
            }
          }
        }
      }
LABEL_149:
      v90 = (v104 - 1) & v104;
      v94 = __clz(__rbit64(v104)) + (v92 << 6);
LABEL_130:
      v95 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v94);
      v97 = *v95;
      v96 = (void *)v95[1];
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v21 + 56) + 72 * v94, (uint64_t)&v153);
      v152._countAndFlagsBits = v97;
      v152._object = v96;
      v145 = v154;
      v146 = v155;
      v147 = *(_OWORD *)v156;
      v148 = *(_QWORD *)&v156[16];
      v143 = v152;
      v144 = v153;
      v98 = v152;
      swift_bridgeObjectRetain();
      String.append(_:)(v98);
      v99._countAndFlagsBits = 2112800;
      v99._object = (void *)0xE300000000000000;
      String.append(_:)(v99);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v144, (uint64_t)v151);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v100._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._countAndFlagsBits = 10;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      v102._countAndFlagsBits = 9;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      result = outlined destroy of Any?((uint64_t)&v143, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v152._countAndFlagsBits = 2683;
    v152._object = (void *)0xE200000000000000;
    String.append(_:)(v149);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 125;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    String.append(_:)(v152);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v150);
    v3 = (uint64_t)v133;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v4 = v106;
    v2 = v107;
    v12 = v142;
    v11 = (uint64_t)v137;
    v7 = v139;
    if (v142 != v106)
      continue;
    break;
  }
  v5 = v166;
LABEL_151:
  swift_release();
  outlined release of AttributedString.Runs((uint64_t)&v193);
  return v5;
}

unint64_t AttributedString.Guts.index(afterRun:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[48];
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = result >> 11;
  if (v2)
    v4 = *(_QWORD *)(v1 + 80);
  else
    v4 = 0;
  if (v4 < v3)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 88);
  if (!v2 || (v3 < *(_QWORD *)(v1 + 80) ? (v7 = *(unsigned __int16 *)(v2 + 16) == 0) : (v7 = 1), v7))
  {
    v8 = swift_unknownObjectRetain_n();
    v9 = specialized Rope._endPath.getter(v8);
    result = swift_unknownObjectRelease();
    v10 = 0;
    v11 = v5;
    v12 = 0;
    if (v2)
      goto LABEL_12;
    goto LABEL_13;
  }
  v33 = *(_QWORD *)(v1 + 72);
  v34 = *(_QWORD *)(v1 + 88);
  v19 = *(unsigned __int8 *)(v2 + 18);
  if (!*(_BYTE *)(v2 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v12 = v3;
    v10 = v2;
    v27 = *(unsigned __int16 *)(v2 + 16);
    if (!*(_WORD *)(v2 + 16))
      goto LABEL_53;
LABEL_42:
    v28 = *(_QWORD *)(v10 + 24);
    v13 = __OFSUB__(v12, v28);
    v29 = v12 - v28;
    if (v13)
      goto LABEL_68;
    if (!__OFADD__(v29, 1))
    {
      if (v29 + 1 < 1)
      {
        v27 = 0;
        goto LABEL_54;
      }
      if ((_DWORD)v27 == 1)
      {
        v12 = v29;
        goto LABEL_53;
      }
      v30 = (uint64_t *)(v10 + 48);
      v31 = 1;
      while (1)
      {
        v32 = *v30;
        v30 += 3;
        v12 = v29 - v32;
        if (__OFSUB__(v29, v32))
          goto LABEL_66;
        if (__OFADD__(v12, 1))
          goto LABEL_67;
        if (v12 + 1 < 1)
        {
          v27 = v31;
          v12 = v29;
          goto LABEL_54;
        }
        ++v31;
        v29 = v12;
        if (v27 == v31)
          goto LABEL_53;
      }
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  result = swift_unknownObjectRetain_n();
  v12 = v3;
  v10 = v2;
  do
  {
    v21 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
      v22 = *(_QWORD *)(v10 + 40);
      v13 = __OFSUB__(v12, v22);
      v23 = v12 - v22;
      if (v13)
        goto LABEL_59;
      if (__OFADD__(v23, 1))
        goto LABEL_60;
      if (v23 + 1 < 1)
      {
        v21 = 0;
        goto LABEL_25;
      }
      if ((_DWORD)v21 != 1)
      {
        v24 = (uint64_t *)(v10 + 64);
        v25 = 1;
        while (1)
        {
          v26 = *v24;
          v24 += 3;
          v12 = v23 - v26;
          if (__OFSUB__(v23, v26))
            break;
          if (__OFADD__(v12, 1))
            goto LABEL_57;
          if (v12 + 1 < 1)
          {
            v21 = v25;
            v12 = v23;
            goto LABEL_25;
          }
          ++v25;
          v23 = v12;
          if (v21 == v25)
            goto LABEL_24;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v12 = v23;
    }
LABEL_24:
    if (v12)
      goto LABEL_58;
LABEL_25:
    v20 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
    v19 = ((-15 << v20) - 1) & v19 | (v21 << v20);
    v10 = *(_QWORD *)(v10 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v10 + 18));
  v19 &= 0xFFFFFFFFFFFFF0FFLL;
  v27 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16))
    goto LABEL_42;
LABEL_53:
  if (!v12)
  {
LABEL_54:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v9 = v19 | (v27 << 8);
    v6 = v34;
    v11 = v33;
LABEL_12:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v9, v10, v2, v11);
    result = swift_unknownObjectRelease_n();
LABEL_13:
    v13 = __OFSUB__(v3, v12);
    v14 = v3 - v12;
    if (!v13)
    {
      if (v6 == *(_QWORD *)(v1 + 88))
      {
        if (v10)
        {
          v15 = *(_QWORD *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v16 = *(_QWORD *)(v1 + 64);
          swift_unknownObjectRetain();
          v15 = specialized Rope._Node.subscript.getter(v9, v16);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = *(_OWORD *)(v1 + 32);
        v36 = *(_OWORD *)(v1 + 16);
        v37 = v17;
        v38 = *(_OWORD *)(v1 + 48);
        result = BigString.utf8.getter();
        if (!__OFADD__(v14, v15))
        {
          if (!__OFSUB__(v14 + v15, v3))
          {
            v18 = BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)v35);
            return v18;
          }
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
LABEL_70:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.index(beforeRun:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  __int128 *v32;
  char v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  char v49[48];
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v2 = v1;
  v4 = *(_OWORD *)(v1 + 32);
  v54 = *(_OWORD *)(v1 + 16);
  v55 = v4;
  v56 = *(_OWORD *)(v1 + 48);
  BigString.utf8.getter();
  v5 = BigString.UTF8View.index(before:)();
  result = outlined release of Locale((uint64_t)v49);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 80);
  if (v7)
    v9 = *(_QWORD *)(v1 + 80);
  else
    v9 = 0;
  v48 = v5 >> 11;
  if (v9 < (uint64_t)(v5 >> 11))
    goto LABEL_78;
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(__int128 **)(v1 + 88);
  v47 = a1;
  if (!v7 || v48 >= v8 || !*(_WORD *)(v7 + 16))
  {
    v24 = swift_unknownObjectRetain_n();
    v25 = specialized Rope._endPath.getter(v24);
    result = swift_unknownObjectRelease();
    v26 = v10;
    v16 = 0;
    v13 = 0;
    v27 = 0;
    if (!v7)
      goto LABEL_28;
    goto LABEL_27;
  }
  v46 = v10;
  v12 = *(unsigned __int8 *)(v7 + 18);
  if (!*(_BYTE *)(v7 + 18))
    goto LABEL_51;
  result = swift_unknownObjectRetain_n();
  v13 = v48;
  v14 = v7;
  while (2)
  {
    v17 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16))
      goto LABEL_11;
    v18 = *(_QWORD *)(v14 + 40);
    v19 = __OFSUB__(v13, v18);
    v20 = v13 - v18;
    if (v19)
      goto LABEL_76;
    if (__OFADD__(v20, 1))
      goto LABEL_77;
    if (v20 + 1 < 1)
    {
      v17 = 0;
      goto LABEL_12;
    }
    if ((_DWORD)v17 == 1)
    {
      v13 = v20;
LABEL_11:
      if (!v13)
        goto LABEL_12;
      goto LABEL_75;
    }
    v21 = (uint64_t *)(v14 + 64);
    v22 = 1;
    while (1)
    {
      v23 = *v21;
      v21 += 3;
      v13 = v20 - v23;
      if (__OFSUB__(v20, v23))
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      if (__OFADD__(v13, 1))
        goto LABEL_74;
      if (v13 + 1 < 1)
        break;
      ++v22;
      v20 = v13;
      if (v17 == v22)
        goto LABEL_11;
    }
    v17 = v22;
    v13 = v20;
LABEL_12:
    v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    v12 = ((-15 << v15) - 1) & v12 | (v17 << v15);
    v16 = *(_QWORD *)(v14 + 24 + 24 * v17);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    v14 = v16;
    if (*(_BYTE *)(v16 + 18))
      continue;
    break;
  }
  while (1)
  {
    v38 = *(unsigned __int16 *)(v16 + 16);
    if (*(_WORD *)(v16 + 16))
    {
      v39 = *(_QWORD *)(v16 + 24);
      v19 = __OFSUB__(v13, v39);
      v40 = v13 - v39;
      if (v19)
        goto LABEL_90;
      if (__OFADD__(v40, 1))
        goto LABEL_91;
      if (v40 + 1 < 1)
      {
        v38 = 0;
        goto LABEL_70;
      }
      if ((_DWORD)v38 != 1)
      {
        v43 = (uint64_t *)(v16 + 48);
        v44 = 1;
        while (1)
        {
          v45 = *v43;
          v43 += 3;
          v13 = v40 - v45;
          if (__OFSUB__(v40, v45))
            goto LABEL_82;
          if (__OFADD__(v13, 1))
            goto LABEL_83;
          if (v13 + 1 < 1)
          {
            v38 = v44;
            v13 = v40;
            goto LABEL_70;
          }
          ++v44;
          v40 = v13;
          if (v38 == v44)
            goto LABEL_69;
        }
      }
      v13 = v40;
    }
LABEL_69:
    if (v13)
      goto LABEL_92;
LABEL_70:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    v25 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
    v27 = v13;
    v26 = v46;
    if (v7)
    {
LABEL_27:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v11, v25, v16, v7, v26);
      result = swift_unknownObjectRelease_n();
      v27 = v13;
    }
LABEL_28:
    v28 = v48 - v27;
    if (__OFSUB__(v48, v27))
      goto LABEL_79;
    if (v11 != *(__int128 **)(v2 + 88))
      goto LABEL_80;
    if (v16)
    {
      v29 = *(_QWORD *)(v16 + 24 * ((v25 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = *(_QWORD *)(v2 + 64);
      swift_unknownObjectRetain();
      v29 = specialized Rope._Node.subscript.getter(v25, v30);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (__OFADD__(v28, v29))
      goto LABEL_81;
    v12 = v2 + 16;
    if ((uint64_t)(v28 + v29) <= (uint64_t)(v47 >> 11))
      break;
    if (v28 < 1)
      goto LABEL_84;
    v31 = *(_BYTE **)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 80);
    v32 = *(__int128 **)(v2 + 88);
    *(_QWORD *)&v51 = v11;
    *((_QWORD *)&v51 + 1) = v25;
    *(_QWORD *)&v52 = v16;
    if (v11 != v32)
      goto LABEL_85;
    if (v31)
    {
      v2 = v31[18];
      swift_unknownObjectRetain_n();
      if (v2 < v25)
        goto LABEL_39;
    }
    else
    {
      v2 = 0;
      if (v25)
      {
LABEL_39:
        if (!v16)
          goto LABEL_45;
        v33 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
        if (((v25 >> v33) & 0xF) == 0)
          goto LABEL_45;
        v34 = ((((v25 >> v33) & 0xF) - 1) << v33) | ((-15 << v33) - 1) & v25;
        *((_QWORD *)&v51 + 1) = v34;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    __break(1u);
LABEL_51:
    result = swift_unknownObjectRetain_n();
    v13 = v48;
    v16 = v7;
  }
  v35 = *(_OWORD *)(v2 + 32);
  v51 = *(_OWORD *)v12;
  v52 = v35;
  v53 = *(_OWORD *)(v2 + 48);
  v31 = v50;
  v11 = &v51;
  BigString.utf8.getter();
  if (!__OFSUB__(v28, v48))
  {
LABEL_61:
    v42 = BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v50);
    return v42;
  }
  __break(1u);
LABEL_45:
  swift_unknownObjectRetain();
  v36 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v51, (uint64_t)v31);
  result = swift_unknownObjectRelease_n();
  if ((v36 & 1) == 0)
    goto LABEL_89;
  if ((__int128 *)v51 != v11)
    goto LABEL_86;
  v34 = *((_QWORD *)&v51 + 1);
  v16 = v52;
  if ((_QWORD)v52)
  {
LABEL_48:
    v37 = *(_QWORD *)(v16 + 24 * ((v34 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_59;
  }
  swift_unknownObjectRetain();
  v37 = specialized Rope._Node.subscript.getter(v34, (uint64_t)v31);
  swift_unknownObjectRelease();
LABEL_59:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v28, v37))
    goto LABEL_87;
  v41 = *(_OWORD *)(v12 + 16);
  v51 = *(_OWORD *)v12;
  v52 = v41;
  v53 = *(_OWORD *)(v12 + 32);
  result = BigString.utf8.getter();
  if (!__OFSUB__(v28 - v37, v48))
    goto LABEL_61;
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

_QWORD *AttributedString.Guts.getUniformValues(in:)(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;

  v2 = *result >> 11;
  v3 = v1[8];
  if (v3)
    v4 = v1[10];
  else
    v4 = 0;
  if (v4 < v2)
    goto LABEL_306;
  v5 = result[4];
  v6 = v1[9];
  v107 = v1[11];
  v101 = *result >> 11;
  if (!v3 || (v2 < v1[10] ? (v7 = *(unsigned __int16 *)(v3 + 16) == 0) : (v7 = 1), v7))
  {
    swift_retain_n();
    v8 = swift_unknownObjectRetain_n();
    v9 = specialized Rope._endPath.getter(v8);
    swift_unknownObjectRelease();
    v10 = 0;
    v11 = 0;
    if (!v3)
      goto LABEL_264;
    goto LABEL_12;
  }
  v9 = *(unsigned __int8 *)(v3 + 18);
  if (*(_BYTE *)(v3 + 18))
  {
    swift_unknownObjectRetain_n();
    result = (_QWORD *)swift_retain_n();
    v11 = v2;
    v85 = v3;
    while (1)
    {
      v87 = *(unsigned __int16 *)(v85 + 16);
      if (!*(_WORD *)(v85 + 16))
        goto LABEL_211;
      v88 = *(_QWORD *)(v85 + 40);
      v89 = v11 - v88;
      if (__OFSUB__(v11, v88))
        goto LABEL_292;
      if (__OFADD__(v89, 1))
        goto LABEL_293;
      if (v89 + 1 <= 0)
      {
        v87 = 0;
        goto LABEL_212;
      }
      if ((_DWORD)v87 == 1)
        break;
      v90 = *(_QWORD *)(v85 + 64);
      v12 = __OFSUB__(v89, v90);
      v91 = v89 - v90;
      if (v12)
        goto LABEL_304;
      if (__OFADD__(v91, 1))
        goto LABEL_305;
      if (v91 + 1 < 1)
      {
        v87 = 1;
        v11 = v89;
        goto LABEL_212;
      }
      if ((_DWORD)v87 == 2)
      {
        v11 = v91;
        goto LABEL_211;
      }
      v92 = (_QWORD *)(v85 + 88);
      v93 = 2;
      while (1)
      {
        if (v87 == v93)
          goto LABEL_285;
        v11 = v91 - *v92;
        if (__OFSUB__(v91, *v92))
        {
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
          goto LABEL_289;
        }
        if (__OFADD__(v11, 1))
          goto LABEL_287;
        if (v11 + 1 < 1)
          break;
        ++v93;
        v92 += 3;
        v91 = v11;
        if (v87 == v93)
          goto LABEL_211;
      }
      v87 = v93;
      v11 = v91;
LABEL_212:
      v86 = (4 * *(_BYTE *)(v85 + 18) + 8) & 0x3C;
      v9 = ((-15 << v86) - 1) & v9 | (v87 << v86);
      v10 = *(_QWORD *)(v85 + 24 + 24 * v87);
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_unknownObjectRelease();
      v85 = v10;
      if (!*(_BYTE *)(v10 + 18))
        goto LABEL_234;
    }
    v11 -= v88;
LABEL_211:
    if (!v11)
      goto LABEL_212;
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    __break(1u);
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }
  swift_unknownObjectRetain_n();
  result = (_QWORD *)swift_retain_n();
  v11 = v2;
  v10 = v3;
LABEL_234:
  v2 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16))
    goto LABEL_240;
  v94 = *(_QWORD *)(v10 + 24);
  v95 = v11 - v94;
  if (__OFSUB__(v11, v94))
    goto LABEL_320;
  if (__OFADD__(v95, 1))
  {
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
    goto LABEL_325;
  }
  if (v95 + 1 <= 0)
  {
LABEL_242:
    v2 = 0;
    goto LABEL_263;
  }
  if ((_DWORD)v2 == 1)
  {
    v11 -= v94;
LABEL_240:
    if (!v11)
      goto LABEL_263;
    __break(1u);
    goto LABEL_242;
  }
  v96 = *(_QWORD *)(v10 + 48);
  v12 = __OFSUB__(v95, v96);
  v23 = v95 - v96;
  if (v12)
    goto LABEL_324;
  if (__OFADD__(v23, 1))
  {
LABEL_325:
    __break(1u);
    return result;
  }
  if (v23 + 1 >= 1)
  {
    if ((_DWORD)v2 != 2)
      goto LABEL_252;
    v11 = v23;
    goto LABEL_240;
  }
  v2 = 1;
  v11 = v95;
LABEL_263:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v9 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v2 << 8);
  v2 = v101;
  if (v3)
  {
LABEL_12:
    swift_unknownObjectRetain();
    v104 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v107, v9, v10, v3, v6);
    swift_release();
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v12 = __OFSUB__(v2, v11);
    v13 = v2 - v11;
    if (v12)
      goto LABEL_266;
  }
  else
  {
LABEL_264:
    result = (_QWORD *)swift_release();
    v104 = 0;
    v12 = __OFSUB__(v2, v11);
    v13 = v2 - v11;
    if (v12)
    {
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
      goto LABEL_282;
    }
  }
  v106 = v5 >> 11;
  v102 = 1;
  v103 = MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v14 = v1[8];
    if (v2 != v106)
    {
      if (v14)
        v20 = v1[10];
      else
        v20 = 0;
      goto LABEL_82;
    }
    v6 = v1[10];
    if (v14)
      v15 = v1[10];
    else
      v15 = 0;
    if (v15 < v2)
      goto LABEL_280;
    if (v14)
    {
      v98 = v1[11];
      v99 = v1[9];
      v16 = *(unsigned __int16 *)(v14 + 16);
      v17 = *(unsigned __int8 *)(v14 + 18);
      if (v2 >= v6 || (_DWORD)v16 == 0)
      {
        v19 = ((-15 << ((4 * v17 + 8) & 0x3C)) - 1) & v17 | (unint64_t)(v16 << ((4 * v17 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v2 = 0;
        v5 = 0;
LABEL_79:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v98, v19, v5, v14, v99);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        goto LABEL_80;
      }
      if (*(_BYTE *)(v14 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v3 = v14;
        while (1)
        {
          v23 = *(unsigned __int16 *)(v3 + 16);
          if (!*(_WORD *)(v3 + 16))
            goto LABEL_33;
          v21 = *(_QWORD *)(v3 + 40);
          v24 = v2 - v21;
          if (__OFSUB__(v2, v21))
            goto LABEL_260;
          v21 = v24 + 1;
          if (__OFADD__(v24, 1))
            goto LABEL_261;
          if (v21 <= 0)
          {
            v23 = 0;
            goto LABEL_34;
          }
          if ((_DWORD)v23 == 1)
          {
            v2 = v24;
            goto LABEL_33;
          }
          v25 = *(_QWORD *)(v3 + 64);
          v12 = __OFSUB__(v24, v25);
          v21 = v24 - v25;
          if (v12)
            goto LABEL_278;
          if (__OFADD__(v21, 1))
            goto LABEL_279;
          if (v21 + 1 < 1)
          {
            v23 = 1;
            v2 = v24;
            goto LABEL_34;
          }
          if ((_DWORD)v23 == 2)
            break;
          v26 = (_QWORD *)(v3 + 88);
          v27 = 2;
          while (1)
          {
            if (v23 == v27)
            {
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              v97 = (_QWORD *)(v10 + 72);
              v21 = 2;
              while (v2 != v21)
              {
                v11 = v23 - *v97;
                if (__OFSUB__(v23, *v97))
                  goto LABEL_316;
                if (__OFADD__(v11, 1))
                  goto LABEL_317;
                if (v11 + 1 < 1)
                  goto LABEL_262;
                ++v21;
                v97 += 3;
                v23 = v11;
                if (v2 == v21)
                  goto LABEL_240;
              }
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
              goto LABEL_319;
            }
            v2 = v21 - *v26;
            if (__OFSUB__(v21, *v26))
              goto LABEL_250;
            if (__OFADD__(v2, 1))
              goto LABEL_251;
            if (v2 + 1 < 1)
              break;
            ++v27;
            v26 += 3;
            v21 = v2;
            if (v23 == v27)
              goto LABEL_33;
          }
          v23 = v27;
          v2 = v21;
LABEL_34:
          v22 = (4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C;
          v17 = ((-15 << v22) - 1) & v17 | (v23 << v22);
          v5 = *(_QWORD *)(v3 + 24 + 24 * v23);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v3 = v5;
          if (!*(_BYTE *)(v5 + 18))
            goto LABEL_56;
        }
        v2 = v21;
LABEL_33:
        if (!v2)
          goto LABEL_34;
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        v2 = v21;
        v11 = v23;
        goto LABEL_263;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v17 = 0;
      v5 = v14;
LABEL_56:
      v28 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16))
        goto LABEL_65;
      v29 = *(_QWORD *)(v5 + 24);
      v12 = __OFSUB__(v2, v29);
      v30 = v2 - v29;
      if (v12)
        goto LABEL_300;
      if (__OFADD__(v30, 1))
        goto LABEL_301;
      if (v30 + 1 <= 0)
      {
        v28 = 0;
      }
      else
      {
        if ((_DWORD)v28 == 1)
        {
LABEL_66:
          if (v30)
            goto LABEL_299;
          v2 = 0;
          goto LABEL_78;
        }
        v31 = *(_QWORD *)(v5 + 48);
        v2 = v30 - v31;
        if (__OFSUB__(v30, v31))
          goto LABEL_310;
        if (__OFADD__(v2, 1))
          goto LABEL_311;
        if (v2 + 1 < 1)
        {
          v28 = 1;
          v2 = v30;
        }
        else
        {
          if ((_DWORD)v28 == 2)
          {
LABEL_65:
            v30 = v2;
            goto LABEL_66;
          }
          v32 = (_QWORD *)(v5 + 72);
          v33 = 2;
          while (1)
          {
            if (v28 == v33)
              goto LABEL_296;
            v30 = v2 - *v32;
            if (__OFSUB__(v2, *v32))
              goto LABEL_297;
            if (__OFADD__(v30, 1))
              goto LABEL_298;
            if (v30 + 1 < 1)
              break;
            ++v33;
            v32 += 3;
            v2 = v30;
            if (v28 == v33)
              goto LABEL_66;
          }
          v28 = v33;
        }
      }
LABEL_78:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v19 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
      goto LABEL_79;
    }
    v2 = 0;
LABEL_80:
    v20 = v101 - v2;
    if (__OFSUB__(v101, v2))
      goto LABEL_281;
    v2 = v101;
LABEL_82:
    if (v13 == v20)
      break;
    if (v107 != v1[11])
      goto LABEL_267;
    if (v10)
    {
      v34 = (_QWORD *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF));
      v5 = v34[4];
      v35 = v34[5];
      v36 = v34[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      v37 = v1[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v9, v37);
      v5 = v38;
      v35 = v39;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v107 != v1[11])
        goto LABEL_288;
      v40 = v1[8];
      swift_unknownObjectRetain();
      v36 = specialized Rope._Node.subscript.getter(v9, v40);
      v2 = v101;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v41 = v13 + v36;
    if (__OFADD__(v13, v36))
      goto LABEL_268;
    if (v106 >= v13)
      v42 = v13;
    else
      v42 = v106;
    if (v13 < v2)
      v42 = v2;
    if (v41 <= v2)
      v43 = v2;
    else
      v43 = v13 + v36;
    if (v106 >= v41)
      v44 = v43;
    else
      v44 = v106;
    if (v42 == v44)
      goto LABEL_269;
    v45 = v44 - v42;
    if (__OFSUB__(v44, v42))
      goto LABEL_270;
    v46 = v1[8];
    v47 = v1[11];
    v109 = v107;
    v110 = v9;
    v111 = v10;
    if (__OFADD__(v104, 1))
      goto LABEL_271;
    if (v107 != v47)
      goto LABEL_272;
    v100 = v45;
    ++v104;
    if (v10)
    {
      v48 = *(_QWORD *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      v48 = specialized Rope._Node.subscript.getter(v9, v46);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v12 = __OFADD__(v13, v48);
    v13 += v48;
    if (v12)
      goto LABEL_273;
    if (v46)
    {
      v49 = ((-15 << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v49 = 0;
    }
    v2 = v101;
    if (v9 >= v49)
      goto LABEL_274;
    if (v10)
    {
      v50 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
      v51 = ((v9 >> v50) & 0xF) + 1;
      if (v51 < *(unsigned __int16 *)(v10 + 16))
      {
        v9 = (v51 << v50) | ((-15 << v50) - 1) & v9;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        goto LABEL_124;
      }
    }
    v52 = *(unsigned __int8 *)(v46 + 18);
    v53 = (4 * v52 + 8) & 0x3C;
    v54 = (v9 >> v53) & 0xF;
    v108 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      v55 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v46 + 24, &v108, (uint64_t)&v109, v46, v52);
      result = (_QWORD *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v9 = v110;
        v107 = v109;
        v10 = v111;
        goto LABEL_124;
      }
    }
    else
    {
      v56 = v54 + 1;
      if (v54 + 1 < (unint64_t)*(unsigned __int16 *)(v46 + 16))
      {
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v9 = (v56 << v53) | ((-15 << v53) - 1) & v9;
        v10 = v46;
        goto LABEL_124;
      }
    }
    if (v46)
    {
      v57 = *(unsigned __int8 *)(v46 + 18);
      v58 = *(unsigned __int16 *)(v46 + 16);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      v9 = ((-15 << ((4 * v57 + 8) & 0x3C)) - 1) & v57 | (unint64_t)(v58 << ((4 * v57 + 8) & 0x3C));
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    v109 = v107;
LABEL_124:
    if (v13 >= v106)
    {
      v59 = v1[8];
      if (v101 != v106)
      {
        v107 = v1[11];
        if (v59)
        {
          v13 = v1[10];
          v104 = v1[9];
          v73 = *(unsigned __int8 *)(v59 + 18);
          v74 = *(unsigned __int16 *)(v59 + 16);
          swift_release();
          v10 = 0;
          v9 = ((-15 << ((4 * v73 + 8) & 0x3C)) - 1) & v73 | (unint64_t)(v74 << ((4 * v73 + 8) & 0x3C));
        }
        else
        {
          swift_release();
          v9 = 0;
          v10 = 0;
          v104 = 0;
          v13 = 0;
        }
        goto LABEL_186;
      }
      if (v59)
        v60 = v1[10];
      else
        v60 = 0;
      if (v60 < v101)
        goto LABEL_294;
      v107 = v1[11];
      if (v59)
      {
        v105 = v1[9];
        v61 = *(unsigned __int8 *)(v59 + 18);
        if (v101 < v1[10] && *(_WORD *)(v59 + 16))
        {
          if (*(_BYTE *)(v59 + 18))
          {
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v62 = v101;
            v63 = v59;
            while (1)
            {
              v65 = *(unsigned __int16 *)(v63 + 16);
              if (!*(_WORD *)(v63 + 16))
                goto LABEL_137;
              v66 = *(_QWORD *)(v63 + 40);
              v12 = __OFSUB__(v62, v66);
              v67 = v62 - v66;
              if (v12)
                goto LABEL_276;
              if (__OFADD__(v67, 1))
                goto LABEL_277;
              if (v67 + 1 <= 0)
              {
                v65 = 0;
              }
              else
              {
                if ((_DWORD)v65 == 1)
                  goto LABEL_136;
                v68 = *(_QWORD *)(v63 + 64);
                v62 = v67 - v68;
                if (__OFSUB__(v67, v68))
                  goto LABEL_290;
                if (__OFADD__(v62, 1))
                  goto LABEL_291;
                if (v62 + 1 < 1)
                {
                  v65 = 1;
                  v62 = v67;
                }
                else
                {
                  if ((_DWORD)v65 == 2)
                    goto LABEL_137;
                  v69 = *(_QWORD *)(v63 + 88);
                  v12 = __OFSUB__(v62, v69);
                  v67 = v62 - v69;
                  if (v12)
                    goto LABEL_302;
                  if (__OFADD__(v67, 1))
                    goto LABEL_303;
                  if (v67 + 1 >= 1)
                  {
                    if ((_DWORD)v65 != 3)
                    {
                      v70 = 3;
                      if (v65 > 3)
                        v70 = *(unsigned __int16 *)(v63 + 16);
                      v71 = (_QWORD *)(v63 + 112);
                      v72 = 3;
                      while (v70 != v72)
                      {
                        v62 = v67 - *v71;
                        if (__OFSUB__(v67, *v71))
                          goto LABEL_283;
                        if (__OFADD__(v62, 1))
                          goto LABEL_284;
                        if (v62 + 1 < 1)
                        {
                          v65 = v72;
                          v62 = v67;
                          goto LABEL_138;
                        }
                        ++v72;
                        v71 += 3;
                        v67 = v62;
                        if (v65 == v72)
                          goto LABEL_137;
                      }
LABEL_282:
                      __break(1u);
LABEL_283:
                      __break(1u);
LABEL_284:
                      __break(1u);
LABEL_285:
                      __break(1u);
                      goto LABEL_286;
                    }
LABEL_136:
                    v62 = v67;
LABEL_137:
                    if (v62)
                      goto LABEL_275;
                    goto LABEL_138;
                  }
                  v65 = 2;
                }
              }
LABEL_138:
              v64 = (4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C;
              v61 = ((-15 << v64) - 1) & v61 | (v65 << v64);
              v10 = *(_QWORD *)(v63 + 24 + 24 * v65);
              swift_unknownObjectRetain();
              result = (_QWORD *)swift_unknownObjectRelease();
              v63 = v10;
              if (!*(_BYTE *)(v10 + 18))
                goto LABEL_171;
            }
          }
          result = (_QWORD *)swift_unknownObjectRetain_n();
          v61 = 0;
          v62 = v101;
          v10 = v59;
LABEL_171:
          v75 = *(unsigned __int16 *)(v10 + 16);
          if (!*(_WORD *)(v10 + 16))
            goto LABEL_182;
          v76 = *(_QWORD *)(v10 + 24);
          v12 = __OFSUB__(v62, v76);
          v77 = v62 - v76;
          if (v12)
            goto LABEL_308;
          if (__OFADD__(v77, 1))
            goto LABEL_309;
          if (v77 + 1 <= 0)
          {
            v75 = 0;
          }
          else
          {
            if ((_DWORD)v75 == 1)
              goto LABEL_176;
            v78 = *(_QWORD *)(v10 + 48);
            v62 = v77 - v78;
            if (__OFSUB__(v77, v78))
              goto LABEL_318;
            if (__OFADD__(v62, 1))
            {
LABEL_319:
              __break(1u);
LABEL_320:
              __break(1u);
              goto LABEL_321;
            }
            if (v62 + 1 < 1)
            {
              v75 = 1;
              v62 = v77;
            }
            else
            {
              if ((_DWORD)v75 == 2)
                goto LABEL_182;
              v81 = *(_QWORD *)(v10 + 72);
              v12 = __OFSUB__(v62, v81);
              v77 = v62 - v81;
              if (v12)
                goto LABEL_322;
              if (__OFADD__(v77, 1))
                goto LABEL_323;
              if (v77 + 1 < 1)
              {
                v75 = 2;
              }
              else
              {
                if ((_DWORD)v75 != 3)
                {
                  v82 = 3;
                  if (v75 > 3)
                    v82 = *(unsigned __int16 *)(v10 + 16);
                  v83 = (_QWORD *)(v10 + 96);
                  v84 = 3;
                  while (v82 != v84)
                  {
                    v62 = v77 - *v83;
                    if (__OFSUB__(v77, *v83))
                      goto LABEL_313;
                    if (__OFADD__(v62, 1))
                      goto LABEL_314;
                    if (v62 + 1 < 1)
                    {
                      v75 = v84;
                      v62 = v77;
                      goto LABEL_183;
                    }
                    ++v84;
                    v83 += 3;
                    v77 = v62;
                    if (v75 == v84)
                      goto LABEL_182;
                  }
                  goto LABEL_312;
                }
LABEL_176:
                v62 = v77;
LABEL_182:
                if (v62)
                  goto LABEL_307;
              }
            }
          }
LABEL_183:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v9 = v61 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
          v2 = v101;
        }
        else
        {
          v9 = ((-15 << ((4 * v61 + 8) & 0x3C)) - 1) & v61 | ((unint64_t)*(unsigned __int16 *)(v59 + 16) << ((4 * v61 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v62 = 0;
          v10 = 0;
        }
        swift_unknownObjectRetain();
        v104 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v107, v9, v10, v59, v105);
        swift_release();
        result = (_QWORD *)swift_unknownObjectRelease_n();
      }
      else
      {
        result = (_QWORD *)swift_release();
        v62 = 0;
        v10 = 0;
        v9 = 0;
        v104 = 0;
      }
      v13 = v2 - v62;
      if (__OFSUB__(v2, v62))
        goto LABEL_295;
      goto LABEL_186;
    }
    swift_release();
LABEL_186:
    if ((v102 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v102 = 0;
      v103 = v5;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79 = swift_bridgeObjectRetain();
      v80 = specialized _NativeDictionary.filter(_:)(v79, v100, v5, v35);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v102 = 0;
      v103 = v80;
      if (!*(_QWORD *)(v80 + 16))
        goto LABEL_207;
    }
  }
  v80 = v103;
LABEL_207:
  swift_release();
  return (_QWORD *)v80;
}

uint64_t AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  __int128 *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  _OWORD *v45;
  unint64_t v46;
  char v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  BOOL v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  int v99;
  BOOL v100;
  char isUniquelyReferenced_nonNull_native;
  char v102;
  unint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  _QWORD *v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  int64_t v140;
  unint64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int64_t v151;
  unint64_t v152;
  unint64_t v153;
  int64_t v154;
  unint64_t v155;
  int64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  __int128 v164;
  unint64_t v165;
  int64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  int64_t v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  _QWORD v204[8];
  char v205[48];
  char v206[48];
  char v207[48];
  char v208[48];
  char v209[48];
  char v210[48];
  char v211[48];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _QWORD v221[8];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;

  v6 = v5;
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v12, a3, a4, a1, a2);
  swift_release();
  result = swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
  {
    v14 = *(_QWORD *)(v6 + 80);
    if (!*(_QWORD *)(v6 + 64))
    {
      v46 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v46);
      return swift_unknownObjectRelease();
    }
    v15 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v15);
    result = swift_unknownObjectRelease_n();
    if (v14)
    {
      if (a3 != a4)
      {
        v16 = *(_OWORD *)(v6 + 32);
        v231 = *(_OWORD *)(v6 + 16);
        v232 = v16;
        v233 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        BigString.startIndex.getter();
        v17 = BigString.UTF8View.index(_:offsetBy:)();
        v19 = v18;
        v21 = v20;
        v22 = a3;
        v24 = v23;
        outlined release of Locale((uint64_t)v205);
        v25 = *(_OWORD *)(v6 + 32);
        v228 = *(_OWORD *)(v6 + 16);
        v229 = v25;
        v230 = *(_OWORD *)(v6 + 48);
        BigString.utf8.getter();
        v173 = a4;
        v174 = v22;
        if (__OFSUB__(a4, v22))
          goto LABEL_249;
        v26 = (__int128 *)(v6 + 16);
        v27 = (_QWORD *)v6;
        v192 = BigString.UTF8View.index(_:offsetBy:)();
        v29 = v28;
        v31 = v30;
        v33 = v32;
        outlined release of Locale((uint64_t)v206);
        v221[0] = v17;
        v221[1] = v19;
        v221[2] = v21;
        v221[3] = v24;
        v221[4] = v192;
        v221[5] = v29;
        v221[6] = v31;
        v221[7] = v33;
        v34 = v26[1];
        v225 = *v26;
        v226 = v34;
        v227 = v26[2];
        BigString.unicodeScalars.getter();
        v35 = BigString.UnicodeScalarView.index(roundingDown:)();
        outlined release of Locale((uint64_t)v207);
        v36 = v26[1];
        v222 = *v26;
        v223 = v36;
        v185 = v26;
        v224 = v26[2];
        BigString.unicodeScalars.getter();
        v37 = BigString.UnicodeScalarView.index(roundingUp:)();
        outlined release of Locale((uint64_t)v208);
        v175 = v35;
        v38 = v35 >> 11;
        v39 = v37 >> 11;
        if (v37 >> 11 < v35 >> 11)
        {
LABEL_250:
          __break(1u);
        }
        else
        {
          v40 = (__int128 *)v27[8];
          if (v40)
            v41 = v27[10];
          else
            v41 = 0;
          if (v41 >= v38)
          {
            v42 = v27[9];
            v43 = v27[11];
            v176 = v27;
            if (v40 && v38 < v27[10] && *((_WORD *)v40 + 8))
            {
              v191 = (__int128 *)v27[9];
              v192 = v37 >> 11;
              v33 = *((unsigned __int8 *)v40 + 18);
              if (!*((_BYTE *)v40 + 18))
                goto LABEL_206;
              swift_unknownObjectRetain_n();
              swift_retain_n();
              v44 = v38;
              v45 = v40;
              while (1)
              {
                v49 = *((unsigned __int16 *)v45 + 8);
                if (*((_WORD *)v45 + 8))
                {
                  v50 = *((_QWORD *)v45 + 5);
                  v51 = v44 - v50;
                  if (__OFSUB__(v44, v50))
                    goto LABEL_243;
                  if (__OFADD__(v51, 1))
                    goto LABEL_244;
                  if (v51 + 1 <= 0)
                  {
                    v49 = 0;
                    goto LABEL_19;
                  }
                  if ((_DWORD)v49 == 1)
                  {
                    v44 -= v50;
                  }
                  else
                  {
                    v52 = *((_QWORD *)v45 + 8);
                    v53 = __OFSUB__(v51, v52);
                    v54 = v51 - v52;
                    if (v53)
                      goto LABEL_247;
                    if (__OFADD__(v54, 1))
                    {
LABEL_248:
                      __break(1u);
LABEL_249:
                      __break(1u);
                      goto LABEL_250;
                    }
                    if (v54 + 1 < 1)
                    {
                      v49 = 1;
                      v44 = v51;
                      goto LABEL_19;
                    }
                    if ((_DWORD)v49 != 2)
                    {
                      v55 = (_QWORD *)v45 + 11;
                      v56 = 2;
                      while (1)
                      {
                        if (v49 == v56)
                          goto LABEL_237;
                        v44 = v54 - *v55;
                        if (__OFSUB__(v54, *v55))
                          goto LABEL_238;
                        if (__OFADD__(v44, 1))
                          goto LABEL_239;
                        if (v44 + 1 < 1)
                          break;
                        ++v56;
                        v55 += 3;
                        v54 = v44;
                        if (v49 == v56)
                          goto LABEL_18;
                      }
                      v49 = v56;
                      v44 = v54;
                      goto LABEL_19;
                    }
                    v44 = v54;
                  }
                }
LABEL_18:
                if (v44)
                  goto LABEL_242;
LABEL_19:
                v47 = (4 * *((_BYTE *)v45 + 18) + 8) & 0x3C;
                v33 = ((-15 << v47) - 1) & v33 | (v49 << v47);
                v48 = *((_QWORD *)v45 + 3 * v49 + 3);
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                v45 = (_OWORD *)v48;
                if (!*(_BYTE *)(v48 + 18))
                  goto LABEL_207;
              }
            }
            swift_retain_n();
            v57 = swift_unknownObjectRetain_n();
            v58 = specialized Rope._endPath.getter(v57);
            swift_unknownObjectRelease();
            v48 = 0;
            v44 = 0;
            if (!v40)
              goto LABEL_229;
            while (1)
            {
              swift_unknownObjectRetain();
              v59 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v58, v48, (uint64_t)v40, v42);
              swift_release();
              swift_unknownObjectRelease_n();
              v61 = v38 - v44;
              if (!__OFSUB__(v38, v44))
                break;
              while (1)
              {
                __break(1u);
LABEL_232:
                v167 = v60;
                v44 = v61;
LABEL_228:
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v58 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v167 << 8);
                v42 = (uint64_t)v191;
                v39 = v192;
                if (v40)
                  break;
LABEL_229:
                swift_release();
                v59 = 0;
                v61 = v38 - v44;
                if (!__OFSUB__(v38, v44))
                  goto LABEL_42;
              }
            }
LABEL_42:
            v204[0] = v176;
            v204[1] = v38;
            v204[2] = v39;
            v204[3] = v43;
            v204[4] = v58;
            v204[5] = v48;
            v204[6] = v59;
            v204[7] = v61;
            specialized IndexingIterator.next()();
            v63 = v175;
            if (!v62)
            {
              v182 = MEMORY[0x1E0DEE9E0];
LABEL_175:
              swift_release();
              v145 = 0;
              v146 = v182;
              v147 = v182 + 64;
              v148 = 1 << *(_BYTE *)(v182 + 32);
              v149 = -1;
              if (v148 < 64)
                v149 = ~(-1 << v148);
              v150 = v149 & *(_QWORD *)(v182 + 64);
              v151 = (unint64_t)(v148 + 63) >> 6;
              while (1)
              {
                if (v150)
                {
                  v152 = __clz(__rbit64(v150));
                  v150 &= v150 - 1;
                  v153 = v152 | (v145 << 6);
                }
                else
                {
                  v154 = v145 + 1;
                  if (__OFADD__(v145, 1))
                    goto LABEL_235;
                  if (v154 >= v151)
                  {
LABEL_198:
                    swift_release();
                    v199 = 0uLL;
                    v163 = AttributedString.Guts._constrainedAttributes(at:with:)(v174, (uint64_t *)&v199);
                    v164 = v185[1];
                    v193 = *v185;
                    v194 = v164;
                    v195 = v185[2];
                    BigString.utf8.getter();
                    specialized BidirectionalCollection<>._getBlock(for:in:)(3, v221, (unint64_t *)&v199);
                    outlined release of Locale((uint64_t)v204);
                    if (*((_QWORD *)&v200 + 1) != 2)
                    {
                      if (*((_QWORD *)&v202 + 1) != 2)
                      {
                        v165 = (unint64_t)v199 >> 11;
                        if ((uint64_t)((unint64_t)v199 >> 11) <= v174
                          && (unint64_t)v201 >> 10 >= (unint64_t)v199 >> 10)
                        {
                          v166 = (unint64_t)v201 >> 11;
                          swift_retain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v165, v174, v163);
                          swift_release();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (v166 >= v173)
                          {
                            swift_retain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v173, v166, v163);
                            swift_release();
                            swift_bridgeObjectRelease_n();
                            return swift_bridgeObjectRelease_n();
                          }
LABEL_253:
                          __break(1u);
LABEL_254:
                          __break(1u);
                          goto LABEL_255;
                        }
LABEL_252:
                        __break(1u);
                        goto LABEL_253;
                      }
LABEL_265:
                      __break(1u);
LABEL_266:
                      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                      JUMPOUT(0x1819D3C50);
                    }
LABEL_264:
                    __break(1u);
                    goto LABEL_265;
                  }
                  v155 = *(_QWORD *)(v147 + 8 * v154);
                  ++v145;
                  if (!v155)
                  {
                    v145 = v154 + 1;
                    if (v154 + 1 >= v151)
                      goto LABEL_198;
                    v155 = *(_QWORD *)(v147 + 8 * v145);
                    if (!v155)
                    {
                      v145 = v154 + 2;
                      if (v154 + 2 >= v151)
                        goto LABEL_198;
                      v155 = *(_QWORD *)(v147 + 8 * v145);
                      if (!v155)
                      {
                        v156 = v154 + 3;
                        if (v156 >= v151)
                          goto LABEL_198;
                        v155 = *(_QWORD *)(v147 + 8 * v156);
                        if (!v155)
                        {
                          while (1)
                          {
                            v145 = v156 + 1;
                            if (__OFADD__(v156, 1))
                              break;
                            if (v145 >= v151)
                              goto LABEL_198;
                            v155 = *(_QWORD *)(v147 + 8 * v145);
                            ++v156;
                            if (v155)
                              goto LABEL_193;
                          }
LABEL_245:
                          __break(1u);
LABEL_246:
                          __break(1u);
LABEL_247:
                          __break(1u);
                          goto LABEL_248;
                        }
                        v145 = v156;
                      }
                    }
                  }
LABEL_193:
                  v150 = (v155 - 1) & v155;
                  v153 = __clz(__rbit64(v155)) + (v145 << 6);
                }
                v157 = *(_QWORD *)(*(_QWORD *)(v146 + 56) + 8 * v153);
                v158 = *(_QWORD *)(v157 + 16);
                if (v158)
                {
                  v159 = (uint64_t *)(*(_QWORD *)(v146 + 48) + 16 * v153);
                  v161 = *v159;
                  v160 = v159[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v162 = (_QWORD *)(v157 + 40);
                  do
                  {
                    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v161, v160, *(v162 - 1), *v162, 0);
                    v162 += 2;
                    --v158;
                  }
                  while (v158);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v146 = v182;
                }
              }
            }
            v64 = v62;
            v191 = &v194;
            v40 = &v200;
            v182 = MEMORY[0x1E0DEE9E0];
LABEL_45:
            while (2)
            {
              v66 = v185[1];
              v218 = *v185;
              v219 = v66;
              v220 = v185[2];
              BigString.utf8.getter();
              v188 = v63;
              v63 = BigString.UTF8View.index(_:offsetBy:)();
              v38 = v67;
              v33 = v68;
              outlined release of Locale((uint64_t)v209);
              v190 = v64 + 64;
              v69 = 1 << *(_BYTE *)(v64 + 32);
              if (v69 < 64)
                v70 = ~(-1 << v69);
              else
                v70 = -1;
              v71 = v70 & *(_QWORD *)(v64 + 64);
              v48 = (unint64_t)(v69 + 63) >> 6;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v43 = 0;
              do
              {
                if (v71)
                {
                  v73 = __clz(__rbit64(v71));
                  v71 &= v71 - 1;
                  v74 = v73 | (v43 << 6);
                }
                else
                {
                  v76 = v43 + 1;
                  if (__OFADD__(v43, 1))
                  {
                    __break(1u);
                    goto LABEL_220;
                  }
                  if (v76 >= v48)
                    goto LABEL_44;
                  v77 = *(_QWORD *)(v190 + 8 * v76);
                  ++v43;
                  if (!v77)
                  {
                    v43 = v76 + 1;
                    if (v76 + 1 >= v48)
                      goto LABEL_44;
                    v77 = *(_QWORD *)(v190 + 8 * v43);
                    if (!v77)
                    {
                      v43 = v76 + 2;
                      if (v76 + 2 >= v48)
                        goto LABEL_44;
                      v77 = *(_QWORD *)(v190 + 8 * v43);
                      if (!v77)
                      {
                        v43 = v76 + 3;
                        if (v76 + 3 >= v48)
                          goto LABEL_44;
                        v77 = *(_QWORD *)(v190 + 8 * v43);
                        if (!v77)
                        {
                          v43 = v76 + 4;
                          if (v76 + 4 >= v48)
                            goto LABEL_44;
                          v77 = *(_QWORD *)(v190 + 8 * v43);
                          if (!v77)
                          {
                            v78 = v76 + 5;
                            if (v78 >= v48)
                              goto LABEL_44;
                            v77 = *(_QWORD *)(v190 + 8 * v78);
                            if (!v77)
                            {
                              while (1)
                              {
                                v43 = v78 + 1;
                                if (__OFADD__(v78, 1))
                                  goto LABEL_246;
                                if (v43 >= v48)
                                  break;
                                v77 = *(_QWORD *)(v190 + 8 * v43);
                                ++v78;
                                if (v77)
                                  goto LABEL_69;
                              }
LABEL_44:
                              swift_release();
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease_n();
                              specialized IndexingIterator.next()();
                              v64 = v65;
                              if (!v65)
                                goto LABEL_175;
                              goto LABEL_45;
                            }
                            v43 = v78;
                          }
                        }
                      }
                    }
                  }
LABEL_69:
                  v71 = (v77 - 1) & v77;
                  v74 = __clz(__rbit64(v77)) + (v43 << 6);
                }
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v64 + 56) + 72 * v74, (uint64_t)&v199);
                v195 = v201;
                v196 = v202;
                *(_QWORD *)&v197 = v203;
                v193 = v199;
                v194 = v200;
                v75 = v202;
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v193);
              }
              while (v75 < 2);
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              v175 = v63;
              v79 = v188;
              v184 = v63 >> 10;
              if (v63 >> 10 <= v188 >> 10)
              {
LABEL_172:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                specialized IndexingIterator.next()();
                v64 = v144;
                v63 = v175;
                if (!v144)
                  goto LABEL_175;
                continue;
              }
              break;
            }
            v33 = (uint64_t)&v194;
LABEL_73:
            v80 = v185[1];
            v215 = *v185;
            v216 = v80;
            v217 = v185[2];
            BigString.unicodeScalars.getter();
            LODWORD(v192) = BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v210);
            v81 = v185[1];
            v212 = *v185;
            v213 = v81;
            v214 = v185[2];
            BigString.unicodeScalars.getter();
            v43 = BigString.UnicodeScalarView.index(after:)();
            outlined release of Locale((uint64_t)v211);
            v82 = 1 << *(_BYTE *)(v64 + 32);
            v38 = (unint64_t)(v82 + 63) >> 6;
            if (v82 < 64)
              v83 = ~(-1 << v82);
            else
              v83 = -1;
            v84 = v83 & *(_QWORD *)(v64 + 64);
            v189 = v43;
            v186 = (unint64_t)v43 >> 11;
            v187 = v79 >> 11;
            swift_bridgeObjectRetain();
            v85 = 0;
            if (!v84)
            {
LABEL_82:
              v91 = v85 + 1;
              if (!__OFADD__(v85, 1))
              {
                if (v91 >= v38)
                {
                  v93 = v85;
                }
                else
                {
                  v92 = *(_QWORD *)(v190 + 8 * v91);
                  if (v92)
                  {
LABEL_85:
                    v84 = (v92 - 1) & v92;
                    v87 = __clz(__rbit64(v92)) + (v91 << 6);
                    v85 = v91;
                    goto LABEL_81;
                  }
                  v93 = v85 + 1;
                  if (v85 + 2 < v38)
                  {
                    v92 = *(_QWORD *)(v190 + 8 * (v85 + 2));
                    if (v92)
                    {
                      v91 = v85 + 2;
                      goto LABEL_85;
                    }
                    v93 = v85 + 2;
                    if (v85 + 3 < v38)
                    {
                      v92 = *(_QWORD *)(v190 + 8 * (v85 + 3));
                      if (v92)
                      {
                        v91 = v85 + 3;
                        goto LABEL_85;
                      }
                      v91 = v85 + 4;
                      v93 = v85 + 3;
                      if (v85 + 4 < v38)
                      {
                        v92 = *(_QWORD *)(v190 + 8 * v91);
                        if (v92)
                          goto LABEL_85;
                        while (v38 - 5 != v85)
                        {
                          v92 = *(_QWORD *)(v64 + 104 + 8 * v85++);
                          if (v92)
                          {
                            v91 = v85 + 4;
                            goto LABEL_85;
                          }
                        }
                        v93 = v38 - 1;
                      }
                    }
                  }
                }
                v84 = 0;
                v198 = 0;
                v196 = 0u;
                v197 = 0u;
                v194 = 0u;
                v195 = 0u;
                v85 = v93;
                v193 = 0u;
                goto LABEL_88;
              }
              __break(1u);
LABEL_206:
              swift_unknownObjectRetain_n();
              swift_retain_n();
              v44 = v38;
              v48 = (int64_t)v40;
LABEL_207:
              v167 = *(unsigned __int16 *)(v48 + 16);
              if (!*(_WORD *)(v48 + 16))
              {
LABEL_227:
                if (!v44)
                  goto LABEL_228;
                goto LABEL_257;
              }
              v168 = *(_QWORD *)(v48 + 24);
              v72 = v44 - v168;
              if (__OFSUB__(v44, v168))
              {
LABEL_258:
                __break(1u);
              }
              else if (!__OFADD__(v72, 1))
              {
                if (v72 + 1 <= 0)
                {
                  v167 = 0;
                  goto LABEL_228;
                }
                if ((_DWORD)v167 == 1)
                {
                  v44 -= v168;
                  goto LABEL_227;
                }
                v169 = *(_QWORD *)(v48 + 48);
                v53 = __OFSUB__(v72, v169);
                v61 = v72 - v169;
                if (!v53)
                {
                  if (!__OFADD__(v61, 1))
                  {
                    if (v61 + 1 >= 1)
                    {
                      if ((_DWORD)v167 == 2)
                      {
                        v44 = v61;
                        goto LABEL_227;
                      }
                      v170 = (_QWORD *)(v48 + 72);
                      v60 = 2;
                      while (1)
                      {
                        if (v167 == v60)
                          goto LABEL_254;
                        v44 = v61 - *v170;
                        if (__OFSUB__(v61, *v170))
                          break;
                        if (__OFADD__(v44, 1))
                          goto LABEL_256;
                        if (v44 + 1 < 1)
                          goto LABEL_232;
                        ++v60;
                        v170 += 3;
                        v61 = v44;
                        if (v167 == v60)
                          goto LABEL_227;
                      }
LABEL_255:
                      __break(1u);
LABEL_256:
                      __break(1u);
LABEL_257:
                      __break(1u);
                      goto LABEL_258;
                    }
LABEL_220:
                    v167 = 1;
                    v44 = v72;
                    goto LABEL_228;
                  }
LABEL_261:
                  __break(1u);
LABEL_262:
                  __break(1u);
LABEL_263:
                  __break(1u);
                  goto LABEL_264;
                }
LABEL_260:
                __break(1u);
                goto LABEL_261;
              }
              __break(1u);
              goto LABEL_260;
            }
            while (1)
            {
              while (1)
              {
                v86 = __clz(__rbit64(v84));
                v84 &= v84 - 1;
                v87 = v86 | (v85 << 6);
LABEL_81:
                v88 = *(_QWORD *)(v64 + 56);
                v89 = (_QWORD *)(*(_QWORD *)(v64 + 48) + 16 * v87);
                v90 = v89[1];
                *(_QWORD *)&v193 = *v89;
                *((_QWORD *)&v193 + 1) = v90;
                outlined init with copy of AttributedString._AttributeValue(v88 + 72 * v87, (uint64_t)&v194);
                swift_bridgeObjectRetain();
LABEL_88:
                outlined init with take of LocalePreferences?((uint64_t)&v193, (uint64_t)&v199, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                v94 = *((_QWORD *)&v199 + 1);
                if (!*((_QWORD *)&v199 + 1))
                {
                  swift_release();
                  v79 = v189;
                  if (v184 <= v189 >> 10)
                    goto LABEL_172;
                  goto LABEL_73;
                }
                v95 = v199;
                v43 = *((_QWORD *)&v202 + 1);
                v96 = v203;
                outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v202 + 1), v203);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v200);
                if (v96 >= 2)
                  break;
LABEL_79:
                swift_bridgeObjectRelease();
                if (!v84)
                  goto LABEL_82;
              }
              v97 = HIBYTE(v96) & 0xF;
              if ((v96 & 0x2000000000000000) == 0)
                v97 = v43 & 0xFFFFFFFFFFFFLL;
              if (!v97)
              {
                outlined consume of AttributedString.AttributeRunBoundaries?(v43, v96);
                goto LABEL_79;
              }
              if ((v96 & 0x1000000000000000) != 0)
              {
                v99 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else if ((v96 & 0x2000000000000000) != 0)
              {
                if ((v43 & 0x80) != 0)
                  __asm { BR              X10 }
                v99 = v43;
              }
              else
              {
                if ((v43 & 0x1000000000000000) != 0)
                  v98 = (char *)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
                else
                  v98 = (char *)_StringObject.sharedUTF8.getter();
                v99 = *v98;
                if (*v98 < 0)
                  __asm { BR              X9 }
              }
              outlined consume of AttributedString.AttributeRunBoundaries?(v43, v96);
              v100 = v99 == (_DWORD)v192;
              v33 = (uint64_t)&v194;
              if (v100)
                goto LABEL_79;
              if (v186 < v187)
              {
                __break(1u);
LABEL_234:
                __break(1u);
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
                goto LABEL_245;
              }
              swift_bridgeObjectRetain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v193 = v182;
              v103 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
              v104 = *(_QWORD *)(v182 + 16);
              v179 = v102;
              v105 = (v102 & 1) == 0;
              v106 = v104 + v105;
              if (__OFADD__(v104, v105))
                goto LABEL_234;
              if (*(_QWORD *)(v182 + 24) >= v106)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  v107 = v182;
                  v110 = v102;
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
                  v123 = static _DictionaryStorage.copy(original:)();
                  v107 = v123;
                  v110 = v179;
                  if (*(_QWORD *)(v182 + 16))
                  {
                    v178 = v103;
                    v124 = (char *)(v123 + 64);
                    v125 = (char *)(v182 + 64);
                    v126 = (unint64_t)((1 << *(_BYTE *)(v107 + 32)) + 63) >> 6;
                    v171 = v182 + 64;
                    if (v107 != v182 || v124 >= &v125[8 * v126])
                      memmove(v124, v125, 8 * v126);
                    v127 = 0;
                    v181 = v107;
                    *(_QWORD *)(v107 + 16) = *(_QWORD *)(v182 + 16);
                    v128 = 1 << *(_BYTE *)(v182 + 32);
                    if (v128 < 64)
                      v129 = ~(-1 << v128);
                    else
                      v129 = -1;
                    v130 = v129 & *(_QWORD *)(v182 + 64);
                    v172 = (unint64_t)(v128 + 63) >> 6;
                    while (1)
                    {
                      if (v130)
                      {
                        v131 = __clz(__rbit64(v130));
                        v130 &= v130 - 1;
                        v132 = v127;
                        v133 = v131 | (v127 << 6);
                      }
                      else
                      {
                        v140 = v127 + 1;
                        if (__OFADD__(v127, 1))
                          goto LABEL_262;
                        v107 = v181;
                        v103 = v178;
                        if (v140 >= v172)
                          break;
                        v141 = *(_QWORD *)(v171 + 8 * v140);
                        v142 = v127 + 1;
                        if (!v141)
                        {
                          v142 = v127 + 2;
                          if (v127 + 2 >= v172)
                            break;
                          v141 = *(_QWORD *)(v171 + 8 * v142);
                          if (!v141)
                          {
                            v142 = v127 + 3;
                            if (v127 + 3 >= v172)
                              break;
                            v141 = *(_QWORD *)(v171 + 8 * v142);
                            if (!v141)
                            {
                              v142 = v127 + 4;
                              if (v127 + 4 >= v172)
                                break;
                              v141 = *(_QWORD *)(v171 + 8 * v142);
                              if (!v141)
                              {
                                v142 = v127 + 5;
                                if (v127 + 5 >= v172)
                                  break;
                                v141 = *(_QWORD *)(v171 + 8 * v142);
                                if (!v141)
                                {
                                  v143 = v127 + 6;
                                  if (v127 + 6 >= v172)
                                    break;
                                  v141 = *(_QWORD *)(v171 + 8 * v143);
                                  if (!v141)
                                  {
                                    v107 = v181;
                                    v103 = v178;
                                    v110 = v179;
                                    while (1)
                                    {
                                      v142 = v143 + 1;
                                      if (__OFADD__(v143, 1))
                                        goto LABEL_263;
                                      if (v142 >= v172)
                                        goto LABEL_171;
                                      v141 = *(_QWORD *)(v171 + 8 * v142);
                                      ++v143;
                                      if (v141)
                                        goto LABEL_170;
                                    }
                                  }
                                  v142 = v127 + 6;
                                }
                              }
                            }
                          }
                        }
LABEL_170:
                        v130 = (v141 - 1) & v141;
                        v132 = v142;
                        v133 = __clz(__rbit64(v141)) + (v142 << 6);
                      }
                      v134 = 16 * v133;
                      v135 = (_QWORD *)(*(_QWORD *)(v182 + 48) + 16 * v133);
                      v136 = v135[1];
                      v137 = 8 * v133;
                      v138 = *(_QWORD *)(*(_QWORD *)(v182 + 56) + v137);
                      v139 = (_QWORD *)(*(_QWORD *)(v181 + 48) + v134);
                      *v139 = *v135;
                      v139[1] = v136;
                      *(_QWORD *)(*(_QWORD *)(v181 + 56) + v137) = v138;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v110 = v179;
                      v127 = v132;
                    }
                  }
LABEL_171:
                  swift_bridgeObjectRelease();
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v106, isUniquelyReferenced_nonNull_native);
                v107 = v193;
                v108 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
                v110 = v179;
                if ((v179 & 1) != (v109 & 1))
                  goto LABEL_266;
                v103 = v108;
              }
              swift_bridgeObjectRelease();
              if ((v110 & 1) == 0)
              {
                *(_QWORD *)(v107 + 8 * (v103 >> 6) + 64) |= 1 << v103;
                v111 = (uint64_t *)(*(_QWORD *)(v107 + 48) + 16 * v103);
                *v111 = v95;
                v111[1] = v94;
                *(_QWORD *)(*(_QWORD *)(v107 + 56) + 8 * v103) = MEMORY[0x1E0DEE9D8];
                v112 = *(_QWORD *)(v107 + 16);
                v53 = __OFADD__(v112, 1);
                v113 = v112 + 1;
                if (v53)
                  goto LABEL_236;
                *(_QWORD *)(v107 + 16) = v113;
                swift_bridgeObjectRetain();
              }
              v180 = v107;
              v43 = *(_QWORD *)(v107 + 56);
              v177 = v103;
              v114 = *(_QWORD **)(v43 + 8 * v103);
              v115 = v114[2];
              if (v115 && (v116 = v115 - 1, v114[2 * v115 + 3] == v187))
              {
                if ((int64_t)v186 < v114[2 * v116 + 4])
                  goto LABEL_240;
                v183 = v114[2 * v116 + 4];
                v117 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v43 + 8 * v177) = v114;
                if ((v117 & 1) == 0)
                {
                  v114 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
                  *(_QWORD *)(v43 + 8 * v177) = v114;
                }
                v118 = v183;
                if (v115 > v114[2])
                  goto LABEL_241;
                v119 = &v114[2 * v116];
              }
              else
              {
                v120 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v43 + 8 * v177) = v114;
                if ((v120 & 1) == 0)
                {
                  v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114[2] + 1, 1, v114);
                  *(_QWORD *)(v43 + 8 * v177) = v114;
                }
                v122 = v114[2];
                v121 = v114[3];
                if (v122 >= v121 >> 1)
                {
                  v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v121 > 1), v122 + 1, 1, v114);
                  *(_QWORD *)(v43 + 8 * v177) = v114;
                }
                v114[2] = v122 + 1;
                v119 = &v114[2 * v122];
                v118 = v187;
              }
              v119[4] = v118;
              v119[5] = v186;
              swift_bridgeObjectRelease_n();
              v182 = v180;
              v33 = (uint64_t)&v194;
              if (!v84)
                goto LABEL_82;
            }
          }
        }
        __break(1u);
        goto LABEL_252;
      }
    }
  }
  return result;
}

uint64_t AttributedString.Guts.attributesToUseForTextReplacement(in:)(unint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[48];
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v2 = (_QWORD *)v1;
  v4 = *(_OWORD *)(v1 + 32);
  v35 = *(_OWORD *)(v1 + 16);
  v36 = v4;
  v37 = *(_OWORD *)(v1 + 48);
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DEE9E0];
  v7 = *a1;
  if (*a1 >= 0x800 && (a1[4] ^ v7) <= 0x3FF)
  {
    BigString.utf8.getter();
    v7 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v34);
  }
  v8 = *(_QWORD *)(v1 + 64);
  v9 = v7 >> 11;
  if (v8)
    v10 = v2[10];
  else
    v10 = 0;
  if (v10 < v9)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v11 = v2[9];
  v12 = v2[11];
  if (!v8 || v9 >= v2[10] || !*(_WORD *)(v8 + 16))
  {
    v23 = swift_unknownObjectRetain_n();
    v24 = specialized Rope._endPath.getter(v23);
    result = swift_unknownObjectRelease();
    v14 = 0;
    if (v8)
      goto LABEL_32;
    goto LABEL_33;
  }
  v33 = v2[9];
  v13 = *(unsigned __int8 *)(v8 + 18);
  if (!*(_BYTE *)(v8 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v27 = 0;
    v14 = v8;
    v28 = *(unsigned __int16 *)(v8 + 16);
    if (!*(_WORD *)(v8 + 16))
      goto LABEL_51;
LABEL_42:
    v29 = *(_QWORD *)(v14 + 24);
    v18 = __OFSUB__(v9, v29);
    v9 -= v29;
    if (v18)
      goto LABEL_65;
    if (__OFADD__(v9, 1))
    {
LABEL_66:
      __break(1u);
      return result;
    }
    if (v9 + 1 < 1)
      goto LABEL_53;
    if ((_DWORD)v28 == 1)
      goto LABEL_51;
    v30 = (uint64_t *)(v14 + 48);
    v31 = 1;
    while (1)
    {
      v32 = *v30;
      v30 += 3;
      v18 = __OFSUB__(v9, v32);
      v9 -= v32;
      if (v18)
        break;
      if (__OFADD__(v9, 1))
        goto LABEL_64;
      if (v9 + 1 < 1)
      {
        v28 = v31;
        goto LABEL_55;
      }
      if (v28 == ++v31)
        goto LABEL_51;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  result = swift_unknownObjectRetain_n();
  v14 = v8;
  do
  {
    v16 = *(unsigned __int16 *)(v14 + 16);
    if (*(_WORD *)(v14 + 16))
    {
      v17 = *(_QWORD *)(v14 + 40);
      v18 = __OFSUB__(v9, v17);
      v19 = v9 - v17;
      if (v18)
        goto LABEL_59;
      if (__OFADD__(v19, 1))
        goto LABEL_60;
      if (v19 + 1 < 1)
      {
        v16 = 0;
        goto LABEL_17;
      }
      if ((_DWORD)v16 != 1)
      {
        v20 = (uint64_t *)(v14 + 64);
        v21 = 1;
        while (1)
        {
          v22 = *v20;
          v20 += 3;
          v9 = v19 - v22;
          if (__OFSUB__(v19, v22))
            break;
          if (__OFADD__(v9, 1))
            goto LABEL_57;
          if (v9 + 1 < 1)
          {
            v16 = v21;
            v9 = v19;
            goto LABEL_17;
          }
          ++v21;
          v19 = v9;
          if (v16 == v21)
            goto LABEL_16;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v9 = v19;
    }
LABEL_16:
    if (v9)
      goto LABEL_58;
LABEL_17:
    v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    v13 = ((-15 << v15) - 1) & v13 | (v16 << v15);
    v14 = *(_QWORD *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v14 + 18));
  v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  v28 = *(unsigned __int16 *)(v14 + 16);
  if (*(_WORD *)(v14 + 16))
    goto LABEL_42;
LABEL_51:
  if (v9)
  {
    __break(1u);
LABEL_53:
    v28 = 0;
  }
LABEL_55:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v24 = v27 | (v28 << 8);
  v11 = v33;
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v24, v14, v8, v11);
  result = swift_unknownObjectRelease_n();
LABEL_33:
  if (v12 != v2[11])
    goto LABEL_62;
  if (v14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = v2[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v24, v25);
    swift_unknownObjectRelease();
  }
  v26 = swift_bridgeObjectRetain();
  v6 = specialized _NativeDictionary.filter(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v6;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  size_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  char v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  char *v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  Swift::Int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  _QWORD v109[4];
  unint64_t *v110;
  int64_t v111;
  __int128 *v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  __int128 *v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _BYTE v127[40];
  _BYTE v128[40];
  _QWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[40];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _BYTE v153[72];
  uint64_t v154;

  v109[3] = a4;
  v125 = a3;
  v4 = isStackAllocationSafe;
  v154 = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v111 = (unint64_t)((1 << v5) + 63) >> 6;
  v6 = 8 * v111;
  v124 = isStackAllocationSafe;
  if ((v5 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v110 = (unint64_t *)swift_slowAlloc();
      bzero(v110, v6);
      v120 = 0;
      v36 = 0;
      v37 = *(_QWORD *)(v4 + 64);
      v122 = v4 + 64;
      v38 = 1 << *(_BYTE *)(v4 + 32);
      if (v38 < 64)
        v39 = ~(-1 << v38);
      else
        v39 = -1;
      v40 = v39 & v37;
      v123 = (unint64_t)(v38 + 63) >> 6;
      v41 = &v149;
      v126 = &v139;
      v121 = (__int128 *)((char *)&v140 + 8);
      v112 = &v149;
      while (1)
      {
        if (v40)
        {
          v42 = __clz(__rbit64(v40));
          v40 &= v40 - 1;
          v43 = v42 | (v36 << 6);
          v44 = v125;
        }
        else
        {
          v16 = __OFADD__(v36++, 1);
          v44 = v125;
          if (v16)
            goto LABEL_154;
          if (v36 >= v123)
            goto LABEL_82;
          v45 = *(_QWORD *)(v122 + 8 * v36);
          if (!v45)
          {
            v46 = v36 + 1;
            if (v36 + 1 >= v123)
              goto LABEL_82;
            v45 = *(_QWORD *)(v122 + 8 * v46);
            if (!v45)
            {
              v46 = v36 + 2;
              if (v36 + 2 >= v123)
                goto LABEL_82;
              v45 = *(_QWORD *)(v122 + 8 * v46);
              if (!v45)
              {
                v46 = v36 + 3;
                if (v36 + 3 >= v123)
                  goto LABEL_82;
                v45 = *(_QWORD *)(v122 + 8 * v46);
                if (!v45)
                {
                  while (1)
                  {
                    v36 = v46 + 1;
                    if (__OFADD__(v46, 1))
                      goto LABEL_157;
                    if (v36 >= v123)
                      break;
                    v45 = *(_QWORD *)(v122 + 8 * v36);
                    ++v46;
                    if (v45)
                      goto LABEL_61;
                  }
LABEL_82:
                  if (!v120)
                  {
                    v4 = MEMORY[0x1E0DEE9E0];
                    goto LABEL_150;
                  }
                  if (v120 == *(_QWORD *)(v4 + 16))
                  {
                    swift_retain();
                    goto LABEL_150;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v86 = static _DictionaryStorage.allocate(capacity:)();
                  v87 = 0;
                  v88 = *v110;
                  v89 = v86 + 64;
                  while (1)
                  {
                    if (v88)
                    {
                      v93 = __clz(__rbit64(v88));
                      v88 &= v88 - 1;
                      v94 = v93 | (v87 << 6);
                    }
                    else
                    {
                      v16 = __OFADD__(v87++, 1);
                      if (v16)
                        goto LABEL_158;
                      if (v87 >= v111)
                        goto LABEL_149;
                      v95 = v110[v87];
                      if (!v95)
                      {
                        v96 = v87 + 1;
                        if (v87 + 1 >= v111)
                          goto LABEL_149;
                        v95 = v110[v96];
                        if (!v95)
                        {
                          v96 = v87 + 2;
                          if (v87 + 2 >= v111)
                            goto LABEL_149;
                          v95 = v110[v96];
                          if (!v95)
                          {
                            v96 = v87 + 3;
                            if (v87 + 3 >= v111)
                              goto LABEL_149;
                            v95 = v110[v96];
                            if (!v95)
                            {
                              v96 = v87 + 4;
                              if (v87 + 4 >= v111)
                                goto LABEL_149;
                              v95 = v110[v96];
                              if (!v95)
                              {
                                while (1)
                                {
                                  v87 = v96 + 1;
                                  if (__OFADD__(v96, 1))
                                    goto LABEL_160;
                                  if (v87 >= v111)
                                    break;
                                  v95 = v110[v87];
                                  ++v96;
                                  if (v95)
                                    goto LABEL_135;
                                }
LABEL_149:
                                v4 = v86;
LABEL_150:
                                MEMORY[0x186DA9E78](v110, -1, -1);
                                goto LABEL_151;
                              }
                            }
                          }
                        }
                        v87 = v96;
                      }
LABEL_135:
                      v88 = (v95 - 1) & v95;
                      v94 = __clz(__rbit64(v95)) + (v87 << 6);
                    }
                    v97 = (uint64_t *)(*(_QWORD *)(v124 + 48) + 16 * v94);
                    v99 = *v97;
                    v98 = v97[1];
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v124 + 56) + 72 * v94, (uint64_t)&v148);
                    v140 = v150;
                    v141 = v151;
                    v142 = v152;
                    v138 = v148;
                    v139 = v149;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v100 = Hasher._finalize()();
                    v101 = -1 << *(_BYTE *)(v86 + 32);
                    v102 = v100 & ~v101;
                    v103 = v102 >> 6;
                    if (((-1 << v102) & ~*(_QWORD *)(v89 + 8 * (v102 >> 6))) != 0)
                    {
                      v90 = __clz(__rbit64((-1 << v102) & ~*(_QWORD *)(v89 + 8 * (v102 >> 6)))) | v102 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v104 = 0;
                      v105 = (unint64_t)(63 - v101) >> 6;
                      do
                      {
                        if (++v103 == v105 && (v104 & 1) != 0)
                          goto LABEL_153;
                        v106 = v103 == v105;
                        if (v103 == v105)
                          v103 = 0;
                        v104 |= v106;
                        v107 = *(_QWORD *)(v89 + 8 * v103);
                      }
                      while (v107 == -1);
                      v90 = __clz(__rbit64(~v107)) + (v103 << 6);
                    }
                    *(_QWORD *)(v89 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v90;
                    v91 = (_QWORD *)(*(_QWORD *)(v86 + 48) + 16 * v90);
                    *v91 = v99;
                    v91[1] = v98;
                    v92 = *(_QWORD *)(v86 + 56) + 72 * v90;
                    *(_OWORD *)(v92 + 16) = v139;
                    *(_OWORD *)(v92 + 32) = v140;
                    *(_OWORD *)(v92 + 48) = v141;
                    *(_QWORD *)(v92 + 64) = v142;
                    *(_OWORD *)v92 = v138;
                    ++*(_QWORD *)(v86 + 16);
                    if (!--v120)
                      goto LABEL_149;
                  }
                }
              }
            }
            v36 = v46;
          }
LABEL_61:
          v40 = (v45 - 1) & v45;
          v43 = __clz(__rbit64(v45)) + (v36 << 6);
        }
        v47 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v43);
        v48 = *v47;
        v49 = v47[1];
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v4 + 56) + 72 * v43, (uint64_t)v153);
        *(_QWORD *)&v148 = v48;
        *((_QWORD *)&v148 + 1) = v49;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v153, (uint64_t)v41);
        *(_QWORD *)&v138 = v48;
        *((_QWORD *)&v138 + 1) = v49;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v41, (uint64_t)v126);
        v50 = *(_QWORD *)(v44 + 16);
        swift_bridgeObjectRetain_n();
        if (v50 && (v51 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49), (v52 & 1) != 0))
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v44 + 56) + 72 * v51, (uint64_t)&v133);
          v145 = v135;
          v146 = v136;
          v147 = v137;
          v143 = v133;
          v144 = v134;
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v143, (uint64_t)&v133);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v41, (uint64_t)v132);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v133, (uint64_t)&v138, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v132, (uint64_t)v121, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (*((_QWORD *)&v139 + 1))
          {
            if (v142)
            {
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v138, (uint64_t)v129);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v121, (uint64_t)v128);
              v53 = v130;
              v116 = v131;
              v114 = __swift_project_boxed_opaque_existential_1(v129, v130);
              v119 = v109;
              v54 = *(_QWORD *)(v53 - 8);
              MEMORY[0x1E0C80A78](v114);
              v115 = (char *)v109 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v128, (uint64_t)v127);
              v56 = type metadata accessor for Optional();
              v117 = v109;
              v113 = v56;
              v57 = *(_QWORD *)(v56 - 8);
              MEMORY[0x1E0C80A78](v56);
              v59 = (char *)v109 - v58;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v60 = swift_dynamicCast();
              v118 = v54;
              v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
              if (v60)
              {
                v61(v59, 0, 1, v53);
                v62 = v115;
                (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v59, v53);
                v63 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v118 + 8))(v62, v53);
              }
              else
              {
                v61(v59, 1, 1, v53);
                (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v113);
                v63 = 0;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
              v4 = v124;
              v41 = v112;
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
              v63 = 0;
              v4 = v124;
            }
          }
          else
          {
            v4 = v124;
            if (v142)
            {
              outlined destroy of Any?((uint64_t)v121, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              v63 = 0;
            }
            else
            {
              v63 = 1;
            }
          }
          outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)&v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
          outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
          swift_bridgeObjectRelease();
          if ((v63 & 1) != 0)
          {
            *(unint64_t *)((char *)v110 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
            v16 = __OFADD__(v120++, 1);
            if (v16)
            {
              __break(1u);
              goto LABEL_82;
            }
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
          swift_bridgeObjectRelease();
          v4 = v124;
        }
      }
    }
  }
  v109[1] = v109;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v110 = (_QWORD *)((char *)v109 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v110, v6);
  v120 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(v4 + 64);
  v122 = v4 + 64;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v123 = (unint64_t)(v9 + 63) >> 6;
  v12 = &v149;
  v126 = &v139;
  v121 = (__int128 *)((char *)&v140 + 8);
  v112 = &v149;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      v15 = v125;
      goto LABEL_20;
    }
    v16 = __OFADD__(v7++, 1);
    v15 = v125;
    if (v16)
      goto LABEL_152;
    if (v7 >= v123)
      goto LABEL_40;
    v17 = *(_QWORD *)(v122 + 8 * v7);
    if (!v17)
      break;
LABEL_19:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_20:
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v19;
    v21 = v19[1];
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v4 + 56) + 72 * v14, (uint64_t)v153);
    *(_QWORD *)&v148 = v20;
    *((_QWORD *)&v148 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v153, (uint64_t)v12);
    *(_QWORD *)&v138 = v20;
    *((_QWORD *)&v138 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v12, (uint64_t)v126);
    v22 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRetain_n();
    if (v22 && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v24 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v15 + 56) + 72 * v23, (uint64_t)&v133);
      v145 = v135;
      v146 = v136;
      v147 = v137;
      v143 = v133;
      v144 = v134;
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v143, (uint64_t)&v133);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v12, (uint64_t)v132);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v133, (uint64_t)&v138, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v132, (uint64_t)v121, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (*((_QWORD *)&v139 + 1))
      {
        if (v142)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v138, (uint64_t)v129);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v121, (uint64_t)v128);
          v25 = v130;
          v116 = v131;
          v114 = __swift_project_boxed_opaque_existential_1(v129, v130);
          v119 = v109;
          v26 = *(_QWORD *)(v25 - 8);
          MEMORY[0x1E0C80A78](v114);
          v115 = (char *)v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v128, (uint64_t)v127);
          v28 = type metadata accessor for Optional();
          v117 = v109;
          v113 = v28;
          v29 = *(_QWORD *)(v28 - 8);
          MEMORY[0x1E0C80A78](v28);
          v31 = (char *)v109 - v30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          v32 = swift_dynamicCast();
          v118 = v26;
          v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
          if (v32)
          {
            v33(v31, 0, 1, v25);
            v34 = v115;
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v31, v25);
            v35 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v118 + 8))(v34, v25);
          }
          else
          {
            v33(v31, 1, 1, v25);
            (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v113);
            v35 = 0;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
          v4 = v124;
          v12 = v112;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
          v35 = 0;
          v4 = v124;
        }
      }
      else
      {
        v4 = v124;
        if (v142)
        {
          outlined destroy of Any?((uint64_t)v121, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          v35 = 0;
        }
        else
        {
          v35 = 1;
        }
      }
      outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)&v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
      outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
      {
        *(unint64_t *)((char *)v110 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        v16 = __OFADD__(v120++, 1);
        if (v16)
        {
          __break(1u);
          goto LABEL_40;
        }
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v153);
      swift_bridgeObjectRelease();
      v4 = v124;
    }
  }
  v18 = v7 + 1;
  if (v7 + 1 >= v123)
    goto LABEL_40;
  v17 = *(_QWORD *)(v122 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v7 + 2;
  if (v7 + 2 >= v123)
    goto LABEL_40;
  v17 = *(_QWORD *)(v122 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v7 + 3;
  if (v7 + 3 >= v123)
    goto LABEL_40;
  v17 = *(_QWORD *)(v122 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v7 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_155;
    if (v7 >= v123)
      break;
    v17 = *(_QWORD *)(v122 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_40:
  if (v120)
  {
    if (v120 != *(_QWORD *)(v4 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      v64 = static _DictionaryStorage.allocate(capacity:)();
      v65 = 0;
      v66 = *v110;
      v67 = v64 + 64;
      while (1)
      {
        if (v66)
        {
          v71 = __clz(__rbit64(v66));
          v66 &= v66 - 1;
          v72 = v71 | (v65 << 6);
        }
        else
        {
          v16 = __OFADD__(v65++, 1);
          if (v16)
            goto LABEL_156;
          if (v65 >= v111)
          {
LABEL_116:
            v4 = v64;
            goto LABEL_151;
          }
          v73 = v110[v65];
          if (!v73)
          {
            v74 = v65 + 1;
            if (v65 + 1 >= v111)
              goto LABEL_116;
            v73 = v110[v74];
            if (!v73)
            {
              v74 = v65 + 2;
              if (v65 + 2 >= v111)
                goto LABEL_116;
              v73 = v110[v74];
              if (!v73)
              {
                v74 = v65 + 3;
                if (v65 + 3 >= v111)
                  goto LABEL_116;
                v73 = v110[v74];
                if (!v73)
                {
                  v74 = v65 + 4;
                  if (v65 + 4 >= v111)
                    goto LABEL_116;
                  v73 = v110[v74];
                  if (!v73)
                  {
                    while (1)
                    {
                      v65 = v74 + 1;
                      if (__OFADD__(v74, 1))
                        break;
                      if (v65 >= v111)
                        goto LABEL_116;
                      v73 = v110[v65];
                      ++v74;
                      if (v73)
                        goto LABEL_102;
                    }
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
                  }
                }
              }
            }
            v65 = v74;
          }
LABEL_102:
          v66 = (v73 - 1) & v73;
          v72 = __clz(__rbit64(v73)) + (v65 << 6);
        }
        v75 = (uint64_t *)(*(_QWORD *)(v124 + 48) + 16 * v72);
        v77 = *v75;
        v76 = v75[1];
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v124 + 56) + 72 * v72, (uint64_t)&v148);
        v140 = v150;
        v141 = v151;
        v142 = v152;
        v138 = v148;
        v139 = v149;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v78 = Hasher._finalize()();
        v79 = -1 << *(_BYTE *)(v64 + 32);
        v80 = v78 & ~v79;
        v81 = v80 >> 6;
        if (((-1 << v80) & ~*(_QWORD *)(v67 + 8 * (v80 >> 6))) != 0)
        {
          v68 = __clz(__rbit64((-1 << v80) & ~*(_QWORD *)(v67 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_87;
        }
        v82 = 0;
        v83 = (unint64_t)(63 - v79) >> 6;
        do
        {
          if (++v81 == v83 && (v82 & 1) != 0)
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          v84 = v81 == v83;
          if (v81 == v83)
            v81 = 0;
          v82 |= v84;
          v85 = *(_QWORD *)(v67 + 8 * v81);
        }
        while (v85 == -1);
        v68 = __clz(__rbit64(~v85)) + (v81 << 6);
LABEL_87:
        *(_QWORD *)(v67 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
        v69 = (_QWORD *)(*(_QWORD *)(v64 + 48) + 16 * v68);
        *v69 = v77;
        v69[1] = v76;
        v70 = *(_QWORD *)(v64 + 56) + 72 * v68;
        *(_OWORD *)(v70 + 16) = v139;
        *(_OWORD *)(v70 + 32) = v140;
        *(_OWORD *)(v70 + 48) = v141;
        *(_QWORD *)(v70 + 64) = v142;
        *(_OWORD *)v70 = v138;
        ++*(_QWORD *)(v64 + 16);
        if (!--v120)
          goto LABEL_116;
      }
    }
    swift_retain();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9E0];
  }
LABEL_151:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)(uint64_t *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[4];
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];
  __int128 v72;

  v8 = a4 + 8;
  v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v13 = result;
  v61 = *result;
  v15 = result[1];
  v14 = result[2];
  v65 = result[4];
  v60 = v15;
  if (v14)
  {
    v16 = (_QWORD *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    v17 = v16[4];
    v18 = v16[5];
    v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    v17 = v20;
    v21 = v15;
    v18 = v22;
    result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v58 = v13;
    v23 = a4[8];
    swift_unknownObjectRetain();
    v19 = specialized Rope._Node.subscript.getter(v21, v23);
    v13 = v58;
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  v24 = v65;
  v25 = v65 + v19;
  if (__OFADD__(v65, v19))
    goto LABEL_81;
  v69 = v17;
  v70 = v18;
  if (v65 >= a3)
    v24 = a3;
  if (v65 >= a2)
    v26 = v24;
  else
    v26 = a2;
  if (v25 <= a2)
    v27 = a2;
  else
    v27 = v65 + v19;
  if (v25 <= a3)
    a3 = v27;
  if (v26 == a3)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v26 != v65 || a3 != v25)
  {
    v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = swift_bridgeObjectRetain();
    v31 = specialized _NativeSet.filter(_:)(v30, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v26, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v31;
    result = (uint64_t *)swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (__OFSUB__(a3, v26))
      goto LABEL_88;
    v32 = v69;
    v33 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v26, a3, a3 - v26, v32, v33);
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v34 = a4[8];
    if (v34)
      v35 = a4[10];
    else
      v35 = 0;
    if (v65 < 0 || v35 < v65)
      goto LABEL_89;
    v36 = a4[9];
    v37 = a4[11];
    v59 = v13;
    if (!v34 || !*(_WORD *)(v34 + 16) || v65 >= a4[10])
    {
      v49 = swift_unknownObjectRetain_n();
      v50 = specialized Rope._endPath.getter(v49);
      result = (uint64_t *)swift_unknownObjectRelease();
      v40 = 0;
      v39 = 0;
      if (v34)
        goto LABEL_56;
      v51 = 0;
LABEL_74:
      if (!__OFSUB__(v65, v39))
      {
        *v59 = v37;
        v59[1] = v50;
        v59[2] = v40;
        v59[3] = v51;
        v59[4] = v65 - v39;
LABEL_76:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      goto LABEL_90;
    }
    v38 = *(unsigned __int8 *)(v34 + 18);
    if (!*(_BYTE *)(v34 + 18))
    {
      result = (uint64_t *)swift_unknownObjectRetain_n();
      v39 = v65;
      v40 = v34;
      v52 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16))
        goto LABEL_71;
LABEL_60:
      v53 = *(_QWORD *)(v40 + 24);
      v44 = __OFSUB__(v39, v53);
      v54 = v39 - v53;
      if (v44)
        goto LABEL_94;
      if (__OFADD__(v54, 1))
      {
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      if (v54 + 1 <= 0)
      {
        v52 = 0;
        goto LABEL_72;
      }
      if ((_DWORD)v52 == 1)
      {
        v39 = v54;
        goto LABEL_71;
      }
      v55 = (uint64_t *)(v40 + 48);
      v56 = 1;
      while (1)
      {
        v57 = *v55;
        v55 += 3;
        v39 = v54 - v57;
        if (__OFSUB__(v54, v57))
          break;
        if (__OFADD__(v39, 1))
          goto LABEL_92;
        if (v39 + 1 < 1)
        {
          v52 = v56;
          v39 = v54;
          goto LABEL_72;
        }
        ++v56;
        v54 = v39;
        if (v52 == v56)
          goto LABEL_71;
      }
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v39 = v65;
    v40 = v34;
    while (1)
    {
      v42 = *(unsigned __int16 *)(v40 + 16);
      if (!*(_WORD *)(v40 + 16))
        goto LABEL_38;
      v43 = *(_QWORD *)(v40 + 40);
      v44 = __OFSUB__(v39, v43);
      v45 = v39 - v43;
      if (v44)
        goto LABEL_84;
      if (__OFADD__(v45, 1))
        goto LABEL_85;
      if (v45 + 1 > 0)
        break;
      v42 = 0;
LABEL_39:
      v41 = (4 * *(_BYTE *)(v40 + 18) + 8) & 0x3C;
      v38 = ((-15 << v41) - 1) & v38 | (v42 << v41);
      v40 = *(_QWORD *)(v40 + 24 + 24 * v42);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v40 + 18))
      {
        v38 &= 0xFFFFFFFFFFFFF0FFLL;
        v52 = *(unsigned __int16 *)(v40 + 16);
        if (*(_WORD *)(v40 + 16))
          goto LABEL_60;
LABEL_71:
        if (!v39)
        {
LABEL_72:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v50 = v38 | (v52 << 8);
LABEL_56:
          swift_unknownObjectRetain();
          v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v37, v50, v40, v34, v36);
          result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_74;
        }
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
    }
    if ((_DWORD)v42 != 1)
    {
      v46 = (uint64_t *)(v40 + 64);
      v47 = 1;
      while (1)
      {
        v48 = *v46;
        v46 += 3;
        v39 = v45 - v48;
        if (__OFSUB__(v45, v48))
          break;
        if (__OFADD__(v39, 1))
          goto LABEL_79;
        if (v39 + 1 < 1)
        {
          v42 = v47;
          v39 = v45;
          goto LABEL_39;
        }
        ++v47;
        v45 = v39;
        if (v42 == v47)
          goto LABEL_38;
      }
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
    v39 = v45;
LABEL_38:
    if (v39)
      goto LABEL_83;
    goto LABEL_39;
  }
  if (v61 != a4[11])
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (!*v8)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
  v72 = v71[1];
  v67[0] = v71[0];
  v67[2] = v71[2];
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
  result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
  v67[1] = MEMORY[0x1E0DEE9E0];
  a4[11] = v61 + 1;
  *v13 = v61 + 1;
  if (a4[8])
  {
    v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    v29 = specialized _NativeSet.filter(_:)(v28, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v65, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v29;
    swift_bridgeObjectRelease();
    if (v68 == 1)
      specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
    else
      specialized Rope.update<A>(at:by:)(v13, v8, &v69);
    goto LABEL_76;
  }
LABEL_97:
  __break(1u);
  return result;
}

{
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[4];
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];
  __int128 v72;

  v8 = a4 + 8;
  v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v13 = result;
  v61 = *result;
  v15 = result[1];
  v14 = result[2];
  v65 = result[4];
  v60 = v15;
  if (v14)
  {
    v16 = (_QWORD *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    v17 = v16[4];
    v18 = v16[5];
    v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    v17 = v20;
    v21 = v15;
    v18 = v22;
    result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    v58 = v13;
    v23 = a4[8];
    swift_unknownObjectRetain();
    v19 = specialized Rope._Node.subscript.getter(v21, v23);
    v13 = v58;
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  v24 = __OFADD__(v65, v19);
  v25 = v65 + v19;
  if (v24)
    goto LABEL_82;
  v69 = v17;
  v70 = v18;
  if (v65 >= a3)
    v26 = a3;
  else
    v26 = v65;
  if (v65 >= a2)
    v27 = v26;
  else
    v27 = a2;
  if (v25 <= a2)
    v28 = a2;
  else
    v28 = v25;
  if (v25 <= a3)
    a3 = v28;
  if (v27 == a3)
  {
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v27 != v65 || a3 != v25)
  {
    v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = swift_bridgeObjectRetain();
    v32 = specialized _NativeSet.filter(_:)(v31, (uint64_t)&v69, a6, (uint64_t)&v68, a8, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v32;
    result = (uint64_t *)swift_bridgeObjectRelease();
    if (v68 != 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (__OFSUB__(a3, v27))
      goto LABEL_89;
    v33 = v69;
    v34 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v27, a3, a3 - v27, v33, v34);
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v35 = a4[8];
    if (v35)
      v36 = a4[10];
    else
      v36 = 0;
    if (v65 < 0 || v36 < v65)
      goto LABEL_90;
    v37 = a4[9];
    v38 = a4[11];
    v59 = v13;
    if (!v35 || !*(_WORD *)(v35 + 16) || v65 >= a4[10])
    {
      v49 = swift_unknownObjectRetain_n();
      v50 = specialized Rope._endPath.getter(v49);
      result = (uint64_t *)swift_unknownObjectRelease();
      v41 = 0;
      v40 = 0;
      if (v35)
        goto LABEL_57;
      v51 = 0;
LABEL_75:
      if (!__OFSUB__(v65, v40))
      {
        *v59 = v38;
        v59[1] = v50;
        v59[2] = v41;
        v59[3] = v51;
        v59[4] = v65 - v40;
LABEL_77:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      goto LABEL_91;
    }
    v39 = *(unsigned __int8 *)(v35 + 18);
    if (!*(_BYTE *)(v35 + 18))
    {
      result = (uint64_t *)swift_unknownObjectRetain_n();
      v40 = v65;
      v41 = v35;
      v52 = *(unsigned __int16 *)(v35 + 16);
      if (!*(_WORD *)(v35 + 16))
        goto LABEL_72;
LABEL_61:
      v53 = *(_QWORD *)(v41 + 24);
      v24 = __OFSUB__(v40, v53);
      v54 = v40 - v53;
      if (v24)
        goto LABEL_95;
      if (__OFADD__(v54, 1))
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      if (v54 + 1 <= 0)
      {
        v52 = 0;
        goto LABEL_73;
      }
      if ((_DWORD)v52 == 1)
      {
        v40 = v54;
        goto LABEL_72;
      }
      v55 = (uint64_t *)(v41 + 48);
      v56 = 1;
      while (1)
      {
        v57 = *v55;
        v55 += 3;
        v40 = v54 - v57;
        if (__OFSUB__(v54, v57))
          break;
        if (__OFADD__(v40, 1))
          goto LABEL_93;
        if (v40 + 1 < 1)
        {
          v52 = v56;
          v40 = v54;
          goto LABEL_73;
        }
        ++v56;
        v54 = v40;
        if (v52 == v56)
          goto LABEL_72;
      }
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v40 = v65;
    v41 = v35;
    while (1)
    {
      v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16))
        goto LABEL_39;
      v44 = *(_QWORD *)(v41 + 40);
      v24 = __OFSUB__(v40, v44);
      v45 = v40 - v44;
      if (v24)
        goto LABEL_85;
      if (__OFADD__(v45, 1))
        goto LABEL_86;
      if (v45 + 1 > 0)
        break;
      v43 = 0;
LABEL_40:
      v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      v39 = ((-15 << v42) - 1) & v39 | (v43 << v42);
      v41 = *(_QWORD *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v41 + 18))
      {
        v39 &= 0xFFFFFFFFFFFFF0FFLL;
        v52 = *(unsigned __int16 *)(v41 + 16);
        if (*(_WORD *)(v41 + 16))
          goto LABEL_61;
LABEL_72:
        if (!v40)
        {
LABEL_73:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v50 = v39 | (v52 << 8);
LABEL_57:
          swift_unknownObjectRetain();
          v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v50, v41, v35, v37);
          result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_75;
        }
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
    }
    if ((_DWORD)v43 != 1)
    {
      v46 = (uint64_t *)(v41 + 64);
      v47 = 1;
      while (1)
      {
        v48 = *v46;
        v46 += 3;
        v40 = v45 - v48;
        if (__OFSUB__(v45, v48))
          break;
        if (__OFADD__(v40, 1))
          goto LABEL_80;
        if (v40 + 1 < 1)
        {
          v43 = v47;
          v40 = v45;
          goto LABEL_40;
        }
        ++v47;
        v45 = v40;
        if (v43 == v47)
          goto LABEL_39;
      }
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    v40 = v45;
LABEL_39:
    if (v40)
      goto LABEL_84;
    goto LABEL_40;
  }
  if (v61 != a4[11])
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (!*v8)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
  v72 = v71[1];
  v67[0] = v71[0];
  v67[2] = v71[2];
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
  result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
  v67[1] = MEMORY[0x1E0DEE9E0];
  a4[11] = v61 + 1;
  *v13 = v61 + 1;
  if (a4[8])
  {
    v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v30 = specialized _NativeSet.filter(_:)(v29, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v25, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a5 = v30;
    swift_bridgeObjectRelease();
    if (v68 == 1)
      specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
    else
      specialized Rope.update<A>(at:by:)(v13, v8, &v69);
    goto LABEL_77;
  }
LABEL_98:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v9;
  char v10;
  size_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  char v24;
  char v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::Int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v84;
  unint64_t *v85;
  int64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v91 = a6;
  v92 = a7;
  v89 = a4;
  v90 = a5;
  v88 = a3;
  v9 = isStackAllocationSafe;
  v96 = *MEMORY[0x1E0C80C00];
  v10 = *(_BYTE *)(isStackAllocationSafe + 32);
  v86 = (unint64_t)((1 << v10) + 63) >> 6;
  v11 = 8 * v86;
  v93 = isStackAllocationSafe;
  if ((v10 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v85 = (unint64_t *)swift_slowAlloc();
      bzero(v85, v11);
      v48 = 0;
      v49 = 0;
      v50 = v9 + 56;
      v51 = 1 << *(_BYTE *)(v9 + 32);
      if (v51 < 64)
        v52 = ~(-1 << v51);
      else
        v52 = -1;
      v53 = v52 & *(_QWORD *)(v9 + 56);
      v87 = (unint64_t *)((unint64_t)(v51 + 63) >> 6);
      while (1)
      {
        if (v53)
        {
          v54 = __clz(__rbit64(v53));
          v53 &= v53 - 1;
          v55 = v54 | (v49 << 6);
          v9 = v93;
        }
        else
        {
          v20 = __OFADD__(v49++, 1);
          v9 = v93;
          if (v20)
            goto LABEL_141;
          if (v49 >= (uint64_t)v87)
            goto LABEL_96;
          v56 = *(_QWORD *)(v50 + 8 * v49);
          if (!v56)
          {
            v57 = v49 + 1;
            if (v49 + 1 >= (uint64_t)v87)
              goto LABEL_96;
            v56 = *(_QWORD *)(v50 + 8 * v57);
            if (!v56)
            {
              v57 = v49 + 2;
              if (v49 + 2 >= (uint64_t)v87)
                goto LABEL_96;
              v56 = *(_QWORD *)(v50 + 8 * v57);
              if (!v56)
              {
                v57 = v49 + 3;
                if (v49 + 3 >= (uint64_t)v87)
                  goto LABEL_96;
                v56 = *(_QWORD *)(v50 + 8 * v57);
                if (!v56)
                {
                  v57 = v49 + 4;
                  if (v49 + 4 >= (uint64_t)v87)
                    goto LABEL_96;
                  v56 = *(_QWORD *)(v50 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      v49 = v57 + 1;
                      if (__OFADD__(v57, 1))
                        goto LABEL_146;
                      if (v49 >= (uint64_t)v87)
                        break;
                      v56 = *(_QWORD *)(v50 + 8 * v49);
                      ++v57;
                      if (v56)
                        goto LABEL_84;
                    }
LABEL_96:
                    v61 = v48;
                    if (!v48)
                    {
                      v62 = MEMORY[0x1E0DEE9E8];
                      goto LABEL_136;
                    }
                    if (v48 != *(_QWORD *)(v93 + 16))
                    {
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
                      v62 = static _SetStorage.allocate(capacity:)();
                      v63 = *v85;
                      v64 = v62 + 56;
                      swift_retain();
                      v65 = 0;
                      while (1)
                      {
                        if (v63)
                        {
                          v68 = __clz(__rbit64(v63));
                          v63 &= v63 - 1;
                          v69 = v68 | (v65 << 6);
                        }
                        else
                        {
                          v20 = __OFADD__(v65++, 1);
                          if (v20)
                            goto LABEL_145;
                          if (v65 >= v86)
                            goto LABEL_135;
                          v70 = v85[v65];
                          if (!v70)
                          {
                            v71 = v65 + 1;
                            if (v65 + 1 >= v86)
                              goto LABEL_135;
                            v70 = v85[v71];
                            if (!v70)
                            {
                              v71 = v65 + 2;
                              if (v65 + 2 >= v86)
                                goto LABEL_135;
                              v70 = v85[v71];
                              if (!v70)
                              {
                                v71 = v65 + 3;
                                if (v65 + 3 >= v86)
                                  goto LABEL_135;
                                v70 = v85[v71];
                                if (!v70)
                                {
                                  v71 = v65 + 4;
                                  if (v65 + 4 >= v86)
                                    goto LABEL_135;
                                  v70 = v85[v71];
                                  if (!v70)
                                  {
                                    v71 = v65 + 5;
                                    if (v65 + 5 >= v86)
                                      goto LABEL_135;
                                    v70 = v85[v71];
                                    if (!v70)
                                    {
                                      while (1)
                                      {
                                        v65 = v71 + 1;
                                        if (__OFADD__(v71, 1))
                                          goto LABEL_149;
                                        if (v65 >= v86)
                                          break;
                                        v70 = v85[v65];
                                        ++v71;
                                        if (v70)
                                          goto LABEL_117;
                                      }
LABEL_135:
                                      swift_release();
LABEL_136:
                                      swift_release();
                                      v9 = v62;
                                      break;
                                    }
                                  }
                                }
                              }
                            }
                            v65 = v71;
                          }
LABEL_117:
                          v63 = (v70 - 1) & v70;
                          v69 = __clz(__rbit64(v70)) + (v65 << 6);
                        }
                        v72 = (uint64_t *)(*(_QWORD *)(v93 + 48) + 16 * v69);
                        v73 = *v72;
                        v74 = v72[1];
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        v75 = Hasher._finalize()();
                        v76 = -1 << *(_BYTE *)(v62 + 32);
                        v77 = v75 & ~v76;
                        v78 = v77 >> 6;
                        if (((-1 << v77) & ~*(_QWORD *)(v64 + 8 * (v77 >> 6))) != 0)
                        {
                          v66 = __clz(__rbit64((-1 << v77) & ~*(_QWORD *)(v64 + 8 * (v77 >> 6)))) | v77 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          v79 = 0;
                          v80 = (unint64_t)(63 - v76) >> 6;
                          do
                          {
                            if (++v78 == v80 && (v79 & 1) != 0)
                              goto LABEL_140;
                            v81 = v78 == v80;
                            if (v78 == v80)
                              v78 = 0;
                            v79 |= v81;
                            v82 = *(_QWORD *)(v64 + 8 * v78);
                          }
                          while (v82 == -1);
                          v66 = __clz(__rbit64(~v82)) + (v78 << 6);
                        }
                        *(_QWORD *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
                        v67 = (_QWORD *)(*(_QWORD *)(v62 + 48) + 16 * v66);
                        *v67 = v73;
                        v67[1] = v74;
                        ++*(_QWORD *)(v62 + 16);
                        if (!--v61)
                          goto LABEL_135;
                      }
                    }
                    MEMORY[0x186DA9E78](v85, -1, -1);
                    return v9;
                  }
                }
              }
            }
            v49 = v57;
          }
LABEL_84:
          v53 = (v56 - 1) & v56;
          v55 = __clz(__rbit64(v56)) + (v49 << 6);
        }
        v58 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v55);
        v9 = v58[1];
        v94 = *v58;
        v95 = v9;
        swift_bridgeObjectRetain();
        v59 = v92(&v94, a2, v88, v89, v90, v91);
        if (v7)
        {
          swift_release();
          swift_bridgeObjectRelease();
          MEMORY[0x186DA9E78](v85, -1, -1);
          return v9;
        }
        v60 = v59;
        swift_bridgeObjectRelease();
        if ((v60 & 1) != 0)
        {
          *(unint64_t *)((char *)v85 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
          v20 = __OFADD__(v48++, 1);
          if (v20)
            goto LABEL_147;
        }
      }
    }
  }
  v84 = (uint64_t)&v84;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v87 = (unint64_t *)((char *)&v84 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v87, v11);
  v85 = 0;
  v12 = 0;
  v13 = v9 + 56;
  v14 = 1 << *(_BYTE *)(v9 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v9 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (v16)
  {
    v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v19 = v18 | (v12 << 6);
LABEL_21:
    v23 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    v9 = v23[1];
    v94 = *v23;
    v95 = v9;
    swift_bridgeObjectRetain();
    v24 = v92(&v94, a2, v88, v89, v90, v91);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return v9;
    }
    v25 = v24;
    swift_bridgeObjectRelease();
    v9 = v93;
    if ((v25 & 1) != 0)
    {
      *(unint64_t *)((char *)v87 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = __OFADD__(v85, 1);
      v85 = (unint64_t *)((char *)v85 + 1);
      if (v20)
        goto LABEL_144;
    }
  }
  v20 = __OFADD__(v12++, 1);
  if (v20)
    goto LABEL_139;
  if (v12 >= v17)
    goto LABEL_31;
  v21 = *(_QWORD *)(v13 + 8 * v12);
  if (v21)
  {
LABEL_20:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_21;
  }
  v22 = v12 + 1;
  if (v12 + 1 >= v17)
    goto LABEL_31;
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
    goto LABEL_19;
  v22 = v12 + 2;
  if (v12 + 2 >= v17)
    goto LABEL_31;
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
    goto LABEL_19;
  v22 = v12 + 3;
  if (v12 + 3 >= v17)
    goto LABEL_31;
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
    goto LABEL_19;
  v22 = v12 + 4;
  if (v12 + 4 >= v17)
    goto LABEL_31;
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
  {
LABEL_19:
    v12 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_143;
    if (v12 >= v17)
      break;
    v21 = *(_QWORD *)(v13 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_31:
  v26 = v85;
  if (!v85)
  {
    v27 = MEMORY[0x1E0DEE9E8];
    goto LABEL_132;
  }
  if (v85 != *(unint64_t **)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    v27 = static _SetStorage.allocate(capacity:)();
    v28 = *v87;
    v29 = v27 + 56;
    swift_retain();
    v30 = 0;
    while (1)
    {
      if (v28)
      {
        v33 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        v34 = v33 | (v30 << 6);
      }
      else
      {
        v20 = __OFADD__(v30++, 1);
        if (v20)
          goto LABEL_142;
        if (v30 >= v86)
        {
LABEL_131:
          swift_release();
LABEL_132:
          swift_release();
          return v27;
        }
        v35 = v87[v30];
        if (!v35)
        {
          v36 = v30 + 1;
          if (v30 + 1 >= v86)
            goto LABEL_131;
          v35 = v87[v36];
          if (!v35)
          {
            v36 = v30 + 2;
            if (v30 + 2 >= v86)
              goto LABEL_131;
            v35 = v87[v36];
            if (!v35)
            {
              v36 = v30 + 3;
              if (v30 + 3 >= v86)
                goto LABEL_131;
              v35 = v87[v36];
              if (!v35)
              {
                v36 = v30 + 4;
                if (v30 + 4 >= v86)
                  goto LABEL_131;
                v35 = v87[v36];
                if (!v35)
                {
                  v36 = v30 + 5;
                  if (v30 + 5 >= v86)
                    goto LABEL_131;
                  v35 = v87[v36];
                  if (!v35)
                  {
                    while (1)
                    {
                      v30 = v36 + 1;
                      if (__OFADD__(v36, 1))
                        break;
                      if (v30 >= v86)
                        goto LABEL_131;
                      v35 = v87[v30];
                      ++v36;
                      if (v35)
                        goto LABEL_52;
                    }
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
                  }
                }
              }
            }
          }
          v30 = v36;
        }
LABEL_52:
        v28 = (v35 - 1) & v35;
        v34 = __clz(__rbit64(v35)) + (v30 << 6);
      }
      v37 = (uint64_t *)(*(_QWORD *)(v93 + 48) + 16 * v34);
      v38 = *v37;
      v39 = v37[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v40 = Hasher._finalize()();
      v41 = -1 << *(_BYTE *)(v27 + 32);
      v42 = v40 & ~v41;
      v43 = v42 >> 6;
      if (((-1 << v42) & ~*(_QWORD *)(v29 + 8 * (v42 >> 6))) != 0)
      {
        v31 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v29 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_35;
      }
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v29 + 8 * v43);
      }
      while (v47 == -1);
      v31 = __clz(__rbit64(~v47)) + (v43 << 6);
LABEL_35:
      *(_QWORD *)(v29 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
      v32 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 16 * v31);
      *v32 = v38;
      v32[1] = v39;
      ++*(_QWORD *)(v27 + 16);
      v26 = (unint64_t *)((char *)v26 - 1);
      if (!v26)
        goto LABEL_131;
    }
  }
  return v9;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)(uint64_t *result, uint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[3];
  __int128 v58;

  v5 = *result;
  v6 = a4 + 8;
  v7 = a4[8];
  if (*result != a4[11])
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v49 = result;
  v11 = result[1];
  v10 = result[2];
  v51 = a4;
  v52 = result[4];
  if (v10)
  {
    v12 = (_QWORD *)(v10 + 24 * ((v11 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF));
    v14 = v12[4];
    v13 = v12[5];
    v15 = v12[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v11, v7);
    v14 = v16;
    v13 = v17;
    result = (uint64_t *)swift_unknownObjectRelease();
    if (v5 != v51[11])
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    v18 = v51[8];
    swift_unknownObjectRetain();
    v15 = specialized Rope._Node.subscript.getter(v11, v18);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  v19 = __OFADD__(v52, v15);
  v20 = v52 + v15;
  if (v19)
    goto LABEL_82;
  v55 = v14;
  v56 = v13;
  if (v52 >= a3)
    v21 = a3;
  else
    v21 = v52;
  if (v52 >= a2)
    v22 = v21;
  else
    v22 = a2;
  if (v20 <= a2)
    v23 = a2;
  else
    v23 = v20;
  if (v20 <= a3)
    a3 = v23;
  if (v22 == a3)
    goto LABEL_83;
  if (v22 == v52 && a3 == v20)
  {
    if (v5 == v51[11])
    {
      if (*v6)
      {
        specialized Rope._Node._prepareModify(at:)(v11, (uint64_t)v57);
        v58 = v57[1];
        v54[0] = v57[0];
        v54[2] = v57[2];
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58);
        result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58 + 8);
        v54[1] = MEMORY[0x1E0DEE9E0];
        v51[11] = v5 + 1;
        *v49 = v5 + 1;
        if (v51[8])
        {
          v49[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v53, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5(&v55, v52, v20);
          specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v49, v6, &v55);
          goto LABEL_55;
        }
        goto LABEL_94;
      }
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      return result;
    }
    goto LABEL_84;
  }
  result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))a5)(&v55, v22, a3);
  if (__OFSUB__(a3, v22))
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v25 = v55;
  v24 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v22, a3, a3 - v22, v25, v24);
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  v26 = v51[8];
  if (v26)
    v27 = v51[10];
  else
    v27 = 0;
  v28 = v52;
  if (v52 < 0 || v27 < v52)
    goto LABEL_86;
  v29 = v51[9];
  v30 = v51[11];
  if (!v26 || !*(_WORD *)(v26 + 16) || v52 >= v51[10])
  {
    v41 = swift_unknownObjectRetain_n();
    v42 = specialized Rope._endPath.getter(v41);
    swift_unknownObjectRelease();
    v33 = 0;
    v32 = 0;
    if (!v26)
      goto LABEL_72;
    goto LABEL_53;
  }
  v51 = (_QWORD *)v51[9];
  v31 = *(unsigned __int8 *)(v26 + 18);
  if (!*(_BYTE *)(v26 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v32 = v52;
    v33 = v26;
    v45 = *(unsigned __int16 *)(v26 + 16);
    if (!*(_WORD *)(v26 + 16))
      goto LABEL_70;
    goto LABEL_59;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v32 = v52;
  v33 = v26;
  while (2)
  {
    v35 = *(unsigned __int16 *)(v33 + 16);
    if (!*(_WORD *)(v33 + 16))
      goto LABEL_37;
    v36 = *(_QWORD *)(v33 + 40);
    v19 = __OFSUB__(v32, v36);
    v37 = v32 - v36;
    if (v19)
      goto LABEL_79;
    if (__OFADD__(v37, 1))
      goto LABEL_80;
    if (v37 + 1 <= 0)
    {
      v35 = 0;
      goto LABEL_38;
    }
    if ((_DWORD)v35 == 1)
    {
      v32 = v37;
LABEL_37:
      if (!v32)
        goto LABEL_38;
      goto LABEL_78;
    }
    v38 = (uint64_t *)(v33 + 64);
    v39 = 1;
    while (1)
    {
      v40 = *v38;
      v38 += 3;
      v32 = v37 - v40;
      if (__OFSUB__(v37, v40))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      if (__OFADD__(v32, 1))
        goto LABEL_77;
      if (v32 + 1 < 1)
        break;
      ++v39;
      v37 = v32;
      if (v35 == v39)
        goto LABEL_37;
    }
    v35 = v39;
    v32 = v37;
LABEL_38:
    v34 = (4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C;
    v31 = ((-15 << v34) - 1) & v31 | (v35 << v34);
    v33 = *(_QWORD *)(v33 + 24 + 24 * v35);
    swift_unknownObjectRetain();
    result = (uint64_t *)swift_unknownObjectRelease();
    if (*(_BYTE *)(v33 + 18))
      continue;
    break;
  }
  v31 &= 0xFFFFFFFFFFFFF0FFLL;
  v45 = *(unsigned __int16 *)(v33 + 16);
  if (*(_WORD *)(v33 + 16))
  {
LABEL_59:
    v46 = *(_QWORD *)(v33 + 24);
    v19 = __OFSUB__(v32, v46);
    v44 = v32 - v46;
    if (v19)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    if (__OFADD__(v44, 1))
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    if (v44 + 1 <= 0)
    {
      v45 = 0;
      goto LABEL_71;
    }
    if ((_DWORD)v45 == 1)
    {
      v32 = v44;
      goto LABEL_70;
    }
    v47 = (uint64_t *)(v33 + 48);
    for (i = 1; i != v45; ++i)
    {
      v48 = *v47;
      v47 += 3;
      v32 = v44 - v48;
      if (__OFSUB__(v44, v48))
        goto LABEL_87;
      if (__OFADD__(v32, 1))
        goto LABEL_88;
      if (v32 + 1 < 1)
        goto LABEL_75;
      v44 = v32;
    }
  }
LABEL_70:
  if (v32)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
LABEL_71:
  while (2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v42 = v31 | (v45 << 8);
    v29 = (uint64_t)v51;
    v28 = v52;
    if (v26)
    {
LABEL_53:
      swift_unknownObjectRetain();
      v31 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v42, v33, v26, v29);
      swift_unknownObjectRelease_n();
      v44 = v28 - v32;
      if (!__OFSUB__(v28, v32))
        break;
      goto LABEL_74;
    }
LABEL_72:
    v31 = 0;
    v44 = v28 - v32;
    if (__OFSUB__(v28, v32))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      v45 = i;
      v32 = v44;
      continue;
    }
    break;
  }
  *v49 = v30;
  v49[1] = v42;
  v49[2] = v33;
  v49[3] = v31;
  v49[4] = v44;
LABEL_55:
  swift_bridgeObjectRelease();
  return (uint64_t *)swift_bridgeObjectRelease();
}

uint64_t outlined release of AttributedString.Runs(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of AttributedString.Runs(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t *outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[11];
  outlined consume of AttributedString.Runs.Run?(*a1);
  outlined consume of AttributedString.Runs.Run?(v2);
  return a1;
}

uint64_t outlined copy of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

unint64_t BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v8;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  v9 = v14;
  v10 = v14 >> 14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a2);
  if (v10 >= a1 >> 14)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    v11 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
    if (v10 < v11 >> 14)
    {
      v13 = v9;
      dispatch thunk of Collection.index(after:)();
      return v14;
    }
  }
  return v9;
}

unint64_t BidirectionalCollection<>._checkRange(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v5;

  dispatch thunk of Collection.startIndex.getter();
  if (a1 >> 14 < v5 >> 14)
    return 0;
  dispatch thunk of Collection.endIndex.getter();
  if (v5 >> 14 < a2 >> 14)
    return 0;
  return a1;
}

uint64_t BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(__n128);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[3];
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedTypeWitness;

  v39[0] = a5;
  v39[2] = a4;
  v8 = *(_QWORD *)(a4 + 8);
  v9 = MEMORY[0x1E0DEB5C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v39 - v12;
  v39[1] = a3;
  v42 = *(_QWORD *)(a3 + 8);
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v40 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v48 = v19;
  v49 = v18;
  v20 = *(void (**)(__n128))(v19 + 16);
  v43 = (char *)v39 - v21;
  v20(v17);
  v47 = v8;
  v22 = v9;
  dispatch thunk of Collection.endIndex.getter();
  v41 = v13;
  while (1)
  {
    v23 = v45;
    dispatch thunk of Collection.startIndex.getter();
    v24 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    v25 = dispatch thunk of static Comparable.> infix(_:_:)();
    v44 = *(void (**)(char *, uint64_t))(v46 + 8);
    v44(v23, v24);
    if ((v25 & 1) == 0)
    {
      v44(v13, AssociatedTypeWitness);
      v35 = v48;
      v34 = v49;
      v36 = v39[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v48 + 32))(v39[0], v43, v49);
      v37 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v36, v37, 1, v34);
    }
    v26 = a2;
    v27 = a1;
    v28 = v40;
    dispatch thunk of Collection.startIndex.getter();
    v29 = v49;
    v30 = v22;
    swift_getAssociatedConformanceWitness();
    v31 = v43;
    v32 = dispatch thunk of static Comparable.> infix(_:_:)();
    v33 = *(void (**)(char *, uint64_t))(v48 + 8);
    v33(v28, v29);
    if ((v32 & 1) == 0)
      break;
    a1 = v27;
    a2 = v26;
    v13 = v41;
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    v22 = v30;
  }
  v44(v41, AssociatedTypeWitness);
  v34 = v49;
  v33(v31, v49);
  v37 = 1;
  v36 = v39[0];
  v35 = v48;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v36, v37, 1, v34);
}

uint64_t BidirectionalCollection._range<A>(of:anchored:backwards:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_QWORD, _QWORD, _QWORD)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  void (*v55)(__n128);
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  uint64_t result;
  char v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  char *v72;
  uint64_t v73;
  char v74;
  char *v75;
  char v76;
  char *v77;
  void (*v78)(char *, _QWORD);
  uint64_t v79;
  void (*v80)(char *);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  char *v88;
  char v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  char v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  char *v105;
  char *v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  void (*v119)(char *, uint64_t);
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t TupleTypeMetadata2;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(__n128);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(_QWORD, _QWORD, _QWORD);
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t AssociatedConformanceWitness;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  void (*v160)(char *, char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165[8];

  v149 = a8;
  LODWORD(v160) = a3;
  LODWORD(v137) = a2;
  v164 = a1;
  v133 = a9;
  v138 = a6;
  v13 = *((_QWORD *)a6 + 1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v127 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v124 = (char *)&v120 - v17;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for Range();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v123 = (char *)&v120 - v20;
  v155 = v13;
  v148 = swift_getAssociatedTypeWitness();
  v147 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148);
  v146 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v145 = (char *)&v120 - v23;
  v162 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v24);
  v150 = (char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = a7;
  v158 = *(_QWORD *)(a7 + 8);
  v163 = a5;
  v26 = AssociatedTypeWitness;
  v161 = swift_getAssociatedTypeWitness();
  v157 = *(_QWORD *)(v161 - 8);
  MEMORY[0x1E0C80A78](v161);
  v140 = (char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v156 = (char *)&v120 - v29;
  MEMORY[0x1E0C80A78](v30);
  v159 = (char *)&v120 - v31;
  v129 = type metadata accessor for Optional();
  v128 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129);
  v33 = (void (*)(char *, char *, uint64_t))((char *)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v120 - v35;
  v37 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v38);
  v153 = (char *)&v120 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v121 = (char *)&v120 - v41;
  MEMORY[0x1E0C80A78](v42);
  v44 = (char *)&v120 - v43;
  MEMORY[0x1E0C80A78](v45);
  v120 = (char *)&v120 - v46;
  MEMORY[0x1E0C80A78](v47);
  v141 = (char *)&v120 - v48;
  MEMORY[0x1E0C80A78](v49);
  v51 = (char *)&v120 - v50;
  v136 = type metadata accessor for Optional();
  v134 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v122 = (char *)&v120 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = MEMORY[0x1E0C80A78](v53);
  v125 = v19;
  v55 = *(void (**)(__n128))(v19 + 56);
  v135 = (char *)&v120 - v56;
  v131 = v18;
  v130 = v55;
  v55(v54);
  v151 = v44;
  v152 = v37;
  if ((v160 & 1) != 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v164, v163, (uint64_t)v138, v132, (uint64_t)v36);
    v57 = *(void (**)(char *, uint64_t))(v37 + 8);
    v57(v44, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v36, 1, v26) == 1)
    {
      (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v36, v129);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v130)(v133, 1, 1, v131);
    }
    v59 = v9;
    v62 = v120;
    v160 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v160(v120, v36, v26);
    v63 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v63(v51, v62, v26);
    if ((v137 & 1) != 0)
    {
      v57(v62, v26);
      v64 = v121;
      v63(v121, v51, v26);
    }
    else
    {
      v64 = v121;
      dispatch thunk of Collection.startIndex.getter();
      v57(v62, v26);
    }
    v160(v141, v64, v26);
    v61 = v150;
    v60 = v152;
  }
  else
  {
    v58 = v138;
    dispatch thunk of Collection.startIndex.getter();
    v59 = v9;
    if ((v137 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v141, v51, v26);
      v60 = v37;
      v61 = v150;
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v164, v163, (uint64_t)v58, v132, (uint64_t)v33);
      v65 = *(void (**)(char *, uint64_t))(v37 + 8);
      v65(v44, v26);
      v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
      v160 = v33;
      v67 = v66((char *)v33, 1, v26);
      v61 = v150;
      if (v67 == 1)
      {
        v65(v51, v26);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
        (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v128 + 8))(v160, v129);
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v130)(v133, 1, 1, v131);
      }
      v60 = v37;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v37 + 32))(v141, (void (*)(_QWORD, _QWORD))v160, v26);
    }
  }
  v69 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v70 = 1;
  if ((v69 & 1) == 0)
    v70 = -1;
  v137 = v70;
  v71 = *(void (**)(_QWORD, _QWORD, _QWORD))(v60 + 16);
  v144 = v59;
  v143 = v26;
  v142 = a4;
  v139 = v51;
  v138 = v71;
  v71(v153, v51, v26);
  while (1)
  {
    dispatch thunk of Collection.startIndex.getter();
    while (1)
    {
      v72 = v156;
      dispatch thunk of Collection.endIndex.getter();
      v73 = v161;
      v155 = swift_getAssociatedConformanceWitness();
      v74 = dispatch thunk of static Comparable.< infix(_:_:)();
      v160 = *(void (**)(char *, char *, uint64_t))(v157 + 8);
      ((void (*)(char *, uint64_t))v160)(v72, v73);
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v61, v59, a4);
      if ((v74 & 1) == 0)
        break;
      v75 = v151;
      dispatch thunk of Collection.endIndex.getter();
      v76 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v152 + 8))(v75, v26);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v61, a4);
      v77 = v159;
      if ((v76 & 1) == 0)
        goto LABEL_23;
      v78 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v79 = v147;
      v80 = *(void (**)(char *))(v147 + 16);
      v81 = v145;
      v82 = v148;
      v80(v145);
      v78(v165, 0);
      v83 = dispatch thunk of Collection.subscript.read();
      v84 = v146;
      v80(v146);
      ((void (*)(char *, _QWORD))v83)(v165, 0);
      LOBYTE(v83) = dispatch thunk of static Equatable.== infix(_:_:)();
      v85 = *(void (**)(char *, uint64_t))(v79 + 8);
      v85(v84, v82);
      v85(v81, v82);
      v26 = v143;
      v59 = v144;
      a4 = v142;
      v61 = v150;
      if ((v83 & 1) == 0)
        goto LABEL_23;
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of Collection.formIndex(after:)();
    }
    (*(void (**)(char *, uint64_t))(v162 + 8))(v61, a4);
    v77 = v159;
LABEL_23:
    v86 = v156;
    v87 = v161;
    (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v156, v77, v161);
    v88 = v140;
    dispatch thunk of Collection.endIndex.getter();
    v89 = dispatch thunk of static Equatable.== infix(_:_:)();
    v90 = (void (*)(char *, uint64_t))v160;
    ((void (*)(char *, uint64_t))v160)(v88, v87);
    v90(v86, v87);
    if ((v89 & 1) != 0)
      break;
    v91 = v139;
    v92 = v141;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v160)(v159, v161);
      v119 = *(void (**)(char *, uint64_t))(v152 + 8);
      v119(v153, v26);
      v119(v92, v26);
      v119(v91, v26);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v134 + 32))(v133, v135, v136);
    }
    v93 = v151;
    dispatch thunk of Collection.index(_:offsetBy:)();
    v94 = v152;
    v95 = *(void (**)(char *, uint64_t))(v152 + 8);
    v95(v91, v26);
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v93, v26);
    ((void (*)(char *, uint64_t))v160)(v159, v161);
    v96 = v153;
    v95(v153, v26);
    v138(v96, v91, v26);
  }
  v97 = v151;
  v98 = v153;
  v99 = (void (*)(char *, char *, uint64_t))v138;
  v138(v151, v153, v26);
  v100 = v139;
  v101 = dispatch thunk of static Comparable.<= infix(_:_:)();
  ((void (*)(char *, uint64_t))v160)(v159, v161);
  v102 = v152;
  v103 = *(void (**)(char *, uint64_t))(v152 + 8);
  v103(v98, v26);
  v103(v141, v26);
  result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v135, v136);
  if ((v101 & 1) != 0)
  {
    v104 = TupleTypeMetadata2;
    v105 = v124;
    v106 = &v124[*(int *)(TupleTypeMetadata2 + 48)];
    v107 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
    v107(v124, v100, v26);
    v107(v106, v97, v26);
    v108 = v127;
    v109 = &v127[*(int *)(v104 + 48)];
    v99(v127, v105, v26);
    v99(v109, v106, v26);
    v110 = v123;
    v107(v123, v108, v26);
    v103(v109, v26);
    v111 = *(int *)(v104 + 48);
    v112 = v136;
    v113 = &v108[v111];
    v107(v108, v105, v26);
    v107(v113, v106, v26);
    v114 = v131;
    v115 = v113;
    v116 = v135;
    v107(&v110[*(int *)(v131 + 36)], v115, v26);
    v103(v108, v26);
    v117 = v122;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v122, v110, v114);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v130)(v117, 0, 1, v114);
    v118 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
    v118(v116, v117, v112);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v118)(v133, v116, v112);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TermOfAddress.language.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((unint64_t)v1[12] >= 4)
  {
    v5 = v1[10];
    v6 = v1[11];
    v3 = v1[8];
    v4 = v1[9];
    v8 = v1[6];
    v7 = v1[7];
    v10 = v1[4];
    v9 = v1[5];
    v15 = v1[2];
    v16 = v1[3];
    v12 = v1;
    v11 = *v1;
    v14 = v12[1];
    outlined copy of Locale.LanguageCode?(v11, v14);
    outlined copy of Locale.LanguageCode?(v10, v9);
    result = outlined copy of Locale.LanguageCode?(v3, v4);
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v15;
    a1[3] = v16;
    a1[4] = v10;
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = v7;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    *(_OWORD *)a1 = xmmword_18205FD60;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
  }
  a1[8] = v3;
  a1[9] = v4;
  a1[10] = v5;
  a1[11] = v6;
  return result;
}

unint64_t TermOfAddress.pronouns.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v1 = v0[12];
  if (v1 < 4)
    return MEMORY[0x1E0DEE9D8];
  v3 = v0[8];
  v2 = v0[9];
  v5 = v0[4];
  v4 = v0[5];
  v8 = v0;
  v6 = *v0;
  v7 = v8[1];
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v3, v2);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v6, v7);
  outlined consume of Locale.LanguageCode?(v5, v4);
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v1;
}

double static TermOfAddress.neutral.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double static TermOfAddress.feminine.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 1;
  return result;
}

double static TermOfAddress.masculine.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 2;
  return result;
}

double static TermOfAddress.currentUser.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 3;
  return result;
}

uint64_t static TermOfAddress.localized(language:pronouns:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  v13 = a1[9];
  v14 = a1[10];
  v15 = a1[11];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = v11;
  a3[8] = v12;
  a3[9] = v13;
  a3[10] = v14;
  a3[11] = v15;
  a3[12] = a2;
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v8, v9);
  outlined copy of Locale.LanguageCode?(v12, v13);
  return swift_bridgeObjectRetain();
}

void TermOfAddress.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 96);
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      break;
    default:
      Locale.Language.hash(into:)();
      specialized Array<A>.hash(into:)(a1, v3);
      break;
  }
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X8 }
}

{
  Swift::UInt v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (uint64_t *)(a2 + 64);
    while (1)
    {
      v6 = *(v4 - 1);
      v19 = *(v4 - 2);
      v20 = *(v4 - 4);
      v7 = v4[1];
      v8 = v4[3];
      v22 = v4[2];
      v23 = *v4;
      v9 = v4[5];
      v10 = v4[6];
      v11 = v4[7];
      v5 = v4[8];
      v21 = *(v4 - 3);
      v18 = v4[4];
      switch(v5)
      {
        case 0uLL:
          String.hash(into:)();
          v5 = 0;
          goto LABEL_4;
        case 1uLL:
          String.hash(into:)();
          v5 = 1;
          goto LABEL_4;
        case 2uLL:
          String.hash(into:)();
          v5 = 2;
          goto LABEL_4;
        case 3uLL:
          String.hash(into:)();
          v5 = 3;
          goto LABEL_4;
        default:
          if (*(v4 - 3))
          {
            v15 = v4[1];
            v12 = v4[4];
            Hasher._combine(_:)(1u);
            outlined copy of TermOfAddress._TermOfAddress(v20, v21, v19, v6, v23, v15, v22, v8, v12, v9, v10, v11, v5);
            outlined copy of Locale.LanguageCode?(v20, v21);
            outlined copy of Locale.LanguageCode?(v23, v15);
            v7 = v15;
            outlined copy of Locale.LanguageCode?(v18, v9);
            outlined copy of Locale.LanguageCode?(v20, v21);
            String.hash(into:)();
            outlined consume of Locale.LanguageCode?(v20, v21);
            if (v15)
              goto LABEL_9;
          }
          else
          {
            Hasher._combine(_:)(0);
            outlined copy of TermOfAddress._TermOfAddress(v20, 0, v19, v6, v23, v7, v22, v8, v18, v9, v10, v11, v5);
            outlined copy of Locale.LanguageCode?(v20, 0);
            outlined copy of Locale.LanguageCode?(v23, v7);
            outlined copy of Locale.LanguageCode?(v18, v9);
            if (v7)
            {
LABEL_9:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              outlined consume of Locale.LanguageCode?(v23, v7);
              if (!v9)
                goto LABEL_15;
              goto LABEL_10;
            }
          }
          Hasher._combine(_:)(0);
          if (!v9)
          {
LABEL_15:
            Hasher._combine(_:)(0);
            v16 = 0;
            v14 = v21;
            v13 = v18;
            goto LABEL_16;
          }
LABEL_10:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v13 = v18;
          outlined consume of Locale.LanguageCode?(v18, v9);
          v16 = v9;
          v14 = v21;
LABEL_16:
          outlined consume of Locale.LanguageCode?(v20, v14);
          outlined consume of Locale.LanguageCode?(v23, v7);
          outlined consume of Locale.LanguageCode?(v13, v16);
          specialized Array<A>.hash(into:)(a1, v5);
LABEL_4:
          v4 += 13;
          outlined consume of TermOfAddress._TermOfAddress(v20, v21, v19, v6, v23, v7, v22, v8, v18, v9, v10, v11, v5);
          if (!--v3)
            return;
          break;
      }
    }
  }
}

{
  Swift::UInt v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  v21 = v4;
  if (v4)
  {
    v5 = (unsigned int *)(a2 + 88);
    do
    {
      v6 = *((unsigned __int8 *)v5 - 40);
      v7 = *((unsigned __int8 *)v5 - 39);
      v13 = *((unsigned __int8 *)v5 - 38);
      v8 = *((_QWORD *)v5 - 4);
      v14 = *((unsigned __int8 *)v5 - 24);
      v15 = *((unsigned __int8 *)v5 - 23);
      v16 = *((unsigned __int8 *)v5 - 22);
      v17 = *((unsigned __int8 *)v5 - 21);
      v18 = *((unsigned __int8 *)v5 - 20);
      v9 = *((_QWORD *)v5 - 2);
      v20 = *((unsigned __int8 *)v5 + 4);
      v19 = *v5;
      v10 = *((_QWORD *)v5 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v11 = v8;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v6 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6 + 1);
      }
      if ((_DWORD)v7 == 14)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7 + 1);
      }
      v12 = v16;
      if ((_DWORD)v13 == 6)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        v12 = v16;
        v11 = v8;
        Hasher._combine(_:)(v13 + 1);
      }
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v11);
      if ((_DWORD)v14 == 14)
      {
        Hasher._combine(_:)(0);
        if ((_DWORD)v15 != 3)
          goto LABEL_16;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v14 + 1);
        if ((_DWORD)v15 != 3)
        {
LABEL_16:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v15 + 1);
          if ((_DWORD)v12 == 3)
            goto LABEL_20;
          goto LABEL_17;
        }
      }
      Hasher._combine(_:)(0);
      if ((_DWORD)v12 == 3)
      {
LABEL_20:
        Hasher._combine(_:)(0);
        goto LABEL_21;
      }
LABEL_17:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v12 + 1);
LABEL_21:
      if (v17 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v17 & 1) + 1);
      }
      if (v18 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v18 & 1) + 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized Optional<A>.hash(into:)(a1, v9, v10, (v19 | (v20 << 32)) & 0xFFFFFFFFFFLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 16;
      --v21;
    }
    while (v21);
  }
}

Swift::Int TermOfAddress.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[80];

  v13 = *v0;
  v14 = v0[1];
  v1 = v0[4];
  v2 = v0[5];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        v7 = v1;
        v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2)
          goto LABEL_4;
      }
      else
      {
        Hasher._combine(_:)(0);
        v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0);
        v7 = v1;
        v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }
LABEL_10:
          Hasher._combine(_:)(0);
          v10 = v4;
          goto LABEL_11;
        }
      }
      Hasher._combine(_:)(0);
      v9 = v3;
      if (v3)
        goto LABEL_5;
      goto LABEL_10;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[80];

  v13 = *v0;
  v14 = v0[1];
  v1 = v0[4];
  v2 = v0[5];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        v7 = v1;
        v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2)
          goto LABEL_4;
      }
      else
      {
        Hasher._combine(_:)(0);
        v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0);
        v7 = v1;
        v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }
LABEL_10:
          Hasher._combine(_:)(0);
          v10 = v4;
          goto LABEL_11;
        }
      }
      Hasher._combine(_:)(0);
      v9 = v3;
      if (v3)
        goto LABEL_5;
      goto LABEL_10;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TermOfAddress.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance TermOfAddress.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1819D9534()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TermOfAddress.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1819D95E4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1819D968C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TermOfAddress.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TermOfAddress.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TermOfAddress.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1819D975C + 4 * byte_18205FD99[*v0]))();
}

void sub_1819D975C(_QWORD *a1@<X8>)
{
  *a1 = 0x65676175676E616CLL;
  a1[1] = 0xE800000000000000;
}

void sub_1819D9778(_QWORD *a1@<X8>)
{
  *a1 = 0x736E756F6E6F7270;
  a1[1] = 0xE800000000000000;
}

void sub_1819D9794(_QWORD *a1@<X8>)
{
  *a1 = 1919251317;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TermOfAddress.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1819D97E4 + 4 * byte_18205FD9D[*v0]))(0x6441664F6D726574, 0xED00007373657264);
}

uint64_t sub_1819D97E4()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1819D97FC()
{
  return 0x736E756F6E6F7270;
}

uint64_t sub_1819D9814()
{
  return 1919251317;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TermOfAddress.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TermOfAddress.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TermOfAddress.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TermOfAddress.CodingKeys()
{
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TermOfAddress.CodingKeys()
{
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TermOfAddress.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TermOfAddress.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v11) = 3;
    if ((KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1) == 0)
    {
      LOBYTE(v11) = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 0;
    a2[8] = 0;
    a2[9] = 0;
    a2[10] = 0;
    a2[11] = 0;
    a2[12] = 3;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TermOfAddress.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TermOfAddress.CodingKeys>);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = *v1;
  v30 = v1[1];
  v31 = v5;
  v26 = v1[2];
  v6 = v1[4];
  v29 = v1[3];
  v7 = v1[5];
  v32 = v1[6];
  v33 = v7;
  v8 = v1[8];
  v27 = v1[7];
  v9 = v1[9];
  v10 = v1[10];
  v11 = v1[12];
  v28 = v1[11];
  v12 = a1[3];
  v13 = a1;
  v14 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v13, v12);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v11)
  {
    case 0:
      v15 = 2;
      goto LABEL_7;
    case 1:
      LOBYTE(v37) = 0;
      goto LABEL_8;
    case 2:
      v15 = 1;
LABEL_7:
      LOBYTE(v37) = v15;
LABEL_8:
      v49 = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      v20 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_10;
    case 3:
      LOBYTE(v37) = 3;
      v20 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
LABEL_10:
      result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v20);
      break;
    default:
      v37 = v31;
      v38 = v30;
      v39 = v26;
      v40 = v29;
      v23 = v6;
      v16 = v33;
      v41 = v6;
      v42 = v33;
      v43 = v32;
      v44 = v27;
      v24 = v14;
      v45 = v8;
      v46 = v9;
      v47 = v10;
      v48 = v28;
      outlined copy of Locale.LanguageCode?(v31, v30);
      outlined copy of Locale.LanguageCode?(v6, v16);
      outlined copy of Locale.LanguageCode?(v8, v9);
      v25 = v11;
      swift_bridgeObjectRetain();
      Locale.Language.minimalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v31, v30);
      outlined consume of Locale.LanguageCode?(v23, v33);
      outlined consume of Locale.LanguageCode?(v8, v9);
      LOBYTE(v37) = 1;
      v17 = v36;
      v18 = v24;
      v19 = v34;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v19)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v37 = v25;
        v49 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Morphology.Pronoun]);
        lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A](&lazy protocol witness table cache variable for type [Morphology.Pronoun] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun, MEMORY[0x1E0DEAF10]);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v17);
      }
      result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TermOfAddress@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TermOfAddress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TermOfAddress(_QWORD *a1)
{
  return TermOfAddress.encode(to:)(a1);
}

void TermOfAddress.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  char v21;
  id v22;
  char v23;
  id v24;
  char v25;
  id v26;
  uint64_t v27;
  int Language;
  uint64_t v29;
  uint64_t v30;
  int Script;
  uint64_t v32;
  uint64_t v33;
  int Country;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[280];
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_neutral);
  v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {

    v7 = 0;
    v8 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
LABEL_38:
    *a2 = v7;
    a2[1] = v8;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v11;
    a2[5] = v12;
    a2[6] = (uint64_t)v13;
    a2[7] = (uint64_t)v14;
    a2[8] = v15;
    a2[9] = v16;
    a2[10] = v17;
    a2[11] = (uint64_t)v18;
    a2[12] = v19;
    return;
  }
  v20 = objc_msgSend(v4, sel_feminine);
  v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) != 0)
  {

    v7 = 0;
    v8 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    goto LABEL_38;
  }
  v22 = objc_msgSend(v4, sel_masculine);
  v23 = static NSObject.== infix(_:_:)();

  if ((v23 & 1) != 0)
  {

    v7 = 0;
    v8 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 2;
    goto LABEL_38;
  }
  v24 = objc_msgSend(v4, sel_currentUser);
  v25 = static NSObject.== infix(_:_:)();

  if ((v25 & 1) != 0)
  {

    v7 = 0;
    v8 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 3;
    goto LABEL_38;
  }
  v26 = objc_msgSend(a1, sel_languageIdentifier);
  v13 = v26;
  if (!v26)
  {
    v47 = 0;
    v48 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v49 = 0;
    v50 = 0;
    v14 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v51 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

  MEMORY[0x1E0C80A78](v27);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  swift_release();
  v29 = 0;
  v30 = 0;
  if (Language > 0)
  {
    v44[Language] = 0;
    v29 = MEMORY[0x186DA4658](v44, 0);
  }
  v51 = v30;
  v48 = v29;
  MEMORY[0x1E0C80A78](v29);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v32 = 0;
  v33 = 0;
  if ((int)v52 <= 0 && Script > 0)
  {
    v44[Script] = 0;
    v32 = MEMORY[0x186DA4658](v44, 0);
  }
  v47 = v33;
  v50 = v32;
  MEMORY[0x1E0C80A78](v32);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v35 = 0;
  v16 = 0;
  if ((int)v52 <= 0 && Country > 0)
  {
    v44[Country] = 0;
    v35 = MEMORY[0x186DA4658](v44);
    v16 = v36;
  }
  v49 = v35;
  swift_bridgeObjectRelease();
  if (v51)
  {
    v37 = String.lowercased()();
    countAndFlagsBits = v37._countAndFlagsBits;
    object = v37._object;
  }
  else
  {
    v48 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  if (v47)
  {
    v52 = v50;
    v53 = v47;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v38 = String._capitalized()();
    v13 = (void *)v38._countAndFlagsBits;
    v14 = v38._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_25:
      v39 = String.uppercased()();
      v17 = v39._countAndFlagsBits;
      v18 = v39._object;
      goto LABEL_28;
    }
  }
  else
  {
    v50 = 0;
    v13 = 0;
    v14 = 0;
    if (v16)
      goto LABEL_25;
  }
  v49 = 0;
  v17 = 0;
  v18 = 0;
LABEL_28:
  v40 = objc_msgSend(a1, sel_pronouns);
  if (v40)
  {
    v41 = v40;
    v46 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v42 = swift_dynamicCastClass();
    v46 = (uint64_t)v41;
    if (v42)
    {
      v46 = *(_QWORD *)(v42 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v43 = swift_dynamicCastClass();
    if (v43)
    {
      v46 = v43;

    }
    else
    {
      swift_unknownObjectRelease();
      v45 = objc_msgSend(v41, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v46 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v19 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = MEMORY[0x1E0DEE9D8];
  }
  if (v51 != 1)
  {

    v12 = v47;
    v7 = v48;
    v11 = v50;
    v8 = v51;
    v15 = v49;
    goto LABEL_38;
  }
  __break(1u);
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint8x8_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSMorphology_optional *v12;
  NSMorphology_optional *v13;
  NSMorphology_optional *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  unsigned __int16 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned __int8 v29;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v22 = v2 & 0xC000000000000001;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = 4;
    v20 = v3;
    v21 = v2;
    while (1)
    {
      v6 = v22 ? (id)MEMORY[0x186DA53A8](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v6, sel_pronoun);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v11 = v10;

      swift_bridgeObjectRetain();
      Morphology.init(_:)((NSMorphology_optional *)objc_msgSend(v7, sel_morphology));
      v1.i32[0] = v28;
      swift_bridgeObjectRetain();
      v12 = (NSMorphology_optional *)objc_msgSend(v7, sel_dependentMorphology);
      v13 = v12;
      if (v12)
      {
        v14 = v12;
        Morphology.init(_:)(v13);

        v23 = v27;
        v13 = (NSMorphology_optional *)(v25 | ((unint64_t)v26 << 16));
        v15 = v28 | ((unint64_t)v29 << 32);
      }
      else
      {

        v23 = 0;
        v15 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v17 = v4[2];
      v16 = v4[3];
      if (v17 >= v16 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v4);
      v4[2] = v17 + 1;
      v18 = &v4[8 * v17];
      v18[4] = v24;
      v18[5] = v11;
      *((_WORD *)v18 + 24) = v25;
      *((_BYTE *)v18 + 50) = v26;
      v18[7] = v27;
      *((_DWORD *)v18 + 16) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      *((_BYTE *)v18 + 68) = v29;
      v18[9] = v13;
      v18[10] = v23;
      *((_DWORD *)v18 + 22) = v15;
      ++v5;
      *((_BYTE *)v18 + 92) = BYTE4(v15);
      v2 = v21;
      if (v8 == v20)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v4;
}

void __swiftcall TermOfAddress._bridgeToObjectiveC()(NSTermOfAddress *__return_ptr retstr)
{
  uint64_t *v1;
  unint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52[13];

  v2 = v1[12];
  switch(v2)
  {
    case 0uLL:
      v3 = objc_msgSend((id)objc_opt_self(), sel_neutral);
      goto LABEL_8;
    case 1uLL:
      v3 = objc_msgSend((id)objc_opt_self(), sel_feminine);
      goto LABEL_8;
    case 2uLL:
      v3 = objc_msgSend((id)objc_opt_self(), sel_masculine);
      goto LABEL_8;
    case 3uLL:
      v3 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
LABEL_8:
      v16 = v3;
      return;
    default:
      v4 = *v1;
      v5 = v1[1];
      v6 = v1[2];
      v7 = v1[3];
      v9 = v1[4];
      v8 = v1[5];
      v11 = v1[6];
      v10 = v1[7];
      v13 = v1[8];
      v12 = v1[9];
      v14 = v1[11];
      v15 = v1[10];
      v52[0] = v4;
      v52[1] = v5;
      v52[2] = v6;
      v52[3] = v7;
      v52[4] = v9;
      v52[5] = v8;
      v52[6] = v11;
      v52[7] = v10;
      v46 = v10;
      v47 = v13;
      v52[8] = v13;
      v52[9] = v12;
      v49 = v12;
      v52[10] = v15;
      v52[11] = v14;
      v39 = v2;
      if (v5)
      {
        outlined copy of Locale.LanguageCode?(v4, v5);
        outlined copy of Locale.LanguageCode?(v9, v8);
        outlined copy of Locale.LanguageCode?(v47, v49);
        swift_bridgeObjectRetain();
LABEL_11:
        outlined copy of Locale.LanguageCode?(v4, v5);
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v4, v5);
        outlined consume of Locale.LanguageCode?(v9, v8);
        outlined consume of Locale.LanguageCode?(v47, v49);
        goto LABEL_12;
      }
      outlined copy of Locale.LanguageCode?(v4, 0);
      outlined copy of Locale.LanguageCode?(v9, v8);
      outlined copy of Locale.LanguageCode?(v47, v49);
      outlined copy of TermOfAddress._TermOfAddress(v4, 0, v6, v7, v9, v8, v11, v46, v47, v49, v15, v14, v2);
      specialized _withFixedCharBuffer(size:_:)(257, v52);
      v18 = v17;
      outlined consume of Locale.LanguageCode?(v4, 0);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
      if (v18)
      {
        String.lowercased()();
        goto LABEL_11;
      }
      Locale.Language.maximalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v4, 0);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
LABEL_12:
      v19 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v2 + 16);
      if (v20)
      {
        v51 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v21 = 0;
        while (1)
        {
          v50 = v20;
          v45 = v21;
          v23 = *(unsigned __int8 *)(v39 + v21 + 48);
          v24 = *(unsigned __int8 *)(v39 + v21 + 49);
          v25 = *(unsigned __int8 *)(v39 + v21 + 50);
          v26 = *(unsigned __int8 *)(v39 + v21 + 64);
          v42 = *(unsigned __int8 *)(v39 + v21 + 66);
          v27 = *(unsigned __int8 *)(v39 + v21 + 67);
          v43 = *(unsigned __int8 *)(v39 + v21 + 68);
          v28 = *(_QWORD *)(v39 + v21 + 80);
          v44 = *(_QWORD *)(v39 + v21 + 72);
          v40 = *(unsigned int *)(v39 + v21 + 88);
          v41 = *(unsigned __int8 *)(v39 + v21 + 92);
          v48 = String._bridgeToObjectiveCImpl()();
          v29 = objc_allocWithZone((Class)NSMorphology);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v30 = objc_msgSend(v29, sel_init);
          v31 = v30;
          if (v23 == 3)
          {
            if ((_DWORD)v25 == 6)
              goto LABEL_18;
          }
          else
          {
            objc_msgSend(v30, sel_setGrammaticalGender_, v23 + 1);
            if ((_DWORD)v25 == 6)
            {
LABEL_18:
              if ((_DWORD)v24 == 14)
                goto LABEL_19;
              goto LABEL_34;
            }
          }
          objc_msgSend(v31, sel_setNumber_, v25 + 1);
          if ((_DWORD)v24 == 14)
          {
LABEL_19:
            if ((_DWORD)v26 != 14)
              goto LABEL_35;
            goto LABEL_20;
          }
LABEL_34:
          objc_msgSend(v31, sel_setPartOfSpeech_, v24 + 1);
          if ((_DWORD)v26 != 14)
          {
LABEL_35:
            objc_msgSend(v31, sel_setGrammaticalCase_, v26 + 1);
            if (v27 == 2)
              goto LABEL_22;
LABEL_21:
            objc_msgSend(v31, sel_setDetermination_, (v27 & 1) + 1);
            goto LABEL_22;
          }
LABEL_20:
          if (v27 != 2)
            goto LABEL_21;
LABEL_22:
          if ((_DWORD)v42 != 3)
            objc_msgSend(v31, sel_setPronounType_, v42 + 1);
          swift_bridgeObjectRelease();
          if (v43 != 2)
          {
            if ((v43 & 1) != 0)
              v32 = 2;
            else
              v32 = 1;
            objc_msgSend(v31, sel_setDefiniteness_, v32);
          }
          if (v28)
          {
            v33 = objc_allocWithZone((Class)NSMorphology);
            swift_bridgeObjectRetain();
            v34 = objc_msgSend(v33, sel_init);
            v22 = v34;
            if (v44 == 3)
              v35 = v34;
            else
              objc_msgSend(v34, sel_setGrammaticalGender_, v44 + 1);
            if ((v44 & 0xFF0000) != 0x60000)
              objc_msgSend(v22, sel_setNumber_, BYTE2(v44) + 1);
            if ((v44 & 0xFF00) != 0xE00)
              objc_msgSend(v22, sel_setPartOfSpeech_, BYTE1(v44) + 1);
            v36 = v40 | (v41 << 32);
            if (v40 != 14)
              objc_msgSend(v22, sel_setGrammaticalCase_, v40 + 1);
            if ((v40 & 0xFF000000) != 0x2000000)
              objc_msgSend(v22, sel_setDetermination_, ((v36 >> 24) & 1) + 1);
            if (BYTE2(v40) != 3)
              objc_msgSend(v22, sel_setPronounType_, BYTE2(v40) + 1);
            if ((_DWORD)v41 == 2)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease_n();
            }
            else
            {
              if ((v36 & 0x100000000) != 0)
                v37 = 2;
              else
                v37 = 1;
              objc_msgSend(v22, sel_setDefiniteness_, v37);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v22 = 0;
          }
          objc_msgSend(objc_allocWithZone((Class)NSMorphologyPronoun), sel_initWithPronoun_morphology_dependentMorphology_, v48, v31, v22);

          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v21 = v45 + 64;
          v20 = v50 - 1;
          if (v50 == 1)
          {
            v38 = v51;
            swift_bridgeObjectRelease();
            if (!(v51 >> 62))
              goto LABEL_55;
LABEL_58:
            if (v38 >= 0)
              v38 &= 0xFFFFFFFFFFFFFF8uLL;
            goto LABEL_56;
          }
        }
      }
      swift_bridgeObjectRelease();
      v38 = MEMORY[0x1E0DEE9D8];
      if (MEMORY[0x1E0DEE9D8] >> 62)
        goto LABEL_58;
LABEL_55:
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v38 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_56:
      objc_msgSend((id)objc_opt_self(), sel_localizedForLanguageIdentifier_withPronouns_, v19, v38);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return;
  }
}

void static TermOfAddress._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  char v26;
  id v27;
  uint64_t v28;
  int Language;
  uint64_t v30;
  uint64_t v31;
  int Script;
  uint64_t v33;
  uint64_t v34;
  int Country;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[280];
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1)
    __break(1u);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_neutral);
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
LABEL_39:
    *a2 = v8;
    a2[1] = v9;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v12;
    a2[5] = v13;
    a2[6] = (uint64_t)v14;
    a2[7] = (uint64_t)v15;
    a2[8] = v16;
    a2[9] = v17;
    a2[10] = v18;
    a2[11] = (uint64_t)v19;
    a2[12] = v20;
    return;
  }
  v21 = objc_msgSend(v4, sel_feminine);
  v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    goto LABEL_39;
  }
  v23 = objc_msgSend(v4, sel_masculine);
  v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 2;
    goto LABEL_39;
  }
  v25 = objc_msgSend(v4, sel_currentUser);
  v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 3;
    goto LABEL_39;
  }
  v27 = objc_msgSend(v5, sel_languageIdentifier);
  v14 = v27;
  if (!v27)
  {
    v48 = 0;
    v49 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v50 = 0;
    v51 = 0;
    v15 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v52 = 1;
    goto LABEL_29;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1E0C80A78](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  swift_release();
  v30 = 0;
  v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    v30 = MEMORY[0x186DA4658](v45, 0);
  }
  v52 = v31;
  v48 = v30;
  MEMORY[0x1E0C80A78](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v33 = 0;
  v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    v33 = MEMORY[0x186DA4658](v45, 0);
  }
  v49 = v34;
  v51 = v33;
  MEMORY[0x1E0C80A78](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v36 = 0;
  v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    v36 = MEMORY[0x186DA4658](v45);
    v17 = v37;
  }
  v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    v38 = String.lowercased()();
    countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }
  else
  {
    v48 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  if (v49)
  {
    v53 = v51;
    v54 = v49;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v39 = String._capitalized()();
    v14 = (void *)v39._countAndFlagsBits;
    v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_26:
      v40 = String.uppercased()();
      v18 = v40._countAndFlagsBits;
      v19 = v40._object;
      goto LABEL_29;
    }
  }
  else
  {
    v51 = 0;
    v14 = 0;
    v15 = 0;
    if (v17)
      goto LABEL_26;
  }
  v50 = 0;
  v18 = 0;
  v19 = 0;
LABEL_29:
  v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    v42 = v41;
    v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v43 = swift_dynamicCastClass();
    v47 = (uint64_t)v42;
    if (v43)
    {
      v47 = *(_QWORD *)(v43 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v44 = swift_dynamicCastClass();
    if (v44)
    {
      v47 = v44;

    }
    else
    {
      swift_unknownObjectRelease();
      v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  if (v52 != 1)
  {

    v8 = v48;
    v13 = v49;
    v12 = v51;
    v9 = v52;
    v16 = v50;
    goto LABEL_39;
  }
  __break(1u);
}

uint64_t specialized static TermOfAddress.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[27];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = *a2;
  v16 = a2[1];
  v18 = a2[2];
  v17 = a2[3];
  v19 = a2[4];
  v20 = a2[5];
  v21 = a2[6];
  v22 = a2[7];
  v23 = a2[8];
  v24 = a2[9];
  v25 = a2[10];
  v26 = a2[11];
  v27 = a2[12];
  v60[0] = *a1;
  v60[1] = v3;
  v60[2] = v4;
  v60[3] = v5;
  v60[4] = v6;
  v60[5] = v7;
  v60[6] = v8;
  v60[7] = v9;
  v60[8] = v10;
  v60[9] = v11;
  v57 = v13;
  v58 = v12;
  v60[10] = v12;
  v60[11] = v13;
  v60[12] = v14;
  v60[13] = v15;
  v60[14] = v16;
  v60[15] = v18;
  v60[16] = v17;
  v60[17] = v19;
  v60[18] = v20;
  v60[19] = v21;
  v60[20] = v22;
  v60[21] = v23;
  v60[22] = v24;
  v60[23] = v25;
  v60[24] = v26;
  v60[25] = v27;
  switch(v14)
  {
    case 0uLL:
      if (v27)
        goto LABEL_14;
      goto LABEL_11;
    case 1uLL:
      if (v27 != 1)
        goto LABEL_14;
      goto LABEL_11;
    case 2uLL:
      if (v27 != 2)
        goto LABEL_14;
LABEL_11:
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      v31 = 1;
      goto LABEL_15;
    case 3uLL:
      if (v27 != 3)
        goto LABEL_14;
      v31 = 1;
      goto LABEL_15;
    default:
      if (v27 < 4)
      {
LABEL_14:
        v46 = v26;
        v47 = v27;
        v44 = v24;
        v45 = v25;
        v43 = v23;
        v32 = v15;
        v56 = v4;
        v33 = v10;
        v34 = v18;
        v35 = v5;
        v36 = v6;
        v37 = v7;
        v38 = v8;
        v39 = v2;
        v40 = v3;
        outlined copy of TermOfAddress._TermOfAddress(v32, v16, v34, v17, v19, v20, v21, v22, v43, v44, v45, v46, v47);
        outlined copy of TermOfAddress._TermOfAddress(v39, v40, v56, v35, v36, v37, v38, v9, v33, v11, v58, v57, v14);
        v31 = 0;
        goto LABEL_15;
      }
      v55 = v4;
      v50 = v10;
      v53 = v6;
      v54 = v5;
      v51 = v8;
      v52 = v7;
      v48 = v2;
      v49 = v3;
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      outlined copy of TermOfAddress._TermOfAddress(v48, v49, v55, v54, v53, v52, v51, v9, v50, v11, v58, v57, v14);
      v59 = Locale.Language.maximalIdentifier.getter();
      v29 = v28;
      if (v59 == Locale.Language.maximalIdentifier.getter() && v29 == v30)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = 0;
        if ((v42 & 1) == 0)
          goto LABEL_15;
      }
      v31 = specialized static Array<A>.== infix(_:_:)(v14, v27);
LABEL_15:
      outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v60);
      return v31 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress.CodingKeys, &type metadata for TermOfAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress.CodingKeys, &type metadata for TermOfAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress.CodingKeys, &type metadata for TermOfAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress.CodingKeys, &type metadata for TermOfAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalGender, &type metadata for Morphology.GrammaticalGender);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalGender, &type metadata for Morphology.GrammaticalGender);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.GrammaticalGender, &type metadata for Morphology.GrammaticalGender);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun, &type metadata for Morphology.Pronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun, &type metadata for Morphology.Pronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Morphology.Pronoun, &type metadata for Morphology.Pronoun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Morphology.Pronoun]);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of TermOfAddress._TermOfAddress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined copy of Locale.LanguageCode?(result, a2);
    outlined copy of Locale.LanguageCode?(a5, a6);
    outlined copy of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized TermOfAddress.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TermOfAddress.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void specialized static TermOfAddress._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  char v26;
  id v27;
  uint64_t v28;
  int Language;
  uint64_t v30;
  uint64_t v31;
  int Script;
  uint64_t v33;
  uint64_t v34;
  int Country;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[224];
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  outlined consume of TermOfAddress?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_neutral);
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
LABEL_38:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = countAndFlagsBits;
    *(_QWORD *)(a2 + 24) = object;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v16;
    *(_QWORD *)(a2 + 72) = v17;
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v19;
    *(_QWORD *)(a2 + 96) = v20;
    return;
  }
  v21 = objc_msgSend(v4, sel_feminine);
  v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    goto LABEL_38;
  }
  v23 = objc_msgSend(v4, sel_masculine);
  v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 2;
    goto LABEL_38;
  }
  v25 = objc_msgSend(v4, sel_currentUser);
  v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 3;
    goto LABEL_38;
  }
  v27 = objc_msgSend(v5, sel_languageIdentifier);
  v14 = v27;
  if (!v27)
  {
    v48 = 0;
    v49 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v50 = 0;
    v51 = 0;
    v15 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v52 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1E0C80A78](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  swift_release();
  v30 = 0;
  v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    v30 = MEMORY[0x186DA4658](v45, 0);
  }
  v52 = v31;
  v49 = v30;
  MEMORY[0x1E0C80A78](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v33 = 0;
  v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    v33 = MEMORY[0x186DA4658](v45, 0);
  }
  v48 = v34;
  v51 = v33;
  MEMORY[0x1E0C80A78](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v36 = 0;
  v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    v36 = MEMORY[0x186DA4658](v45);
    v17 = v37;
  }
  v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    v38 = String.lowercased()();
    countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }
  else
  {
    v49 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  if (v48)
  {
    v53 = v51;
    v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v39 = String._capitalized()();
    v14 = (void *)v39._countAndFlagsBits;
    v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      v40 = String.uppercased()();
      v18 = v40._countAndFlagsBits;
      v19 = v40._object;
      goto LABEL_28;
    }
  }
  else
  {
    v51 = 0;
    v14 = 0;
    v15 = 0;
    if (v17)
      goto LABEL_25;
  }
  v50 = 0;
  v18 = 0;
  v19 = 0;
LABEL_28:
  v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    v42 = v41;
    v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v43 = swift_dynamicCastClass();
    v47 = (uint64_t)v42;
    if (v43)
    {
      v47 = *(_QWORD *)(v43 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v44 = swift_dynamicCastClass();
    if (v44)
    {
      v47 = v44;

    }
    else
    {
      swift_unknownObjectRelease();
      v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  if (v52 != 1)
  {

    v13 = v48;
    v8 = v49;
    v12 = v51;
    v9 = v52;
    v16 = v50;
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t specialized static TermOfAddress._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  char v26;
  id v27;
  uint64_t v28;
  int Language;
  uint64_t v30;
  uint64_t v31;
  int Script;
  uint64_t v33;
  uint64_t v34;
  int Country;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t result;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[224];
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  outlined consume of TermOfAddress?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v4 = (void *)objc_opt_self();
  v5 = a1;
  v6 = objc_msgSend(v4, sel_neutral);
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
LABEL_38:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = countAndFlagsBits;
    *(_QWORD *)(a2 + 24) = object;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = v16;
    *(_QWORD *)(a2 + 72) = v17;
    *(_QWORD *)(a2 + 80) = v18;
    *(_QWORD *)(a2 + 88) = v19;
    *(_QWORD *)(a2 + 96) = v20;
    return 1;
  }
  v21 = objc_msgSend(v4, sel_feminine);
  v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    goto LABEL_38;
  }
  v23 = objc_msgSend(v4, sel_masculine);
  v24 = static NSObject.== infix(_:_:)();

  if ((v24 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 2;
    goto LABEL_38;
  }
  v25 = objc_msgSend(v4, sel_currentUser);
  v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) != 0)
  {

    v8 = 0;
    v9 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 3;
    goto LABEL_38;
  }
  v27 = objc_msgSend(v5, sel_languageIdentifier);
  v14 = v27;
  if (!v27)
  {
    v48 = 0;
    v49 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v50 = 0;
    v51 = 0;
    v15 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v52 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1E0C80A78](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  swift_release();
  v30 = 0;
  v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    v30 = MEMORY[0x186DA4658](v45, 0);
  }
  v52 = v31;
  v49 = v30;
  MEMORY[0x1E0C80A78](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v33 = 0;
  v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    v33 = MEMORY[0x186DA4658](v45, 0);
  }
  v48 = v34;
  v51 = v33;
  MEMORY[0x1E0C80A78](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v36 = 0;
  v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    v36 = MEMORY[0x186DA4658](v45);
    v17 = v37;
  }
  v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    v38 = String.lowercased()();
    countAndFlagsBits = v38._countAndFlagsBits;
    object = v38._object;
  }
  else
  {
    v49 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  if (v48)
  {
    v53 = v51;
    v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v39 = String._capitalized()();
    v14 = (void *)v39._countAndFlagsBits;
    v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      v40 = String.uppercased()();
      v18 = v40._countAndFlagsBits;
      v19 = v40._object;
      goto LABEL_28;
    }
  }
  else
  {
    v51 = 0;
    v14 = 0;
    v15 = 0;
    if (v17)
      goto LABEL_25;
  }
  v50 = 0;
  v18 = 0;
  v19 = 0;
LABEL_28:
  result = (uint64_t)objc_msgSend(v5, sel_pronouns);
  if (result)
  {
    v42 = (void *)result;
    v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v43 = swift_dynamicCastClass();
    v47 = (uint64_t)v42;
    if (v43)
    {
      v47 = *(_QWORD *)(v43 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v44 = swift_dynamicCastClass();
    if (v44)
    {
      v47 = v44;

    }
    else
    {
      swift_unknownObjectRelease();
      v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  if (v52 != 1)
  {

    v13 = v48;
    v8 = v49;
    v12 = v51;
    v9 = v52;
    v16 = v50;
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TermOfAddress, &type metadata for TermOfAddress);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

uint64_t destroy for TermOfAddress(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 96) >= 4uLL)
  {
    v1 = result;
    if (*(_QWORD *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for TermOfAddress(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a2[12];
  if (v4 >= 4)
  {
    v8 = a2[1];
    if (v8)
    {
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = a2[5];
      if (v10)
        goto LABEL_5;
    }
    else
    {
      v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      v10 = a2[5];
      if (v10)
      {
LABEL_5:
        a1[4] = a2[4];
        a1[5] = v10;
        v11 = a2[7];
        a1[6] = a2[6];
        a1[7] = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12 = a2[9];
        if (v12)
        {
LABEL_6:
          a1[8] = a2[8];
          a1[9] = v12;
          v13 = a2[10];
          v14 = a2[11];
          a1[10] = v13;
          a1[11] = v14;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_9:
        v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }
    v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    v12 = a2[9];
    if (v12)
      goto LABEL_6;
    goto LABEL_9;
  }
  v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

uint64_t assignWithCopy for TermOfAddress(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v4 = *((_QWORD *)a2 + 12);
  if (*(_QWORD *)(a1 + 96) < 4uLL)
  {
    if (v4 < 4)
    {
      v5 = *a2;
      v6 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v5;
      v7 = a2[3];
      v8 = a2[4];
      v9 = a2[5];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      return a1;
    }
    if (*((_QWORD *)a2 + 1))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((_QWORD *)a2 + 5))
        goto LABEL_8;
    }
    else
    {
      v16 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v16;
      if (*((_QWORD *)a2 + 5))
      {
LABEL_8:
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((_QWORD *)a2 + 9))
        {
LABEL_9:
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
          *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_15:
        v18 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v18;
        goto LABEL_16;
      }
    }
    v17 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v17;
    if (*((_QWORD *)a2 + 9))
      goto LABEL_9;
    goto LABEL_15;
  }
  if (v4 >= 4)
  {
    v15 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)(a1 + 8))
    {
      if (v15)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.LanguageCode(a1);
        v19 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
    }
    else if (v15)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v20;
    }
    v21 = (_OWORD *)(a1 + 32);
    v22 = a2 + 2;
    v23 = *((_QWORD *)a2 + 5);
    if (*(_QWORD *)(a1 + 40))
    {
      if (v23)
      {
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.Script(a1 + 32);
        v24 = a2[3];
        *v21 = *v22;
        *(_OWORD *)(a1 + 48) = v24;
      }
    }
    else if (v23)
    {
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v25 = a2[3];
      *v21 = *v22;
      *(_OWORD *)(a1 + 48) = v25;
    }
    v26 = (_OWORD *)(a1 + 64);
    v27 = a2 + 4;
    v28 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 72))
    {
      if (v28)
      {
        *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.Region(a1 + 64);
        v29 = a2[5];
        *v26 = *v27;
        *(_OWORD *)(a1 + 80) = v29;
      }
    }
    else if (v28)
    {
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = a2[5];
      *v26 = *v27;
      *(_OWORD *)(a1 + 80) = v30;
    }
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of (Locale.Language, [Morphology.Pronoun])(a1);
    v11 = a2[1];
    v10 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    v13 = a2[4];
    v12 = a2[5];
    v14 = a2[3];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 48) = v14;
  }
  return a1;
}

uint64_t outlined destroy of Locale.LanguageCode(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Script(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.Region(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of (Locale.Language, [Morphology.Pronoun])(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale.Language, [Morphology.Pronoun]));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

_QWORD *assignWithTake for TermOfAddress(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (a1[12] < 4uLL)
    goto LABEL_4;
  v4 = a2[12];
  if (v4 >= 4)
  {
    if (a1[1])
    {
      v8 = a2[1];
      if (v8)
      {
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRelease();
        v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Locale.LanguageCode((uint64_t)a1);
    }
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v10;
LABEL_10:
    if (a1[5])
    {
      v11 = a2[5];
      if (v11)
      {
        a1[4] = a2[4];
        a1[5] = v11;
        swift_bridgeObjectRelease();
        v12 = a2[7];
        a1[6] = a2[6];
        a1[7] = v12;
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
    }
    v13 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v13;
LABEL_15:
    if (a1[9])
    {
      v14 = a2[9];
      if (v14)
      {
        a1[8] = a2[8];
        a1[9] = v14;
        swift_bridgeObjectRelease();
        v15 = a2[11];
        a1[10] = a2[10];
        a1[11] = v15;
        swift_bridgeObjectRelease();
LABEL_20:
        a1[12] = v4;
        swift_bridgeObjectRelease();
        return a1;
      }
      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
    }
    v16 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v16;
    goto LABEL_20;
  }
  outlined destroy of (Locale.Language, [Morphology.Pronoun])((uint64_t)a1);
LABEL_4:
  v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFB && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 4;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TermOfAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483644;
    if (a3 > 0x7FFFFFFB)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFB)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 96) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress()
{
  return &type metadata for TermOfAddress;
}

uint64_t destroy for TermOfAddress._TermOfAddress(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 96) >= 0xFFFFFFFFuLL)
  {
    v1 = result;
    if (*(_QWORD *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for TermOfAddress._TermOfAddress(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a2[12];
  if (v4 >= 0xFFFFFFFF)
  {
    v5 = a2[1];
    if (v5)
    {
      *a1 = *a2;
      a1[1] = v5;
      v6 = a2[3];
      a1[2] = a2[2];
      a1[3] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = a2[5];
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      v7 = a2[5];
      if (v7)
      {
LABEL_4:
        a1[4] = a2[4];
        a1[5] = v7;
        v8 = a2[7];
        a1[6] = a2[6];
        a1[7] = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = a2[9];
        if (v9)
        {
LABEL_5:
          a1[8] = a2[8];
          a1[9] = v9;
          v10 = a2[10];
          v11 = a2[11];
          a1[10] = v10;
          a1[11] = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_9:
        v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }
    v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    v9 = a2[9];
    if (v9)
      goto LABEL_5;
    goto LABEL_9;
  }
  v12 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v12;
  a1[12] = a2[12];
  v13 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v14;
  return a1;
}

uint64_t assignWithCopy for TermOfAddress._TermOfAddress(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v4 = *((_QWORD *)a2 + 12);
  if (*(_QWORD *)(a1 + 96) < 0xFFFFFFFFuLL)
  {
    if (v4 < 0xFFFFFFFF)
    {
LABEL_18:
      v7 = *a2;
      v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      v9 = a2[3];
      v10 = a2[4];
      v11 = a2[5];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      return a1;
    }
    if (*((_QWORD *)a2 + 1))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((_QWORD *)a2 + 5))
        goto LABEL_9;
    }
    else
    {
      v12 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v12;
      if (*((_QWORD *)a2 + 5))
      {
LABEL_9:
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((_QWORD *)a2 + 9))
        {
LABEL_10:
          *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
          *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
          *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
          *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_24:
          *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_23:
        v14 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v14;
        goto LABEL_24;
      }
    }
    v13 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v13;
    if (*((_QWORD *)a2 + 9))
      goto LABEL_10;
    goto LABEL_23;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v6 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      v15 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v15;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v16;
  }
  v17 = (_OWORD *)(a1 + 32);
  v18 = a2 + 2;
  v19 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      v20 = a2[3];
      *v17 = *v18;
      *(_OWORD *)(a1 + 48) = v20;
    }
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = a2[3];
    *v17 = *v18;
    *(_OWORD *)(a1 + 48) = v21;
  }
  v22 = (_OWORD *)(a1 + 64);
  v23 = a2 + 4;
  v24 = *((_QWORD *)a2 + 9);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v24)
    {
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      v25 = a2[5];
      *v22 = *v23;
      *(_OWORD *)(a1 + 80) = v25;
    }
  }
  else if (v24)
  {
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = a2[5];
    *v22 = *v23;
    *(_OWORD *)(a1 + 80) = v26;
  }
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TermOfAddress._TermOfAddress(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (a1[12] >= 0xFFFFFFFFuLL)
  {
    v4 = a2[12];
    v5 = a1[1];
    if (v4 >= 0xFFFFFFFF)
    {
      if (v5)
      {
        v6 = a2[1];
        if (v6)
        {
          *a1 = *a2;
          a1[1] = v6;
          swift_bridgeObjectRelease();
          v7 = a2[3];
          a1[2] = a2[2];
          a1[3] = v7;
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        outlined destroy of Locale.LanguageCode((uint64_t)a1);
      }
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v11;
LABEL_16:
      if (a1[5])
      {
        v12 = a2[5];
        if (v12)
        {
          a1[4] = a2[4];
          a1[5] = v12;
          swift_bridgeObjectRelease();
          v13 = a2[7];
          a1[6] = a2[6];
          a1[7] = v13;
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      }
      v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v14;
LABEL_21:
      if (a1[9])
      {
        v15 = a2[9];
        if (v15)
        {
          a1[8] = a2[8];
          a1[9] = v15;
          swift_bridgeObjectRelease();
          v16 = a2[11];
          a1[10] = a2[10];
          a1[11] = v16;
          swift_bridgeObjectRelease();
LABEL_26:
          a1[12] = v4;
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      }
      v17 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v17;
      goto LABEL_26;
    }
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (a1[5])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (a1[9])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v8 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v8;
  a1[12] = a2[12];
  v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress._TermOfAddress(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TermOfAddress._TermOfAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 96) = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for TermOfAddress._TermOfAddress(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for TermOfAddress._TermOfAddress(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 96) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress._TermOfAddress()
{
  return &type metadata for TermOfAddress._TermOfAddress;
}

uint64_t storeEnumTagSinglePayload for TermOfAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1819DDD80 + 4 * byte_18205FDB2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1819DDDB4 + 4 * byte_18205FDAD[v4]))();
}

uint64_t sub_1819DDDB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1819DDDBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1819DDDC4);
  return result;
}

uint64_t sub_1819DDDD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1819DDDD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1819DDDDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1819DDDE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress.CodingKeys()
{
  return &type metadata for TermOfAddress.CodingKeys;
}

uint64_t outlined consume of TermOfAddress._TermOfAddress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined consume of Locale.LanguageCode?(result, a2);
    outlined consume of Locale.LanguageCode?(a5, a6);
    outlined consume of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of TermOfAddress?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4)
    return outlined consume of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 200);
  outlined consume of TermOfAddress._TermOfAddress(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  outlined consume of TermOfAddress._TermOfAddress(v2, v3, v4, v5, v6, v7, v8, v9, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10);
  return a1;
}

uint64_t KeyPathComparator.keyPath.getter()
{
  return swift_retain();
}

uint64_t KeyPathComparator.order.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  uint64_t v8[4];

  v1 = v0 + 1;
  v2 = (uint64_t (*)(uint64_t *))v0[10];
  v3 = v0[4];
  v4 = __swift_project_boxed_opaque_existential_1(v1, v3);
  v8[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v4, v3);
  v6 = v2(v8) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t KeyPathComparator.order.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v5[2];

  v2 = a1 & 1;
  v3 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v1 + 64);
  swift_retain();
  v3(v5, v1 + 8, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v1 + 8);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v5, v1 + 8);
}

void (*KeyPathComparator.order.modify(uint64_t **a1))(__int128 **a1)
{
  _QWORD *v1;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;

  v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  v4 = v1 + 1;
  v5 = (uint64_t (*)(uint64_t *))v1[10];
  v6 = v1[4];
  v7 = __swift_project_boxed_opaque_existential_1(v4, v6);
  v3[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  LOBYTE(a1) = v5(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((_BYTE *)v3 + 48) = (_BYTE)a1;
  return KeyPathComparator.order.modify;
}

void KeyPathComparator.order.modify(__int128 **a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = *((_QWORD *)*a1 + 5);
  v3 = *((unsigned __int8 *)*a1 + 48);
  v4 = v2 + 8;
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 64);
  swift_retain();
  v5(v4, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v4);
  free(v1);
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v7 = a2;
  v30 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v12;
  v14 = (uint64_t *)(v13 + *MEMORY[0x1E0DEE2A8]);
  v15 = *v14;
  v16 = v14[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v17 = v31;
  *(_QWORD *)a5 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v7, a3);
  v18 = *(_QWORD *)(a4 + 8);
  *((_QWORD *)&v32 + 1) = a3;
  *(_QWORD *)&v33 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v11, a3);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *((_QWORD *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)&v34 = v20;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = a4;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(v22 + 24) = v21;
  *((_QWORD *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(_QWORD *)&v35 = v22;
  v23 = swift_allocObject();
  v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = a4;
  *((_QWORD *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v7) = v27;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v30, a3);
  swift_release();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v15;
  *(_QWORD *)(result + 24) = v16;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = v26;
  *(_BYTE *)(result + 56) = v7 & 1;
  *(_QWORD *)(result + 64) = v17;
  *(_QWORD *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(_QWORD *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;

  v30 = a4;
  v9 = *a1;
  v10 = type metadata accessor for OptionalComparator(0, a3, a4, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - v12;
  v36 = a1;
  v14 = (uint64_t *)(v9 + *MEMORY[0x1E0DEE2A8]);
  v15 = v14[1];
  v29 = *v14;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v16 = v31;
  *(_QWORD *)a5 = v31;
  v17 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a2, a3);
  *((_QWORD *)&v32 + 1) = v10;
  *(_QWORD *)&v33 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v10);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v13, v10);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v10;
  v20 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v10);
  *(_QWORD *)(v19 + 24) = v20;
  *((_QWORD *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)&v34 = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v10;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(v22 + 24) = v21;
  *((_QWORD *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(_QWORD *)&v35 = v22;
  v23 = swift_allocObject();
  v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *(_QWORD *)(v23 + 16) = v10;
  *(_QWORD *)(v23 + 24) = v20;
  *((_QWORD *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v10) = v27;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a3);
  swift_release();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v29;
  *(_QWORD *)(result + 24) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = v30;
  *(_QWORD *)(result + 48) = v26;
  *(_BYTE *)(result + 56) = v10 & 1;
  *(_QWORD *)(result + 64) = v16;
  *(_QWORD *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(_QWORD *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(__int128 *__return_ptr, uint64_t, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v8 = a2;
  v34 = a2;
  v35 = a3 & 1;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v13;
  v15 = (uint64_t *)(v14 + *MEMORY[0x1E0DEE2A8]);
  v16 = *v15;
  v33 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v17 = v36;
  *(_QWORD *)a6 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v8, a4);
  v18 = *(_QWORD *)(a5 + 8);
  *((_QWORD *)&v37 + 1) = a4;
  *(_QWORD *)&v38 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v12, a4);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = a5;
  *((_QWORD *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)&v39 = v20;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a4;
  *(_QWORD *)(v21 + 24) = a5;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(v22 + 24) = v21;
  *((_QWORD *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(_QWORD *)&v40 = v22;
  v23 = swift_allocObject();
  v24 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v24;
  v25 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  *((_QWORD *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a6 + 88) = v23;
  *(_OWORD *)(a6 + 24) = v25;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v8) = v27;
  v28 = swift_allocObject();
  v29 = v33;
  *(_QWORD *)(v28 + 16) = v16;
  *(_QWORD *)(v28 + 24) = v29;
  *(_QWORD *)(v28 + 32) = a4;
  *(_QWORD *)(v28 + 40) = a5;
  *(_QWORD *)(v28 + 48) = v26;
  *(_BYTE *)(v28 + 56) = v8 & 1;
  *(_QWORD *)(v28 + 64) = v17;
  *(_QWORD *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(_QWORD *)(a6 + 104) = v28;
  v30 = *(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v34, a4);
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(__int128 *__return_ptr, uint64_t, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;

  v34 = a5;
  v32 = a2;
  v35 = a3 & 1;
  v10 = *a1;
  v11 = type metadata accessor for OptionalComparator(0, a4, a5, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - v13;
  v41 = a1;
  v15 = (uint64_t *)(v10 + *MEMORY[0x1E0DEE2A8]);
  v17 = *v15;
  v16 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v18 = v36;
  *(_QWORD *)a6 = v36;
  v33 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v14, a2, a4);
  *((_QWORD *)&v37 + 1) = v11;
  *(_QWORD *)&v38 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v11);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v14, v11);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v11;
  v21 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v11);
  *(_QWORD *)(v20 + 24) = v21;
  *((_QWORD *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)&v39 = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v11;
  *(_QWORD *)(v22 + 24) = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(v23 + 24) = v22;
  *((_QWORD *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(_QWORD *)&v40 = v23;
  v24 = swift_allocObject();
  v25 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v25;
  v26 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *(_QWORD *)(v24 + 16) = v11;
  *(_QWORD *)(v24 + 24) = v21;
  *((_QWORD *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a6 + 88) = v24;
  *(_OWORD *)(a6 + 24) = v26;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  v27 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v22) = v28;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v17;
  *(_QWORD *)(v29 + 24) = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v29 + 32) = a4;
  *(_QWORD *)(v29 + 40) = v34;
  *(_QWORD *)(v29 + 48) = v27;
  *(_BYTE *)(v29 + 56) = v22 & 1;
  *(_QWORD *)(v29 + 64) = v18;
  *(_QWORD *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(_QWORD *)(a6 + 104) = v29;
  v30 = *(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, a4);
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a5[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  if ((a3 & 1) != 0)
    return swift_getAtKeyPath();
  else
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1 + a2, a4);
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;

  v8 = type metadata accessor for Optional();
  a4[3] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  if ((a3 & 1) != 0)
    return swift_getAtKeyPath();
  else
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, a1 + a2, v8);
}

uint64_t KeyPathComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void (*v4)(_QWORD *__return_ptr);
  uint64_t (*v5)(uint64_t *, _QWORD *, _QWORD *);
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v11[4];
  _QWORD v12[4];
  _QWORD v13[4];

  v4 = (void (*)(_QWORD *__return_ptr))v2[12];
  v4(v13);
  ((void (*)(_QWORD *__return_ptr, uint64_t))v4)(v12, a2);
  v5 = (uint64_t (*)(uint64_t *, _QWORD *, _QWORD *))v2[6];
  v6 = v2[4];
  v7 = __swift_project_boxed_opaque_existential_1(v2 + 1, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  v9 = v5(v11, v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v9;
}

uint64_t static KeyPathComparator.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  void (*v18)(uint64_t *, uint64_t);
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  _BYTE v23[8];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for AnyKeyPath();
  v6 = MEMORY[0x186DA51E0](*a1, *a2);
  v9 = type metadata accessor for KeyPathComparator(0, a3, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t *, _QWORD *, uint64_t))(v10 + 16);
  v11((uint64_t *)v23, a1, v9);
  v11(&v20, a2, v9);
  if ((v6 & 1) != 0)
  {
    v12 = v25;
    v13 = v26;
    v14 = __swift_project_boxed_opaque_existential_1(v24, v25);
    v15 = v22;
    v16 = __swift_project_boxed_opaque_existential_1(v21, v22);
    v17 = compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)((uint64_t)v14, (uint64_t)v16, v12, v15, *(_QWORD *)(v13 + 8));
  }
  else
  {
    v17 = 0;
  }
  v18 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
  v18(&v20, v9);
  v18((uint64_t *)v23, v9);
  return v17 & 1;
}

uint64_t KeyPathComparator.hash(into:)()
{
  uint64_t v0;

  type metadata accessor for PartialKeyPath();
  dispatch thunk of Hashable.hash(into:)();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 32));
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int KeyPathComparator.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  type metadata accessor for PartialKeyPath();
  dispatch thunk of Hashable.hash(into:)();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 32));
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance KeyPathComparator<A>(char a1)
{
  return KeyPathComparator.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>(uint64_t ***a1))(_QWORD *a1)
{
  uint64_t **v2;

  v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)KeyPathComparator.order.modify(v2);
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

void protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyPathComparator<A>()
{
  Hasher.init(_seed:)();
  KeyPathComparator.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyPathComparator<A>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return static KeyPathComparator.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t specialized closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56[32];
  char v57[32];
  unint64_t v58;
  char v59;
  unsigned __int8 v60;
  char v61[40];

  outlined init with copy of Any(a1, (uint64_t)v61);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v57);
  swift_dynamicCast();
  outlined init with copy of Any(a3, (uint64_t)v56);
  swift_dynamicCast();
  v5 = v58;
  v6 = v60;
  if (v59 != 1)
  {
    swift_bridgeObjectRetain();
    v19 = Substring.init<A>(_:)();
    v21 = v20;
    v23 = v22;
    v54 = v24;
    swift_bridgeObjectRetain();
    v25 = Substring.init<A>(_:)();
    v29 = v26;
    v30 = v27;
    v31 = v28;
    if (!v5)
    {
      if (v23 == v27 && v54 == v28 && v19 >> 16 == v25 >> 16 && v21 >> 16 == v26 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v34 = 1;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v6)
            v18 = 1;
          else
            v18 = -1;
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v18;
        }
        v44 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
        {
LABEL_49:
          v45 = 1;
          if (v34 == 1)
            v46 = -1;
          else
            v46 = v34;
          if (v34 != -1)
            v45 = v46;
          if ((v6 & 1) != 0)
            v18 = v45;
          else
            v18 = v34;
          goto LABEL_57;
        }
      }
      v34 = 0;
      goto LABEL_49;
    }
    v51 = v25;
    v53 = v19;
    if ((v5 & 2) != 0)
    {
      v50 = v26;
      v35 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = v23;
      v33 = v19;
      v29 = v50;
      v32 = v21;
      v34 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v35, v50, v30, v31, (v5 >> 8) & 1, (v5 >> 7) & 1, v5 & 1, (v5 >> 6) & 1, (v5 & 0x200) != 0, v53, v21, v48, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v34)
        goto LABEL_13;
    }
    else
    {
      v47 = v23;
      v32 = v21;
      v33 = v53;
      v34 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v25, v26, v27, v28, (v5 >> 8) & 1, (v5 >> 7) & 1, v5 & 1, (v5 >> 6) & 1, (v5 & 0x200) != 0, v53, v21, v47, v54);
      if (v34)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
    }
    if ((v5 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = 0;
      goto LABEL_49;
    }
    v55 = v33;
    v36 = v33;
    v37 = v32 >> 14;
    v38 = v36 >> 14;
    if (v36 >> 14 >= v32 >> 14 || v29 >> 14 <= v51 >> 14)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38 == v37)
      {
        if ((v51 ^ v29) >> 14)
          v34 = -1;
        else
          v34 = 0;
      }
      else
      {
        v34 = 1;
      }
      goto LABEL_49;
    }
    v49 = v29 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = Substring.UnicodeScalarView.subscript.getter();
    v40 = Substring.UnicodeScalarView.subscript.getter();
    if (v39 == v40)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      v38 = v55 >> 14;
      if (v55 >> 14 >= v37 || v49 <= v51 >> 14)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      v39 = Substring.UnicodeScalarView.subscript.getter();
      v40 = Substring.UnicodeScalarView.subscript.getter();
      if (v39 == v40)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          v38 = v55 >> 14;
          v37 = v32 >> 14;
          if (v55 >> 14 >= v32 >> 14 || v49 <= v51 >> 14)
            goto LABEL_43;
          v41 = Substring.UnicodeScalarView.subscript.getter();
          v42 = Substring.UnicodeScalarView.subscript.getter();
          if (v41 != v42)
          {
            v43 = v42;
            v39 = v41;
            goto LABEL_41;
          }
        }
      }
    }
    v43 = v40;
LABEL_41:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v39 >= v43)
      v34 = v43 < v39;
    else
      v34 = -1;
    goto LABEL_49;
  }
  v52 = v60;
  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v8 = v7;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v9 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v10 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  v13 = v12 - result;
  if (!__OFSUB__(v12, result))
  {
    v14 = result;
    ObjectType = swift_getObjectType();
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 496);
    swift_unknownObjectRetain();
    v17 = (void *)v16(ObjectType, v8);
    swift_unknownObjectRelease();
    v18 = (uint64_t)objc_msgSend(v9, sel_compare_options_range_locale_, v10, v5, v14, v13, v17);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v52)
    {
      if (v18 == -1)
      {
        v18 = 1;
      }
      else if (v18 == 1)
      {
        v18 = -1;
      }
    }
    goto LABEL_57;
  }
  __break(1u);
  return result;
}

{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;
  _BYTE v53[32];
  unint64_t v54;
  char v55;
  unsigned __int8 v56;
  _BYTE v57[40];

  outlined init with copy of Any(a1, (uint64_t)v57);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v53);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  swift_dynamicCast();
  outlined init with copy of Any(a3, (uint64_t)v51);
  swift_dynamicCast();
  v5 = v56;
  if (!v52)
  {
    v20 = 1;
    if (!v56)
      v20 = -1;
    if (v50)
      v19 = v20;
    else
      v19 = 0;
    goto LABEL_51;
  }
  if (!v50)
  {
    if (v56)
      v19 = -1;
    else
      v19 = 1;
    goto LABEL_51;
  }
  v6 = v54;
  if ((v55 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v21 = Substring.init<A>(_:)();
    v23 = v22;
    v25 = v24;
    v46 = v26;
    swift_bridgeObjectRetain();
    v27 = Substring.init<A>(_:)();
    v31 = v28;
    v32 = v30;
    if (!v6)
    {
      if (v25 == v29 && v46 == v30 && v21 >> 16 == v27 >> 16 && v23 >> 16 == v28 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v19 = 1;
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19 = -1;
          goto LABEL_47;
        }
        v42 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
        {
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v5)
            goto LABEL_51;
          if (v19 == -1)
            goto LABEL_9;
          goto LABEL_49;
        }
      }
      v19 = 0;
      goto LABEL_47;
    }
    v43 = v27;
    v44 = v23;
    if ((v6 & 2) != 0)
    {
      v33 = v27;
      v34 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v33, v31, v34, v32, (v6 >> 8) & 1, (v6 >> 7) & 1, v6 & 1, (v6 >> 6) & 1, (v6 & 0x200) != 0, v21, v23, v25, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
        goto LABEL_21;
    }
    else
    {
      v19 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v27, v28, v29, v30, (v6 >> 8) & 1, (v6 >> 7) & 1, v6 & 1, (v6 >> 6) & 1, (v6 & 0x200) != 0, v21, v23, v25, v46);
      if (v19)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
    }
    if ((v6 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = 0;
      goto LABEL_47;
    }
    v35 = v23 >> 14;
    v36 = v21 >> 14;
    if (v21 >> 14 >= v44 >> 14 || v31 >> 14 <= v43 >> 14)
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36 == v35)
      {
        if ((v43 ^ v31) >> 14)
          v19 = -1;
        else
          v19 = 0;
      }
      else
      {
        v19 = 1;
      }
      goto LABEL_47;
    }
    v48 = v31 >> 14;
    v49 = v44 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = Substring.UnicodeScalarView.subscript.getter();
    v38 = Substring.UnicodeScalarView.subscript.getter();
    if (v37 != v38)
    {
      v41 = v38;
      goto LABEL_53;
    }
    Substring.UnicodeScalarView.formIndex(after:)();
    Substring.UnicodeScalarView.formIndex(after:)();
    v36 = v21 >> 14;
    v35 = v44 >> 14;
    if (v21 >> 14 < v49 && v48 > v43 >> 14)
    {
      v39 = Substring.UnicodeScalarView.subscript.getter();
      v40 = Substring.UnicodeScalarView.subscript.getter();
      if (v39 != v40)
      {
LABEL_62:
        v41 = v40;
        v37 = v39;
LABEL_53:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        if (v37 >= v41)
          v19 = v41 < v37;
        else
          v19 = -1;
        goto LABEL_47;
      }
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      v36 = v21 >> 14;
      v35 = v44 >> 14;
      if (v21 >> 14 < v49 && v48 > v43 >> 14)
      {
        v39 = Substring.UnicodeScalarView.subscript.getter();
        v40 = Substring.UnicodeScalarView.subscript.getter();
        if (v39 == v40)
        {
          while (1)
          {
            Substring.UnicodeScalarView.formIndex(after:)();
            Substring.UnicodeScalarView.formIndex(after:)();
            v36 = v21 >> 14;
            v35 = v44 >> 14;
            if (v21 >> 14 >= v49 || v48 <= v43 >> 14)
              goto LABEL_56;
            v37 = Substring.UnicodeScalarView.subscript.getter();
            v41 = Substring.UnicodeScalarView.subscript.getter();
            if (v37 != v41)
              goto LABEL_53;
          }
        }
        goto LABEL_62;
      }
    }
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v47 = v56;
  v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v45 = v6;
  LocaleCache.current.getter();
  v9 = v8;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v10 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  v14 = v13 - result;
  if (!__OFSUB__(v13, result))
  {
    v15 = result;
    ObjectType = swift_getObjectType();
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 496);
    swift_unknownObjectRetain();
    v18 = (void *)v17(ObjectType, v9);
    swift_unknownObjectRelease();
    v19 = (uint64_t)objc_msgSend(v10, sel_compare_options_range_locale_, v11, v45, v15, v14, v18);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v47)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if (v19 == -1)
    {
LABEL_9:
      v19 = 1;
      goto LABEL_51;
    }
LABEL_49:
    if (v19 == 1)
      v19 = -1;
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

uint64_t sub_1819E0410()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in AnySortComparator.init<A>(_:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1819E0428()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2)
{
  uint64_t v2;

  return closure #2 in AnySortComparator.init<A>(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = MEMORY[0x1E0DEC1A0];
  v5 = a2 & 1;
  a3[3] = MEMORY[0x1E0DEC198];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)a1, (uint64_t)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  v14 = v5;
  *(_QWORD *)(a1 + 24) = &type metadata for String.StandardComparator;
  *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  v6 = v12;
  v7 = v13;
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v5;
  v9 = v6;
  v10 = v7;
  v11 = v5;
  return AnyHashable.init<A>(_:)();
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = MEMORY[0x1E0DEC1A0];
  v5 = a2 & 1;
  a3[3] = MEMORY[0x1E0DEC198];
  a3[4] = v4;
  *a3 = swift_allocObject();
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)a1, (uint64_t)&v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  v15 = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
  v7 = v13;
  v8 = v14;
  *(_QWORD *)a1 = v13;
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v5;
  v10 = v7;
  v11 = v8;
  v12 = v5;
  return AnyHashable.init<A>(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2 & 1;
  v7 = MEMORY[0x1E0DEC1A0];
  a4[3] = MEMORY[0x1E0DEC198];
  a4[4] = v7;
  *a4 = swift_allocObject();
  return a3(a1, v6);
}

uint64_t specialized closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  unsigned __int8 v2;
  _BYTE v3[32];

  outlined init with copy of Any(a1, (uint64_t)v3);
  swift_dynamicCast();
  return v2;
}

{
  unsigned __int8 v2;
  _BYTE v3[32];

  outlined init with copy of Any(a1, (uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  return v2;
}

uint64_t sub_1819E072C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in AnySortComparator.init<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1819E0744()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in KeyPathComparator.init<A>(_:order:));
}

uint64_t sub_1819E0774()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0784()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0794()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1819E07B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>;
  if (!lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>);
  }
  return result;
}

uint64_t sub_1819E0838()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0848()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0858()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in KeyPathComparator.init<A>(_:order:));
}

uint64_t sub_1819E0874()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0884()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0894()
{
  return swift_deallocObject();
}

uint64_t sub_1819E08B0()
{
  return swift_deallocObject();
}

uint64_t sub_1819E08C0()
{
  return swift_deallocObject();
}

uint64_t sub_1819E08D0()
{
  return swift_deallocObject();
}

uint64_t sub_1819E08E0()
{
  return swift_deallocObject();
}

uint64_t sub_1819E08F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v5 = a2 & 1;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  v7 = MEMORY[0x1E0DEC1A0];
  a3[3] = MEMORY[0x1E0DEC198];
  a3[4] = v7;
  *a3 = swift_allocObject();
  return v6(a1, v5);
}

uint64_t sub_1819E0974()
{
  return swift_deallocObject();
}

uint64_t sub_1819E0984()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1819E09D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = KeyPathComparator.order.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1819E09FC(char *a1)
{
  return KeyPathComparator.order.setter(*a1);
}

uint64_t sub_1819E0A20()
{
  return 8;
}

_QWORD *sub_1819E0A2C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeWithCopy for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for KeyPathComparator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  v5 = a2[9];
  a1[8] = a2[8];
  a1[9] = v5;
  swift_retain();
  swift_release();
  v6 = a2[11];
  a1[10] = a2[10];
  a1[11] = v6;
  swift_retain();
  swift_release();
  v7 = a2[13];
  a1[12] = a2[12];
  a1[13] = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t sub_1819E0DB0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

id NSAttributedString.init(contentsOf:options:baseURL:)(void **a1, char *a2, void **a3)
{
  void *v3;
  char v4;
  char v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v18[3];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = (void *)*((_QWORD *)a2 + 1);
  v8 = (void *)*((_QWORD *)a2 + 2);
  v9 = a2[24];
  v10 = *a3;
  swift_release();
  swift_release();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v18[0]) = v4;
  BYTE1(v18[0]) = v5;
  BYTE2(v18[0]) = v6;
  v18[1] = v7;
  v18[2] = v8;
  v19 = v9;
  v11 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v18);
  if (v10)
  {
    v12 = v10;
    outlined consume of URL?(v10);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v18[0] = 0;
  v14 = objc_msgSend(v13, sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_, v3, v11, v12, v18);

  if (v14)
  {
    v15 = v18[0];
  }
  else
  {
    if (v18[0])
    {
      v18[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v16 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v14;
}

void NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_1819E1020()
{
  unint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  char v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v17 = v2;
  LOWORD(v18) = v0;
  BYTE2(v18) = BYTE2(v0);
  BYTE3(v18) = BYTE3(v0);
  BYTE4(v18) = BYTE4(v0);
  BYTE5(v18) = BYTE5(v0);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v17, BYTE6(v0));
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v17) = v5;
  BYTE1(v17) = v6;
  BYTE2(v17) = v3;
  v18 = v1;
  v19 = v16;
  v20 = v15;
  v8 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v17);
  if (v4)
  {
    v9 = v4;
    outlined consume of URL?(v4);
  }
  else
  {
    v9 = 0;
  }
  v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v17 = 0;
  v11 = objc_msgSend(v10, sel_initWithMarkdown_options_baseURL_error_, v7, v8, v9, &v17);

  if (v11)
  {
    v12 = v17;
    outlined consume of Data._Representation((uint64_t)v2, v0);
  }
  else
  {
    if (v17)
    {
      v17;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v13 = (id)_nilObjCError;
    }
    swift_willThrow();
    outlined consume of Data._Representation((uint64_t)v2, v0);
  }
  return v11;
}

id NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, uint64_t a2, char *a3, void **a4)
{
  char v4;
  char v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v19[3];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  v7 = (void *)*((_QWORD *)a3 + 1);
  v8 = (void *)*((_QWORD *)a3 + 2);
  v9 = a3[24];
  v10 = *a4;
  v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v19[0]) = v4;
  BYTE1(v19[0]) = v5;
  BYTE2(v19[0]) = v6;
  v19[1] = v7;
  v19[2] = v8;
  v20 = v9;
  v12 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v19);
  if (v10)
  {
    v13 = v10;
    outlined consume of URL?(v10);
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v19[0] = 0;
  v15 = objc_msgSend(v14, sel_initWithMarkdownString_options_baseURL_error_, v11, v12, v13, v19);
  swift_unknownObjectRelease();

  if (v15)
  {
    v16 = v19[0];
  }
  else
  {
    if (v19[0])
    {
      v19[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v17 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v15;
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[2];
  char *v34;

  v32 = a1;
  v4 = a2[5];
  v30 = a2[3];
  v31 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v27 - v6;
  v7 = a2[4];
  v8 = a2[2];
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(uint64_t **)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = *v32;
  v32 = v2;
  v33[0] = v14;
  v15 = v34;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v7 + 16))(v33, v8, v7, v11);
  if (!v15)
  {
    v34 = v13;
    v16 = v10;
    v18 = AssociatedTypeWitness;
    v17 = (uint64_t)v29;
    v33[0] = v14;
    (*(void (**)(_QWORD *, uint64_t))(v31 + 16))(v33, v30);
    v32 = v16;
    if (one-time initialization token for cache != -1)
      swift_once();
    v33[0] = static LocaleCache.cache;
    v33[0] = LocaleCache.current.getter();
    v33[1] = v20;
    v25 = a2[6];
    v26 = (void *)a2[7];
    v21 = v9;
    v22 = v9;
    v23 = v34;
    StringProtocol.range<A>(of:options:range:locale:)(v17, 0x81uLL, 0, 0, 1, (uint64_t)v33, v21, v18, v25, v26);
    LOBYTE(v2) = (v24 & 1) == 0;
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v17, v18);
    ((void (*)(char *, uint64_t))v32[1])(v23, v22);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter(a1, 52, 0xD000000000000026, (void *)0x8000000182304AC0);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, a3, a4, 32, 0xD00000000000001BLL, (void *)0x8000000182304AF0);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, _QWORD *, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v36 = a5;
  v37 = a4;
  v40 = a3;
  v35 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v39 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v13;
  v42[0] = v13;
  v42[1] = v14;
  v42[2] = v15;
  v43 = v16;
  v44 = v17;
  v45 = v18;
  v20 = v19(0, v42, v11);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v32 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v24 = (uint64_t)v46;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v24)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v32 = v21;
  v33 = v20;
  v46 = a1;
  v34 = v23;
  v25 = a2;
  v26 = v38;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
  v27 = v39;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v28 = v34;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v27, v41);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v29 = v33;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v28[*(int *)(v33 + 68)], v26, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  v30 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v36, v28, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v28, v29);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.StringLocalizedStandardContains<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.StringLocalizedCompare.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.StringLocalizedCompare.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(_QWORD, _QWORD *))
{
  uint64_t v18;
  _QWORD v20[6];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  v18 = a10(0, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a9 + *(int *)(v18 + 68), a2, a4);
}

id PredicateExpressions.StringLocalizedCompare.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  id v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2[5];
  v28 = a2[3];
  v29 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v24 - v7;
  v8 = a2[4];
  v9 = a2[2];
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v24 - v13;
  v15 = *a1;
  v32 = v15;
  v16 = v31;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v32, v9, v8, v12);
  if (!v16)
  {
    v25 = v6;
    v26 = v14;
    v31 = v11;
    v17 = AssociatedTypeWitness;
    v32 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v29 + 16))(&v32, v28);
    v19 = v10;
    v20 = v26;
    StringProtocol._ephemeralString.getter();
    v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v22 = v30;
    StringProtocol._ephemeralString.getter();
    v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v21, sel_localizedCompare_, v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v19);
  }
  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id result;

  result = PredicateExpressions.StringLocalizedCompare.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t static PredicateExpressions.build_localizedCompare<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(_QWORD, _QWORD *))
{
  uint64_t v18;
  _QWORD v20[6];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  v18 = a10(0, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a9 + *(int *)(v18 + 68), a2, a4);
}

uint64_t PredicateExpressions.StringLocalizedCompare.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter(a1, 43, 0xD00000000000001DLL, (void *)0x8000000182304B10);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x3A726568746F202CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, a3, a4, 23, 0xD000000000000012, (void *)0x8000000182304B30);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  _StringGuts.grow(_:)(a5);
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, *(_QWORD *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = a6;
  v14._object = a7;
  String.append(_:)(v14);
  v15._countAndFlagsBits = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a1, *(_QWORD *)(a2 + 24), a4);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v13;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedCompare<>.debugString(state:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.StringLocalizedCompare<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8), a6, a2[5], *(_QWORD *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(_QWORD *a1)
{
  return PredicateExpressions.StringLocalizedCompare<>.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedStandardContains<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringLocalizedCompare<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[4];
  _QWORD v15[4];

  v8 = a3[1];
  v10 = *(_QWORD *)(*a3 + 24);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v15[0] = *(_QWORD *)(*a3 + 16);
  v9 = v15[0];
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](a4, a2, v15);
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v11;
  v14[3] = v12;
  result = MEMORY[0x186DA9D64](a5, a2, v14);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.StringLocalizedStandardContains(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1819E2698 + 4 * byte_182060100[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(a1);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.DictionaryKeySubscript.init(wrapped:key:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
}

uint64_t sub_1819E29C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 68), v2, v1);
}

_QWORD *PredicateExpressions.DictionaryKeySubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a3;
  v6 = a2[6];
  v7 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  v13 = *a1;
  v18 = v13;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, _QWORD, __n128))(a2[5] + 16))(&v19, &v18, a2[2], v10);
  if (!v3)
  {
    v16 = v19;
    v18 = v13;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(&v18, v7, v6);
    MEMORY[0x186DA43D0](v12, v16, AssociatedTypeWitness, a2[4], a2[7]);
    swift_bridgeObjectRelease();
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

_QWORD *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeySubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B, C>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
}

uint64_t sub_1819E2BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(44);
  v0._object = (void *)0x8000000182304B50;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A79656B202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.DictionaryKeySubscript<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[16];

  v13[8] = a3;
  v13[5] = a4;
  v13[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13[6] = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v13[7] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[9] = v7;
  v13[10] = v7;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
}

uint64_t sub_1819E2E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v4 - 200) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 192) = v8;
  *(_QWORD *)(v4 - 184) = v2;
  v10 = *(_QWORD *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v11 = *(_QWORD *)(v4 - 152);
  v12 = *(_QWORD *)(v4 - 136);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v13, v11, v12);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v14 = v10;
  v15 = *(_QWORD *)(v4 - 184);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v13 + *(int *)(v16 + 68), v14, v15);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  v17 = *(_QWORD *)(v4 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v17 + 16))(*(_QWORD *)(v4 - 168), v13, v16);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v13, v16);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.DictionaryKeySubscript<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(_QWORD *a1)
{
  return PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.default.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 80));
}

void PredicateExpressions.DictionaryKeyDefaultValueSubscript.init(wrapped:key:default:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
}

uint64_t sub_1819E3160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 76), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 80), v3, v1);
}

_QWORD *PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v38 = a3;
  v5 = a2[4];
  v36 = a2[7];
  v37 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7);
  v8 = a2[3];
  v41 = a2[6];
  v39 = (char *)&v31 - v9;
  v40 = v8;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v31 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v31 - v16;
  v18 = *a1;
  v44 = v18;
  v19 = v43;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, _QWORD, __n128))(a2[5] + 16))(&v45, &v44, a2[2], v15);
  if (!v19)
  {
    v32 = v10;
    v33 = v11;
    v43 = v13;
    v44 = v18;
    v31 = v17;
    v21 = v39;
    v22 = v45;
    v23 = v42;
    (*(void (**)(uint64_t *, uint64_t))(v41 + 16))(&v44, v40);
    v40 = v18;
    v41 = 0;
    v24 = v22;
    v25 = v32;
    MEMORY[0x186DA43D0](v23, v24, v32, AssociatedTypeWitness, a2[8]);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v25);
    v26 = v43;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, AssociatedTypeWitness);
    v28 = v38;
    if (v27 == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
      v45 = v40;
      return (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 16))(&v45, v37);
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v30 = v31;
      v29(v31, v21, AssociatedTypeWitness);
      return (_QWORD *)((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v28, v30, AssociatedTypeWitness);
    }
  }
  return result;
}

_QWORD *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B, C>(_:_:default:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
}

uint64_t sub_1819E34BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5 + *(int *)(a1 + 76), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v5 + *(int *)(a1 + 80), v3, v1);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(74);
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  v0._object = (void *)0x8000000182304B80;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A79656B202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000182304BB0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[20];

  v18[11] = a3;
  v18[4] = a4;
  v18[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18[5] = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[9] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v6);
  v18[7] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[8] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v9);
  v18[10] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[12] = v11;
  v18[13] = v12;
  v18[6] = v13;
  v18[14] = v13;
  v18[15] = v14;
  v18[16] = v15;
  v18[17] = v16;
  v18[18] = v17;
  type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
}

uint64_t sub_1819E3880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 232) = v6;
  *(_QWORD *)(v4 - 224) = v8;
  *(_QWORD *)(v4 - 72) = v3;
  v10 = *(_QWORD *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(_QWORD *)(v4 - 120));
  v11 = *(_QWORD *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(*(_QWORD *)(v4 - 224), v11, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(_QWORD *)(v4 - 120));
  v12 = *(_QWORD *)(v4 - 184);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 32))(*(_QWORD *)(v4 - 224) + *(int *)(a1 + 76), v12, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 144, *(_QWORD *)(v4 - 120));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 224);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v4 - 216) + 32))(v13 + *(int *)(a1 + 80), *(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  __swift_destroy_boxed_opaque_existential_1(v4 - 144);
  v14 = *(_QWORD *)(v4 - 232);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 16))(*(_QWORD *)(v4 - 208), v13, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  _QWORD v13[4];

  v5 = *a3;
  v6 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.DictionaryKeySubscript<A, B, C>);
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  v13[2] = v10;
  v13[3] = v9;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>, a2, v13);
  v12[0] = v8;
  v12[1] = v7;
  v12[2] = v10;
  v12[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>, a2, v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.init(from:)(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(_QWORD *a1)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[6];
  _QWORD v16[6];

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>);
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v11 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  v13 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 24);
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = v11;
  v16[3] = v10;
  v16[4] = v13;
  v16[5] = v12;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>, a2, v16);
  v15[0] = v9;
  v15[1] = v8;
  v15[2] = v11;
  v15[3] = v10;
  v15[4] = v13;
  v15[5] = v12;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>, a2, v15);
  a1[3] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1819E3D40 + 4 * byte_182060440[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v4 = a1;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(_QWORD *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    v17 = ~v8;
    v18 = ~(unint64_t)v11;
    v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v17, v19, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)v4 + v9) & v17) + v12) & v18, (v19 + v12) & v18, v21);
  }
  else
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t initializeWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

uint64_t @objc _NSFileManagerBridge.createSymbolicLink(at:withDestinationURL:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void **, _QWORD *))
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  uint64_t v20;

  URL.init(reference:)(a3, &v18);
  v10 = v18;
  v9 = v19;
  v11 = v20;
  URL.init(reference:)(a4, &v18);
  v12 = v18;
  v13 = v19;
  v14 = v20;
  v18 = v10;
  v19 = v9;
  v20 = v11;
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v14;
  v15 = a1;
  a6(&v18, v17);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

uint64_t @objc _NSFileManagerBridge.isReadableFile(atPath:)(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v8 = v7;
  v9 = a1;
  LOBYTE(a4) = _FileManagerImpl._fileAccessibleForMode(_:_:)((uint64_t)v6, v8, a4);

  swift_bridgeObjectRelease();
  return a4 & 1;
}

uint64_t _NSFileManagerBridge.createFile(atPath:contents:attributes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __CFString *v10;
  uint64_t v11;
  char v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  id v42;
  id v43;
  char v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD v66[5];
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v74 = OBJC_IVAR____NSFileManagerBridge__impl;
  v82 = a5;
  if (!a5)
  {
    v80 = 0u;
    v81 = 0u;
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a5 + 16))
  {
    v80 = 0u;
    v81 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v10 = CFSTR("NSFileProtectionKey");
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    v80 = 0u;
    v81 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a5 + 56) + 32 * v11, (uint64_t)&v80);

  if (!*((_QWORD *)&v81 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v80);
    goto LABEL_13;
  }
  if (!swift_dynamicCast())
  {
LABEL_13:
    v19 = 1;
    goto LABEL_14;
  }
  v13 = (id)a1;
  v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionNone"));
  v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_42:
    swift_unknownObjectRelease();
    v45 = 268435457;
    goto LABEL_43;
  }
  v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
    goto LABEL_42;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionComplete"));
  v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_54:
    swift_unknownObjectRelease();
    v45 = 536870913;
    goto LABEL_43;
  }
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_54;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteUnlessOpen"));
  v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_59:
    swift_unknownObjectRelease();
    v45 = 805306369;
    goto LABEL_43;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0)
    goto LABEL_59;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteUntilFirstUserAuthentication"));
  v58 = v57;
  if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v58 == v59)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteWhenUserInactive"));
      v63 = v62;
      if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(v14) && v63 == v64)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_70;
      }
      goto LABEL_69;
    }
  }
  swift_unknownObjectRelease();
  v45 = 1073741825;
  while (1)
  {
LABEL_43:
    a1 = (uint64_t)v13;
    v19 = v45;
    if (v82)
    {
      v80 = 0u;
      v81 = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v80, v10);
    }
LABEL_14:
    if (a4 >> 60 == 15)
      v10 = 0;
    else
      v10 = (__CFString *)a3;
    if (a4 >> 60 == 15)
      v20 = 0xC000000000000000;
    else
      v20 = a4;
    outlined copy of Data?(a3, a4);
    v76 = a1;
    URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v80);
    a3 = *((_QWORD *)&v80 + 1);
    v21 = (void *)v80;
    v22 = v81;
    swift_retain();
    v23 = v21;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      v27 = objc_msgSend(v23, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v27 & 1) != 0)
        goto LABEL_29;
      goto LABEL_30;
    }
    v77 = v23;
    v78 = a3;
    v79 = v22;
    URL.scheme.getter();
    if (!v24)
    {
      swift_release();
      swift_release();

      goto LABEL_30;
    }
    v73 = v20;
    v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000)
      break;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    v26 = swift_bridgeObjectRelease();
    v20 = v73;
    if ((v28 & 1) != 0)
      goto LABEL_29;
LABEL_30:
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v30 = objc_allocWithZone((Class)NSError);
    v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v32 = objc_msgSend(v13, sel_domain);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    a4 = v34;

    if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && a4 == v35)
    {
      swift_bridgeObjectRelease_n();
LABEL_34:
      swift_willThrow();
      swift_release();
      swift_release();

      outlined consume of Data._Representation((uint64_t)v10, v20);
      swift_bridgeObjectRelease();
      return 0;
    }
    a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0)
      goto LABEL_34;
    __break(1u);
LABEL_69:
    v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v65 & 1) != 0)
LABEL_70:
      v45 = 1342177281;
    else
      v45 = 1;
  }
  swift_release();
  swift_release();

  v26 = swift_bridgeObjectRelease();
  v20 = v73;
LABEL_29:
  v72 = a2;
  MEMORY[0x1E0C80A78](v26);
  v66[2] = v23;
  v66[3] = a3;
  v66[4] = v22;
  v67 = 1;
  v68 = v19;
  v69 = MEMORY[0x1E0DEE9E0];
  LOBYTE(v70) = 1;
  v29 = v23;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:), (uint64_t)v66, (uint64_t)v10, v20);
  swift_release_n();
  swift_release_n();

  outlined consume of Data._Representation((uint64_t)v10, v20);
  if (!v82)
    return 1;
  v37 = MEMORY[0x186DA9F5C](v75 + v74);
  if (v37)
  {
    v38 = (void *)v37;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    v39 = _NativeDictionary.bridged()();
    v40 = String._bridgeToObjectiveCImpl()();
    *(_QWORD *)&v80 = 0;
    v41 = objc_msgSend(v38, sel_setAttributes_ofItemAtPath_error_, v39, v40, &v80);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v41 & 1) != 0)
    {
      v42 = (id)v80;
      goto LABEL_48;
    }
    if ((_QWORD)v80)
    {
      v43 = (id)v80;
      swift_willThrow();
      swift_bridgeObjectRelease();

    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      swift_willThrow();
LABEL_48:
      swift_bridgeObjectRelease();
    }
    return 1;
  }
  else
  {
    v71 = 0;
    v70 = 48;
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id _NSFileManagerBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSFileManagerBridge()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;

  return closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64));
}

unint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    type metadata accessor for NSFileAttributeKey(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSFileAttributeKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey);
  }
  return result;
}

unint64_t specialized _NSFileManagerBridge.contentsOfDirectory(atPath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  const char *v11;
  char v12;
  char v13;
  uint64_t v14;
  DIR *v15;
  const char *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  DIR *v25;
  Swift::Int32 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  DIR *v35;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[15];
  _BYTE v49[40];
  _OWORD v50[2];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 64) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v6 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v6 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v7 = 3 * v6;
  if ((unsigned __int128)(v6 * (__int128)3) >> 64 != (3 * v6) >> 63)
  {
    __break(1u);
LABEL_39:
    __break(1u);
  }
  if (v7 < -1)
    goto LABEL_39;
  v37 = v2;
  v8 = v7 + 1;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v7 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = (char *)&v37 - v10;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v8, 1, a1, a2);
    v13 = v12;
    v14 = swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_29;
    v14 = (uint64_t)opendir(v11);
    v15 = (DIR *)v14;
    if (!v14)
      goto LABEL_29;
LABEL_15:
    *(_QWORD *)(inited + 24) = a1;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 16) = v15;
    *(_BYTE *)(inited + 56) = 0;
    v48[0] = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v19 = BidirectionalCollection<>.joined(separator:)();
    v21 = v20;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 40) = v19;
    *(_QWORD *)(inited + 48) = v21;
    v22 = *(void **)(inited + 64);
    if (v22)
      goto LABEL_33;
    goto LABEL_16;
  }
  v16 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v16, v8, 1, a1, a2);
  v18 = v17;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    v14 = MEMORY[0x186DA9E78](v16, -1, -1);
  }
  else
  {
    v15 = opendir(v16);
    v14 = MEMORY[0x186DA9E78](v16, -1, -1);
    if (v15)
      goto LABEL_15;
  }
LABEL_29:
  *(_QWORD *)(inited + 24) = 0;
  *(_QWORD *)(inited + 32) = 0xE000000000000000;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0xE000000000000000;
  *(_BYTE *)(inited + 56) = 0;
  v26 = MEMORY[0x186DA4118](v14);
  v38 = MEMORY[0x1E0DEE9E0];
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v29 = v28;
  v46 = a1;
  *(_QWORD *)&v47 = a2;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v48, (uint64_t)v27, v29);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v32 = v31;
  URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v46);
  if (v46)
  {
    v44 = v46;
    v45 = v47;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(v48, 0, 40);
  }
  specialized Dictionary.subscript.setter((uint64_t)v48, (uint64_t)v30, v32);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v26, 1, 0x7265646C6F46, 0xE600000000000000, v38, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = (void *)v48[0];
  v33 = *(void **)(inited + 64);
  swift_bridgeObjectRelease();

  *(_QWORD *)(inited + 64) = v22;
  if (v22)
  {
LABEL_33:
    v34 = v22;
    swift_willThrow();
    swift_setDeallocating();
    v35 = *(DIR **)(inited + 16);
    if (v35)
      closedir(v35);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return a2;
  }
LABEL_16:
  _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v49);
  outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v49, (uint64_t)v50);
  if (*((_QWORD *)&v50[0] + 1))
  {
    a2 = MEMORY[0x1E0DEE9D8];
    do
    {
      v39 = v50[0];
      v40 = v50[1];
      v41 = v51;
      v42 = v50[0];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a2 + 16) + 1, 1, (_QWORD *)a2);
      v24 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(a2 + 24);
      if (v24 >= v23 >> 1)
        a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, (_QWORD *)a2);
      *(_QWORD *)(a2 + 16) = v24 + 1;
      *(_OWORD *)(a2 + 16 * v24 + 32) = v42;
      outlined release of String((uint64_t)&v42);
      v43 = v40;
      outlined release of String((uint64_t)&v43);
      _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v49);
      outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v49, (uint64_t)v50);
    }
    while (*((_QWORD *)&v50[0] + 1));
  }
  else
  {
    a2 = MEMORY[0x1E0DEE9D8];
  }
  swift_setDeallocating();
  v25 = *(DIR **)(inited + 16);
  if (v25)
    closedir(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a2;
}

unint64_t specialized _NSFileManagerBridge.displayName(atPath:)(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  char v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t Path;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  void *v64;
  id v65;
  _QWORD v66[3];
  __int128 v67;
  __int128 v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  LOBYTE(v66[0]) = 1;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  swift_bridgeObjectRetain();
  v63 = a1;
  URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)v66, (uint64_t)&v70, (uint64_t *)&v67);
  v64 = (void *)v67;
  v69 = (void *)*MEMORY[0x1E0C99A70];
  v4 = v69;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v5 = static _SetStorage.allocate(capacity:)();
  v6 = v5 + 56;
  v7 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  Hasher.init(_seed:)();
  v65 = v7;
  String.hash(into:)();
  v8 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  v11 = v10 >> 6;
  v12 = *(_QWORD *)(v5 + 56 + 8 * (v10 >> 6));
  i = 1 << v10;
  if (((1 << v10) & v12) == 0)
    goto LABEL_30;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v5 + 48) + 8 * v10));
  v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v16 == v17)
    goto LABEL_16;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_17;
  v20 = ~v9;
  v10 = (v10 + 1) & v20;
  v11 = v10 >> 6;
  v12 = *(_QWORD *)(v6 + 8 * (v10 >> 6));
  i = 1 << v10;
  if ((v12 & (1 << v10)) == 0)
    goto LABEL_30;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v5 + 48) + 8 * v10));
  v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v23 == v24)
    goto LABEL_16;
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_17:
    v31 = v65;

    goto LABEL_32;
  }
  v10 = (v10 + 1) & v20;
  v11 = v10 >> 6;
  v12 = *(_QWORD *)(v6 + 8 * (v10 >> 6));
  i = 1 << v10;
  if ((v12 & (1 << v10)) != 0)
  {
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v5 + 48) + 8 * v10));
    v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v29 == v30)
      goto LABEL_16;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
      goto LABEL_17;
    v10 = (v10 + 1) & v20;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v6 + 8 * (v10 >> 6));
    i = 1 << v10;
    if ((v12 & (1 << v10)) != 0)
    {
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v5 + 48) + 8 * v10));
      v35 = v34;
      if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v35 == v36)
      {
LABEL_16:
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0)
        goto LABEL_17;
      v10 = (v10 + 1) & v20;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v6 + 8 * (v10 >> 6));
      for (i = 1 << v10; (v12 & (1 << v10)) != 0; i = 1 << v10)
      {
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v5 + 48) + 8 * v10));
        v40 = v39;
        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(v4) && v40 == v41)
          goto LABEL_16;
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
          goto LABEL_17;
        v10 = (v10 + 1) & v20;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v6 + 8 * (v10 >> 6));
      }
    }
  }
LABEL_30:
  *(_QWORD *)(v6 + 8 * v11) = i | v12;
  v31 = v65;
  *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10) = v65;
  v44 = *(_QWORD *)(v5 + 16);
  v45 = __OFADD__(v44, 1);
  v46 = v44 + 1;
  if (v45)
  {
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(v5 + 16) = v46;
LABEL_32:
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  v47 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  swift_release();
  v48 = _ContiguousArrayBuffer._asCocoaArray()();
  *(_QWORD *)&v67 = 0;
  v10 = (unint64_t)v64;
  v49 = objc_msgSend(v64, sel_resourceValuesForKeys_error_, v48, &v67);
  swift_unknownObjectRelease();
  v50 = (void *)v67;
  if (!v49)
  {
    if ((_QWORD)v67)
    {
      v56 = (id)v67;
      swift_willThrow();
      swift_release();

LABEL_48:
      swift_bridgeObjectRetain();
      Path = String._lastPathComponent.getter(v63, a2);
      v61 = v60;
      swift_bridgeObjectRelease();
      v70 = Path;
      v71 = v61;
      v66[0] = 58;
      v66[1] = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      return v67;
    }
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_47:
      swift_willThrow();
      swift_release();
      goto LABEL_48;
    }
LABEL_51:
    swift_once();
    goto LABEL_47;
  }
  v51 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v50;

  if (*(_QWORD *)(v51 + 16))
  {
    v53 = v31;
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    if ((v55 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v54, (uint64_t)&v67);
    }
    else
    {
      v67 = 0u;
      v68 = 0u;
    }

  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    v57 = v70;
    v58 = v71;
  }
  else
  {
    v58 = 0;
    v57 = 0;
    v70 = 0;
    v71 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v58)
    goto LABEL_48;

  swift_release();
  swift_release();
  return v57;
}

uint64_t specialized _NSFileManagerBridge.contents(atPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  v5 = 0;
  v6 = 0;
  swift_bridgeObjectRetain();
  v2 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v4, 1, 0, 1, 0, MEMORY[0x1E0DEE9D8], &v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void partial apply for closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void partial apply for closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(a1, *(_QWORD *)(v2 + 16), *(uid_t **)(v2 + 24), a2);
}

uint64_t outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _POSIXDirectoryContentsSequence.Iterator.Element?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void partial apply for closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(char *a1)
{
  uint64_t v1;

  closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1819E7E20()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _SearchPathURLs(for:in:expandTilde:)(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t outlined init with take of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  initializeWithTake for _FileManagerImpl(a2);
  return a2;
}

uint64_t outlined init with copy of _FileManagerImpl(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _FileManagerImpl(a2);
  return a2;
}

uint64_t outlined destroy of _FileManagerImpl(uint64_t a1)
{
  destroy for _FileManagerImpl();
  return a1;
}

void FormatterCache.formatter(for:creator:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (*v24)(_QWORD, _QWORD);
  uint64_t (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  os_unfair_lock_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;

  v41 = a5;
  v38 = a3;
  v39 = a2;
  v44 = a1;
  v7 = a4[3];
  v43 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v30 - v10;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v16 = v5[1];
  v33 = *v5;
  v18 = (char *)&v30 - v17;
  v19 = a4[2];
  v20 = a4[4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  v21 = *(_QWORD *)(v16 + 16);
  v34 = (_QWORD *)(v16 + 16);
  v35 = v19;
  v36 = v20;
  MEMORY[0x186DA43D0](v44, v21, v19, v7, v20);
  if (v42)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
    v22 = v43;
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, v7);
    v24 = *(uint64_t (**)(_QWORD, _QWORD))(v12 + 8);
    if (v23 == 1)
    {
      v31 = (os_unfair_lock_t)(v16 + 24);
      v32 = v18;
      v25 = v24;
      v26 = v24(v14, v11);
      v14 = v40;
      v39(v26);
      v42 = v25;
      swift_retain();
      os_unfair_lock_lock(v31);
      v27 = *(_QWORD *)(v16 + 16);
      if ((v27 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v28 = __CocoaSet.count.getter();
      }
      else
      {
        v28 = *(_QWORD *)(v27 + 16);
        swift_bridgeObjectRetain();
      }
      v29 = v34;
      if (v33 < v28)
      {
        swift_bridgeObjectRelease();
        *v29 = MEMORY[0x1E0DEE9E0];
      }
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v37, v14, v7);
      type metadata accessor for Dictionary._Variant();
      Dictionary._Variant.setValue(_:forKey:)();
      os_unfair_lock_unlock(v31);
      swift_release();
      swift_bridgeObjectRelease();
      v18 = v32;
      v24 = v42;
    }
    v24(v18, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v41, v14, v7);
  }
}

Swift::Void __swiftcall FormatterCache.removeAllObjects()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9E0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t FormatterCache.subscript.getter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  MEMORY[0x186DA43D0](a1, *(_QWORD *)(v4 + 16), v5, v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  return swift_release();
}

uint64_t FormatterCache.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = type metadata accessor for Dictionary();
  type metadata accessor for LockedState._Buffer(0, v2, v3, v4);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *a1 = 100;
  a1[1] = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FormatterCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for FormatterCache()
{
  return swift_release();
}

_QWORD *assignWithCopy for FormatterCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FormatterCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatterCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatterCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for FormatterCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatterCache);
}

uint64_t NSKeyValueObservedChange.kind.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NSKeyValueObservedChange.indexes.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(a1 + 36));
  return swift_retain();
}

uint64_t NSKeyValueObservedChange.isPrior.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

void @objc static NSObject.__old_unswizzled_automaticallyNotifiesObservers(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc static NSObject.__old_unswizzled_keyPathsForValuesAffectingValue(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  Swift::String v4;

  result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v3)
  {
    *a1 = result;
    a1[1] = v3;
  }
  else
  {
    swift_retain();
    _StringGuts.grow(_:)(42);
    v4._object = (void *)0x80000001823050E0;
    v4._countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v4);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __KVOKeyPathBridgeMachinery.BridgeKey.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char *v10;
  _BYTE v11[24];
  uint64_t v12;

  v2 = v1
     + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value;
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value);
  v3 = *(_QWORD *)(v2 + 8);
  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
    swift_bridgeObjectRetain();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
      v5 = *(_QWORD *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value
                         + 8];
      swift_bridgeObjectRetain();

      if (v4 == v6 && v3 == v5)
      {
        swift_bridgeObjectRelease_n();
        v8 = 1;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
    v8 = 0;
  }
  return v8 & 1;
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey);
}

id __KVOKeyPathBridgeMachinery.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for __KVOKeyPathBridgeMachinery);
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void NSKeyValueObservation.Helper.invalidate()()
{
  char *v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock];
  os_unfair_lock_lock(v1);
  v2 = *(void **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject];
  if (v2)
  {
    v3 = v2;
LABEL_4:
    v4 = v3;
    closure #1 in NSKeyValueObservation.Helper.invalidate()(v0, v3);

    return;
  }
  v3 = (id)MEMORY[0x186DA9F5C](&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject]);
  if (v3)
    goto LABEL_4;
  os_unfair_lock_unlock(v1);
}

id NSKeyValueObservation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NSKeyValueObservation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1819E89F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(a1, a2, a3, a4, (SEL *)&selRef_willChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(a1, a2, a3, a4, a5, (SEL *)&selRef_willChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.didChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(a1, a2, a3, a4, (SEL *)&selRef_didChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, SEL *a5)
{
  uint64_t v7;
  __n128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[6];

  v7 = *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8]);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)v18 - v12, v13, v7, v8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  v14 = (void *)v18[5];
  objc_msgSend(*(id *)(v10 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  v15 = (void *)v18[0];
  _bridgeKeyPathToString(_:)();
  v16 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, *a5, a1, v15, v16);

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:withSetMutation:using:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(a1, a2, a3, a4, a5, (SEL *)&selRef_didChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  SEL *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v65 = a6;
  v66 = a2;
  v9 = (uint64_t *)(*a1 + *MEMORY[0x1E0DEE2A8]);
  v10 = v9[1];
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v57 - v12;
  v60 = type metadata accessor for Optional();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v58 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v61 = (char *)&v57 - v16;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v57 - v18;
  v20 = *v9;
  v22 = MEMORY[0x1E0C80A78](v21);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))((char *)&v57 - v24, v6, v20, v22);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  v64 = v79;
  v67 = a1;
  _bridgeKeyPathToString(_:)();
  v63 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v25 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
      goto LABEL_3;
LABEL_6:
    v26 = MEMORY[0x1E0DEE9E8];
    if (v25)
      goto LABEL_4;
LABEL_7:
    v30 = -1 << *(_BYTE *)(a3 + 32);
    v31 = *(_QWORD *)(a3 + 56);
    v71 = a3 + 56;
    v28 = ~v30;
    v32 = -v30;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v29 = v33 & v31;
    swift_bridgeObjectRetain();
    result = swift_retain();
    v72 = 0;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_6;
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
  v26 = static _SetStorage.allocate(capacity:)();
  if (!v25)
    goto LABEL_7;
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  result = Set.Iterator.init(_cocoa:)();
  a3 = v80;
  v28 = v82;
  v71 = v81;
  v72 = v83;
  v29 = v84;
LABEL_11:
  v69 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  v62 = v28;
  v70 = (unint64_t)(v28 + 64) >> 6;
  v34 = v26 + 56;
  v68 = MEMORY[0x1E0DEE9B0] + 8;
  while (a3 < 0)
  {
    v40 = __CocoaSet.Iterator.next()();
    if (!v40)
      goto LABEL_49;
    v41 = v40;
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    {
      *(_QWORD *)&v76 = v41;
      swift_dynamicCast();
LABEL_37:
      v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      goto LABEL_38;
    }
    v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v46(v61, 1, 1, v10);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)();
    swift_unknownObjectRelease();
    v54 = v58;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, v61, v60);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v10);
    if ((_DWORD)result == 1)
      goto LABEL_51;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v54, v10);
LABEL_38:
    v46(v19, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v19, v10);
    swift_dynamicCast();
    v73 = v76;
    v74 = v77;
    v75 = v78;
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v26 + 40));
    v47 = -1 << *(_BYTE *)(v26 + 32);
    v48 = result & ~v47;
    v49 = v48 >> 6;
    if (((-1 << v48) & ~*(_QWORD *)(v34 + 8 * (v48 >> 6))) != 0)
    {
      v35 = __clz(__rbit64((-1 << v48) & ~*(_QWORD *)(v34 + 8 * (v48 >> 6)))) | v48 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v50 = 0;
      v51 = (unint64_t)(63 - v47) >> 6;
      do
      {
        if (++v49 == v51 && (v50 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v52 = v49 == v51;
        if (v49 == v51)
          v49 = 0;
        v50 |= v52;
        v53 = *(_QWORD *)(v34 + 8 * v49);
      }
      while (v53 == -1);
      v35 = __clz(__rbit64(~v53)) + (v49 << 6);
    }
    *(_QWORD *)(v34 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    v36 = *(_QWORD *)(v26 + 48) + 40 * v35;
    v37 = v74;
    *(_OWORD *)v36 = v73;
    *(_OWORD *)(v36 + 16) = v37;
    *(_QWORD *)(v36 + 32) = v75;
    ++*(_QWORD *)(v26 + 16);
  }
  if (v29)
  {
    v38 = __clz(__rbit64(v29));
    v29 &= v29 - 1;
    v39 = v38 | (v72 << 6);
LABEL_36:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v19, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v39, v10);
    goto LABEL_37;
  }
  v42 = v72 + 1;
  if (!__OFADD__(v72, 1))
  {
    if (v42 >= v70)
      goto LABEL_49;
    v43 = *(_QWORD *)(v71 + 8 * v42);
    v44 = v72 + 1;
    if (!v43)
    {
      v44 = v72 + 2;
      if (v72 + 2 >= v70)
        goto LABEL_49;
      v43 = *(_QWORD *)(v71 + 8 * v44);
      if (!v43)
      {
        v44 = v72 + 3;
        if (v72 + 3 >= v70)
          goto LABEL_49;
        v43 = *(_QWORD *)(v71 + 8 * v44);
        if (!v43)
        {
          v44 = v72 + 4;
          if (v72 + 4 >= v70)
            goto LABEL_49;
          v43 = *(_QWORD *)(v71 + 8 * v44);
          if (!v43)
          {
            v44 = v72 + 5;
            if (v72 + 5 >= v70)
              goto LABEL_49;
            v43 = *(_QWORD *)(v71 + 8 * v44);
            if (!v43)
            {
              v45 = v72 + 6;
              while (v70 != v45)
              {
                v43 = *(_QWORD *)(v71 + 8 * v45++);
                if (v43)
                {
                  v44 = v45 - 1;
                  goto LABEL_35;
                }
              }
LABEL_49:
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v19, 1, 1, v10);
              swift_release();
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              v55 = _NativeSet.bridged()();
              v56 = v64;
              objc_msgSend(v64, *v65, v63, v66, v55);

              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              return swift_release();
            }
          }
        }
      }
    }
LABEL_35:
    v29 = (v43 - 1) & v43;
    v39 = __clz(__rbit64(v43)) + (v44 << 6);
    v72 = v44;
    goto LABEL_36;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, _QWORD *);
  __int128 v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 v23;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v9 = *(_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 56);
    v10 = (_QWORD *)(v9 + v7);
    v11 = v10[1];
    v12 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v22[0] = *v10;
    v22[1] = v11;
    v13 = *(_OWORD *)(v8 + v7);
    v0[3] = v4;
    v0[4] = v5;
    v23 = v13;
    swift_bridgeObjectRetain();
    v12(&v21, v22);
    swift_bridgeObjectRelease();
    return v21;
  }
  v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v0[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v5 = (v18 - 1) & v18;
        v6 = __clz(__rbit64(v18)) + (v15 << 6);
        v4 = v15;
        goto LABEL_3;
      }
      v19 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            v15 = v3 + 3;
            goto LABEL_7;
          }
          v19 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v4 = v16 - 1;
              v20 = v3 + 6;
              while (v16 != v20)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void specialized LazyMapSequence.Iterator.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    v9 = __CocoaSet.Iterator.next()();
    if (v9)
    {
      v17 = v9;
      type metadata accessor for AnyKeyPath();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v7 = v16;
      swift_unknownObjectRelease();
      if (v16)
        goto LABEL_6;
    }
    return;
  }
  v4 = v0[3];
  v3 = v1[4];
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_4:
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v6);
    swift_retain();
    goto LABEL_5;
  }
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  v11 = (unint64_t)(v1[2] + 64) >> 6;
  if (v10 >= v11)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_5;
  }
  v12 = v1[1];
  v13 = *(_QWORD *)(v12 + 8 * v10);
  if (v13)
  {
LABEL_13:
    v5 = (v13 - 1) & v13;
    v6 = __clz(__rbit64(v13)) + (v10 << 6);
    v4 = v10;
    goto LABEL_4;
  }
  v14 = v4 + 2;
  if (v4 + 2 >= v11)
    goto LABEL_29;
  v13 = *(_QWORD *)(v12 + 8 * v14);
  if (v13)
  {
LABEL_17:
    v10 = v14;
    goto LABEL_13;
  }
  if (v4 + 3 >= v11)
    goto LABEL_30;
  v13 = *(_QWORD *)(v12 + 8 * (v4 + 3));
  if (v13)
  {
    v10 = v4 + 3;
    goto LABEL_13;
  }
  v14 = v4 + 4;
  if (v4 + 4 < v11)
  {
    v13 = *(_QWORD *)(v12 + 8 * v14);
    if (v13)
      goto LABEL_17;
    v10 = v4 + 5;
    if (v4 + 5 < v11)
    {
      v13 = *(_QWORD *)(v12 + 8 * v10);
      if (v13)
        goto LABEL_13;
      v10 = v11 - 1;
      v15 = v4 + 6;
      while (v11 != v15)
      {
        v13 = *(_QWORD *)(v12 + 8 * v15++);
        if (v13)
        {
          v10 = v15 - 1;
          goto LABEL_13;
        }
      }
LABEL_29:
      v7 = 0;
      v5 = 0;
      v4 = v10;
      goto LABEL_5;
    }
LABEL_30:
    v7 = 0;
    v5 = 0;
    v4 = v14;
    goto LABEL_5;
  }
  v7 = 0;
  v5 = 0;
  v4 += 3;
LABEL_5:
  v1[3] = v4;
  v1[4] = v5;
  if (v7)
  {
LABEL_6:
    v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[5];
    v17 = v7;
    v8(&v16, &v17);
    swift_release();
  }
}

uint64_t outlined consume of Set<A1>.Iterator._Variant<A><A1>()
{
  return swift_release();
}

uint64_t *initializeBufferWithCopyOfBuffer for NSKeyValueObservedChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(unint64_t, uint64_t, uint64_t);
  void *v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + v6;
  v10 = v8 + 7;
  v11 = v6 & 0x100000;
  if (v7 > 7
    || v11 != 0
    || ((v8 + 7 + ((v8 + v7 + ((v7 + 8) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v15 = ~v7;
    *a1 = *a2;
    v16 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    v17 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v18(((unint64_t)a2 + v7 + 8) & ~v7, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
    v19 = (void *)(((unint64_t)v16 + v9) & v15);
    v20 = (const void *)(((unint64_t)v17 + v9) & v15);
    if (v18((unint64_t)v20, 1, v4))
    {
      memcpy(v19, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
    v21 = ((unint64_t)v19 + v10) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  }
  swift_retain();
  return v3;
}

_QWORD *initializeWithCopy for NSKeyValueObservedChange(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  void *v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int (*v18)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)a1 + v5 + 8;
  v7 = ~v5;
  v8 = (unint64_t)a2 + v5 + 8;
  v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v8 & ~v5, 1, v3))
  {
    v9 = *(_DWORD *)(v4 + 84);
    v10 = *(_QWORD *)(v4 + 64);
    if (v9)
      v11 = *(_QWORD *)(v4 + 64);
    else
      v11 = v10 + 1;
    memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v11);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v8 & ~v5, v3);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
    v9 = *(_DWORD *)(v4 + 84);
    v10 = *(_QWORD *)(v4 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = (void *)(((v6 | v5) + v12) & v7);
  v14 = (const void *)(((v8 | v5) + v12) & v7);
  if (v18((unint64_t)v14, 1, v3))
  {
    memcpy(v13, v14, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v13, v14, v3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  }
  v15 = ((unint64_t)v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for NSKeyValueObservedChange(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  size_t v13;
  void *v14;
  const void *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)a1 + v5 + 8;
  v7 = ~v5;
  v8 = (unint64_t)a2 + v5 + 8;
  v9 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  v10 = v9(v6 & ~v5, 1, v3);
  v11 = v9(v8 & ~v5, 1, v3);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v8 & ~v5, v3);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 24))(v6 & ~v5, v8 & ~v5, v3);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
  }
  if (*(_DWORD *)(v4 + 84))
    v12 = *(_QWORD *)(v4 + 64);
  else
    v12 = *(_QWORD *)(v4 + 64) + 1;
  memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v12);
LABEL_10:
  if (*(_DWORD *)(v4 + 84))
    v13 = *(_QWORD *)(v4 + 64);
  else
    v13 = *(_QWORD *)(v4 + 64) + 1;
  v14 = (void *)(((v6 | v5) + v13) & v7);
  v15 = (const void *)(((v8 | v5) + v13) & v7);
  v16 = v9((unint64_t)v14, 1, v3);
  v17 = v9((unint64_t)v15, 1, v3);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 24))(v14, v15, v3);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v4 + 8))(v14, v3);
    goto LABEL_18;
  }
  if (v17)
  {
LABEL_18:
    memcpy(v14, v15, v13);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v14, v15, v3);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
LABEL_19:
  v18 = ((unint64_t)v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  swift_retain();
  swift_release();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

_QWORD *initializeWithTake for NSKeyValueObservedChange(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  void *v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int (*v18)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)a1 + v5 + 8;
  v7 = ~v5;
  v8 = (unint64_t)a2 + v5 + 8;
  v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v8 & ~v5, 1, v3))
  {
    v9 = *(_DWORD *)(v4 + 84);
    v10 = *(_QWORD *)(v4 + 64);
    if (v9)
      v11 = *(_QWORD *)(v4 + 64);
    else
      v11 = v10 + 1;
    memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v11);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v8 & ~v5, v3);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
    v9 = *(_DWORD *)(v4 + 84);
    v10 = *(_QWORD *)(v4 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = (void *)(((v6 | v5) + v12) & v7);
  v14 = (const void *)(((v8 | v5) + v12) & v7);
  if (v18((unint64_t)v14, 1, v3))
  {
    memcpy(v13, v14, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v13, v14, v3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  }
  v15 = ((unint64_t)v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

_QWORD *assignWithTake for NSKeyValueObservedChange(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  size_t v13;
  void *v14;
  const void *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)a1 + v5 + 8;
  v7 = ~v5;
  v8 = (unint64_t)a2 + v5 + 8;
  v9 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  v10 = v9(v6 & ~v5, 1, v3);
  v11 = v9(v8 & ~v5, 1, v3);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v8 & ~v5, v3);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 40))(v6 & ~v5, v8 & ~v5, v3);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
  }
  if (*(_DWORD *)(v4 + 84))
    v12 = *(_QWORD *)(v4 + 64);
  else
    v12 = *(_QWORD *)(v4 + 64) + 1;
  memcpy((void *)(v6 & ~v5), (const void *)(v8 & ~v5), v12);
LABEL_10:
  if (*(_DWORD *)(v4 + 84))
    v13 = *(_QWORD *)(v4 + 64);
  else
    v13 = *(_QWORD *)(v4 + 64) + 1;
  v14 = (void *)(((v6 | v5) + v13) & v7);
  v15 = (const void *)(((v8 | v5) + v13) & v7);
  v16 = v9((unint64_t)v14, 1, v3);
  v17 = v9((unint64_t)v15, 1, v3);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 40))(v14, v15, v3);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v4 + 8))(v14, v3);
    goto LABEL_18;
  }
  if (v17)
  {
LABEL_18:
    memcpy(v14, v15, v13);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v14, v15, v3);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
LABEL_19:
  v18 = ((unint64_t)v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  swift_release();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSKeyValueObservedChange(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + v9;
  v11 = v8 + 7;
  if (v7 < a2)
  {
    v12 = ((v11 + ((v10 + ((v9 + 8) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & 0xFFFFFFF8) + 9;
    v13 = (a2 - v7 + 255) >> (8 * v12);
    if (v12 < 4)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X3 }
  }
  v18 = (a1 + v9 + 8) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v20 = *(_QWORD *)((v11 + ((v10 + v18) & ~v9)) & 0xFFFFFFFFFFFFF8);
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    if ((v20 + 1) >= 2)
      return v20;
    else
      return 0;
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
    if (v19 >= 2)
      return v19 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for NSKeyValueObservedChange(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((v11
        + 7
        + ((v11
          + *(unsigned __int8 *)(v7 + 80)
          + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_1819EA1E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA1F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1819EA1F8);
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA270()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA29C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA2A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA2AC(unsigned int a1@<W1>, size_t a2@<X8>)
{
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (a1)
  {
    v2 = (void *)((v7 + v6 + 8) & v4);
    if (v5 < 0x7FFFFFFE)
      JUMPOUT(0x1819EA278);
    if (v5 >= a1)
      JUMPOUT(0x1819EA2B8);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA2FC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA30C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1819EA2E8);
}

void sub_1819EA314()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1819EA2E8);
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.keyPathsAffectingValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.automaticallyNotifiesObservers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery()
{
  return objc_opt_self();
}

uint64_t method lookup function for NSKeyValueObservation()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v13;
  objc_super v14[2];
  objc_super v15;
  _BYTE v16[24];
  uint64_t v17;

  if (!a2)
    return 0;
  v4 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_currentThread);
  v6 = objc_msgSend(v5, sel_threadDictionary);

  v7 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  v15.receiver = v8;
  v15.super_class = v7;
  v10 = objc_msgSendSuper2(&v15, sel_init);
  v11 = objc_msgSend(v6, sel_objectForKeyedSubscript_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  outlined init with take of Any?((uint64_t)v14, (uint64_t)v16);
  if (v17)
  {
    type metadata accessor for AnyKeyPath();
    if (swift_dynamicCast())
      return v13;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t sub_1819EA4CC()
{
  return swift_deallocObject();
}

uint64_t sub_1819EA4DC()
{
  return swift_deallocObject();
}

uint64_t sub_1819EA4EC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

double _LocaleUnlocalized.calendar.getter@<D0>(_OWORD *a1@<X8>)
{
  os_unfair_lock_s *v2;
  double result;
  __int128 v4;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t _LocaleUnlocalized.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[144];

  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v2);
  outlined retain of LocalePreferences?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _LocaleUnlocalized()
{
  return objc_opt_self();
}

uint64_t protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleUnlocalized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE v6[144];

  swift_bridgeObjectRelease();
  v4 = swift_allocObject();
  outlined init with take of LocalePreferences?(a3, (uint64_t)v6);
  outlined init with take of LocalePreferences?((uint64_t)v6, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleUnlocalized(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[7];
  _OWORD v12[2];

  swift_bridgeObjectRelease();
  v4 = swift_allocObject();
  v5 = a3[7];
  v11[6] = a3[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a3 + 124);
  v6 = a3[3];
  v11[2] = a3[2];
  v11[3] = v6;
  v7 = a3[5];
  v11[4] = a3[4];
  v11[5] = v7;
  v8 = a3[1];
  v11[0] = *a3;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, v9);
  outlined init with take of LocalePreferences?((uint64_t)v11, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleUnlocalized(const void *a1)
{
  uint64_t v2;
  uint64_t v4[44];
  _OWORD v5[9];

  v2 = swift_allocObject();
  memcpy(v4, a1, sizeof(v4));
  outlined release of Locale.Components(v4);
  _s10Foundation17LocalePreferencesVSgWOi0_(v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, v2 + 16);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleUnlocalized()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleUnlocalized()
{
  return 0x3130305F6E65;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleUnlocalized()
{
  return 0;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleUnlocalized()
{
  return 28261;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleUnlocalized()
{
  return 3223600;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleUnlocalized(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t ObjectType;
  __int128 v5;

  if (one-time initialization token for cache != -1)
    a1 = swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1E0C80A78](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v5);
  os_unfair_lock_unlock(v1 + 31);
  swift_release_n();
  v2 = *((_QWORD *)&v5 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 184))(ObjectType, v2);
  return swift_unknownObjectRelease();
}

double protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleUnlocalized@<D0>(_OWORD *a1@<X8>)
{
  return _LocaleUnlocalized.calendar.getter(a1);
}

void protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleUnlocalized(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleUnlocalized()
{
  return 0x647261646E617473;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleUnlocalized()
{
  return 46;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleUnlocalized()
{
  return 44;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleUnlocalized()
{
  return 42178;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10256610;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10322146;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 9994466;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10060002;
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for metric != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDC3AF38;
  v3 = xmmword_1EDC3AF40;
  *(_QWORD *)a1 = static Locale.MeasurementSystem.metric;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for latn != -1)
    swift_once();
  v2 = qword_1EDC464F0;
  v3 = xmmword_1EDC464F8;
  *(_QWORD *)a1 = static Locale.NumberingSystem.latn;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleUnlocalized()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18205C850;
  if (one-time initialization token for latn != -1)
    swift_once();
  v1 = qword_1EDC464F0;
  v2 = xmmword_1EDC464F8;
  *(_QWORD *)(v0 + 32) = static Locale.NumberingSystem.latn;
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

void protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleUnlocalized(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

double protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = 86400.0;
  *(_OWORD *)(a1 + 16) = xmmword_182060990;
  *(_OWORD *)(a1 + 32) = xmmword_1820609A0;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

double protocol witness for _LocaleProtocol.language.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  Swift::String v2;
  Swift::String v3;
  double result;

  v2 = String.lowercased()();
  v3 = String.uppercased()();
  *(_OWORD *)a1 = xmmword_1820609B0;
  *(Swift::String *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)&result = 3223600;
  *(_OWORD *)(a1 + 64) = xmmword_1820609C0;
  *(Swift::String *)(a1 + 80) = v3;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = unk_1EDC464D0;
  v3 = xmmword_1EDC464D8;
  *(_QWORD *)a1 = static Locale.Collation.standard;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double protocol witness for _LocaleProtocol.region.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  Swift::String v2;
  double result;

  v2 = String.uppercased()();
  *(_QWORD *)&result = 3223600;
  *(_OWORD *)a1 = xmmword_1820609C0;
  *(Swift::String *)(a1 + 16) = v2;
  return result;
}

void protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleUnlocalized(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleUnlocalized@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleUnlocalized(char *a1)
{
  return *(_QWORD *)&aEn001[8 * *a1];
}

void protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleUnlocalized(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[144];

  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v4);
  outlined init with take of LocalePreferences?((uint64_t)v4, a1);
  return outlined retain of LocalePreferences?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleUnlocalized()
{
  return 0xD000000000000012;
}

unint64_t instantiation function for generic protocol witness table for _LocaleUnlocalized(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    v1 = type metadata accessor for _LocaleUnlocalized();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleUnlocalized, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized;
  if (!lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized)
  {
    v1 = type metadata accessor for _LocaleUnlocalized();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleUnlocalized, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized);
  }
  return result;
}

uint64_t specialized _LocaleUnlocalized.bridgeToNSLocale()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  __int128 v6;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.fixed(_:)(v0, 0x3130305F6E65, 0xE600000000000000, &v6);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = *((_QWORD *)&v6 + 1);
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 496))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t closure #1 in LocaleCache.fixed(_:)partial apply@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in LocaleCache.fixed(_:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t *outlined release of Locale.Components(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v8 = a1[14];
  v9 = a1[18];
  v10 = a1[17];
  v11 = a1[22];
  v12 = a1[21];
  v13 = a1[27];
  v14 = a1[26];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[35];
  v18 = a1[34];
  v19 = a1[41];
  v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  return a1;
}

double _s10Foundation17LocalePreferencesVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_18205FD60;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  *(_OWORD *)((char *)a1 + 124) = 0u;
  return result;
}

Swift::Void __swiftcall Date.addTimeInterval(_:)(Swift::Double a1)
{
  double *v1;

  *v1 = *v1 + a1;
}

double static Date.+= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 + a2;
  *a1 = result;
  return result;
}

void Date.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

NSComparisonResult __swiftcall Date.compare(_:)(Foundation::Date a1)
{
  double *v1;
  double *v2;

  if (*v2 < *v1)
    return -1;
  else
    return (unint64_t)(*v1 < *v2);
}

double static Date.-= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 - a2;
  *a1 = result;
  return result;
}

Swift::Int Date.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id Date.debugDescription.getter()
{
  double *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  v2 = objc_msgSend(v1, sel_description);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t Date.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18205C850;
  *(_QWORD *)(v9 + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(v9 + 40) = 0x80000001823051C0;
  *(_QWORD *)(v9 + 72) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v9 + 48) = v8;
  v14[1] = v8;
  v14[0] = v9;
  v10 = *MEMORY[0x1E0DEDFB8];
  v11 = type metadata accessor for Mirror.DisplayStyle();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Date.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

id static Date._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v3;

  objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Date@<X0>(id result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if (result)
  {
    result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSDate._toCustomAnyHashable()()
{
  void *v0;

  objc_msgSend(v0, sel_timeIntervalSinceReferenceDate);
  lazy protocol witness table accessor for type Date and conformance Date();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDate()
{
  void **v0;
  void *v1;

  v1 = *v0;
  objc_msgSend(v1, sel_timeIntervalSinceReferenceDate);
  lazy protocol witness table accessor for type Date and conformance Date();
  AnyHashable.init<A>(_:)();

}

void Date.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  double *v1;
  double v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
  v6 = objc_msgSend(v4, sel_stringFromDate_, v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 32) = 0;
}

double static Date.validCalendarRange.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = -2.11845067e11;
  *a1 = xmmword_182060A80;
  return result;
}

double Date.capped.getter@<D0>(double *a1@<X8>)
{
  double *v1;
  double v2;
  double result;

  v2 = *v1;
  if (*v1 > 1.59271755e13)
    v2 = 1.59271755e13;
  result = fmax(v2, -2.11845067e11);
  *a1 = result;
  return result;
}

BOOL Date.isValidForEnumeration.getter()
{
  double *v0;

  return *v0 <= 1.59271755e13 && *v0 >= -2.11845067e11;
}

unint64_t instantiation function for generic protocol witness table for Date(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[2] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[3] = lazy protocol witness table accessor for type Date and conformance Date();
  result = lazy protocol witness table accessor for type Date and conformance Date();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : Comparable in Date()
{
  return MEMORY[0x1E0DEB098];
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Date()
{
  return MEMORY[0x1E0DEB0C8];
}

double protocol witness for Strideable.distance(to:) in conformance Date@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

double *protocol witness for static Strideable._step(after:from:by:) in conformance Date(double *result, uint64_t a2, char a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v8;

  v6 = *a6;
  if ((a3 & 1) != 0)
  {
    v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    v8 = *a5 + v6 * (double)a2;
LABEL_5:
    *result = v8;
    return (double *)a2;
  }
  __break(1u);
  return result;
}

Swift::Int ICUDateIntervalFormatter.Signature.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _BYTE __dst[352];
  _BYTE v4[72];

  memcpy(__dst, v0, sizeof(__dst));
  v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUDateIntervalFormatter.Signature(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  _BYTE v5[352];

  memcpy(v5, v1, sizeof(v5));
  v3 = v1[352];
  Locale.Components.hash(into:)(a1);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateIntervalFormatter.Signature()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _BYTE __dst[352];
  _BYTE v4[72];

  memcpy(__dst, v0, sizeof(__dst));
  v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t ICUDateIntervalFormatter.__deallocating_deinit()
{
  udtitvfmt_close();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUDateIntervalFormatter()
{
  return objc_opt_self();
}

uint64_t specialized static ICUDateIntervalFormatter.Signature.== infix(_:_:)(unsigned __int8 *__src, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  _BYTE v17[352];
  _BYTE __dst[360];

  memcpy(__dst, __src, 0x160uLL);
  v4 = __src[352];
  v5 = *((_QWORD *)__src + 45);
  v6 = *((_QWORD *)__src + 46);
  v7 = *((_QWORD *)__src + 47);
  v8 = *((_QWORD *)__src + 48);
  memcpy(v17, (const void *)a2, sizeof(v17));
  v9 = *(unsigned __int8 *)(a2 + 352);
  v10 = *(_QWORD *)(a2 + 360);
  v11 = *(_QWORD *)(a2 + 368);
  v12 = *(_QWORD *)(a2 + 376);
  v13 = *(_QWORD *)(a2 + 384);
  v14 = specialized static Locale.Components.== infix(_:_:)((uint64_t)__dst, (uint64_t)v17);
  result = 0;
  if (v14 && v4 == v9)
  {
    if (v5 == v10 && v6 == v11 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
    {
      if (v7 == v12 && v8 == v13)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t specialized static ICUDateIntervalFormatter.formatter(for:)(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  _QWORD *v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_unfair_lock_s *v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_unfair_lock_s *v126;
  uint64_t v127;
  char v128;
  int64_t v129;
  _QWORD *v130;
  int v131;
  __int16 v132;
  uint64_t v133[49];
  uint64_t v134[44];
  _BYTE v135[392];
  uint64_t __dst[44];
  uint64_t v137[49];
  uint64_t __src[49];
  char v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  __int16 v143;
  int v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int16 v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v1 = *(_OWORD *)(a1 + 64);
  v148 = *(_OWORD *)(a1 + 48);
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v125 = *(_QWORD *)(a1 + 40);
  v127 = *(_QWORD *)(a1 + 24);
  v149 = v1;
  v150 = *(_OWORD *)(a1 + 80);
  v151 = *(_WORD *)(a1 + 96);
  __src[0] = v2;
  __src[1] = v3;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  v6 = v5;
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v8 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    v139 = 3;
    v140 = 0;
    v141 = 50332931;
    v142 = 0;
    v143 = 1;
    v144 = 591363;
    v145 = 513;
    v146 = 0;
    v147 = 3327;
    __src[0] = v2;
    __src[1] = v3;
    Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
    v8 = v9;
    v6 = v10;
  }
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  v13 = v12(ObjectType, v3);
  Locale.Components.init(identifier:)(v13, v14, __src);
  v137[0] = v2;
  v137[1] = v3;
  Locale.Components.applyPreferencesOverride(_:)(v137);
  swift_unknownObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  v15 = swift_getObjectType();
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v125 + 24);
  outlined retain of Locale.Components(__dst);
  swift_unknownObjectRetain();
  v16(__src, v15, v125);
  swift_unknownObjectRelease();
  v17 = __src[0];
  v18 = swift_getObjectType();
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 32);
  swift_unknownObjectRetain();
  v20 = v19(v18, v127);
  v22 = v21;
  swift_unknownObjectRelease();
  memcpy(v137, __dst, 0x160uLL);
  v128 = v17;
  LOBYTE(v137[44]) = v17;
  v123 = v20;
  v137[45] = v20;
  v137[46] = v22;
  v137[47] = v8;
  v137[48] = v6;
  v23 = v8;
  if (one-time initialization token for cache != -1)
    swift_once();
  v25 = static ICUDateIntervalFormatter.cache;
  v24 = (os_unfair_lock_s *)unk_1EDC47DB0;
  memcpy(v135, v137, sizeof(v135));
  swift_retain_n();
  os_unfair_lock_lock(v24 + 6);
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v24[4], v135, __src);
  v126 = v24 + 6;
  os_unfair_lock_unlock(v24 + 6);
  swift_release();
  v26 = __src[0];
  if (__src[0] != 1)
    goto LABEL_72;
  v113 = v24 + 4;
  v114 = v24;
  v112 = v25;
  type metadata accessor for ICUDateIntervalFormatter();
  v116 = v23;
  v117 = swift_allocObject();
  v115 = v6;
  v119 = __dst[14];
  v121 = (void *)__dst[26];
  v94 = __dst[1];
  v95 = __dst[0];
  v134[0] = __dst[0];
  v134[1] = __dst[1];
  v92 = __dst[3];
  v93 = __dst[2];
  v134[2] = __dst[2];
  v134[3] = __dst[3];
  v90 = __dst[5];
  v91 = __dst[4];
  v134[4] = __dst[4];
  v134[5] = __dst[5];
  v88 = __dst[7];
  v89 = __dst[6];
  v134[6] = __dst[6];
  v134[7] = __dst[7];
  v86 = __dst[9];
  v87 = __dst[8];
  v134[8] = __dst[8];
  v134[9] = __dst[9];
  v84 = __dst[11];
  v85 = __dst[10];
  v134[10] = __dst[10];
  v134[11] = __dst[11];
  LOBYTE(v134[12]) = v17;
  v96 = __dst[13];
  v134[13] = __dst[13];
  v134[14] = __dst[14];
  v107 = __dst[16];
  v108 = __dst[15];
  v134[15] = __dst[15];
  v134[16] = __dst[16];
  v105 = __dst[18];
  v106 = __dst[17];
  v134[17] = __dst[17];
  v134[18] = __dst[18];
  v103 = __dst[20];
  v104 = __dst[19];
  v134[19] = __dst[19];
  v134[20] = __dst[20];
  v101 = __dst[22];
  v102 = __dst[21];
  v134[21] = __dst[21];
  v134[22] = __dst[22];
  v99 = __dst[24];
  v100 = __dst[23];
  v134[23] = __dst[23];
  v134[24] = __dst[24];
  v97 = BYTE1(__dst[25]);
  v98 = __dst[25];
  LOWORD(v134[25]) = __dst[25];
  v134[26] = __dst[26];
  v134[27] = __dst[27];
  v110 = __dst[28];
  v111 = __dst[27];
  v134[28] = __dst[28];
  v134[29] = __dst[29];
  v109 = __dst[29];
  v27 = __dst[31];
  v79 = __dst[30];
  v134[30] = __dst[30];
  v134[31] = __dst[31];
  v28 = __dst[33];
  v78 = __dst[32];
  v134[32] = __dst[32];
  v134[33] = __dst[33];
  v29 = __dst[35];
  v77 = __dst[34];
  v134[34] = __dst[34];
  v134[35] = __dst[35];
  v76 = __dst[36];
  v134[36] = __dst[36];
  v134[37] = __dst[37];
  v83 = __dst[37];
  v75 = __dst[38];
  v134[38] = __dst[38];
  v134[39] = __dst[39];
  v82 = __dst[39];
  v74 = __dst[40];
  v134[40] = __dst[40];
  v134[41] = __dst[41];
  v81 = __dst[41];
  v73 = __dst[42];
  v134[42] = __dst[42];
  v134[43] = __dst[43];
  v80 = __dst[43];
  memcpy(__src, v134, 0x160uLL);
  outlined retain of Locale.Components(__dst);
  outlined retain of ICUDateIntervalFormatter.Signature(v137);
  Locale.Components.icuIdentifier.getter();
  swift_bridgeObjectRetain();
  v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31 = specialized _copyCollectionToContiguousArray<A>(_:)(v116, v6);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v137);
  v32 = v31[2];
  if (v32 >> 31)
  {
    __break(1u);
    goto LABEL_31;
  }
  v123 = v29;
  if (v30[2] >> 31)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v115 = v28;
  v116 = v27;
  String.utf8CString.getter();
  v33 = udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v41 = v126;
  v26 = v117;
  v27 = (uint64_t)v114;
  if (!v33)
    goto LABEL_18;
  *(_QWORD *)(v117 + 16) = v33;
  udtitvfmt_setAttribute();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  outlined release of Locale.Components(v134);
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v41);
    v42 = *(_QWORD *)(v27 + 16);
    memcpy(__src, v135, sizeof(__src));
    if (v112 >= *(_QWORD *)(v42 + 16))
    {
      swift_bridgeObjectRetain();
      v43 = v113;
    }
    else
    {
      v43 = v113;
      *(_QWORD *)&v113->_os_unfair_lock_opaque = MEMORY[0x1E0DEE9E0];
    }
    outlined retain of ICUDateIntervalFormatter.Signature(__src);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v130 = *(_QWORD **)&v43->_os_unfair_lock_opaque;
    v31 = *(_QWORD **)&v43->_os_unfair_lock_opaque;
    *(_QWORD *)&v43->_os_unfair_lock_opaque = 0x8000000000000000;
    v32 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)__src);
    v46 = v31[2];
    v47 = (v45 & 1) == 0;
    v48 = v46 + v47;
    if (!__OFADD__(v46, v47))
      break;
LABEL_32:
    __break(1u);
    swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static ICUError.logger);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      __src[0] = v38;
      *(_DWORD *)v37 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000182305220, __src);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2080;
      v39 = ICUError.debugDescription.getter((UErrorCode)v31);
      v133[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v39, v40, __src);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1817D9000, v35, v36, "%s. Error: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v38, -1, -1);
      MEMORY[0x186DA9E78](v37, -1, -1);
    }

    v41 = v126;
    if (v32)
      udtitvfmt_close();
LABEL_18:
    __src[0] = v95;
    __src[1] = v94;
    __src[2] = v93;
    __src[3] = v92;
    __src[4] = v91;
    __src[5] = v90;
    __src[6] = v89;
    __src[7] = v88;
    __src[8] = v87;
    __src[9] = v86;
    __src[10] = v85;
    __src[11] = v84;
    LOBYTE(__src[12]) = v128;
    __src[13] = v96;
    __src[14] = v119;
    *(_DWORD *)((char *)&__src[12] + 1) = (_DWORD)v130;
    HIDWORD(__src[12]) = *(_DWORD *)((char *)&v130 + 3);
    __src[15] = v108;
    __src[16] = v107;
    __src[17] = v106;
    __src[18] = v105;
    __src[19] = v104;
    __src[20] = v103;
    __src[21] = v102;
    __src[22] = v101;
    __src[23] = v100;
    __src[24] = v99;
    LOBYTE(__src[25]) = v98;
    BYTE1(__src[25]) = v97;
    HIWORD(__src[25]) = v132;
    *(_DWORD *)((char *)&__src[25] + 2) = v131;
    __src[26] = (uint64_t)v121;
    __src[27] = v111;
    __src[28] = v110;
    __src[29] = v109;
    __src[30] = v79;
    __src[31] = v116;
    __src[32] = v78;
    __src[33] = v115;
    __src[34] = v77;
    __src[35] = v123;
    __src[36] = v76;
    __src[37] = v83;
    __src[38] = v75;
    __src[39] = v82;
    __src[40] = v74;
    __src[41] = v81;
    __src[42] = v73;
    __src[43] = v80;
    outlined release of Locale.Components(__src);
    swift_deallocPartialClassInstance();
    v26 = 0;
  }
  v49 = v45;
  if (v31[3] < v48)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
    v50 = v130;
    v51 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)__src);
    if ((v49 & 1) != (v52 & 1))
      goto LABEL_75;
    v32 = v51;
    if ((v49 & 1) == 0)
      goto LABEL_70;
LABEL_29:
    v53 = v26;
    v54 = v50[7];
    swift_release();
    *(_QWORD *)(v54 + 8 * v32) = v53;
    v26 = v53;
LABEL_71:
    *(_QWORD *)(v27 + 16) = v50;
    swift_bridgeObjectRelease();
    outlined release of ICUDateIntervalFormatter.Signature(__src);
    os_unfair_lock_unlock(v41);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1);
LABEL_72:
    outlined release of Locale.Components(__dst);
    swift_release();
    outlined release of ICUDateIntervalFormatter.Signature(v137);
    return v26;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v50 = v31;
    if ((v45 & 1) != 0)
      goto LABEL_29;
LABEL_70:
    specialized _NativeDictionary._insert(at:key:value:)(v32, __src, v26, v50);
    outlined retain of ICUDateIntervalFormatter.Signature(__src);
    goto LABEL_71;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  v55 = static _DictionaryStorage.copy(original:)();
  v50 = (_QWORD *)v55;
  if (!v31[2])
  {
LABEL_69:
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
      goto LABEL_29;
    goto LABEL_70;
  }
  v118 = v26;
  v56 = (char *)(v55 + 64);
  v122 = (char *)(v31 + 8);
  v57 = (unint64_t)((1 << *((_BYTE *)v50 + 32)) + 63) >> 6;
  if (v50 != v31 || v56 >= &v122[8 * v57])
    memmove(v56, v122, 8 * v57);
  v58 = 0;
  v50[2] = v31[2];
  v59 = 1 << *((_BYTE *)v31 + 32);
  v60 = -1;
  if (v59 < 64)
    v60 = ~(-1 << v59);
  v61 = v60 & v31[8];
  v120 = (unint64_t)(v59 + 63) >> 6;
  while (1)
  {
    v41 = v126;
    v26 = v118;
    if (v61)
    {
      v124 = (v61 - 1) & v61;
      v129 = v58;
      v62 = __clz(__rbit64(v61)) | (v58 << 6);
      goto LABEL_41;
    }
    v67 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    if (v67 >= v120)
      goto LABEL_69;
    v68 = *(_QWORD *)&v122[8 * v67];
    v69 = v58 + 1;
    if (!v68)
    {
      v69 = v67 + 1;
      if (v67 + 1 >= v120)
        goto LABEL_69;
      v68 = *(_QWORD *)&v122[8 * v69];
      if (!v68)
      {
        v69 = v67 + 2;
        if (v67 + 2 >= v120)
          goto LABEL_69;
        v68 = *(_QWORD *)&v122[8 * v69];
        if (!v68)
        {
          v69 = v67 + 3;
          if (v67 + 3 >= v120)
            goto LABEL_69;
          v68 = *(_QWORD *)&v122[8 * v69];
          if (!v68)
          {
            v69 = v67 + 4;
            if (v67 + 4 >= v120)
              goto LABEL_69;
            v68 = *(_QWORD *)&v122[8 * v69];
            if (!v68)
            {
              v69 = v67 + 5;
              if (v67 + 5 >= v120)
                goto LABEL_69;
              v68 = *(_QWORD *)&v122[8 * v69];
              if (!v68)
              {
                v69 = v67 + 6;
                if (v67 + 6 >= v120)
                  goto LABEL_69;
                v68 = *(_QWORD *)&v122[8 * v69];
                if (!v68)
                {
                  v69 = v67 + 7;
                  if (v67 + 7 >= v120)
                    goto LABEL_69;
                  v68 = *(_QWORD *)&v122[8 * v69];
                  if (!v68)
                  {
                    v69 = v67 + 8;
                    if (v67 + 8 >= v120)
                      goto LABEL_69;
                    v68 = *(_QWORD *)&v122[8 * v69];
                    if (!v68)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_68:
    v124 = (v68 - 1) & v68;
    v129 = v69;
    v62 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_41:
    v63 = 392 * v62;
    v64 = (const void *)(v31[6] + 392 * v62);
    memcpy(v133, v64, sizeof(v133));
    v65 = 8 * v62;
    v66 = *(_QWORD *)(v31[7] + 8 * v62);
    memmove((void *)(v50[6] + v63), v64, 0x188uLL);
    *(_QWORD *)(v50[7] + v65) = v66;
    outlined retain of ICUDateIntervalFormatter.Signature(v133);
    swift_retain();
    v58 = v129;
    v61 = v124;
  }
  v70 = v67 + 9;
  if (v70 >= v120)
    goto LABEL_69;
  v71 = v50;
  v68 = *(_QWORD *)&v122[8 * v70];
  if (v68)
  {
    v69 = v70;
    v27 = (uint64_t)v114;
    goto LABEL_68;
  }
  while (1)
  {
    v69 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    v26 = v118;
    v50 = v71;
    v41 = v126;
    v27 = (uint64_t)v114;
    if (v69 >= v120)
      goto LABEL_69;
    v68 = *(_QWORD *)&v122[8 * v69];
    ++v70;
    if (v68)
      goto LABEL_68;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t destroy for ICUDateIntervalFormatter.Signature(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  if (a1[41])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v8 = *(_QWORD *)(a2 + 72);
    if (v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_7:
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 112);
  if (v13)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = *(_QWORD *)(a2 + 144);
    if (v15)
      goto LABEL_10;
LABEL_13:
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    v17 = *(_QWORD *)(a2 + 176);
    if (v17)
      goto LABEL_11;
    goto LABEL_14;
  }
  v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  v15 = *(_QWORD *)(a2 + 144);
  if (!v15)
    goto LABEL_13;
LABEL_10:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = *(_QWORD *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v17;
    v18 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
LABEL_14:
  v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  v22 = *(_QWORD *)(a2 + 216);
  if (v22)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v22;
    v23 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = *(_QWORD *)(a2 + 248);
    if (v24)
      goto LABEL_17;
LABEL_20:
    v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    v26 = *(_QWORD *)(a2 + 280);
    if (v26)
      goto LABEL_18;
    goto LABEL_21;
  }
  v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  v24 = *(_QWORD *)(a2 + 248);
  if (!v24)
    goto LABEL_20;
LABEL_17:
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v24;
  v25 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = *(_QWORD *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v26;
    v27 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
LABEL_21:
  v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  v31 = *(_QWORD *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v31;
    v32 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v33;
  }
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  v34 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v34;
  v35 = *(_QWORD *)(a2 + 376);
  v36 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v35;
  *(_QWORD *)(a1 + 384) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  v7 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      v10 = *(_OWORD *)(a2 + 48);
      *v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }
  v12 = (_OWORD *)(a1 + 64);
  v13 = (_OWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      v15 = *(_OWORD *)(a2 + 80);
      *v12 = *v13;
      *(_OWORD *)(a1 + 80) = v15;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 80);
    *v12 = *v13;
    *(_OWORD *)(a1 + 80) = v16;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v17 = (_OWORD *)(a1 + 104);
  v18 = (_OWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      v20 = *(_OWORD *)(a2 + 120);
      *v17 = *v18;
      *(_OWORD *)(a1 + 120) = v20;
    }
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 120);
    *v17 = *v18;
    *(_OWORD *)(a1 + 120) = v21;
  }
  v22 = (_OWORD *)(a1 + 136);
  v23 = (_OWORD *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v24)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Currency(a1 + 136);
      v25 = *(_OWORD *)(a2 + 152);
      *v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }
  else if (v24)
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 152);
    *v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }
  v27 = (_OWORD *)(a1 + 168);
  v28 = (_OWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v29)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      v30 = *(_OWORD *)(a2 + 184);
      *v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 184);
    *v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v32 = (_OWORD *)(a1 + 208);
  v33 = (_OWORD *)(a2 + 208);
  v34 = *(_QWORD *)(a2 + 216);
  if (*(_QWORD *)(a1 + 216))
  {
    if (v34)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 208);
      v35 = *(_OWORD *)(a2 + 224);
      *v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 224);
    *v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }
  v37 = (_OWORD *)(a1 + 240);
  v38 = (_OWORD *)(a2 + 240);
  v39 = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 248))
  {
    if (v39)
    {
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 240);
      v40 = *(_OWORD *)(a2 + 256);
      *v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }
  else if (v39)
  {
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 256);
    *v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }
  v42 = (_OWORD *)(a1 + 272);
  v43 = (_OWORD *)(a2 + 272);
  v44 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v44)
    {
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Subdivision(a1 + 272);
      v45 = *(_OWORD *)(a2 + 288);
      *v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }
  else if (v44)
  {
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *(_OWORD *)(a2 + 288);
    *v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }
  v47 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 312) = v47;
  v48 = (_OWORD *)(a1 + 320);
  v49 = (_OWORD *)(a2 + 320);
  v50 = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 328))
  {
    if (v50)
    {
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Variant(a1 + 320);
      v51 = *(_OWORD *)(a2 + 336);
      *v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }
  else if (v50)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v52 = *(_OWORD *)(a2 + 336);
    *v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Collation(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.Currency(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.NumberingSystem(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.MeasurementSystem(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.Subdivision(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

uint64_t outlined destroy of Locale.Variant(uint64_t a1)
{
  destroy for _POSIXDirectoryContentsSequence();
  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t assignWithTake for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(_QWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a2 + 72);
    if (v10)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Locale.Region(a1 + 64);
  }
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_16:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a2 + 112);
    if (v13)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.Collation(a1 + 104);
  }
  v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
LABEL_21:
  if (*(_QWORD *)(a1 + 144))
  {
    v16 = *(_QWORD *)(a2 + 144);
    if (v16)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Locale.Currency(a1 + 136);
  }
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(_QWORD *)(a1 + 176))
  {
    v19 = *(_QWORD *)(a2 + 176);
    if (v19)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }
  v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 216))
  {
    v22 = *(_QWORD *)(a2 + 216);
    if (v22)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v22;
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.MeasurementSystem(a1 + 208);
  }
  v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(_QWORD *)(a1 + 248))
  {
    v25 = *(_QWORD *)(a2 + 248);
    if (v25)
    {
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    outlined destroy of Locale.Region(a1 + 240);
  }
  v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(_QWORD *)(a1 + 280))
  {
    v28 = *(_QWORD *)(a2 + 280);
    if (v28)
    {
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = v28;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    outlined destroy of Locale.Subdivision(a1 + 272);
  }
  v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  v31 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 312) = v31;
  if (!*(_QWORD *)(a1 + 328))
  {
LABEL_50:
    v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    goto LABEL_51;
  }
  v32 = *(_QWORD *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.Variant(a1 + 320);
    goto LABEL_50;
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
LABEL_51:
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  v35 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v35;
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 392))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 368);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 392) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 368) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 392) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICUDateIntervalFormatter.Signature()
{
  return &type metadata for ICUDateIntervalFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUDateIntervalFormatter.Signature, &type metadata for ICUDateIntervalFormatter.Signature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature);
  }
  return result;
}

uint64_t static AttributedString.Runs.Run.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (((unint64_t)a1[6] >> 11) - ((unint64_t)a1[2] >> 11) == ((unint64_t)a2[6] >> 11)
                                                                          - ((unint64_t)a2[2] >> 11)
    && (v2 = a2[1], v3 = a1[1], (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0))
  {
    return specialized static Set.== infix(_:_:)(v3, v2);
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Runs.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (((unint64_t)a1[6] >> 11) - ((unint64_t)a1[2] >> 11) == ((unint64_t)a2[6] >> 11)
                                                                          - ((unint64_t)a2[2] >> 11)
    && (v2 = a2[1], v3 = a1[1], (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0))
  {
    return specialized static Set.== infix(_:_:)(v3, v2);
  }
  else
  {
    return 0;
  }
}

uint64_t AttributedString.Runs.Run.description.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[48];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v1 = *(_OWORD *)(v0 + 32);
  v17 = *(_OWORD *)(v0 + 16);
  v18 = v1;
  v2 = *(_OWORD *)(v0 + 64);
  v19 = *(_OWORD *)(v0 + 48);
  v20 = v2;
  v3 = *(_OWORD **)(v0 + 80);
  v4 = v3[2];
  v21 = v3[1];
  v22 = v4;
  v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v7);
  outlined release of Locale((uint64_t)v8);
  v13 = v9;
  v14 = v10;
  v15 = v11;
  v16 = v12;
  v5 = AttributedString.Guts.description(in:)();
  swift_release();
  return v5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.Runs.Run()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[48];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v1 = *(_OWORD *)(v0 + 32);
  v17 = *(_OWORD *)(v0 + 16);
  v18 = v1;
  v2 = *(_OWORD *)(v0 + 64);
  v19 = *(_OWORD *)(v0 + 48);
  v20 = v2;
  v3 = *(_OWORD **)(v0 + 80);
  v4 = v3[2];
  v21 = v3[1];
  v22 = v4;
  v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v7);
  outlined release of Locale((uint64_t)v8);
  v13 = v9;
  v14 = v10;
  v15 = v11;
  v16 = v12;
  v5 = AttributedString.Guts.description(in:)();
  swift_release();
  return v5;
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t assignWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_release();
  return a1;
}

unint64_t closure #1 in _SearchPathURLs(for:in:expandTilde:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v4 = *a1;
  v5 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = specialized Collection.first.getter(v4, v5);
    if (v7)
    {
      if (v6 == 126 && v7 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
          goto LABEL_25;
      }
      v10 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v4, v5);
      if ((v11 & 1) != 0)
      {
        v13 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v13 = v4;
        v14 = v13 << 16;
        if ((v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0)
          v12 = v14 | 7;
        else
          v12 = v14 | 0xB;
      }
      else
      {
        v12 = v10;
      }
      result = String.index(after:)();
      if (v12 >> 14 == result >> 14)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        if (v12 >> 14 < result >> 14)
        {
          __break(1u);
          return result;
        }
        v18 = String.subscript.getter();
        v16 = MEMORY[0x186DA4634](v18);
        v17 = v19;
        swift_bridgeObjectRelease();
      }
      v20 = static String.homeDirectoryPath(forUser:)(v16, v17);
      v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v23 = specialized Collection.suffix(from:)(v12, v4, v5);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      swift_bridgeObjectRelease();
      v34[0] = v20;
      v34[1] = v22;
      v30 = v23;
      v31 = v25;
      v32 = v27;
      v33 = v29;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v20;
      v5 = v22;
    }
LABEL_25:
    LOBYTE(v34[0]) = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)(v4, v5, (unsigned __int8 *)v34, (uint64_t)&v30, a3);
  }
  LOBYTE(v34[0]) = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  swift_bridgeObjectRetain();
  return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)(v4, v5, (unsigned __int8 *)v34, (uint64_t)&v30, a3);
}

Swift::String_optional __swiftcall _DarwinSearchPathsSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t isStackAllocationSafe;
  __n128 v3;
  int v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  int v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String_optional result;
  char v18[1048];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(v0 + 32);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    v3 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v4 = MEMORY[0x186DA9FF8](v1, v18, v3);
    *(_DWORD *)(v0 + 32) = v4;
    if (v4)
    {
      v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v6 = objc_msgSend(v5, sel_stringWithFileSystemRepresentation_length_, v18, strlen(v18));

      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;

    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
  }
  else
  {
    v10 = (const char *)swift_slowAlloc();
    v11 = MEMORY[0x186DA9FF8](v1, v10);
    *(_DWORD *)(v0 + 32) = v11;
    if (v11)
    {
      v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v13 = objc_msgSend(v12, sel_stringWithFileSystemRepresentation_length_, v10, strlen(v10));

      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v9 = v14;

    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    MEMORY[0x186DA9E78](v10, -1, -1);
  }
  v15 = (uint64_t)v7;
  v16 = v9;
  result.value._object = v16;
  result.value._countAndFlagsBits = v15;
  return result;
}

uint64_t _DarwinSearchPathsSequence.Iterator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _DarwinSearchPathsSequence.Iterator()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for _DarwinSearchPathsSequence()
{
  return &type metadata for _DarwinSearchPathsSequence;
}

_DWORD *__swift_memcpy4_4(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

void *type metadata accessor for _DarwinSearchPathsSequence.Iterator.State()
{
  return &unk_1E0F14B58;
}

unint64_t lazy protocol witness table accessor for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator;
  if (!lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator)
  {
    v1 = type metadata accessor for _DarwinSearchPathsSequence.Iterator();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _DarwinSearchPathsSequence.Iterator, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator);
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _DarwinSearchPathsSequence.Iterator@<X0>(Swift::String_optional *a1@<X8>)
{
  uint64_t result;
  Swift::String_optional v3;

  v3 = _DarwinSearchPathsSequence.Iterator.next()();
  result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _DarwinSearchPathsSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  result = sysdir_start_search_path_enumeration_private();
  *(_DWORD *)(v5 + 32) = result;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence()
{
  return 2;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance _DarwinSearchPathsSequence()
{
  return specialized _copySequenceToContiguousArray<A>(_:)();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _DarwinSearchPathsSequence(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _DarwinSearchPathsSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5(a1, a2);
}

id bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  void (*v8)(_BYTE *__return_ptr, uint64_t, _QWORD *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void (*v19)(_BYTE *__return_ptr, uint64_t, _QWORD *);
  char v20;
  void (*v21)(uint64_t, _QWORD *);
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id result;
  NSUnitVolume *v35;
  id v36;
  _QWORD v37[21];
  int v38;
  id v39;
  _BYTE v40[12];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v39 = a2;
  v44 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *a3;
  if (type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitTemperature) == a4)
  {
    ObjectType = swift_getObjectType();
    v19 = (void (*)(_BYTE *__return_ptr, uint64_t, _QWORD *))v5[57];
    swift_unknownObjectRetain();
    v19(&v40[4], ObjectType, v5);
    swift_unknownObjectRelease();
    v20 = v40[4];
    if (v40[4] != 2)
    {
      v23 = (void *)objc_opt_self();
      if ((v20 & 1) != 0)
        v24 = objc_msgSend(v23, sel_celsius);
      else
        v24 = objc_msgSend(v23, sel_fahrenheit);
      v36 = v24;
      return (id)swift_dynamicCastUnknownClassUnconditional();
    }
    v21 = (void (*)(uint64_t, _QWORD *))v5[8];
    swift_unknownObjectRetain();
    v22 = ObjectType;
    goto LABEL_8;
  }
  v7 = swift_getObjectType();
  v8 = (void (*)(_BYTE *__return_ptr, uint64_t, _QWORD *))v5[56];
  swift_unknownObjectRetain();
  v8(&v40[4], v7, v5);
  swift_unknownObjectRelease();
  v9 = v41;
  if (!v41)
  {
    v21 = (void (*)(uint64_t, _QWORD *))v5[8];
    swift_unknownObjectRetain();
    v22 = v7;
LABEL_8:
    v21(v22, v5);
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v38 = v6;
  v37[20] = a4;
  v10 = *(_QWORD *)&v40[4];
  v11 = v42;
  v12 = v43;
  v13 = (uint64_t (*)(uint64_t, _QWORD *))v5[8];
  swift_unknownObjectRetain();
  v14 = v13(v7, v5);
  v16 = v15;
  v17 = swift_unknownObjectRelease();
  *(_QWORD *)&v40[4] = 0;
  v41 = 0;
  MEMORY[0x1E0C80A78](v17);
  closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)((uint64_t)v37, 158, v14, v16, 29549, 0xE200000000000000, v11, v12, (uint64_t *)&v40[4]);
  if (v41)
    swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v10, v9);
  LOBYTE(v6) = v38;
LABEL_12:
  *(_QWORD *)v40 = 0;
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v30 = Usage.rawValue.getter(v6);
    v32 = v31;
    if (v29)
    {
      if ((v27 == (id)0x796772656E65 && v29 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v30 == 0x746C7561666564 && v32 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v33 = 0;
      }
      else
      {
        v33 = 0;
      }
      goto LABEL_24;
    }
  }
  else
  {
    Usage.rawValue.getter(v6);
  }
  v33 = 1;
LABEL_24:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v40 >= 1)
  {
    swift_bridgeObjectRelease();
    return v39;
  }
  v35 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v40[4]);
  swift_bridgeObjectRelease();
  if (!v35)
    return v39;
  result = (id)swift_dynamicCastUnknownClass();
  if (!result)
  {

    return v39;
  }
  return result;
}

id NSDimension.init(forLocale:)(__int128 *a1)
{
  uint64_t v1;
  void *ObjCClassFromMetadata;
  id v3;
  id v4;
  id result;
  id v6;
  unsigned __int8 v7;
  __int128 v8;

  v8 = *a1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v3 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  static MeasurementFormatUnitUsage.general.getter(&v7, v1);
  v4 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v8, v3, &v7, v1);
  swift_unknownObjectRelease();

  result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v4);
  if (result)
  {
    v6 = result;

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NSUnitEnergy.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *ObjCClassFromMetadata;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  char v13;
  id result;
  id v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v6 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v2, v3, v6, v4, &lazy cache variable for type metadata for NSUnitEnergy, (uint64_t)off_1E0F11298);
  swift_unknownObjectRelease();

  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_foodcalories);
  v11 = v9;
  if (v10)
  {
    v12 = v10;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitEnergy);
    v11 = v9;
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0)
      goto LABEL_5;
    v11 = objc_msgSend(v8, sel_kilocalories);
  }

LABEL_5:
  result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    v15 = result;

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NSUnitMass.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitMass, (uint64_t)off_1E0F112F0);
}

id NSUnitVolume.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitVolume, (uint64_t)off_1E0F11340);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setScheme(_:)(Swift::String_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t object;
  unint64_t countAndFlagsBits;
  __int16 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  char v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  __int128 v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  int v50;
  char v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  unint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  unsigned __int16 *v81;
  id v82;
  void *v83;
  id v84;
  char v85;
  _BYTE *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD v90[4];
  uint64_t v91;
  int32_t (__cdecl **v92)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v93;
  int v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  int32_t (__cdecl *v100)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v101;
  int32_t (__cdecl *v102)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v103;
  unsigned __int8 v104;
  _BYTE *v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  unsigned __int8 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  char v127;
  uint64_t v128;

  v3 = v1;
  object = (unint64_t)a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  *(_WORD *)(v1 + 8) = 0;
  if (a1.value._object)
  {
    v6 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
    if ((v6 & 0x100) == 0 && v6 >= 0x41u)
    {
      if ((object & 0x1000000000000000) != 0)
      {
        v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
        v103 = object;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v81 = (unsigned __int16 *)objc_msgSend(v80, sel__fastCharacterContents);
        v82 = v80;
        if (v81)
        {
          v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          v103 = object;
          StringProtocol._ephemeralString.getter();
          v83 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v84 = objc_msgSend(v83, sel_length);
          swift_unknownObjectRelease();
          v85 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, (uint64_t)v84, 1u, 0);
        }
        else
        {
          v85 = specialized Sequence.allSatisfy(_:)(countAndFlagsBits, object, 1);
        }
        swift_bridgeObjectRelease();
        if ((v85 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v8 = HIBYTE(object) & 0xF;
          v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))countAndFlagsBits;
          v103 = object & 0xFFFFFFFFFFFFFFLL;
          v7 = (char *)&v102;
        }
        else if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v7 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v7 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 1u, 0))
          goto LABEL_10;
      }
    }
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *v86 = 0;
    swift_willThrow();
    return;
  }
LABEL_10:
  v128 = v2;
  *(_QWORD *)(v3 + 24) = countAndFlagsBits;
  *(_QWORD *)(v3 + 32) = object;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRelease();
  v10 = *(_BYTE **)v3;
  v11 = *(_BYTE *)(v3 + 8);
  v12 = *(_BYTE *)(v3 + 9);
  v13 = *(unsigned __int8 *)(v3 + 10);
  v14 = *(unsigned __int8 *)(v3 + 11);
  v15 = *(_BYTE *)(v3 + 12);
  v16 = *(unsigned __int8 *)(v3 + 13);
  v17 = *(_BYTE *)(v3 + 14);
  v18 = *(_BYTE *)(v3 + 15);
  v19 = *(_BYTE *)(v3 + 16);
  v20 = *(_QWORD *)(v3 + 40);
  v21 = *(_QWORD *)(v3 + 64);
  v22 = *(_QWORD *)(v3 + 72);
  v24 = *(unsigned __int8 *)(v3 + 152);
  v25 = *(_BYTE *)(v3 + 153);
  v104 = *(_BYTE *)(v3 + 96);
  v23 = v104;
  v105 = v10;
  v106 = v11;
  v107 = v12;
  v108 = v13;
  v109 = v14;
  v110 = v15;
  v111 = v16;
  v112 = v17;
  v113 = v18;
  v114 = v19;
  v115 = countAndFlagsBits;
  v116 = object;
  v117 = v20;
  v26 = *(_OWORD *)(v3 + 48);
  v118 = v26;
  v119 = v21;
  v120 = v22;
  v121 = *(_OWORD *)(v3 + 80);
  v122 = v104;
  v123 = *(_OWORD *)(v3 + 104);
  v124 = *(_OWORD *)(v3 + 120);
  v125 = *(_OWORD *)(v3 + 136);
  v126 = v24;
  v127 = v25;
  if ((_QWORD)v121)
  {
    v27 = v121;
    goto LABEL_51;
  }
  v95 = v26;
  v96 = v21;
  v97 = v14;
  v94 = v24;
  v28 = v15 ^ 1;
  if (v10)
    v29 = v28;
  else
    v29 = 1;
  if ((v29 & 1) == 0 && (v10[120] & 1) == 0)
  {
    v36 = String.subscript.getter();
    MEMORY[0x186DA4634](v36);
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
    v33 = v97;
    v34 = v96;
    v35 = v95;
    if ((v10[120] & 1) != 0)
    {
LABEL_21:
      if (v23)
      {
        if (v16 && v10 && (v10[144] & 1) == 0)
        {
          v39 = String.subscript.getter();
          v43 = v42;
          if ((v39 ^ v40) >> 14)
          {
            v44 = v39;
            v45 = v40;
            v46 = v41;
            v47 = v128;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v39, v40, v41, v42, 10);
            v128 = v47;
            if ((v48 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v44, v45, v46, v43, 10);
              v52 = v51;
              v9 = swift_bridgeObjectRelease();
              v50 = v52 & 1;
            }
            else
            {
              v49 = v48;
              v9 = swift_bridgeObjectRelease();
              v50 = v49 & 1;
            }
            v22 = 0;
            v27 = 0xE000000000000000;
            LOBYTE(v24) = v94;
            v33 = v97;
            v34 = v96;
            if (!v50 || (_QWORD)v95)
            {
LABEL_51:
              v56 = v22 & 0xFFFFFFFFFFFFLL;
              if ((v27 & 0x2000000000000000) != 0)
                v57 = HIBYTE(v27) & 0xF;
              else
                v57 = v22 & 0xFFFFFFFFFFFFLL;
              if (!v57)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v53 = 0;
                v54 = 0xE000000000000000;
                goto LABEL_71;
              }
              if ((v24 & 1) != 0)
              {
                v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                v103 = v27;
                MEMORY[0x1E0C80A78](v9);
                v92 = &v102;
                v93 = MEMORY[0x1E0DEE9E8];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v91, v22, v27);
                if (v59 == 1)
                {
                  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
                  v61 = v103;
                  swift_bridgeObjectRetain();
                  v53 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v60, v61, MEMORY[0x1E0DEE9E8]);
                  v54 = v62;
LABEL_58:
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  goto LABEL_71;
                }
                v53 = (unint64_t)v58;
                v54 = v59;
LABEL_70:
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }
              if ((v27 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v27 & 0x2000000000000000) != 0)
                {
                  v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                  v103 = v27 & 0xFFFFFFFFFFFFFFLL;
                  v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  v101 = 0;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v102, HIBYTE(v27) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100, 0, (unsigned __int8 *)&v102, HIBYTE(v27) & 0xF, (uint64_t *)&v98);
                  v53 = v98;
                  v54 = v99;
                  swift_release();
                }
                else
                {
                  if ((v22 & 0x1000000000000000) != 0)
                  {
                    v63 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    v63 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                    v56 = v87;
                  }
                  v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  v103 = 0;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v63, v56, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102, 0, v63, v56);
                  v54 = v64;
                }
                swift_bridgeObjectRelease();
                if (v54 != 1)
                  goto LABEL_70;
              }
              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              v103 = v27;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol._ephemeralString.getter();
              v65 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v66 = objc_msgSend(v65, sel__fastCharacterContents);
              v67 = v65;
              if (v66)
              {
                v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                v103 = v27;
                StringProtocol._ephemeralString.getter();
                v68 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v69 = objc_msgSend(v68, sel_length);
                v70 = swift_unknownObjectRelease();
                v71 = MEMORY[0x1E0C80A78](v70);
                LOBYTE(v92) = 0;
                MEMORY[0x1E0C80A78](v71);
                v90[2] = v66;
                v90[3] = v69;
                v53 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v66, (uint64_t)v69, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v72, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v90);
                v54 = v73;
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }
              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              v103 = v27;
              swift_bridgeObjectRetain();
              v75 = String.init<A>(_:)();
              v76 = v74;
              if ((v74 & 0x1000000000000000) != 0)
              {
                v75 = static String._copying(_:)();
                v89 = v88;
                swift_bridgeObjectRelease();
                v76 = v89;
                if ((v89 & 0x2000000000000000) == 0)
                  goto LABEL_74;
              }
              else if ((v74 & 0x2000000000000000) == 0)
              {
LABEL_74:
                if ((v75 & 0x1000000000000000) != 0)
                {
                  v77 = (unsigned __int8 *)((v76 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v78 = v75 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v77 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                }
                v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                v103 = 0;
                v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v77, v78, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102, 0, v77, v78);
                v54 = v79;
                goto LABEL_58;
              }
              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v75;
              v103 = v76 & 0xFFFFFFFFFFFFFFLL;
              v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              v101 = 0;
              closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v102, HIBYTE(v76) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100, 0, (unsigned __int8 *)&v102, HIBYTE(v76) & 0xF, (uint64_t *)&v98);
              v53 = v98;
              v54 = v99;
              swift_release();
              goto LABEL_58;
            }
LABEL_38:
            if (v13 && v10 && (v10[72] & 1) == 0)
            {
LABEL_49:
              v55 = String.subscript.getter();
              MEMORY[0x186DA4634](v55);
              swift_bridgeObjectRelease();
              v9 = swift_bridgeObjectRelease();
              LOBYTE(v24) = v94;
              goto LABEL_50;
            }
            if (!v34)
            {
              v53 = 0;
              if (!v33)
              {
                v54 = 0;
                goto LABEL_71;
              }
              if (!v10)
              {
                v54 = 0;
                goto LABEL_71;
              }
              if ((v10[96] & 1) != 0)
              {
                v53 = 0;
                v54 = 0;
LABEL_71:
                URLComponents._URLComponents.host.setter(v53, v54);
                return;
              }
              goto LABEL_49;
            }
LABEL_50:
            v22 = 0;
            v27 = 0xE000000000000000;
            goto LABEL_51;
          }
          v9 = swift_bridgeObjectRelease();
          v33 = v97;
          v34 = v96;
          v35 = v95;
        }
        LOBYTE(v24) = v94;
        if (v35)
          goto LABEL_50;
        goto LABEL_38;
      }
      v22 = 0;
      v27 = 0xE000000000000000;
LABEL_30:
      LOBYTE(v24) = v94;
      goto LABEL_51;
    }
LABEL_29:
    v37 = String.subscript.getter();
    v22 = MEMORY[0x186DA4634](v37);
    v27 = v38;
    v9 = swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v9 = URLComponents._URLComponents.port.getter();
  if ((v30 & 1) == 0
    || (URLComponents._URLComponents.percentEncodedUser.getter(), v32 = v31, v9 = swift_bridgeObjectRelease(), v32))
  {
    v33 = v97;
    v34 = v96;
    v35 = v95;
    if ((v29 & 1) != 0 || (v10[120] & 1) != 0)
      goto LABEL_21;
    goto LABEL_29;
  }
}

uint64_t URLComponents._URLComponents.encodedHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[8];
  _BYTE v16[16];
  _BYTE v17[8];
  _BYTE v18[16];
  _BYTE v19[8];
  _BYTE v20[16];
  _BYTE v21[8];
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;

  if (!*(_QWORD *)(v0 + 80))
  {
    if ((*(_BYTE *)(v0 + 12) & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v21, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v22, &demangling cache variable for type metadata for URLParseInfo?);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 120) & 1) == 0)
        {
          v12 = String.subscript.getter();
          v1 = MEMORY[0x186DA4634](v12);
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 88, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Int?);
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Int?);
    if (v23[8] == 1)
    {
      if ((*(_BYTE *)(v0 + 13) & 1) != 0)
      {
        outlined init with take of LocalePreferences?(v0, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v24, &demangling cache variable for type metadata for URLParseInfo?);
        if (v24)
        {
          if ((*(_BYTE *)(v24 + 144) & 1) == 0)
          {
            v2 = String.subscript.getter();
            v6 = v5;
            if ((v2 ^ v3) >> 14)
            {
              v7 = v2;
              v8 = v3;
              v9 = v4;
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
              if ((v10 & 0x100) != 0)
                specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
              v11 = v10;
              swift_bridgeObjectRelease();
              if ((v11 & 1) == 0)
                goto LABEL_25;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      outlined init with take of LocalePreferences?(v0 + 40, (uint64_t)v18, &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v25, &demangling cache variable for type metadata for String?);
      if (!v26)
      {
        if ((*(_BYTE *)(v0 + 10) & 1) != 0)
        {
          outlined init with take of LocalePreferences?(v0, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
          outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v27, &demangling cache variable for type metadata for URLParseInfo?);
          if (v27)
          {
            if ((*(_BYTE *)(v27 + 72) & 1) == 0)
            {
LABEL_24:
              v13 = String.subscript.getter();
              MEMORY[0x186DA4634](v13);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
          }
        }
        outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v16, &demangling cache variable for type metadata for String?);
        outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v28, &demangling cache variable for type metadata for String?);
        if (!v29)
        {
          if ((*(_BYTE *)(v0 + 11) & 1) == 0
            || (outlined init with take of LocalePreferences?(v0, (uint64_t)v15, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)&v30, &demangling cache variable for type metadata for URLParseInfo?), !v30)|| (*(_BYTE *)(v30 + 96) & 1) != 0)
          {
            v1 = 0;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    v1 = 0;
    goto LABEL_26;
  }
  v1 = *(_QWORD *)(v0 + 72);
LABEL_26:
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents._URLComponents.host.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;
  unint64_t object;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  Swift::Int v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  Swift::Int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  int32_t (__cdecl *v79)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  unint64_t v80;
  char *v81;
  uint64_t v82;
  int32_t (__cdecl *v83)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  unint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  Swift::Int v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  void *v113;
  unsigned __int16 *v114;
  id v115;
  void *v116;
  id v117;
  char v118;
  char v119;
  void *v120;
  unsigned __int16 *v121;
  id v122;
  unsigned __int16 *v123;
  void *v124;
  id v125;
  char v126;
  uint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD v131[4];
  _BYTE v132[16];
  int32_t (__cdecl **v133)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  char v134;
  int32_t (__cdecl *v135)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int32_t (__cdecl *v141)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v142;

  v4 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 72) = a1;
    *(_QWORD *)(v2 + 80) = 0;
    return result;
  }
  v7 = specialized Collection.first.getter(a1, a2);
  if ((v7 & 0x1FF) != 0x5B)
    goto LABEL_26;
  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      goto LABEL_208;
    }
    v9 = (a1 >> 59) & 1;
    v7 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
LABEL_8:
    if ((v7 & 0xC) != 4 << v9)
      goto LABEL_9;
    goto LABEL_168;
  }
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v7 = (v8 << 16) - 65532;
    LOBYTE(v9) = 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_168:
  v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_9:
  v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v10 = a1 & 0xFFFFFFFFFFFFLL;
  v11 = v7 >> 16;
  if (v7 >> 16 >= v10)
  {
    __break(1u);
    goto LABEL_170;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v13 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
    v136 = a2 & 0xFFFFFFFFFFFFFFLL;
    v13 = *((_BYTE *)&v135 + v11);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v12 = _StringObject.sharedUTF8.getter();
    v13 = *(_BYTE *)(v12 + v11);
  }
  if (v13 != 93)
  {
LABEL_26:
    if ((a2 & 0x1000000000000000) != 0)
    {
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      v115 = v113;
      if (v114)
      {
        v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        v136 = a2;
        StringProtocol._ephemeralString.getter();
        v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, (uint64_t)v117, 4u, 1);
      }
      else
      {
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
      }
      v119 = v118;
      swift_bridgeObjectRelease_n();
      if ((v119 & 1) == 0)
        goto LABEL_22;
      goto LABEL_32;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      v19 = HIBYTE(a2) & 0xF;
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      v18 = (char *)&v135;
      goto LABEL_31;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v18 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v19 = a1 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }
LABEL_170:
    v18 = (char *)_StringObject.sharedUTF8.getter();
LABEL_31:
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 4u, 1))
      goto LABEL_22;
LABEL_32:
    swift_bridgeObjectRetain();
    v20 = swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 72) = a1;
    *(_QWORD *)(v4 + 80) = a2;
    LOBYTE(v135) = 37;
    MEMORY[0x1E0C80A78](v20);
    v133 = &v135;
    v21 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v132, a1, a2);
    result = swift_bridgeObjectRelease();
    v22 = v21 & 1;
    goto LABEL_158;
  }
  swift_bridgeObjectRetain();
  v15 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_32;
LABEL_22:
  if (*(_QWORD *)(v4 + 32))
  {
    object = *(_QWORD *)(v4 + 24);
    v17 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    object = 0;
    if (*(_BYTE *)(v4 + 9) == 1)
    {
      v17 = 0;
      if (*(_QWORD *)v4)
      {
        if ((*(_BYTE *)(*(_QWORD *)v4 + 48) & 1) != 0)
        {
          object = 0;
          v17 = 0;
        }
        else
        {
          v52 = String.subscript.getter();
          object = MEMORY[0x186DA4634](v52);
          v17 = v53;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      v17 = 0;
    }
  }
  if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v17)
  {
    v23 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23 != -1)
      swift_once();
    v24 = static RFC3986Parser.schemesToPercentEncodeHost;
    v25 = String.lowercased()();
    object = (unint64_t)v25._object;
    LOBYTE(v24) = specialized Set.contains(_:)(v25._countAndFlagsBits, (uint64_t)v25._object, v24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
LABEL_37:
      if ((a2 & 0x2000000000000000) != 0)
        v26 = HIBYTE(a2) & 0xF;
      else
        v26 = a1 & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
        v27 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
        if ((v27 & 1) == 0)
        {
          v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
          v136 = a2;
          MEMORY[0x1E0C80A78](v27);
          v133 = &v135;
          v134 = 4;
          swift_bridgeObjectRetain();
LABEL_137:
          v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v132, a1, a2);
          if (v84)
          {
            v79 = v83;
            v80 = v84;
            swift_bridgeObjectRelease_n();
            goto LABEL_157;
          }
          v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
          v86 = v136;
          swift_bridgeObjectRetain();
          v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v85, v86, 4u);
          v80 = v87;
          swift_bridgeObjectRelease_n();
          goto LABEL_156;
        }
        result = specialized Collection.first.getter(a1, a2);
        if ((result & 0x100) == 0)
        {
          if (result == 91)
          {
            if ((a2 & 0x1000000000000000) == 0)
            {
              v28 = (v26 << 16) - 65532;
              LOBYTE(v29) = 1;
LABEL_46:
              if ((v28 & 0xC) == 4 << v29)
                v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v28, a1, a2);
              v30 = v28 >> 16;
              if (v28 >> 16 >= v26)
              {
                __break(1u);
              }
              else
              {
                if ((a2 & 0x1000000000000000) != 0)
                {
                  v32 = String.UTF8View._foreignSubscript(position:)();
                }
                else if ((a2 & 0x2000000000000000) != 0)
                {
                  v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                  v136 = a2 & 0xFFFFFFFFFFFFFFLL;
                  v32 = *((_BYTE *)&v135 + v30);
                }
                else
                {
                  if ((a1 & 0x1000000000000000) != 0)
                    v31 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  else
                    v31 = _StringObject.sharedUTF8.getter();
                  v32 = *(_BYTE *)(v31 + v30);
                }
                if (v32 == 93)
                {
                  v54 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                  if ((v55 & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
                    {
                      swift_bridgeObjectRelease_n();
                      result = swift_bridgeObjectRelease();
                      *(_QWORD *)(v4 + 72) = 0;
                      *(_QWORD *)(v4 + 80) = 0;
                      *(_BYTE *)(v4 + 153) = 1;
                      return result;
                    }
LABEL_147:
                    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                    v136 = a2;
                    v79 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))String.init<A>(_:)();
                    v80 = v92;
LABEL_156:
                    swift_bridgeObjectRelease();
                    goto LABEL_157;
                  }
                  v56 = v54;
                  if ((a2 & 0x1000000000000000) != 0)
                  {
                    v57 = String.UTF8View._foreignCount()();
                    if (__OFSUB__(v57, 1))
                    {
                      __break(1u);
                      goto LABEL_201;
                    }
                    v26 = MEMORY[0x186DA485C](15, v57 - 1, a1, a2);
                  }
                  else
                  {
                    v26 = (v26 << 16) - 65532;
                  }
                  if (v26 >> 14 >= v56 >> 14)
                  {
                    swift_bridgeObjectRetain_n();
                    v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                    v60 = v59;
                    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v58;
                    v136 = v61;
                    v137 = v62;
                    v138 = v59;
                    MEMORY[0x1E0C80A78](v58);
                    v133 = &v135;
                    v134 = 8;
LABEL_152:
                    v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v132, v64, v65, v63, v60);
                    if (v99)
                    {
                      v100 = (uint64_t)v98;
                      v101 = v99;
                    }
                    else
                    {
                      v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v135;
                      v103 = v136;
                      v104 = v137;
                      v105 = v138;
                      swift_bridgeObjectRetain();
                      v100 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v102, v103, v104, v105, 8u);
                      v101 = v106;
                      swift_bridgeObjectRelease();
                    }
                    v107 = String.subscript.getter();
                    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186DA4634](v107);
                    v110 = v109;
                    swift_bridgeObjectRelease();
                    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v108;
                    v136 = v110;
                    v111._countAndFlagsBits = v100;
                    v111._object = v101;
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._countAndFlagsBits = 93;
                    v112._object = (void *)0xE100000000000000;
                    String.append(_:)(v112);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    v79 = v135;
                    v80 = v136;
                    goto LABEL_156;
                  }
                  __break(1u);
LABEL_190:
                  v81 = (char *)_StringObject.sharedUTF8.getter();
                  goto LABEL_134;
                }
              }
              __break(1u);
LABEL_181:
              v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
              v136 = object;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              StringProtocol._ephemeralString.getter();
              v120 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v121 = (unsigned __int16 *)objc_msgSend(v120, sel__fastCharacterContents);
              v122 = v120;
              if (v121)
              {
                v123 = v121;
                v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
                v136 = object;
                StringProtocol._ephemeralString.getter();
                v124 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v125 = objc_msgSend(v124, sel_length);
                swift_unknownObjectRelease();
                v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v123, (uint64_t)v125, 4u, 1);
              }
              else
              {
LABEL_196:
                v126 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, object, 4u, 1);
              }
              v128 = v126;
              swift_bridgeObjectRelease_n();
              if ((v128 & 1) != 0)
                goto LABEL_135;
              goto LABEL_114;
            }
          }
          else
          {
            __break(1u);
          }
          result = String.UTF8View._foreignCount()();
          if (!__OFSUB__(result, 1))
          {
            v29 = (a1 >> 59) & 1;
            v28 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
            goto LABEL_46;
          }
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
          return result;
        }
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
LABEL_128:
      swift_bridgeObjectRelease();
      v79 = 0;
      v80 = 0xE000000000000000;
      goto LABEL_157;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v33 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      goto LABEL_72;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v142 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(a2) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141, 1, (unsigned __int8 *)&v135, HIBYTE(a2) & 0xF, (uint64_t *)&v139);
      v26 = v139;
      object = v140;
      swift_release();
      goto LABEL_71;
    }
    if ((a1 & 0x1000000000000000) == 0)
      goto LABEL_188;
    v34 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_68;
  }
  v26 = 0;
  object = 0xE000000000000000;
  while (1)
  {
LABEL_76:
    v45 = specialized Collection.first.getter(v26, object);
    if ((v45 & 0x1FF) != 0x5B)
      goto LABEL_129;
    if ((object & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1))
        goto LABEL_211;
      v47 = (v26 >> 59) & 1;
      v45 = MEMORY[0x186DA485C](15, result - 1, v26, object);
LABEL_82:
      if ((v45 & 0xC) != 4 << v47)
        goto LABEL_83;
      goto LABEL_186;
    }
    v46 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v46 = v26 & 0xFFFFFFFFFFFFLL;
    if (v46)
    {
      v45 = (v46 << 16) - 65532;
      LOBYTE(v47) = 1;
      goto LABEL_82;
    }
    __break(1u);
LABEL_186:
    v45 = _StringGuts._slowEnsureMatchingEncoding(_:)(v45, v26, object);
LABEL_83:
    v48 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v48 = v26 & 0xFFFFFFFFFFFFLL;
    v49 = v45 >> 16;
    if (v45 >> 16 < v48)
      break;
    __break(1u);
LABEL_188:
    v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v33 = v127;
LABEL_68:
    v135 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    v136 = 0;
    swift_bridgeObjectRetain_n();
    v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v34, v33, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 1, v34, v33);
    object = v35;
LABEL_71:
    swift_bridgeObjectRelease();
    if (object == 1)
    {
LABEL_72:
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v36 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(v36, sel__fastCharacterContents);
      v38 = v36;
      if (!v37)
      {
        v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        v136 = a2;
        swift_bridgeObjectRetain();
        v66 = String.init<A>(_:)();
        v68 = v67;
        if ((v67 & 0x1000000000000000) != 0)
          goto LABEL_202;
        goto LABEL_107;
      }
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2;
      StringProtocol._ephemeralString.getter();
      v39 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v40 = objc_msgSend(v39, sel_length);
      v41 = swift_unknownObjectRelease();
      v42 = MEMORY[0x1E0C80A78](v41);
      LOBYTE(v133) = 1;
      MEMORY[0x1E0C80A78](v42);
      v131[2] = v37;
      v131[3] = v40;
      v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v37, (uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v43, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v131);
      object = v44;
      swift_bridgeObjectRelease_n();
      if (!object)
        goto LABEL_74;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      if (!object)
        goto LABEL_74;
    }
  }
  if ((object & 0x1000000000000000) != 0)
  {
    v51 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    v136 = object & 0xFFFFFFFFFFFFFFLL;
    v51 = *((_BYTE *)&v135 + v49);
  }
  else
  {
    if ((v26 & 0x1000000000000000) != 0)
      v50 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v50 = _StringObject.sharedUTF8.getter();
    v51 = *(_BYTE *)(v50 + v49);
  }
  if (v51 == 93)
  {
    swift_bridgeObjectRetain();
    v72 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v26, object);
    swift_bridgeObjectRelease();
    if ((v72 & 1) == 0)
      goto LABEL_114;
LABEL_135:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 72) = v26;
    *(_QWORD *)(v4 + 80) = object;
    return result;
  }
LABEL_129:
  if ((object & 0x1000000000000000) != 0)
    goto LABEL_181;
  if ((object & 0x2000000000000000) != 0)
  {
    v82 = HIBYTE(object) & 0xF;
    v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    v136 = object & 0xFFFFFFFFFFFFFFLL;
    v81 = (char *)&v135;
    goto LABEL_134;
  }
  if ((v26 & 0x1000000000000000) == 0)
    goto LABEL_190;
  v81 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
  v82 = v26 & 0xFFFFFFFFFFFFLL;
LABEL_134:
  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, v82, 4u, 1))
    goto LABEL_135;
LABEL_114:
  swift_bridgeObjectRelease();
  *(_BYTE *)(v4 + 153) = 1;
  if (!v3)
    goto LABEL_128;
  while (2)
  {
    v73 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
    if ((v73 & 1) == 0)
    {
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2;
      MEMORY[0x1E0C80A78](v73);
      v133 = &v135;
      v134 = 4;
      swift_bridgeObjectRetain();
      goto LABEL_137;
    }
    result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100) != 0)
      goto LABEL_209;
    if (result == 91)
    {
      if ((a2 & 0x1000000000000000) == 0)
      {
        v74 = (v3 << 16) - 65532;
        LOBYTE(v75) = 1;
        goto LABEL_120;
      }
    }
    else
    {
      __break(1u);
    }
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
      goto LABEL_212;
    v75 = (a1 >> 59) & 1;
    v74 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
LABEL_120:
    if ((v74 & 0xC) == 4 << v75)
      v74 = _StringGuts._slowEnsureMatchingEncoding(_:)(v74, a1, a2);
    v76 = v74 >> 16;
    if (v74 >> 16 >= v3)
    {
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v78 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      v78 = *((_BYTE *)&v135 + v76);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
        v77 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v77 = _StringObject.sharedUTF8.getter();
      v78 = *(_BYTE *)(v77 + v76);
    }
    if (v78 != 93)
      goto LABEL_195;
    v88 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
    if ((v89 & 1) == 0)
    {
      v90 = v88;
      if ((a2 & 0x1000000000000000) == 0)
      {
        v91 = (v3 << 16) - 65532;
        goto LABEL_150;
      }
      v93 = String.UTF8View._foreignCount()();
      if (!__OFSUB__(v93, 1))
      {
        v91 = MEMORY[0x186DA485C](15, v93 - 1, a1, a2);
LABEL_150:
        if (v91 >> 14 >= v90 >> 14)
        {
          swift_bridgeObjectRetain_n();
          v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
          v60 = v95;
          v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v94;
          v136 = v96;
          v137 = v97;
          v138 = v95;
          MEMORY[0x1E0C80A78](v94);
          v133 = &v135;
          v134 = 8;
          goto LABEL_152;
        }
LABEL_201:
        __break(1u);
LABEL_202:
        v66 = static String._copying(_:)();
        v130 = v129;
        swift_bridgeObjectRelease();
        v68 = v130;
LABEL_107:
        object = (unint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        if ((v68 & 0x2000000000000000) != 0)
        {
          v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v66;
          v136 = v68 & 0xFFFFFFFFFFFFFFLL;
          v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          v142 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(v68) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141, 1, (unsigned __int8 *)&v135, HIBYTE(v68) & 0xF, (uint64_t *)&v139);
          v26 = v139;
          object = v140;
          swift_release();
        }
        else
        {
          if ((v66 & 0x1000000000000000) != 0)
          {
            v69 = (unsigned __int8 *)((v68 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v70 = v66 & 0xFFFFFFFFFFFFLL;
            goto LABEL_110;
          }
LABEL_206:
          v69 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_110:
          v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))object;
          v136 = 0;
          v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v69, v70, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 1, v69, v70);
          object = v71;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (object)
          goto LABEL_76;
LABEL_74:
        *(_BYTE *)(v4 + 153) = 1;
        continue;
      }
      __break(1u);
      goto LABEL_206;
    }
    break;
  }
  swift_bridgeObjectRetain();
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) != 0)
    goto LABEL_147;
  swift_bridgeObjectRelease_n();
  v79 = 0;
  v80 = 0;
LABEL_157:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 72) = v79;
  *(_QWORD *)(v4 + 80) = v80;
  v22 = 1;
LABEL_158:
  *(_BYTE *)(v4 + 152) = v22;
  return result;
}

void (*URLComponents._URLComponents.user.getter(uint64_t a1))(char *, _QWORD)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void (*v4)(char *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v13;
  _QWORD v14[6];
  Swift::Int v15;
  unint64_t v16;
  _BYTE v17[8];
  _BYTE v18[16];
  _BYTE v19[8];
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(v1 + 48))
  {
    v2 = *(_QWORD *)(v1 + 40);
    v3 = *(_QWORD *)(v1 + 48);
  }
  else if ((*(_BYTE *)(v1 + 10) & 1) != 0
         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for URLParseInfo?), v20)&& (*(_BYTE *)(v20 + 72) & 1) == 0)
  {
    v5 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v5);
    v3 = v6;
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of LocalePreferences?(v1 + 56, (uint64_t)v18, &demangling cache variable for type metadata for String?);
    a1 = outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v21, &demangling cache variable for type metadata for String?);
    if (!v22)
    {
      if ((*(_BYTE *)(v1 + 11) & 1) == 0)
        return 0;
      outlined init with take of LocalePreferences?(v1, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v23, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v23 || (*(_BYTE *)(v23 + 96) & 1) != 0)
        return 0;
      v13 = String.subscript.getter();
      MEMORY[0x186DA4634](v13);
      swift_bridgeObjectRelease();
      a1 = swift_bridgeObjectRelease();
    }
    v2 = 0;
    v3 = 0xE000000000000000;
  }
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v15 = v2;
    v16 = v3;
    MEMORY[0x1E0C80A78](a1);
    v14[2] = &v15;
    v14[3] = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    v8 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v14, v2, v3);
    if (v9 == 1)
    {
      v10 = v15;
      v11 = v16;
      swift_bridgeObjectRetain();
      v4 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v10, v11, MEMORY[0x1E0DEE9E8]);
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = (void (*)(char *, _QWORD))v8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t URLComponents._URLComponents.percentEncodedUser.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[16];
  _BYTE v7[8];
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(v0 + 48))
  {
    v1 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    if ((*(_BYTE *)(v0 + 10) & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v7, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)&v8, &demangling cache variable for type metadata for URLParseInfo?);
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 72) & 1) == 0)
        {
          v2 = String.subscript.getter();
          v1 = MEMORY[0x186DA4634](v2);
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v6, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for String?);
    if (!v10)
    {
      if ((*(_BYTE *)(v0 + 11) & 1) == 0
        || (outlined init with take of LocalePreferences?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)&v5, (uint64_t)&v11, &demangling cache variable for type metadata for URLParseInfo?), !v11)|| (*(_BYTE *)(v11 + 96) & 1) != 0)
      {
        v1 = 0;
        goto LABEL_13;
      }
      v4 = String.subscript.getter();
      MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v1 = 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  return v1;
}

void (*URLComponents._URLComponents.password.getter(uint64_t a1))(char *, _QWORD)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::Int v7;
  unint64_t v8;
  void (*v9)(char *, _QWORD);
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  Swift::Int v14;
  unint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  if (*(_QWORD *)(v1 + 64))
  {
    v2 = *(_QWORD *)(v1 + 56);
    v3 = *(_QWORD *)(v1 + 64);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 11) & 1) == 0)
      return 0;
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 96) & 1) != 0)
      return 0;
    v11 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v11);
    v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v14 = v2;
    v15 = v3;
    MEMORY[0x1E0C80A78](a1);
    v13[2] = &v14;
    v13[3] = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      v7 = v14;
      v8 = v15;
      swift_bridgeObjectRetain();
      v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E0DEE9E8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = (void (*)(char *, _QWORD))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t URLComponents._URLComponents.port.getter()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;
  _BYTE v17[8];
  uint64_t v18;

  if (*(_BYTE *)(v0 + 96) != 1)
    return *(_QWORD *)(v0 + 88);
  if ((*(_BYTE *)(v0 + 13) & 1) == 0)
    return 0;
  outlined init with take of LocalePreferences?(v0, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for URLParseInfo?);
  if (!v18 || (*(_BYTE *)(v18 + 144) & 1) != 0)
    return 0;
  v2 = String.subscript.getter();
  v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
  if ((v11 & 0x100) != 0)
  {
    v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
    v16 = v15;
    swift_bridgeObjectRelease();
    v14 = v16 & 1;
  }
  else
  {
    v12 = v10;
    v13 = v11;
    swift_bridgeObjectRelease();
    v14 = v13 & 1;
  }
  if (v14)
    return 0;
  else
    return v12;
}

void (*URLComponents._URLComponents.path.getter())(char *, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  void (*v11)(char *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  Swift::Int v17;
  unint64_t v18;
  _BYTE v19[8];
  _BYTE v20[16];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  outlined init with take of LocalePreferences?(v0 + 104, (uint64_t)v20, &demangling cache variable for type metadata for String?);
  v1 = outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for String?);
  v2 = v22;
  if (v22)
  {
    v3 = v21;
  }
  else if ((*(_BYTE *)(v0 + 14) & 1) != 0
         && (outlined init with take of LocalePreferences?(v0, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?), v1 = outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v23, &demangling cache variable for type metadata for URLParseInfo?), v23))
  {
    if ((*(_BYTE *)(v23 + 168) & 1) != 0)
      v4 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v4 = String.subscript.getter();
    v3 = MEMORY[0x186DA4634](v4);
    v2 = v5;
    v1 = swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
    v2 = 0xE000000000000000;
  }
  v6 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    outlined retain of String?((uint64_t)v20);
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = v3;
  v18 = v2;
  MEMORY[0x1E0C80A78](v1);
  v16[2] = &v17;
  v16[3] = MEMORY[0x1E0DEE9E8];
  outlined retain of String?((uint64_t)v20);
  swift_bridgeObjectRetain();
  v7 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v16, v3, v2);
  if (v8 != 1)
  {
    v11 = (void (*)(char *, _QWORD))v7;
    v14 = v8;
    swift_bridgeObjectRelease_n();
    if (v14)
      return v11;
    return 0;
  }
  v9 = v17;
  v10 = v18;
  swift_bridgeObjectRetain();
  v11 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v10, MEMORY[0x1E0DEE9E8]);
  v13 = v12;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (!v13)
    return 0;
  return v11;
}

uint64_t URLComponents._URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = 0;
    v6 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 104) = v4;
  *(_QWORD *)(v2 + 112) = v6;
  return result;
}

void (*URLComponents._URLComponents.query.getter(uint64_t a1))(char *, _QWORD)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::Int v7;
  unint64_t v8;
  void (*v9)(char *, _QWORD);
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  Swift::Int v14;
  unint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  if (*(_QWORD *)(v1 + 128))
  {
    v2 = *(_QWORD *)(v1 + 120);
    v3 = *(_QWORD *)(v1 + 128);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 15) & 1) == 0)
      return 0;
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 192) & 1) != 0)
      return 0;
    v11 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v11);
    v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v14 = v2;
    v15 = v3;
    MEMORY[0x1E0C80A78](a1);
    v13[2] = &v14;
    v13[3] = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      v7 = v14;
      v8 = v15;
      swift_bridgeObjectRetain();
      v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E0DEE9E8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = (void (*)(char *, _QWORD))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

void (*URLComponents._URLComponents.fragment.getter(uint64_t a1))(char *, _QWORD)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::Int v7;
  unint64_t v8;
  void (*v9)(char *, _QWORD);
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  Swift::Int v14;
  unint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  if (*(_QWORD *)(v1 + 144))
  {
    v2 = *(_QWORD *)(v1 + 136);
    v3 = *(_QWORD *)(v1 + 144);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 16) & 1) == 0)
      return 0;
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(_BYTE *)(v17 + 216) & 1) != 0)
      return 0;
    v11 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v11);
    v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v14 = v2;
    v15 = v3;
    MEMORY[0x1E0C80A78](a1);
    v13[2] = &v14;
    v13[3] = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      v7 = v14;
      v8 = v15;
      swift_bridgeObjectRetain();
      v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E0DEE9E8]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = (void (*)(char *, _QWORD))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

unint64_t URLComponents._URLComponents.percentEncodedHost.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  Swift::Int v28;
  unint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD v78[4];
  _BYTE v79[16];
  int32_t (__cdecl **v80)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  char v81;
  int32_t (__cdecl *v82)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86[8];
  _BYTE v87[16];
  char v88[8];
  unint64_t v89;
  unint64_t v90;
  char v91[8];
  _BYTE v92[16];
  _BYTE v93[16];
  uint64_t v94;
  int32_t (__cdecl *v95)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = v0;
  v2 = URLComponents._URLComponents.encodedHost.getter();
  if (!v3)
    goto LABEL_66;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2;
  v5 = v3;
  v6 = HIBYTE(v3) & 0xF;
  v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v3) & 0xF;
  else
    v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_12;
  if ((*(_BYTE *)(v1 + 152) & 1) != 0)
    return (unint64_t)v4;
  if ((v3 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
      v83 = v3 & 0xFFFFFFFFFFFFFFLL;
      v95 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v96 = 0;
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v82, v6, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v95, 0, (unsigned __int8 *)&v82, v6, (uint64_t *)&v89);
      v10 = v89;
      v12 = v90;
      swift_release();
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v9 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        v7 = v75;
      }
      v82 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v83 = 0;
      swift_bridgeObjectRetain_n();
      v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v9, v7, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v82, 0, v9, v7);
      v12 = v11;
    }
    swift_bridgeObjectRelease();
    if (v12 != 1)
    {
      swift_bridgeObjectRelease_n();
      if (v12)
        goto LABEL_27;
LABEL_66:
      outlined init with take of LocalePreferences?(v1 + 88, (uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for Int?);
      outlined init with take of LocalePreferences?((uint64_t)v92, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for Int?);
      if (v93[8] != 1)
        return 0;
      if ((*(_BYTE *)(v1 + 13) & 1) != 0)
      {
        outlined init with take of LocalePreferences?(v1, (uint64_t)v91, &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?((uint64_t)v91, (uint64_t)&v94, &demangling cache variable for type metadata for URLParseInfo?);
        if (v94)
        {
          if ((*(_BYTE *)(v94 + 144) & 1) == 0)
          {
            v53 = String.subscript.getter();
            v57 = v56;
            if ((v53 ^ v54) >> 14)
            {
              v58 = v53;
              v59 = v54;
              v60 = v55;
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v53, v54, v55, v56, 10);
              if ((v61 & 0x100) != 0)
                specialized _parseInteger<A, B>(ascii:radix:)(v58, v59, v60, v57, 10);
              v62 = v61;
              swift_bridgeObjectRelease();
              if ((v62 & 1) == 0)
                return 0;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)&v89, &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?((uint64_t)&v89, (uint64_t)&v95, &demangling cache variable for type metadata for String?);
      if (v96)
        return 0;
      if ((*(_BYTE *)(v1 + 10) & 1) == 0
        || (outlined init with take of LocalePreferences?(v1, (uint64_t)v88, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v97, &demangling cache variable for type metadata for URLParseInfo?), !v97)|| (*(_BYTE *)(v97 + 72) & 1) != 0)
      {
        outlined init with take of LocalePreferences?(v1 + 56, (uint64_t)v87, &demangling cache variable for type metadata for String?);
        outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)&v82, &demangling cache variable for type metadata for String?);
        if (v83)
          return 0;
        if ((*(_BYTE *)(v1 + 11) & 1) == 0)
          return 0;
        outlined init with take of LocalePreferences?(v1, (uint64_t)v86, &demangling cache variable for type metadata for URLParseInfo?);
        outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v98, &demangling cache variable for type metadata for URLParseInfo?);
        if (!v98 || (*(_BYTE *)(v98 + 96) & 1) != 0)
          return 0;
      }
      v74 = String.subscript.getter();
      MEMORY[0x186DA4634](v74);
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
  v83 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v13 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v13, sel__fastCharacterContents);
  v15 = v13;
  if (!v14)
  {
    v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
    v83 = v5;
    swift_bridgeObjectRetain();
    v22 = String.init<A>(_:)();
    v24 = v23;
    if ((v23 & 0x1000000000000000) != 0)
      goto LABEL_99;
    goto LABEL_21;
  }
  v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
  v83 = v5;
  StringProtocol._ephemeralString.getter();
  v16 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v16, sel_length);
  v18 = swift_unknownObjectRelease();
  MEMORY[0x1E0C80A78](v18);
  LOBYTE(v80) = 0;
  MEMORY[0x1E0C80A78](v19);
  v78[2] = v14;
  v78[3] = v17;
  v10 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v20, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v78);
  v12 = v21;
  swift_bridgeObjectRelease_n();
  if (!v12)
    goto LABEL_66;
  while (1)
  {
LABEL_27:
    if ((v12 & 0x2000000000000000) != 0)
    {
      if ((v12 & 0xF00000000000000) == 0)
        goto LABEL_12;
    }
    else if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
    {
      goto LABEL_12;
    }
    v28 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v10, v12);
    if ((v28 & 1) == 0)
    {
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      v83 = v12;
      MEMORY[0x1E0C80A78](v28);
      v80 = &v82;
      v81 = 4;
      swift_bridgeObjectRetain();
      v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v79, v10, v12);
      if (v36)
      {
        v4 = v35;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
        v38 = v83;
        swift_bridgeObjectRetain();
        v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v37, v38, 4u);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      return (unint64_t)v4;
    }
    result = specialized Collection.first.getter(v10, v12);
    if ((result & 0x100) != 0)
      goto LABEL_105;
    if (result != 91)
    {
      __break(1u);
LABEL_93:
      result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1))
        goto LABEL_106;
      v31 = (v10 >> 59) & 1;
      result = MEMORY[0x186DA485C](15, result - 1, v10, v12);
LABEL_37:
      if ((result & 0xC) != 4 << v31)
        goto LABEL_38;
      goto LABEL_96;
    }
    v5 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x1000000000000000) != 0)
      goto LABEL_93;
    v30 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000) != 0)
      v30 = HIBYTE(v12) & 0xF;
    if (v30)
    {
      result = (v30 << 16) - 65532;
      LOBYTE(v31) = 1;
      goto LABEL_37;
    }
    __break(1u);
LABEL_96:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, v10, v12);
LABEL_38:
    if ((v12 & 0x2000000000000000) != 0)
      v32 = v5;
    else
      v32 = v10 & 0xFFFFFFFFFFFFLL;
    v5 = result >> 16;
    if (result >> 16 >= v32)
    {
      __break(1u);
      goto LABEL_98;
    }
    if ((v12 & 0x1000000000000000) != 0)
    {
      v34 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v12 & 0x2000000000000000) != 0)
    {
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      v83 = v12 & 0xFFFFFFFFFFFFFFLL;
      v34 = *((_BYTE *)&v82 + v5);
    }
    else
    {
      v33 = (v10 & 0x1000000000000000) != 0 ? (v12 & 0xFFFFFFFFFFFFFFFLL) + 32 : _StringObject.sharedUTF8.getter();
      v34 = *(_BYTE *)(v33 + v5);
    }
    if (v34 == 93)
      break;
LABEL_98:
    __break(1u);
LABEL_99:
    v22 = static String._copying(_:)();
    v77 = v76;
    swift_bridgeObjectRelease();
    v24 = v77;
LABEL_21:
    v12 = (unint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    if ((v24 & 0x2000000000000000) != 0)
    {
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
      v83 = v24 & 0xFFFFFFFFFFFFFFLL;
      v95 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v96 = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v82, HIBYTE(v24) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v95, 0, (unsigned __int8 *)&v82, HIBYTE(v24) & 0xF, (uint64_t *)&v89);
      v10 = v89;
      v12 = v90;
      swift_release();
      goto LABEL_26;
    }
    if ((v22 & 0x1000000000000000) == 0)
      goto LABEL_102;
    v25 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v26 = v22 & 0xFFFFFFFFFFFFLL;
LABEL_24:
    v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v12;
    v83 = 0;
    v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v25, v26, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v82, 0, v25, v26);
    v12 = v27;
LABEL_26:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_66;
  }
  v39 = specialized Collection<>.firstIndex(of:)(0x25u, v10, v12);
  if ((v40 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v10, v12) & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_66;
    }
    v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
    v83 = v12;
    v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.init<A>(_:)();
    goto LABEL_88;
  }
  v5 = v39;
  if ((v12 & 0x1000000000000000) == 0)
  {
    v1 = (v32 << 16) - 65532;
LABEL_62:
    if (v1 >> 14 >= v5 >> 14)
    {
      swift_bridgeObjectRetain_n();
      v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
      v43 = v42;
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v41;
      v83 = v44;
      v84 = v45;
      v85 = v42;
      MEMORY[0x1E0C80A78](v41);
      v80 = &v82;
      v81 = 8;
      v49 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v79, v47, v48, v46, v43);
      if (v50)
      {
        v51 = (uint64_t)v49;
        v52 = v50;
      }
      else
      {
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
        v64 = v83;
        v65 = v84;
        v66 = v85;
        swift_bridgeObjectRetain();
        v51 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v63, v64, v65, v66, 8u);
        v52 = v67;
        swift_bridgeObjectRelease();
      }
      v68 = String.subscript.getter();
      v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186DA4634](v68);
      v71 = v70;
      swift_bridgeObjectRelease();
      v82 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v69;
      v83 = v71;
      v72._countAndFlagsBits = v51;
      v72._object = v52;
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 93;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
LABEL_88:
      swift_bridgeObjectRelease();
      return (unint64_t)v4;
    }
    __break(1u);
LABEL_102:
    v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    goto LABEL_24;
  }
  result = String.UTF8View._foreignCount()();
  if (!__OFSUB__(result, 1))
  {
    v1 = MEMORY[0x186DA485C](15, result - 1, v10, v12);
    goto LABEL_62;
  }
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setPercentEncodedHost(_:)(Swift::String_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  void (*v28)(char *, _QWORD);
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned __int16 *v34;
  id v35;
  void *v36;
  id v37;
  char v38;
  Swift::Int v39;
  char v40;
  _BYTE v41[16];
  Swift::Int *v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;

  v2 = v1;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  *(_WORD *)(v1 + 152) = 0;
  if (!a1.value._object)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 72) = countAndFlagsBits;
    *(_QWORD *)(v1 + 80) = 0;
    return;
  }
  object = (unint64_t)a1.value._object;
  v5 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
  if ((v5 & 0x1FF) != 0x5B)
    goto LABEL_23;
  if ((object & 0x1000000000000000) != 0)
  {
    v39 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v39, 1))
    {
      __break(1u);
      return;
    }
    v7 = (countAndFlagsBits >> 59) & 1;
    v5 = MEMORY[0x186DA485C](15, v39 - 1, countAndFlagsBits, object);
  }
  else
  {
    v6 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v6 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
      __break(1u);
      goto LABEL_62;
    }
    v5 = (v6 << 16) - 65532;
    LOBYTE(v7) = 1;
  }
  if ((v5 & 0xC) == 4 << v7)
LABEL_62:
    v5 = _StringGuts._slowEnsureMatchingEncoding(_:)(v5, countAndFlagsBits, object);
  v8 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v9 = v5 >> 16;
  if (v5 >> 16 >= v8)
  {
    __break(1u);
    goto LABEL_64;
  }
  if ((object & 0x1000000000000000) != 0)
  {
    v11 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    v44 = countAndFlagsBits;
    v45 = object & 0xFFFFFFFFFFFFFFLL;
    v11 = *((_BYTE *)&v44 + v9);
  }
  else
  {
    if ((countAndFlagsBits & 0x1000000000000000) != 0)
      v10 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v10 = _StringObject.sharedUTF8.getter();
    v11 = *(_BYTE *)(v10 + v9);
  }
  if (v11 == 93)
  {
    swift_bridgeObjectRetain();
    v12 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(countAndFlagsBits, object);
    if ((v12 & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *v13 = 3;
      swift_willThrow();
      return;
    }
    goto LABEL_29;
  }
LABEL_23:
  if ((object & 0x1000000000000000) == 0)
  {
    if ((object & 0x2000000000000000) != 0)
    {
      v15 = HIBYTE(object) & 0xF;
      v44 = countAndFlagsBits;
      v45 = object & 0xFFFFFFFFFFFFFFLL;
      v14 = (char *)&v44;
      goto LABEL_28;
    }
    if ((countAndFlagsBits & 0x1000000000000000) != 0)
    {
      v14 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      goto LABEL_28;
    }
LABEL_64:
    v14 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
    v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1);
    v12 = swift_bridgeObjectRetain();
    if (!v16)
      goto LABEL_22;
    goto LABEL_29;
  }
  v44 = countAndFlagsBits;
  v45 = object;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  StringProtocol._ephemeralString.getter();
  v33 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v34 = (unsigned __int16 *)objc_msgSend(v33, sel__fastCharacterContents);
  v35 = v33;
  if (v34)
  {
    v44 = countAndFlagsBits;
    v45 = object;
    StringProtocol._ephemeralString.getter();
    v36 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v36, sel_length);
    swift_unknownObjectRelease();
    v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v34, (uint64_t)v37, 4u, 1);
  }
  else
  {
    v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(countAndFlagsBits, object, 4u, 1);
  }
  v40 = v38;
  v12 = swift_bridgeObjectRelease_n();
  if ((v40 & 1) == 0)
    goto LABEL_22;
LABEL_29:
  LOBYTE(v44) = 37;
  MEMORY[0x1E0C80A78](v12);
  v42 = &v44;
  swift_bridgeObjectRetain();
  v17 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v41, countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v2 + 152) = v17 & 1;
  if (*(_QWORD *)(v2 + 32))
  {
    v18 = *(_QWORD *)(v2 + 32);
  }
  else if (*(_BYTE *)(v2 + 9) == 1)
  {
    v18 = 0;
    if (*(_QWORD *)v2)
    {
      if ((*(_BYTE *)(*(_QWORD *)v2 + 48) & 1) != 0)
      {
        v18 = 0;
      }
      else
      {
        v31 = String.subscript.getter();
        MEMORY[0x186DA4634](v31);
        v18 = v32;
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v18 = 0;
  }
  if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(countAndFlagsBits, object) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 72) = countAndFlagsBits;
    *(_QWORD *)(v2 + 80) = object;
    return;
  }
  if (v18)
  {
    v19 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19 != -1)
      swift_once();
    v20 = static RFC3986Parser.schemesToPercentEncodeHost;
    v21 = String.lowercased()();
    LOBYTE(v20) = specialized Set.contains(_:)(v21._countAndFlagsBits, (uint64_t)v21._object, v20);
    swift_bridgeObjectRelease_n();
    v22 = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0 || (v17 & 1) == 0)
      goto LABEL_48;
  }
  else
  {
    v22 = swift_bridgeObjectRetain();
    if ((v17 & 1) == 0)
      goto LABEL_48;
  }
  v23 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    v28 = 0;
    v30 = 0xE000000000000000;
LABEL_55:
    URLComponents._URLComponents.host.setter((unint64_t)v28, v30);
    return;
  }
  v44 = countAndFlagsBits;
  v45 = object;
  MEMORY[0x1E0C80A78](v22);
  v42 = &v44;
  v43 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  v24 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v41, countAndFlagsBits, object);
  if (v25 == 1)
  {
    v26 = v44;
    v27 = v45;
    swift_bridgeObjectRetain();
    v28 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, MEMORY[0x1E0DEE9E8]);
    v30 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = (void (*)(char *, _QWORD))v24;
    v30 = v25;
  }
  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = countAndFlagsBits;
  *(_QWORD *)(v2 + 80) = object;
  *(_BYTE *)(v2 + 153) = 1;
}

uint64_t URLComponents._URLComponents.computedString.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  __int16 v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  Swift::String v40;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  _BYTE v64[8];
  _BYTE v65[8];
  _BYTE v66[8];
  _QWORD v67[2];
  _BYTE v68[8];
  _BYTE v69[8];
  _BYTE v70[8];
  _BYTE v71[8];
  _BYTE v72[16];
  _BYTE v73[8];
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  if ((*(_BYTE *)(v0 + 153) & 1) != 0)
    return 0;
  v1 = v0;
  v2 = *(void **)(v0 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = v2;
LABEL_4:
    v81._countAndFlagsBits = v3;
    v81._object = v4;
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = 58;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v0 + 9) & 1) != 0)
  {
    outlined init with take of LocalePreferences?(v0, (uint64_t)v73, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v74, &demangling cache variable for type metadata for URLParseInfo?);
    if (v74)
    {
      if ((*(_BYTE *)(v74 + 48) & 1) == 0)
      {
        v13 = String.subscript.getter();
        v3 = MEMORY[0x186DA4634](v13);
        v4 = v14;
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
  }
LABEL_8:
  if ((URLComponents._URLComponents.hasAuthority.getter() & 1) != 0)
  {
    outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v72, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v75, &demangling cache variable for type metadata for String?);
    v6 = v76;
    if (v76)
    {
      v7 = v75;
    }
    else if ((*(_BYTE *)(v1 + 14) & 1) != 0
           && (outlined init with take of LocalePreferences?(v1, (uint64_t)v71, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)&v77, &demangling cache variable for type metadata for URLParseInfo?), v77))
    {
      if ((*(_BYTE *)(v77 + 168) & 1) != 0)
        v11 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      else
        v11 = String.subscript.getter();
      v7 = MEMORY[0x186DA4634](v11);
      v6 = v15;
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = 0;
      v6 = 0xE000000000000000;
    }
    v16 = specialized Collection.first.getter(v7, v6);
    outlined retain of String?((uint64_t)v72);
    swift_bridgeObjectRelease();
    if ((v16 & 0x100) == 0 && v16 != 47)
      goto LABEL_28;
    v17._countAndFlagsBits = 12079;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    goto LABEL_55;
  }
  outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v72, &demangling cache variable for type metadata for String?);
  result = outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v75, &demangling cache variable for type metadata for String?);
  v9 = v76;
  if (v76)
  {
    v10 = v75;
  }
  else if ((*(_BYTE *)(v1 + 14) & 1) != 0
         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v71, &demangling cache variable for type metadata for URLParseInfo?), result = outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)&v77, &demangling cache variable for type metadata for URLParseInfo?), v77))
  {
    if ((*(_BYTE *)(v77 + 168) & 1) != 0)
      v12 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v12 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v12);
    v9 = v18;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
    v9 = 0xE000000000000000;
  }
  v19 = 65540;
  if ((v9 & 0x1000000000000000) != 0)
    v20 = (v10 >> 59) & 1;
  else
    v20 = 1;
  v21 = HIBYTE(v9) & 0xF;
  v22 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x1000000000000000) == 0)
  {
    v23 = 65540;
    goto LABEL_38;
  }
  if ((v9 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v9) & 0xF;
  if (v22)
  {
    v23 = String.UTF8View._foreignIndex(after:)();
    v22 = v10 & 0xFFFFFFFFFFFFLL;
LABEL_38:
    if ((v9 & 0x2000000000000000) == 0)
      v21 = v22;
    if (v23 >> 14 == 4 * v21
      || (v24 = specialized Collection.first.getter(v10, v9), (v24 & 0x100) != 0)
      || v24 != 47)
    {
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      if (!v21)
        goto LABEL_112;
      v19 = String.UTF8View._foreignIndex(after:)();
    }
    if ((v19 & 0xC) == 4 << v20)
      v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v10, v9);
    v20 = v19 >> 16;
    if (v19 >> 16 < v21)
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        v26 = String.UTF8View._foreignSubscript(position:)();
      }
      else
      {
        if ((v9 & 0x2000000000000000) == 0)
        {
          if ((v10 & 0x1000000000000000) != 0)
          {
            v25 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_53:
            v26 = *(_BYTE *)(v25 + v20);
            goto LABEL_105;
          }
LABEL_113:
          v25 = _StringObject.sharedUTF8.getter();
          goto LABEL_53;
        }
        v81._countAndFlagsBits = v10;
        v81._object = (void *)(v9 & 0xFFFFFFFFFFFFFFLL);
        v26 = *((_BYTE *)&v81._countAndFlagsBits + v20);
      }
LABEL_105:
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      if (v26 == 47)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_55:
      v27 = URLComponents._URLComponents.percentEncodedUser.getter();
      if (v28)
      {
        String.append(_:)(*(Swift::String *)&v27);
        swift_bridgeObjectRelease();
      }
      v29 = *(_QWORD *)(v1 + 64);
      if (v29)
      {
        v30 = *(_QWORD *)(v1 + 56);
        v31 = *(void **)(v1 + 64);
      }
      else
      {
        if ((*(_BYTE *)(v1 + 11) & 1) == 0
          || (outlined init with take of LocalePreferences?(v1, (uint64_t)v70, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v78, &demangling cache variable for type metadata for URLParseInfo?), !v78)|| (*(_BYTE *)(v78 + 96) & 1) != 0)
        {
LABEL_63:
          URLComponents._URLComponents.percentEncodedUser.getter();
          v34 = v33;
          swift_bridgeObjectRelease();
          if (!(v34 | v29))
          {
            if ((*(_BYTE *)(v1 + 11) & 1) == 0
              || (outlined init with take of LocalePreferences?(v1, (uint64_t)v69, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v79, &demangling cache variable for type metadata for URLParseInfo?), !v79)|| (*(_BYTE *)(v79 + 96) & 1) != 0)
            {
LABEL_68:
              v36 = URLComponents._URLComponents.encodedHost.getter();
              if (v37)
              {
                String.append(_:)(*(Swift::String *)&v36);
                swift_bridgeObjectRelease();
              }
              v38 = URLComponents._URLComponents.port.getter();
              if ((v39 & 1) != 0)
              {
                if ((*(_BYTE *)(v1 + 13) & 1) == 0
                  || (outlined init with take of LocalePreferences?(v1, (uint64_t)v68, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)&v80, &demangling cache variable for type metadata for URLParseInfo?), !v80)|| (*(_BYTE *)(v80 + 144) & 1) != 0)
                {
LABEL_76:
                  outlined init with take of LocalePreferences?(v1 + 104, (uint64_t)v67, &demangling cache variable for type metadata for String?);
                  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)&v81, &demangling cache variable for type metadata for String?);
                  object = v81._object;
                  if (v81._object)
                  {
                    countAndFlagsBits = v81._countAndFlagsBits;
                  }
                  else if ((*(_BYTE *)(v1 + 14) & 1) != 0
                         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v66, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v82, &demangling cache variable for type metadata for URLParseInfo?), v82))
                  {
                    if ((*(_BYTE *)(v82 + 168) & 1) != 0)
                      v43 = MEMORY[0x186DA5030](0, 0xE000000000000000);
                    else
                      v43 = String.subscript.getter();
                    countAndFlagsBits = MEMORY[0x186DA4634](v43);
                    object = v49;
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    countAndFlagsBits = 0;
                    object = (void *)0xE000000000000000;
                  }
                  outlined retain of String?((uint64_t)v67);
                  v50._countAndFlagsBits = countAndFlagsBits;
                  v50._object = object;
                  String.append(_:)(v50);
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)(v1 + 128))
                  {
                    v51 = *(_QWORD *)(v1 + 120);
                    v52 = *(void **)(v1 + 128);
                  }
                  else
                  {
                    if ((*(_BYTE *)(v1 + 15) & 1) == 0
                      || (outlined init with take of LocalePreferences?(v1, (uint64_t)v65, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)&v83, &demangling cache variable for type metadata for URLParseInfo?), !v83)|| (*(_BYTE *)(v83 + 192) & 1) != 0)
                    {
LABEL_94:
                      v55 = *(void **)(v1 + 144);
                      if (v55)
                      {
                        v56 = *(_QWORD *)(v1 + 136);
                        v57 = v55;
                      }
                      else
                      {
                        if ((*(_BYTE *)(v1 + 16) & 1) == 0)
                          return 0;
                        outlined init with take of LocalePreferences?(v1, (uint64_t)v64, &demangling cache variable for type metadata for URLParseInfo?);
                        outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)&v84, &demangling cache variable for type metadata for URLParseInfo?);
                        if (!v84 || (*(_BYTE *)(v84 + 216) & 1) != 0)
                          return 0;
                        v62 = String.subscript.getter();
                        v56 = MEMORY[0x186DA4634](v62);
                        v57 = v63;
                        swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRetain();
                      v58._countAndFlagsBits = v56;
                      v58._object = v57;
                      String.append(_:)(v58);
                      swift_bridgeObjectRelease();
                      v59._countAndFlagsBits = 35;
                      v59._object = (void *)0xE100000000000000;
                      String.append(_:)(v59);
                      swift_bridgeObjectRelease();
                      return 0;
                    }
                    v60 = String.subscript.getter();
                    v51 = MEMORY[0x186DA4634](v60);
                    v52 = v61;
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRetain();
                  v53._countAndFlagsBits = v51;
                  v53._object = v52;
                  String.append(_:)(v53);
                  swift_bridgeObjectRelease();
                  v54._countAndFlagsBits = 63;
                  v54._object = (void *)0xE100000000000000;
                  String.append(_:)(v54);
                  swift_bridgeObjectRelease();
                  goto LABEL_94;
                }
                v44 = String.subscript.getter();
                v81._countAndFlagsBits = 58;
                v81._object = (void *)0xE100000000000000;
                v45._countAndFlagsBits = MEMORY[0x186DA4634](v44);
                String.append(_:)(v45);
                swift_bridgeObjectRelease();
              }
              else
              {
                v81._countAndFlagsBits = 58;
                v81._object = (void *)0xE100000000000000;
                v67[0] = v38;
                v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v40);
              }
              swift_bridgeObjectRelease();
              String.append(_:)(v81);
              swift_bridgeObjectRelease();
              goto LABEL_76;
            }
            v48 = String.subscript.getter();
            MEMORY[0x186DA4634](v48);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v35._countAndFlagsBits = 64;
          v35._object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          goto LABEL_68;
        }
        v46 = String.subscript.getter();
        v30 = MEMORY[0x186DA4634](v46);
        v31 = v47;
        swift_bridgeObjectRelease();
      }
      v81._countAndFlagsBits = 58;
      v81._object = (void *)0xE100000000000000;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = v30;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  __break(1u);
  return result;
}

uint64_t URLComponents._URLComponents.hasAuthority.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[8];
  _BYTE v30[8];
  _BYTE v31[8];
  _BYTE v32[8];
  _BYTE v33[16];
  _BYTE v34[8];
  _BYTE v35[8];
  _BYTE v36[16];
  _BYTE v37[8];
  _BYTE v38[16];
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  outlined init with take of LocalePreferences?(v0 + 72, (uint64_t)v38, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v38, (uint64_t)v39, &demangling cache variable for type metadata for String?);
  if (v40)
    return 1;
  if ((*(_BYTE *)(v0 + 12) & 1) != 0)
  {
    outlined init with take of LocalePreferences?(v0, (uint64_t)v37, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)&v41, &demangling cache variable for type metadata for URLParseInfo?);
    if (v41)
    {
      if ((*(_BYTE *)(v41 + 120) & 1) == 0)
        goto LABEL_11;
    }
  }
  outlined init with take of LocalePreferences?(v0 + 88, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if (v42[8] == 1)
  {
    v1 = *(_BYTE *)(v0 + 13);
    if ((v1 & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v35, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)&v43, &demangling cache variable for type metadata for URLParseInfo?);
      if (v43)
      {
        if ((*(_BYTE *)(v43 + 144) & 1) == 0)
        {
          v16 = String.subscript.getter();
          v20 = v19;
          if ((v16 ^ v17) >> 14)
          {
            v21 = v16;
            v22 = v17;
            v23 = v18;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v16, v17, v18, v19, 10);
            if ((v24 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v21, v22, v23, v20, 10);
              v27 = v26;
              swift_bridgeObjectRelease();
              if ((v27 & 1) == 0)
                return 1;
            }
            else
            {
              v25 = v24;
              swift_bridgeObjectRelease();
              if ((v25 & 1) == 0)
                return 1;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    if (*(_QWORD *)(v0 + 48))
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_bridgeObjectRelease();
      return 1;
    }
    v4 = *(_BYTE *)(v0 + 10);
    if ((v4 & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v34, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)&v44, &demangling cache variable for type metadata for URLParseInfo?);
      if (v44)
      {
        if ((*(_BYTE *)(v44 + 72) & 1) == 0)
        {
          v28 = String.subscript.getter();
          MEMORY[0x186DA4634](v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
      }
    }
    outlined init with take of LocalePreferences?(v0 + 56, (uint64_t)v33, &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v45, &demangling cache variable for type metadata for String?);
    if (v46)
      return 1;
    v5 = *(_BYTE *)(v0 + 11);
    if ((v5 & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v32, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v47, &demangling cache variable for type metadata for URLParseInfo?);
      if (v47)
      {
        if ((*(_BYTE *)(v47 + 96) & 1) == 0)
          goto LABEL_11;
      }
    }
    if ((v1 & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v0, (uint64_t)v31, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)&v48, &demangling cache variable for type metadata for URLParseInfo?);
      if (v48)
      {
        if ((*(_BYTE *)(v48 + 144) & 1) == 0)
        {
          v6 = String.subscript.getter();
          v10 = v9;
          if (!((v6 ^ v7) >> 14))
          {
            swift_bridgeObjectRelease();
            if ((v4 & 1) != 0)
              goto LABEL_30;
            goto LABEL_32;
          }
          v11 = v6;
          v12 = v7;
          v13 = v8;
          _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v6, v7, v8, v9, 10);
          if ((v14 & 0x100) != 0)
            specialized _parseInteger<A, B>(ascii:radix:)(v11, v12, v13, v10, 10);
          v15 = v14;
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0)
            return 1;
        }
      }
    }
    if ((v4 & 1) != 0)
    {
LABEL_30:
      outlined init with take of LocalePreferences?(v0, (uint64_t)v30, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v49, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v49 || (*(_BYTE *)(v49 + 72) & 1) != 0)
        goto LABEL_32;
LABEL_11:
      v2 = String.subscript.getter();
      MEMORY[0x186DA4634](v2);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
LABEL_32:
    if ((v5 & 1) == 0)
      return 0;
    outlined init with take of LocalePreferences?(v0, (uint64_t)v29, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v51, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v51 || (*(_BYTE *)(v51 + 96) & 1) != 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v50, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v50 || (*(_BYTE *)(v50 + 96) & 1) != 0)
        return 0;
    }
    goto LABEL_11;
  }
  return 1;
}

Swift::OpaquePointer_optional __swiftcall URLComponents._URLComponents.queryItems(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Bool v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  _BYTE v25[8];
  uint64_t v26;
  Swift::OpaquePointer_optional result;

  if (*(_QWORD *)(v1 + 128))
  {
    v2 = *(_QWORD *)(v1 + 120);
    v3 = *(_QWORD *)(v1 + 128);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 15) & 1) == 0
      || (outlined init with take of LocalePreferences?(v1, (uint64_t)v25, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v26, &demangling cache variable for type metadata for URLParseInfo?), !v26)|| (*(_BYTE *)(v26 + 192) & 1) != 0)
    {
      v19 = 0;
LABEL_46:
      v11 = v19;
      goto LABEL_51;
    }
    v20 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v20);
    v3 = v21;
    swift_bridgeObjectRelease();
  }
  if ((v3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v3) & 0xF;
  else
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
    goto LABEL_46;
  }
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = MEMORY[0x1E0DEE9D8];
  v5 = swift_allocObject();
  v6 = 15;
  *(_QWORD *)(v5 + 16) = 15;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 15;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  v9 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  while (1)
  {
    if ((v6 & 0xC) == v10)
    {
      v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v2, v3);
      v6 = v11;
    }
    v13 = v6 >> 16;
    if (v6 >> 16 >= v4)
      break;
    if ((v3 & 0x1000000000000000) != 0)
    {
      v15 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v3 & 0x2000000000000000) != 0)
    {
      v24[0] = v2;
      v24[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v15 = *((_BYTE *)v24 + v13);
    }
    else
    {
      v14 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0)
        v14 = _StringObject.sharedUTF8.getter();
      v15 = *(_BYTE *)(v14 + v13);
    }
    if (v15 == 38)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(v8, v2, v3, v7, v2, v3, v5, percentEncoded, v22);
      v11 = *(_QWORD *)(v5 + 16);
      if ((v11 & 0xC) == v10)
      {
        v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
        if ((v3 & 0x1000000000000000) != 0)
          goto LABEL_30;
LABEL_27:
        v18 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      else
      {
        if ((v3 & 0x1000000000000000) == 0)
          goto LABEL_27;
LABEL_30:
        if (v4 <= v11 >> 16)
          goto LABEL_50;
        v18 = String.UTF8View._foreignIndex(after:)();
      }
      v17 = 0;
      *(_QWORD *)(v7 + 16) = v18;
      v16 = 1;
LABEL_33:
      *(_QWORD *)(v8 + 16) = v17;
      *(_BYTE *)(v8 + 24) = v16;
      goto LABEL_34;
    }
    if (v15 == 61 && *(_BYTE *)(v8 + 24) == 1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(v5 + 16);
      goto LABEL_33;
    }
LABEL_34:
    v11 = *(_QWORD *)(v5 + 16);
    if ((v11 & 0xC) == v10)
    {
      v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v2, v3);
      if ((v3 & 0x1000000000000000) == 0)
      {
LABEL_10:
        v6 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_11;
      }
    }
    else if ((v3 & 0x1000000000000000) == 0)
    {
      goto LABEL_10;
    }
    if (v4 <= v11 >> 16)
      goto LABEL_49;
    v11 = String.UTF8View._foreignIndex(after:)();
    v6 = v11;
LABEL_11:
    *(_QWORD *)(v5 + 16) = v6;
    if (4 * v4 == v6 >> 14)
    {
      addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(v8, v2, v3, v7, v2, v3, v5, percentEncoded, v22);
      swift_bridgeObjectRelease_n();
      v19 = *(_QWORD *)(v22 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result.value._rawValue = (void *)v11;
  result.is_nil = v12;
  return result;
}

unint64_t addItem #1 () in URLComponents._URLComponents.queryItems(percentEncoded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  Swift::Int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  Swift::Int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _BYTE v53[16];
  Swift::Int *v54;
  uint64_t v55;
  Swift::Int v56;
  unint64_t v57;

  v17 = *(_BYTE *)(a1 + 24);
  v18 = *(_QWORD *)(a4 + 16);
  if ((v17 & 1) != 0)
  {
    if (*(_QWORD *)(a7 + 16) >> 14 >= v18 >> 14)
    {
      v19 = String.subscript.getter();
      v10 = MEMORY[0x186DA4634](v19);
      v9 = v20;
      v21 = swift_bridgeObjectRelease();
      v22 = 0;
      v23 = 0;
      v24 = a9;
      if ((a8 & 1) != 0)
        goto LABEL_31;
LABEL_13:
      v31 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v31 = v10 & 0xFFFFFFFFFFFFLL;
      v32 = MEMORY[0x1E0DEE9E8];
      if (v31)
      {
        v56 = v10;
        v57 = v9;
        MEMORY[0x1E0C80A78](v21);
        v54 = &v56;
        v55 = v32;
        swift_bridgeObjectRetain();
        v33 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v53, v10, v9);
        if (v34 == 1)
        {
          v35 = v56;
          v36 = v57;
          swift_bridgeObjectRetain();
          v10 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v35, v36, MEMORY[0x1E0DEE9E8]);
          v38 = v37;
          swift_bridgeObjectRelease_n();
          v39 = swift_bridgeObjectRelease();
          v9 = v38;
          if (v38)
            goto LABEL_22;
        }
        else
        {
          v10 = (uint64_t)v33;
          v40 = v34;
          v39 = swift_bridgeObjectRelease_n();
          v9 = v40;
          if (v40)
            goto LABEL_22;
        }
      }
      else
      {
        v39 = swift_bridgeObjectRelease();
      }
      v10 = 0;
      v9 = 0xE000000000000000;
LABEL_22:
      if (v23)
      {
        v41 = HIBYTE(v23) & 0xF;
        if ((v23 & 0x2000000000000000) == 0)
          v41 = v22 & 0xFFFFFFFFFFFFLL;
        if (v41)
        {
          v56 = v22;
          v57 = v23;
          MEMORY[0x1E0C80A78](v39);
          v54 = &v56;
          v55 = v32;
          swift_bridgeObjectRetain();
          v42 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v53, v22, v23);
          if (v43 == 1)
          {
            v44 = v56;
            v45 = v57;
            swift_bridgeObjectRetain();
            v22 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v44, v45, MEMORY[0x1E0DEE9E8]);
            v47 = v46;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          else
          {
            v22 = (uint64_t)v42;
            v47 = v43;
            swift_bridgeObjectRelease_n();
          }
          v23 = v47;
        }
        else
        {
          swift_bridgeObjectRelease();
          v22 = 0;
          v23 = 0xE000000000000000;
        }
      }
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 >> 14 < v18 >> 14)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v11 = a6;
  v12 = a5;
  v25 = String.subscript.getter();
  v10 = MEMORY[0x186DA4634](v25);
  v9 = v26;
  result = swift_bridgeObjectRelease();
  v28 = (v12 >> 59) & 1;
  if ((v11 & 0x1000000000000000) == 0)
    LOBYTE(v28) = 1;
  if ((v13 & 0xC) == 4 << v28)
  {
LABEL_38:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v12, v11);
    v13 = result;
    if ((v11 & 0x1000000000000000) != 0)
      goto LABEL_39;
LABEL_10:
    result = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_11;
  }
  if ((v11 & 0x1000000000000000) == 0)
    goto LABEL_10;
LABEL_39:
  v52 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v52 = v12 & 0xFFFFFFFFFFFFLL;
  if (v52 <= v13 >> 16)
    goto LABEL_44;
  result = String.UTF8View._foreignIndex(after:)();
LABEL_11:
  if (*(_QWORD *)(a7 + 16) >> 14 < result >> 14)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }
  v29 = String.subscript.getter();
  v22 = MEMORY[0x186DA4634](v29);
  v23 = v30;
  v21 = swift_bridgeObjectRelease();
  v24 = a9;
  if ((a8 & 1) == 0)
    goto LABEL_13;
LABEL_31:
  v48 = *(_QWORD **)(v24 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v24 + 16) = v48;
  if ((result & 1) == 0)
  {
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    v48 = (_QWORD *)result;
    *(_QWORD *)(v24 + 16) = result;
  }
  v50 = v48[2];
  v49 = v48[3];
  if (v50 >= v49 >> 1)
  {
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v48 = (_QWORD *)result;
    *(_QWORD *)(v24 + 16) = result;
  }
  v48[2] = v50 + 1;
  v51 = &v48[4 * v50];
  v51[4] = v10;
  v51[5] = v9;
  v51[6] = v22;
  v51[7] = v23;
  return result;
}

Swift::Void __swiftcall URLComponents._URLComponents.setQueryItems(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v1;
  char *rawValue;
  int64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  Swift::String v32;
  unint64_t v33;
  void *v34;
  unsigned __int16 *v35;
  id v36;
  void *v37;
  id v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned int v42;
  Swift::String v43;
  Swift::String v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  void *v59;
  unsigned __int16 *v60;
  id v61;
  void *v62;
  id v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  Swift::String v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[16];
  unint64_t *v91;
  char v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  int64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;

  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 15) = 0;
  if (!a1.value._rawValue)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    return;
  }
  rawValue = (char *)a1.value._rawValue;
  v3 = *((_QWORD *)a1.value._rawValue + 2);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(v1 + 120) = xmmword_182060F30;
    return;
  }
  v103 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = 0;
  v98 = rawValue + 32;
  v96 = (char *)&v99 + 1;
  v97 = v3;
  while (1)
  {
    v5 = (uint64_t *)&v98[32 * v4];
    v6 = *v5;
    v7 = v5[1];
    v9 = v5[2];
    v8 = v5[3];
    v101 = 0;
    v102 = 0xE000000000000000;
    if ((v7 & 0x1000000000000000) == 0)
    {
      if ((v7 & 0x2000000000000000) == 0)
      {
        if ((v6 & 0x1000000000000000) != 0)
        {
          v10 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v11 = v6 & 0xFFFFFFFFFFFFLL;
LABEL_8:
          if (!v11)
            goto LABEL_77;
          if ((*v10 & 0x80000000) == 0)
          {
            v12 = *v10;
            v13 = v11 - 1;
            v14 = v10 + 1;
            while (1)
            {
              if ((v12 - 39) >= 9 && v12 != 33 && v12 != 36)
              {
                if (v12 == 38)
                  goto LABEL_45;
                v16 = v12 - 58;
                if ((v12 - 58) <= 0xFFFFFFF5)
                {
                  if (v16 > 6)
                    goto LABEL_22;
                  if (((1 << v16) & 0x63) == 0)
                    break;
                }
              }
LABEL_12:
              if (!v13)
                goto LABEL_77;
              v15 = *v14++;
              v12 = v15;
              --v13;
              if (v15 < 0)
                goto LABEL_45;
            }
            if (v12 == 61)
              goto LABEL_45;
LABEL_22:
            if (v12 != 95 && (v12 - 65) >= 0x1A && v12 != 126 && (v12 - 97) >= 0x1A)
              goto LABEL_45;
            goto LABEL_12;
          }
LABEL_45:
          swift_bridgeObjectRetain();
          v23 = swift_bridgeObjectRetain();
          goto LABEL_46;
        }
        v10 = (char *)_StringObject.sharedUTF8.getter();
        if (v10)
          goto LABEL_8;
LABEL_77:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_78:
        v43._countAndFlagsBits = v6;
        v43._object = (void *)v7;
        String.append(_:)(v43);
        if (!v8)
          goto LABEL_55;
        goto LABEL_79;
      }
      v17 = HIBYTE(v7) & 0xF;
      v99 = v6;
      v100 = v7 & 0xFFFFFFFFFFFFFFLL;
      if (!v17)
        goto LABEL_77;
      if ((v6 & 0x80) != 0)
        goto LABEL_45;
      v18 = v6;
      v19 = v17 - 1;
      v20 = v96;
      while (1)
      {
        if ((v18 - 39) >= 9 && v18 != 33 && v18 != 36)
        {
          if (v18 == 38)
            goto LABEL_45;
          v22 = v18 - 58;
          if ((v18 - 58) <= 0xFFFFFFF5)
          {
            if (v22 > 6)
              goto LABEL_41;
            if (((1 << v22) & 0x63) == 0)
              break;
          }
        }
LABEL_31:
        if (!v19)
          goto LABEL_77;
        v21 = *v20++;
        v18 = v21;
        --v19;
        if (v21 < 0)
          goto LABEL_45;
      }
      if (v18 == 61)
        goto LABEL_45;
LABEL_41:
      if (v18 != 95 && (v18 - 65) >= 0x1A && v18 != 126 && (v18 - 97) >= 0x1A)
        goto LABEL_45;
      goto LABEL_31;
    }
    v99 = v6;
    v100 = v7;
    v33 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v94 = v33;
    StringProtocol._ephemeralString.getter();
    v34 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v35 = (unsigned __int16 *)objc_msgSend(v34, sel__fastCharacterContents);
    v36 = v34;
    v93 = v35;
    if (!v35)
      break;
    v99 = v6;
    v100 = v7;
    StringProtocol._ephemeralString.getter();
    v37 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(v37, sel_length);
    swift_unknownObjectRelease();
    if (!v38)
    {
LABEL_137:
      swift_bridgeObjectRelease_n();
      goto LABEL_78;
    }
    v39 = *v93;
    if (v39 < 0x80)
    {
      v40 = 2 * (_QWORD)v38 - 2;
      v41 = v93 + 1;
      while (1)
      {
        if (v39 - 39 >= 9 && v39 != 33 && v39 != 36)
        {
          if (v39 == 38)
            goto LABEL_75;
          if ((v39 - 58) <= 0xF5u)
          {
            if (v39 - 58 > 6)
              goto LABEL_71;
            if (((1 << (v39 - 58)) & 0x63) == 0)
              break;
          }
        }
LABEL_61:
        if (!v40)
          goto LABEL_137;
        v42 = *v41++;
        LOBYTE(v39) = v42;
        v40 -= 2;
        if (v42 >= 0x80)
          goto LABEL_75;
      }
      if (v39 == 61)
        goto LABEL_75;
LABEL_71:
      if (v39 != 95
        && (v39 - 65) >= 0x1Au
        && v39 != 126
        && (v39 - 97) >= 0x1Au)
      {
        goto LABEL_75;
      }
      goto LABEL_61;
    }
LABEL_75:
    v23 = swift_bridgeObjectRelease_n();
LABEL_46:
    v24 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v24 = v6 & 0xFFFFFFFFFFFFLL;
    if (v24)
    {
      v99 = v6;
      v100 = v7;
      MEMORY[0x1E0C80A78](v23);
      v91 = &v99;
      v92 = 0x80;
      swift_bridgeObjectRetain();
      v25 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v90, v6, v7);
      if (v26)
      {
        v27 = (uint64_t)v25;
        v28 = v26;
      }
      else
      {
        v29 = v99;
        v30 = v100;
        swift_bridgeObjectRetain();
        v27 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v29, v30, 0x80u);
        v28 = v31;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = 0;
      v28 = (void *)0xE000000000000000;
    }
    v32._countAndFlagsBits = v27;
    v32._object = v28;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    if (!v8)
    {
LABEL_55:
      swift_bridgeObjectRelease();
LABEL_151:
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
LABEL_79:
    swift_bridgeObjectRetain();
    v44._countAndFlagsBits = 61;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    if ((v8 & 0x1000000000000000) != 0)
    {
      v99 = v9;
      v100 = v8;
      v58 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      v94 = v58;
      StringProtocol._ephemeralString.getter();
      v59 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v60 = (unsigned __int16 *)objc_msgSend(v59, sel__fastCharacterContents);
      v61 = v59;
      if (v60)
      {
        v99 = v9;
        v100 = v8;
        StringProtocol._ephemeralString.getter();
        v62 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v63 = objc_msgSend(v62, sel_length);
        swift_unknownObjectRelease();
        v64 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v60, (uint64_t)v63, 0x80u, 0);
      }
      else
      {
        v64 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x80u, 0);
      }
      v69 = v64;
      v45 = (char *)swift_bridgeObjectRelease_n();
      if ((v69 & 1) == 0)
        goto LABEL_143;
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      v52 = HIBYTE(v8) & 0xF;
      v99 = v9;
      v100 = v8 & 0xFFFFFFFFFFFFFFLL;
      if (v52)
      {
        if ((v9 & 0x80) != 0)
          goto LABEL_143;
        v53 = v9;
        v54 = v52 - 1;
        v55 = v96;
        while (2)
        {
          if ((v53 - 39) >= 9 && v53 != 33 && v53 != 36)
          {
            if (v53 == 38)
              goto LABEL_143;
            v57 = v53 - 58;
            if ((v53 - 58) <= 0xFFFFFFF5)
            {
              if (v57 > 6)
              {
LABEL_116:
                if (v53 != 95 && (v53 - 65) >= 0x1A && v53 != 126 && (v53 - 97) >= 0x1A)
                  goto LABEL_143;
              }
              else if (((1 << v57) & 0x63) == 0)
              {
                if (v53 == 61)
                  goto LABEL_143;
                goto LABEL_116;
              }
            }
          }
          if (!v54)
            break;
          v56 = *v55++;
          v53 = v56;
          --v54;
          if (v56 < 0)
            goto LABEL_143;
          continue;
        }
      }
    }
    else
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        v45 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v46 = v9 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v45 = (char *)_StringObject.sharedUTF8.getter();
        if (!v45)
          goto LABEL_142;
      }
      if (v46)
      {
        if ((*v45 & 0x80000000) == 0)
        {
          v47 = *v45;
          v48 = v46 - 1;
          v49 = v45 + 1;
          while (1)
          {
            if ((v47 - 39) >= 9 && v47 != 33 && v47 != 36)
            {
              if (v47 == 38)
                goto LABEL_143;
              v51 = v47 - 58;
              if ((v47 - 58) <= 0xFFFFFFF5)
              {
                if (v51 > 6)
                  goto LABEL_97;
                if (((1 << v51) & 0x63) == 0)
                  break;
              }
            }
LABEL_87:
            if (!v48)
              goto LABEL_142;
            v50 = *v49++;
            v47 = v50;
            --v48;
            if (v50 < 0)
              goto LABEL_143;
          }
          if (v47 == 61)
            goto LABEL_143;
LABEL_97:
          if (v47 != 95 && (v47 - 65) >= 0x1A && v47 != 126 && (v47 - 97) >= 0x1A)
            goto LABEL_143;
          goto LABEL_87;
        }
LABEL_143:
        v71 = HIBYTE(v8) & 0xF;
        if ((v8 & 0x2000000000000000) == 0)
          v71 = v9 & 0xFFFFFFFFFFFFLL;
        if (v71)
        {
          v99 = v9;
          v100 = v8;
          MEMORY[0x1E0C80A78](v45);
          v91 = &v99;
          v92 = 0x80;
          swift_bridgeObjectRetain();
          v72 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v90, v9, v8);
          if (v73)
          {
            v74 = (uint64_t)v72;
            v75 = v73;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v76 = v99;
            v77 = v100;
            swift_bridgeObjectRetain();
            v74 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v76, v77, 0x80u);
            v75 = v78;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v74 = 0;
          v75 = (void *)0xE000000000000000;
        }
        v79._countAndFlagsBits = v74;
        v79._object = v75;
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_151;
      }
    }
LABEL_142:
    v70._countAndFlagsBits = v9;
    v70._object = (void *)v8;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_152:
    v81 = v101;
    v80 = v102;
    v82 = v103;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v82 + 16) + 1, 1);
      v82 = v103;
    }
    v84 = *(_QWORD *)(v82 + 16);
    v83 = *(_QWORD *)(v82 + 24);
    if (v84 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      v82 = v103;
    }
    ++v4;
    *(_QWORD *)(v82 + 16) = v84 + 1;
    v85 = v82 + 16 * v84;
    *(_QWORD *)(v85 + 32) = v81;
    *(_QWORD *)(v85 + 40) = v80;
    if (v4 == v97)
    {
      v101 = v82;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v86 = BidirectionalCollection<>.joined(separator:)();
      v88 = v87;
      swift_release();
      v89 = v95;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v89 + 120) = v86;
      *(_QWORD *)(v89 + 128) = v88;
      return;
    }
  }
  if ((v7 & 0x2000000000000000) != 0)
    v65 = HIBYTE(v7) & 0xF;
  else
    v65 = v6 & 0xFFFFFFFFFFFFLL;
  v93 = (unsigned __int16 *)(4 << ((v6 & 0x800000000000000) != 0));
  v94 = 4 * v65;
  v66 = 15;
  while (1)
  {
    if (v94 == v66 >> 14)
      goto LABEL_137;
    if ((unsigned __int16 *)(v66 & 0xC) == v93)
      break;
    if (v65 <= v66 >> 16)
      goto LABEL_160;
    v67 = String.UTF8View._foreignSubscript(position:)();
LABEL_131:
    v68 = String.UTF8View._foreignIndex(after:)();
    if ((v67 & 0x80) == 0)
    {
      v66 = v68;
      if ((UInt8.allowedURLComponents.getter(v67) & 0x80) != 0)
        continue;
    }
    goto LABEL_75;
  }
  if (v65 > (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v66, v6, v7) >> 16)
  {
    v67 = String.UTF8View._foreignSubscript(position:)();
    if (v65 <= (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v66, v6, v7) >> 16)
      goto LABEL_161;
    goto LABEL_131;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
}

uint64_t URLComponents.init(string:encodingInvalidCharacters:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _OWORD v10[8];
  _OWORD v11[2];
  _BYTE v12[160];
  _OWORD v13[8];
  _OWORD v14[2];

  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, a3, (uint64_t)v12);
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v13) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v10);
  }
  else
  {
    v10[6] = v13[6];
    v10[7] = v13[7];
    v11[0] = v14[0];
    *(_OWORD *)((char *)v11 + 10) = *(_OWORD *)((char *)v14 + 10);
    v10[2] = v13[2];
    v10[3] = v13[3];
    v10[4] = v13[4];
    v10[5] = v13[5];
    v10[0] = v13[0];
    v10[1] = v13[1];
    destructiveProjectEnumData for PredicateCodableError(v10, v8);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v10, a4, &demangling cache variable for type metadata for URLComponents?);
}

void URLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  const __CFAllocator *v24;
  const __CFString *v25;
  CFURLRef v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  __int16 v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  Swift::String v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;
  uint64_t v77;
  void *v78;
  Swift::String v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  Swift::String v89;
  _BYTE v90[32];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[10];
  _OWORD v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[26];

  v4 = v2[7];
  v5 = v2[5];
  v105 = v2[6];
  v106 = v4;
  v6 = v2[7];
  *(_OWORD *)v107 = v2[8];
  *(_OWORD *)&v107[10] = *(__int128 *)((char *)v2 + 138);
  v7 = v2[3];
  v8 = v2[1];
  v101 = v2[2];
  v102 = v7;
  v9 = v2[3];
  v10 = v2[5];
  v103 = v2[4];
  v104 = v10;
  v11 = v2[1];
  v99 = *v2;
  v100 = v11;
  v97[8] = v105;
  v97[9] = v6;
  v98[0] = v2[8];
  *(_OWORD *)((char *)v98 + 10) = *(__int128 *)((char *)v2 + 138);
  v97[4] = v101;
  v97[5] = v9;
  v97[6] = v103;
  v97[7] = v5;
  v13 = *(void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v97[2] = v99;
  v97[3] = v8;
  if (BYTE8(v99) == 1)
  {
    if ((_QWORD)v99)
    {
      v16 = *(_QWORD *)(v99 + 16);
      v15 = *(_QWORD *)(v99 + 24);
      swift_bridgeObjectRetain();
      if (v13)
        goto LABEL_4;
LABEL_116:
      swift_bridgeObjectRelease();
      v96 = v106;
      v97[0] = *(_OWORD *)v107;
      *(_OWORD *)((char *)v97 + 10) = *(_OWORD *)&v107[10];
      v91 = v101;
      v92 = v102;
      v93 = v103;
      v94 = v104;
      v95 = v105;
      *(_OWORD *)v90 = v99;
      *(_OWORD *)&v90[16] = v100;
      URLComponents.url.getter(a2);
      return;
    }
LABEL_39:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if ((v107[25] & 1) != 0)
    goto LABEL_39;
  *(_QWORD *)v90 = 0;
  *(_QWORD *)&v90[8] = 0xE000000000000000;
  v19 = (void *)v101;
  if ((_QWORD)v101)
  {
    v20 = *((_QWORD *)&v100 + 1);
    outlined retain of URLComponents((uint64_t)&v99);
    v21 = v19;
LABEL_9:
    v89._countAndFlagsBits = v20;
    v89._object = v21;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 58;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v20;
    v23._object = v21;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (BYTE9(v99) == 1 && (_QWORD)v99 && (*(_BYTE *)(v99 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v99);
    v35 = String.subscript.getter();
    v20 = MEMORY[0x186DA4634](v35);
    v21 = v36;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined retain of URLComponents((uint64_t)&v99);
LABEL_16:
  if ((URLComponents._URLComponents.hasAuthority.getter() & 1) != 0)
  {
    if ((_QWORD)v106)
    {
      v29 = *((_QWORD *)&v105 + 1);
      v30 = v106;
    }
    else if ((BYTE14(v99) & 1) != 0 && (_QWORD)v99)
    {
      if ((*(_BYTE *)(v99 + 168) & 1) != 0)
        v33 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      else
        v33 = String.subscript.getter();
      v29 = MEMORY[0x186DA4634](v33);
      v30 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = 0;
      v30 = 0xE000000000000000;
    }
    v38 = specialized Collection.first.getter(v29, v30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v38 & 0x100) == 0 && v38 != 47)
      goto LABEL_38;
    v39._countAndFlagsBits = 12079;
    v39._object = (void *)0xE200000000000000;
    String.append(_:)(v39);
    goto LABEL_70;
  }
  v88 = v12;
  if ((_QWORD)v106)
  {
    v31 = *((_QWORD *)&v105 + 1);
    v32 = v106;
  }
  else if ((BYTE14(v99) & 1) != 0 && (_QWORD)v99)
  {
    if ((*(_BYTE *)(v99 + 168) & 1) != 0)
      v34 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v34 = String.subscript.getter();
    v31 = MEMORY[0x186DA4634](v34);
    v32 = v40;
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
    v32 = 0xE000000000000000;
  }
  v41 = v14;
  v42 = (v32 & 0x1000000000000000) == 0 || (v31 & 0x800000000000000) != 0;
  v43 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x1000000000000000) != 0)
  {
    v87 = v42;
    v44 = v31 & 0xFFFFFFFFFFFFLL;
    if ((v32 & 0x2000000000000000) != 0)
      v84 = HIBYTE(v32) & 0xF;
    else
      v84 = v31 & 0xFFFFFFFFFFFFLL;
    if (!v84)
    {
      __break(1u);
      return;
    }
    v45 = String.UTF8View._foreignIndex(after:)();
    v42 = v87;
  }
  else
  {
    v44 = v31 & 0xFFFFFFFFFFFFLL;
    v45 = 65540;
  }
  if ((v32 & 0x2000000000000000) == 0)
    v43 = v44;
  if (v45 >> 14 == 4 * v43)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = v41;
    v12 = v88;
    goto LABEL_70;
  }
  v86 = v42;
  v46 = specialized Collection.first.getter(v31, v32);
  v14 = v41;
  if ((v46 & 0x100) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v12 = v88;
    goto LABEL_70;
  }
  v12 = v88;
  if (v46 != 47)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  v48 = 65540;
  if ((v32 & 0x1000000000000000) != 0)
  {
    if (!v43)
    {
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    v48 = String.UTF8View._foreignIndex(after:)();
  }
  if ((v48 & 0xC) == 4 << v86)
    v48 = _StringGuts._slowEnsureMatchingEncoding(_:)(v48, v31, v32);
  v47 = v48 >> 16;
  if (v48 >> 16 >= v43)
  {
    __break(1u);
    goto LABEL_125;
  }
  if ((v32 & 0x1000000000000000) != 0)
  {
    v50 = String.UTF8View._foreignSubscript(position:)();
  }
  else
  {
    if ((v32 & 0x2000000000000000) == 0)
    {
      if ((v31 & 0x1000000000000000) != 0)
      {
        v49 = (v32 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_64:
        v50 = *(_BYTE *)(v49 + v47);
        goto LABEL_69;
      }
LABEL_126:
      v85 = v47;
      v49 = _StringObject.sharedUTF8.getter();
      v47 = v85;
      goto LABEL_64;
    }
    v89._countAndFlagsBits = v31;
    v89._object = (void *)(v32 & 0xFFFFFFFFFFFFFFLL);
    v50 = *((_BYTE *)&v89._countAndFlagsBits + v47);
  }
LABEL_69:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v50 == 47)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v99);
    goto LABEL_39;
  }
LABEL_70:
  v51 = URLComponents._URLComponents.percentEncodedUser.getter();
  if (v52)
  {
    String.append(_:)(*(Swift::String *)&v51);
    swift_bridgeObjectRelease();
  }
  v53 = v103;
  if ((_QWORD)v103)
  {
    v54 = *((_QWORD *)&v102 + 1);
    v55 = (void *)v103;
LABEL_74:
    v89._countAndFlagsBits = 58;
    v89._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v56._countAndFlagsBits = v54;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }
  if (BYTE11(v99) == 1 && (_QWORD)v99 && (*(_BYTE *)(v99 + 96) & 1) == 0)
  {
    v69 = String.subscript.getter();
    v54 = MEMORY[0x186DA4634](v69);
    v55 = v70;
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
LABEL_78:
  URLComponents._URLComponents.percentEncodedUser.getter();
  v58 = v57;
  swift_bridgeObjectRelease();
  if (v58 | v53)
  {
LABEL_79:
    v59._countAndFlagsBits = 64;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    goto LABEL_83;
  }
  if (BYTE11(v99) == 1 && (_QWORD)v99 && (*(_BYTE *)(v99 + 96) & 1) == 0)
  {
    v71 = String.subscript.getter();
    MEMORY[0x186DA4634](v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_79;
  }
LABEL_83:
  v60 = URLComponents._URLComponents.encodedHost.getter();
  if (v61)
  {
    String.append(_:)(*(Swift::String *)&v60);
    swift_bridgeObjectRelease();
  }
  URLComponents._URLComponents.port.getter();
  if ((v62 & 1) == 0)
  {
    v89._countAndFlagsBits = 58;
    v89._object = (void *)0xE100000000000000;
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
LABEL_87:
    swift_bridgeObjectRelease();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    goto LABEL_91;
  }
  if ((BYTE13(v99) & 1) != 0 && (_QWORD)v99 && (*(_BYTE *)(v99 + 144) & 1) == 0)
  {
    v67 = String.subscript.getter();
    v89._countAndFlagsBits = 58;
    v89._object = (void *)0xE100000000000000;
    v68._countAndFlagsBits = MEMORY[0x186DA4634](v67);
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    goto LABEL_87;
  }
LABEL_91:
  if ((_QWORD)v106)
  {
    v64 = *((_QWORD *)&v105 + 1);
    v65 = (void *)v106;
  }
  else if ((BYTE14(v99) & 1) != 0 && (_QWORD)v99)
  {
    if ((*(_BYTE *)(v99 + 168) & 1) != 0)
      v66 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v66 = String.subscript.getter();
    v64 = MEMORY[0x186DA4634](v66);
    v65 = v72;
    swift_bridgeObjectRelease();
  }
  else
  {
    v64 = 0;
    v65 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v73._countAndFlagsBits = v64;
  v73._object = v65;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)v107)
  {
    v74 = *((_QWORD *)&v106 + 1);
    v75 = *(void **)v107;
LABEL_105:
    v89._countAndFlagsBits = 63;
    v89._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v76._countAndFlagsBits = v74;
    v76._object = v75;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  if (HIBYTE(v99) == 1 && (_QWORD)v99 && (*(_BYTE *)(v99 + 192) & 1) == 0)
  {
    v80 = String.subscript.getter();
    v74 = MEMORY[0x186DA4634](v80);
    v75 = v81;
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
LABEL_109:
  if (*(_QWORD *)&v107[16])
  {
    v77 = *(_QWORD *)&v107[8];
    v78 = *(void **)&v107[16];
LABEL_111:
    v89._countAndFlagsBits = 35;
    v89._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v79._countAndFlagsBits = v77;
    v79._object = v78;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    goto LABEL_115;
  }
  if (v100 == 1 && (_QWORD)v99 && (*(_BYTE *)(v99 + 216) & 1) == 0)
  {
    v82 = String.subscript.getter();
    v77 = MEMORY[0x186DA4634](v82);
    v78 = v83;
    swift_bridgeObjectRelease();
    goto LABEL_111;
  }
LABEL_115:
  outlined release of URLComponents((uint64_t)&v99);
  v15 = *(_QWORD *)&v90[8];
  v16 = *(_QWORD *)v90;
  if (!v13)
    goto LABEL_116;
LABEL_4:
  swift_retain();
  v17 = v13;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    *(_QWORD *)v90 = v13;
    *(_QWORD *)&v90[8] = v12;
    *(_QWORD *)&v90[16] = v14;
    v18 = v17;
    swift_retain();
    swift_retain();
    URL.init(string:relativeTo:)(v16, v15, (id *)v90, a2);
    swift_bridgeObjectRelease();
    outlined consume of URL?(v13);
    outlined consume of URL?(v13);
  }
  else
  {
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v25 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v26 = CFURLCreateWithString(v24, v25, (CFURLRef)v17);
    swift_unknownObjectRelease();
    if (v26)
    {
      URL.init(reference:)(v26, v90);
      outlined consume of URL?(v13);

      v27 = *(_QWORD *)v90;
      v28 = *(_OWORD *)&v90[8];
    }
    else
    {
      outlined consume of URL?(v13);
      v27 = 0;
      v28 = 0uLL;
    }
    *a2 = v27;
    *(_OWORD *)(a2 + 1) = v28;
  }
}

uint64_t URLComponents.scheme.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (v0[4])
  {
    v1 = v0[3];
  }
  else
  {
    v2 = *v0;
    v3 = *((_BYTE *)v0 + 9) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 48) & 1) != 0)
    {
      v1 = 0;
    }
    else
    {
      v4 = String.subscript.getter();
      v1 = MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*URLComponents.scheme.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  if (*(_QWORD *)(v1 + 32))
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v1 + 32);
  }
  else
  {
    v5 = *(_QWORD *)v1;
    v6 = *(_BYTE *)(v1 + 9) != 1 || v5 == 0;
    if (v6 || (*(_BYTE *)(v5 + 48) & 1) != 0)
    {
      v3 = 0;
      v4 = 0;
    }
    else
    {
      v7 = String.subscript.getter();
      v3 = MEMORY[0x186DA4634](v7);
      v4 = v8;
      swift_bridgeObjectRelease();
    }
  }
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return URLComponents.scheme.modify;
}

uint64_t URLComponents.scheme.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;
  Swift::String_optional v4;
  void *v5;
  Swift::String_optional v6;
  uint64_t result;

  v3 = *a1;
  v2 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4.value._countAndFlagsBits = v3;
    v4.value._object = v2;
    URLComponents._URLComponents.setScheme(_:)(v4);
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6.value._countAndFlagsBits = *a1;
    v6.value._object = v2;
    URLComponents._URLComponents.setScheme(_:)(v6);
    if (!v5)
      return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.user.getter(uint64_t a1))(char *, _QWORD)
{
  return URLComponents._URLComponents.user.getter(a1);
}

uint64_t URLComponents.user.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = a1;
    *(_QWORD *)(v3 + 48) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v27 = a1;
    v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    v12 = v10;
    if (v11)
    {
      v27 = a1;
      v28 = a2;
      StringProtocol._ephemeralString.getter();
      v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 0);
    }
    else
    {
      v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }
    v16 = v15;
    v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v27 = a1;
      v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a1;
    v28 = a2;
    MEMORY[0x1E0C80A78](v8);
    v25[2] = &v27;
    v26 = 2;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a1, a2);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 40) = v20;
  *(_QWORD *)(v3 + 48) = v21;
  return result;
}

void (*URLComponents.user.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 24) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.user.getter((uint64_t)v3);
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.user.modify;
}

void URLComponents.user.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned __int16 *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned __int16 *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(_QWORD *)a1 + 176;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 2u, 0);
          v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
            goto LABEL_33;
        }
LABEL_21:
        v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0)
          v18 = v3 & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1E0C80A78](v17);
          v43 = v4;
          v44 = 2;
          swift_bridgeObjectRetain();
          v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
          if (v20)
          {
            v3 = (uint64_t)v19;
            v21 = v20;
          }
          else
          {
            v26 = v2[22];
            v27 = v2[23];
            swift_bridgeObjectRetain();
            v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          v3 = 0;
          v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0)
        goto LABEL_21;
    }
LABEL_33:
    v29 = v2[24];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 40) = v3;
    *(_QWORD *)(v29 + 48) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 2u, 0);
        v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          goto LABEL_30;
      }
LABEL_14:
      v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0)
        v13 = v3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1E0C80A78](v12);
        v43 = v4;
        v44 = 2;
        swift_bridgeObjectRetain();
        v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
        if (v15)
        {
          v3 = (uint64_t)v14;
          v16 = v15;
        }
        else
        {
          v22 = v2[22];
          v23 = v2[23];
          swift_bridgeObjectRetain();
          v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        v3 = 0;
        v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    v12 = swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_14;
  }
LABEL_30:
  v25 = v2[24];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v25 + 40) = v3;
  *(_QWORD *)(v25 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

void (*URLComponents.password.getter(uint64_t a1))(char *, _QWORD)
{
  return URLComponents._URLComponents.password.getter(a1);
}

uint64_t key path getter for URLComponents.user : URLComponents@<X0>(_OWORD *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _OWORD v14[8];
  _OWORD v15[2];

  v5 = a1[7];
  v14[6] = a1[6];
  v14[7] = v5;
  v15[0] = a1[8];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)a1 + 138);
  v6 = a1[3];
  v14[2] = a1[2];
  v14[3] = v6;
  v7 = a1[5];
  v14[4] = a1[4];
  v14[5] = v7;
  v8 = a1[1];
  v14[0] = *a1;
  v14[1] = v8;
  v9 = outlined retain of URLComponents((uint64_t)v14);
  v10 = a2(v9);
  v12 = v11;
  result = outlined release of URLComponents((uint64_t)v14);
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t URLComponents.password.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 56) = a1;
    *(_QWORD *)(v3 + 64) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v27 = a1;
    v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    v12 = v10;
    if (v11)
    {
      v27 = a1;
      v28 = a2;
      StringProtocol._ephemeralString.getter();
      v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 0);
    }
    else
    {
      v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }
    v16 = v15;
    v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v27 = a1;
      v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a1;
    v28 = a2;
    MEMORY[0x1E0C80A78](v8);
    v25[2] = &v27;
    v26 = 2;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a1, a2);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 56) = v20;
  *(_QWORD *)(v3 + 64) = v21;
  return result;
}

void (*URLComponents.password.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 24) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.password.getter((uint64_t)v3);
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.password.modify;
}

void URLComponents.password.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned __int16 *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned __int16 *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(_QWORD *)a1 + 176;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 2u, 0);
          v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
            goto LABEL_33;
        }
LABEL_21:
        v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0)
          v18 = v3 & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1E0C80A78](v17);
          v43 = v4;
          v44 = 2;
          swift_bridgeObjectRetain();
          v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
          if (v20)
          {
            v3 = (uint64_t)v19;
            v21 = v20;
          }
          else
          {
            v26 = v2[22];
            v27 = v2[23];
            swift_bridgeObjectRetain();
            v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          v3 = 0;
          v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0)
        goto LABEL_21;
    }
LABEL_33:
    v29 = v2[24];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 56) = v3;
    *(_QWORD *)(v29 + 64) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 2u, 0);
        v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          goto LABEL_30;
      }
LABEL_14:
      v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0)
        v13 = v3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1E0C80A78](v12);
        v43 = v4;
        v44 = 2;
        swift_bridgeObjectRetain();
        v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
        if (v15)
        {
          v3 = (uint64_t)v14;
          v16 = v15;
        }
        else
        {
          v22 = v2[22];
          v23 = v2[23];
          swift_bridgeObjectRetain();
          v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        v3 = 0;
        v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    v12 = swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_14;
  }
LABEL_30:
  v25 = v2[24];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v25 + 56) = v3;
  *(_QWORD *)(v25 + 64) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

uint64_t URLComponents.host.getter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  uint64_t v50;
  int32_t (__cdecl **v51)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56[2];
  int32_t (__cdecl *v57)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v58;
  int32_t (__cdecl *v59)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v60;

  v2 = *(_BYTE *)(v1 + 152);
  if (!*(_QWORD *)(v1 + 80))
  {
    v5 = *(_BYTE **)v1;
    v6 = *(unsigned __int8 *)(v1 + 10);
    v7 = *(unsigned __int8 *)(v1 + 11);
    v8 = *(_QWORD *)(v1 + 48);
    v9 = *(_QWORD *)(v1 + 64);
    v10 = *(_BYTE *)(v1 + 12) != 1 || v5 == 0;
    if (!v10 && (v5[120] & 1) == 0)
    {
      v18 = String.subscript.getter();
      v3 = MEMORY[0x186DA4634](v18);
      v4 = v19;
      a1 = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    if (!*(_BYTE *)(v1 + 96))
    {
LABEL_21:
      v3 = 0;
      v4 = 0xE000000000000000;
      goto LABEL_22;
    }
    if (*(_BYTE *)(v1 + 13) && v5 && (v5[144] & 1) == 0)
    {
      v11 = String.subscript.getter();
      if (!((v11 ^ v12) >> 14))
      {
        a1 = swift_bridgeObjectRelease();
        if (v8)
          goto LABEL_19;
LABEL_54:
        if (!v6 || !v5 || (v5[72] & 1) != 0)
        {
          if (v9)
            goto LABEL_21;
          v26 = 0;
          if (!v7 || !v5)
            return v26;
          if ((v5[96] & 1) != 0)
            return 0;
          v48 = String.subscript.getter();
          MEMORY[0x186DA4634](v48);
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
        v47 = String.subscript.getter();
        MEMORY[0x186DA4634](v47);
        swift_bridgeObjectRelease();
LABEL_19:
        swift_bridgeObjectRetain();
LABEL_20:
        a1 = swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      v15 = v12;
      v53 = v13;
      v54 = v11;
      v55 = v14;
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v11, v12, v13, v14, 10);
      if ((v16 & 0x100) != 0)
        specialized _parseInteger<A, B>(ascii:radix:)(v54, v15, v53, v55, 10);
      v17 = v16;
      a1 = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        goto LABEL_21;
    }
    if (v8)
      goto LABEL_19;
    goto LABEL_54;
  }
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
LABEL_22:
  v20 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v4) & 0xF;
  else
    v21 = v3 & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    if ((v2 & 1) != 0)
    {
      v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      v60 = v4;
      MEMORY[0x1E0C80A78](a1);
      v51 = &v59;
      v52 = MEMORY[0x1E0DEE9E8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v50, v3, v4);
      if (v23 == 1)
      {
        v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
        v25 = v60;
        swift_bridgeObjectRetain();
        v26 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v24, v25, MEMORY[0x1E0DEE9E8]);
        swift_bridgeObjectRelease_n();
LABEL_51:
        swift_bridgeObjectRelease();
        return v26;
      }
      v26 = (uint64_t)v22;
      goto LABEL_40;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v4 & 0x2000000000000000) != 0)
      {
        v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
        v60 = v4 & 0xFFFFFFFFFFFFFFLL;
        v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v58 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v59, HIBYTE(v4) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)&v59, HIBYTE(v4) & 0xF, v56);
        v26 = v56[0];
        v29 = v56[1];
        swift_release();
      }
      else
      {
        if ((v3 & 0x1000000000000000) != 0)
        {
          v27 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v20 = v43;
        }
        v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v60 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v27, v20, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59, 0, v27, v20);
        v29 = v28;
      }
      swift_bridgeObjectRelease();
      if (v29 != 1)
      {
LABEL_40:
        swift_bridgeObjectRelease_n();
        return v26;
      }
    }
    v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    v60 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v30, sel__fastCharacterContents);
    v32 = v30;
    if (v31)
    {
      v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      v60 = v4;
      StringProtocol._ephemeralString.getter();
      v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v33, sel_length);
      v35 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v35);
      LOBYTE(v51) = 0;
      MEMORY[0x1E0C80A78](v36);
      v49[2] = v31;
      v49[3] = v34;
      v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v37, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v49);
      swift_bridgeObjectRelease_n();
      return v26;
    }
    v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    v60 = v4;
    swift_bridgeObjectRetain();
    v39 = String.init<A>(_:)();
    v40 = v38;
    if ((v38 & 0x1000000000000000) != 0)
    {
      v39 = static String._copying(_:)();
      v45 = v44;
      swift_bridgeObjectRelease();
      v40 = v45;
      if ((v45 & 0x2000000000000000) == 0)
        goto LABEL_43;
    }
    else if ((v38 & 0x2000000000000000) == 0)
    {
LABEL_43:
      if ((v39 & 0x1000000000000000) != 0)
      {
        v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v42 = v39 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v60 = 0;
      v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v41, v42, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59, 0, v41, v42);
      goto LABEL_50;
    }
    v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v39;
    v60 = v40 & 0xFFFFFFFFFFFFFFLL;
    v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v58 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v59, HIBYTE(v40) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)&v59, HIBYTE(v40) & 0xF, v56);
    v26 = v56[0];
    swift_release();
LABEL_50:
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return 0;
}

void (*URLComponents.host.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v48[4];
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int32_t (__cdecl *v54)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v55;

  v3 = (char *)malloc(0x108uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 176);
  *((_QWORD *)v3 + 32) = v1;
  v5 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v6 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v6;
  v7 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v7;
  v8 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v8;
  outlined init with take of LocalePreferences?((uint64_t)(v3 + 72), (uint64_t)(v3 + 176), &demangling cache variable for type metadata for String?);
  v9 = outlined init with take of LocalePreferences?((uint64_t)(v3 + 176), (uint64_t)(v3 + 192), &demangling cache variable for type metadata for String?);
  v10 = *((_QWORD *)v3 + 25);
  if (v10)
  {
    v11 = *((_QWORD *)v3 + 24);
  }
  else if ((v3[12] & 1) != 0
         && (outlined init with take of LocalePreferences?((uint64_t)v3, (uint64_t)(v3 + 248), &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)(v3 + 248), (uint64_t)(v3 + 232), &demangling cache variable for type metadata for URLParseInfo?), (v12 = *((_QWORD *)v3 + 29)) != 0)&& (*(_BYTE *)(v12 + 120) & 1) == 0)
  {
    v18 = String.subscript.getter();
    v11 = MEMORY[0x186DA4634](v18);
    v10 = v19;
    v9 = swift_bridgeObjectRelease();
  }
  else
  {
    v9 = URLComponents._URLComponents.port.getter();
    if ((v13 & 1) != 0)
    {
      v14 = URLComponents._URLComponents.percentEncodedUser.getter();
      v16 = v15;
      v9 = swift_bridgeObjectRelease();
      v17 = 0;
      if (!v16)
        goto LABEL_40;
      v10 = 0xE000000000000000;
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v10 = 0xE000000000000000;
    }
  }
  v20 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v10) & 0xF;
  else
    v21 = v11 & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    if ((v3[152] & 1) != 0)
    {
      *((_QWORD *)v3 + 20) = v11;
      *((_QWORD *)v3 + 21) = v10;
      MEMORY[0x1E0C80A78](v9);
      v50 = v3 + 160;
      v51 = MEMORY[0x1E0DEE9E8];
      outlined retain of String?(v4);
      swift_bridgeObjectRetain();
      v24 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v49, v11, v10);
      if (v25 != 1)
      {
        v14 = (uint64_t)v24;
        v17 = v25;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
      v26 = *((_QWORD *)v3 + 20);
      v27 = *((_QWORD *)v3 + 21);
      swift_bridgeObjectRetain();
      v14 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, MEMORY[0x1E0DEE9E8]);
      v17 = v28;
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        outlined retain of String?(v4);
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((v10 & 0x2000000000000000) != 0)
        {
          *((_QWORD *)v3 + 20) = v11;
          *((_QWORD *)v3 + 21) = v10 & 0xFFFFFFFFFFFFFFLL;
          v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          v55 = 0;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)(v3 + 160), HIBYTE(v10) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)v3 + 160, HIBYTE(v10) & 0xF, &v52);
          v14 = v52;
          v17 = v53;
          swift_release();
        }
        else
        {
          if ((v11 & 0x1000000000000000) != 0)
          {
            v22 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            v20 = v44;
          }
          v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          v55 = 0;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v22, v20, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, v22, v20);
          v17 = v23;
        }
        swift_bridgeObjectRelease();
        if (v17 != 1)
          goto LABEL_39;
      }
      *((_QWORD *)v3 + 20) = v11;
      *((_QWORD *)v3 + 21) = v10;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v29 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v30 = objc_msgSend(v29, sel__fastCharacterContents);
      v31 = v29;
      if (v30)
      {
        *((_QWORD *)v3 + 20) = v11;
        *((_QWORD *)v3 + 21) = v10;
        StringProtocol._ephemeralString.getter();
        v32 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v33 = objc_msgSend(v32, sel_length);
        v34 = swift_unknownObjectRelease();
        MEMORY[0x1E0C80A78](v34);
        LOBYTE(v50) = 0;
        MEMORY[0x1E0C80A78](v35);
        v48[2] = v30;
        v48[3] = v33;
        v14 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v30, (uint64_t)v33, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v36, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v48);
        v17 = v37;
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
      *((_QWORD *)v3 + 20) = v11;
      *((_QWORD *)v3 + 21) = v10;
      swift_bridgeObjectRetain();
      v39 = String.init<A>(_:)();
      v40 = v38;
      if ((v38 & 0x1000000000000000) != 0)
      {
        v39 = static String._copying(_:)();
        v46 = v45;
        swift_bridgeObjectRelease();
        v40 = v46;
        if ((v46 & 0x2000000000000000) == 0)
          goto LABEL_31;
      }
      else if ((v38 & 0x2000000000000000) == 0)
      {
LABEL_31:
        if ((v39 & 0x1000000000000000) != 0)
        {
          v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v42 = v39 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v55 = 0;
        v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v41, v42, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, v41, v42);
        v17 = v43;
        goto LABEL_38;
      }
      *((_QWORD *)v3 + 20) = v39;
      *((_QWORD *)v3 + 21) = v40 & 0xFFFFFFFFFFFFFFLL;
      v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v55 = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)(v3 + 160), HIBYTE(v40) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)v3 + 160, HIBYTE(v40) & 0xF, &v52);
      v14 = v52;
      v17 = v53;
      swift_release();
    }
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  outlined retain of String?(v4);
  swift_bridgeObjectRelease();
  v14 = 0;
  v17 = 0xE000000000000000;
LABEL_40:
  *((_QWORD *)v3 + 26) = v14;
  *((_QWORD *)v3 + 27) = v17;
  return URLComponents.host.modify;
}

void URLComponents.host.modify(uint64_t a1, char a2)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 216);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    URLComponents.host.setter(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents.host.setter(*(_QWORD *)(*(_QWORD *)a1 + 208), v4);
  }
  free(v2);
}

uint64_t URLComponents.port.getter()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;

  if (*(_BYTE *)(v0 + 96))
    result = 0;
  else
    result = *(_QWORD *)(v0 + 88);
  if (*(_BYTE *)(v0 + 96) == 1 && (*(_BYTE *)(v0 + 13) & 1) != 0)
  {
    if (!*(_QWORD *)v0 || (*(_BYTE *)(*(_QWORD *)v0 + 144) & 1) != 0)
      return 0;
    v2 = String.subscript.getter();
    v6 = v5;
    if (!((v2 ^ v3) >> 14))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
    if ((v11 & 0x100) != 0)
    {
      v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
      v16 = v15;
      swift_bridgeObjectRelease();
      v14 = v16 & 1;
    }
    else
    {
      v12 = v10;
      v13 = v11;
      swift_bridgeObjectRelease();
      v14 = v13 & 1;
    }
    if (v14)
      return 0;
    else
      return v12;
  }
  return result;
}

uint64_t key path setter for URLComponents.port : URLComponents(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)result;
  v3 = *(_BYTE *)(result + 8);
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 13) = 0;
  if ((v3 & 1) == 0 && v2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v2;
    *(_BYTE *)(a2 + 96) = v3;
  }
  return result;
}

uint64_t (*URLComponents.port.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(unsigned __int8 *)(v1 + 96);
  if (*(_BYTE *)(v1 + 96))
    v3 = 0;
  if (v4 == 1 && (*(_BYTE *)(v1 + 13) & 1) != 0)
  {
    if (!*(_QWORD *)v1 || (*(_BYTE *)(*(_QWORD *)v1 + 144) & 1) != 0)
      goto LABEL_7;
    v5 = String.subscript.getter();
    v9 = v8;
    if (!((v5 ^ v6) >> 14))
    {
      swift_bridgeObjectRelease();
LABEL_7:
      v3 = 0;
      LOBYTE(v4) = 1;
      goto LABEL_15;
    }
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5, v6, v7, v8, 10);
    if ((v14 & 0x100) != 0)
    {
      v15 = specialized _parseInteger<A, B>(ascii:radix:)(v10, v11, v12, v9, 10);
      v18 = v17;
      swift_bridgeObjectRelease();
      v4 = v18 & 1;
    }
    else
    {
      v15 = v13;
      v16 = v14;
      swift_bridgeObjectRelease();
      v4 = v16 & 1;
    }
    if (v4)
      v3 = 0;
    else
      v3 = v15;
  }
LABEL_15:
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return URLComponents.port.modify;
}

uint64_t URLComponents.port.modify(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)result;
  v3 = *(_BYTE *)(result + 8);
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 13) = 0;
  if (v2 >= 0)
    v4 = 1;
  else
    v4 = v3;
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)(v1 + 88) = v2;
    *(_BYTE *)(v1 + 96) = v3;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t key path getter for URLComponents.path : URLComponents@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (*v7)(char *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD v11[8];
  _OWORD v12[2];

  v3 = a1[7];
  v11[6] = a1[6];
  v11[7] = v3;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  v4 = a1[3];
  v11[2] = a1[2];
  v11[3] = v4;
  v5 = a1[5];
  v11[4] = a1[4];
  v11[5] = v5;
  v6 = a1[1];
  v11[0] = *a1;
  v11[1] = v6;
  outlined retain of URLComponents((uint64_t)v11);
  v7 = URLComponents._URLComponents.path.getter();
  v9 = v8;
  result = outlined release of URLComponents((uint64_t)v11);
  *a2 = v7;
  a2[1] = v9;
  return result;
}

void (*URLComponents.query.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 24) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.query.getter((uint64_t)v3);
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.query.modify;
}

void URLComponents.query.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned __int16 *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned __int16 *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(_QWORD *)a1 + 176;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 0x40u, 0);
          v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
            goto LABEL_33;
        }
LABEL_21:
        v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0)
          v18 = v3 & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1E0C80A78](v17);
          v43 = v4;
          v44 = 64;
          swift_bridgeObjectRetain();
          v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
          if (v20)
          {
            v3 = (uint64_t)v19;
            v21 = v20;
          }
          else
          {
            v26 = v2[22];
            v27 = v2[23];
            swift_bridgeObjectRetain();
            v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          v3 = 0;
          v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0)
        goto LABEL_21;
    }
LABEL_33:
    v29 = v2[24];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 120) = v3;
    *(_QWORD *)(v29 + 128) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 0x40u, 0);
        v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          goto LABEL_30;
      }
LABEL_14:
      v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0)
        v13 = v3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1E0C80A78](v12);
        v43 = v4;
        v44 = 64;
        swift_bridgeObjectRetain();
        v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
        if (v15)
        {
          v3 = (uint64_t)v14;
          v16 = v15;
        }
        else
        {
          v22 = v2[22];
          v23 = v2[23];
          swift_bridgeObjectRetain();
          v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        v3 = 0;
        v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    v12 = swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_14;
  }
LABEL_30:
  v25 = v2[24];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v25 + 120) = v3;
  *(_QWORD *)(v25 + 128) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

void (*URLComponents.fragment.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 24) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.fragment.getter((uint64_t)v3);
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.fragment.modify;
}

void URLComponents.fragment.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned __int16 *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned __int16 *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(_QWORD *)a1 + 176;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 0x40u, 0);
          v17 = swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          v17 = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
            goto LABEL_33;
        }
LABEL_21:
        v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0)
          v18 = v3 & 0xFFFFFFFFFFFFLL;
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1E0C80A78](v17);
          v43 = v4;
          v44 = 64;
          swift_bridgeObjectRetain();
          v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
          if (v20)
          {
            v3 = (uint64_t)v19;
            v21 = v20;
          }
          else
          {
            v26 = v2[22];
            v27 = v2[23];
            swift_bridgeObjectRetain();
            v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          v3 = 0;
          v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0)
        goto LABEL_21;
    }
LABEL_33:
    v29 = v2[24];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 136) = v3;
    *(_QWORD *)(v29 + 144) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 0x40u, 0);
        v12 = swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        v12 = swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
          goto LABEL_30;
      }
LABEL_14:
      v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0)
        v13 = v3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1E0C80A78](v12);
        v43 = v4;
        v44 = 64;
        swift_bridgeObjectRetain();
        v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v42, v3, v6);
        if (v15)
        {
          v3 = (uint64_t)v14;
          v16 = v15;
        }
        else
        {
          v22 = v2[22];
          v23 = v2[23];
          swift_bridgeObjectRetain();
          v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        v3 = 0;
        v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    v12 = swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_14;
  }
LABEL_30:
  v25 = v2[24];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v25 + 136) = v3;
  *(_QWORD *)(v25 + 144) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

uint64_t URLComponents.percentEncodedUser.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;

  if (v0[6])
  {
    v1 = v0[5];
    goto LABEL_15;
  }
  v2 = *v0;
  v3 = *((unsigned __int8 *)v0 + 11);
  v4 = *((_BYTE *)v0 + 10) != 1 || v2 == 0;
  if (!v4 && (*(_BYTE *)(v2 + 72) & 1) == 0)
  {
    v5 = String.subscript.getter();
    v1 = MEMORY[0x186DA4634](v5);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v0[8])
  {
LABEL_9:
    v1 = 0;
    goto LABEL_15;
  }
  v1 = 0;
  if (v3 && v2)
  {
    if ((*(_BYTE *)(v2 + 96) & 1) != 0)
    {
      v1 = 0;
      goto LABEL_15;
    }
    v7 = String.subscript.getter();
    MEMORY[0x186DA4634](v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedUser.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = a1;
    *(_QWORD *)(v3 + 48) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v16 = a1;
    v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    v11 = v9;
    if (v10)
    {
      v16 = a1;
      v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v16 = a1;
      v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1))
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedUser.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *v3 = URLComponents.percentEncodedUser.getter();
  v3[1] = v4;
  return URLComponents.percentEncodedUser.modify;
}

void URLComponents.percentEncodedUser.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int16 *v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  char v27;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = (*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 2u, 1);
        }
        else
        {
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }
        v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1))
          goto LABEL_30;
      }
    }
    v13 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 40) = v6;
    *(_QWORD *)(v13 + 48) = v5;
    goto LABEL_18;
  }
  if (!v5)
  {
LABEL_14:
    v12 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 40) = v6;
    *(_QWORD *)(v12 + 48) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 2u, 1);
    }
    else
    {
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
    }
    v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v3;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_14;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t URLComponents.percentEncodedPassword.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (v0[8])
  {
    v1 = v0[7];
  }
  else
  {
    v2 = *v0;
    v3 = *((_BYTE *)v0 + 11) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 96) & 1) != 0)
    {
      v1 = 0;
    }
    else
    {
      v4 = String.subscript.getter();
      v1 = MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPassword.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 56) = a1;
    *(_QWORD *)(v3 + 64) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v16 = a1;
    v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    v11 = v9;
    if (v10)
    {
      v16 = a1;
      v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v16 = a1;
      v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1))
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPassword.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[8])
  {
    v4 = v1[7];
    v5 = v1[8];
  }
  else
  {
    v6 = *v1;
    v7 = *((_BYTE *)v1 + 11) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 96) & 1) != 0)
    {
      v4 = 0;
      v5 = 0;
    }
    else
    {
      v8 = String.subscript.getter();
      v4 = MEMORY[0x186DA4634](v8);
      v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPassword.modify;
}

void URLComponents.percentEncodedPassword.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int16 *v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  char v27;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = (*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 2u, 1);
        }
        else
        {
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }
        v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1))
          goto LABEL_30;
      }
    }
    v13 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 56) = v6;
    *(_QWORD *)(v13 + 64) = v5;
    goto LABEL_18;
  }
  if (!v5)
  {
LABEL_14:
    v12 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 56) = v6;
    *(_QWORD *)(v12 + 64) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 2u, 1);
    }
    else
    {
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
    }
    v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v3;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_14;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t URLComponents.percentEncodedHost.getter()
{
  return URLComponents._URLComponents.percentEncodedHost.getter();
}

uint64_t key path setter for URLComponents.scheme : URLComponents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  a5(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t URLComponents.percentEncodedHost.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  return swift_bridgeObjectRelease();
}

void (*URLComponents.percentEncodedHost.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 22) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.percentEncodedHost.getter();
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.percentEncodedHost.modify;
}

void URLComponents.percentEncodedHost.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String_optional v5;
  void *v6;
  Swift::String_optional v7;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(void **)(*(_QWORD *)a1 + 168);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v5.value._countAndFlagsBits = v3;
    v5.value._object = v4;
    URLComponents._URLComponents.setPercentEncodedHost(_:)(v5);
    if (!v6)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      free(v2);
      return;
    }
  }
  else
  {
    v7.value._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)a1 + 160);
    v7.value._object = v4;
    URLComponents._URLComponents.setPercentEncodedHost(_:)(v7);
    if (!v6)
      goto LABEL_5;
  }

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t URLComponents.encodedHost.getter()
{
  return URLComponents._URLComponents.encodedHost.getter();
}

uint64_t URLComponents.encodedHost.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  unsigned __int16 *v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 72) = a1;
    *(_QWORD *)(v2 + 80) = 0;
    return result;
  }
  v6 = specialized Collection.first.getter(a1, a2);
  if ((v6 & 0x1FF) != 0x5B)
    goto LABEL_23;
  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    v8 = (a1 >> 59) & 1;
    v6 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
  }
  else
  {
    v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    if (!v7)
    {
      __break(1u);
      goto LABEL_36;
    }
    v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
  }
  if ((v6 & 0xC) == 4 << v8)
LABEL_36:
    v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a1, a2);
  v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  v10 = v6 >> 16;
  if (v6 >> 16 >= v9)
  {
    __break(1u);
    goto LABEL_38;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v12 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v28 = a1;
    v29 = a2 & 0xFFFFFFFFFFFFFFLL;
    v12 = *((_BYTE *)&v28 + v10);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v11 = _StringObject.sharedUTF8.getter();
    v12 = *(_BYTE *)(v11 + v10);
  }
  if (v12 != 93)
    goto LABEL_23;
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
  {
    do
    {
      while (1)
      {
        swift_bridgeObjectRelease();
        v27 = 0;
        v26 = 876;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_23:
        if ((a2 & 0x1000000000000000) == 0)
          break;
        v28 = a1;
        v29 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        v18 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v19 = (unsigned __int16 *)objc_msgSend(v18, sel__fastCharacterContents);
        v20 = v18;
        if (v19)
        {
          v28 = a1;
          v29 = a2;
          StringProtocol._ephemeralString.getter();
          v21 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v22 = objc_msgSend(v21, sel_length);
          swift_unknownObjectRelease();
          v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v19, (uint64_t)v22, 4u, 1);
        }
        else
        {
          v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
        }
        v24 = v23;
        swift_bridgeObjectRelease_n();
        if ((v24 & 1) != 0)
          goto LABEL_29;
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        v15 = HIBYTE(a2) & 0xF;
        v28 = a1;
        v29 = a2 & 0xFFFFFFFFFFFFFFLL;
        v14 = (char *)&v28;
      }
      else if ((a1 & 0x1000000000000000) != 0)
      {
        v14 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v15 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
LABEL_38:
        v14 = (char *)_StringObject.sharedUTF8.getter();
      }
    }
    while (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1));
  }
LABEL_29:
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  LOBYTE(v28) = 37;
  MEMORY[0x1E0C80A78](v16);
  v26 = (uint64_t)&v28;
  swift_bridgeObjectRetain();
  v17 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)&v25, a1, a2);
  result = swift_bridgeObjectRelease_n();
  *(_BYTE *)(v3 + 152) = v17 & 1;
  return result;
}

void (*URLComponents.encodedHost.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 24) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.encodedHost.getter();
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.encodedHost.modify;
}

void URLComponents.encodedHost.modify(uint64_t a1, char a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  unsigned __int16 *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  unsigned __int16 *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  _BYTE v45[16];
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v5 = *(_QWORD *)a1 + 176;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 192);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *(_BYTE *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 12) = 0;
  *(_WORD *)(v6 + 152) = 0;
  if ((a2 & 1) == 0)
  {
    if (!v7)
    {
      v20 = v3[24];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 72) = v4;
      *(_QWORD *)(v20 + 80) = 0;
      goto LABEL_61;
    }
    v8 = specialized Collection.first.getter(v4, v7);
    if ((v8 & 0x1FF) != 0x5B)
      goto LABEL_54;
    if ((v7 & 0x1000000000000000) != 0)
    {
      v44 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v44, 1))
        goto LABEL_87;
      v15 = (v4 >> 59) & 1;
      v8 = MEMORY[0x186DA485C](15, v44 - 1, v4, v7);
    }
    else
    {
      v14 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v14 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v14)
        goto LABEL_73;
      v8 = (v14 << 16) - 65532;
      LOBYTE(v15) = 1;
    }
    if ((v8 & 0xC) != 4 << v15)
      goto LABEL_26;
    goto LABEL_74;
  }
  if (!v7)
  {
    v19 = v3[24];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v19 + 72) = v4;
    *(_QWORD *)(v19 + 80) = 0;
    goto LABEL_49;
  }
  v8 = specialized Collection.first.getter(v4, v7);
  if ((v8 & 0x1FF) != 0x5B)
    goto LABEL_42;
  if ((v7 & 0x1000000000000000) != 0)
  {
    v43 = String.UTF8View._foreignCount()();
    if (!__OFSUB__(v43, 1))
    {
      v10 = (v4 >> 59) & 1;
      v8 = MEMORY[0x186DA485C](15, v43 - 1, v4, v7);
LABEL_9:
      if ((v8 & 0xC) != 4 << v10)
        goto LABEL_10;
      goto LABEL_71;
    }
    __break(1u);
LABEL_87:
    __break(1u);
    return;
  }
  v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v9 = v4 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    v8 = (v9 << 16) - 65532;
    LOBYTE(v10) = 1;
    goto LABEL_9;
  }
  __break(1u);
LABEL_71:
  v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_10:
  v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v11 = v4 & 0xFFFFFFFFFFFFLL;
  v2 = v8 >> 16;
  if (v8 >> 16 >= v11)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_26:
    v16 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v16 = v4 & 0xFFFFFFFFFFFFLL;
    v2 = v8 >> 16;
    if (v8 >> 16 >= v16)
    {
      __break(1u);
      goto LABEL_76;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      v18 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      v48 = v4;
      v49 = v7 & 0xFFFFFFFFFFFFFFLL;
      v18 = *((_BYTE *)&v48 + v2);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v17 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v17 = _StringObject.sharedUTF8.getter();
      v18 = *(_BYTE *)(v17 + v2);
    }
    if (v18 == 93)
    {
      swift_bridgeObjectRetain();
      v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if ((v2 & 1) == 0)
        goto LABEL_83;
      goto LABEL_60;
    }
LABEL_54:
    if ((v7 & 0x1000000000000000) != 0)
    {
      v3[22] = v4;
      v3[23] = v7;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v37 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v38 = (unsigned __int16 *)objc_msgSend(v37, sel__fastCharacterContents);
      v39 = v37;
      if (v38)
      {
        v3[22] = v4;
        v3[23] = v7;
        StringProtocol._ephemeralString.getter();
        v40 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v41 = objc_msgSend(v40, sel_length);
        swift_unknownObjectRelease();
        v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v38, (uint64_t)v41, 4u, 1);
      }
      else
      {
        v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
      }
      v2 = v42;
      swift_bridgeObjectRelease_n();
      if ((v2 & 1) == 0)
        goto LABEL_83;
    }
    else
    {
      if ((v7 & 0x2000000000000000) != 0)
      {
        v27 = HIBYTE(v7) & 0xF;
        v3[22] = v4;
        v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
        v26 = (char *)v5;
      }
      else if ((v4 & 0x1000000000000000) != 0)
      {
        v26 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v27 = v4 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v26 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, v27, 4u, 1))
        goto LABEL_83;
    }
LABEL_60:
    v28 = v3[24];
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 72) = v4;
    *(_QWORD *)(v28 + 80) = v7;
    *((_BYTE *)v3 + 176) = 37;
    MEMORY[0x1E0C80A78](v29);
    v46 = v5;
    swift_bridgeObjectRetain();
    v30 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v45, v4, v7);
    swift_bridgeObjectRelease_n();
    *(_BYTE *)(v6 + 152) = v30 & 1;
    goto LABEL_61;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    v13 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_39;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    v48 = v4;
    v49 = v7 & 0xFFFFFFFFFFFFFFLL;
    v13 = *((_BYTE *)&v48 + v2);
    goto LABEL_39;
  }
  if ((v4 & 0x1000000000000000) == 0)
    goto LABEL_84;
  for (i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; i = _StringObject.sharedUTF8.getter())
  {
    v13 = *(_BYTE *)(i + v2);
LABEL_39:
    if (v13 == 93)
    {
      swift_bridgeObjectRetain_n();
      v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if ((v2 & 1) != 0)
        goto LABEL_48;
      goto LABEL_83;
    }
LABEL_42:
    if ((v7 & 0x1000000000000000) == 0)
      break;
    v3[22] = v4;
    v3[23] = v7;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v31 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v32 = (unsigned __int16 *)objc_msgSend(v31, sel__fastCharacterContents);
    v33 = v31;
    if (v32)
    {
      v3[22] = v4;
      v3[23] = v7;
      StringProtocol._ephemeralString.getter();
      v34 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v35 = objc_msgSend(v34, sel_length);
      swift_unknownObjectRelease();
      v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, (uint64_t)v35, 4u, 1);
    }
    else
    {
      v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
    }
    v2 = v36;
    swift_bridgeObjectRelease_n();
    if ((v2 & 1) != 0)
      goto LABEL_48;
LABEL_83:
    swift_bridgeObjectRelease();
    v47 = 0;
    v46 = 876;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_84:
    ;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    v22 = HIBYTE(v7) & 0xF;
    v3[22] = v4;
    v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
    v21 = (char *)v5;
  }
  else if ((v4 & 0x1000000000000000) != 0)
  {
    v21 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v22 = v4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_76:
    v21 = (char *)_StringObject.sharedUTF8.getter();
  }
  v2 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 4u, 1);
  swift_bridgeObjectRetain();
  if ((v2 & 1) == 0)
    goto LABEL_83;
LABEL_48:
  v23 = v3[24];
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 72) = v4;
  *(_QWORD *)(v23 + 80) = v7;
  *((_BYTE *)v3 + 176) = 37;
  MEMORY[0x1E0C80A78](v24);
  v46 = v5;
  swift_bridgeObjectRetain();
  v25 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v45, v4, v7);
  swift_bridgeObjectRelease_n();
  *(_BYTE *)(v6 + 152) = v25 & 1;
LABEL_49:
  swift_bridgeObjectRelease();
LABEL_61:
  free(v3);
}

uint64_t URLComponents.percentEncodedPath.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v0[14])
  {
    v1 = v0[13];
  }
  else
  {
    v2 = *v0;
    if (*((_BYTE *)v0 + 14) != 1 || v2 == 0)
    {
      v1 = 0;
    }
    else
    {
      if ((*(_BYTE *)(v2 + 168) & 1) != 0)
        v4 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      else
        v4 = String.subscript.getter();
      v1 = MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPath.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v16 = a1;
    v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    v11 = v9;
    if (v10)
    {
      v16 = a1;
      v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x10u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x10u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease_n();
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v16 = a1;
      v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1))
    {
LABEL_7:
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v3 + 104) = a1;
      *(_QWORD *)(v3 + 112) = a2;
      return result;
    }
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPath.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[14])
  {
    v4 = v1[13];
    v5 = v1[14];
  }
  else
  {
    v6 = *v1;
    if (*((_BYTE *)v1 + 14) != 1 || v6 == 0)
    {
      v4 = 0;
      v5 = 0xE000000000000000;
    }
    else
    {
      if ((*(_BYTE *)(v6 + 168) & 1) != 0)
        v8 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      else
        v8 = String.subscript.getter();
      v4 = MEMORY[0x186DA4634](v8);
      v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.modify;
}

void URLComponents.percentEncodedPath.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int16 *v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  char v27;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = (*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 14) = 0;
  if ((a2 & 1) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
      v22 = v20;
      if (v21)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        v23 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v24 = objc_msgSend(v23, sel_length);
        swift_unknownObjectRelease();
        v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x10u, 1);
      }
      else
      {
        v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
      }
      v27 = v25;
      swift_bridgeObjectRelease_n();
      if ((v27 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        v10 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        v9 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v10 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x10u, 1))
        goto LABEL_28;
    }
    v13 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 104) = v6;
    *(_QWORD *)(v13 + 112) = v5;
    goto LABEL_16;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x10u, 1);
    }
    else
    {
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
    }
    v26 = v19;
    swift_bridgeObjectRelease_n();
    if ((v26 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v3;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x10u, 1);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_12:
      v12 = v2[4];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v12 + 104) = v6;
      *(_QWORD *)(v12 + 112) = v5;
      swift_bridgeObjectRelease();
LABEL_16:
      free(v2);
      return;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void (*URLComponents.percentEncodedQuery.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[16])
  {
    v4 = v1[15];
    v5 = v1[16];
  }
  else
  {
    v6 = *v1;
    v7 = *((_BYTE *)v1 + 15) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 192) & 1) != 0)
    {
      v4 = 0;
      v5 = 0;
    }
    else
    {
      v8 = String.subscript.getter();
      v4 = MEMORY[0x186DA4634](v8);
      v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedQuery.modify;
}

void URLComponents.percentEncodedQuery.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int16 *v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  char v27;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = (*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x40u, 1);
        }
        else
        {
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }
        v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1))
          goto LABEL_30;
      }
    }
    v13 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 120) = v6;
    *(_QWORD *)(v13 + 128) = v5;
    goto LABEL_18;
  }
  if (!v5)
  {
LABEL_14:
    v12 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 120) = v6;
    *(_QWORD *)(v12 + 128) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x40u, 1);
    }
    else
    {
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
    }
    v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v3;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_14;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t URLComponents.percentEncodedFragment.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (v0[18])
  {
    v1 = v0[17];
  }
  else
  {
    v2 = *v0;
    v3 = *((_BYTE *)v0 + 16) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 216) & 1) != 0)
    {
      v1 = 0;
    }
    else
    {
      v4 = String.subscript.getter();
      v1 = MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedFragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 136) = a1;
    *(_QWORD *)(v3 + 144) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v16 = a1;
    v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    v11 = v9;
    if (v10)
    {
      v16 = a1;
      v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v16 = a1;
      v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1))
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedFragment.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[18])
  {
    v4 = v1[17];
    v5 = v1[18];
  }
  else
  {
    v6 = *v1;
    v7 = *((_BYTE *)v1 + 16) != 1 || v6 == 0;
    if (v7 || (*(_BYTE *)(v6 + 216) & 1) != 0)
    {
      v4 = 0;
      v5 = 0;
    }
    else
    {
      v8 = String.subscript.getter();
      v4 = MEMORY[0x186DA4634](v8);
      v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedFragment.modify;
}

void URLComponents.percentEncodedFragment.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int16 *v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  char v27;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 2);
  v4 = (*a1)[4];
  v6 = **a1;
  v5 = (*a1)[1];
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x40u, 1);
        }
        else
        {
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }
        v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1))
          goto LABEL_30;
      }
    }
    v13 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 136) = v6;
    *(_QWORD *)(v13 + 144) = v5;
    goto LABEL_18;
  }
  if (!v5)
  {
LABEL_14:
    v12 = v2[4];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 136) = v6;
    *(_QWORD *)(v12 + 144) = v5;
    swift_bridgeObjectRelease();
LABEL_18:
    free(v2);
    return;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x40u, 1);
    }
    else
    {
      v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
    }
    v26 = v19;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v8 = HIBYTE(v5) & 0xF;
      v2[2] = v6;
      v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v3;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_14;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t URLComponents.rangeOfScheme.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 32);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 32);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfUser.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 56);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 56);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPassword.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 80);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 80);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfHost.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 104);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 104);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPort.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 128);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 128);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPath.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 152);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 152);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfQuery.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 176);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 176);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfFragment.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _OWORD v11[8];
  _OWORD v12[2];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v1 = v0[7];
  v11[6] = v0[6];
  v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v11[2] = v0[2];
  v11[3] = v2;
  v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0)
    return *(_QWORD *)(v15 + 200);
  if ((BYTE8(v11[0]) & 1) != 0)
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14)
      return 0;
    v8 = *(_QWORD *)(v14 + 16);
    v5 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = URLComponents._URLComponents.computedString.getter();
    v5 = v7;
    if (!v7)
      return v5;
    v8 = v6;
  }
  v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9)
    return 0;
  v5 = *(_QWORD *)(v9 + 200);
  swift_release();
  return v5;
}

unint64_t URLComponents.percentEncodedQueryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
}

uint64_t key path getter for URLComponents.queryItems : URLComponents@<X0>(_OWORD *a1@<X0>, Swift::Bool a2@<W3>, unint64_t *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t result;
  _OWORD v11[8];
  _OWORD v12[2];

  v5 = a1[7];
  v11[6] = a1[6];
  v11[7] = v5;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of URLComponents((uint64_t)v11);
  v9 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a2);
  result = outlined release of URLComponents((uint64_t)v11);
  *a3 = v9;
  return result;
}

uint64_t URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  specialized URLComponents.percentEncodedQueryItems.setter(a1);
  return swift_bridgeObjectRelease();
}

void (*URLComponents.percentEncodedQueryItems.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = (char *)malloc(0xC0uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 23) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 22) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  return URLComponents.percentEncodedQueryItems.modify;
}

void URLComponents.percentEncodedQueryItems.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  unsigned __int16 *v24;
  id v25;
  void *v26;
  id v27;
  char v28;
  void *v29;
  unsigned __int16 *v30;
  id v31;
  void *v32;
  id v33;
  char v34;
  char v35;
  char v36;
  int64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  BOOL v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned __int16 *v55;
  id v56;
  void *v57;
  id v58;
  char v59;
  void *v60;
  unsigned __int16 *v61;
  id v62;
  void *v63;
  id v64;
  char v65;
  char v66;
  char v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)a1 + 160;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 15) = 0;
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v84 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        v7 = (unint64_t *)(v4 + 56);
        do
        {
          v9 = *(v7 - 3);
          v8 = *(v7 - 2);
          v11 = *(v7 - 1);
          v10 = *v7;
          if ((v8 & 0x1000000000000000) != 0)
          {
            v2[20] = v9;
            v2[21] = v8;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            v23 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
            v25 = v23;
            if (v24)
            {
              v2[20] = v9;
              v2[21] = v8;
              v82 = v24;
              StringProtocol._ephemeralString.getter();
              v26 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v27 = objc_msgSend(v26, sel_length);
              swift_unknownObjectRelease();
              v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v82, (uint64_t)v27, 0x80u, 1);
            }
            else
            {
              v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x80u, 1);
            }
            v35 = v28;
            swift_bridgeObjectRelease_n();
            if ((v35 & 1) == 0)
              goto LABEL_74;
          }
          else
          {
            if ((v8 & 0x2000000000000000) != 0)
            {
              v13 = HIBYTE(v8) & 0xF;
              v2[20] = v9;
              v2[21] = v8 & 0xFFFFFFFFFFFFFFLL;
              v12 = (char *)v3;
            }
            else if ((v9 & 0x1000000000000000) != 0)
            {
              v12 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v13 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v12 = (char *)_StringObject.sharedUTF8.getter();
            }
            v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v13, 0x80u, 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!v14)
              goto LABEL_74;
          }
          v86 = v9;
          if (v10)
          {
            if ((v10 & 0x1000000000000000) != 0)
            {
              v2[20] = v11;
              v2[21] = v10;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              StringProtocol._ephemeralString.getter();
              v29 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v30 = (unsigned __int16 *)objc_msgSend(v29, sel__fastCharacterContents);
              v31 = v29;
              if (v30)
              {
                v2[20] = v11;
                v2[21] = v10;
                StringProtocol._ephemeralString.getter();
                v32 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v33 = objc_msgSend(v32, sel_length);
                swift_unknownObjectRelease();
                v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, (uint64_t)v33, 0x40u, 1);
              }
              else
              {
                v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, v10, 0x40u, 1);
              }
              v36 = v34;
              swift_bridgeObjectRelease_n();
              if ((v36 & 1) == 0)
                goto LABEL_73;
            }
            else
            {
              if ((v10 & 0x2000000000000000) != 0)
              {
                v16 = HIBYTE(v10) & 0xF;
                v2[20] = v11;
                v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
                v15 = (char *)v3;
              }
              else if ((v11 & 0x1000000000000000) != 0)
              {
                v15 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v16 = v11 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v15 = (char *)_StringObject.sharedUTF8.getter();
              }
              v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, v16, 0x40u, 1);
              swift_bridgeObjectRetain();
              if (!v17)
                goto LABEL_73;
            }
            v18._countAndFlagsBits = v11;
            v18._object = (void *)v10;
            String.append(_:)(v18);
            v19._countAndFlagsBits = 61;
            v19._object = (void *)0xE100000000000000;
            String.append(_:)(v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v9 = v86;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v10 = v84;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v84 + 16) + 1, 1);
            v10 = v84;
          }
          v21 = *(_QWORD *)(v10 + 16);
          v20 = *(_QWORD *)(v10 + 24);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            v10 = v84;
          }
          v7 += 4;
          *(_QWORD *)(v10 + 16) = v21 + 1;
          v22 = v10 + 16 * v21;
          *(_QWORD *)(v22 + 32) = v9;
          *(_QWORD *)(v22 + 40) = v8;
          --v6;
        }
        while (v6);
        goto LABEL_75;
      }
      v80 = v2[23];
      swift_bridgeObjectRelease();
      *(_OWORD *)(v80 + 120) = xmmword_182060F30;
    }
    else
    {
      v78 = v2[23];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v78 + 120) = 0;
      *(_QWORD *)(v78 + 128) = 0;
    }
LABEL_79:
    swift_bridgeObjectRelease();
  }
  else if (v4)
  {
    v37 = *(_QWORD *)(v4 + 16);
    if (v37)
    {
      v85 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      v38 = (unint64_t *)(v4 + 56);
      while (1)
      {
        v40 = *(v38 - 3);
        v39 = *(v38 - 2);
        v41 = *(v38 - 1);
        v10 = *v38;
        if ((v39 & 0x1000000000000000) != 0)
        {
          v2[20] = v40;
          v2[21] = v39;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          v54 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
          v56 = v54;
          if (v55)
          {
            v2[20] = v40;
            v2[21] = v39;
            v83 = v55;
            StringProtocol._ephemeralString.getter();
            v57 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v58 = objc_msgSend(v57, sel_length);
            swift_unknownObjectRelease();
            v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v83, (uint64_t)v58, 0x80u, 1);
          }
          else
          {
            v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v40, v39, 0x80u, 1);
          }
          v66 = v59;
          swift_bridgeObjectRelease_n();
          if ((v66 & 1) == 0)
            goto LABEL_74;
        }
        else
        {
          if ((v39 & 0x2000000000000000) != 0)
          {
            v43 = HIBYTE(v39) & 0xF;
            v2[20] = v40;
            v2[21] = v39 & 0xFFFFFFFFFFFFFFLL;
            v42 = (char *)v3;
          }
          else if ((v40 & 0x1000000000000000) != 0)
          {
            v42 = (char *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v43 = v40 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v42 = (char *)_StringObject.sharedUTF8.getter();
          }
          v44 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v42, v43, 0x80u, 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!v44)
            goto LABEL_74;
        }
        v87 = v40;
        if (v10)
        {
          if ((v10 & 0x1000000000000000) != 0)
          {
            v2[20] = v41;
            v2[21] = v10;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            v60 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
            v62 = v60;
            if (v61)
            {
              v2[20] = v41;
              v2[21] = v10;
              StringProtocol._ephemeralString.getter();
              v63 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v64 = objc_msgSend(v63, sel_length);
              swift_unknownObjectRelease();
              v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v64, 0x40u, 1);
            }
            else
            {
              v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, v10, 0x40u, 1);
            }
            v67 = v65;
            swift_bridgeObjectRelease_n();
            if ((v67 & 1) == 0)
            {
LABEL_73:
              swift_bridgeObjectRelease();
LABEL_74:
              lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
              v68 = (_QWORD *)swift_allocError();
              *v69 = 7;
              v2 = v68;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
LABEL_75:
              v70 = v2[23];
              v2[20] = v10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
              v71 = BidirectionalCollection<>.joined(separator:)();
              v73 = v72;
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v70 + 120) = v71;
              *(_QWORD *)(v70 + 128) = v73;
              goto LABEL_79;
            }
          }
          else
          {
            if ((v10 & 0x2000000000000000) != 0)
            {
              v46 = HIBYTE(v10) & 0xF;
              v2[20] = v41;
              v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
              v45 = (char *)v3;
            }
            else if ((v41 & 0x1000000000000000) != 0)
            {
              v45 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v46 = v41 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v45 = (char *)_StringObject.sharedUTF8.getter();
            }
            v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v45, v46, 0x40u, 1);
            swift_bridgeObjectRetain();
            if (!v47)
              goto LABEL_73;
          }
          v48._countAndFlagsBits = v41;
          v48._object = (void *)v10;
          String.append(_:)(v48);
          v49._countAndFlagsBits = 61;
          v49._object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40 = v87;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v50 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v85 + 16) + 1, 1);
          v50 = v85;
        }
        v52 = *(_QWORD *)(v50 + 16);
        v51 = *(_QWORD *)(v50 + 24);
        if (v52 >= v51 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
          v50 = v85;
        }
        v38 += 4;
        *(_QWORD *)(v50 + 16) = v52 + 1;
        v53 = v50 + 16 * v52;
        *(_QWORD *)(v53 + 32) = v40;
        *(_QWORD *)(v53 + 40) = v39;
        if (!--v37)
        {
          v74 = v2[23];
          v2[20] = v50;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
          v75 = BidirectionalCollection<>.joined(separator:)();
          v77 = v76;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v74 + 120) = v75;
          *(_QWORD *)(v74 + 128) = v77;
          goto LABEL_80;
        }
      }
    }
    v81 = v2[23];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v81 + 120) = xmmword_182060F30;
  }
  else
  {
    v79 = v2[23];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v79 + 120) = 0;
    *(_QWORD *)(v79 + 128) = 0;
  }
LABEL_80:
  free(v2);
}

void URLComponents.hash(into:)()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[26];

  v1 = v0[7];
  v23 = v0[6];
  v24 = v1;
  *(_OWORD *)v25 = v0[8];
  *(_OWORD *)&v25[10] = *(__int128 *)((char *)v0 + 138);
  v2 = v0[3];
  v19 = v0[2];
  v20 = v2;
  v3 = v0[5];
  v21 = v0[4];
  v22 = v3;
  v4 = v0[1];
  v17 = *v0;
  v18 = v4;
  v5 = (_BYTE *)v17;
  if ((_QWORD)v19)
    goto LABEL_2;
  if (BYTE9(v17) == 1 && (_QWORD)v17 && (*(_BYTE *)(v17 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    v13 = String.subscript.getter();
    MEMORY[0x186DA4634](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((_QWORD)v21)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v21)
      goto LABEL_9;
  }
  if (BYTE11(v17) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    v14 = String.subscript.getter();
    MEMORY[0x186DA4634](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v17);
  URLComponents._URLComponents.encodedHost.getter();
  v8 = v7;
  outlined release of URLComponents((uint64_t)&v17);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v9 = URLComponents.port.getter();
  if ((v10 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v24)
      goto LABEL_20;
  }
  else
  {
    v11 = v9;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    if ((_QWORD)v24)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v17);
      goto LABEL_31;
    }
  }
  if (BYTE14(v17) != 1 || !v5)
    goto LABEL_20;
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    v12 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v17);
    v12 = String.subscript.getter();
  }
  MEMORY[0x186DA4634](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)v25)
  {
    if (HIBYTE(v17) != 1 || !v5 || (v5[192] & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if (*(_QWORD *)&v25[16])
        goto LABEL_33;
      goto LABEL_38;
    }
    outlined retain of URLComponents((uint64_t)&v17);
    v15 = String.subscript.getter();
    MEMORY[0x186DA4634](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)&v25[16])
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_38:
  if (v18 == 1 && v5 && (v5[216] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    v16 = String.subscript.getter();
    MEMORY[0x186DA4634](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_33;
  }
  Hasher._combine(_:)(0);
}

Swift::Int URLComponents.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[26];

  v1 = v0[7];
  v24 = v0[6];
  v25 = v1;
  *(_OWORD *)v26 = v0[8];
  *(_OWORD *)&v26[10] = *(__int128 *)((char *)v0 + 138);
  v2 = v0[3];
  v20 = v0[2];
  v21 = v2;
  v3 = v0[5];
  v22 = v0[4];
  v23 = v3;
  v4 = v0[1];
  v18 = *v0;
  v19 = v4;
  Hasher.init(_seed:)();
  v5 = (_BYTE *)v18;
  if ((_QWORD)v20)
    goto LABEL_2;
  if (BYTE9(v18) == 1 && (_QWORD)v18 && (*(_BYTE *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v13 = String.subscript.getter();
    MEMORY[0x186DA4634](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((_QWORD)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v22)
      goto LABEL_9;
  }
  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v14 = String.subscript.getter();
    MEMORY[0x186DA4634](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined retain of URLComponents((uint64_t)&v18);
  v9 = URLComponents._URLComponents.port.getter();
  v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v25)
      goto LABEL_20;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((_QWORD)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }
  if (BYTE14(v18) != 1 || !v5)
    goto LABEL_20;
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v12 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v12 = String.subscript.getter();
  }
  MEMORY[0x186DA4634](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)v26)
    goto LABEL_32;
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v16 = String.subscript.getter();
    MEMORY[0x186DA4634](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(_QWORD *)&v26[16])
      goto LABEL_33;
    goto LABEL_38;
  }
  Hasher._combine(_:)(0);
  if (*(_QWORD *)&v26[16])
    goto LABEL_33;
LABEL_38:
  if (v19 != 1 || !v5 || (v5[216] & 1) != 0)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined retain of URLComponents((uint64_t)&v18);
  v17 = String.subscript.getter();
  MEMORY[0x186DA4634](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLComponents()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[26];

  v1 = v0[7];
  v24 = v0[6];
  v25 = v1;
  *(_OWORD *)v26 = v0[8];
  *(_OWORD *)&v26[10] = *(__int128 *)((char *)v0 + 138);
  v2 = v0[3];
  v20 = v0[2];
  v21 = v2;
  v3 = v0[5];
  v22 = v0[4];
  v23 = v3;
  v4 = v0[1];
  v18 = *v0;
  v19 = v4;
  Hasher.init(_seed:)();
  v5 = (_BYTE *)v18;
  if ((_QWORD)v20)
    goto LABEL_2;
  if (BYTE9(v18) == 1 && (_QWORD)v18 && (*(_BYTE *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v13 = String.subscript.getter();
    MEMORY[0x186DA4634](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((_QWORD)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v22)
      goto LABEL_9;
  }
  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v14 = String.subscript.getter();
    MEMORY[0x186DA4634](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined retain of URLComponents((uint64_t)&v18);
  v9 = URLComponents._URLComponents.port.getter();
  v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(0);
    if ((_QWORD)v25)
      goto LABEL_20;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((_QWORD)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }
  if (BYTE14(v18) != 1 || !v5)
    goto LABEL_20;
  if ((v5[168] & 1) != 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v12 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v12 = String.subscript.getter();
  }
  MEMORY[0x186DA4634](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)v26)
    goto LABEL_32;
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    v16 = String.subscript.getter();
    MEMORY[0x186DA4634](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(_QWORD *)&v26[16])
      goto LABEL_33;
    goto LABEL_38;
  }
  Hasher._combine(_:)(0);
  if (*(_QWORD *)&v26[16])
    goto LABEL_33;
LABEL_38:
  if (v19 != 1 || !v5 || (v5[216] & 1) != 0)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined retain of URLComponents((uint64_t)&v18);
  v17 = String.subscript.getter();
  MEMORY[0x186DA4634](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t URLComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  Swift::Int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  void *v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  void (*v102)(char *, _QWORD);
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  void (*v117)(char *, _QWORD);
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _BYTE v165[26];

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  v132 = v3;
  v133 = v4;
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v7);
  v134 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[7];
  v10 = v1[5];
  v163 = v1[6];
  v164 = v9;
  v11 = v1[7];
  *(_OWORD *)v165 = v1[8];
  *(_OWORD *)&v165[10] = *(__int128 *)((char *)v1 + 138);
  v12 = v1[3];
  v13 = v1[1];
  v159 = v1[2];
  v160 = v12;
  v14 = v1[3];
  v15 = v1[5];
  v161 = v1[4];
  v162 = v15;
  v16 = v1[1];
  v157 = *v1;
  v158 = v16;
  v154 = v163;
  v155 = v11;
  v156[0] = v1[8];
  *(_OWORD *)((char *)v156 + 10) = *(__int128 *)((char *)v1 + 138);
  v150 = v159;
  v151 = v14;
  v152 = v161;
  v153 = v10;
  v148 = v157;
  v149 = v13;
  v17 = v157;
  v18 = MEMORY[0x1E0DEA968];
  if ((_QWORD)v159)
  {
    v19 = *((_QWORD *)&v158 + 1);
    v20 = v159;
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (BYTE9(v157) != 1 || !(_QWORD)v157 || (*(_BYTE *)(v157 + 48) & 1) != 0)
      goto LABEL_6;
    outlined retain of URLComponents((uint64_t)&v157);
    v18 = MEMORY[0x1E0DEA968];
    v50 = String.subscript.getter();
    v19 = MEMORY[0x186DA4634](v50);
    v20 = v51;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v157);
  }
  v147 = v18;
  *(_QWORD *)&v146 = v19;
  *((_QWORD *)&v146 + 1) = v20;
  v137 = xmmword_182060F40;
  outlined init with take of Any(&v146, &v138);
  swift_bridgeObjectRetain();
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v23 = v21[2];
  v22 = v21[3];
  if (v23 >= v22 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
  v21[2] = v23 + 1;
  v24 = &v21[6 * v23];
  v25 = v137;
  v26 = v139;
  v24[3] = v138;
  v24[4] = v26;
  v24[2] = v25;
LABEL_6:
  v27 = outlined retain of URLComponents((uint64_t)&v157);
  v28 = URLComponents._URLComponents.user.getter(v27);
  v30 = v29;
  outlined release of URLComponents((uint64_t)&v157);
  if (v30)
  {
    v147 = v18;
    *(_QWORD *)&v146 = v28;
    *((_QWORD *)&v146 + 1) = v30;
    v137 = xmmword_182060F50;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v32 = v21[2];
    v31 = v21[3];
    if (v32 >= v31 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v21);
    v21[2] = v32 + 1;
    v33 = &v21[6 * v32];
    v34 = v137;
    v35 = v139;
    v33[3] = v138;
    v33[4] = v35;
    v33[2] = v34;
  }
  v36 = outlined retain of URLComponents((uint64_t)&v157);
  v37 = URLComponents._URLComponents.password.getter(v36);
  v39 = v38;
  outlined release of URLComponents((uint64_t)&v157);
  if (v39)
  {
    v147 = v18;
    *(_QWORD *)&v146 = v37;
    *((_QWORD *)&v146 + 1) = v39;
    v137 = xmmword_182060F60;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v41 = v21[2];
    v40 = v21[3];
    if (v41 >= v40 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v21);
    v42 = a1;
    v21[2] = v41 + 1;
    v43 = &v21[6 * v41];
    v44 = v137;
    v45 = v139;
    v43[3] = v138;
    v43[4] = v45;
    v43[2] = v44;
    v46 = v162;
    if ((_QWORD)v162)
      goto LABEL_18;
  }
  else
  {
    v42 = a1;
    v46 = v162;
    if ((_QWORD)v162)
    {
LABEL_18:
      v47 = *((_QWORD *)&v161 + 1);
      v48 = outlined retain of URLComponents((uint64_t)&v157);
      v49 = v46;
      goto LABEL_31;
    }
  }
  if (BYTE12(v157) == 1 && v17 && (*(_BYTE *)(v17 + 120) & 1) == 0)
  {
    v131 = v6;
    outlined retain of URLComponents((uint64_t)&v157);
    v6 = v131;
    v55 = String.subscript.getter();
    v47 = MEMORY[0x186DA4634](v55);
    v49 = v56;
    v48 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v157);
    v48 = URLComponents._URLComponents.port.getter();
    if ((v52 & 1) != 0)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      v54 = v53;
      v48 = swift_bridgeObjectRelease();
      if (!v54)
      {
        outlined release of URLComponents((uint64_t)&v157);
        v67 = v132;
        goto LABEL_60;
      }
    }
    v47 = 0;
    v49 = 0xE000000000000000;
  }
LABEL_31:
  v57 = v47 & 0xFFFFFFFFFFFFLL;
  if ((v49 & 0x2000000000000000) != 0)
    v58 = HIBYTE(v49) & 0xF;
  else
    v58 = v47 & 0xFFFFFFFFFFFFLL;
  if (v58)
  {
    if ((v165[24] & 1) != 0)
    {
      v131 = v6;
      *(_QWORD *)&v137 = v47;
      *((_QWORD *)&v137 + 1) = v49;
      MEMORY[0x1E0C80A78](v48);
      v59 = MEMORY[0x1E0DEE9E8];
      *(&v130 - 2) = (uint64_t)&v137;
      *(&v130 - 1) = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v130 - 4), v47, v49);
      if (v61 == 1)
      {
        v63 = *((_QWORD *)&v137 + 1);
        v62 = v137;
        swift_bridgeObjectRetain();
        v64 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62, v63, MEMORY[0x1E0DEE9E8]);
        v66 = v65;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v64 = (uint64_t)v60;
        v66 = v61;
        swift_bridgeObjectRelease_n();
      }
      outlined release of URLComponents((uint64_t)&v157);
      v6 = v131;
      v67 = v132;
LABEL_67:
      v68 = MEMORY[0x1E0DEA968];
      if (!v66)
        goto LABEL_73;
      goto LABEL_68;
    }
    if ((v49 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v49 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v137 = v47;
        *((_QWORD *)&v137 + 1) = v49 & 0xFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v146 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v146 + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v137, HIBYTE(v49) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v146, 0, (unsigned __int8 *)&v137, HIBYTE(v49) & 0xF, &v135);
        v64 = v135;
        v66 = v136;
        swift_release();
      }
      else
      {
        if ((v47 & 0x1000000000000000) != 0)
        {
          v69 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v69 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v57 = v86;
        }
        *(_QWORD *)&v137 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v137 + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v69, v57, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v137, 0, v69, v57);
        v66 = v70;
      }
      swift_bridgeObjectRelease();
      if (v66 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_66:
        outlined release of URLComponents((uint64_t)&v157);
        v67 = v132;
        goto LABEL_67;
      }
    }
    v130 = v42;
    v131 = v6;
    *(_QWORD *)&v137 = v47;
    *((_QWORD *)&v137 + 1) = v49;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v71 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v72 = objc_msgSend(v71, sel__fastCharacterContents);
    v73 = v71;
    if (v72)
    {
      *(_QWORD *)&v137 = v47;
      *((_QWORD *)&v137 + 1) = v49;
      StringProtocol._ephemeralString.getter();
      v74 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v75 = objc_msgSend(v74, sel_length);
      v76 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v76);
      *((_BYTE *)&v130 - 16) = 0;
      MEMORY[0x1E0C80A78](v77);
      *(&v130 - 2) = (uint64_t)v72;
      *(&v130 - 1) = (uint64_t)v75;
      v64 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v72, (uint64_t)v75, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v78, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v130 - 4));
      v66 = v79;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v157);
      v6 = v131;
      if (v66)
      {
        v67 = v132;
        goto LABEL_39;
      }
      v67 = v132;
LABEL_60:
      v68 = MEMORY[0x1E0DEA968];
      goto LABEL_73;
    }
    *(_QWORD *)&v137 = v47;
    *((_QWORD *)&v137 + 1) = v49;
    swift_bridgeObjectRetain();
    v81 = String.init<A>(_:)();
    v82 = v80;
    v6 = v131;
    if ((v80 & 0x1000000000000000) != 0)
    {
      v81 = static String._copying(_:)();
      v88 = v87;
      swift_bridgeObjectRelease();
      v82 = v88;
      if ((v88 & 0x2000000000000000) == 0)
        goto LABEL_55;
    }
    else if ((v80 & 0x2000000000000000) == 0)
    {
LABEL_55:
      if ((v81 & 0x1000000000000000) != 0)
      {
        v83 = (unsigned __int8 *)((v82 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v84 = v81 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v83 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      *(_QWORD *)&v137 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v137 + 1) = 0;
      v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v83, v84, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v137, 0, v83, v84);
      v66 = v85;
      goto LABEL_65;
    }
    *(_QWORD *)&v137 = v81;
    *((_QWORD *)&v137 + 1) = v82 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v146 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((_QWORD *)&v146 + 1) = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v137, HIBYTE(v82) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v146, 0, (unsigned __int8 *)&v137, HIBYTE(v82) & 0xF, &v135);
    v64 = v135;
    v66 = v136;
    swift_release();
LABEL_65:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v157);
  v64 = 0;
  v66 = 0xE000000000000000;
  v67 = v132;
LABEL_39:
  v68 = MEMORY[0x1E0DEA968];
LABEL_68:
  v147 = v68;
  *(_QWORD *)&v146 = v64;
  *((_QWORD *)&v146 + 1) = v66;
  v137 = xmmword_182060F70;
  outlined init with take of Any(&v146, &v138);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  v90 = v21[2];
  v89 = v21[3];
  if (v90 >= v89 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v89 > 1), v90 + 1, 1, v21);
  v21[2] = v90 + 1;
  v91 = &v21[6 * v90];
  v92 = v137;
  v93 = v139;
  v91[3] = v138;
  v91[4] = v93;
  v91[2] = v92;
LABEL_73:
  outlined retain of URLComponents((uint64_t)&v157);
  v94 = URLComponents._URLComponents.port.getter();
  v96 = v95;
  outlined release of URLComponents((uint64_t)&v157);
  if ((v96 & 1) == 0)
  {
    v147 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v146 = v94;
    v137 = xmmword_182060F80;
    outlined init with take of Any(&v146, &v138);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v98 = v21[2];
    v97 = v21[3];
    if (v98 >= v97 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v21);
    v21[2] = v98 + 1;
    v99 = &v21[6 * v98];
    v100 = v137;
    v101 = v139;
    v99[3] = v138;
    v99[4] = v101;
    v99[2] = v100;
  }
  outlined retain of URLComponents((uint64_t)&v157);
  v102 = URLComponents._URLComponents.path.getter();
  v104 = v103;
  outlined release of URLComponents((uint64_t)&v157);
  v147 = v68;
  *(_QWORD *)&v146 = v102;
  *((_QWORD *)&v146 + 1) = v104;
  v137 = xmmword_182060F90;
  outlined init with take of Any(&v146, &v138);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  v106 = v21[2];
  v105 = v21[3];
  if (v106 >= v105 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v105 > 1), v106 + 1, 1, v21);
  v21[2] = v106 + 1;
  v107 = &v21[6 * v106];
  v108 = v137;
  v109 = v139;
  v107[3] = v138;
  v107[4] = v109;
  v107[2] = v108;
  outlined retain of URLComponents((uint64_t)&v157);
  v110 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents((uint64_t)&v157);
  if (v110)
  {
    v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
    *(_QWORD *)&v146 = v110;
    v137 = xmmword_182060FA0;
    outlined init with take of Any(&v146, &v138);
    v112 = v21[2];
    v111 = v21[3];
    if (v112 >= v111 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v111 > 1), v112 + 1, 1, v21);
    v21[2] = v112 + 1;
    v113 = &v21[6 * v112];
    v114 = v137;
    v115 = v139;
    v113[3] = v138;
    v113[4] = v115;
    v113[2] = v114;
  }
  v116 = outlined retain of URLComponents((uint64_t)&v157);
  v117 = URLComponents._URLComponents.fragment.getter(v116);
  v119 = v118;
  outlined release of URLComponents((uint64_t)&v157);
  if (v119)
  {
    v147 = v68;
    *(_QWORD *)&v146 = v117;
    *((_QWORD *)&v146 + 1) = v119;
    v137 = xmmword_182060FB0;
    outlined init with take of Any(&v146, &v138);
    v121 = v21[2];
    v120 = v21[3];
    if (v121 >= v120 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v120 > 1), v121 + 1, 1, v21);
    v21[2] = v121 + 1;
    v122 = &v21[6 * v121];
    v123 = v137;
    v124 = v139;
    v122[3] = v138;
    v122[4] = v124;
    v122[2] = v123;
  }
  v143 = v163;
  v144 = v164;
  v145[0] = *(_OWORD *)v165;
  *(_OWORD *)((char *)v145 + 10) = *(_OWORD *)&v165[10];
  v139 = v159;
  v140 = v160;
  v141 = v161;
  v142 = v162;
  v137 = v157;
  v138 = v158;
  *(_QWORD *)&v146 = v21;
  v125 = *MEMORY[0x1E0DEDFB8];
  v126 = type metadata accessor for Mirror.DisplayStyle();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 104))(v134, v125, v126);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v128, 0, 1, v126);
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v6, *MEMORY[0x1E0DEDFE8], v67);
  outlined retain of URLComponents((uint64_t)&v157);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static URLComponents._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLComponents);
}

uint64_t static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t, uint64_t, uint64_t);
  unint64_t *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t (**v44)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v45;
  uint64_t v46;
  void *v47;
  unsigned __int16 *v48;
  id v49;
  void *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  unint64_t v74;
  Swift::Int v75;
  __int16 v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (**v89)(uint64_t, uint64_t, uint64_t);
  unint64_t *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  Swift::Int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t (**v133)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  Swift::String v144;
  Swift::String v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  void *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  id v166;
  void *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  id v181;
  void *v182;
  id v183;
  unint64_t v184;
  unint64_t v185;
  id v186;
  void *v187;
  unint64_t v188;
  id v189;
  void *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  id v198;
  void *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  id v213;
  void *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t result;
  uint64_t v229;
  void *v230;
  unsigned __int16 *v231;
  id v232;
  void *v233;
  id v234;
  char v235;
  uint64_t v236;
  void *v237;
  unsigned __int16 *v238;
  id v239;
  void *v240;
  id v241;
  char v242;
  uint64_t v243;
  void *v244;
  unsigned __int16 *v245;
  id v246;
  void *v247;
  id v248;
  char v249;
  void *v250;
  unsigned __int16 *v251;
  id v252;
  void *v253;
  id v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  void *v260;
  unsigned __int16 *v261;
  id v262;
  void *v263;
  id v264;
  char v265;
  Swift::Int v266;
  char v267;
  Swift::Int v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _BYTE *v272;
  _BYTE v273[16];
  id v274;
  id v275;
  _BYTE v276[16];
  uint64_t v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  int32_t (__cdecl *v282)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  unint64_t v291;
  BOOL v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  unint64_t v296;
  __int16 v297;
  BOOL v298;
  unint64_t v299;
  uint64_t v300;
  char v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  BOOL v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int16 v311;
  unint64_t v312;
  uint64_t v313;
  char v314;
  unint64_t v315;
  unint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  unint64_t v320;
  BOOL v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int16 v325;
  uint64_t v326[21];

  v2 = a2;
  outlined init with take of LocalePreferences?(a2, (uint64_t)v326, &demangling cache variable for type metadata for URLComponents?);
  outlined release of URLComponents?(v326);
  LOBYTE(v312) = 1;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v302 = 0u;
  v303 = 0u;
  v304 = 0u;
  v305 = 0u;
  v306 = 0;
  v307 = 1;
  v308 = 0u;
  v309 = 0u;
  v310 = 0u;
  v311 = 0;
  v4 = objc_msgSend(a1, sel_scheme);
  if (v4)
  {
    v5 = v4;
    v6 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    LOWORD(v300) = 0;
    v9 = specialized Collection.first.getter(v6, v8);
    if ((v9 & 0x100) != 0 || v9 < 0x41u)
      goto LABEL_291;
    if ((v8 & 0x1000000000000000) != 0)
    {
      v46 = v2;
      v312 = v6;
      v313 = v8;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v47 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v48 = (unsigned __int16 *)objc_msgSend(v47, sel__fastCharacterContents);
      v49 = v47;
      if (v48)
      {
        v312 = v6;
        v313 = v8;
        StringProtocol._ephemeralString.getter();
        v50 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v51 = (uint64_t)objc_msgSend(v50, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v51) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v48, v51, 1u, 0);
        swift_bridgeObjectRelease();
        v2 = v46;
        if ((v51 & 1) == 0)
          goto LABEL_291;
      }
      else
      {
        v52 = specialized Sequence.allSatisfy(_:)(v6, v8, 1);
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
          goto LABEL_291;
        v2 = v46;
      }
    }
    else
    {
      if ((v8 & 0x2000000000000000) != 0)
      {
        v11 = HIBYTE(v8) & 0xF;
        v312 = v6;
        v313 = v8 & 0xFFFFFFFFFFFFFFLL;
        v10 = (char *)&v312;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        v10 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v11 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v10 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 1u, 0))
        goto LABEL_291;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
    LOWORD(v300) = 0;
  }
  *(_QWORD *)&v302 = v6;
  *((_QWORD *)&v302 + 1) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v298 = v307;
  v312 = v299;
  v313 = v300;
  v314 = v301;
  v315 = v6;
  v316 = v8;
  v317 = v303;
  v318 = v304;
  v319 = v305;
  v320 = v306;
  v321 = v307;
  v322 = v308;
  v323 = v309;
  v324 = v310;
  v325 = v311;
  URLComponents._URLComponents.encodedHost.getter();
  v13 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_159;
  }
  v281 = v2;
  v14 = URLComponents._URLComponents.encodedHost.getter();
  v16 = v14;
  if (!v15)
  {
    LOBYTE(v300) = 0;
    BYTE4(v300) = 0;
    v311 = 0;
    v2 = v281;
LABEL_64:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v305 = v16;
LABEL_159:
    v151 = objc_msgSend(a1, sel_user);
    if (!v151)
    {
      v153 = 0;
      v155 = 0;
      LOBYTE(v300) = 0;
      BYTE2(v300) = 0;
      goto LABEL_175;
    }
    v152 = v151;
    v153 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
    v155 = v154;

    LOBYTE(v300) = 0;
    BYTE2(v300) = 0;
    if ((v155 & 0x1000000000000000) != 0)
    {
      v229 = v2;
      v284 = v153;
      v285 = v155;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v230 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v231 = (unsigned __int16 *)objc_msgSend(v230, sel__fastCharacterContents);
      v232 = v230;
      if (v231)
      {
        v284 = v153;
        v285 = v155;
        StringProtocol._ephemeralString.getter();
        v233 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v234 = objc_msgSend(v233, sel_length);
        swift_unknownObjectRelease();
        v235 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v231, (uint64_t)v234, 2u, 0);
      }
      else
      {
        v235 = specialized Sequence.allSatisfy(_:)(v153, v155, 2);
      }
      v256 = v235;
      v158 = swift_bridgeObjectRelease();
      v2 = v229;
      if ((v256 & 1) != 0)
        goto LABEL_175;
    }
    else
    {
      if ((v155 & 0x2000000000000000) != 0)
      {
        v157 = HIBYTE(v155) & 0xF;
        v284 = v153;
        v285 = v155 & 0xFFFFFFFFFFFFFFLL;
        v156 = (char *)&v284;
      }
      else if ((v153 & 0x1000000000000000) != 0)
      {
        v156 = (char *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v157 = v153 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v156 = (char *)_StringObject.sharedUTF8.getter();
      }
      v158 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v156, v157, 2u, 0);
      if ((v158 & 1) != 0)
        goto LABEL_175;
    }
    v159 = HIBYTE(v155) & 0xF;
    if ((v155 & 0x2000000000000000) == 0)
      v159 = v153 & 0xFFFFFFFFFFFFLL;
    if (v159)
    {
      v284 = v153;
      v285 = v155;
      MEMORY[0x1E0C80A78](v158);
      v277 = (uint64_t)&v284;
      LOBYTE(v278) = 2;
      swift_bridgeObjectRetain();
      v160 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v153, v155);
      if (v161)
      {
        v153 = (unint64_t)v160;
        v162 = v161;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v163 = v284;
        v164 = v285;
        swift_bridgeObjectRetain();
        v153 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v163, v164, 2u);
        v162 = v165;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      v155 = v162;
    }
    else
    {
      swift_bridgeObjectRelease();
      v153 = 0;
      v155 = 0xE000000000000000;
    }
LABEL_175:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v303 = v153;
    *((_QWORD *)&v303 + 1) = v155;
    v166 = objc_msgSend(a1, sel_password);
    if (!v166)
    {
      v168 = 0;
      v170 = 0;
      LOBYTE(v300) = 0;
      BYTE3(v300) = 0;
      goto LABEL_191;
    }
    v167 = v166;
    v168 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
    v170 = v169;

    LOBYTE(v300) = 0;
    BYTE3(v300) = 0;
    if ((v170 & 0x1000000000000000) != 0)
    {
      v236 = v2;
      v284 = v168;
      v285 = v170;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v237 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v238 = (unsigned __int16 *)objc_msgSend(v237, sel__fastCharacterContents);
      v239 = v237;
      if (v238)
      {
        v284 = v168;
        v285 = v170;
        StringProtocol._ephemeralString.getter();
        v240 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v241 = objc_msgSend(v240, sel_length);
        swift_unknownObjectRelease();
        v242 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v238, (uint64_t)v241, 2u, 0);
      }
      else
      {
        v242 = specialized Sequence.allSatisfy(_:)(v168, v170, 2);
      }
      v257 = v242;
      v173 = swift_bridgeObjectRelease();
      v2 = v236;
      if ((v257 & 1) != 0)
        goto LABEL_191;
    }
    else
    {
      if ((v170 & 0x2000000000000000) != 0)
      {
        v172 = HIBYTE(v170) & 0xF;
        v284 = v168;
        v285 = v170 & 0xFFFFFFFFFFFFFFLL;
        v171 = (char *)&v284;
      }
      else if ((v168 & 0x1000000000000000) != 0)
      {
        v171 = (char *)((v170 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v172 = v168 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v171 = (char *)_StringObject.sharedUTF8.getter();
      }
      v173 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v171, v172, 2u, 0);
      if ((v173 & 1) != 0)
        goto LABEL_191;
    }
    v174 = HIBYTE(v170) & 0xF;
    if ((v170 & 0x2000000000000000) == 0)
      v174 = v168 & 0xFFFFFFFFFFFFLL;
    if (v174)
    {
      v284 = v168;
      v285 = v170;
      MEMORY[0x1E0C80A78](v173);
      v277 = (uint64_t)&v284;
      LOBYTE(v278) = 2;
      swift_bridgeObjectRetain();
      v175 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v168, v170);
      if (v176)
      {
        v168 = (unint64_t)v175;
        v177 = v176;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v178 = v284;
        v179 = v285;
        swift_bridgeObjectRetain();
        v168 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v178, v179, 2u);
        v177 = v180;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      v170 = v177;
    }
    else
    {
      swift_bridgeObjectRelease();
      v168 = 0;
      v170 = 0xE000000000000000;
    }
LABEL_191:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v304 = v168;
    *((_QWORD *)&v304 + 1) = v170;
    v181 = objc_msgSend(a1, sel_host);
    if (v181)
    {
      v182 = v181;
      v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
      v185 = v184;

    }
    else
    {
      v183 = 0;
      v185 = 0;
    }
    URLComponents.host.setter((unint64_t)v183, v185);
    v186 = objc_msgSend(a1, sel_port);
    v187 = v186;
    if (v186)
    {
      v188 = (unint64_t)objc_msgSend(v186, sel_integerValue);

      LOBYTE(v300) = 0;
      BYTE5(v300) = 0;
      if ((v188 & 0x8000000000000000) != 0)
      {
        v278 = 0;
        v277 = 764;
        goto LABEL_292;
      }
    }
    else
    {
      v188 = 0;
      LOBYTE(v300) = 0;
      BYTE5(v300) = 0;
    }
    v306 = v188;
    v307 = v187 == 0;
    v189 = objc_msgSend(a1, sel_path);
    if (v189)
    {
      v190 = v189;
      v191 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
      v193 = v192;

    }
    else
    {
      v191 = 0;
      v193 = 0xE000000000000000;
    }
    LOBYTE(v300) = 0;
    BYTE6(v300) = 0;
    v194 = HIBYTE(v193) & 0xF;
    if ((v193 & 0x2000000000000000) == 0)
      v194 = v191 & 0xFFFFFFFFFFFFLL;
    if (v194)
    {
      v195 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v191, v193);
      v197 = v196;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v195 = 0;
      v197 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v308 = v195;
    *((_QWORD *)&v308 + 1) = v197;
    v198 = objc_msgSend(a1, sel_query);
    if (!v198)
    {
      v200 = 0;
      v202 = 0;
      LOBYTE(v300) = 0;
      HIBYTE(v300) = 0;
      goto LABEL_222;
    }
    v199 = v198;
    v200 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
    v202 = v201;

    LOBYTE(v300) = 0;
    HIBYTE(v300) = 0;
    if ((v202 & 0x1000000000000000) != 0)
    {
      v243 = v2;
      v284 = v200;
      v285 = v202;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v244 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v245 = (unsigned __int16 *)objc_msgSend(v244, sel__fastCharacterContents);
      v246 = v244;
      if (v245)
      {
        v284 = v200;
        v285 = v202;
        StringProtocol._ephemeralString.getter();
        v247 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v248 = objc_msgSend(v247, sel_length);
        swift_unknownObjectRelease();
        v249 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v245, (uint64_t)v248, 0x40u, 0);
      }
      else
      {
        v249 = specialized Sequence.allSatisfy(_:)(v200, v202, 64);
      }
      v258 = v249;
      v205 = swift_bridgeObjectRelease();
      v2 = v243;
      if ((v258 & 1) != 0)
        goto LABEL_222;
    }
    else
    {
      if ((v202 & 0x2000000000000000) != 0)
      {
        v204 = HIBYTE(v202) & 0xF;
        v284 = v200;
        v285 = v202 & 0xFFFFFFFFFFFFFFLL;
        v203 = (char *)&v284;
      }
      else if ((v200 & 0x1000000000000000) != 0)
      {
        v203 = (char *)((v202 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v204 = v200 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v203 = (char *)_StringObject.sharedUTF8.getter();
      }
      v205 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v203, v204, 0x40u, 0);
      if ((v205 & 1) != 0)
        goto LABEL_222;
    }
    v206 = HIBYTE(v202) & 0xF;
    if ((v202 & 0x2000000000000000) == 0)
      v206 = v200 & 0xFFFFFFFFFFFFLL;
    if (v206)
    {
      v284 = v200;
      v285 = v202;
      MEMORY[0x1E0C80A78](v205);
      v277 = (uint64_t)&v284;
      LOBYTE(v278) = 64;
      swift_bridgeObjectRetain();
      v207 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v200, v202);
      if (v208)
      {
        v200 = (unint64_t)v207;
        v209 = v208;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v210 = v284;
        v211 = v285;
        swift_bridgeObjectRetain();
        v200 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v210, v211, 0x40u);
        v209 = v212;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      v202 = v209;
    }
    else
    {
      swift_bridgeObjectRelease();
      v200 = 0;
      v202 = 0xE000000000000000;
    }
LABEL_222:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v309 = v200;
    *((_QWORD *)&v309 + 1) = v202;
    v213 = objc_msgSend(a1, sel_fragment);
    if (v213)
    {
      v214 = v213;
      v215 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
      v217 = v216;

      LOBYTE(v300) = 0;
      v301 = 0;
      if ((v217 & 0x1000000000000000) != 0)
      {
        v284 = v215;
        v285 = v217;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v250 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v251 = (unsigned __int16 *)objc_msgSend(v250, sel__fastCharacterContents);
        v252 = v250;
        if (v251)
        {
          v284 = v215;
          v285 = v217;
          StringProtocol._ephemeralString.getter();
          v253 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v254 = objc_msgSend(v253, sel_length);
          swift_unknownObjectRelease();
          v255 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v251, (uint64_t)v254, 0x40u, 0);
        }
        else
        {
          v255 = specialized Sequence.allSatisfy(_:)(v215, v217, 64);
        }
        v259 = v255;
        v220 = swift_bridgeObjectRelease();
        if ((v259 & 1) == 0)
          goto LABEL_230;
      }
      else
      {
        if ((v217 & 0x2000000000000000) != 0)
        {
          v219 = HIBYTE(v217) & 0xF;
          v284 = v215;
          v285 = v217 & 0xFFFFFFFFFFFFFFLL;
          v218 = (char *)&v284;
        }
        else if ((v215 & 0x1000000000000000) != 0)
        {
          v218 = (char *)((v217 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v219 = v215 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v218 = (char *)_StringObject.sharedUTF8.getter();
        }
        v220 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v218, v219, 0x40u, 0);
        if ((v220 & 1) == 0)
        {
LABEL_230:
          v221 = HIBYTE(v217) & 0xF;
          if ((v217 & 0x2000000000000000) == 0)
            v221 = v215 & 0xFFFFFFFFFFFFLL;
          if (v221)
          {
            v284 = v215;
            v285 = v217;
            MEMORY[0x1E0C80A78](v220);
            v277 = (uint64_t)&v284;
            LOBYTE(v278) = 64;
            swift_bridgeObjectRetain();
            v222 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v215, v217);
            if (v223)
            {
              v215 = (unint64_t)v222;
              v224 = v223;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v225 = v284;
              v226 = v285;
              swift_bridgeObjectRetain();
              v215 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v225, v226, 0x40u);
              v224 = v227;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            v217 = v224;
          }
          else
          {
            swift_bridgeObjectRelease();
            v215 = 0;
            v217 = 0xE000000000000000;
          }
        }
      }
    }
    else
    {
      v215 = 0;
      v217 = 0;
      LOBYTE(v300) = 0;
      v301 = 0;
    }
    swift_bridgeObjectRelease();
    LOBYTE(v282) = v307;
    v284 = v299;
    v285 = v300;
    LOBYTE(v286) = v301;
    v287 = v302;
    v288 = v303;
    v289 = v304;
    v290 = v305;
    v291 = v306;
    v292 = v307;
    v293 = v308;
    v294 = v309;
    v295 = v215;
    v296 = v217;
    v297 = v311;
    destructiveProjectEnumData for PredicateCodableError(&v284, v307);
    outlined init with take of LocalePreferences?((uint64_t)&v284, v2, &demangling cache variable for type metadata for URLComponents?);
    return 1;
  }
  v17 = v15;
  v18 = HIBYTE(v15) & 0xF;
  v19 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) != 0)
    v20 = HIBYTE(v15) & 0xF;
  else
    v20 = v14 & 0xFFFFFFFFFFFFLL;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    v21 = 0;
    LOBYTE(v300) = 0;
    BYTE4(v300) = 0;
    v22 = 0xE000000000000000;
    v311 = 0;
    v2 = v281;
    goto LABEL_48;
  }
  if ((v15 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
  if ((v15 & 0x2000000000000000) != 0)
  {
    v284 = v14;
    v285 = v15 & 0xFFFFFFFFFFFFFFLL;
    v282 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v283 = 0;
    swift_bridgeObjectRetain_n();
    v25 = &v284;
    v24 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v282;
    v27 = (unsigned __int8 *)&v284;
    v26 = v18;
    v28 = v18;
  }
  else
  {
    if ((v14 & 0x1000000000000000) != 0)
    {
      v23 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      v23 = _StringObject.sharedUTF8.getter();
      v19 = v53;
    }
    v284 = (unint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v285 = 0;
    swift_bridgeObjectRetain_n();
    v24 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v284;
    v25 = (unint64_t *)v23;
    v26 = v19;
    v27 = (unsigned __int8 *)v23;
    v28 = v19;
  }
  v21 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v25, v26, v24, 0, v27, v28);
  v22 = v29;
  swift_bridgeObjectRelease();
  if (v22 == 1)
  {
LABEL_28:
    v284 = v16;
    v285 = v17;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v30, sel__fastCharacterContents);
    v32 = v30;
    if (v31)
    {
      v284 = v16;
      v285 = v17;
      StringProtocol._ephemeralString.getter();
      v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v33, sel_length);
      v35 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v35);
      LOBYTE(v277) = 0;
      MEMORY[0x1E0C80A78](v36);
      v274 = v31;
      v275 = v34;
      v21 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v37, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v273);
      v22 = v38;
      swift_bridgeObjectRelease_n();
      goto LABEL_47;
    }
    v284 = v16;
    v285 = v17;
    swift_bridgeObjectRetain();
    v40 = String.init<A>(_:)();
    v41 = v39;
    if ((v39 & 0x1000000000000000) != 0)
    {
      v40 = static String._copying(_:)();
      v55 = v54;
      swift_bridgeObjectRelease();
      v41 = v55;
      if ((v55 & 0x2000000000000000) == 0)
        goto LABEL_33;
    }
    else if ((v39 & 0x2000000000000000) == 0)
    {
LABEL_33:
      if ((v40 & 0x1000000000000000) == 0)
        goto LABEL_283;
      v42 = (unint64_t *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v43 = v40 & 0xFFFFFFFFFFFFLL;
      goto LABEL_35;
    }
    v43 = HIBYTE(v41) & 0xF;
    v284 = v40;
    v285 = v41 & 0xFFFFFFFFFFFFFFLL;
    v282 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v283 = 0;
    v42 = &v284;
    v44 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v282;
    v45 = (unsigned __int8 *)&v284;
    goto LABEL_46;
  }
  swift_bridgeObjectRelease_n();
  while (1)
  {
LABEL_47:
    LOBYTE(v300) = 0;
    BYTE4(v300) = 0;
    v311 = 0;
    v2 = v281;
    if (!v22)
    {
      v16 = v21;
      goto LABEL_64;
    }
LABEL_48:
    v57 = specialized Collection.first.getter(v21, v22);
    if ((v57 & 0x1FF) != 0x5B)
      goto LABEL_73;
    if ((v22 & 0x1000000000000000) != 0)
      break;
    v58 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v58 = v21 & 0xFFFFFFFFFFFFLL;
    if (!v58)
    {
      __break(1u);
LABEL_268:
      v57 = _StringGuts._slowEnsureMatchingEncoding(_:)(v57, v21, v22);
      goto LABEL_55;
    }
    v57 = (v58 << 16) - 65532;
    LOBYTE(v59) = 1;
LABEL_54:
    if ((v57 & 0xC) == 4 << v59)
      goto LABEL_268;
LABEL_55:
    v60 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v60 = v21 & 0xFFFFFFFFFFFFLL;
    v61 = v57 >> 16;
    if (v57 >> 16 >= v60)
    {
      __break(1u);
LABEL_270:
      v66 = (char *)_StringObject.sharedUTF8.getter();
LABEL_78:
      v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v66, v67, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v68)
        goto LABEL_79;
      goto LABEL_69;
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      v63 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v22 & 0x2000000000000000) != 0)
    {
      v284 = v21;
      v285 = v22 & 0xFFFFFFFFFFFFFFLL;
      v63 = *((_BYTE *)&v284 + v61);
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
        v62 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v62 = _StringObject.sharedUTF8.getter();
      v63 = *(_BYTE *)(v62 + v61);
    }
    if (v63 == 93)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v64 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v21, v22);
      swift_bridgeObjectRelease_n();
      if ((v64 & 1) != 0)
        goto LABEL_79;
      goto LABEL_69;
    }
LABEL_73:
    if ((v22 & 0x1000000000000000) == 0)
    {
      if ((v22 & 0x2000000000000000) != 0)
      {
        v67 = HIBYTE(v22) & 0xF;
        v284 = v21;
        v285 = v22 & 0xFFFFFFFFFFFFFFLL;
        v66 = (char *)&v284;
      }
      else
      {
        if ((v21 & 0x1000000000000000) == 0)
          goto LABEL_270;
        v66 = (char *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v67 = v21 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_78;
    }
    v284 = v21;
    v285 = v22;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v260 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v261 = (unsigned __int16 *)objc_msgSend(v260, sel__fastCharacterContents);
    v262 = v260;
    if (v261)
    {
      v284 = v21;
      v285 = v22;
      StringProtocol._ephemeralString.getter();
      v263 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v264 = objc_msgSend(v263, sel_length);
      swift_unknownObjectRelease();
      v265 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v261, (uint64_t)v264, 4u, 1);
    }
    else
    {
      v265 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 4u, 1);
    }
    v267 = v265;
    swift_bridgeObjectRelease_n();
    v2 = v281;
    if ((v267 & 1) != 0)
    {
LABEL_79:
      swift_bridgeObjectRetain();
      v69 = swift_bridgeObjectRelease();
      *(_QWORD *)&v305 = v21;
      *((_QWORD *)&v305 + 1) = v22;
      LOBYTE(v284) = 37;
      MEMORY[0x1E0C80A78](v69);
      v277 = (uint64_t)&v284;
      v70 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v276, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v311) = v70 & 1;
      goto LABEL_159;
    }
LABEL_69:
    if (*((_QWORD *)&v302 + 1))
    {
      v65 = *((_QWORD *)&v302 + 1);
    }
    else if (BYTE1(v300) == 1)
    {
      v65 = 0;
      if (v299)
      {
        if ((*(_BYTE *)(v299 + 48) & 1) != 0)
        {
          v65 = 0;
        }
        else
        {
          v106 = String.subscript.getter();
          MEMORY[0x186DA4634](v106);
          v65 = v107;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      v65 = 0;
    }
    if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v21, v22) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!v65)
      {
        swift_bridgeObjectRetain();
LABEL_109:
        v86 = v21 & 0xFFFFFFFFFFFFLL;
        if ((v22 & 0x2000000000000000) != 0)
          v87 = HIBYTE(v22) & 0xF;
        else
          v87 = v21 & 0xFFFFFFFFFFFFLL;
        if (!v87)
        {
          v94 = 0;
          v95 = 0xE000000000000000;
          goto LABEL_154;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
        }
        else
        {
          if ((v22 & 0x2000000000000000) != 0)
          {
            v284 = v21;
            v285 = v22 & 0xFFFFFFFFFFFFFFLL;
            v282 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            v283 = 0;
            swift_bridgeObjectRetain_n();
            v90 = &v284;
            v89 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v282;
            v92 = (unsigned __int8 *)&v284;
            v91 = HIBYTE(v22) & 0xF;
            v93 = v91;
          }
          else
          {
            if ((v21 & 0x1000000000000000) == 0)
              goto LABEL_281;
            v88 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_117:
            v284 = (unint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            v285 = 0;
            swift_bridgeObjectRetain_n();
            v89 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v284;
            v90 = (unint64_t *)v88;
            v91 = v86;
            v92 = (unsigned __int8 *)v88;
            v93 = v86;
          }
          v94 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v90, v91, v89, 1, v92, v93);
          v95 = v96;
          swift_bridgeObjectRelease();
          if (v95 != 1)
          {
            swift_bridgeObjectRelease_n();
            if (v95)
              goto LABEL_154;
            goto LABEL_157;
          }
        }
        v284 = v21;
        v285 = v22;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol._ephemeralString.getter();
        v97 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v98 = objc_msgSend(v97, sel__fastCharacterContents);
        v99 = v97;
        if (!v98)
        {
          v284 = v21;
          v285 = v22;
          swift_bridgeObjectRetain();
          v128 = String.init<A>(_:)();
          v130 = v129;
          if ((v129 & 0x1000000000000000) != 0)
            goto LABEL_286;
          goto LABEL_145;
        }
        v284 = v21;
        v285 = v22;
        StringProtocol._ephemeralString.getter();
        v100 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v101 = objc_msgSend(v100, sel_length);
        v102 = swift_unknownObjectRelease();
        MEMORY[0x1E0C80A78](v102);
        LOBYTE(v277) = 1;
        MEMORY[0x1E0C80A78](v103);
        v274 = v98;
        v275 = v101;
        v94 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v98, (uint64_t)v101, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v104, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v273);
        v95 = v105;
        swift_bridgeObjectRelease_n();
        if (!v95)
          goto LABEL_157;
LABEL_154:
        swift_bridgeObjectRetain();
        v147 = specialized static RFC3986Parser.validate<A>(_:component:)(v94, v95, 3);
        swift_bridgeObjectRelease();
        if ((v147 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_157;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v305 = v94;
        *((_QWORD *)&v305 + 1) = v95;
LABEL_158:
        v2 = v281;
        goto LABEL_159;
      }
      v71 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v71 != -1)
        swift_once();
      v72 = static RFC3986Parser.schemesToPercentEncodeHost;
      v73 = String.lowercased()();
      LOBYTE(v72) = specialized Set.contains(_:)(v73._countAndFlagsBits, (uint64_t)v73._object, v72);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0)
        goto LABEL_109;
    }
    if ((v22 & 0x2000000000000000) != 0)
      v74 = HIBYTE(v22) & 0xF;
    else
      v74 = v21 & 0xFFFFFFFFFFFFLL;
    if (!v74)
    {
      swift_bridgeObjectRelease();
      v82 = 0;
      v83 = 0xE000000000000000;
      v2 = v281;
      goto LABEL_151;
    }
    v75 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v21, v22);
    v2 = v281;
    if ((v75 & 1) == 0)
    {
      v284 = v21;
      v285 = v22;
      MEMORY[0x1E0C80A78](v75);
      v277 = (uint64_t)&v284;
      LOBYTE(v278) = 4;
      swift_bridgeObjectRetain();
      v84 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v21, v22);
      if (!v85)
      {
        v108 = v284;
        v109 = v285;
        swift_bridgeObjectRetain();
        v82 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v108, v109, 4u);
        v83 = v110;
        swift_bridgeObjectRelease_n();
        goto LABEL_137;
      }
      v82 = (uint64_t)v84;
      v83 = v85;
      swift_bridgeObjectRelease_n();
LABEL_151:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v305 = v82;
      *((_QWORD *)&v305 + 1) = v83;
      LOBYTE(v311) = 1;
      goto LABEL_159;
    }
    v76 = specialized Collection.first.getter(v21, v22);
    if ((v76 & 0x100) != 0)
      goto LABEL_289;
    if (v76 == 91)
    {
      if ((v22 & 0x1000000000000000) == 0)
      {
        v77 = (v74 << 16) - 65532;
        LOBYTE(v78) = 1;
        goto LABEL_93;
      }
    }
    else
    {
      __break(1u);
    }
    v268 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v268, 1))
      goto LABEL_290;
    v78 = (v21 >> 59) & 1;
    v77 = MEMORY[0x186DA485C](15, v268 - 1, v21, v22);
    v2 = v281;
LABEL_93:
    if ((v77 & 0xC) == 4 << v78)
      v77 = _StringGuts._slowEnsureMatchingEncoding(_:)(v77, v21, v22);
    v79 = v77 >> 16;
    if (v77 >> 16 >= v74)
    {
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      v88 = _StringObject.sharedUTF8.getter();
      v86 = v269;
      goto LABEL_117;
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      v81 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v22 & 0x2000000000000000) != 0)
    {
      v284 = v21;
      v285 = v22 & 0xFFFFFFFFFFFFFFLL;
      v81 = *((_BYTE *)&v284 + v79);
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
        v80 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v80 = _StringObject.sharedUTF8.getter();
      v81 = *(_BYTE *)(v80 + v79);
    }
    if (v81 != 93)
      goto LABEL_280;
    v111 = specialized Collection<>.firstIndex(of:)(0x25u, v21, v22);
    if ((v112 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v21, v22) & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v305 = 0uLL;
        HIBYTE(v311) = 1;
        goto LABEL_159;
      }
      v284 = v21;
      v285 = v22;
      v82 = String.init<A>(_:)();
      v83 = v115;
LABEL_137:
      swift_bridgeObjectRelease();
      goto LABEL_151;
    }
    v113 = v111;
    if ((v22 & 0x1000000000000000) == 0)
    {
      v114 = (v74 << 16) - 65532;
      goto LABEL_140;
    }
    v116 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v116, 1))
    {
      __break(1u);
LABEL_286:
      v128 = static String._copying(_:)();
      v271 = v270;
      swift_bridgeObjectRelease();
      v130 = v271;
LABEL_145:
      if ((v130 & 0x2000000000000000) != 0)
      {
        v132 = HIBYTE(v130) & 0xF;
        v284 = v128;
        v285 = v130 & 0xFFFFFFFFFFFFFFLL;
        v282 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        v283 = 0;
        v131 = &v284;
        v133 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v282;
        v134 = (unsigned __int8 *)&v284;
        v135 = v132;
      }
      else
      {
        if ((v128 & 0x1000000000000000) != 0)
        {
          v131 = (unint64_t *)((v130 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v132 = v128 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v131 = (unint64_t *)_StringObject.sharedUTF8.getter();
        }
        v284 = (unint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        v285 = 0;
        v133 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v284;
        v134 = (unsigned __int8 *)v131;
        v135 = v132;
      }
      v94 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v131, v132, v133, 1, v134, v135);
      v95 = v146;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v95)
        goto LABEL_154;
LABEL_157:
      HIBYTE(v311) = 1;
      v148 = specialized static RFC3986Parser.percentEncode<A>(_:component:)(v21, v22, 3);
      v150 = v149;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v305 = v148;
      *((_QWORD *)&v305 + 1) = v150;
      LOBYTE(v311) = 1;
      goto LABEL_158;
    }
    v114 = MEMORY[0x186DA485C](15, v116 - 1, v21, v22);
LABEL_140:
    if (v114 >> 14 >= v113 >> 14)
    {
      swift_bridgeObjectRetain_n();
      v284 = String.subscript.getter();
      v285 = v117;
      v286 = v118;
      *(_QWORD *)&v287 = v119;
      MEMORY[0x1E0C80A78](v284);
      v277 = (uint64_t)&v284;
      LOBYTE(v278) = 8;
      v280 = v120;
      v124 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v276, v122, v123, v121, v120);
      if (v125)
      {
        v126 = (uint64_t)v124;
        v127 = v125;
      }
      else
      {
        v136 = v285;
        v279 = v284;
        v138 = v286;
        v137 = v287;
        swift_bridgeObjectRetain();
        v126 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v279, v136, v138, v137, 8u);
        v127 = v139;
        swift_bridgeObjectRelease();
      }
      v140 = String.subscript.getter();
      v141 = MEMORY[0x186DA4634](v140);
      v143 = v142;
      swift_bridgeObjectRelease();
      v284 = v141;
      v285 = v143;
      v144._countAndFlagsBits = v126;
      v144._object = v127;
      String.append(_:)(v144);
      swift_bridgeObjectRelease();
      v145._countAndFlagsBits = 93;
      v145._object = (void *)0xE100000000000000;
      String.append(_:)(v145);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v82 = v284;
      v83 = v285;
      swift_bridgeObjectRelease_n();
      v2 = v281;
      goto LABEL_151;
    }
    __break(1u);
LABEL_283:
    v42 = (unint64_t *)_StringObject.sharedUTF8.getter();
LABEL_35:
    v284 = (unint64_t)@nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v285 = 0;
    v44 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v284;
    v45 = (unsigned __int8 *)v42;
LABEL_46:
    v21 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v42, v43, v44, 0, v45, v43);
    v22 = v56;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  v266 = String.UTF8View._foreignCount()();
  if (!__OFSUB__(v266, 1))
  {
    v59 = (v21 >> 59) & 1;
    v57 = MEMORY[0x186DA485C](15, v266 - 1, v21, v22);
    goto LABEL_54;
  }
  __break(1u);
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v272 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v278 = 0;
  v277 = 714;
LABEL_292:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLComponents()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v1 = v0[7];
  v20 = v0[6];
  v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)v0 + 138);
  v2 = v0[3];
  v16 = v0[2];
  v17 = v2;
  v3 = v0[5];
  v18 = v0[4];
  v19 = v3;
  v4 = v0[1];
  v14 = *v0;
  v15 = v4;
  v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(_QWORD *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLComponents(void *a1, uint64_t a2)
{
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  return 1;
}

uint64_t NSURLComponents._toCustomAnyHashable()(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t result;
  _OWORD v5[8];
  _OWORD v6[2];
  char v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  _BYTE v20[160];
  _OWORD v21[8];
  _OWORD v22[2];

  v7 = 1;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  destructiveProjectEnumData for PredicateCodableError(v8, a2);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for URLComponents?);
  v3 = v2;
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(v3, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v20, &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v21, &demangling cache variable for type metadata for URLComponents?);
  result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {

    v5[6] = v21[6];
    v5[7] = v21[7];
    v6[0] = v22[0];
    *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v22 + 10);
    v5[2] = v21[2];
    v5[3] = v21[3];
    v5[4] = v21[4];
    v5[5] = v21[5];
    v5[0] = v21[0];
    v5[1] = v21[1];
    lazy protocol witness table accessor for type URLComponents and conformance URLComponents();
    return AnyHashable.init<A>(_:)();
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLComponents(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  id v3;

  v3 = (id)*v2;
  NSURLComponents._toCustomAnyHashable()(*v2, a2);

}

uint64_t URLQueryItem.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*URLQueryItem.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URLQueryItem.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*URLQueryItem.value.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void URLQueryItem.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int URLQueryItem.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLQueryItem()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URLQueryItem()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLQueryItem()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t URLQueryItem.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = (void *)v0[3];
  if (v2)
  {
    v3 = v0[2];
    v7 = *v0;
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t URLQueryItem.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = (void *)v0[3];
  if (v2)
  {
    v3 = v0[2];
    v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t URLQueryItem.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  v8 = v0[1];
  v11 = v0[2];
  v10 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18205F0D0;
  *(_OWORD *)(v12 + 32) = xmmword_182060FC0;
  *(_QWORD *)(v12 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 48) = v9;
  *(_QWORD *)(v12 + 56) = v8;
  *(_OWORD *)(v12 + 80) = xmmword_182060FD0;
  *(_QWORD *)(v12 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v12 + 96) = v11;
  *(_QWORD *)(v12 + 104) = v10;
  v17[2] = v9;
  v17[3] = v8;
  v17[4] = v11;
  v17[5] = v10;
  v17[1] = v12;
  v13 = *MEMORY[0x1E0DEDFB8];
  v14 = type metadata accessor for Mirror.DisplayStyle();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v7, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLQueryItem()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = (void *)v0[3];
  if (v2)
  {
    v3 = v0[2];
    v7 = *v0;
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLQueryItem()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = (void *)v0[3];
  if (v2)
  {
    v3 = v0[2];
    v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 61;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = v3;
    v5._object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t static URLQueryItem._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLQueryItem);
}

NSURLQueryItem __swiftcall URLQueryItem._bridgeToObjectiveC()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  NSString *v12;
  objc_class *v13;
  objc_super v14;
  NSURLQueryItem result;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(_QWORD *)v7 = v1;
  *((_QWORD *)v7 + 1) = v2;
  *((_QWORD *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v3;
  v8 = String._bridgeToObjectiveCImpl()();
  if (v3)
    v9 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v9 = 0;
  v14.receiver = v6;
  v14.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (objc_class *)objc_msgSendSuper2(&v14, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  v13 = v10;
  result._value = v12;
  result._name = v11;
  result.super.isa = v13;
  return result;
}

void static URLQueryItem._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  v4 = objc_msgSend(a1, sel_name);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

uint64_t static URLQueryItem._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  v4 = objc_msgSend(a1, sel_name);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1;
}

void static URLQueryItem._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v4 = objc_msgSend(a1, sel_name);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v10 = 0;
      v12 = 0;
    }
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLQueryItem(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  v4 = objc_msgSend(a1, sel_name);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URLQueryItem(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v4 = objc_msgSend(a1, sel_name);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v10 = 0;
      v12 = 0;
    }
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }
  else
  {
    __break(1u);
  }
}

uint64_t NSURLQueryItem._toCustomAnyHashable()()
{
  void *v0;
  id v1;
  id v2;
  void *v3;

  v1 = objc_msgSend(v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  v2 = objc_msgSend(v0, sel_value);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLQueryItem()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  void *v4;

  v1 = *v0;
  v2 = objc_msgSend(*v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  v3 = objc_msgSend(v1, sel_value);
  if (v3)
  {
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  AnyHashable.init<A>(_:)();

}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URLComponents.CodingKeys@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized URLComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLComponents.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A00CEC + 4 * byte_182060FE0[*v0]))(0x656D65686373, 0xE600000000000000);
}

uint64_t sub_181A00CEC()
{
  return 1919251317;
}

uint64_t sub_181A00CFC()
{
  return 0x64726F7773736170;
}

uint64_t sub_181A00D14()
{
  return 1953722216;
}

uint64_t sub_181A00D24()
{
  return 1953656688;
}

uint64_t sub_181A00D34()
{
  return 1752457584;
}

uint64_t sub_181A00D44()
{
  return 0x7972657571;
}

uint64_t sub_181A00D58()
{
  return 0x746E656D67617266;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URLComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance URLComponents.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized URLComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLComponents.CodingKeys()
{
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLComponents.CodingKeys()
{
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URLComponents.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD *v9;
  Swift::String_optional v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unsigned __int16 *v82;
  id v83;
  unsigned __int16 *v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  unsigned __int16 *v96;
  id v97;
  unsigned __int16 *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  unsigned __int16 *v102;
  id v103;
  void *v104;
  id v105;
  char v106;
  void *v107;
  unsigned __int16 *v108;
  id v109;
  void *v110;
  id v111;
  char v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  _OWORD v123[5];
  _OWORD v124[4];
  char v125;
  _QWORD *v126;

  v118 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLComponents.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = 1;
  v122 = 0uLL;
  LOBYTE(v123[0]) = 0;
  *(_OWORD *)((char *)v123 + 8) = 0u;
  *(_OWORD *)((char *)&v123[1] + 8) = 0u;
  *(_OWORD *)((char *)&v123[2] + 8) = 0u;
  *(_OWORD *)((char *)&v123[3] + 8) = 0u;
  *((_QWORD *)&v123[4] + 1) = 0;
  LOBYTE(v124[0]) = 1;
  *(_OWORD *)((char *)v124 + 8) = 0u;
  *(_OWORD *)((char *)&v124[1] + 8) = 0u;
  *(_OWORD *)((char *)&v124[2] + 8) = 0u;
  WORD4(v124[3]) = 0;
  v8 = a1[3];
  v126 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v117 = v5;
    v9 = v118;
    v121 = 0;
    v10.value._countAndFlagsBits = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents._URLComponents.setScheme(_:)(v10);
    if (v11)
    {

      swift_bridgeObjectRelease();
      v114 = 0;
      v113 = 714;
      goto LABEL_96;
    }
    swift_bridgeObjectRelease();
    v121 = 1;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v14 = v12;
    v15 = v13;
    v116 = v4;
    BYTE8(v122) = 0;
    BYTE10(v122) = 0;
    if (v13)
    {
      if ((v13 & 0x1000000000000000) != 0)
      {
        v115 = v7;
        v119 = v12;
        v120 = v13;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v81 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v82 = (unsigned __int16 *)objc_msgSend(v81, sel__fastCharacterContents);
        v83 = v81;
        if (v82)
        {
          v84 = v82;
          v119 = v14;
          v120 = v15;
          StringProtocol._ephemeralString.getter();
          v85 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v86 = (uint64_t)objc_msgSend(v85, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v86) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v84, v86, 2u, 0);
        }
        else
        {
          v86 = specialized Sequence.allSatisfy(_:)(v14, v15, 2);
        }
        v18 = swift_bridgeObjectRelease();
        v7 = v115;
        if ((v86 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        if ((v13 & 0x2000000000000000) != 0)
        {
          v17 = HIBYTE(v13) & 0xF;
          v119 = v12;
          v120 = v15 & 0xFFFFFFFFFFFFFFLL;
          v16 = (char *)&v119;
        }
        else if ((v12 & 0x1000000000000000) != 0)
        {
          v16 = (char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v17 = v14 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v16 = (char *)_StringObject.sharedUTF8.getter();
        }
        v18 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v17, 2u, 0);
        if ((v18 & 1) != 0)
          goto LABEL_17;
      }
      v19 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v19 = v14 & 0xFFFFFFFFFFFFLL;
      if (v19)
      {
        v119 = v14;
        v120 = v15;
        MEMORY[0x1E0C80A78](v18);
        v113 = (uint64_t)&v119;
        LOBYTE(v114) = 2;
        swift_bridgeObjectRetain();
        v20 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)(&v115 - 4), v14, v15);
        if (v21)
        {
          v14 = (uint64_t)v20;
          v22 = v21;
          swift_bridgeObjectRelease_n();
          v15 = v22;
        }
        else
        {
          v24 = v119;
          v23 = v120;
          swift_bridgeObjectRetain();
          v14 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v24, v23, 2u);
          v26 = v25;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v15 = v26;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v14 = 0;
        v15 = 0xE000000000000000;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease();
    *((_QWORD *)&v123[1] + 1) = v14;
    *(_QWORD *)&v123[2] = v15;
    v121 = 2;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v30 = v27;
    v31 = v28;
    BYTE8(v122) = 0;
    BYTE11(v122) = 0;
    if (!v28)
      goto LABEL_33;
    if ((v28 & 0x1000000000000000) != 0)
    {
      v115 = v7;
      v119 = v27;
      v120 = v28;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v95 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v96 = (unsigned __int16 *)objc_msgSend(v95, sel__fastCharacterContents);
      v97 = v95;
      if (v96)
      {
        v98 = v96;
        v119 = v30;
        v120 = v31;
        StringProtocol._ephemeralString.getter();
        v99 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v100 = (uint64_t)objc_msgSend(v99, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v100) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v98, v100, 2u, 0);
      }
      else
      {
        v100 = specialized Sequence.allSatisfy(_:)(v30, v31, 2);
      }
      v34 = swift_bridgeObjectRelease();
      v7 = v115;
      if ((v100 & 1) != 0)
        goto LABEL_33;
    }
    else
    {
      if ((v28 & 0x2000000000000000) != 0)
      {
        v33 = HIBYTE(v28) & 0xF;
        v119 = v27;
        v120 = v31 & 0xFFFFFFFFFFFFFFLL;
        v32 = (char *)&v119;
      }
      else if ((v27 & 0x1000000000000000) != 0)
      {
        v32 = (char *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v33 = v30 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v32 = (char *)_StringObject.sharedUTF8.getter();
      }
      v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 2u, 0);
      if ((v34 & 1) != 0)
        goto LABEL_33;
    }
    v35 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v35 = v30 & 0xFFFFFFFFFFFFLL;
    if (v35)
    {
      v119 = v30;
      v120 = v31;
      MEMORY[0x1E0C80A78](v34);
      v113 = (uint64_t)&v119;
      LOBYTE(v114) = 2;
      swift_bridgeObjectRetain();
      v36 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)(&v115 - 4), v30, v31);
      if (v37)
      {
        v30 = (uint64_t)v36;
        v38 = v37;
        swift_bridgeObjectRelease_n();
        v31 = v38;
      }
      else
      {
        v40 = v119;
        v39 = v120;
        swift_bridgeObjectRetain();
        v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v40, v39, 2u);
        v42 = v41;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v31 = v42;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v31 = 0xE000000000000000;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    *((_QWORD *)&v123[2] + 1) = v30;
    *(_QWORD *)&v123[3] = v31;
    v121 = 3;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents.host.setter(v43, v44);
    v121 = 4;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v115 = v7;
    BYTE8(v122) = 0;
    BYTE13(v122) = 0;
    if ((v46 & 1) == 0 && v45 < 0)
    {
      while (1)
      {
        v114 = 0;
        v113 = 764;
LABEL_96:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    *((_QWORD *)&v123[4] + 1) = v45;
    LOBYTE(v124[0]) = v46 & 1;
    v121 = 5;
    v47 = KeyedDecodingContainer.decode(_:forKey:)();
    BYTE8(v122) = 0;
    BYTE14(v122) = 0;
    v49 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000) == 0)
      v49 = v47 & 0xFFFFFFFFFFFFLL;
    if (v49)
    {
      v50 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v47, v48);
      v52 = v51;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v50 = 0;
      v52 = 0xE000000000000000;
    }
    v53 = v115;
    swift_bridgeObjectRelease();
    *((_QWORD *)&v124[0] + 1) = v50;
    *(_QWORD *)&v124[1] = v52;
    v121 = 6;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v56 = v54;
    v57 = v55;
    BYTE8(v122) = 0;
    HIBYTE(v122) = 0;
    if (v55)
    {
      if ((v55 & 0x1000000000000000) != 0)
      {
        v119 = v54;
        v120 = v55;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v101 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v102 = (unsigned __int16 *)objc_msgSend(v101, sel__fastCharacterContents);
        v103 = v101;
        if (v102)
        {
          v119 = v56;
          v120 = v57;
          StringProtocol._ephemeralString.getter();
          v104 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v105 = objc_msgSend(v104, sel_length);
          swift_unknownObjectRelease();
          v106 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v102, (uint64_t)v105, 0x40u, 0);
        }
        else
        {
          v106 = specialized Sequence.allSatisfy(_:)(v56, v57, 64);
        }
        v60 = swift_bridgeObjectRelease();
        v53 = v115;
        if ((v106 & 1) != 0)
          goto LABEL_54;
      }
      else
      {
        if ((v55 & 0x2000000000000000) != 0)
        {
          v59 = HIBYTE(v55) & 0xF;
          v119 = v54;
          v120 = v57 & 0xFFFFFFFFFFFFFFLL;
          v58 = (char *)&v119;
        }
        else if ((v54 & 0x1000000000000000) != 0)
        {
          v58 = (char *)((v55 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v59 = v56 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v58 = (char *)_StringObject.sharedUTF8.getter();
        }
        v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v58, v59, 0x40u, 0);
        if ((v60 & 1) != 0)
          goto LABEL_54;
      }
      v61 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000) == 0)
        v61 = v56 & 0xFFFFFFFFFFFFLL;
      if (v61)
      {
        v119 = v56;
        v120 = v57;
        MEMORY[0x1E0C80A78](v60);
        v113 = (uint64_t)&v119;
        LOBYTE(v114) = 64;
        swift_bridgeObjectRetain();
        v62 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)(&v115 - 4), v56, v57);
        if (v63)
        {
          v56 = (uint64_t)v62;
          v64 = v63;
          swift_bridgeObjectRelease_n();
          v57 = v64;
        }
        else
        {
          v65 = v119;
          v66 = v120;
          swift_bridgeObjectRetain();
          v56 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v65, v66, 0x40u);
          v68 = v67;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v57 = v68;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v56 = 0;
        v57 = 0xE000000000000000;
      }
    }
LABEL_54:
    swift_bridgeObjectRelease();
    *((_QWORD *)&v124[1] + 1) = v56;
    *(_QWORD *)&v124[2] = v57;
    v121 = 7;
    v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v71 = v69;
    v72 = v70;
    BYTE8(v122) = 0;
    LOBYTE(v123[0]) = 0;
    if (!v70)
    {
      v75 = v9;
LABEL_72:
      swift_bridgeObjectRelease();
      *((_QWORD *)&v124[2] + 1) = v71;
      *(_QWORD *)&v124[3] = v72;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v53, v116);
      v91 = v124[1];
      v75[6] = v124[0];
      v75[7] = v91;
      v75[8] = v124[2];
      *(_OWORD *)((char *)v75 + 138) = *(_OWORD *)((char *)&v124[2] + 10);
      v92 = v123[2];
      v75[2] = v123[1];
      v75[3] = v92;
      v93 = v123[4];
      v75[4] = v123[3];
      v75[5] = v93;
      v94 = v123[0];
      *v75 = v122;
      v75[1] = v94;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
    }
    if ((v70 & 0x1000000000000000) != 0)
    {
      v119 = v69;
      v120 = v70;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v107 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v108 = (unsigned __int16 *)objc_msgSend(v107, sel__fastCharacterContents);
      v109 = v107;
      if (v108)
      {
        v119 = v71;
        v120 = v72;
        StringProtocol._ephemeralString.getter();
        v110 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v111 = objc_msgSend(v110, sel_length);
        swift_unknownObjectRelease();
        v112 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v108, (uint64_t)v111, 0x40u, 0);
      }
      else
      {
        v112 = specialized Sequence.allSatisfy(_:)(v71, v72, 64);
      }
      v76 = swift_bridgeObjectRelease();
      if ((v112 & 1) == 0)
      {
LABEL_62:
        v77 = HIBYTE(v72) & 0xF;
        if ((v72 & 0x2000000000000000) == 0)
          v77 = v71 & 0xFFFFFFFFFFFFLL;
        if (v77)
        {
          v119 = v71;
          v120 = v72;
          MEMORY[0x1E0C80A78](v76);
          v113 = (uint64_t)&v119;
          LOBYTE(v114) = 64;
          swift_bridgeObjectRetain();
          v78 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)(&v115 - 4), v71, v72);
          if (v79)
          {
            v71 = (uint64_t)v78;
            v80 = v79;
            swift_bridgeObjectRelease_n();
            v72 = v80;
          }
          else
          {
            v88 = v119;
            v87 = v120;
            swift_bridgeObjectRetain();
            v71 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v88, v87, 0x40u);
            v90 = v89;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v72 = v90;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v71 = 0;
          v72 = 0xE000000000000000;
        }
      }
    }
    else
    {
      if ((v70 & 0x2000000000000000) != 0)
      {
        v74 = HIBYTE(v70) & 0xF;
        v119 = v69;
        v120 = v72 & 0xFFFFFFFFFFFFFFLL;
        v73 = (char *)&v119;
      }
      else if ((v69 & 0x1000000000000000) != 0)
      {
        v73 = (char *)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v74 = v71 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v73 = (char *)_StringObject.sharedUTF8.getter();
      }
      v76 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v73, v74, 0x40u, 0);
      if ((v76 & 1) == 0)
        goto LABEL_62;
    }
    v75 = v9;
    v53 = v115;
    goto LABEL_72;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
}

uint64_t URLComponents.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55[2];
  int32_t (__cdecl *v56)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v57;
  _OWORD v58[8];
  _OWORD v59[10];
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[26];
  uint64_t v70;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLComponents.CodingKeys>);
  v70 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[7];
  v67 = v1[6];
  v68 = v7;
  *(_OWORD *)v69 = v1[8];
  *(_OWORD *)&v69[10] = *(__int128 *)((char *)v1 + 138);
  v8 = v1[3];
  v63 = v1[2];
  v64 = v8;
  v9 = v1[5];
  v65 = v1[4];
  v66 = v9;
  v10 = v1[1];
  v61 = *v1;
  v62 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v59[8] = v67;
  v59[9] = v68;
  v60[0] = *(_OWORD *)v69;
  *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)&v69[10];
  v59[4] = v63;
  v59[5] = v64;
  v59[6] = v65;
  v59[7] = v66;
  v59[2] = v61;
  v59[3] = v62;
  v11 = v61;
  if (!(_QWORD)v63 && BYTE9(v61) == 1 && (_QWORD)v61 && (*(_BYTE *)(v61 + 48) & 1) == 0)
  {
    v54 = v6;
    outlined retain of URLComponents((uint64_t)&v61);
    v6 = v54;
    v12 = String.subscript.getter();
    MEMORY[0x186DA4634](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v61);
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v61);
  LOBYTE(v58[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    v13 = outlined retain of URLComponents((uint64_t)&v61);
    URLComponents._URLComponents.user.getter(v13);
    outlined release of URLComponents((uint64_t)&v61);
    LOBYTE(v58[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    v14 = outlined retain of URLComponents((uint64_t)&v61);
    URLComponents._URLComponents.password.getter(v14);
    outlined release of URLComponents((uint64_t)&v61);
    LOBYTE(v58[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    v16 = v66;
    v53 = v4;
    if ((_QWORD)v66)
    {
      v17 = *((_QWORD *)&v65 + 1);
      v18 = outlined retain of URLComponents((uint64_t)&v61);
      v19 = v16;
    }
    else if (BYTE12(v61) == 1 && v11 && (*(_BYTE *)(v11 + 120) & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v61);
      v23 = String.subscript.getter();
      v17 = MEMORY[0x186DA4634](v23);
      v19 = v24;
      v18 = swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v61);
      v18 = URLComponents._URLComponents.port.getter();
      if ((v20 & 1) != 0)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        v22 = v21;
        v18 = swift_bridgeObjectRelease();
        if (!v22)
          goto LABEL_51;
      }
      v17 = 0;
      v19 = 0xE000000000000000;
    }
    v25 = v17 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x2000000000000000) != 0)
      v26 = HIBYTE(v19) & 0xF;
    else
      v26 = v17 & 0xFFFFFFFFFFFFLL;
    if (!v26)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v61);
      v4 = v53;
LABEL_52:
      LOBYTE(v58[0]) = 3;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      v58[6] = v67;
      v58[7] = v68;
      v59[0] = *(_OWORD *)v69;
      *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)&v69[10];
      v58[2] = v63;
      v58[3] = v64;
      v58[4] = v65;
      v58[5] = v66;
      v58[0] = v61;
      v58[1] = v62;
      URLComponents.port.getter();
      LOBYTE(v58[0]) = 4;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.path.getter();
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 5;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      v51 = outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.query.getter(v51);
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 6;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      v52 = outlined retain of URLComponents((uint64_t)&v61);
      URLComponents._URLComponents.fragment.getter(v52);
      outlined release of URLComponents((uint64_t)&v61);
      LOBYTE(v58[0]) = 7;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      goto LABEL_10;
    }
    if ((v69[24] & 1) != 0)
    {
      *(_QWORD *)&v58[0] = v17;
      *((_QWORD *)&v58[0] + 1) = v19;
      MEMORY[0x1E0C80A78](v18);
      v27 = MEMORY[0x1E0DEE9E8];
      *(&v53 - 2) = (uint64_t)v58;
      *(&v53 - 1) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v53 - 4), v17, v19);
      if (v28 == 1)
      {
        v29 = v58[0];
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v29, *((unint64_t *)&v29 + 1), MEMORY[0x1E0DEE9E8]);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      v4 = v53;
      goto LABEL_51;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v19 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v58[0] = v17;
        *((_QWORD *)&v58[0] + 1) = v19 & 0xFFFFFFFFFFFFFFLL;
        v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v57 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v58, HIBYTE(v19) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, 0, (unsigned __int8 *)v58, HIBYTE(v19) & 0xF, v55);
        v32 = v55[1];
        swift_release();
      }
      else
      {
        if ((v17 & 0x1000000000000000) != 0)
        {
          v30 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v30 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v25 = v48;
        }
        *(_QWORD *)&v58[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v58[0] + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v30, v25, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v58, 0, v30, v25);
        v32 = v31;
      }
      swift_bridgeObjectRelease();
      v4 = v53;
      if (v32 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_51:
        outlined release of URLComponents((uint64_t)&v61);
        goto LABEL_52;
      }
    }
    *(_QWORD *)&v58[0] = v17;
    *((_QWORD *)&v58[0] + 1) = v19;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v33 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v33, sel__fastCharacterContents);
    v35 = v33;
    v36 = (uint64_t)v34;
    v37 = v35;
    if (v36)
    {
      *(_QWORD *)&v58[0] = v17;
      *((_QWORD *)&v58[0] + 1) = v19;
      StringProtocol._ephemeralString.getter();
      v38 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v39 = objc_msgSend(v38, sel_length);
      v40 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v40);
      *((_BYTE *)&v53 - 16) = 0;
      MEMORY[0x1E0C80A78](v41);
      *(&v53 - 2) = v36;
      *(&v53 - 1) = (uint64_t)v39;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(v36, (uint64_t)v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v42, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v53 - 4));
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v61);
      v4 = v53;
      goto LABEL_52;
    }
    *(_QWORD *)&v58[0] = v17;
    *((_QWORD *)&v58[0] + 1) = v19;
    swift_bridgeObjectRetain();
    v44 = String.init<A>(_:)();
    v45 = v43;
    if ((v43 & 0x1000000000000000) != 0)
    {
      v44 = static String._copying(_:)();
      v50 = v49;
      swift_bridgeObjectRelease();
      v45 = v50;
      v4 = v53;
      if ((v50 & 0x2000000000000000) == 0)
        goto LABEL_42;
    }
    else
    {
      v4 = v53;
      if ((v43 & 0x2000000000000000) == 0)
      {
LABEL_42:
        if ((v44 & 0x1000000000000000) != 0)
        {
          v46 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v47 = v44 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v46 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(_QWORD *)&v58[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v58[0] + 1) = 0;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v46, v47, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v58, 0, v46, v47);
        goto LABEL_50;
      }
    }
    *(_QWORD *)&v58[0] = v44;
    *((_QWORD *)&v58[0] + 1) = v45 & 0xFFFFFFFFFFFFFFLL;
    v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v57 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v58, HIBYTE(v45) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, 0, (unsigned __int8 *)v58, HIBYTE(v45) & 0xF, v55);
    swift_release();
LABEL_50:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
LABEL_10:
  (*(void (**)(char *, uint64_t))(v70 + 8))(v6, v4);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URLComponents@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return URLComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLComponents(_QWORD *a1)
{
  return URLComponents.encode(to:)(a1);
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static URLQueryItem.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    result = (v3 | v5) == 0;
    if (v3 && v5 != 0)
    {
      if (v2 == v4 && v3 == v5)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t specialized static URLComponents.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[26];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[26];

  v2 = a1[7];
  v92 = a1[6];
  v93 = v2;
  *(_OWORD *)v94 = a1[8];
  *(_OWORD *)&v94[10] = *(__int128 *)((char *)a1 + 138);
  v3 = a1[3];
  v88 = a1[2];
  v89 = v3;
  v4 = a1[5];
  v90 = a1[4];
  v91 = v4;
  v5 = a1[1];
  v86 = *a1;
  v87 = v5;
  v6 = a2[7];
  v101 = a2[6];
  v102 = v6;
  *(_OWORD *)v103 = a2[8];
  *(_OWORD *)&v103[10] = *(__int128 *)((char *)a2 + 138);
  v7 = a2[3];
  v97 = a2[2];
  v98 = v7;
  v8 = a2[5];
  v99 = a2[4];
  v100 = v8;
  v9 = a2[1];
  v95 = *a2;
  v96 = v9;
  v10 = (_BYTE *)v86;
  v11 = v93;
  if ((_QWORD)v93)
  {
    v12 = *((_QWORD *)&v92 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    v13 = v11;
  }
  else if (BYTE14(v86) == 1 && (_QWORD)v86)
  {
    if ((*(_BYTE *)(v86 + 168) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v14 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v14 = String.subscript.getter();
    }
    v12 = MEMORY[0x186DA4634](v14);
    v13 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  v16 = (_BYTE *)v95;
  v17 = v102;
  if ((_QWORD)v102)
  {
    v18 = *((_QWORD *)&v101 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    v19 = v17;
  }
  else if (BYTE14(v95) == 1 && (_QWORD)v95)
  {
    if ((*(_BYTE *)(v95 + 168) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v20 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v20 = String.subscript.getter();
    }
    v18 = MEMORY[0x186DA4634](v20);
    v19 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v12 == v18 && v13 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = 0;
    if ((v22 & 1) == 0)
      return v23 & 1;
  }
  v24 = v88;
  if ((_QWORD)v88)
  {
    v25 = *((_QWORD *)&v87 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    v26 = v24;
  }
  else if (BYTE9(v86) == 1 && v10 && (v10[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v86);
    v27 = String.subscript.getter();
    v25 = MEMORY[0x186DA4634](v27);
    v26 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    v25 = 0;
    v26 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  v29 = v97;
  if ((_QWORD)v97)
  {
    v30 = *((_QWORD *)&v96 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    v31 = v29;
  }
  else if (BYTE9(v95) == 1 && v16 && (v16[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v95);
    v32 = String.subscript.getter();
    v30 = MEMORY[0x186DA4634](v32);
    v31 = v33;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    v30 = 0;
    v31 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v26)
  {
    if (!v31)
      goto LABEL_131;
    if (v25 == v30 && v26 == v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = 0;
      if ((v34 & 1) == 0)
        return v23 & 1;
    }
  }
  else if (v31)
  {
    goto LABEL_43;
  }
  outlined retain of URLComponents((uint64_t)&v86);
  v35 = URLComponents._URLComponents.encodedHost.getter();
  v37 = v36;
  outlined release of URLComponents((uint64_t)&v86);
  outlined retain of URLComponents((uint64_t)&v95);
  v38 = URLComponents._URLComponents.encodedHost.getter();
  v40 = v39;
  outlined release of URLComponents((uint64_t)&v95);
  if (v37)
  {
    if (!v40)
      goto LABEL_131;
    if (v35 == v38 && v37 == v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = 0;
      if ((v41 & 1) == 0)
        return v23 & 1;
    }
  }
  else if (v40)
  {
    goto LABEL_51;
  }
  v42 = URLComponents.port.getter();
  v44 = v43;
  v45 = URLComponents.port.getter();
  if ((v44 & 1) != 0)
  {
    if ((v46 & 1) == 0)
    {
      v23 = 0;
      return v23 & 1;
    }
    goto LABEL_59;
  }
  v23 = 0;
  if ((v46 & 1) == 0 && v42 == v45)
  {
LABEL_59:
    v47 = *(_QWORD *)v94;
    if (*(_QWORD *)v94)
    {
      v48 = *((_QWORD *)&v93 + 1);
      outlined retain of URLComponents((uint64_t)&v86);
      v49 = v47;
    }
    else if (HIBYTE(v86) == 1 && v10 && (v10[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v50 = String.subscript.getter();
      v48 = MEMORY[0x186DA4634](v50);
      v49 = v51;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v48 = 0;
      v49 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    v52 = *(_QWORD *)v103;
    if (*(_QWORD *)v103)
    {
      v53 = *((_QWORD *)&v102 + 1);
      outlined retain of URLComponents((uint64_t)&v95);
      v54 = v52;
    }
    else if (HIBYTE(v95) == 1 && v16 && (v16[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v55 = String.subscript.getter();
      v53 = MEMORY[0x186DA4634](v55);
      v54 = v56;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v53 = 0;
      v54 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v49)
    {
      if (!v54)
        goto LABEL_131;
      if (v48 == v53 && v49 == v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = 0;
        if ((v57 & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v54)
    {
      goto LABEL_43;
    }
    v58 = *(_QWORD *)&v94[16];
    if (*(_QWORD *)&v94[16])
    {
      v59 = *(_QWORD *)&v94[8];
      outlined retain of URLComponents((uint64_t)&v86);
      v60 = v58;
    }
    else if (v87 == 1 && v10 && (v10[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v61 = String.subscript.getter();
      v59 = MEMORY[0x186DA4634](v61);
      v60 = v62;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      v59 = 0;
      v60 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    v63 = *(_QWORD *)&v103[16];
    if (*(_QWORD *)&v103[16])
    {
      v64 = *(_QWORD *)&v103[8];
      outlined retain of URLComponents((uint64_t)&v95);
      v65 = v63;
    }
    else if (v96 == 1 && v16 && (v16[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v66 = String.subscript.getter();
      v64 = MEMORY[0x186DA4634](v66);
      v65 = v67;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      v64 = 0;
      v65 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v60)
    {
      if (!v65)
        goto LABEL_131;
      if (v59 == v64 && v60 == v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = 0;
        if ((v68 & 1) == 0)
          return v23 & 1;
      }
      goto LABEL_103;
    }
    if (!v65)
    {
LABEL_103:
      v69 = URLComponents.percentEncodedUser.getter();
      v71 = v70;
      v72 = URLComponents.percentEncodedUser.getter();
      if (v71)
      {
        if (!v73)
          goto LABEL_131;
        if (v69 == v72 && v71 == v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = 0;
          if ((v74 & 1) == 0)
            return v23 & 1;
        }
        goto LABEL_111;
      }
      if (!v73)
      {
LABEL_111:
        v75 = v90;
        if ((_QWORD)v90)
        {
          v76 = *((_QWORD *)&v89 + 1);
          outlined retain of URLComponents((uint64_t)&v86);
          v77 = v75;
        }
        else if (BYTE11(v86) == 1 && v10 && (v10[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v86);
          v78 = String.subscript.getter();
          v76 = MEMORY[0x186DA4634](v78);
          v77 = v79;
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined retain of URLComponents((uint64_t)&v86);
          v76 = 0;
          v77 = 0;
        }
        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v86);
        v80 = v99;
        if ((_QWORD)v99)
        {
          v81 = *((_QWORD *)&v98 + 1);
          outlined retain of URLComponents((uint64_t)&v95);
          v82 = v80;
        }
        else if (BYTE11(v95) == 1 && v16 && (v16[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v95);
          v83 = String.subscript.getter();
          v81 = MEMORY[0x186DA4634](v83);
          v82 = v84;
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined retain of URLComponents((uint64_t)&v95);
          v81 = 0;
          v82 = 0;
        }
        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v95);
        if (v77)
        {
          if (v82)
          {
            if (v76 == v81 && v77 == v82)
            {
              swift_bridgeObjectRelease();
              v23 = 1;
            }
            else
            {
              v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }
            goto LABEL_132;
          }
          goto LABEL_51;
        }
        if (!v82)
        {
          v23 = 1;
          return v23 & 1;
        }
LABEL_131:
        v23 = 0;
        goto LABEL_132;
      }
LABEL_51:
      v23 = 0;
      goto LABEL_132;
    }
LABEL_43:
    v23 = 0;
LABEL_132:
    swift_bridgeObjectRelease();
  }
  return v23 & 1;
}

unint64_t specialized BidirectionalCollection.suffix(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  Swift::Int v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  _BYTE v10[72];
  uint64_t v11;
  _BYTE v12[58];
  __int128 v13;
  _BYTE v14[80];
  _BYTE v15[58];
  char v16;
  _BYTE v17[160];

  v16 = 1;
  v5 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  if (v5)
  {
    v7 = *(_BYTE *)(v5 + 218);
    *(_QWORD *)&v9 = v5;
    *((_QWORD *)&v9 + 1) = 0x101010101010101;
    v10[0] = 1;
    memset(&v10[8], 0, 64);
    v11 = 0;
    v12[0] = 1;
    memset(&v12[8], 0, 48);
    v12[56] = v7;
    v12[57] = 0;
    v13 = v9;
    *(_OWORD *)v14 = *(_OWORD *)v10;
    *(_OWORD *)&v14[48] = *(_OWORD *)&v10[48];
    *(_OWORD *)&v14[64] = 0uLL;
    *(_OWORD *)&v14[16] = *(_OWORD *)&v10[16];
    *(_OWORD *)&v14[32] = *(_OWORD *)&v10[32];
    *(_OWORD *)&v15[42] = *(_OWORD *)&v12[42];
    *(_OWORD *)&v15[16] = *(_OWORD *)&v12[16];
    *(_OWORD *)&v15[32] = *(_OWORD *)&v12[32];
    *(_OWORD *)v15 = *(_OWORD *)v12;
    destructiveProjectEnumData for PredicateCodableError(&v13, v6);
    outlined retain of URLComponents((uint64_t)&v9);
    outlined init with take of LocalePreferences?((uint64_t)&v13, (uint64_t)v17, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  }
  else
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)&v13);
    outlined init with take of LocalePreferences?((uint64_t)&v13, (uint64_t)v17, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    v7 = 0;
  }
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = 0x101010101010101;
  v14[0] = 1;
  memset(&v14[8], 0, 72);
  v15[0] = v16;
  memset(&v15[8], 0, 48);
  v15[56] = v7;
  v15[57] = 0;
  outlined release of URLComponents((uint64_t)&v13);
  return outlined init with take of LocalePreferences?((uint64_t)v17, a4, &demangling cache variable for type metadata for URLComponents._URLComponents?);
}

uint64_t _s10Foundation13URLComponentsV01_B0VSgWOg(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, *(unsigned __int8 *)(v3 + 24), a3);
}

{
  uint64_t v3;

  return specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, *(unsigned __int8 *)(v3 + 24), a3);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, *(unsigned __int8 *)(v3 + 24), (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a3 = result;
  a3[1] = v6;
  return result;
}

BOOL partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1)
{
  uint64_t v1;

  return closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(a1, a2, *(unsigned __int16 **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

double specialized URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  id v21;
  char v22;
  void *v23;
  unsigned __int16 *v24;
  id v25;
  void *v26;
  id v27;
  char v28;
  char v29;
  char v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double result;
  id v37;
  id v38;
  unsigned __int16 *v39;
  id v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = (_QWORD *)v1;
  *(_BYTE *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 15) = 0;
  if (!a1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    return result;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    result = 0.0;
    *(_OWORD *)(v1 + 120) = xmmword_182060F30;
    return result;
  }
  v44 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v5 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v5 - 3);
    v6 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    if ((v6 & 0x1000000000000000) != 0)
    {
      v42 = *(v5 - 3);
      v43 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v40 = (id)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v20 = (unsigned __int16 *)objc_msgSend(v40, sel__fastCharacterContents);
      v21 = v40;
      if (v20)
      {
        v42 = v7;
        v43 = v6;
        StringProtocol._ephemeralString.getter();
        v37 = (id)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v38 = objc_msgSend(v37, sel_length);
        swift_unknownObjectRelease();
        v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v20, (uint64_t)v38, 0x80u, 1);
      }
      else
      {
        v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }
      v29 = v22;
      swift_bridgeObjectRelease_n();
      if ((v29 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v11 = HIBYTE(v6) & 0xF;
        v42 = *(v5 - 3);
        v43 = v6 & 0xFFFFFFFFFFFFFFLL;
        v10 = (char *)&v42;
      }
      else if ((v7 & 0x1000000000000000) != 0)
      {
        v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v10 = (char *)_StringObject.sharedUTF8.getter();
      }
      v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12)
        goto LABEL_37;
    }
    v42 = v7;
    v43 = v6;
    if (v8)
      break;
    swift_bridgeObjectRelease();
LABEL_19:
    v8 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
      v8 = v44;
    }
    v18 = *(_QWORD *)(v8 + 16);
    v17 = *(_QWORD *)(v8 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v8 = v44;
    }
    v5 += 4;
    *(_QWORD *)(v8 + 16) = v18 + 1;
    v19 = v8 + 16 * v18;
    *(_QWORD *)(v19 + 32) = v7;
    *(_QWORD *)(v19 + 40) = v6;
    if (!--v4)
      goto LABEL_38;
  }
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) != 0)
    {
      v14 = HIBYTE(v8) & 0xF;
      v41._countAndFlagsBits = v9;
      v41._object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      v13 = (char *)&v41;
    }
    else if ((v9 & 0x1000000000000000) != 0)
    {
      v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v13 = (char *)_StringObject.sharedUTF8.getter();
    }
    v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15)
      goto LABEL_36;
    goto LABEL_18;
  }
  v41._countAndFlagsBits = v9;
  v41._object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  v23 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
  v25 = v23;
  if (v24)
  {
    v41._countAndFlagsBits = v9;
    v41._object = (void *)v8;
    v39 = v24;
    StringProtocol._ephemeralString.getter();
    v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v27 = objc_msgSend(v26, sel_length);
    swift_unknownObjectRelease();
    v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v39, (uint64_t)v27, 0x40u, 1);
  }
  else
  {
    v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }
  v30 = v28;
  swift_bridgeObjectRelease_n();
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v41._countAndFlagsBits = 61;
    v41._object = (void *)0xE100000000000000;
    v16._countAndFlagsBits = v9;
    v16._object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v42;
    v6 = v43;
    goto LABEL_19;
  }
LABEL_36:
  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  v31 = (_QWORD *)swift_allocError();
  *v32 = 7;
  v2 = v31;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_38:
  v42 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v33 = BidirectionalCollection<>.joined(separator:)();
  v35 = v34;
  swift_release();
  swift_bridgeObjectRelease();
  v2[15] = v33;
  v2[16] = v35;
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.InvalidComponentError, &type metadata for URLComponents.InvalidComponentError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.InvalidComponentError, &type metadata for URLComponents.InvalidComponentError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }
  return result;
}

uint64_t *outlined release of URLComponents?(uint64_t *a1)
{
  outlined consume of URLComponents?(*a1);
  return a1;
}

uint64_t outlined consume of URLComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents and conformance URLComponents()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents, &type metadata for URLComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLQueryItem, &type metadata for URLQueryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_1E0F19A28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_1E0F19A28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_1E0F19A28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLComponents.CodingKeys, &unk_1E0F19A28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for URLComponents(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents);
}

uint64_t instantiation function for generic protocol witness table for URLQueryItem(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem);
}

uint64_t instantiation function for generic protocol witness table for URLComponents(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  result = a7();
  a1[4] = result;
  return result;
}

uint64_t sub_181A07964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.scheme.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A0798C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setScheme(_:));
}

uint64_t sub_181A079C4@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.user.getter, a2);
}

uint64_t sub_181A079E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.user.setter);
}

uint64_t sub_181A079EC@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.password.getter, a2);
}

uint64_t sub_181A07A08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.password.setter);
}

uint64_t sub_181A07A14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = URLComponents.host.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_181A07A3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.host.setter);
}

uint64_t sub_181A07A48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = URLComponents.port.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_181A07A80(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.path.setter(v1, v2);
}

uint64_t sub_181A07ABC@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.query.getter, a2);
}

uint64_t sub_181A07AD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.query.setter);
}

uint64_t sub_181A07AE4@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.fragment.getter, a2);
}

uint64_t sub_181A07B00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.fragment.setter);
}

uint64_t sub_181A07B0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.percentEncodedUser.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A07B34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedUser.setter);
}

uint64_t sub_181A07B40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.percentEncodedPassword.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A07B68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedPassword.setter);
}

uint64_t sub_181A07B74@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.percentEncodedHost.getter, a2);
}

uint64_t sub_181A07B90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t sub_181A07BC8@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.encodedHost.getter, a2);
}

uint64_t sub_181A07BE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.encodedHost.setter);
}

uint64_t sub_181A07BF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.percentEncodedPath.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A07C18(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.setter(v1, v2);
}

uint64_t sub_181A07C54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.percentEncodedQuery.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A07C7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedQuery.setter);
}

uint64_t sub_181A07C88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URLComponents.percentEncodedFragment.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181A07CB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_57Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedFragment.setter);
}

uint64_t keypath_set_57Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_181A07CFC@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 0, a2);
}

uint64_t sub_181A07D14()
{
  Swift::OpaquePointer_optional v1;

  v1.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181A07D44@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 1, a2);
}

uint64_t sub_181A07D5C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized URLComponents.percentEncodedQueryItems.setter(v0);
  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy154_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

_QWORD *assignWithCopy for URLQueryItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for URLQueryItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for URLComponents.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for URLComponents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181A07F64 + 4 * byte_182060FED[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181A07F98 + 4 * byte_182060FE8[v4]))();
}

uint64_t sub_181A07F98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A07FA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A07FA8);
  return result;
}

uint64_t sub_181A07FB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A07FBCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181A07FC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A07FC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URLComponents.CodingKeys()
{
  return &unk_1E0F19A28;
}

uint64_t destroy for URLComponents()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  return a1;
}

uint64_t assignWithTake for URLComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLComponents(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 154))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URLComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 154) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 154) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLComponents._URLComponents()
{
  return &type metadata for URLComponents._URLComponents;
}

uint64_t getEnumTagSinglePayload for URLComponents.InvalidComponentError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for URLComponents.InvalidComponentError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_181A08574 + 4 * byte_182060FF7[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_181A085A8 + 4 * byte_182060FF2[v4]))();
}

uint64_t sub_181A085A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A085B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A085B8);
  return result;
}

uint64_t sub_181A085C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A085CCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_181A085D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A085D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URLComponents.InvalidComponentError()
{
  return &type metadata for URLComponents.InvalidComponentError;
}

unint64_t specialized URLComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

uint64_t specialized URLComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D65686373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919251317 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64726F7773736170 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1953722216 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953656688 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7972657571 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x746E656D67617266 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_181A08A1C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181A08A40()
{
  return swift_deallocObject();
}

uint64_t sub_181A08A50()
{
  return swift_deallocObject();
}

double _s10Foundation13URLComponentsV01_B0VSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

uint64_t outlined release of URLComponents(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of URLComponents(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

BOOL closure #1 in Sequence<>.contains(_:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1);
}

{
  return _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(a1);
}

uint64_t closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, a3);
}

{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, a3);
}

uint64_t closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
}

void specialized IndexingIterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;

  v2 = v0[7];
  v3 = (_QWORD *)*v0;
  v4 = v0[1];
  v5 = *(_QWORD *)(*v0 + 64);
  v81 = v4;
  v77 = v0[2];
  if (v4 != v77)
  {
    v12 = v3[10];
    swift_unknownObjectRetain();
    if (v5)
    {
      swift_unknownObjectRelease();
      if (v2 == v12)
        return;
    }
    else if (!v2)
    {
      return;
    }
    goto LABEL_18;
  }
  v6 = v3[10];
  if (v5)
    v7 = v3[10];
  else
    v7 = 0;
  if (v4 < 0 || v7 < v4)
    goto LABEL_163;
  v8 = v3[9];
  v9 = v3[11];
  if (v5)
  {
    if (v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      v76 = v3[9];
      v80 = (_QWORD *)*v0;
      v36 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        v39 = -15;
        v41 = v5;
LABEL_64:
        v43 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16))
          goto LABEL_62;
        v44 = *(_QWORD *)(v41 + 40);
        v32 = __OFSUB__(v4, v44);
        v45 = v4 - v44;
        if (v32)
          goto LABEL_158;
        if (__OFADD__(v45, 1))
          goto LABEL_159;
        if (v45 + 1 < 1)
        {
          v43 = 0;
          goto LABEL_63;
        }
        if ((_DWORD)v43 == 1)
        {
          v4 = v45;
LABEL_62:
          if (!v4)
            goto LABEL_63;
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        v46 = (uint64_t *)(v41 + 64);
        v47 = 1;
        while (1)
        {
          v48 = *v46;
          v46 += 3;
          v4 = v45 - v48;
          if (__OFSUB__(v45, v48))
            break;
          if (__OFADD__(v4, 1))
            goto LABEL_143;
          if (v4 + 1 < 1)
          {
            v43 = v47;
            v4 = v45;
LABEL_63:
            v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
            v36 = ((-15 << v42) - 1) & v36 | (v43 << v42);
            v1 = *(_QWORD *)(v41 + 24 + 24 * v43);
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            v41 = v1;
            if (!*(_BYTE *)(v1 + 18))
              goto LABEL_103;
            goto LABEL_64;
          }
          ++v47;
          v45 = v4;
          if (v43 == v47)
            goto LABEL_62;
        }
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        v69 = 1;
        v37 = v45;
        goto LABEL_152;
      }
      swift_unknownObjectRetain_n();
      v1 = v5;
LABEL_103:
      v62 = *(unsigned __int16 *)(v1 + 16);
      if (!*(_WORD *)(v1 + 16))
        goto LABEL_121;
      v63 = *(_QWORD *)(v1 + 24);
      v32 = __OFSUB__(v4, v63);
      v64 = v4 - v63;
      if (v32)
      {
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      if (__OFADD__(v64, 1))
      {
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      if (v64 + 1 < 1)
      {
        v62 = 0;
      }
      else
      {
        if ((_DWORD)v62 == 1)
        {
          v4 = v64;
LABEL_121:
          if (v4)
          {
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }
          goto LABEL_122;
        }
        v65 = (uint64_t *)(v1 + 48);
        v66 = 1;
        while (1)
        {
          v67 = *v65;
          v65 += 3;
          v4 = v64 - v67;
          if (__OFSUB__(v64, v67))
            goto LABEL_173;
          if (__OFADD__(v4, 1))
            goto LABEL_174;
          if (v4 + 1 < 1)
            break;
          ++v66;
          v64 = v4;
          if (v62 == v66)
            goto LABEL_121;
        }
        v62 = v66;
        v4 = v64;
      }
LABEL_122:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v11 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v62 << 8);
      v3 = v80;
      v8 = v76;
      goto LABEL_123;
    }
    swift_unknownObjectRetain_n();
    v11 = ((-15 << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
  }
  else
  {
    swift_unknownObjectRetain_n();
    v11 = 0;
  }
  swift_unknownObjectRelease();
  v4 = 0;
  v1 = 0;
  if (v5)
  {
LABEL_123:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v1, v5, v8);
    swift_unknownObjectRelease_n();
  }
  v68 = v81 - v4;
  if (__OFSUB__(v81, v4))
  {
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  v4 = v81;
  if (v2 != v68)
  {
LABEL_18:
    v13 = v0[3];
    if (v13 != v3[11])
      goto LABEL_164;
    v78 = v2;
    v15 = v0[4];
    v14 = v0[5];
    if (v14)
    {
      v16 = *(_QWORD *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      v17 = v3[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v15, v17);
      swift_unknownObjectRelease();
      if (v13 != v3[11])
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
        goto LABEL_180;
      }
      v18 = v3;
      v19 = v3[8];
      swift_unknownObjectRetain();
      v16 = specialized Rope._Node.subscript.getter(v15, v19);
      v3 = v18;
      swift_unknownObjectRelease();
      v4 = v81;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v78 + v16;
    if (__OFADD__(v78, v16))
      goto LABEL_165;
    if (v77 >= v78)
      v21 = v78;
    else
      v21 = v77;
    if (v78 < v4)
      v21 = v4;
    if (v20 <= v4)
      v22 = v4;
    else
      v22 = v78 + v16;
    if (v77 >= v20)
      v23 = v22;
    else
      v23 = v77;
    if (v21 == v23)
    {
LABEL_166:
      __break(1u);
    }
    else if (!__OFSUB__(v23, v21))
    {
      v75 = v0;
      v24 = v0[6];
      v25 = v3;
      v26 = v3[8];
      v28 = v25[9];
      v27 = v25[10];
      v79 = v25;
      v29 = v25[11];
      v82 = v13;
      v83 = v15;
      v84 = v14;
      v30 = v24 + 1;
      if (!__OFADD__(v24, 1))
      {
        if (v13 == v29)
        {
          if (v14)
          {
            v31 = *(_QWORD *)(v14 + 24 * ((v15 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            v31 = specialized Rope._Node.subscript.getter(v15, v26);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = __OFADD__(v78, v31);
          v33 = v78 + v31;
          if (!v32)
          {
            swift_unknownObjectRetain();
            specialized Rope.formIndex(after:)(&v82, v26, v28, v27, v13);
            swift_unknownObjectRelease_n();
            if (v33 < v77)
            {
              v34 = v82;
              v35 = v83;
              v36 = v84;
              swift_release();
              v9 = v30;
LABEL_155:
              v75[3] = v34;
              v75[4] = v35;
              v75[5] = v36;
              v75[6] = v9;
              v75[7] = v33;
              return;
            }
            v37 = v81;
            v1 = v79[8];
            v9 = v79[9];
            v33 = v79[10];
            v34 = v79[11];
            if (v81 != v77)
            {
              swift_unknownObjectRetain();
              if (v1)
              {
                v57 = v34;
                v58 = *(unsigned __int8 *)(v1 + 18);
                v59 = *(unsigned __int16 *)(v1 + 16);
                swift_release();
                swift_unknownObjectRelease();
                v36 = 0;
                v60 = (4 * v58 + 8) & 0x3C;
                v61 = ((-15 << v60) - 1) & v58;
                v34 = v57;
                v35 = v61 | (v59 << v60);
              }
              else
              {
                swift_release();
                v35 = 0;
                v36 = 0;
                v9 = 0;
                v33 = 0;
              }
              goto LABEL_155;
            }
            if (v1)
              v38 = v79[10];
            else
              v38 = 0;
            if ((v81 & 0x8000000000000000) == 0 && v38 >= v81)
            {
              if (v1)
              {
                if (v81 < v33 && *(_WORD *)(v1 + 16))
                {
                  v6 = v79[11];
                  v39 = *(unsigned __int8 *)(v1 + 18);
                  if (!*(_BYTE *)(v1 + 18))
                  {
                    swift_unknownObjectRetain_n();
                    v36 = v1;
LABEL_129:
                    v69 = *(unsigned __int16 *)(v36 + 16);
                    if (*(_WORD *)(v36 + 16))
                    {
                      v70 = *(_QWORD *)(v36 + 24);
                      v45 = v37 - v70;
                      if (__OFSUB__(v37, v70))
                      {
LABEL_189:
                        __break(1u);
                        goto LABEL_190;
                      }
                      if (__OFADD__(v45, 1))
                      {
LABEL_190:
                        __break(1u);
                        goto LABEL_191;
                      }
                      if (v45 + 1 <= 0)
                      {
                        v69 = 0;
                        goto LABEL_152;
                      }
                      if ((_DWORD)v69 == 1)
                      {
                        v37 -= v70;
                      }
                      else
                      {
                        v71 = *(_QWORD *)(v36 + 48);
                        v32 = __OFSUB__(v45, v71);
                        v72 = v45 - v71;
                        if (v32)
                        {
LABEL_191:
                          __break(1u);
                          goto LABEL_192;
                        }
                        if (__OFADD__(v72, 1))
                        {
LABEL_192:
                          __break(1u);
                          return;
                        }
                        if (v72 + 1 < 1)
                          goto LABEL_144;
                        if ((_DWORD)v69 != 2)
                        {
                          v73 = (_QWORD *)(v36 + 72);
                          v74 = 2;
                          while (v69 != v74)
                          {
                            v37 = v72 - *v73;
                            if (__OFSUB__(v72, *v73))
                              goto LABEL_186;
                            if (__OFADD__(v37, 1))
                              goto LABEL_187;
                            if (v37 + 1 < 1)
                            {
                              v69 = v74;
                              v37 = v72;
                              goto LABEL_152;
                            }
                            ++v74;
                            v73 += 3;
                            v72 = v37;
                            if (v69 == v74)
                              goto LABEL_151;
                          }
                          goto LABEL_185;
                        }
                        v37 = v72;
                      }
                    }
LABEL_151:
                    if (v37)
                    {
LABEL_188:
                      __break(1u);
                      goto LABEL_189;
                    }
LABEL_152:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v35 = v39 | (v69 << 8);
                    v34 = v6;
                    if (!v1)
                      goto LABEL_153;
                    goto LABEL_114;
                  }
                  v40 = v79[9];
                  swift_unknownObjectRetain_n();
                  v36 = v1;
                  while (1)
                  {
                    v50 = *(unsigned __int16 *)(v36 + 16);
                    if (!*(_WORD *)(v36 + 16))
                      goto LABEL_78;
                    v51 = *(_QWORD *)(v36 + 40);
                    v52 = v37 - v51;
                    if (__OFSUB__(v37, v51))
                      goto LABEL_175;
                    if (__OFADD__(v52, 1))
                      goto LABEL_176;
                    if (v52 + 1 <= 0)
                    {
                      v50 = 0;
                    }
                    else
                    {
                      if ((_DWORD)v50 == 1)
                      {
                        v37 -= v51;
LABEL_78:
                        if (v37)
                          goto LABEL_172;
                        goto LABEL_79;
                      }
                      v53 = *(_QWORD *)(v36 + 64);
                      v32 = __OFSUB__(v52, v53);
                      v54 = v52 - v53;
                      if (v32)
                        goto LABEL_178;
                      if (__OFADD__(v54, 1))
                        goto LABEL_179;
                      if (v54 + 1 >= 1)
                      {
                        if ((_DWORD)v50 != 2)
                        {
                          v55 = (_QWORD *)(v36 + 88);
                          v56 = 2;
                          while (v50 != v56)
                          {
                            v37 = v54 - *v55;
                            if (__OFSUB__(v54, *v55))
                              goto LABEL_161;
                            if (__OFADD__(v37, 1))
                              goto LABEL_162;
                            if (v37 + 1 < 1)
                            {
                              v50 = v56;
                              v37 = v54;
                              goto LABEL_79;
                            }
                            ++v56;
                            v55 += 3;
                            v54 = v37;
                            if (v50 == v56)
                              goto LABEL_78;
                          }
LABEL_160:
                          __break(1u);
LABEL_161:
                          __break(1u);
LABEL_162:
                          __break(1u);
LABEL_163:
                          __break(1u);
LABEL_164:
                          __break(1u);
LABEL_165:
                          __break(1u);
                          goto LABEL_166;
                        }
                        v37 = v54;
                        goto LABEL_78;
                      }
                      v50 = 1;
                      v37 = v52;
                    }
LABEL_79:
                    v49 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
                    v39 = ((-15 << v49) - 1) & v39 | (v50 << v49);
                    v36 = *(_QWORD *)(v36 + 24 + 24 * v50);
                    swift_unknownObjectRetain();
                    swift_unknownObjectRelease();
                    if (!*(_BYTE *)(v36 + 18))
                    {
                      v39 &= 0xFFFFFFFFFFFFF0FFLL;
                      v9 = v40;
                      goto LABEL_129;
                    }
                  }
                }
                swift_unknownObjectRetain_n();
                v35 = ((-15 << ((4 * *(_BYTE *)(v1 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v1 + 18) | ((unint64_t)*(unsigned __int16 *)(v1 + 16) << ((4 * *(_BYTE *)(v1 + 18) + 8) & 0x3C));
              }
              else
              {
                swift_unknownObjectRetain_n();
                v35 = 0;
              }
              swift_unknownObjectRelease();
              v36 = 0;
              v37 = 0;
              if (!v1)
              {
LABEL_153:
                swift_release();
                v9 = 0;
LABEL_154:
                v33 = v81 - v37;
                if (!__OFSUB__(v81, v37))
                  goto LABEL_155;
                goto LABEL_181;
              }
LABEL_114:
              swift_unknownObjectRetain();
              v9 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v34, v35, v36, v1, v9);
              swift_release();
              swift_unknownObjectRelease_n();
              goto LABEL_154;
            }
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          goto LABEL_170;
        }
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }
    __break(1u);
    goto LABEL_168;
  }
}

void specialized IndexingIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[8];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  uint64_t v131;
  char v132[56];

  v3 = *(_QWORD *)(v1 + 200);
  v4 = *(_QWORD *)(v1 + 72);
  if (v3 == v4)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (v3 >= v4)
    goto LABEL_113;
  v5 = *(_QWORD *)(v1 + 8);
  if (v3 < v5)
    goto LABEL_113;
  v7 = *(_QWORD *)(v1 + 208);
  v6 = *(_QWORD *)(v1 + 216);
  v9 = *(_QWORD *)(v1 + 224);
  v8 = *(_QWORD *)(v1 + 232);
  v10 = *(_QWORD *)(v1 + 240);
  v11 = *(_QWORD *)(v1 + 248);
  v12 = *(_QWORD *)(v1 + 256);
  v15 = *(_QWORD *)(v1 + 144);
  v14 = *(_QWORD *)(v1 + 152);
  v16 = *(_QWORD *)(v1 + 160);
  v17 = *(_QWORD *)(v1 + 168);
  v18 = *(_QWORD *)(v1 + 192);
  v19 = *(_QWORD *)(v1 + 128);
  v20 = *(_QWORD *)(v1 + 136);
  v21 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)&v115 = *(_QWORD *)v1;
  v13 = v115;
  *((_QWORD *)&v115 + 1) = v5;
  v22 = *(_OWORD *)(v1 + 32);
  v116 = *(_OWORD *)(v1 + 16);
  v117 = v22;
  v118 = *(_OWORD *)(v1 + 48);
  v119 = v21;
  v120 = v4;
  v23 = *(_OWORD *)(v1 + 96);
  v121 = *(_OWORD *)(v1 + 80);
  v122 = v23;
  v123 = *(_OWORD *)(v1 + 112);
  v124 = v19;
  v125 = v20;
  v99 = v14;
  v100 = v15;
  v126 = v15;
  v127 = v14;
  v97 = v17;
  v98 = v16;
  v128 = v16;
  v129 = v17;
  v92 = v1;
  v130 = *(_OWORD *)(v1 + 176);
  v131 = v18;
  v114[0] = v3;
  v114[1] = v7;
  v103 = v12;
  v104 = v7;
  v90 = v6;
  v114[2] = v6;
  v114[3] = v9;
  v114[4] = v8;
  v114[5] = v10;
  v114[6] = v11;
  v114[7] = v12;
  AttributedString.Runs._resolve(_:)(v114, (uint64_t *)&v108);
  if ((_QWORD)v108 != *(_QWORD *)(v13 + 88))
  {
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v101 = v3;
  v91 = v8;
  v24 = *((_QWORD *)&v108 + 1);
  v25 = *((_QWORD *)&v110 + 1);
  v26 = v111;
  v95 = v113;
  v96 = v112;
  v107 = v13;
  if ((_QWORD)v109)
  {
    v27 = (_QWORD *)(v109 + 24 * ((*((_QWORD *)&v108 + 1) >> ((4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C)) & 0xFLL));
    v28 = v27[3];
    v29 = v27[4];
    v30 = v27[5];
    swift_retain();
    v94 = v29;
    swift_bridgeObjectRetain();
    v93 = v30;
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_QWORD *)(v13 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    v28 = specialized Rope._Node.subscript.getter(v24, v31);
    v93 = v33;
    v94 = v32;
    swift_unknownObjectRelease();
  }
  v34 = v20 >> 10 >= v25 >> 10;
  if (v20 >> 10 >= v25 >> 10)
    v26 = v100;
  else
    v20 = v25;
  if (v34)
    v35 = v99;
  else
    v35 = v96;
  if (v34)
    v36 = v98;
  else
    v36 = v95;
  if (__OFADD__(v28, v25 >> 11))
    goto LABEL_115;
  if ((uint64_t)(v97 >> 11) >= (uint64_t)(v28 + (v25 >> 11)))
    v37 = v28 + (v25 >> 11);
  else
    v37 = v97 >> 11;
  v38 = *(_OWORD *)(v13 + 32);
  v115 = *(_OWORD *)(v13 + 16);
  v116 = v38;
  v117 = *(_OWORD *)(v13 + 48);
  BigString.utf8.getter();
  if (__OFSUB__(v37, v20 >> 11))
    goto LABEL_116;
  v39 = BigString.UTF8View.index(_:offsetBy:)();
  v41 = v40;
  v43 = v42;
  v45 = v44;
  outlined release of Locale((uint64_t)v132);
  if (v39 >> 10 < v20 >> 10)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  *(_QWORD *)a1 = v94;
  *(_QWORD *)(a1 + 8) = v93;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 32) = v35;
  *(_QWORD *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 48) = v39;
  *(_QWORD *)(a1 + 56) = v41;
  *(_QWORD *)(a1 + 64) = v43;
  *(_QWORD *)(a1 + 72) = v45;
  *(_QWORD *)(a1 + 80) = v107;
  v46 = *(_QWORD *)(v107 + 64);
  v47 = *(_QWORD *)(v107 + 72);
  v48 = *(_QWORD *)(v107 + 80);
  v49 = *(_QWORD *)(v107 + 88);
  if (v9 != 1 && v104 == v49)
  {
    v50 = v103;
    v51 = v101;
    if (v103 == 2)
    {
      swift_retain();
      if (v46)
      {
        swift_unknownObjectRetain();
        v52 = v90;
        v53 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v90, v9, v46, v47, v48);
        v54 = v104;
        v50 = 2;
      }
      else
      {
        v53 = 0;
        v52 = v90;
        v54 = v104;
      }
    }
    else
    {
      v53 = v91 >> 11;
      swift_unknownObjectRetain();
      swift_retain();
      v54 = v104;
      v52 = v90;
    }
LABEL_97:
    *(_QWORD *)&v108 = v54;
    *((_QWORD *)&v108 + 1) = v52;
    *(_QWORD *)&v109 = v9;
    if (!__OFADD__(v51, 1))
    {
      if (v54 == v49)
      {
        v106 = v51 + 1;
        v74 = v50;
        if (v9)
        {
          v75 = v47;
          v76 = v48;
          v77 = *(_QWORD *)(v9 + 24 * ((v52 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v75 = v47;
          v76 = v48;
          v77 = specialized Rope._Node.subscript.getter(v52, v46);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v78 = v53 + v77;
        if (!__OFADD__(v53, v77))
        {
          v79 = (__int128 *)(v107 + 16);
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v108, v46, v75, v76, v49);
          swift_unknownObjectRelease_n();
          v102 = v108;
          v80 = v109;
          if (v74 == 2)
          {
            v81 = *(_OWORD *)(v107 + 32);
            v108 = *v79;
            v109 = v81;
            v110 = *(_OWORD *)(v107 + 48);
            BigString.utf8.getter();
            BigString.startIndex.getter();
LABEL_106:
            v83 = BigString.UTF8View.index(_:offsetBy:)();
            v85 = v84;
            v87 = v86;
            v89 = v88;
            outlined release of Locale((uint64_t)v114);
            swift_release();
            *(_QWORD *)(v92 + 200) = v106;
            *(_OWORD *)(v92 + 208) = v102;
            *(_QWORD *)(v92 + 224) = v80;
            *(_QWORD *)(v92 + 232) = v83;
            *(_QWORD *)(v92 + 240) = v85;
            *(_QWORD *)(v92 + 248) = v87;
            *(_QWORD *)(v92 + 256) = v89;
            return;
          }
          v82 = *(_OWORD *)(v107 + 32);
          v108 = *v79;
          v109 = v82;
          v110 = *(_OWORD *)(v107 + 48);
          BigString.utf8.getter();
          if (!__OFSUB__(v78, v91 >> 11))
            goto LABEL_106;
          goto LABEL_124;
        }
        goto LABEL_120;
      }
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  if (v46)
    v55 = *(_QWORD *)(v107 + 72);
  else
    v55 = 0;
  v50 = v103;
  v51 = v101;
  if (v101 < 0 || v55 < v101)
  {
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  if (!v46)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v52 = 0;
    goto LABEL_65;
  }
  if (v101 >= v47 || !*(_WORD *)(v46 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v52 = ((-15 << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
LABEL_65:
    swift_unknownObjectRelease();
    v9 = 0;
    if (!v46)
    {
      v53 = 0;
      goto LABEL_96;
    }
LABEL_66:
    swift_unknownObjectRetain();
    v53 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v49, v52, v9, v46, v47, v48);
    swift_unknownObjectRelease_n();
LABEL_96:
    v54 = v49;
    goto LABEL_97;
  }
  v105 = *(_QWORD *)(v107 + 72);
  v56 = *(_QWORD *)(v107 + 80);
  v57 = *(unsigned __int8 *)(v46 + 18);
  if (*(_BYTE *)(v46 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v58 = v101;
    v59 = v46;
    while (1)
    {
      v61 = *(unsigned __int16 *)(v59 + 16);
      if (*(_WORD *)(v59 + 16))
      {
        v62 = *(_QWORD *)(v59 + 32);
        v63 = v58 - v62;
        if (__OFSUB__(v58, v62))
          goto LABEL_111;
        if (__OFADD__(v63, 1))
          goto LABEL_112;
        if (v63 + 1 <= 0)
        {
          v61 = 0;
          goto LABEL_41;
        }
        if ((_DWORD)v61 == 1)
        {
          v58 -= v62;
        }
        else
        {
          v64 = *(_QWORD *)(v59 + 56);
          v65 = __OFSUB__(v63, v64);
          v66 = v63 - v64;
          if (v65)
            goto LABEL_121;
          if (__OFADD__(v66, 1))
            goto LABEL_122;
          if (v66 + 1 < 1)
          {
            v61 = 1;
            v58 = v63;
            goto LABEL_41;
          }
          if ((_DWORD)v61 != 2)
          {
            v67 = (_QWORD *)(v59 + 80);
            v68 = 2;
            while (v61 != v68)
            {
              v58 = v66 - *v67;
              if (__OFSUB__(v66, *v67))
                goto LABEL_108;
              if (__OFADD__(v58, 1))
                goto LABEL_109;
              if (v58 + 1 < 1)
              {
                v61 = v68;
                v58 = v66;
                goto LABEL_41;
              }
              ++v68;
              v67 += 3;
              v66 = v58;
              if (v61 == v68)
                goto LABEL_40;
            }
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }
          v58 = v66;
        }
      }
LABEL_40:
      if (v58)
        goto LABEL_110;
LABEL_41:
      v60 = (4 * *(_BYTE *)(v59 + 18) + 8) & 0x3C;
      v57 = ((-15 << v60) - 1) & v57 | (v61 << v60);
      v9 = *(_QWORD *)(v59 + 24 + 24 * v61);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v59 = v9;
      if (!*(_BYTE *)(v9 + 18))
        goto LABEL_69;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  v58 = v101;
  v9 = v46;
LABEL_69:
  v69 = *(unsigned __int16 *)(v9 + 16);
  if (!*(_WORD *)(v9 + 16))
  {
    v70 = v58;
    v50 = v103;
    v51 = v101;
    goto LABEL_89;
  }
  v70 = v58 - 1;
  v50 = v103;
  if (__OFSUB__(v58, 1))
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v51 = v101;
  if (__OFADD__(v70, 1))
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  if (v58 <= 0)
    goto LABEL_91;
  if ((_DWORD)v69 == 1)
  {
LABEL_89:
    if (!v70)
    {
LABEL_94:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v52 = v57 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
      v48 = v56;
      v47 = v105;
      goto LABEL_66;
    }
    __break(1u);
LABEL_91:
    v69 = 0;
    goto LABEL_94;
  }
  v65 = __OFSUB__(v70, 1);
  v70 = v58 - 2;
  if (v65)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  if (!__OFADD__(v70, 1))
  {
    if (v58 - 1 < 1)
    {
      v69 = 1;
      goto LABEL_94;
    }
    if ((_DWORD)v69 != 2)
    {
      v71 = 0;
      v72 = v69 - 2;
      if (v70 >= v69 - 3)
        v73 = v69 - 3;
      else
        v73 = v58 - 2;
      if (v73 >= v58 + 0x7FFFFFFFFFFFFFFELL)
        v73 = v58 + 0x7FFFFFFFFFFFFFFELL;
      while (v72 > v73)
      {
        if (v58 + 0x7FFFFFFFFFFFFFFELL == v71)
          goto LABEL_126;
        if (v70 == v71)
        {
          v69 = v58;
          goto LABEL_94;
        }
        if (v72 == ++v71)
        {
          v70 -= v71;
          goto LABEL_89;
        }
      }
      goto LABEL_125;
    }
    goto LABEL_89;
  }
LABEL_130:
  __break(1u);
}

uint64_t specialized Range.init(uncheckedBounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t result, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;

  v13 = result;
  v7 = a5 - a4;
  if (a5 != a4)
  {
    for (i = (uint64_t *)(a6 + 24 * a4 + 16); ; i += 3)
    {
      v10 = *(i - 1);
      v11 = *i;
      v12[0] = *(i - 2);
      v12[1] = v10;
      v12[2] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v13, v12);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v6)
        break;
      if (!--v7)
        return v13;
    }
  }
  return result;
}

BOOL static AttributedString.AttributeMergePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AttributedString.AttributeMergePolicy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AttributedString.AttributeMergePolicy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedStringProtocol.mergingAttributes(_:mergePolicy:)@<X0>(__int128 *a1@<X0>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  __n128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  (*(void (**)(char *, uint64_t, __n128))(v14 + 16))(v11, v4, v9);
  AttributedString.init<A>(_:)((uint64_t)v11, a2, a3, a4);
  v18 = *a1;
  v17 = v13;
  return AttributedString.mergeAttributes(_:mergePolicy:)((uint64_t *)&v18, &v17);
}

uint64_t AttributedStringProtocol.replacingAttributes(_:with:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;

  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v14 + 16))(v13, v5, v11);
  AttributedString.init<A>(_:)((uint64_t)v13, a3, a4, a5);
  v15 = *a1;
  v17 = *a2;
  v18 = v15;
  return AttributedString.replaceAttributes(_:with:)((uint64_t *)&v18, (uint64_t *)&v17);
}

uint64_t AttributedStringProtocol.description.getter(ValueMetadata *a1, void (**a2)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  uint64_t *v2;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  void *v103;
  uint64_t v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  int64_t v110;
  unint64_t v111;
  int64_t v112;
  void *v113;
  uint64_t v114;
  __int128 *v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  Swift::String v146;
  Swift::String v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  Swift::String v153;
  Swift::String v154;
  uint64_t v155[8];
  Swift::String v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[80];
  __int128 v161;
  _BYTE v162[40];
  uint64_t v163;
  unint64_t v164;
  Swift::String v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _BYTE v169[80];
  __int128 v170;
  _BYTE v171[40];
  char v172[48];
  char v173;
  char v174;
  char v175[48];
  char v176[112];
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  Swift::String v197;
  uint64_t v198;
  uint64_t v199;
  Swift::String v200;
  __int128 v201;

  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring)
  {
    countAndFlagsBits = *v2;
    swift_retain();
  }
  else
  {
    ((void (**)(Swift::String *__return_ptr, ValueMetadata *, _QWORD))a2)[7](&v165, a1, a2);
    countAndFlagsBits = v165._countAndFlagsBits;
  }
  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, _QWORD))a2)[4](&v165, a1, a2);
  v146 = v165;
  v7 = *((_QWORD *)&v166 + 1);
  v6 = v166;
  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, _QWORD))a2)[5](&v156, a1, a2);
  v197 = v146;
  v198 = v6;
  v199 = v7;
  v200 = v156;
  v201 = v157;
  v163 = 0;
  v164 = 0xE000000000000000;
  v8 = swift_retain();
  AttributedString.Runs.init(_:in:)(v8, &v156);
  *(_OWORD *)v171 = *(_OWORD *)v162;
  *(_OWORD *)&v171[16] = *(_OWORD *)&v162[16];
  *(_QWORD *)&v171[32] = *(_QWORD *)&v162[32];
  *(_OWORD *)&v169[32] = *(_OWORD *)&v160[32];
  *(_OWORD *)&v169[48] = *(_OWORD *)&v160[48];
  *(_OWORD *)&v169[64] = *(_OWORD *)&v160[64];
  v170 = v161;
  v167 = v158;
  v168 = v159;
  *(_OWORD *)v169 = *(_OWORD *)v160;
  *(_OWORD *)&v169[16] = *(_OWORD *)&v160[16];
  v165 = v156;
  v166 = v157;
  v127 = *(_OWORD *)&v169[8];
  v9 = *(_QWORD *)&v160[8];
  object = v156._object;
  v11 = v156._countAndFlagsBits;
  v12 = countAndFlagsBits;
  if (v156._object == *(void **)&v160[8])
  {
    v13 = 0;
    goto LABEL_156;
  }
  v15 = *((_QWORD *)&v166 + 1);
  v14 = v166;
  v17 = *((_QWORD *)&v167 + 1);
  v16 = v167;
  v18 = v168;
  v120 = *(_OWORD *)&v169[40];
  v121 = *(_OWORD *)&v169[24];
  v119 = *(_OWORD *)&v169[56];
  v19 = *(_QWORD *)v169;
  v20 = *(_QWORD *)&v169[72];
  v130 = *((_QWORD *)&v170 + 1);
  v131 = v170;
  v126 = *(_OWORD *)&v171[8];
  v117 = *(_OWORD *)&v171[24];
  v115 = (__int128 *)(v12 + 16);
  v129 = *(_QWORD *)v171;
  result = outlined retain of AttributedString.Runs((uint64_t)&v165);
  v116 = v20 >> 10;
  v128 = (__int128 *)(v11 + 16);
  v124 = v15;
  v125 = v14;
  v136 = v14;
  v137 = v16;
  v122 = v17;
  v123 = v16;
  v133 = *((_QWORD *)&v18 + 1);
  v134 = v18;
  v118 = v19;
  v142 = v19;
  v143 = (_QWORD *)v11;
  v22 = (uint64_t)object;
  v113 = object;
  v114 = v9;
  while (2)
  {
    if (v22 >= v9)
      goto LABEL_161;
    v156._countAndFlagsBits = v11;
    v156._object = object;
    *(_QWORD *)&v157 = v125;
    *((_QWORD *)&v157 + 1) = v124;
    *(_QWORD *)&v158 = v123;
    *((_QWORD *)&v158 + 1) = v122;
    v159 = v18;
    *(_OWORD *)&v160[8] = v127;
    *(_OWORD *)&v160[24] = v121;
    *(_OWORD *)&v160[40] = v120;
    *(_OWORD *)&v160[56] = v119;
    *(_QWORD *)v160 = v118;
    *(_QWORD *)&v160[72] = v20;
    *(_QWORD *)&v161 = v131;
    *((_QWORD *)&v161 + 1) = v130;
    *(_QWORD *)v162 = v129;
    *(_OWORD *)&v162[8] = v126;
    *(_OWORD *)&v162[24] = v117;
    v155[0] = v22;
    v155[1] = v136;
    v138 = v15;
    v155[2] = v15;
    v155[3] = v137;
    v155[4] = v17;
    v155[5] = v134;
    v155[6] = v133;
    v155[7] = v142;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(v155, &v147._countAndFlagsBits);
    if (v147._countAndFlagsBits != *(_QWORD *)(v11 + 88))
    {
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    v140 = v17;
    v144 = v22;
    v24 = (unint64_t)v147._object;
    v25 = *((_QWORD *)&v149 + 1);
    v27 = v150;
    v26 = v151;
    if ((_QWORD)v148)
    {
      v28 = v148 + 24 * (((unint64_t)v147._object >> ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C)) & 0xF);
      v29 = *(_QWORD *)(v28 + 24);
      v30 = *(_QWORD *)(v28 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v31 = v143[8];
      swift_retain();
      swift_unknownObjectRetain();
      v29 = specialized Rope._Node.subscript.getter(v24, v31);
      v30 = v32;
      result = swift_unknownObjectRelease();
    }
    if (v116 >= v25 >> 10)
      v33 = v20;
    else
      v33 = v25;
    if (v116 >= v25 >> 10)
      v34 = v131;
    else
      v34 = v27;
    if (v116 >= v25 >> 10)
      v35 = v130;
    else
      v35 = *((_QWORD *)&v27 + 1);
    if (v116 >= v25 >> 10)
      v36 = v129;
    else
      v36 = v26;
    if (__OFADD__(v29, v25 >> 11))
      goto LABEL_163;
    if ((uint64_t)((unint64_t)v126 >> 11) >= (uint64_t)(v29 + (v25 >> 11)))
      v37 = v29 + (v25 >> 11);
    else
      v37 = (unint64_t)v126 >> 11;
    v38 = v128[1];
    v194 = *v128;
    v195 = v38;
    v196 = v128[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v37, v33 >> 11))
      goto LABEL_164;
    v39 = BigString.UTF8View.index(_:offsetBy:)();
    v41 = v40;
    v43 = v42;
    v45 = v44;
    result = outlined release of Locale((uint64_t)v172);
    if (v39 >> 10 < v33 >> 10)
    {
LABEL_165:
      __break(1u);
      goto LABEL_166;
    }
    v177 = v33;
    v178 = v34;
    v179 = v35;
    v180 = v36;
    v181 = v39;
    v182 = v41;
    v183 = v43;
    v184 = v45;
    v46 = v143[8];
    v47 = v143[9];
    v48 = v143[11];
    v135 = v143[10];
    v49 = v136;
    v50 = v137;
    v132 = v46;
    if (v137 == 1 || v136 != v48)
    {
      if (v46)
        v52 = v143[9];
      else
        v52 = 0;
      if (v144 < 0 || v52 < v144)
      {
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }
      if (v46)
      {
        if (v144 < v47 && *(_WORD *)(v46 + 16))
        {
          v53 = *(unsigned __int8 *)(v46 + 18);
          if (*(_BYTE *)(v46 + 18))
          {
            swift_unknownObjectRetain_n();
            result = swift_retain();
            v54 = v144;
            v55 = v46;
            while (1)
            {
              v57 = *(unsigned __int16 *)(v55 + 16);
              if (*(_WORD *)(v55 + 16))
              {
                v58 = *(_QWORD *)(v55 + 32);
                v59 = __OFSUB__(v54, v58);
                v60 = v54 - v58;
                if (v59)
                  goto LABEL_159;
                if (__OFADD__(v60, 1))
                  goto LABEL_160;
                if (v60 + 1 <= 0)
                {
                  v57 = 0;
                  goto LABEL_49;
                }
                if ((_DWORD)v57 != 1)
                {
                  v61 = *(_QWORD *)(v55 + 56);
                  v54 = v60 - v61;
                  if (__OFSUB__(v60, v61))
                    goto LABEL_173;
                  if (__OFADD__(v54, 1))
                    goto LABEL_174;
                  if (v54 + 1 < 1)
                  {
                    v57 = 1;
                    v54 = v60;
                    goto LABEL_49;
                  }
                  if ((_DWORD)v57 == 2)
                    goto LABEL_48;
                  v62 = *(_QWORD *)(v55 + 80);
                  v59 = __OFSUB__(v54, v62);
                  v60 = v54 - v62;
                  if (v59)
                    goto LABEL_177;
                  if (__OFADD__(v60, 1))
                    goto LABEL_178;
                  if (v60 + 1 < 1)
                  {
                    v57 = 2;
                    goto LABEL_49;
                  }
                  if ((_DWORD)v57 != 3)
                  {
                    v63 = 3;
                    if (v57 > 3)
                      v63 = *(unsigned __int16 *)(v55 + 16);
                    v64 = (_QWORD *)(v55 + 104);
                    v65 = 3;
                    while (1)
                    {
                      if (v63 == v65)
                        goto LABEL_169;
                      v54 = v60 - *v64;
                      if (__OFSUB__(v60, *v64))
                        goto LABEL_170;
                      if (__OFADD__(v54, 1))
                        goto LABEL_171;
                      if (v54 + 1 < 1)
                        break;
                      ++v65;
                      v64 += 3;
                      v60 = v54;
                      if (v57 == v65)
                        goto LABEL_48;
                    }
                    v57 = v65;
                    v54 = v60;
                    goto LABEL_49;
                  }
                }
                v54 = v60;
              }
LABEL_48:
              if (v54)
              {
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
                goto LABEL_162;
              }
LABEL_49:
              v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              v53 = ((-15 << v56) - 1) & v53 | (v57 << v56);
              v46 = *(_QWORD *)(v55 + 24 + 24 * v57);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v55 = v46;
              if (!*(_BYTE *)(v46 + 18))
                goto LABEL_81;
            }
          }
          swift_unknownObjectRetain_n();
          result = swift_retain();
          v54 = v144;
LABEL_81:
          v66 = v46;
          v67 = *(unsigned __int16 *)(v46 + 16);
          if ((_DWORD)v67)
          {
            v68 = v54 - 1;
            if (__OFSUB__(v54, 1))
            {
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
              goto LABEL_185;
            }
            if (__OFADD__(v68, 1))
              goto LABEL_181;
            if (v54 <= 0)
            {
              v67 = 0;
            }
            else
            {
              if ((_DWORD)v67 == 1)
                goto LABEL_147;
              v59 = __OFSUB__(v68, 1);
              v68 = v54 - 2;
              if (v59)
                goto LABEL_184;
              if (__OFADD__(v68, 1))
              {
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
                goto LABEL_187;
              }
              if (v54 - 1 < 1)
              {
                v67 = 1;
              }
              else
              {
                if ((_DWORD)v67 == 2)
                  goto LABEL_147;
                v59 = __OFSUB__(v68, 1);
                v68 = v54 - 3;
                if (v59)
                  goto LABEL_186;
                if (__OFADD__(v68, 1))
                {
LABEL_187:
                  __break(1u);
                  return result;
                }
                if (v54 - 2 < 1)
                {
                  v67 = 2;
                }
                else
                {
                  if ((_DWORD)v67 == 3)
                    goto LABEL_147;
                  v69 = 0;
                  if (v68 >= v67 - 4)
                    v70 = v67 - 4;
                  else
                    v70 = v54 - 3;
                  if (v70 >= v54 + 0x7FFFFFFFFFFFFFFDLL)
                    v70 = v54 + 0x7FFFFFFFFFFFFFFDLL;
                  while (1)
                  {
                    if (v67 - 3 <= v70)
                      goto LABEL_182;
                    if (v54 + 0x7FFFFFFFFFFFFFFDLL == v69)
                      goto LABEL_183;
                    if (v68 == v69)
                      break;
                    if (v67 - 3 == ++v69)
                    {
                      v68 -= v69;
                      goto LABEL_147;
                    }
                  }
                  v67 = v54;
                }
              }
            }
          }
          else
          {
            v68 = v54;
LABEL_147:
            if (v68)
            {
LABEL_179:
              __break(1u);
              goto LABEL_180;
            }
          }
          swift_unknownObjectRelease();
          v50 = v66;
          result = swift_unknownObjectRelease();
          v51 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
          v46 = v132;
          if (!v132)
          {
LABEL_106:
            v49 = v48;
            goto LABEL_107;
          }
LABEL_105:
          swift_unknownObjectRetain();
          v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v48, v51, v50, v46, v47, v135);
          result = swift_unknownObjectRelease_n();
          goto LABEL_106;
        }
        swift_unknownObjectRetain_n();
        swift_retain();
        v51 = ((-15 << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        v51 = 0;
      }
      result = swift_unknownObjectRelease();
      v50 = 0;
      if (!v46)
        goto LABEL_106;
      goto LABEL_105;
    }
    if (v142 == 2)
    {
      v51 = v138;
      if (v46)
      {
        swift_retain();
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v138, v137, v46, v47, v135);
        v46 = result;
      }
      else
      {
        result = swift_retain();
      }
    }
    else
    {
      v46 = v140 >> 11;
      swift_unknownObjectRetain();
      result = swift_retain();
      v51 = v138;
    }
LABEL_107:
    v156._countAndFlagsBits = v49;
    v156._object = (void *)v51;
    *(_QWORD *)&v157 = v50;
    v59 = __OFADD__(v144, 1);
    v145 = v144 + 1;
    if (v59)
    {
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
    if (v49 != v48)
    {
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    v71 = v48;
    if (v50)
    {
      v72 = v47;
      v73 = *(_QWORD *)(v50 + 24 * ((v51 >> ((4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v72 = v47;
      v73 = specialized Rope._Node.subscript.getter(v51, v132);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v59 = __OFADD__(v46, v73);
    v74 = v46 + v73;
    if (v59)
    {
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v156, v132, v72, v135, v71);
    swift_unknownObjectRelease_n();
    v75 = v156._countAndFlagsBits;
    v139 = v156._object;
    v76 = v157;
    if (v142 != 2)
    {
      v83 = v128[1];
      v188 = *v128;
      v189 = v83;
      v190 = v128[2];
      BigString.utf8.getter();
      result = v140;
      if (!__OFSUB__(v74, v140 >> 11))
      {
        v78 = BigString.UTF8View.index(_:offsetBy:)();
        v133 = v85;
        v134 = v84;
        v142 = v86;
        v82 = &v173;
        goto LABEL_117;
      }
      goto LABEL_176;
    }
    v77 = v128[1];
    v191 = *v128;
    v192 = v77;
    v193 = v128[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v78 = BigString.UTF8View.index(_:offsetBy:)();
    v133 = v80;
    v134 = v79;
    v142 = v81;
    v82 = &v174;
LABEL_117:
    outlined release of Locale((uint64_t)v82);
    swift_release();
    v136 = v75;
    v137 = v76;
    v141 = v78;
    v87 = v115[1];
    v185 = *v115;
    v186 = v87;
    v187 = v115[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v175);
    v88 = MEMORY[0x186DA46DC](v176);
    v90 = v89;
    v91 = v163 & 0xFFFFFFFFFFFFLL;
    if ((v164 & 0x2000000000000000) != 0)
      v91 = HIBYTE(v164) & 0xF;
    if (v91)
    {
      v92._countAndFlagsBits = 10;
      v92._object = (void *)0xE100000000000000;
      String.append(_:)(v92);
    }
    v154._countAndFlagsBits = v88;
    v154._object = v90;
    v93._countAndFlagsBits = 32;
    v93._object = (void *)0xE100000000000000;
    String.append(_:)(v93);
    v153._countAndFlagsBits = 0;
    v153._object = (void *)0xE000000000000000;
    v94 = v30 + 64;
    v95 = 1 << *(_BYTE *)(v30 + 32);
    if (v95 < 64)
      v96 = ~(-1 << v95);
    else
      v96 = -1;
    v97 = v96 & *(_QWORD *)(v30 + 64);
    v98 = (unint64_t)(v95 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    v99 = 0;
    while (1)
    {
      if (v97)
      {
        v100 = __clz(__rbit64(v97));
        v97 &= v97 - 1;
        v101 = v100 | (v99 << 6);
        goto LABEL_126;
      }
      v110 = v99 + 1;
      if (__OFADD__(v99, 1))
      {
        __break(1u);
        goto LABEL_158;
      }
      if (v110 >= v98)
        break;
      v111 = *(_QWORD *)(v94 + 8 * v110);
      ++v99;
      if (!v111)
      {
        v99 = v110 + 1;
        if (v110 + 1 >= v98)
          break;
        v111 = *(_QWORD *)(v94 + 8 * v99);
        if (!v111)
        {
          v99 = v110 + 2;
          if (v110 + 2 >= v98)
            break;
          v111 = *(_QWORD *)(v94 + 8 * v99);
          if (!v111)
          {
            v99 = v110 + 3;
            if (v110 + 3 >= v98)
              break;
            v111 = *(_QWORD *)(v94 + 8 * v99);
            if (!v111)
            {
              v99 = v110 + 4;
              if (v110 + 4 >= v98)
                break;
              v111 = *(_QWORD *)(v94 + 8 * v99);
              if (!v111)
              {
                v112 = v110 + 5;
                if (v112 >= v98)
                  break;
                v111 = *(_QWORD *)(v94 + 8 * v112);
                if (!v111)
                {
                  while (1)
                  {
                    v99 = v112 + 1;
                    if (__OFADD__(v112, 1))
                      goto LABEL_172;
                    if (v99 >= v98)
                      goto LABEL_8;
                    v111 = *(_QWORD *)(v94 + 8 * v99);
                    ++v112;
                    if (v111)
                      goto LABEL_145;
                  }
                }
                v99 = v112;
              }
            }
          }
        }
      }
LABEL_145:
      v97 = (v111 - 1) & v111;
      v101 = __clz(__rbit64(v111)) + (v99 << 6);
LABEL_126:
      v102 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v101);
      v104 = *v102;
      v103 = (void *)v102[1];
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v30 + 56) + 72 * v101, (uint64_t)&v157);
      v156._countAndFlagsBits = v104;
      v156._object = v103;
      v149 = v158;
      v150 = v159;
      v151 = *(_OWORD *)v160;
      v152 = *(_QWORD *)&v160[16];
      v147 = v156;
      v148 = v157;
      v105 = v156;
      swift_bridgeObjectRetain();
      String.append(_:)(v105);
      v106._countAndFlagsBits = 2112800;
      v106._object = (void *)0xE300000000000000;
      String.append(_:)(v106);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v148, (uint64_t)v155);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v107._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      v108._countAndFlagsBits = 10;
      v108._object = (void *)0xE100000000000000;
      String.append(_:)(v108);
      v109._countAndFlagsBits = 9;
      v109._object = (void *)0xE100000000000000;
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      result = outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_8:
    swift_release();
    v156._countAndFlagsBits = 2683;
    v156._object = (void *)0xE200000000000000;
    String.append(_:)(v153);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 125;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    String.append(_:)(v156);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v154);
    v11 = (uint64_t)v143;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    object = v113;
    v9 = v114;
    v22 = v145;
    v15 = (uint64_t)v139;
    v17 = v141;
    if (v145 != v114)
      continue;
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v165);
  v13 = v163;
LABEL_156:
  swift_release();
  swift_release();
  return v13;
}

uint64_t static AttributedStringProtocol.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;

  if (a3 == &type metadata for AttributedString)
  {
    if (a4 != &type metadata for AttributedString)
    {
      if (a4 == &type metadata for AttributedSubstring)
      {
        v10 = *(_QWORD *)a1;
        v58 = *(_OWORD *)(a2 + 24);
        v61 = *(_OWORD *)(a2 + 8);
        v57 = *(_OWORD *)(a2 + 40);
        v46 = *(_QWORD *)(a2 + 56);
        v47 = *(_QWORD *)(a2 + 64);
        v48 = *(_OWORD *)(*(_QWORD *)a1 + 32);
        v117 = *(_OWORD *)(*(_QWORD *)a1 + 16);
        v118 = v48;
        v119 = *(_OWORD *)(v10 + 48);
        *(_QWORD *)&v124 = BigString.startIndex.getter();
        *((_QWORD *)&v124 + 1) = v49;
        *(_QWORD *)&v125 = v50;
        *((_QWORD *)&v125 + 1) = v51;
        *(_QWORD *)&v126 = BigString.endIndex.getter();
        *((_QWORD *)&v126 + 1) = v52;
        *(_QWORD *)&v127 = v53;
        *((_QWORD *)&v127 + 1) = v54;
        v120 = v61;
        v121 = v58;
        v122 = v57;
        *(_QWORD *)&v123 = v46;
        *((_QWORD *)&v123 + 1) = v47;
        goto LABEL_13;
      }
      goto LABEL_8;
    }
    v10 = *(_QWORD *)a1;
    v20 = *(_OWORD **)a2;
    v21 = *(_OWORD *)(*(_QWORD *)a1 + 32);
    v117 = *(_OWORD *)(*(_QWORD *)a1 + 16);
    v118 = v21;
    v119 = *(_OWORD *)(v10 + 48);
    *(_QWORD *)&v124 = BigString.startIndex.getter();
    *((_QWORD *)&v124 + 1) = v22;
    *(_QWORD *)&v125 = v23;
    *((_QWORD *)&v125 + 1) = v24;
    *(_QWORD *)&v126 = BigString.endIndex.getter();
    *((_QWORD *)&v126 + 1) = v25;
    *(_QWORD *)&v127 = v26;
    *((_QWORD *)&v127 + 1) = v27;
    v28 = v20[2];
    v114 = v20[1];
    v115 = v28;
    v116 = v20[3];
    v29 = BigString.startIndex.getter();
    v31 = v30;
    v33 = v32;
    v35 = v34;
LABEL_11:
    *(_QWORD *)&v120 = v29;
    *((_QWORD *)&v120 + 1) = v31;
    *(_QWORD *)&v121 = v33;
    *((_QWORD *)&v121 + 1) = v35;
    *(_QWORD *)&v122 = BigString.endIndex.getter();
    *((_QWORD *)&v122 + 1) = v43;
    *(_QWORD *)&v123 = v44;
    *((_QWORD *)&v123 + 1) = v45;
    goto LABEL_13;
  }
  if (a3 != &type metadata for AttributedSubstring)
    goto LABEL_8;
  if (a4 == &type metadata for AttributedString)
  {
    v10 = *(_QWORD *)a1;
    v36 = *(_OWORD **)a2;
    v37 = *(_OWORD *)(a1 + 24);
    v124 = *(_OWORD *)(a1 + 8);
    v125 = v37;
    v38 = *(_OWORD *)(a1 + 56);
    v126 = *(_OWORD *)(a1 + 40);
    v127 = v38;
    v39 = v36[2];
    v117 = v36[1];
    v118 = v39;
    v119 = v36[3];
    v29 = BigString.startIndex.getter();
    v31 = v40;
    v33 = v41;
    v35 = v42;
    goto LABEL_11;
  }
  if (a4 == &type metadata for AttributedSubstring)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_OWORD *)(a1 + 24);
    v124 = *(_OWORD *)(a1 + 8);
    v125 = v11;
    v12 = *(_OWORD *)(a1 + 56);
    v126 = *(_OWORD *)(a1 + 40);
    v127 = v12;
    v13 = *(_OWORD *)(a2 + 24);
    v120 = *(_OWORD *)(a2 + 8);
    v121 = v13;
    v14 = *(_OWORD *)(a2 + 56);
    v122 = *(_OWORD *)(a2 + 40);
    v123 = v14;
LABEL_13:
    swift_retain_n();
    swift_retain();
    AttributedString.Runs.init(_:in:)(v10, &v88);
    v55 = swift_retain();
    AttributedString.Runs.init(_:in:)(v55, &v101);
    v85 = v98;
    v86 = v99;
    v87 = v100;
    v81 = v94;
    v82 = v95;
    v83 = v96;
    v84 = v97;
    v77 = v90;
    v78 = v91;
    v79 = v92;
    v80 = v93;
    v75 = v88;
    v76 = v89;
    v72 = v111;
    v73 = v112;
    v74 = v113;
    v68 = v107;
    v69 = v108;
    v70 = v109;
    v71 = v110;
    v64 = v103;
    v65 = v104;
    v66 = v105;
    v67 = v106;
    v62 = v101;
    v63 = v102;
    v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v75, &v62);
    outlined release of AttributedString.Runs((uint64_t)&v101);
    outlined release of AttributedString.Runs((uint64_t)&v88);
    swift_release();
    goto LABEL_14;
  }
LABEL_8:
  AttributedStringProtocol.__guts.getter(a3, a5);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v101, a3, a5);
  v59 = v101;
  v15 = v102;
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v88, a3, a5);
  v124 = v59;
  v125 = v15;
  v126 = v88;
  v127 = v89;
  AttributedStringProtocol.__guts.getter(a4, a6);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32))(&v101, a4, a6);
  v60 = v101;
  v16 = v102;
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a6 + 40))(&v88, a4, a6);
  v120 = v60;
  v121 = v16;
  v122 = v88;
  v123 = v89;
  v17 = swift_retain();
  AttributedString.Runs.init(_:in:)(v17, &v88);
  v18 = swift_retain();
  AttributedString.Runs.init(_:in:)(v18, &v101);
  v85 = v98;
  v86 = v99;
  v87 = v100;
  v81 = v94;
  v82 = v95;
  v83 = v96;
  v84 = v97;
  v77 = v90;
  v78 = v91;
  v79 = v92;
  v80 = v93;
  v75 = v88;
  v76 = v89;
  v72 = v111;
  v73 = v112;
  v74 = v113;
  v68 = v107;
  v69 = v108;
  v70 = v109;
  v71 = v110;
  v64 = v103;
  v65 = v104;
  v66 = v105;
  v67 = v106;
  v62 = v101;
  v63 = v102;
  v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v75, &v62);
  outlined release of AttributedString.Runs((uint64_t)&v101);
  outlined release of AttributedString.Runs((uint64_t)&v88);
  swift_release();
LABEL_14:
  swift_release();
  return v19 & 1;
}

uint64_t AttributedStringProtocol.hash(into:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v11, a2, a3);
  v9 = v11;
  v6 = v12;
  v7 = v13;
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v10, a2, a3);
  v14 = v9;
  v15 = v6;
  v16 = v7;
  v17 = v10[0];
  v18 = v10[1];
  AttributedString.Guts.characterwiseHash(in:into:)((uint64_t)&v14, a1);
  return swift_release();
}

_QWORD *AttributedStringProtocol.index(afterCharacter:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[10];
  _OWORD v20[3];
  __int128 v21[3];
  _BYTE v22[40];

  v5 = *a1;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 56))(v19, a2, a3);
  v7 = v19[5] >> 10;
  if (v5 >> 10 >= v19[1] >> 10 && v7 >= v5 >> 10)
  {
    v9 = *(_OWORD *)(v19[0] + 16);
    v10 = *(_OWORD *)(v19[0] + 48);
    v20[1] = *(_OWORD *)(v19[0] + 32);
    v20[2] = v10;
    v20[0] = v9;
    v11 = *(_OWORD *)(v19[0] + 16);
    v21[1] = *(_OWORD *)(v19[0] + 32);
    v21[2] = v10;
    v21[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v21, (uint64_t)v22);
    outlined retain of Locale((uint64_t)v22);
    v12 = BigString.index(after:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    outlined release of Locale((uint64_t)v20);
    result = (_QWORD *)swift_release();
    if (v7 >= v12 >> 10)
    {
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(beforeCharacter:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[3];
  __int128 v23[3];
  _BYTE v24[40];

  v5 = *a1;
  result = (*(_QWORD *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v19, a2, a3);
  v7 = v20 >> 10;
  if (v5 >> 10 >= v20 >> 10 && v21 >> 10 >= v5 >> 10)
  {
    v9 = v19[1];
    v10 = v19[3];
    v22[1] = v19[2];
    v22[2] = v10;
    v22[0] = v9;
    v11 = v19[1];
    v23[1] = v19[2];
    v23[2] = v10;
    v23[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v23, (uint64_t)v24);
    outlined retain of Locale((uint64_t)v24);
    v12 = BigString.index(before:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    outlined release of Locale((uint64_t)v22);
    result = (_QWORD *)swift_release();
    if (v7 <= v12 >> 10)
    {
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(_:offsetByCharacters:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD v23[3];
  __int128 v24[3];
  _BYTE v25[48];

  v5 = *a1;
  result = (*(_QWORD *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v20, a2, a3);
  v7 = v21 >> 10;
  v8 = v22 >> 10;
  if (v5 >> 10 >= v21 >> 10 && v8 >= v5 >> 10)
  {
    v10 = v20[1];
    v11 = v20[3];
    v23[1] = v20[2];
    v23[2] = v11;
    v23[0] = v10;
    v12 = v20[1];
    v24[1] = v20[2];
    v24[2] = v11;
    v24[0] = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v24, (uint64_t)v25);
    outlined retain of Locale((uint64_t)v25);
    v13 = BigString.index(_:offsetBy:)();
    v15 = v14;
    v17 = v16;
    v19 = v18;
    outlined release of Locale((uint64_t)v23);
    result = (_QWORD *)swift_release();
    if (v13 >> 10 >= v7 && v8 >= v13 >> 10)
    {
      *a4 = v13;
      a4[1] = v15;
      a4[2] = v17;
      a4[3] = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(afterUnicodeScalar:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[10];
  char v18[48];
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = *a1;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 64))(v17, a2, a3);
  v7 = v17[5] >> 10;
  if (v5 >> 10 >= v17[1] >> 10 && v7 >= v5 >> 10)
  {
    v9 = *(_OWORD *)(v17[0] + 32);
    v19 = *(_OWORD *)(v17[0] + 16);
    v20 = v9;
    v21 = *(_OWORD *)(v17[0] + 48);
    BigString.unicodeScalars.getter();
    v10 = BigString.UnicodeScalarView.index(after:)();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    outlined release of Locale((uint64_t)v18);
    result = (_QWORD *)swift_release();
    if (v7 >= v10 >> 10)
    {
      *a4 = v10;
      a4[1] = v12;
      a4[2] = v14;
      a4[3] = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(beforeUnicodeScalar:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char v20[48];
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = *a1;
  result = (*(_QWORD *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v17, a2, a3);
  v7 = v18 >> 10;
  if (v5 >> 10 >= v18 >> 10 && v19 >> 10 >= v5 >> 10)
  {
    v9 = v17[2];
    v21 = v17[1];
    v22 = v9;
    v23 = v17[3];
    BigString.unicodeScalars.getter();
    v10 = BigString.UnicodeScalarView.index(before:)();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    outlined release of Locale((uint64_t)v20);
    result = (_QWORD *)swift_release();
    if (v7 <= v10 >> 10)
    {
      *a4 = v10;
      a4[1] = v12;
      a4[2] = v14;
      a4[3] = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(_:offsetByUnicodeScalars:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = *a1;
  result = (*(_QWORD *(**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v19, a2, a3);
  v7 = v20 >> 10;
  v8 = v21 >> 10;
  if (v5 >> 10 >= v20 >> 10 && v8 >= v5 >> 10)
  {
    v10 = v19[2];
    v23 = v19[1];
    v24 = v10;
    v25 = v19[3];
    BigString.unicodeScalars.getter();
    v11 = BigString.UnicodeScalarView.index(_:offsetBy:)();
    v13 = v12;
    v15 = v14;
    v17 = v16;
    outlined release of Locale((uint64_t)v22);
    result = (_QWORD *)swift_release();
    if (v11 >> 10 >= v7 && v8 >= v11 >> 10)
    {
      *a4 = v11;
      a4[1] = v13;
      a4[2] = v15;
      a4[3] = v17;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedStringProtocol.index(afterRun:)@<X0>(unint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[4];
  unint64_t v28[4];

  v7 = *a1;
  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(v28, a2, a3);
  v8 = v28[0];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v27, a2, a3);
  v10 = v27[0];
  v11 = v27[0] >> 10;
  if (v7 >> 10 < v8 >> 10 || v7 >> 10 >= v11)
  {
    __break(1u);
  }
  else
  {
    v14 = v27[1];
    v13 = v27[2];
    v26 = v27[3];
    v15 = AttributedString.Guts.index(afterRun:)(v7);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    result = (_QWORD *)swift_release();
    if (v11 >= v15 >> 10)
      v22 = v15;
    else
      v22 = v10;
    if (v11 >= v15 >> 10)
      v23 = v17;
    else
      v23 = v14;
    if (v11 >= v15 >> 10)
      v24 = v19;
    else
      v24 = v13;
    *a4 = v22;
    a4[1] = v23;
    v25 = v26;
    if (v11 >= v15 >> 10)
      v25 = v21;
    a4[2] = v24;
    a4[3] = v25;
  }
  return result;
}

_QWORD *AttributedStringProtocol.index(beforeRun:)@<X0>(unint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *result;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26[4];
  _QWORD v27[4];

  v7 = *a1;
  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(v27, a2, a3);
  v8 = v27[0];
  v9 = v27[1];
  v24 = v27[2];
  v25 = v27[3];
  result = (*(_QWORD *(**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v26, a2, a3);
  v11 = v8 >> 10;
  if (v8 >> 10 < v7 >> 10 && v26[0] >> 10 >= v7 >> 10)
  {
    v13 = AttributedString.Guts.index(beforeRun:)(v7);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (_QWORD *)swift_release();
    if (v11 >= v13 >> 10)
      v20 = v8;
    else
      v20 = v13;
    if (v11 >= v13 >> 10)
      v21 = v9;
    else
      v21 = v15;
    v22 = v24;
    if (v11 < v13 >> 10)
      v22 = v17;
    *a4 = v20;
    a4[1] = v21;
    v23 = v25;
    if (v11 < v13 >> 10)
      v23 = v19;
    a4[2] = v22;
    a4[3] = v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *AttributedStringProtocol.index(_:offsetByRuns:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  _QWORD *v107;
  uint64_t v108[6];
  __int128 v109;
  __int128 v110;
  __int128 v111;

  v7 = *a1;
  v107 = (_QWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(&v109, a3, a4);
  v8 = v109;
  v9 = v110;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(v108, a3, a4);
  if (v7 >> 10 < (unint64_t)v8 >> 10 || (v105 = v108[0], (unint64_t)v108[0] >> 10 < v7 >> 10))
  {
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  v11 = v107;
  v12 = v107[8];
  if (v12)
    v13 = v107[10];
  else
    v13 = 0;
  v106 = v7 >> 11;
  if (v13 < (uint64_t)(v7 >> 11))
    goto LABEL_140;
  v14 = v108[3];
  v15 = v107[11];
  v101 = (unint64_t)v8 >> 10;
  v94 = v108[1];
  v95 = v108[2];
  v97 = v107[9];
  v100 = (unint64_t)v108[0] >> 10;
  if (v12)
  {
    if (v106 < v107[10] && *(_WORD *)(v12 + 16))
    {
      v16 = *(unsigned __int8 *)(v12 + 18);
      if (*(_BYTE *)(v12 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v17 = v7 >> 11;
        v18 = v12;
        while (1)
        {
          v21 = *(unsigned __int16 *)(v18 + 16);
          if (!*(_WORD *)(v18 + 16))
            goto LABEL_13;
          v22 = *(_QWORD *)(v18 + 40);
          v23 = __OFSUB__(v17, v22);
          v24 = v17 - v22;
          if (v23)
            goto LABEL_134;
          if (__OFADD__(v24, 1))
            goto LABEL_135;
          if ((uint64_t)(v24 + 1) < 1)
          {
            v21 = 0;
            goto LABEL_14;
          }
          if ((_DWORD)v21 == 1)
            break;
          v25 = (uint64_t *)(v18 + 64);
          v26 = 1;
          while (1)
          {
            v27 = *v25;
            v25 += 3;
            v17 = v24 - v27;
            if (__OFSUB__(v24, v27))
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
              goto LABEL_133;
            }
            if (__OFADD__(v17, 1))
              goto LABEL_130;
            if ((uint64_t)(v17 + 1) < 1)
              break;
            ++v26;
            v24 = v17;
            if (v21 == v26)
              goto LABEL_13;
          }
          v21 = v26;
          v17 = v24;
LABEL_14:
          v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
          v16 = ((-15 << v19) - 1) & v16 | (v21 << v19);
          v20 = *(_QWORD *)(v18 + 24 + 24 * v21);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v18 = v20;
          if (!*(_BYTE *)(v20 + 18))
            goto LABEL_33;
        }
        v17 = v24;
LABEL_13:
        if (!v17)
          goto LABEL_14;
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v17 = v7 >> 11;
      v20 = v12;
LABEL_33:
      v30 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16))
        goto LABEL_45;
      v31 = *(_QWORD *)(v20 + 24);
      v23 = __OFSUB__(v17, v31);
      v32 = v17 - v31;
      if (v23)
      {
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
      if (__OFADD__(v32, 1))
      {
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      if ((uint64_t)(v32 + 1) < 1)
      {
        v30 = 0;
      }
      else
      {
        if ((_DWORD)v30 == 1)
        {
          v17 = v32;
LABEL_45:
          if (v17)
          {
LABEL_155:
            __break(1u);
            goto LABEL_156;
          }
          goto LABEL_46;
        }
        v33 = (uint64_t *)(v20 + 48);
        v34 = 1;
        while (1)
        {
          v35 = *v33;
          v33 += 3;
          v17 = v32 - v35;
          if (__OFSUB__(v32, v35))
            goto LABEL_147;
          if (__OFADD__(v17, 1))
            goto LABEL_148;
          if ((uint64_t)(v17 + 1) < 1)
            break;
          ++v34;
          v32 = v17;
          if (v30 == v34)
            goto LABEL_45;
        }
        v30 = v34;
        v17 = v32;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v28 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v30 << 8);
      v11 = v107;
      goto LABEL_31;
    }
    swift_unknownObjectRetain_n();
    v28 = ((-15 << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v12 + 18) | ((unint64_t)*(unsigned __int16 *)(v12 + 16) << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C));
  }
  else
  {
    swift_unknownObjectRetain_n();
    v28 = 0;
  }
  result = (_QWORD *)swift_unknownObjectRelease();
  v20 = 0;
  v17 = 0;
  if (v12)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v15, v28, v20, v12, v97);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v29 = 0;
LABEL_48:
  if (__OFSUB__(v106, v17))
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v96 = v106 - v17;
  v93 = v14;
  v36 = v11;
  v37 = v11[8];
  v39 = v36[9];
  v38 = v36[10];
  v98 = v29;
  v40 = v36[11];
  *(_QWORD *)&v109 = v15;
  *((_QWORD *)&v109 + 1) = v28;
  *(_QWORD *)&v110 = v20;
  v108[0] = a2;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v109, v108, 0, v37, v39, v38, v40);
  v41 = v109;
  v42 = v110;
  swift_unknownObjectRetain();
  v43 = specialized Rope.distance<A>(from:to:in:)(v15, v28, v20, v41, *((unint64_t *)&v41 + 1), v42, v37, v39, v38, v40, specialized Rope._UnsafeHandle.distance<A>(from:to:in:), specialized Rope._Node.distance<A>(from:to:in:));
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v44 = v98 + a2;
  if (__OFADD__(v98, a2))
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  v45 = v96 + v43;
  if (__OFADD__(v96, v43))
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v46 = v107;
  v47 = v107[10];
  result = (_QWORD *)swift_unknownObjectRetain();
  if (!result)
  {
    v49 = 0;
    v48 = 0;
    if (!v45)
      goto LABEL_62;
LABEL_57:
    if ((_QWORD)v41 != v107[11])
    {
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (v42)
    {
      v48 = *(_QWORD *)(v42 + 24 * ((*((_QWORD *)&v41 + 1) >> ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v46 = v107;
      v48 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v41 + 1), v49);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  result = (_QWORD *)swift_unknownObjectRelease();
  if (v45 != v47)
  {
    v49 = v107[8];
    goto LABEL_57;
  }
  v48 = 0;
LABEL_62:
  if (__OFADD__(v45, v48))
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  v50 = v8;
  if ((uint64_t)(v45 + v48) < (uint64_t)((unint64_t)v8 >> 11))
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }
  v51 = v105;
  v52 = v105 >> 11;
  if (v45 < (uint64_t)(v105 >> 11))
    goto LABEL_112;
  v53 = v46[8];
  if (v53)
    v54 = v46[10];
  else
    v54 = 0;
  if (v54 < v52)
    goto LABEL_150;
  if (!v53)
  {
    swift_unknownObjectRetain_n();
    result = (_QWORD *)swift_unknownObjectRelease();
    v68 = 0;
    v69 = 0;
    goto LABEL_110;
  }
  v55 = v46[9];
  v104 = v46[11];
  if (v52 >= v46[10] || !*(_WORD *)(v53 + 16))
  {
    swift_unknownObjectRetain_n();
    v99 = v55;
    v65 = *(unsigned __int8 *)(v53 + 18);
    v66 = *(unsigned __int16 *)(v53 + 16);
    swift_unknownObjectRelease();
    v52 = 0;
    v57 = 0;
    v67 = ((-15 << ((4 * v65 + 8) & 0x3C)) - 1) & v65 | (unint64_t)(v66 << ((4 * v65 + 8) & 0x3C));
    goto LABEL_109;
  }
  v99 = v46[9];
  v56 = *(unsigned __int8 *)(v53 + 18);
  if (!*(_BYTE *)(v53 + 18))
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v70 = 0;
    v57 = v53;
    v71 = *(unsigned __int16 *)(v53 + 16);
    if (!*(_WORD *)(v53 + 16))
      goto LABEL_107;
LABEL_95:
    v72 = *(_QWORD *)(v57 + 24);
    v23 = __OFSUB__(v52, v72);
    v73 = v52 - v72;
    if (v23)
      goto LABEL_158;
    if (__OFADD__(v73, 1))
    {
LABEL_160:
      __break(1u);
      return result;
    }
    if (v73 + 1 < 1)
    {
      v71 = 0;
      goto LABEL_108;
    }
    if ((_DWORD)v71 == 1)
    {
      v52 = v73;
      goto LABEL_107;
    }
    v74 = (uint64_t *)(v57 + 48);
    v75 = 1;
    while (1)
    {
      v76 = *v74;
      v74 += 3;
      v52 = v73 - v76;
      if (__OFSUB__(v73, v76))
        goto LABEL_153;
      if (__OFADD__(v52, 1))
        goto LABEL_154;
      if (v52 + 1 < 1)
      {
        v71 = v75;
        v52 = v73;
        goto LABEL_108;
      }
      ++v75;
      v73 = v52;
      if (v71 == v75)
        goto LABEL_107;
    }
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v57 = v53;
  do
  {
    v59 = *(unsigned __int16 *)(v57 + 16);
    if (*(_WORD *)(v57 + 16))
    {
      v60 = *(_QWORD *)(v57 + 40);
      v23 = __OFSUB__(v52, v60);
      v61 = v52 - v60;
      if (v23)
        goto LABEL_137;
      if (__OFADD__(v61, 1))
        goto LABEL_138;
      if (v61 + 1 < 1)
      {
        v59 = 0;
        goto LABEL_76;
      }
      if ((_DWORD)v59 != 1)
      {
        v62 = (uint64_t *)(v57 + 64);
        v63 = 1;
        while (1)
        {
          v64 = *v62;
          v62 += 3;
          v52 = v61 - v64;
          if (__OFSUB__(v61, v64))
            goto LABEL_131;
          if (__OFADD__(v52, 1))
            goto LABEL_132;
          if (v52 + 1 < 1)
          {
            v59 = v63;
            v52 = v61;
            goto LABEL_76;
          }
          ++v63;
          v61 = v52;
          if (v59 == v63)
            goto LABEL_75;
        }
      }
      v52 = v61;
    }
LABEL_75:
    if (v52)
      goto LABEL_136;
LABEL_76:
    v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
    v56 = ((-15 << v58) - 1) & v56 | (v59 << v58);
    v57 = *(_QWORD *)(v57 + 24 + 24 * v59);
    swift_unknownObjectRetain();
    result = (_QWORD *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v57 + 18));
  v70 = v56 & 0xFFFFFFFFFFFFF0FFLL;
  v51 = v105;
  v71 = *(unsigned __int16 *)(v57 + 16);
  if (*(_WORD *)(v57 + 16))
    goto LABEL_95;
LABEL_107:
  if (v52)
    goto LABEL_159;
LABEL_108:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v67 = v70 | (v71 << 8);
LABEL_109:
  swift_unknownObjectRetain();
  v69 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v67, v57, v53, v99);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v68 = v52 != 0;
  v46 = v107;
  v50 = v8;
LABEL_110:
  v23 = __OFADD__(v69, v68);
  v77 = v69 + v68;
  if (v23)
    goto LABEL_151;
  if (v77 < v44)
  {
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
LABEL_112:
  v78 = *((_OWORD *)v46 + 2);
  v109 = *((_OWORD *)v46 + 1);
  v110 = v78;
  v111 = *((_OWORD *)v46 + 3);
  result = (_QWORD *)BigString.utf8.getter();
  if (__OFSUB__(v45, v106))
    goto LABEL_146;
  v79 = BigString.UTF8View.index(_:offsetBy:)();
  v81 = v80;
  v83 = v82;
  v85 = v84;
  swift_release();
  result = (_QWORD *)outlined release of Locale((uint64_t)v108);
  v86 = v79 >> 10;
  if (v101 >= v79 >> 10)
    v87 = v50;
  else
    v87 = v79;
  if (v100 >= v87 >> 10)
  {
    v92 = v101 >= v86;
    if (v101 >= v86)
      v90 = *((_QWORD *)&v9 + 1);
    else
      v90 = v85;
    if (v101 >= v86)
      v91 = v9;
    else
      v91 = v83;
    v89 = *((_QWORD *)&v8 + 1);
    if (!v92)
      v89 = v81;
    v51 = v87;
    v88 = a5;
  }
  else
  {
    v88 = a5;
    v90 = v93;
    v89 = v94;
    v91 = v95;
  }
  *v88 = v51;
  v88[1] = v89;
  v88[2] = v91;
  v88[3] = v90;
  return result;
}

uint64_t specialized Rope.offset<A>(of:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (result == a7)
  {
    if (a4)
    {
      v11 = result;
      swift_unknownObjectRetain();
      v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v12;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, char a7, int a8, char a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unsigned __int8 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  char v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v129;
  unint64_t v132;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;

  v17 = a12;
  v16 = a13;
  v19 = a10;
  v18 = a11;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((a7 & 1) == 0)
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(a1, a2, a3, a4, a8 & 1, a9 & 1, a10, a11, a12, a13);
LABEL_6:
    if ((a9 & 1) == 0)
    {
      if ((a8 & 1) == 0)
      {
LABEL_8:
        v129 = a6;
        v123 = a8;
        v21 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1, a12, a13);
        v122 = 1;
LABEL_14:
        v20 = a10;
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if ((a7 & 1) != 0)
    goto LABEL_6;
  if ((a9 & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      if ((a6 & 1) == 0)
      {
        v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
        if ((v113 & 1) != 0)
          return 0;
        v122 = 1;
        v123 = a8;
        v129 = a6;
        goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_13:
    v129 = a6;
    v122 = 1;
    v123 = a8;
    v21 = a10;
    goto LABEL_14;
  }
  if ((a6 & 1) == 0)
  {
    v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
    if ((v112 & 1) != 0)
      return 0;
    v20 = v21;
    v129 = a6;
    v122 = 0;
    v123 = a8;
    if ((a8 & 1) == 0)
      v21 = a10;
    goto LABEL_15;
  }
LABEL_11:
  v129 = a6;
  v123 = a8;
  v20 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1, a12, a13);
  v122 = 0;
  v21 = a10;
LABEL_15:
  v125 = v21 >> 14;
  v139 = a2 >> 14;
  v22 = a1 >> 14;
  v135 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v127 = a4 & 0xFFFFFFFFFFFFFFLL;
  v132 = a4;
  v126 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    v143 = 15;
    v144 = v20;
    if (v22 >= v139)
      break;
    v124 = v20;
    LOBYTE(v23) = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0xE000000000000000;
    v27 = 15;
    v28 = 0xE000000000000000;
    v29 = a1;
    v137 = v22;
LABEL_18:
    v140 = 0;
    v134 = v29;
    v136 = v29 >> 14;
    while (1)
    {
      if ((v23 & 1) != 0)
      {
        _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          v31 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
          v143 = String.UnicodeScalarView._foreignIndex(after:)();
          if (v140)
            goto LABEL_41;
        }
        else
        {
          if ((v28 & 0x2000000000000000) != 0)
          {
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            v31 = _decodeScalar(_:startingAt:)();
            v34 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28) >> 16;
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            v35 = *((unsigned __int8 *)&v141 + v34);
          }
          else
          {
            if ((v25 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            v31 = _decodeScalar(_:startingAt:)();
            v32 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
            if ((v25 & 0x1000000000000000) != 0)
              v33 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            else
              v33 = _StringObject.sharedUTF8.getter();
            v34 = v32 >> 16;
            v35 = *(unsigned __int8 *)(v33 + (v32 >> 16));
          }
          v36 = (char)v35;
          v37 = __clz(v35 ^ 0xFF) - 24;
          if (v36 >= 0)
            LOBYTE(v37) = 1;
          v143 = ((v34 + v37) << 16) | 5;
          if (v140)
            goto LABEL_41;
        }
      }
      else
      {
        if ((v144 ^ a11) < 0x4000)
        {
          v104 = v137 == v139;
          v18 = a11;
LABEL_201:
          v19 = a10;
          v20 = v124;
          if (v104)
            goto LABEL_240;
          goto LABEL_202;
        }
        _StringGuts.validateScalarIndex(_:in:)(v144, a10, a11, v17, v16);
        if ((v16 & 0x1000000000000000) != 0)
        {
          v38 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v16 & 0x2000000000000000) != 0)
          {
            v141 = v17;
            v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v17 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          v38 = _decodeScalar(_:startingAt:)();
        }
        v31 = v38;
        if (v140)
        {
LABEL_41:
          _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
          if ((v26 & 0x1000000000000000) != 0)
          {
            v39 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
            v27 = String.UnicodeScalarView._foreignIndex(after:)();
            if ((_DWORD)v31 == (_DWORD)v39)
              goto LABEL_61;
          }
          else
          {
            if ((v26 & 0x2000000000000000) != 0)
            {
              v141 = v24;
              v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              v39 = _decodeScalar(_:startingAt:)();
              v42 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26) >> 16;
              v141 = v24;
              v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              v43 = *((unsigned __int8 *)&v141 + v42);
            }
            else
            {
              if ((v24 & 0x1000000000000000) == 0)
                _StringObject.sharedUTF8.getter();
              v39 = _decodeScalar(_:startingAt:)();
              v40 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
              if ((v24 & 0x1000000000000000) != 0)
                v41 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
              else
                v41 = _StringObject.sharedUTF8.getter();
              v42 = v40 >> 16;
              v43 = *(unsigned __int8 *)(v41 + (v40 >> 16));
            }
            v44 = (char)v43;
            v45 = __clz(v43 ^ 0xFF) - 24;
            if (v44 >= 0)
              LOBYTE(v45) = 1;
            v27 = ((v42 + v45) << 16) | 5;
            if ((_DWORD)v31 == (_DWORD)v39)
              goto LABEL_61;
          }
          goto LABEL_63;
        }
      }
      _StringGuts.validateScalarIndex(_:in:)(v134, a1, a2, a3, v132);
      if ((v132 & 0x1000000000000000) != 0)
      {
        v46 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v132 & 0x2000000000000000) != 0)
        {
          v141 = a3;
          v142 = v127;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        v46 = _decodeScalar(_:startingAt:)();
      }
      v39 = v46;
      if ((_DWORD)v31 == (_DWORD)v46)
      {
LABEL_61:
        v17 = a12;
        v16 = a13;
        goto LABEL_98;
      }
LABEL_63:
      if ((v23 & 1) != 0)
      {
        if (v140)
          goto LABEL_82;
        if ((_DWORD)v31 == (_DWORD)v39)
          goto LABEL_66;
        goto LABEL_84;
      }
      v48 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v31);
      v50 = v49;
      v51 = specialized Collection.first.getter(v48, v49);
      if ((v51 & 0x100000000) != 0)
      {
        swift_bridgeObjectRelease();
        if (v140)
        {
          v17 = a12;
          v19 = a10;
          v18 = a11;
          v16 = a13;
          v20 = v124;
          if (v137 != v139)
            goto LABEL_202;
          goto LABEL_240;
        }
        v23 = 0;
        goto LABEL_85;
      }
      v52 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v143 = 15;
      v53 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v48, v50);
      if ((v50 & 0x1000000000000000) != 0)
      {
        v58 = String.UnicodeScalarView._foreignIndex(after:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = v53 >> 16;
        if ((v50 & 0x2000000000000000) != 0)
        {
          v141 = v48;
          v142 = v50 & 0xFFFFFFFFFFFFFFLL;
          v55 = *((unsigned __int8 *)&v141 + v54);
        }
        else
        {
          v55 = (v48 & 0x1000000000000000) != 0
              ? *(unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v53 >> 16))
              : *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v54);
        }
        swift_bridgeObjectRelease();
        v56 = __clz(v55 ^ 0xFF) - 24;
        v57 = (v55 & 0x80u) == 0 ? 1 : v56;
        v58 = ((v54 + v57) << 16) | 5;
      }
      v143 = v58;
      if (v140)
        break;
      v28 = v50;
      v25 = v48;
      LODWORD(v31) = v52;
      if (v52 == (_DWORD)v39)
      {
LABEL_66:
        v47 = 0;
        v17 = a12;
        v16 = a13;
        if ((v28 & 0x2000000000000000) != 0)
          goto LABEL_151;
        goto LABEL_149;
      }
LABEL_84:
      v23 = 1;
LABEL_85:
      v59 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v39);
      v61 = v60;
      v62 = specialized Collection.first.getter(v59, v60);
      v140 = (v62 & 0x100000000) == 0;
      if ((v62 & 0x100000000) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v63 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v59, v61);
        if ((v61 & 0x1000000000000000) != 0)
        {
          v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          v64 = v63 >> 16;
          if ((v61 & 0x2000000000000000) != 0)
          {
            v141 = v59;
            v142 = v61 & 0xFFFFFFFFFFFFFFLL;
            v66 = *((unsigned __int8 *)&v141 + v64);
          }
          else
          {
            if ((v59 & 0x1000000000000000) != 0)
              v65 = (v61 & 0xFFFFFFFFFFFFFFFLL) + 32;
            else
              v65 = _StringObject.sharedUTF8.getter();
            v66 = *(unsigned __int8 *)(v65 + v64);
          }
          v67 = (char)v66;
          v68 = __clz(v66 ^ 0xFF) - 24;
          if (v67 >= 0)
            LOBYTE(v68) = 1;
          v27 = ((v64 + v68) << 16) | 5;
        }
        v26 = v61;
        v24 = v59;
      }
      v69 = specialized Collection.first.getter(v59, v61);
      swift_bridgeObjectRelease();
      if ((v69 & 0x100000000) != 0)
      {
        v17 = a12;
        v16 = a13;
LABEL_211:
        if (v137 != v139)
        {
          v19 = a10;
          v18 = a11;
          v20 = v124;
          goto LABEL_202;
        }
        v19 = a10;
        v18 = a11;
        v20 = v124;
        if (!v23)
          goto LABEL_240;
        goto LABEL_213;
      }
      v17 = a12;
      v16 = a13;
      if ((_DWORD)v31 != (_DWORD)v69)
        goto LABEL_211;
LABEL_98:
      if ((v23 & 1) == 0)
      {
        if (v140)
          goto LABEL_154;
        goto LABEL_161;
      }
      if (v140)
        goto LABEL_100;
      v47 = 0;
      if ((v28 & 0x2000000000000000) != 0)
      {
LABEL_151:
        v93 = HIBYTE(v28) & 0xF;
        goto LABEL_152;
      }
LABEL_149:
      v93 = v25 & 0xFFFFFFFFFFFFLL;
LABEL_152:
      if (v143 >> 14 == 4 * v93)
      {
        if ((v47 & 1) != 0)
        {
LABEL_154:
          v94 = 0;
          if ((v26 & 0x2000000000000000) == 0)
            goto LABEL_155;
          goto LABEL_158;
        }
LABEL_161:
        v96 = 0;
LABEL_162:
        v97 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
        if ((v16 & 0x1000000000000000) != 0)
        {
          v103 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          v98 = v97 >> 16;
          if ((v16 & 0x2000000000000000) != 0)
          {
            v141 = v17;
            v142 = a13 & 0xFFFFFFFFFFFFFFLL;
            v100 = *((unsigned __int8 *)&v141 + v98);
          }
          else
          {
            v99 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v17 & 0x1000000000000000) == 0)
              v99 = _StringObject.sharedUTF8.getter();
            v100 = *(unsigned __int8 *)(v99 + v98);
          }
          v101 = (char)v100;
          v102 = __clz(v100 ^ 0xFF) - 24;
          if (v101 >= 0)
            LOBYTE(v102) = 1;
          v103 = ((v98 + v102) << 16) | 5;
        }
        v144 = v103;
        v23 = 0;
        if ((v96 & 1) == 0)
          goto LABEL_186;
        v140 = 1;
        v137 = v136;
        v104 = v136 == v139;
        if (v136 >= v139)
        {
          v18 = a11;
          goto LABEL_201;
        }
      }
      else
      {
        if ((v47 & 1) == 0)
          goto LABEL_185;
        v94 = 1;
        if ((v26 & 0x2000000000000000) == 0)
        {
LABEL_155:
          v95 = v24 & 0xFFFFFFFFFFFFLL;
          goto LABEL_159;
        }
LABEL_158:
        v95 = HIBYTE(v26) & 0xF;
LABEL_159:
        if (v27 >> 14 == 4 * v95)
        {
          if ((v94 & 1) != 0)
          {
LABEL_185:
            v23 = 1;
LABEL_186:
            v105 = _StringGuts.validateScalarIndex(_:)(v134, a3, v132);
            if ((v132 & 0x1000000000000000) != 0)
            {
              v29 = String.UnicodeScalarView._foreignIndex(after:)();
            }
            else
            {
              v106 = v105 >> 16;
              if ((v132 & 0x2000000000000000) != 0)
              {
                v141 = a3;
                v142 = v127;
                v108 = *((unsigned __int8 *)&v141 + v106);
              }
              else
              {
                v107 = v126;
                if ((a3 & 0x1000000000000000) == 0)
                  v107 = _StringObject.sharedUTF8.getter();
                v108 = *(unsigned __int8 *)(v107 + v106);
              }
              v109 = (char)v108;
              v110 = __clz(v108 ^ 0xFF) - 24;
              if (v109 >= 0)
                LOBYTE(v110) = 1;
              v29 = ((v106 + v110) << 16) | 5;
            }
            v137 = v29 >> 14;
            if (v29 >> 14 < v139)
              goto LABEL_18;
            goto LABEL_211;
          }
          goto LABEL_161;
        }
        if ((v94 & 1) == 0)
        {
          v96 = 1;
          goto LABEL_162;
        }
        v140 = 1;
        LOBYTE(v23) = 1;
        v137 = v136;
        v30 = v136 == v139;
        if (v136 >= v139)
          goto LABEL_205;
      }
    }
    v28 = v50;
    v25 = v48;
LABEL_82:
    v17 = a12;
    v16 = a13;
LABEL_100:
    v70 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0)
      v70 = v24 & 0xFFFFFFFFFFFFLL;
    v71 = 4 * v70;
    v72 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v72 = v25 & 0xFFFFFFFFFFFFLL;
    v73 = 4 * v72;
    v74 = v143;
    v75 = v143 >> 14;
    if (v143 >> 14 != v73)
    {
      do
      {
        if (v71 == v27 >> 14)
          break;
        _StringGuts.validateScalarIndex(_:)(v74, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          v76 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v28 & 0x2000000000000000) != 0)
          {
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v25 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          v76 = _decodeScalar(_:startingAt:)();
        }
        v77 = v76;
        _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000) != 0)
        {
          v78 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v26 & 0x2000000000000000) != 0)
          {
            v141 = v24;
            v142 = v26 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v24 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          v78 = _decodeScalar(_:startingAt:)();
        }
        v79 = v78;
        v74 = v143;
        if (v77 != v79)
          break;
        v80 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          v84 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          v81 = v80 >> 16;
          if ((v28 & 0x2000000000000000) != 0)
          {
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            v83 = *((unsigned __int8 *)&v141 + v81);
          }
          else
          {
            v82 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v25 & 0x1000000000000000) == 0)
              v82 = _StringObject.sharedUTF8.getter();
            v83 = *(unsigned __int8 *)(v82 + v81);
          }
          v85 = (char)v83;
          v86 = __clz(v83 ^ 0xFF) - 24;
          if (v85 >= 0)
            LOBYTE(v86) = 1;
          v84 = ((v81 + v86) << 16) | 5;
        }
        v143 = v84;
        v87 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000) != 0)
        {
          v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          v88 = v87 >> 16;
          if ((v26 & 0x2000000000000000) != 0)
          {
            v141 = v24;
            v142 = v26 & 0xFFFFFFFFFFFFFFLL;
            v90 = *((unsigned __int8 *)&v141 + v88);
          }
          else
          {
            v89 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v24 & 0x1000000000000000) == 0)
              v89 = _StringObject.sharedUTF8.getter();
            v90 = *(unsigned __int8 *)(v89 + v88);
          }
          v91 = (char)v90;
          v92 = __clz(v90 ^ 0xFF) - 24;
          if (v91 >= 0)
            LOBYTE(v92) = 1;
          v27 = ((v88 + v92) << 16) | 5;
        }
        v74 = v143;
      }
      while (v73 != v143 >> 14);
      v75 = v74 >> 14;
      v17 = a12;
      v16 = a13;
    }
    if (v75 == v73 || v71 == v27 >> 14)
    {
      v47 = 1;
      if ((v28 & 0x2000000000000000) != 0)
        goto LABEL_151;
      goto LABEL_149;
    }
    v30 = v137 == v139;
LABEL_205:
    v19 = a10;
    v18 = a11;
    v20 = v124;
    if (!v30)
      goto LABEL_202;
LABEL_213:
    if ((v129 & 1) != 0)
      specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v143, v25, v28);
    v111 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v111 = v25 & 0xFFFFFFFFFFFFLL;
    if (v143 >> 14 == 4 * v111)
    {
      v114 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
      if ((v16 & 0x1000000000000000) != 0)
      {
        v120 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        v115 = v114 >> 16;
        if ((v16 & 0x2000000000000000) != 0)
        {
          v141 = v17;
          v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          v116 = &v141;
        }
        else
        {
          if ((v17 & 0x1000000000000000) == 0)
            v135 = _StringObject.sharedUTF8.getter();
          v116 = (_QWORD *)v135;
        }
        v117 = *((unsigned __int8 *)v116 + v115);
        v118 = (char)v117;
        v119 = __clz(v117 ^ 0xFF) - 24;
        if (v118 >= 0)
          LOBYTE(v119) = 1;
        v120 = ((v115 + v119) << 16) | 5;
      }
      v144 = v120;
      goto LABEL_240;
    }
LABEL_202:
    if (v125 == v20 >> 14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v20 = Substring.UnicodeScalarView.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = a1 >> 14;
  }
  if (v22 != v139)
    goto LABEL_202;
LABEL_240:
  if ((v129 & 1) != 0 && v144 >> 14 < v18 >> 14)
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v144, v19, v18, v17, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v122 | v123 ^ 1) & 1 | ((v144 ^ v18) < 0x4000)))
    return 0;
  if (v144 >> 14 < v20 >> 14)
  {
    __break(1u);
    return 0;
  }
  return v20;
}

uint64_t specialized Rope.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized Rope.distance<A>(from:to:in:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, specialized Rope._UnsafeHandle.distance<A>(from:to:in:), specialized Rope._Node.distance<A>(from:to:in:));
}

{
  return specialized Rope.distance<A>(from:to:in:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._Node.distance<A>(from:to:in:));
}

uint64_t specialized Rope.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a12)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  if (result != a10 || a4 != a10)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (a2 == a5)
    return 0;
  if (!a7)
    goto LABEL_17;
  v19 = result;
  if (a3 && a6 && a3 == a6)
  {
    v22 = (4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C;
    return a11((a2 >> v22) & 0xF, (a5 >> v22) & 0xF, a3 + 16, a3 + 24);
  }
  swift_unknownObjectRetain();
  if (a2 < a5)
  {
    v20 = a12(v19, a2, a3, v19, a5, a6, a7, a8, a9);
    swift_unknownObjectRelease();
    return v20;
  }
  v21 = a12(v19, a5, a6, v19, a2, a3, a7, a8, a9);
  swift_unknownObjectRelease();
  result = -v21;
  if (__OFSUB__(0, v21))
    goto LABEL_18;
  return result;
}

unint64_t specialized Rope.subscript.getter(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8;

  if (result == a7)
  {
    if (a3)
    {
      v8 = *(_QWORD *)(a3 + 24 * ((a2 >> ((4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v8 = specialized Rope._Node.subscript.getter(a2, a4);
      swift_unknownObjectRelease();
    }
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a4 + 16;
  v6 = *(unsigned __int16 *)(a4 + 16);
  v8 = *(unsigned __int8 *)(a4 + 18);
  v9 = (a2 >> ((4 * v8 + 8) & 0x3C)) & 0xF;
  if (v9 > v6)
  {
    __break(1u);
  }
  else
  {
    if (v9 == v6)
    {
      if ((a2 & (~(-1 << ((4 * v8) & 0x3C)) << 8)) == 0)
        return a6;
      __break(1u);
    }
    v13 = result;
    v14 = (uint64_t *)(a4 + 24);
    swift_unknownObjectRetain();
    if (!v8)
    {
      v21 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v7, v14, v9);
      swift_unknownObjectRelease();
      return v21;
    }
    v15 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0, v9, v7, (uint64_t)v14);
    v16 = &v14[3 * v9];
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    swift_unknownObjectRetain();
    v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, a2, a3, v17, v18, v19);
    result = swift_unknownObjectRelease();
    a6 = v15 + v20;
    if (!__OFADD__(v15, v20))
    {
      swift_unknownObjectRelease();
      return a6;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = a3;
  if ((a3 & 0x8000000000000000) == 0)
    return v3;
  MEMORY[0x1E0C80A78](a1);
  result = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply, (uint64_t)&v7, v4, 0, v5);
  v3 = -result;
  if (!__OFSUB__(0, result))
    return v3;
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1E0C80A78](a1);
    v10 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v11, v8, 0, v9);
    v7 = __OFSUB__(0, v10);
    result = -v10;
    if (v7)
LABEL_9:
      __break(1u);
  }
  else
  {
    result = 0;
    if (a3)
    {
      while (1)
      {
        v6 = *a2;
        a2 += 3;
        v7 = __OFADD__(result, v6);
        result += v6;
        if (v7)
          break;
        if (!--v3)
          return result;
      }
      __break(1u);
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = a1;
  v5 = a2 - a1;
  if (a2 < a1)
  {
    v6 = 0;
    v7 = a1 - a2;
    v8 = (uint64_t *)(a4 + 24 * a2 + 8);
    do
    {
      v9 = *v8;
      result = swift_unknownObjectRetain();
      v11 = __OFADD__(v6, v9);
      v6 += v9;
      if (v11)
      {
        __break(1u);
        goto LABEL_15;
      }
      v8 += 3;
      swift_unknownObjectRelease();
      --v7;
    }
    while (v7);
    result = -v6;
    if (!__OFSUB__(0, v6))
      return result;
    __break(1u);
  }
  if (v4 == a2)
    return 0;
  result = 0;
  v12 = (uint64_t *)(a4 + 24 * v4 + 8);
  while (1)
  {
    v13 = *v12;
    v12 += 3;
    v11 = __OFADD__(result, v13);
    result += v13;
    if (v11)
      break;
    if (!--v5)
      return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = a1;
  v5 = a2 - a1;
  if (a2 < a1)
  {
    v6 = 0;
    v7 = a1 - a2;
    v8 = (uint64_t *)(a4 + 24 * a2 + 16);
    do
    {
      v9 = *v8;
      result = swift_unknownObjectRetain();
      v11 = __OFADD__(v6, v9);
      v6 += v9;
      if (v11)
      {
        __break(1u);
        goto LABEL_15;
      }
      v8 += 3;
      swift_unknownObjectRelease();
      --v7;
    }
    while (v7);
    result = -v6;
    if (!__OFSUB__(0, v6))
      return result;
    __break(1u);
  }
  if (v4 == a2)
    return 0;
  result = 0;
  v12 = (uint64_t *)(a4 + 24 * v4 + 16);
  while (1)
  {
    v13 = *v12;
    v12 += 3;
    v11 = __OFADD__(result, v13);
    result += v13;
    if (v11)
      break;
    if (!--v5)
      return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v5 = a1;
  v7 = a2 - a1;
  v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1E0C80A78](a1);
    v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    v12 = __OFSUB__(0, v11);
    result = -v11;
    v6 = result == 0;
    if (!v12)
      return result;
    __break(1u);
  }
  result = 0;
  if (!v6)
  {
    v14 = (uint64_t *)(v4 + 24 * v5);
    while (1)
    {
      v15 = *v14;
      v14 += 3;
      v12 = __OFADD__(result, v15);
      result += v15;
      if (v12)
        break;
      if (!--v7)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v10[12];

  if (result <= a2)
  {
    if (result == a2)
      return 0;
    v9 = 0;
    while ((unint64_t)(~result + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (result - a2 == --v9)
        return -v9;
    }
    __break(1u);
    goto LABEL_11;
  }
  v10[10] = v2;
  v10[11] = v3;
  MEMORY[0x1E0C80A78](result);
  v7 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)v10, v4, v5, v6);
  v8 = __OFSUB__(0, v7);
  result = -v7;
  if (v8)
LABEL_11:
    __break(1u);
  return result;
}

uint64_t specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(uint64_t result, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_QWORD *)result != a7)
    goto LABEL_24;
  v9 = a4;
  v11 = *a2;
  if (a4)
  {
    v8 = a3;
    v7 = result;
    if (v11 > 0)
    {
      v12 = a7;
      v13 = *(_QWORD *)(result + 16);
      if (!v13
        || (result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(result + 8), a2, a3 & 1, (unsigned __int16 *)(v13 + 16)), (result & 1) == 0))
      {
        if (*(_BYTE *)(v9 + 18))
        {
          swift_unknownObjectRetain();
          v14 = specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v9 + 16, v9 + 24, v7, v9, a2, v8 & 1);
          result = swift_unknownObjectRelease();
          if ((v14 & 1) != 0)
            return result;
LABEL_18:
          if (!*a2)
          {
            v17 = ((-15 << ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v9 + 18) | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C));
            *(_QWORD *)v7 = v12;
            *(_QWORD *)(v7 + 8) = v17;
            v9 = 0;
            goto LABEL_20;
          }
LABEL_26:
          __break(1u);
          return result;
        }
LABEL_17:
        result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(v7 + 8), a2, v8 & 1, (unsigned __int16 *)(v9 + 16));
        if ((result & 1) != 0)
        {
LABEL_20:
          *(_QWORD *)(v7 + 16) = v9;
          return result;
        }
        goto LABEL_18;
      }
      return result;
    }
  }
  else
  {
    if (!v11)
      return result;
    __break(1u);
  }
  v15 = __OFSUB__(0, v11);
  v16 = -v11;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *a2 = v16;
  if (v16 > 0 || (v8 & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 18))
    {
      v12 = a4 + 16;
      swift_unknownObjectRetain();
      v7 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(v9 + 16, v9 + 24, v7, v9, a2, v8 & 1);
      result = swift_unknownObjectRelease();
      if ((v7 & 1) != 0)
        return result;
      __break(1u);
      goto LABEL_17;
    }
    result = specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(v7 + 8), a2, v8 & 1);
    if ((result & 1) == 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t specialized Rope._Node.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = a7 + 16;
  v9 = *(unsigned __int16 *)(a7 + 16);
  v11 = *(unsigned __int8 *)(a7 + 18);
  v12 = (4 * v11 + 8) & 0x3C;
  v13 = (a2 >> v12) & 0xF;
  v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    v18 = a3;
    v20 = result;
    if (v14 != v9)
      goto LABEL_10;
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8, a9);
      v18 = a9 - v21;
      if (!__OFSUB__(a9, v21))
        return v18;
      __break(1u);
LABEL_10:
      v23 = a6;
      v24 = a4;
      swift_unknownObjectRetain();
      if (v11)
        v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(v10, a7 + 24, v13, v14, v20, a2, v18, v24, a5, v23);
      else
        v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v10, a7 + 24, v13, v14);
      v18 = v22;
      swift_unknownObjectRelease();
      return v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a7 + 16;
  v8 = *(unsigned __int16 *)(a7 + 16);
  v10 = *(unsigned __int8 *)(a7 + 18);
  v11 = (4 * v10 + 8) & 0x3C;
  v12 = (a2 >> v11) & 0xF;
  v13 = (a5 >> v11) & 0xF;
  if (v12 >= v8 || v13 > v8)
  {
    __break(1u);
  }
  else
  {
    v17 = a3;
    v19 = result;
    if (v13 != v8)
      goto LABEL_10;
    if ((a5 & (~(-1 << ((4 * v10) & 0x3C)) << 8)) == 0)
    {
      v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8);
      v17 = a8 - v21;
      if (!__OFSUB__(a8, v21))
        return v17;
      __break(1u);
LABEL_10:
      v23 = a6;
      v24 = a4;
      swift_unknownObjectRetain();
      if (v10)
        v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(v9, a7 + 24, v12, v13, v19, a2, v17, v24, a5, v23);
      else
        v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v9, a7 + 24, v12, v13);
      v17 = v22;
      swift_unknownObjectRelease();
      return v17;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v15 = (uint64_t *)(a2 + 24 * a3);
  v17 = *v15;
  v16 = v15[1];
  v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v17, v16, v18);
    swift_unknownObjectRelease();
    return v19;
  }
  v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v17, v16, v18);
  result = swift_unknownObjectRelease();
  v22 = __OFSUB__(v18, v21);
  v23 = v18 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v25 = (uint64_t *)(a2 + 24 * a4);
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  swift_unknownObjectRetain();
  v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27, v28);
  swift_unknownObjectRelease();
  result = v24 + v29;
  if (__OFADD__(v24, v29))
LABEL_11:
    __break(1u);
  return result;
}

{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v15 = (uint64_t *)(a2 + 24 * a3);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v16, v17, v18);
    swift_unknownObjectRelease();
    return v19;
  }
  v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v16, v17);
  result = swift_unknownObjectRelease();
  v22 = __OFSUB__(v17, v21);
  v23 = v17 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v25 = (uint64_t *)(a2 + 24 * a4);
  v26 = *v25;
  v27 = v25[1];
  swift_unknownObjectRetain();
  v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27);
  swift_unknownObjectRelease();
  result = v24 + v28;
  if (__OFADD__(v24, v28))
LABEL_11:
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v5 = a2;
  v7 = a4 - a3;
  v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1E0C80A78](a1);
    v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    v12 = __OFSUB__(0, v11);
    result = -v11;
    v6 = result == 0;
    if (!v12)
      return result;
    __break(1u);
  }
  result = 0;
  if (!v6)
  {
    v14 = (uint64_t *)(v5 + 24 * v4);
    while (1)
    {
      v15 = *v14;
      v14 += 3;
      v12 = __OFADD__(result, v15);
      result += v15;
      if (v12)
        break;
      if (!--v7)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[12];

  if (a3 <= a4)
  {
    if (a3 == a4)
      return 0;
    v11 = 0;
    while ((unint64_t)(~a3 + a4) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (a3 - a4 == --v11)
        return -v11;
    }
    __break(1u);
    goto LABEL_11;
  }
  v12[10] = v4;
  v12[11] = v5;
  MEMORY[0x1E0C80A78](result);
  v9 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, _QWORD *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply, (uint64_t)v12, v6, v7, v8);
  v10 = __OFSUB__(0, v9);
  result = -v9;
  if (v10)
LABEL_11:
    __break(1u);
  return result;
}

uint64_t specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;

  if (*a2 <= 0 && (a3 & 1) == 0)
    return 1;
  if (*(_BYTE *)(a4 + 18))
  {
    swift_unknownObjectRetain();
    v9 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(a4 + 16, a4 + 24, a1, a4, a2, a3 & 1);
    swift_unknownObjectRelease();
    return v9 & 1;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (v10 >> 8) & 0xF;
    if (v11)
    {
      v12 = 1;
      if ((a3 & 1) == 0)
        v12 = 2;
      v13 = v11 + 1;
      v14 = (v11 << 8) - 256;
      for (i = *a2 - 1; i + 1 >= v12; --i)
      {
        *a2 = i;
        --v13;
        v14 -= 256;
        if (v13 < 2)
          return 0;
      }
      *(_QWORD *)(a1 + 8) = v14 | v10 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = -i;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v7 = result;
  if (!*(_BYTE *)(a4 + 18))
  {
    v23 = *(unsigned __int16 *)(a4 + 16);
    v24 = *(_QWORD *)(result + 8);
    v25 = (v24 >> 8) & 0xF;
    v26 = v23 - v25;
    if (v23 > v25)
    {
      v27 = *a2;
      v28 = v25 << 8;
      do
      {
        if ((a3 & 1) != 0)
        {
          if (v27 <= 1)
          {
LABEL_18:
            *(_QWORD *)(result + 8) = v28 | v24 & 0xFFFFFFFFFFFFF0FFLL;
            *(_QWORD *)(result + 16) = a4;
            return 1;
          }
        }
        else if (v27 < 1)
        {
          goto LABEL_18;
        }
        *a2 = --v27;
        v28 += 256;
        --v26;
      }
      while (v26);
      v25 = v23;
    }
    v22 = 0;
    *(_QWORD *)(result + 8) = v24 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
    return v22;
  }
  v8 = (*(_QWORD *)(result + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  v9 = *(unsigned __int16 *)(a4 + 16);
  if (v8 >= v9)
  {
    __break(1u);
    goto LABEL_25;
  }
  v10 = (uint64_t *)(a4 + 24 + 24 * ((*(_QWORD *)(result + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v11, v12, v13);
  swift_unknownObjectRelease();
  if ((v12 & 1) != 0)
    goto LABEL_11;
  v14 = v8 + 1;
  if (v8 + 1 >= v9)
  {
LABEL_19:
    v22 = 0;
LABEL_20:
    swift_unknownObjectRelease();
    return v22;
  }
  v15 = *a2;
  v16 = (uint64_t *)(a4 + 24 * v8 + 64);
  while (1)
  {
    v17 = *(v16 - 1);
    if ((a3 & 1) != 0)
      break;
    if (v15 < v17)
      goto LABEL_10;
LABEL_7:
    v15 -= v17;
    *a2 = v15;
    ++v14;
    v16 += 3;
    if (v9 == v14)
      goto LABEL_19;
  }
  if (v15 > v17)
    goto LABEL_7;
LABEL_10:
  *(_QWORD *)(v7 + 8) = (((-15 << ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) - 1) & *(_QWORD *)(v7 + 8) | (v14 << ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C))) & ((-256 << ((4 * *(_BYTE *)(a4 + 18)) & 0x3C)) | 0xFF);
  v18 = *(v16 - 2);
  v19 = *(v16 - 1);
  v20 = *v16;
  swift_unknownObjectRetain();
  v21 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v7, a2, a3 & 1, v18, v19, v20);
  result = swift_unknownObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_11:
    v22 = 1;
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DF1F60], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<AnyRegexOutput> and conformance Regex<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeMergePolicy, &type metadata for AttributedString.AttributeMergePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeMergePolicy and conformance AttributedString.AttributeMergePolicy);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.AttributeMergePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181A0EAB4 + 4 * byte_182061595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181A0EAE8 + 4 * byte_182061590[v4]))();
}

uint64_t sub_181A0EAE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A0EAF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A0EAF8);
  return result;
}

uint64_t sub_181A0EB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A0EB0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181A0EB10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A0EB18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.setAttributes(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.mergeAttributes(_:mergePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AttributedStringAttributeMutation.replaceAttributes(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of AttributedStringProtocol.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AttributedStringProtocol.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AttributedStringProtocol.runs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AttributedStringProtocol.characters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AttributedStringProtocol.unicodeScalars.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

{
  return (*(uint64_t (**)(void))(a6 + 128))();
}

uint64_t dispatch thunk of AttributedStringProtocol.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

_QWORD *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(_QWORD *a1, _QWORD *a2)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1, a2);
}

uint64_t specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a4;
  v5 = *a1;
  v6 = (*a1 >> 8) & 0xF;
  if (v6 >= v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = *a2;
    do
    {
      if ((a3 & 1) != 0)
      {
        if (v7 < 2)
        {
LABEL_7:
          v8 = 1;
          goto LABEL_10;
        }
      }
      else if (v7 < 1)
      {
        goto LABEL_7;
      }
      *a2 = --v7;
      ++v6;
    }
    while (v4 != v6);
    v8 = 0;
    v6 = v4;
  }
LABEL_10:
  *a1 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v6 << 8);
  return v8;
}

uint64_t specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v6 = (*(_QWORD *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v6 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = result;
  v12 = *(unsigned __int16 *)result;
  v13 = *(_QWORD *)(a2 + 24 * ((*(_QWORD *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  v14 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
  swift_unknownObjectRelease();
  if ((v14 & 1) != 0)
    return 1;
  v15 = v6 + 1;
  if (v6 + 1 >= v12)
    return 0;
  v16 = *a5;
  for (i = a2 + 24 * v6 + 40; ; i += 24)
  {
    v18 = *(_QWORD *)(i - 8);
    if ((a6 & 1) != 0)
      break;
    if (v16 < v18)
      goto LABEL_9;
LABEL_6:
    v16 -= v18;
    *a5 = v16;
    if (v12 == ++v15)
      return 0;
  }
  if (v16 > v18)
    goto LABEL_6;
LABEL_9:
  *(_QWORD *)(a3 + 8) = (((-15 << ((4 * *(_BYTE *)(v11 + 2) + 8) & 0x3C)) - 1) & *(_QWORD *)(a3 + 8) | (v15 << ((4 * *(_BYTE *)(v11 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(_BYTE *)(v11 + 2)) & 0x3C)) | 0xFF);
  v19 = *(_QWORD *)(i - 16);
  swift_unknownObjectRetain();
  v20 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v19);
  result = swift_unknownObjectRelease();
  if ((v20 & 1) != 0)
    return 1;
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)(unint64_t *a1, _QWORD *a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (*a1 >> 8) & 0xF;
  if (v4)
  {
    v5 = *a2 - 1;
    v6 = v4 + 1;
    v7 = (v4 << 8) - 256;
    do
    {
      v8 = v5 + 1;
      if ((a3 & 1) != 0)
      {
        if (v8 <= 0)
        {
LABEL_7:
          *a1 = v7 | v3 & 0xFFFFFFFFFFFFF0FFLL;
          *a2 = -v5;
          return 1;
        }
      }
      else if (v8 < 2)
      {
        goto LABEL_7;
      }
      *a2 = v5--;
      --v6;
      v7 -= 256;
    }
    while (v6 >= 2);
  }
  return 0;
}

uint64_t specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *i;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v6 = (*(_QWORD *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  v7 = *(unsigned __int16 *)(a4 + 16);
  if (v6 > v7)
    goto LABEL_47;
  v12 = result;
  if (v6 < v7)
  {
    v13 = *(_QWORD *)(a2 + 24 * ((*(_QWORD *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
    swift_unknownObjectRetain();
    v14 = specialized Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v13);
    result = swift_unknownObjectRelease();
    if ((v14 & 1) != 0)
      return 1;
  }
  if (!v6)
    return 0;
  v15 = *a5;
  v16 = v6 + 1;
  for (i = (_QWORD *)(a2 + 24 * v6 - 24); ; i -= 3)
  {
    v18 = i[1];
    if ((a6 & 1) == 0)
      break;
    if (v15 < v18)
      goto LABEL_13;
LABEL_10:
    v19 = __OFSUB__(v15, v18);
    v15 -= v18;
    if (v19)
    {
      __break(1u);
      goto LABEL_46;
    }
    *a5 = v15;
    if (--v16 < 2)
      return 0;
  }
  if (v18 < v15)
    goto LABEL_10;
LABEL_13:
  *(_QWORD *)(a3 + 8) = (((-15 << ((4 * *(_BYTE *)(v12 + 2) + 8) & 0x3C)) - 1) & *(_QWORD *)(a3 + 8) | ((v16 - 2) << ((4 * *(_BYTE *)(v12 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(_BYTE *)(v12 + 2)) & 0x3C)) | 0xFF);
  v20 = *a5;
  v21 = v18 - *a5;
  if (__OFSUB__(v18, *a5))
    goto LABEL_48;
  *a5 = v21;
  v22 = *i;
  v23 = *(unsigned __int8 *)(*i + 18);
  if (!v23)
  {
    v34 = *(unsigned __int16 *)(v22 + 16);
    v35 = (*(_QWORD *)(a3 + 8) >> 8) & 0xFLL;
    if (v35 >= v34)
    {
LABEL_42:
      __break(1u);
    }
    else
    {
      v36 = 1;
      if ((a6 & 1) != 0)
        v36 = 2;
      v37 = v36 - 1;
      if (v21 < v36 - 1)
        v37 = v21;
      v38 = v18 - (v20 + v37);
      if (v38 >= ~v35 + v34)
        v38 = ~v35 + v34;
      v39 = v38 + 1;
      if (v39 >= 5)
      {
        v41 = v39 & 3;
        if ((v39 & 3) == 0)
          v41 = 4;
        v42 = v39 - v41;
        v35 += v42;
        v40 = v21 - v42;
        do
        {
          v21 -= 4;
          v42 -= 4;
        }
        while (v42);
        *a5 = v21;
      }
      else
      {
        v40 = v21;
      }
      v21 = v35 << 8;
      v43 = v34 - v35;
      while (v40 >= v36)
      {
        *a5 = --v40;
        v21 += 256;
        if (!--v43)
          goto LABEL_42;
      }
    }
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFF0FFLL | v21;
    *(_QWORD *)(a3 + 16) = v22;
    return 1;
  }
  v24 = (*(_QWORD *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL;
  v25 = *(unsigned __int16 *)(v22 + 16);
  if (v24 >= v25)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v26 = *(_QWORD *)(v22 + 24 + 24 * ((*(_QWORD *)(a3 + 8) >> ((4 * v23 + 8) & 0x3C)) & 0xFLL));
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v27 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v26);
  swift_unknownObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_24;
  v28 = v24 + 1;
  if (v24 + 1 >= v25)
  {
LABEL_46:
    result = swift_unknownObjectRelease();
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v29 = *a5;
  v30 = v22 + 24 * v24 + 64;
  while (1)
  {
    v31 = *(_QWORD *)(v30 - 8);
    if ((a6 & 1) != 0)
      break;
    if (v29 < v31)
      goto LABEL_23;
LABEL_20:
    v29 -= v31;
    *a5 = v29;
    ++v28;
    v30 += 24;
    if (v25 == v28)
      goto LABEL_46;
  }
  if (v29 > v31)
    goto LABEL_20;
LABEL_23:
  *(_QWORD *)(a3 + 8) = (((-15 << ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C)) - 1) & *(_QWORD *)(a3 + 8) | (v28 << ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C))) & ((-256 << ((4 * *(_BYTE *)(v22 + 18)) & 0x3C)) | 0xFF);
  v32 = *(_QWORD *)(v30 - 16);
  swift_unknownObjectRetain();
  v33 = specialized Rope._Node.seekForward<A>(from:by:in:preferEnd:)(a3, a5, a6 & 1, v32);
  result = swift_unknownObjectRelease();
  if ((v33 & 1) != 0)
  {
LABEL_24:
    swift_unknownObjectRelease();
    return 1;
  }
LABEL_50:
  __break(1u);
  return result;
}

_QWORD *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(_QWORD *result, _QWORD *a2)
{
  if (__OFADD__(*result, *a2))
    __break(1u);
  else
    *result += *a2;
  return result;
}

_QWORD *closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply(_QWORD *a1)
{
  return partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(a1);
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[120];
  uint64_t v6;
  _BYTE v7[120];
  _BYTE v8[1040];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
    {
      v4 = a2 + 32;
      outlined init with copy of String.LocalizationValue.FormatArgument(a1 + 32, (uint64_t)v8);
      outlined init with copy of String.LocalizationValue.FormatArgument(v4, (uint64_t)v7);
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v8, (uint64_t)v5);
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v7, (uint64_t)&v6);
      __asm { BR              X9 }
    }
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v14 = a1;
    v15 = a2;
    while (1)
    {
      v28 = *(_QWORD *)(a1 + v3 + 48);
      v19 = *(_QWORD *)(a1 + v3 + 56);
      v26 = *(_QWORD *)(a1 + v3 + 64);
      v17 = *(_QWORD *)(a1 + v3 + 72);
      v29 = *(_QWORD *)(a1 + v3 + 80);
      v22 = *(_OWORD *)(a1 + v3 + 88);
      v4 = *(void **)(a1 + v3 + 104);
      v5 = *(_QWORD *)(a1 + v3 + 112);
      v24 = *(_QWORD *)(a1 + v3 + 120);
      v6 = *(_QWORD *)(a2 + v3 + 48);
      v18 = *(_QWORD *)(a2 + v3 + 56);
      v27 = *(_QWORD *)(a2 + v3 + 64);
      v7 = *(_QWORD *)(a2 + v3 + 80);
      v16 = *(_QWORD *)(a2 + v3 + 72);
      v21 = *(_OWORD *)(a2 + v3 + 88);
      v8 = *(void **)(a2 + v3 + 104);
      v20 = *(_QWORD *)(a2 + v3 + 112);
      v25 = *(_QWORD *)(a2 + v3 + 120);
      if ((*(_QWORD *)(a1 + v3 + 32) != *(_QWORD *)(a2 + v3 + 32)
         || *(_QWORD *)(a1 + v3 + 40) != *(_QWORD *)(a2 + v3 + 40))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        return 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v9 = v4;
      v10 = v5;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v11 = v8;
      swift_retain();
      swift_retain();
      if ((specialized static Array<A>.== infix(_:_:)(v28, v6) & 1) == 0)
        break;
      if (v19 == v18 && v26 == v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
          goto LABEL_24;
      }
      if (v29)
      {
        if (!v7 || (v17 != v16 || v29 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else if (v7)
      {
        goto LABEL_24;
      }
      v32 = v22;
      v30 = v21;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v32, (uint64_t)&v30) & 1) == 0)
        goto LABEL_24;
      *(_QWORD *)&v32 = v9;
      *((_QWORD *)&v32 + 1) = v10;
      v33 = v24;
      *(_QWORD *)&v30 = v11;
      *((_QWORD *)&v30 + 1) = v20;
      v31 = v25;
      v23 = specialized static URL.== infix(_:_:)((uint64_t)&v32, (uint64_t *)&v30);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
        return 0;
      v3 += 112;
      --v2;
      a1 = v14;
      a2 = v15;
      if (!v2)
        return 1;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  return 1;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  char v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 40);
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v5 = *((_QWORD *)v3 - 1);
      v6 = *((_QWORD *)v4 - 1);
      v7 = (char)*v4;
      if ((char)*v3 < 0)
      {
        result = 0;
        if ((v7 & 0x80000000) == 0 || v5 != v6)
          return result;
        if (qword_182064D40[*v3 & 0x7F] == qword_182064D40[*v4 & 0x7F])
        {
LABEL_5:
          swift_bridgeObjectRelease_n();
          goto LABEL_6;
        }
      }
      else
      {
        if (v7 < 0)
          return 0;
        if (qword_182064D40[(char)v5] == qword_182064D40[(char)v6])
          goto LABEL_5;
      }
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v9 & 1) == 0)
        return 0;
LABEL_6:
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (unsigned __int8 *)(a1 + 40);
  v5 = (unsigned __int8 *)(a2 + 40);
  do
  {
    v6 = v3;
    v7 = (*((_QWORD *)v4 - 1) != *((_QWORD *)v5 - 1)) | *v4 ^ *v5;
    if ((*((_QWORD *)v4 - 1) != *((_QWORD *)v5 - 1)) | (*v4 ^ *v5) & 1)
      break;
    --v3;
    v4 += 16;
    v5 += 16;
  }
  while (v6);
  return (v7 ^ 1) & 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  _BYTE v85[224];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD v116[28];

  v116[26] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = v2 - 1;
    v4 = (uint64_t *)(a1 + 64);
    v5 = (uint64_t *)(a2 + 64);
    while (1)
    {
      v6 = *(v4 - 4);
      v7 = *(v4 - 3);
      v9 = *(v4 - 2);
      v8 = *(v4 - 1);
      v10 = *v4;
      v11 = v4[1];
      v13 = v4[2];
      v12 = (void *)v4[3];
      v14 = v4[4];
      v15 = v4[5];
      v16 = v4[6];
      v17 = (void *)v4[7];
      v18 = v4[8];
      v19 = *(v5 - 4);
      v20 = *(v5 - 3);
      v21 = *(v5 - 2);
      v22 = *(v5 - 1);
      v23 = *v5;
      v24 = v5[1];
      v25 = v5[2];
      v26 = (void *)v5[3];
      v27 = v5[4];
      v28 = v5[5];
      v29 = v5[6];
      v30 = (void *)v5[7];
      v31 = v5[8];
      v116[27] = v3;
      v116[0] = v6;
      v116[1] = v7;
      v116[2] = v9;
      v109 = (void *)v8;
      v116[3] = v8;
      v116[4] = v10;
      v116[5] = v11;
      v116[6] = v13;
      v116[7] = v12;
      v110 = v14;
      v116[8] = v14;
      v116[9] = v15;
      v113 = v15;
      v112 = v16;
      v116[10] = v16;
      v116[11] = v17;
      v111 = v17;
      v116[12] = v18;
      v116[13] = v19;
      v116[14] = v20;
      v116[15] = v21;
      v116[16] = v22;
      v116[17] = v23;
      v116[18] = v24;
      v116[19] = v25;
      v116[20] = v26;
      v116[21] = v27;
      v116[22] = v28;
      v116[23] = v29;
      v116[24] = v30;
      v116[25] = v31;
      v108 = v3;
      switch(v18)
      {
        case 0uLL:
          if (v31)
            goto LABEL_59;
          v18 = 0;
          goto LABEL_27;
        case 1uLL:
          if (v31 != 1)
            goto LABEL_59;
          v18 = 1;
          goto LABEL_27;
        case 2uLL:
          if (v31 != 2)
            goto LABEL_59;
          goto LABEL_26;
        case 3uLL:
          if (v31 != 3)
            goto LABEL_59;
LABEL_26:
          outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29, (uint64_t)v30, v18);
LABEL_27:
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v18);
          goto LABEL_28;
        default:
          if (v31 < 4)
          {
LABEL_59:
            outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29, (uint64_t)v30, v31);
            outlined copy of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v18);
            outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
            return 0;
          }
          v95 = v18;
          v114 = 0;
          v115 = 0xE000000000000000;
          v103 = v24;
          v99 = v20;
          v93 = v10;
          v92 = v7;
          v91 = v6;
          v96 = v26;
          v104 = v25;
          v102 = v23;
          v101 = (void *)v22;
          v100 = v21;
          v98 = v19;
          v97 = v27;
          v107 = v28;
          v106 = v29;
          v105 = v30;
          v90 = v31;
          v94 = v9;
          if (v7)
          {
            v32 = (uint64_t)v26;
            outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29, (uint64_t)v30, v31);
            outlined copy of TermOfAddress._TermOfAddress(v6, v7, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
            outlined copy of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, v32, v97, v107, v106, (uint64_t)v105, v90);
            v33 = v6;
            v34 = v6;
            v35 = v94;
            v36 = v109;
            outlined copy of TermOfAddress._TermOfAddress(v34, v7, v94, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
            outlined copy of Locale.LanguageCode?(v33, v7);
            outlined copy of Locale.LanguageCode?(v10, v11);
            outlined copy of Locale.LanguageCode?(v110, v113);
            v37._countAndFlagsBits = v35;
            v37._object = v36;
            String.append(_:)(v37);
            if (!v11)
              goto LABEL_12;
LABEL_11:
            v38._countAndFlagsBits = 45;
            v38._object = (void *)0xE100000000000000;
            String.append(_:)(v38);
            v39._countAndFlagsBits = v13;
            v39._object = v12;
            String.append(_:)(v39);
            goto LABEL_12;
          }
          v52 = v25;
          v53 = (uint64_t)v26;
          outlined copy of TermOfAddress._TermOfAddress(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29, (uint64_t)v30, v31);
          outlined copy of TermOfAddress._TermOfAddress(v6, 0, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
          outlined copy of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v52, v53, v97, v107, v106, (uint64_t)v105, v90);
          outlined copy of TermOfAddress._TermOfAddress(v6, 0, v9, (uint64_t)v109, v10, v11, v13, (uint64_t)v12, v110, v113, v112, (uint64_t)v111, v95);
          outlined copy of Locale.LanguageCode?(v6, 0);
          outlined copy of Locale.LanguageCode?(v10, v11);
          outlined copy of Locale.LanguageCode?(v110, v113);
          if (v11)
            goto LABEL_11;
LABEL_12:
          v87 = v11;
          v88 = v13;
          v89 = (uint64_t)v12;
          if (v113)
          {
            v40._countAndFlagsBits = 95;
            v40._object = (void *)0xE100000000000000;
            String.append(_:)(v40);
            v41._countAndFlagsBits = v112;
            v41._object = v111;
            String.append(_:)(v41);
          }
          MEMORY[0x1E0C80A78](v114);
          LODWORD(v114) = 0;
          v86 = v42;
          v44 = v43;
          String.utf8CString.getter();
          v45 = uloc_addLikelySubtags();
          swift_release();
          if ((int)v114 <= 0 && v45 >= 1)
          {
            v85[v45] = 0;
            v46 = MEMORY[0x186DA4658](v85);
            if (v47)
            {
              MEMORY[0x1E0C80A78](v46);
              LODWORD(v114) = 0;
              String.utf8CString.getter();
              v48 = uloc_toLanguageTag();
              swift_release();
              if ((int)v114 > 0 || v48 <= 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v85[v48] = 0;
                v49 = MEMORY[0x186DA4658](v85);
                v51 = v50;
                swift_bridgeObjectRelease();
                if (v51)
                {
                  swift_bridgeObjectRelease();
                  v86 = v49;
                  v44 = v51;
                }
              }
            }
          }
          v54 = v87;
          outlined consume of Locale.LanguageCode?(v91, v92);
          outlined consume of Locale.LanguageCode?(v93, v54);
          outlined consume of Locale.LanguageCode?(v110, v113);
          v114 = 0;
          v115 = 0xE000000000000000;
          if (v99)
          {
            v55 = v100;
            v56 = v101;
            outlined copy of Locale.LanguageCode?(v98, v99);
            v57 = v103;
            outlined copy of Locale.LanguageCode?(v102, v103);
            outlined copy of Locale.LanguageCode?(v97, v107);
            v58._countAndFlagsBits = v55;
            v58._object = v56;
            String.append(_:)(v58);
            if (!v57)
              goto LABEL_37;
LABEL_36:
            v59._countAndFlagsBits = 45;
            v59._object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            v60._countAndFlagsBits = v104;
            v60._object = v96;
            String.append(_:)(v60);
            goto LABEL_37;
          }
          outlined copy of Locale.LanguageCode?(v98, 0);
          v78 = v103;
          outlined copy of Locale.LanguageCode?(v102, v103);
          outlined copy of Locale.LanguageCode?(v97, v107);
          if (v78)
            goto LABEL_36;
LABEL_37:
          if (v107)
          {
            v61._countAndFlagsBits = 95;
            v61._object = (void *)0xE100000000000000;
            String.append(_:)(v61);
            v62._countAndFlagsBits = v106;
            v62._object = v105;
            String.append(_:)(v62);
          }
          MEMORY[0x1E0C80A78](v114);
          LODWORD(v114) = 0;
          v64 = v63;
          v66 = v65;
          String.utf8CString.getter();
          v67 = uloc_addLikelySubtags();
          swift_release();
          if ((int)v114 > 0)
            goto LABEL_51;
          if (v67 < 1)
            goto LABEL_51;
          v85[v67] = 0;
          v68 = MEMORY[0x186DA4658](v85);
          if (!v69)
            goto LABEL_51;
          MEMORY[0x1E0C80A78](v68);
          LODWORD(v114) = 0;
          String.utf8CString.getter();
          v70 = uloc_toLanguageTag();
          swift_release();
          if ((int)v114 > 0 || v70 <= 0)
          {
            swift_bridgeObjectRelease();
LABEL_51:
            v74 = v89;
            v76 = v88;
            v77 = v87;
            v75 = v86;
            goto LABEL_52;
          }
          v85[v70] = 0;
          v71 = MEMORY[0x186DA4658](v85);
          v73 = v72;
          swift_bridgeObjectRelease();
          v74 = v89;
          v75 = v86;
          if (v73)
          {
            swift_bridgeObjectRelease();
            v64 = v71;
            v66 = v73;
          }
          v76 = v88;
          v77 = v87;
LABEL_52:
          outlined consume of Locale.LanguageCode?(v98, v99);
          outlined consume of Locale.LanguageCode?(v102, v103);
          outlined consume of Locale.LanguageCode?(v97, v107);
          if (v75 == v64 && v44 == v66)
          {
            swift_bridgeObjectRelease_n();
            v79 = v74;
          }
          else
          {
            v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v79 = v74;
            if ((v80 & 1) == 0)
            {
              outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
              outlined consume of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, (uint64_t)v96, v97, v107, v106, (uint64_t)v105, v90);
              outlined consume of TermOfAddress._TermOfAddress(v91, v92, v94, (uint64_t)v109, v93, v77, v76, v74, v110, v113, v112, (uint64_t)v111, v95);
              return 0;
            }
          }
          v81 = v95;
          v82 = v90;
          v83 = specialized static Array<A>.== infix(_:_:)(v95, v90);
          outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v116);
          outlined consume of TermOfAddress._TermOfAddress(v98, v99, v100, (uint64_t)v101, v102, v103, v104, (uint64_t)v96, v97, v107, v106, (uint64_t)v105, v82);
          outlined consume of TermOfAddress._TermOfAddress(v91, v92, v94, (uint64_t)v109, v93, v77, v76, v79, v110, v113, v112, (uint64_t)v111, v81);
          if ((v83 & 1) == 0)
            return 0;
LABEL_28:
          if (!v108)
            return 1;
          v4 += 13;
          v5 += 13;
          v3 = v108 - 1;
          break;
      }
    }
  }
  return 0;
}

{
  uint8x8_t v2;
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  int8x16_t v17;
  uint64x2_t v18;
  int16x8_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  _BYTE v38[5];
  uint64_t v39;
  uint64_t v40;
  unsigned __int32 v41;
  char v42;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == *(_QWORD *)(a2 + 16))
  {
    if (!v4 || a1 == a2)
      return 1;
    v5 = 0;
    v22 = a1;
    v23 = a2;
    while (1)
    {
      v30 = v4;
      v6 = *(_BYTE *)(a1 + v5 + 48);
      v7 = *(_BYTE *)(a1 + v5 + 49);
      v8 = *(_BYTE *)(a1 + v5 + 50);
      v31 = *(_QWORD *)(a1 + v5 + 56);
      v2.i32[0] = *(_DWORD *)(a1 + v5 + 64);
      v9 = *(_BYTE *)(a1 + v5 + 68);
      v34 = *(_QWORD *)(a1 + v5 + 80);
      v28 = *(unsigned __int8 *)(a1 + v5 + 92);
      v29 = *(_QWORD *)(a1 + v5 + 72);
      v27 = *(unsigned int *)(a1 + v5 + 88);
      v10 = *(_BYTE *)(a2 + v5 + 48);
      v11 = *(_BYTE *)(a2 + v5 + 49);
      v12 = *(_BYTE *)(a2 + v5 + 50);
      v32 = *(_QWORD *)(a2 + v5 + 56);
      v3.i32[0] = *(_DWORD *)(a2 + v5 + 64);
      v13 = *(_BYTE *)(a2 + v5 + 68);
      v33 = *(_QWORD *)(a2 + v5 + 80);
      v25 = *(unsigned __int8 *)(a2 + v5 + 92);
      v26 = *(_QWORD *)(a2 + v5 + 72);
      v24 = *(unsigned int *)(a2 + v5 + 88);
      if (*(_QWORD *)(a1 + v5 + 32) != *(_QWORD *)(a2 + v5 + 32)
        || *(_QWORD *)(a1 + v5 + 40) != *(_QWORD *)(a2 + v5 + 40))
      {
        v14 = v5;
        v15 = *(_BYTE *)(a2 + v5 + 49);
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v11 = v15;
        v5 = v14;
        if ((v16 & 1) == 0)
          break;
      }
      LOBYTE(v39) = v6;
      BYTE1(v39) = v7;
      BYTE2(v39) = v8;
      v40 = v31;
      v41 = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v42 = v9;
      LOBYTE(v35) = v10;
      HIBYTE(v35) = v11;
      v36 = v12;
      v37 = v32;
      *(_DWORD *)v38 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v38[4] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v39, (unsigned __int8 *)&v35) & 1) == 0)
        goto LABEL_20;
      if (v34)
      {
        v39 = v29;
        v40 = v34;
        v41 = v27;
        v42 = (v27 | (unint64_t)(v28 << 32)) >> 32;
        if (!v33)
        {
          swift_bridgeObjectRetain();
LABEL_19:
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        v17.i64[0] = 0xFFFFFFFFFFLL;
        v17.i64[1] = 0xFFFFFFFFFFLL;
        v18 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v24 | (unint64_t)(v25 << 32)), v17);
        v19 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_182064D90), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_182064D80));
        *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
        v35 = v26;
        v36 = BYTE2(v26);
        v37 = v33;
        v38[0] = v24;
        *(_DWORD *)&v38[1] = vmovn_s16(v19).u32[0];
        swift_bridgeObjectRetain_n();
        v20 = specialized static Morphology.== infix(_:_:)((unsigned __int8 *)&v39, (unsigned __int8 *)&v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
          return 0;
      }
      else
      {
        if (v33)
          goto LABEL_19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v5 += 64;
      v4 = v30 - 1;
      a1 = v22;
      a2 = v23;
      if (v30 == 1)
        return 1;
    }
  }
  return 0;
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a2 + 56);
    for (i = (_QWORD *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 1) == *(v3 - 1) && *i == *v3;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1E0F3E588, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), a7, (uint64_t)&unk_1E0F3E5B0, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  __int128 v15;

  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = *a1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a6 + 56))(&v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a3, a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  return String.init<A>(_:)();
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1E0F3E538, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), a7, (uint64_t)&unk_1E0F3E560, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
}

_OWORD *String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(char *, char *, uint64_t)@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(uint64_t *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v36;
  _QWORD v38[2];
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  void (*v41)(char *, __n128);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52;

  v44 = a9;
  v45 = a8;
  v42 = a7;
  v48 = a5;
  v49 = a6;
  v50 = a2;
  v39 = a1;
  v46 = a10;
  v47 = a11;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(void (**)(char *, __n128))(v18 + 16);
  v41(v22, v21);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v40(v16, a1, a3);
  v23 = (*(unsigned __int8 *)(v18 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v24 = *(unsigned __int8 *)(v14 + 80);
  v43 = v14;
  v25 = (v19 + v24 + v23) & ~v24;
  v38[1] = v25 + v15;
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = a3;
  *((_QWORD *)v26 + 3) = a4;
  v27 = v49;
  *((_QWORD *)v26 + 4) = v48;
  *((_QWORD *)v26 + 5) = v27;
  v42 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v42(&v26[v23], v22, a4);
  v38[0] = *(_QWORD *)(v14 + 32);
  ((void (*)(char *, char *, uint64_t))v38[0])(&v26[v25], v16, a3);
  v28 = v44;
  *v44 = v45;
  v28[1] = v26;
  ((void (*)(char *, uint64_t, uint64_t))v41)(v22, v50, a4);
  v30 = v39;
  v29 = (void (*)(uint64_t *, uint64_t, uint64_t))v40;
  v40(v16, v39, a3);
  v31 = (char *)swift_allocObject();
  *((_QWORD *)v31 + 2) = a3;
  *((_QWORD *)v31 + 3) = a4;
  v32 = v49;
  *((_QWORD *)v31 + 4) = v48;
  *((_QWORD *)v31 + 5) = v32;
  v33 = v22;
  v34 = (void (*)(uint64_t *, uint64_t, uint64_t))v42;
  v42(&v31[v23], v33, a4);
  ((void (*)(char *, char *, uint64_t))v38[0])(&v31[v25], v16, a3);
  v28[2] = v47;
  v28[3] = v31;
  v28[7] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28 + 4);
  v29(boxed_opaque_existential_1, v30, a3);
  v52 = a4;
  v36 = __swift_allocate_boxed_opaque_existential_1(v51);
  v34(v36, v50, a4);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, a3);
  return outlined init with take of Any(v51, (_OWORD *)v28 + 4);
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueMetadata *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v19 = a5;
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v18 - v15;
  v20 = *a1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a4 + 56))(&v20, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a3);
  return AttributedString.init<A>(_:)((uint64_t)v16, AssociatedTypeWitness, v19, a6);
}

uint64_t closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char v18;
  char v19;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  uint64_t v29[4];

  v27 = a3;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - v10;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v16 & 1) != 0)
  {
    v17(v11, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, a5);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
    v19 = 0;
    if ((v18 & 1) == 0)
      return v19 & 1;
  }
  else
  {
    v17(v11, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v29[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, v27, a4);
  v21 = (_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = __swift_project_boxed_opaque_existential_1(v21, v22);
  v28[3] = v22;
  v24 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v24, v23, v22);
  v19 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v29, (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a2) & 1;
}

uint64_t openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v15;
  _BYTE v17[32];

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v17[-v8];
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v9, 0, 1, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v9, a3);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, a3);
  }
  else
  {
    v14(v9, 1, 1, a3);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t String.LocalizationValue.FormatArgument.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_1;
  __int128 v8;
  uint64_t v9;
  char v10;

  v4 = a1[3];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v9 = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  v10 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v8, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t outlined init with take of String.LocalizationValue.FormatArgument.Storage(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a1 + 112);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  return a2;
}

_QWORD *String.LocalizationValue.FormatArgument.init(_:_:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 112) = 1;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.init<A, B>(_:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  __int128 v24[7];
  char v25;

  v23 = a7;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))(v21, a1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)((uint64_t)v21, (uint64_t)v15, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1E0F3E588, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), v24, (uint64_t)&unk_1E0F3E5B0, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  v25 = 2;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v24, v23);
}

{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  __int128 v24[7];
  char v25;

  v23 = a7;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))(v21, a1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)((uint64_t)v21, (uint64_t)v15, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t))&unk_1E0F3E538, (uint64_t)partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), v24, (uint64_t)&unk_1E0F3E560, (uint64_t)partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  v25 = 3;
  return outlined init with take of String.LocalizationValue.FormatArgument.Storage(v24, v23);
}

__n128 String.LocalizationValue.FormatArgument.init(resource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = v4;
  result = *(__n128 *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v6;
  *(_BYTE *)(a2 + 112) = 4;
  return result;
}

__n128 String.LocalizationValue.FormatArgument.init(resourceList:format:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 1);
  a3->n128_u64[0] = a1;
  a3->n128_u8[8] = v3;
  a3->n128_u8[9] = v4;
  result = *(__n128 *)(a2 + 8);
  a3[1] = result;
  a3[7].n128_u8[0] = 5;
  return result;
}

_BYTE *String.LocalizationValue.FormatArgument.init(placeholder:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  a2[112] = 6;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v1, (uint64_t)&v22);
  if (v28 == 3)
  {
    v18 = v24;
    v19 = v25;
    v20 = v26;
    v21 = v27;
    v16 = v22;
    v17 = v23;
    v7 = *((_QWORD *)&v25 + 1);
    v8 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    v15 = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, v8, v7);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  if (v28 == 2)
  {
    v18 = v24;
    v19 = v25;
    v20 = v26;
    v21 = v27;
    v16 = v22;
    v17 = v23;
    v10 = *((_QWORD *)&v25 + 1);
    v11 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v25 + 1));
    v15 = v10;
    v12 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v12, v11, v10);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  if (v28)
  {
    v13 = MEMORY[0x1E0DEE9E8];
    *a1 = MEMORY[0x1E0DEE9E0];
    a1[1] = v13;
    return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v22);
  }
  else
  {
    outlined init with take of Any(&v22, &v16);
    v3 = *((_QWORD *)&v17 + 1);
    v4 = __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
    v15 = v3;
    v5 = __swift_allocate_boxed_opaque_existential_1(v14);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
    closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()((uint64_t)v14, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }
}

uint64_t closure #1 in String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  ValueMetadata *v34;
  unint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
  {
    v4 = MEMORY[0x1E0DEE9E0];
    v5 = MEMORY[0x1E0DEE9E8];
    v6 = (int)v39;
LABEL_5:
    *a2 = v4;
    a2[1] = v5;
    v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    v32 = v6;
    LODWORD(v33) = 0;
    BYTE4(v33) = 1;
    v36 = xmmword_18205FD60;
LABEL_19:
    v37 = 1;
    v38 = 0;
    v15 = 0x8000000182305790;
    v16 = 0xD00000000000002CLL;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_4:
    v4 = MEMORY[0x1E0DEE9E0];
    v5 = MEMORY[0x1E0DEE9E8];
    v6 = v39;
    goto LABEL_5;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = MEMORY[0x1E0DEE9E0];
    v8 = MEMORY[0x1E0DEE9E8];
    v9 = v39;
LABEL_10:
    *a2 = v7;
    a2[1] = v8;
    v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    v32 = v9;
    LODWORD(v33) = 0;
    BYTE4(v33) = 0;
LABEL_18:
    v36 = xmmword_18205FD60;
    goto LABEL_19;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_9:
    v7 = MEMORY[0x1E0DEE9E0];
    v8 = MEMORY[0x1E0DEE9E8];
    v9 = v39;
    goto LABEL_10;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = MEMORY[0x1E0DEE9E8];
    v11 = *(float *)&v39;
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v10;
    v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(double *)&v32 = v11;
LABEL_16:
    *((_QWORD *)&v32 + 1) = 0;
    LODWORD(v33) = 0;
    v14 = 2;
LABEL_17:
    BYTE4(v33) = v14;
    goto LABEL_18;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0
    || (outlined init with copy of Any(a1, (uint64_t)&v32), (swift_dynamicCast() & 1) != 0))
  {
    v12 = MEMORY[0x1E0DEE9E8];
    v13 = v39;
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v12;
    v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    *(_QWORD *)&v32 = v13;
    goto LABEL_16;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  type metadata accessor for NSDecimal(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v18 = v40;
    v19 = MEMORY[0x1E0DEE9E8];
    v20 = v39;
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v19;
    v34 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v35 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value();
    v32 = v20;
    LODWORD(v33) = v18;
    v14 = 3;
    goto LABEL_17;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
    goto LABEL_4;
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if (swift_dynamicCast())
    goto LABEL_9;
  outlined init with copy of Any(a1, (uint64_t)&v32);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v21 = v39;
    v22 = MEMORY[0x1E0DEE9E8];
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v22;
    v34 = &type metadata for Date;
    v35 = lazy protocol witness table accessor for type Date and conformance Date();
    *(_QWORD *)&v32 = v21;
    v36 = xmmword_18205FD60;
    v37 = 1;
    v38 = 0;
    v16 = 0xD000000000000029;
    v23 = "Foundation.LocalizedDateArgumentAttribute";
LABEL_31:
    v15 = (unint64_t)(v23 - 32) | 0x8000000000000000;
    return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v32, v16, v15);
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v25 = v39;
    v26 = MEMORY[0x1E0DEE9E8];
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v26;
    v34 = (ValueMetadata *)v24;
    v35 = lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>, &demangling cache variable for type metadata for Range<Date>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date and conformance Date, MEMORY[0x1E0DEB888]);
    v32 = v25;
    v36 = xmmword_18205FD60;
    v37 = 1;
    v38 = 0;
    v16 = 0xD000000000000031;
    v23 = "Foundation.LocalizedDateIntervalArgumentAttribute";
    goto LABEL_31;
  }
  outlined init with copy of Any(a1, (uint64_t)&v32);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v31 = v39;
    v27 = v40;
    v28 = MEMORY[0x1E0DEE9E8];
    *a2 = MEMORY[0x1E0DEE9E0];
    a2[1] = v28;
    v34 = &type metadata for URL;
    v29 = lazy protocol witness table accessor for type URL and conformance URL();
    v32 = v31;
    v35 = v29;
    v33 = v27;
    v36 = xmmword_18205FD60;
    v37 = 1;
    v38 = 0;
    v16 = 0xD000000000000028;
    v23 = "Foundation.LocalizedURLArgumentAttribute";
    goto LABEL_31;
  }
  v30 = MEMORY[0x1E0DEE9E8];
  *a2 = MEMORY[0x1E0DEE9E0];
  a2[1] = v30;
  return result;
}

void String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[232];

  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_181A146D8()
{
  uint64_t v0;
  char v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[8];
  __int128 v6;

  outlined init with take of Any(&v6, v5);
  outlined init with copy of Any((uint64_t)v5, (uint64_t)&v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  swift_dynamicCast();
  getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v0, v1 & 1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return swift_release();
}

void sub_181A15028()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A15074);
}

uint64_t getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD v14[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 254)
  {
    if ((a2 & 1) != 0)
    {
      String.LocalizationValue.FormatArgument.buildAttributeContainerForArgument()(v14);
      v8 = v14[0];
      v9 = v14[1];
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v14[0];
      *(_QWORD *)(a1 + 24) = v9;
      v12 = *(_BYTE *)(a1 + 32);
      *(_BYTE *)(a1 + 32) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??(v10, v11, v12);
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 32) = -1;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = -1;
    }
  }
  else
  {
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = v5;
    *(_BYTE *)(a3 + 16) = v6;
  }
  return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??(v4, v5, v6);
}

void static String.LocalizationValue.FormatArgument.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  uint64_t v4;

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v3);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a2, (uint64_t)&v4);
  __asm { BR              X10 }
}

BOOL sub_181A15240()
{
  _OWORD *v0;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8[33];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[29];
  uint64_t v14[40];
  _BYTE v15[1408];

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v15, (uint64_t)v13);
  if (v15[232])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
    return 0;
  }
  outlined init with take of Any(v13, &v11);
  outlined init with take of Any(v0, &v9);
  v2 = v12;
  v3 = __swift_project_boxed_opaque_existential_1(&v11, v12);
  v8[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  v5 = v10;
  v6 = __swift_project_boxed_opaque_existential_1(&v9, v10);
  v14[3] = v5;
  v7 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v7, v6, v5);
  LOBYTE(v5) = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v8, (uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v15);
  return (v5 & 1) != 0;
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  __int128 v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  _DWORD *v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  __int16 v68;
  int v69;
  int v70;
  _DWORD *v71;
  __int128 v72;
  char v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  _DWORD *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void (*v107)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  char v112;
  __int16 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void (*v128)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  _WORD *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  void (*v143)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  char v149;
  void (*v150)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  uint64_t v157;
  uint64_t v158;
  _WORD *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  _DWORD *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _OWORD v204[2];
  __int128 v205[3];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  _OWORD v209[2];
  __int128 v210[3];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _OWORD v214[2];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[2];
  uint64_t v222;
  _OWORD v223[2];
  _OWORD v224[2];
  _OWORD v225[2];
  _BYTE v226[32];
  _BYTE v227[48];
  __int128 v228;
  __int128 v229;
  char v230;

  v197 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1E0C80A78](v5);
  v170 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  v168 = *(_QWORD *)(v7 - 8);
  v169 = v7;
  MEMORY[0x1E0C80A78](v7);
  v165 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1E0C80A78](v9);
  v179 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  v177 = *(_QWORD *)(v11 - 8);
  v178 = v11;
  MEMORY[0x1E0C80A78](v11);
  v167 = (uint64_t)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1E0C80A78](v13);
  v189 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSDecimal.FormatStyle(0);
  v187 = *(_QWORD *)(v15 - 8);
  v188 = v15;
  MEMORY[0x1E0C80A78](v15);
  v175 = (uint64_t)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?);
  MEMORY[0x1E0C80A78](v17);
  v176 = (char *)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  v173 = *(_QWORD *)(v19 - 8);
  v174 = v19;
  MEMORY[0x1E0C80A78](v19);
  v166 = (uint64_t)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
  MEMORY[0x1E0C80A78](v21);
  v186 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  v184 = *(_QWORD *)(v23 - 8);
  v185 = v23;
  MEMORY[0x1E0C80A78](v23);
  v172 = (uint64_t)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v25);
  *(_QWORD *)&v193 = (char *)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v190 = *(_QWORD *)(v192 - 8);
  MEMORY[0x1E0C80A78](v192);
  v181 = (uint64_t)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?);
  MEMORY[0x1E0C80A78](v28);
  v183 = (char *)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  v180 = *(_QWORD *)(v182 - 8);
  MEMORY[0x1E0C80A78](v182);
  v171 = (uint64_t)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
  MEMORY[0x1E0C80A78](v31);
  *(_QWORD *)&v191 = (char *)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v165 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v165 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v195 = *a2;
  *(_QWORD *)&v194 = a2[1];
  v196 = a1;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v226);
  switch(v230)
  {
    case 0:
      outlined init with take of Any(v226, v210);
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_3;
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_12;
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
LABEL_3:
        swift_unknownObjectRelease();
        v44 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *v197 = v44;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
LABEL_12:
        swift_unknownObjectRelease();
        v61 = *(_QWORD *)&v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *(_QWORD *)v197 = v61;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_unknownObjectRelease();
        v117 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *v197 = v117;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_65;
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_65;
      outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_unknownObjectRelease();
        v161 = v205[0];
        outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        *(_OWORD *)v197 = v161;
        type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        outlined init with copy of Any((uint64_t)v210, (uint64_t)&v215);
        if ((swift_dynamicCast() & 1) != 0)
        {
LABEL_65:
          swift_unknownObjectRelease();
          v163 = *(_QWORD *)&v205[0];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
          *(_QWORD *)v197 = v163;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        else
        {
          v164 = v196;
          outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
          *(_QWORD *)&v205[0] = v195;
          *((_QWORD *)&v205[0] + 1) = v194;
          String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v164);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        }
      }
    case 2:
      v224[0] = *(_OWORD *)v227;
      v224[1] = *(_OWORD *)&v227[16];
      v225[0] = *(_OWORD *)&v227[32];
      v225[1] = v228;
      v223[0] = *(_OWORD *)v226;
      v223[1] = *(_OWORD *)&v226[16];
      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v52 = *(_QWORD *)&v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v222);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          v202 = v219;
          v203 = v220;
          v204[0] = v221[0];
          *(_OWORD *)((char *)v204 + 10) = *(_OWORD *)((char *)v221 + 10);
          v198 = v215;
          v199 = v216;
          v200 = v217;
          v201 = v218;
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          v207 = v202;
          v208 = v203;
          v209[0] = v204[0];
          *(_OWORD *)((char *)v209 + 10) = *(_OWORD *)((char *)v204 + 10);
          v205[0] = v198;
          v205[1] = v199;
          v205[2] = v200;
          v206 = v201;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v205);
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v205, v210);
          v53 = v197;
          *(_QWORD *)v197 = v52;
          v54 = v213;
          *(_OWORD *)(v53 + 18) = v212;
          *(_OWORD *)(v53 + 22) = v54;
          *(_OWORD *)(v53 + 26) = v214[0];
          *(_OWORD *)((char *)v53 + 114) = *(_OWORD *)((char *)v214 + 10);
          v55 = v210[1];
          *(_OWORD *)(v53 + 2) = v210[0];
          *(_OWORD *)(v53 + 6) = v55;
          v56 = v210[2];
          v57 = v211;
LABEL_38:
          *(_OWORD *)(v53 + 10) = v56;
          *(_OWORD *)(v53 + 14) = v57;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          v77 = v205[0];
          v78 = BYTE1(v205[0]);
          v79 = BYTE2(v205[0]);
          v80 = BYTE3(v205[0]);
          v81 = BYTE4(v205[0]);
          v82 = *((_QWORD *)&v205[0] + 1);
          v83 = *(_QWORD *)&v205[2];
          v195 = v205[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          LOBYTE(v210[0]) = v77;
          BYTE1(v210[0]) = v78;
          BYTE2(v210[0]) = v79;
          BYTE3(v210[0]) = v80;
          BYTE4(v210[0]) = v81;
          *((_QWORD *)&v210[0] + 1) = v82;
          v210[1] = v195;
          *(_QWORD *)&v210[2] = v83;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_((uint64_t)v210);
LABEL_37:
          outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v210, &v215);
          v53 = v197;
          *(_QWORD *)v197 = v52;
          v115 = v220;
          *(_OWORD *)(v53 + 18) = v219;
          *(_OWORD *)(v53 + 22) = v115;
          *(_OWORD *)(v53 + 26) = v221[0];
          *(_OWORD *)((char *)v53 + 114) = *(_OWORD *)((char *)v221 + 10);
          v116 = v216;
          *(_OWORD *)(v53 + 2) = v215;
          *(_OWORD *)(v53 + 6) = v116;
          v56 = v217;
          v57 = v218;
          goto LABEL_38;
        }
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          v92 = v206;
          v194 = v205[0];
          v195 = v205[2];
          v193 = v205[1];
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          v210[0] = v194;
          v210[1] = v193;
          v210[2] = v195;
          v211 = v92;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v210);
          goto LABEL_37;
        }
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v198);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          v112 = v205[0];
          v113 = *(_WORD *)((char *)v205 + 1);
          v114 = *((_QWORD *)&v205[2] + 1);
          v194 = *(__int128 *)((char *)&v205[1] + 8);
          v195 = *(__int128 *)((char *)v205 + 8);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          LOBYTE(v210[0]) = v112;
          *(_WORD *)((char *)v210 + 1) = v113;
          *(__int128 *)((char *)v210 + 8) = v195;
          *(__int128 *)((char *)&v210[1] + 8) = v194;
          *((_QWORD *)&v210[2] + 1) = v114;
          _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)v210);
          goto LABEL_37;
        }
        goto LABEL_62;
      }
      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v62 = v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)v210);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_unknownObjectRelease();
          v63 = v218;
          v64 = *((_QWORD *)&v218 + 1);
          v65 = *((_QWORD *)&v219 + 1);
          v66 = v220;
          v67 = BYTE1(v220);
          LODWORD(v195) = WORD3(v220);
          *(_QWORD *)&v194 = *((_QWORD *)&v220 + 1);
          v68 = v221[0];
          v192 = v216;
          v193 = v215;
          v191 = v217;
          v69 = v219;
          v70 = *(_DWORD *)((char *)&v220 + 2);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          v71 = v197;
          *(_OWORD *)v197 = v62;
          v72 = v192;
          *((_OWORD *)v71 + 1) = v193;
          *((_OWORD *)v71 + 2) = v72;
          *((_OWORD *)v71 + 3) = v191;
          *((_BYTE *)v71 + 64) = v63;
          *((_QWORD *)v71 + 9) = v64;
          v71[20] = v69;
          *((_QWORD *)v71 + 11) = v65;
          *((_BYTE *)v71 + 96) = v66;
          *((_BYTE *)v71 + 97) = v67;
          *(_DWORD *)((char *)v71 + 98) = v70;
          *((_WORD *)v71 + 51) = v195;
          *((_QWORD *)v71 + 13) = v194;
          *((_WORD *)v71 + 56) = v68;
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
      }
      outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        *(_QWORD *)&v193 = *(_QWORD *)&v210[0];
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        v73 = swift_dynamicCast();
        v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
        if ((v73 & 1) != 0)
        {
          v74(v39, 0, 1, v40);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          outlined init with take of LocalePreferences?((uint64_t)v39, (uint64_t)v43, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
          v76 = (uint64_t)v197 + *(int *)(v75 + 48);
          *(_QWORD *)v197 = v193;
          outlined init with take of LocalePreferences?((uint64_t)v43, v76, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
LABEL_56:
          swift_storeEnumTagMultiPayload();
          type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
          return swift_storeEnumTagMultiPayload();
        }
        v93 = v193;
        v74(v39, 1, 1, v40);
        outlined destroy of Any?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>?);
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        v94 = v191;
        v95 = swift_dynamicCast();
        v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
        if ((v95 & 1) != 0)
        {
          v96(v94, 0, 1, v33);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          outlined init with take of LocalePreferences?(v94, (uint64_t)v36, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          v97 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                       + 48);
          v98 = v197;
          *(_QWORD *)v197 = v93;
          outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)v98 + v97, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
          goto LABEL_56;
        }
        v96(v94, 1, 1, v33);
        outlined destroy of Any?(v94, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency?);
        outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
        v125 = v182;
        v126 = (uint64_t)v183;
        v127 = swift_dynamicCast();
        v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56);
        if ((v127 & 1) != 0)
        {
          v129 = v93;
          v128(v126, 0, 1, v125);
          swift_unknownObjectRelease();
          outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
          outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
          v130 = v171;
          outlined init with take of LocalePreferences?(v126, v171, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          v131 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                        + 48);
          v132 = v197;
          *(_QWORD *)v197 = v129;
          outlined init with take of LocalePreferences?(v130, (uint64_t)v132 + v131, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
          goto LABEL_56;
        }
        v128(v126, 1, 1, v125);
        v147 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent?;
      }
      else
      {
        outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v84 = *(_QWORD *)&v210[0];
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v85 = v193;
          v86 = v192;
          v87 = swift_dynamicCast();
          v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56);
          if ((v87 & 1) != 0)
          {
            v88(v85, 0, 1, v86);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v89 = v181;
            outlined init with take of LocalePreferences?(v85, v181, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            v90 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                         + 48);
            v91 = v197;
            *(_QWORD *)v197 = v84;
            outlined init with take of LocalePreferences?(v89, (uint64_t)v91 + v90, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          v88(v85, 1, 1, v86);
          outlined destroy of Any?(v85, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v119 = v185;
          v118 = (uint64_t)v186;
          v120 = swift_dynamicCast();
          v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
          if ((v120 & 1) != 0)
          {
            v121(v118, 0, 1, v119);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v122 = v172;
            outlined init with take of LocalePreferences?(v118, v172, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            v123 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                          + 48);
            v124 = v197;
            *(_QWORD *)v197 = v84;
            outlined init with take of LocalePreferences?(v122, (uint64_t)v124 + v123, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          v121(v118, 1, 1, v119);
          outlined destroy of Any?(v118, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v126 = (uint64_t)v176;
          v141 = v174;
          v142 = swift_dynamicCast();
          v143 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
          if ((v142 & 1) != 0)
          {
            v143(v126, 0, 1, v141);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v144 = v166;
            outlined init with take of LocalePreferences?(v126, v166, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
            v145 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                          + 48);
            v146 = v197;
            *(_QWORD *)v197 = v84;
            outlined init with take of LocalePreferences?(v144, (uint64_t)v146 + v145, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
            type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          v143(v126, 1, 1, v141);
          v147 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent?;
        }
        else
        {
          outlined init with copy of Any((uint64_t)v224, (uint64_t)&v215);
          type metadata accessor for NSDecimal(0);
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_62;
          LODWORD(v190) = v210[0];
          v99 = WORD2(v210[0]);
          LODWORD(v192) = WORD3(v210[0]);
          v100 = WORD4(v210[0]);
          LODWORD(v193) = WORD5(v210[0]);
          v101 = WORD6(v210[0]);
          v102 = HIWORD(v210[0]);
          LODWORD(v191) = LOWORD(v210[1]);
          v103 = WORD1(v210[1]);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v105 = v188;
          v104 = (uint64_t)v189;
          v106 = swift_dynamicCast();
          v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56);
          if ((v106 & 1) != 0)
          {
            v107(v104, 0, 1, v105);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v108 = v175;
            outlined init with take of ICUNumberFormatter.Signature(v104, v175, type metadata accessor for NSDecimal.FormatStyle);
            v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            v110 = v197;
            v111 = (uint64_t)v197 + *(int *)(v109 + 48);
            *v197 = v190;
            v110[2] = v99;
            v110[3] = v192;
            v110[4] = v100;
            v110[5] = v193;
            v110[6] = v101;
            v110[7] = v102;
            v110[8] = v191;
            v110[9] = v103;
            outlined init with take of ICUNumberFormatter.Signature(v108, v111, type metadata accessor for NSDecimal.FormatStyle);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          LODWORD(v183) = v99;
          LODWORD(v184) = v100;
          LODWORD(v185) = v101;
          LODWORD(v186) = v102;
          LODWORD(v187) = v103;
          v107(v104, 1, 1, v105);
          outlined destroy of Any?(v104, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v134 = v178;
          v133 = (uint64_t)v179;
          v135 = swift_dynamicCast();
          v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56);
          if ((v135 & 1) != 0)
          {
            v136(v133, 0, 1, v134);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v137 = v167;
            outlined init with take of ICUNumberFormatter.Signature(v133, v167, type metadata accessor for NSDecimal.FormatStyle.Currency);
            v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            v139 = v197;
            v140 = (uint64_t)v197 + *(int *)(v138 + 48);
            *v197 = v190;
            v139[2] = (_WORD)v183;
            v139[3] = v192;
            v139[4] = v184;
            v139[5] = v193;
            v139[6] = v185;
            v139[7] = (_WORD)v186;
            v139[8] = v191;
            v139[9] = v187;
            outlined init with take of ICUNumberFormatter.Signature(v137, v140, type metadata accessor for NSDecimal.FormatStyle.Currency);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          v136(v133, 1, 1, v134);
          outlined destroy of Any?(v133, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
          outlined init with copy of Any((uint64_t)v225, (uint64_t)&v215);
          v148 = v169;
          v126 = (uint64_t)v170;
          v149 = swift_dynamicCast();
          v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56);
          v151 = v187;
          v152 = (__int16)v186;
          v153 = v185;
          v154 = v193;
          v155 = v184;
          v156 = v192;
          if ((v149 & 1) != 0)
          {
            v150(v126, 0, 1, v148);
            swift_unknownObjectRelease();
            outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
            outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
            v157 = v165;
            outlined init with take of ICUNumberFormatter.Signature(v126, v165, type metadata accessor for NSDecimal.FormatStyle.Percent);
            v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
            v159 = v197;
            v160 = (uint64_t)v197 + *(int *)(v158 + 48);
            *v197 = v190;
            v159[2] = (_WORD)v183;
            v159[3] = v156;
            v159[4] = v155;
            v159[5] = v154;
            v159[6] = v153;
            v159[7] = v152;
            v159[8] = v191;
            v159[9] = v151;
            outlined init with take of ICUNumberFormatter.Signature(v157, v160, type metadata accessor for NSDecimal.FormatStyle.Percent);
            type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
            goto LABEL_56;
          }
          v150(v126, 1, 1, v148);
          v147 = &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?;
        }
      }
      outlined destroy of Any?(v126, v147);
LABEL_62:
      v162 = v196;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
      *(_QWORD *)&v210[0] = v195;
      *((_QWORD *)&v210[0] + 1) = v194;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v162);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)v223);
    case 4:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      v47 = *(_QWORD *)&v226[24];
      v48 = *(_QWORD *)v227;
      v49 = *(_QWORD *)&v227[40];
      v50 = v197;
      *(_QWORD *)v197 = *(_QWORD *)v226;
      *(_OWORD *)(v50 + 2) = *(_OWORD *)&v226[8];
      *((_QWORD *)v50 + 3) = v47;
      *((_QWORD *)v50 + 4) = v48;
      *(_OWORD *)(v50 + 10) = *(_OWORD *)&v227[8];
      *(_OWORD *)(v50 + 14) = *(_OWORD *)&v227[24];
      *((_QWORD *)v50 + 9) = v49;
      v51 = v229;
      *((_OWORD *)v50 + 5) = v228;
      *((_OWORD *)v50 + 6) = v51;
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    case 5:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      v58 = v226[8];
      v59 = v226[9];
      v60 = v197;
      *(_QWORD *)v197 = *(_QWORD *)v226;
      *((_BYTE *)v60 + 8) = v58;
      *((_BYTE *)v60 + 9) = v59;
      *((_OWORD *)v60 + 1) = *(_OWORD *)&v226[16];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    case 6:
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v196);
      swift_unknownObjectRelease();
      *(_BYTE *)v197 = v226[0];
      type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
      return swift_storeEnumTagMultiPayload();
    default:
      v46 = v196;
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v196, (uint64_t)&v215);
      *(_QWORD *)&v210[0] = v195;
      *((_QWORD *)&v210[0] + 1) = v194;
      String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)((uint64_t)&v215);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage(v46);
      return outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v226);
  }
}

void String.LocalizationValue.FormatArgument.CodableStorage.init(coercing:fallbackLocale:)(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[136];

  v2 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1E0C80A78](v2);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_181A17A28()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v12;

  outlined init with take of Any((_OWORD *)(v4 - 216), (_OWORD *)(v0 + 128));
  outlined init with copy of Any(v0 + 128, v0 + 88);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  *(_QWORD *)(v0 + 8) = v5;
  if (!swift_dynamicCast())
  {
    __break(1u);
    JUMPOUT(0x181A17D58);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)v0 = inited + 32;
  outlined init with copy of Any(v0 + 128, v0 + 88);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v7 = swift_dynamicCast();
  *(_QWORD *)(v0 + 8) = &v12;
  MEMORY[0x1E0C80A78](v7);
  v8 = specialized withVaList<A>(_:_:)(inited, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
  v10 = v9;
  swift_setDeallocating();
  swift_arrayDestroy();
  outlined destroy of String.LocalizationValue.FormatArgument.Storage(v3);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  *v2 = v8;
  v2[1] = v10;
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v2, v1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181A17DB0 + 4 * byte_1820616AB[a1]))(0xD000000000000017, 0x80000001823057C0);
}

uint64_t sub_181A17DB0()
{
  return 0x3233746E69;
}

uint64_t sub_181A17DC4()
{
  return 0x3436746E69;
}

uint64_t sub_181A17DD8()
{
  return 0x3233746E6975;
}

uint64_t sub_181A17DEC()
{
  return 0x3436746E6975;
}

uint64_t sub_181A17E00()
{
  return 0x74616F6C66;
}

uint64_t sub_181A17E14()
{
  return 0x656C62756F64;
}

uint64_t sub_181A17E28()
{
  return 0x74616F6C666763;
}

uint64_t sub_181A17E40()
{
  return 0x676E69727473;
}

uint64_t sub_181A17E54()
{
  return 1702125924;
}

unint64_t sub_181A17E64()
{
  return 0xD000000000000010;
}

uint64_t sub_181A17EFC()
{
  return 0x6C6F686563616C70;
}

void String.LocalizationValue.FormatArgument.CodableStorage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  v92 = *(_QWORD *)(v2 - 8);
  v93 = v2;
  MEMORY[0x1E0C80A78](v2);
  v91 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v98 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  MEMORY[0x1E0C80A78](v5);
  v95 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v45);
  v94 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  v89 = *(_QWORD *)(v8 - 8);
  v90 = v8;
  MEMORY[0x1E0C80A78](v8);
  v87 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v44);
  v86 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  v82 = *(_QWORD *)(v11 - 8);
  v83 = v11;
  MEMORY[0x1E0C80A78](v11);
  v81 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v43);
  v80 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  v85 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v84 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  v78 = *(_QWORD *)(v15 - 8);
  v79 = v15;
  MEMORY[0x1E0C80A78](v15);
  v77 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  v75 = *(_QWORD *)(v17 - 8);
  v76 = v17;
  MEMORY[0x1E0C80A78](v17);
  v74 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  v72 = *(_QWORD *)(v19 - 8);
  v73 = v19;
  MEMORY[0x1E0C80A78](v19);
  v71 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  v69 = *(_QWORD *)(v21 - 8);
  v70 = v21;
  MEMORY[0x1E0C80A78](v21);
  v68 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  v66 = *(_QWORD *)(v23 - 8);
  v67 = v23;
  MEMORY[0x1E0C80A78](v23);
  v65 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  v63 = *(_QWORD *)(v25 - 8);
  v64 = v25;
  MEMORY[0x1E0C80A78](v25);
  v62 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  v60 = *(_QWORD *)(v27 - 8);
  v61 = v27;
  MEMORY[0x1E0C80A78](v27);
  v59 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  v57 = *(_QWORD *)(v29 - 8);
  v58 = v29;
  MEMORY[0x1E0C80A78](v29);
  v56 = (char *)&v43 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  v54 = *(_QWORD *)(v31 - 8);
  v55 = v31;
  MEMORY[0x1E0C80A78](v31);
  v53 = (char *)&v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  v51 = *(_QWORD *)(v33 - 8);
  v52 = v33;
  MEMORY[0x1E0C80A78](v33);
  v50 = (char *)&v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  v46 = *(_QWORD *)(v35 - 8);
  v47 = v35;
  MEMORY[0x1E0C80A78](v35);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  v48 = *(_QWORD *)(v36 - 8);
  v49 = v36;
  MEMORY[0x1E0C80A78](v36);
  v37 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v43 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  v101 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v41 = (char *)&v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  v103 = v41;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v102, (uint64_t)v39, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  v42 = (char *)sub_181A18578 + 4 * word_1820616BE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181A18578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = *v2;
  v5 = v2[1];
  *(_QWORD *)(v0 + 496) = v2[2];
  *(_QWORD *)(v0 + 400) = v2[3];
  *(_QWORD *)(v0 + 408) = v4;
  *(_QWORD *)(v0 + 464) = v2[4];
  v6 = v2[6];
  *(_QWORD *)(v0 + 392) = v2[5];
  *(_QWORD *)(v0 + 432) = v6;
  *(_QWORD *)(v0 + 440) = v5;
  v7 = v2[9];
  v8 = v2[10];
  v9 = v2[11];
  *(_QWORD *)(v0 + 416) = v2[12];
  *(_QWORD *)(v0 + 424) = v7;
  v10 = v2[13];
  *(_BYTE *)(v3 - 256) = 0;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v2 + 7);
  v11 = *(_QWORD *)(v0 + 520);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  *(_QWORD *)(v3 - 256) = *(_QWORD *)(v0 + 408);
  *(_QWORD *)(v3 - 248) = v5;
  v12 = *(_QWORD *)(v0 + 400);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v0 + 496);
  *(_QWORD *)(v3 - 232) = v12;
  v13 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v3 - 224) = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v3 - 216) = v13;
  *(_OWORD *)(v3 - 200) = *(_OWORD *)(v0 + 448);
  *(_QWORD *)(v3 - 208) = v6;
  v14 = *(_QWORD *)(v0 + 416);
  v15 = *(void **)(v0 + 424);
  *(_QWORD *)(v3 - 184) = v15;
  *(_QWORD *)(v3 - 176) = v8;
  *(_QWORD *)(v3 - 168) = v9;
  *(_QWORD *)(v3 - 160) = v14;
  *(_QWORD *)(v3 - 152) = v10;
  lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
  v16 = *(_QWORD *)(v0 + 48);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 40) + 8))(v1, v16);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 488) + 8))(v11, *(_QWORD *)(v3 - 72));

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t String.LocalizationValue.FormatArgument.CodableStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  _QWORD v75[19];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;

  v126 = a2;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys>);
  v127 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v124 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys>);
  v108 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133);
  v132 = (char *)v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys>);
  v106 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v125 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys>);
  v103 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v123 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys>);
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v122 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys>);
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v121 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys>);
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v120 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys>);
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v119 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys>);
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v118 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys>);
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v117 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys>);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v116 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys>);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v115 = (char *)v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys>);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v114 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys>);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v113 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys>);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v130 = (char *)v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys>);
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v112 = (char *)v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v111 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys>);
  v75[18] = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v110 = (char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys>);
  v128 = *(_QWORD *)(v131 - 8);
  MEMORY[0x1E0C80A78](v131);
  v136 = (char *)v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1E0C80A78](v129);
  v75[15] = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v75[9] = (char *)v75 - v24;
  MEMORY[0x1E0C80A78](v25);
  v109 = (char *)v75 - v26;
  MEMORY[0x1E0C80A78](v27);
  v75[16] = (char *)v75 - v28;
  MEMORY[0x1E0C80A78](v29);
  v75[17] = (char *)v75 - v30;
  MEMORY[0x1E0C80A78](v31);
  v75[8] = (char *)v75 - v32;
  MEMORY[0x1E0C80A78](v33);
  v75[7] = (char *)v75 - v34;
  MEMORY[0x1E0C80A78](v35);
  v75[6] = (char *)v75 - v36;
  MEMORY[0x1E0C80A78](v37);
  v75[14] = (char *)v75 - v38;
  MEMORY[0x1E0C80A78](v39);
  v75[13] = (char *)v75 - v40;
  MEMORY[0x1E0C80A78](v41);
  v75[12] = (char *)v75 - v42;
  MEMORY[0x1E0C80A78](v43);
  v75[11] = (char *)v75 - v44;
  MEMORY[0x1E0C80A78](v45);
  v75[10] = (char *)v75 - v46;
  MEMORY[0x1E0C80A78](v47);
  v49 = (char *)v75 - v48;
  MEMORY[0x1E0C80A78](v50);
  v52 = (char *)v75 - v51;
  MEMORY[0x1E0C80A78](v53);
  v55 = (char *)v75 - v54;
  MEMORY[0x1E0C80A78](v56);
  v58 = (char *)v75 - v57;
  MEMORY[0x1E0C80A78](v59);
  v61 = (char *)v75 - v60;
  MEMORY[0x1E0C80A78](v62);
  v64 = (char *)v75 - v63;
  v65 = a1[3];
  v134 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v65);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  v66 = v135;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v66)
  {
    v75[0] = v58;
    v75[1] = v55;
    v75[2] = v52;
    v75[3] = v61;
    v75[4] = v49;
    v135 = 0;
    v67 = v129;
    v75[5] = v64;
    v68 = v131;
    v69 = v136;
    v70 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v70 + 16) == 1)
      __asm { BR              X10 }
    v71 = type metadata accessor for DecodingError();
    swift_allocError();
    v73 = v72;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v73 = v67;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v71 - 8) + 104))(v73, *MEMORY[0x1E0DEC450], v71);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v69, v68);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
}

void sub_181A1A0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;

  *(_BYTE *)(v1 - 256) = 1;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
  v2 = *(_QWORD *)(v1 - 464);
  v3 = *(_QWORD *)(v1 - 264);
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    v5 = *(_QWORD *)(v1 - 728);
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    v8 = v6;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 736) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v0);
    v9 = *(_DWORD **)(v1 - 896);
    *v9 = v8;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v9, *(_QWORD *)(v1 - 856), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x181A1B6C0);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v3, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v1 - 256) = 2;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
  v2 = *(_QWORD *)(v1 - 456);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    v6 = *(_QWORD *)(v1 - 712);
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 720) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(*(_QWORD *)(v1 - 264), v3);
    **(_QWORD **)(v1 - 888) = v7;
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x181A1B69CLL);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  *(_BYTE *)(v2 - 256) = 3;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
  v3 = v0;
  v4 = *(_QWORD *)(v2 - 264);
  v5 = *(_QWORD *)(v2 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 - 696);
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = *(_QWORD *)(v2 - 328);
    v9 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 704) + 8))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v2 - 264), v1);
    **(_DWORD **)(v2 - 880) = v9;
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x181A1B480);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 328) + 8))(v4, v1);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v1 - 256) = 4;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
  v2 = *(_QWORD *)(v1 - 448);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    v6 = *(_QWORD *)(v1 - 680);
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = *(_QWORD *)(v1 - 328);
    v9 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 688) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v1 - 264), v3);
    **(_QWORD **)(v1 - 864) = v9;
    JUMPOUT(0x181A1AE8CLL);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _DWORD *v8;

  *(_BYTE *)(v1 - 256) = 5;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
  v2 = *(_QWORD *)(v1 - 440);
  v3 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181A1A0B8);
  }
  v4 = *(_QWORD *)(v1 - 664);
  KeyedDecodingContainer.decode(_:forKey:)();
  v5 = *(_QWORD *)(v1 - 328);
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 672) + 8))(v2, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v1 - 264), v0);
  v8 = *(_DWORD **)(v1 - 816);
  *v8 = v7;
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, *(_QWORD *)(v1 - 856), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  JUMPOUT(0x181A1B6C0);
}

void sub_181A1A3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_BYTE *)(v1 - 256) = 6;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
  v2 = *(_QWORD *)(v1 - 432);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  }
  else
  {
    v6 = *(_QWORD *)(v1 - 648);
    KeyedDecodingContainer.decode(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 656) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v3);
    v10 = *(_QWORD **)(v1 - 808);
    *v10 = v9;
    swift_storeEnumTagMultiPayload();
    v11 = *(_QWORD *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v10, v11, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature(v11, *(_QWORD *)(v1 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v1 - 256) = 7;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
  v2 = *(_QWORD *)(v1 - 424);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  }
  else
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v6 = *(_QWORD *)(v1 - 632);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 640) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v3);
    v8 = *(_QWORD **)(v1 - 800);
    *v8 = *(_QWORD *)(v1 - 256);
    swift_storeEnumTagMultiPayload();
    v9 = *(_QWORD *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, v9, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature(v9, *(_QWORD *)(v1 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  *(_BYTE *)(v1 - 256) = 8;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
  v2 = *(_QWORD *)(v1 - 416);
  v3 = *(_QWORD *)(v1 - 264);
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    v5 = *(_QWORD *)(v1 - 616);
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    v8 = v6;
    v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 624) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v0);
    v11 = *(uint64_t **)(v1 - 792);
    *v11 = v8;
    v11[1] = v10;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, *(_QWORD *)(v1 - 856), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x181A1B6C0);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v3, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v1 - 256) = 9;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
  v2 = *(_QWORD *)(v1 - 408);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  }
  else
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    v6 = *(_QWORD *)(v1 - 600);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 608) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v3);
    v8 = *(_QWORD **)(v1 - 784);
    *v8 = *(_QWORD *)(v1 - 256);
    swift_storeEnumTagMultiPayload();
    v9 = *(_QWORD *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, v9, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature(v9, *(_QWORD *)(v1 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_BYTE *)(v1 - 256) = 10;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
  v2 = *(_QWORD *)(v1 - 400);
  v3 = *(_QWORD *)(v1 - 264);
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 120) = 0;
    lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
    v5 = *(_QWORD *)(v1 - 584);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v6 = *(_QWORD *)(v1 - 328);
    v7 = *(_QWORD *)(v1 - 256);
    *(_BYTE *)(v1 - 120) = 1;
    v8 = KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)(v1 - 272) = 0;
    v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 592) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v1 - 264), v0);
    v10 = *(_QWORD **)(v1 - 848);
    *v10 = v7;
    v10[1] = v9;
    swift_storeEnumTagMultiPayload();
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v10, *(_QWORD *)(v1 - 856), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x181A1B6C0);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v3, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_BYTE *)(v1 - 256) = 11;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
  v2 = *(_QWORD *)(v1 - 392);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 264);
  v5 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v4, v0);
  }
  else
  {
    *(_BYTE *)(v1 - 256) = 0;
    lazy protocol witness table accessor for type Date and conformance Date();
    v6 = *(_QWORD *)(v1 - 568);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    v8 = *(_QWORD *)(v1 - 120);
    *(_BYTE *)(v1 - 65) = 1;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 576) + 8))(v2, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v3);
    v9 = *(_QWORD *)(v1 - 840);
    *(_QWORD *)v9 = v8;
    v10 = *(_OWORD *)(v1 - 176);
    *(_OWORD *)(v9 + 72) = *(_OWORD *)(v1 - 192);
    *(_OWORD *)(v9 + 88) = v10;
    *(_OWORD *)(v9 + 104) = *(_OWORD *)(v1 - 160);
    *(_OWORD *)(v9 + 114) = *(_OWORD *)(v1 - 150);
    v11 = *(_OWORD *)(v1 - 240);
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v1 - 256);
    *(_OWORD *)(v9 + 24) = v11;
    v12 = *(_OWORD *)(v1 - 208);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v1 - 224);
    *(_OWORD *)(v9 + 56) = v12;
    swift_storeEnumTagMultiPayload();
    v13 = *(_QWORD *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature(v9, v13, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature(v13, *(_QWORD *)(v1 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  *(_BYTE *)(v1 - 256) = 12;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
  v2 = *(_QWORD *)(v1 - 384);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
    *(_BYTE *)(v1 - 256) = 0;
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>, &demangling cache variable for type metadata for Range<Date>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date and conformance Date, MEMORY[0x1E0DEB8B0]);
    v5 = *(_QWORD *)(v1 - 552);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v6 = *(_QWORD *)(v1 - 328);
    v7 = *(_QWORD *)(v1 - 120);
    v8 = *(_QWORD *)(v1 - 112);
    *(_BYTE *)(v1 - 65) = 1;
    lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 560) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v1 - 264), v3);
    v9 = *(_BYTE *)(v1 - 208);
    v10 = *(_QWORD *)(v1 - 200);
    v11 = *(_QWORD *)(v1 - 184);
    v12 = *(_BYTE *)(v1 - 176);
    v13 = *(_BYTE *)(v1 - 175);
    v14 = *(_WORD *)(v1 - 170);
    v15 = *(_QWORD *)(v1 - 168);
    v16 = *(_WORD *)(v1 - 160);
    v17 = *(_QWORD *)(v1 - 832);
    *(_QWORD *)v17 = v7;
    *(_QWORD *)(v17 + 8) = v8;
    v18 = *(_OWORD *)(v1 - 240);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v1 - 256);
    *(_OWORD *)(v17 + 32) = v18;
    *(_OWORD *)(v17 + 48) = *(_OWORD *)(v1 - 224);
    *(_BYTE *)(v17 + 64) = v9;
    *(_QWORD *)(v17 + 72) = v10;
    *(_DWORD *)(v17 + 80) = *(_DWORD *)(v1 - 192);
    *(_QWORD *)(v17 + 88) = v11;
    *(_BYTE *)(v17 + 96) = v12;
    *(_BYTE *)(v17 + 97) = v13;
    *(_DWORD *)(v17 + 98) = *(_DWORD *)(v1 - 174);
    *(_WORD *)(v17 + 102) = v14;
    *(_QWORD *)(v17 + 104) = v15;
    *(_WORD *)(v17 + 112) = v16;
    swift_storeEnumTagMultiPayload();
    v19 = *(_QWORD *)(v1 - 856);
    outlined init with take of ICUNumberFormatter.Signature(v17, v19, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    outlined init with take of ICUNumberFormatter.Signature(v19, *(_QWORD *)(v1 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    JUMPOUT(0x181A1A0C4);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x181A1AA30);
}

void sub_181A1A8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v1 - 256) = 13;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
  v2 = *(_QWORD *)(v1 - 376);
  v3 = *(_QWORD *)(v1 - 264);
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 256) = 0;
    v5 = *(_QWORD *)(v1 - 536);
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v7 = *(_QWORD *)(v1 - 328);
    v8 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle));
    **(_QWORD **)(v1 - 760) = v8;
    type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
    *(_BYTE *)(v1 - 256) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 544) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v1 - 264), v0);
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x181A1B480);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v3, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_BYTE *)(v1 - 256) = 14;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
  v2 = *(_QWORD *)(v1 - 368);
  v3 = *(_QWORD *)(v1 - 264);
  v4 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    *(_BYTE *)(v1 - 256) = 0;
    v5 = *(_QWORD *)(v1 - 520);
    KeyedDecodingContainer.decode(_:forKey:)();
    v6 = *(_QWORD *)(v1 - 328);
    v8 = v7;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle));
    v10 = *(_QWORD **)(v1 - 768);
    *(_QWORD *)(v1 - 272) = (char *)v10 + *(int *)(v9 + 48);
    *v10 = v8;
    type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
    *(_BYTE *)(v1 - 256) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 528) + 8))(v2, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v1 - 264), v0);
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x181A1B480);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v3, v0);
  JUMPOUT(0x181A1A0C4);
}

void sub_181A1A9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v1 - 256) = 15;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
  v2 = *(_QWORD *)(v1 - 352);
  v3 = *(_QWORD *)(v1 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v3)
    JUMPOUT(0x181A1AA18);
  type metadata accessor for NSDecimal(0);
  *(_BYTE *)(v1 - 256) = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
  v4 = *(_QWORD *)(v1 - 496);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v5 = *(_QWORD *)(v1 - 328);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle));
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  *(_BYTE *)(v1 - 256) = 1;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 504) + 8))(v2, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v1 - 264), v0);
  JUMPOUT(0x181A1B470);
}

void sub_181A1AA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)(v3 - 256) = 16;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
  v4 = *(_QWORD *)(v3 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181A1AA34);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
  *(_BYTE *)(v3 - 256) = 0;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [LocalizedStringResource] and conformance <A> [A], &demangling cache variable for type metadata for [LocalizedStringResource], (uint64_t (*)(void))lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x1E0DEAF40]);
  v5 = v2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>);
  *(_BYTE *)(v3 - 65) = 1;
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ListFormatStyle<StringStyle, [String]> and conformance ListFormatStyle<A, B>, &demangling cache variable for type metadata for ListFormatStyle<StringStyle, [String]>, (uint64_t)&protocol conformance descriptor for ListFormatStyle<A, B>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 488) + 8))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v3 - 264), v0);
  v7 = *(_BYTE *)(v3 - 256);
  v8 = *(_BYTE *)(v3 - 255);
  v9 = *(_QWORD *)(v3 - 824);
  *(_QWORD *)v9 = *(_QWORD *)(v3 - 272);
  *(_BYTE *)(v9 + 8) = v7;
  *(_BYTE *)(v9 + 9) = v8;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v3 - 248);
  JUMPOUT(0x181A1B68CLL);
}

void sub_181A1AAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  *(_BYTE *)(v2 - 256) = 17;
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
  v3 = *(_QWORD *)(v2 - 360);
  v4 = v0;
  v5 = *(_QWORD *)(v2 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
    JUMPOUT(0x181A1AAFCLL);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder();
  v6 = *(_QWORD *)(v2 - 512);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v7 = *(_QWORD *)(v2 - 328);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v2 - 264), v4);
  v8 = *(_BYTE **)(v2 - 776);
  *v8 = *(_BYTE *)(v2 - 256);
  swift_storeEnumTagMultiPayload();
  v9 = *(_QWORD *)(v2 - 856);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, v9, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  outlined init with take of ICUNumberFormatter.Signature(v9, *(_QWORD *)(v2 - 344), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  JUMPOUT(0x181A1A0C4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x736E6F6974706FLL;
  else
    return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  unsigned __int8 *v0;

  return String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.CodableStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.CodableStorage.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.CodableStorage(_QWORD *a1)
{
  String.LocalizationValue.FormatArgument.CodableStorage.encode(to:)(a1);
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[8];
  _OWORD v3[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v3);
  v1 = (char *)sub_181A1BE3C
     + 4
     * byte_182061706[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_181A1BE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int128 v4;
  Swift::UInt v5;
  int v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt8 v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  void *v53;
  _BYTE v54[144];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _OWORD v75[12];
  __int16 v76;
  uint64_t v77;

  v2 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v1 - 216);
  Hasher._combine(_:)(0);
  v3 = *(_WORD *)(v2 + 48);
  v4 = *(_OWORD *)(v2 + 16);
  v75[9] = *(_OWORD *)v2;
  v75[10] = v4;
  v75[11] = *(_OWORD *)(v2 + 32);
  v76 = v3;
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(unsigned __int8 *)(v2 + 64);
  outlined retain of Date.FormatStyle(v2);
  specialized Optional<A>.hash(into:)(v0);
  if (v6 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  v7 = *(_QWORD *)(v2 + 80);
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v7) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_60;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(ObjectType, v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v11(v73, ObjectType, v7);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)&v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    v16 = &v55;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    v16 = v54;
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
LABEL_20:
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v58)
      goto LABEL_22;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v58)
    {
LABEL_22:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v17 = v59;
      if (v59)
        goto LABEL_23;
LABEL_27:
      Hasher._combine(_:)(0);
      v18 = v60;
      if (v60)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  Hasher._combine(_:)(0);
  v17 = v59;
  if (!v59)
    goto LABEL_27;
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v17);
  swift_bridgeObjectRelease();
  v18 = v60;
  if (v60)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v18);
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
LABEL_29:
  v19 = v61;
  v20 = v62;
  v22 = v63;
  v21 = v64;
  v23 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v20;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    v28 = v19;
    _CFObject.hash(into:)();
    v53 = v19;
    if (v20)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    v33 = v23;
    v34 = v20;
    v35 = v22;
    v36 = v21;
    v53 = 0;
    if (v20)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v29 = v20;
      _CFObject.hash(into:)();

      if (v22)
        goto LABEL_32;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v22;
    _CFObject.hash(into:)();

    if (v21)
      goto LABEL_33;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v23)
      goto LABEL_34;
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_38;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  v32 = 0;
LABEL_40:

  v37 = v66;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v37);
    swift_bridgeObjectRelease();
    v38 = v67;
    if (v67)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_43;
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }
  Hasher._combine(_:)(0);
  v38 = v67;
  if (!v67)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v38);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_46;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v71 == 2)
  {
    v41 = 0;
  }
  else
  {
    v41 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v72 == 2)
  {
    v42 = 0;
  }
  else
  {
    v43 = v72 & 1;
    Hasher._combine(_:)(1u);
    v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_60:
  swift_unknownObjectRelease();
  v44 = *(_QWORD *)(v2 + 96);
  v45 = *(_QWORD *)(v2 + 112);
  v46 = *(unsigned __int8 *)(v2 + 120);
  v47 = *(_BYTE *)(v2 + 121);
  v48 = swift_getObjectType();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 112);
  swift_unknownObjectRetain();
  v49(v0, v48, v44);
  swift_unknownObjectRelease();
  v50 = swift_getObjectType();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 120);
  swift_unknownObjectRetain();
  v51(v0, v50, v45);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v46);
  Hasher._combine(_:)(v47);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v77, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD v11[6];
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19[8];
  _OWORD v20[8];

  v2 = v1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  v14 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v13 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  v11[4] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v11[3] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  v11[1] = *(_QWORD *)(v6 - 8);
  v11[2] = v6;
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  MEMORY[0x1E0C80A78](v7);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v19);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  v17 = v9;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v19, v20);
  v10 = (char *)sub_181A1D9EC
      + 4
      * byte_18206170A[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v20)];
  __asm { BR              X10 }
}

uint64_t sub_181A1D9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = (__int128 *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v4 - 216);
  *(_BYTE *)(v0 + 144) = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format((__int128 *)(v0 + 408), (_OWORD *)(v0 + 280));
  v6 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 + 280);
  outlined retain of Date.FormatStyle(v6);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v9 = *v5;
  v10 = v5[1];
  v11 = v5[3];
  *(_OWORD *)(v0 + 176) = v5[2];
  *(_OWORD *)(v0 + 192) = v11;
  *(_OWORD *)(v0 + 144) = v9;
  *(_OWORD *)(v0 + 160) = v10;
  v12 = v5[4];
  v13 = v5[5];
  v14 = v5[6];
  *(_OWORD *)(v0 + 250) = *(__int128 *)((char *)v5 + 106);
  *(_OWORD *)(v0 + 224) = v13;
  *(_OWORD *)(v0 + 240) = v14;
  *(_OWORD *)(v0 + 208) = v12;
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 8))(v8, v7);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(v0 + 408, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v31 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys>);
  v30 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v34 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  v28 = v5;
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys>);
  v29 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v32 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys>);
  v12 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  v16 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v24[2] = v9;
    v24[3] = v11;
    v24[1] = v8;
    v37 = v12;
    v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v17 + 16) == 1)
      __asm { BR              X10 }
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v14;
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v21 = &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
    v22 = v35;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A1E58C + 4 * byte_182061712[*v0]))(0x656D695465746164, 0xE800000000000000);
}

uint64_t sub_181A1E58C()
{
  return 0x313036386F7369;
}

uint64_t sub_181A1E5A4()
{
  return 0x6D69746162726576;
}

uint64_t sub_181A1E5B8()
{
  return 0x65766974616C6572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v3);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v2);
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v3);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v2);
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(_QWORD *a1)
{
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(Foundation::Date a1)
{
  __int128 *v1;
  char *v2;
  Swift::String result;
  __int128 v4[8];
  _OWORD v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v5);
  v2 = (char *)sub_181A1E8E0
     + 4
     * byte_182061716[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v5)];
  __asm { BR              X10 }
  return result;
}

uint64_t sub_181A1E8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v2 - 200);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format((__int128 *)(v0 + 376), (_OWORD *)(v0 + 240));
  v4 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 + 240);
  v5 = v3[5];
  *(_OWORD *)(v0 + 176) = v3[4];
  *(_OWORD *)(v0 + 192) = v5;
  *(_OWORD *)(v0 + 208) = v3[6];
  *(_OWORD *)(v1 + 106) = *(_OWORD *)((char *)v3 + 106);
  v6 = v3[1];
  *(_OWORD *)(v0 + 112) = *v3;
  *(_OWORD *)(v0 + 128) = v6;
  v7 = v3[3];
  *(_OWORD *)(v0 + 144) = v3[2];
  *(_OWORD *)(v0 + 160) = v7;
  outlined retain of Date.FormatStyle(v4);
  outlined retain of Date.FormatStyle((uint64_t)v3);
  ICUDateFormatter.DateFormatInfo.init(_:)((_OWORD *)(v0 + 112), v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_BYTE *)(v0 + 48);
  v12 = *(_BYTE *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_BYTE *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 120) = v8;
  *(_QWORD *)(v0 + 128) = v9;
  *(_QWORD *)(v0 + 136) = v10;
  *(_BYTE *)(v0 + 144) = v11;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(v0 + 56);
  *(_BYTE *)(v0 + 168) = v12;
  *(_QWORD *)(v0 + 176) = v13;
  *(_QWORD *)(v0 + 184) = v14;
  *(_BYTE *)(v0 + 192) = v15;
  *(_QWORD *)(v0 + 200) = v16;
  v17 = specialized static ICUDateFormatter.cachedFormatter(for:)(v0 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17
    && (v18 = swift_retain_n(),
        MEMORY[0x1E0C80A78](v18),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v22, (uint64_t *)(v0 + 112)),
        v19 = *(_QWORD *)(v0 + 112),
        v20 = *(_QWORD *)(v0 + 120),
        swift_release_n(),
        v20))
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(v0 + 376, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  else
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(v0 + 376, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    return 0;
  }
  return v19;
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.locale(_:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[8];
  _OWORD v3[9];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v3);
  v1 = (char *)sub_181A1EC58
     + 4
     * byte_18206171A[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }
}

_OWORD *sub_181A1EC58()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  __int128 v18[2];
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;

  v5 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v4 - 224);
  v17 = *(_BYTE *)(v5 + 121);
  v16 = *(_BYTE *)(v5 + 120);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_BYTE *)(v5 + 64);
  v12 = *(_OWORD *)(v5 + 16);
  v13 = *(_OWORD *)v5;
  v9 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v5 + 40);
  v10 = *(_WORD *)(v5 + 48);
  v14 = *(_OWORD *)(v5 + 104);
  v15 = *(_OWORD *)(v5 + 88);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v28, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v18[0] = v13;
  v18[1] = v12;
  v19 = v9;
  v20 = v8;
  v21 = v10;
  v22 = v6;
  v23 = v7;
  v24 = v1;
  v25 = v2;
  *(_OWORD *)(v3 + 88) = v15;
  *(_OWORD *)(v3 + 104) = v14;
  v26 = v16;
  v27 = v17;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v18);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v18, v0);
}

void String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[8];
  _OWORD v3[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v2);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v3);
  v1 = (char *)sub_181A1EEBC
     + 4
     * byte_18206171E[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_181A1EEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  __int128 v5;
  Swift::UInt v6;
  char v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  _OWORD v62[8];
  _BYTE v63[144];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  _QWORD v82[18];
  _BYTE v83[144];
  _OWORD v84[12];
  __int16 v85;
  __int128 v86[22];

  v2 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v1 - 216);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v86, v62);
  v3 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v62);
  Hasher._combine(_:)(0);
  v4 = *(_WORD *)(v2 + 48);
  v5 = *(_OWORD *)(v2 + 16);
  v84[9] = *(_OWORD *)v2;
  v84[10] = v5;
  v84[11] = *(_OWORD *)(v2 + 32);
  v85 = v4;
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_BYTE *)(v2 + 64);
  outlined retain of Date.FormatStyle(v3);
  outlined retain of Date.FormatStyle(v2);
  specialized Optional<A>.hash(into:)(v0);
  if ((v7 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  v8 = *(_QWORD *)(v2 + 80);
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if ((v10(ObjectType, v8) & 1) != 0)
  {
    v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_60;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v82, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v84) == 1)
  {
    v11 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)&v64, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v64 == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v64 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  v14 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    v17 = &v64;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
    v17 = v63;
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
LABEL_20:
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v67)
      goto LABEL_22;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v67)
    {
LABEL_22:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v18 = v68;
      if (v68)
        goto LABEL_23;
LABEL_27:
      Hasher._combine(_:)(0);
      v19 = v69;
      if (v69)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  Hasher._combine(_:)(0);
  v18 = v68;
  if (!v68)
    goto LABEL_27;
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v18);
  swift_bridgeObjectRelease();
  v19 = v69;
  if (v69)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    v20 = v0;
    specialized Dictionary<>.hash(into:)(v0, v19);
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
LABEL_28:
  v20 = v0;
  Hasher._combine(_:)(0);
LABEL_29:
  v22 = v70;
  v21 = v71;
  v24 = v72;
  v23 = v73;
  v25 = v74;
  v60 = v73;
  v61 = v71;
  v58 = v74;
  if (v70)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v26 = v61;
    v27 = v24;
    v28 = v24;
    v29 = v23;
    v30 = v25;
    v31 = v22;
    v21 = v61;
    _CFObject.hash(into:)();
    v59 = v22;
    if (v61)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    v38 = v25;
    v39 = v21;
    v27 = v24;
    v40 = v24;
    v41 = v23;
    v59 = 0;
    if (v21)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v32 = v21;
      _CFObject.hash(into:)();

      if (v27)
        goto LABEL_32;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v27)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v27;
    _CFObject.hash(into:)();

    v34 = v60;
    if (v60)
      goto LABEL_33;
LABEL_38:
    Hasher._combine(_:)(0);
    v36 = v58;
    if (v58)
      goto LABEL_34;
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v34 = v60;
  if (!v60)
    goto LABEL_38;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v35 = v34;
  _CFObject.hash(into:)();

  v36 = v58;
  if (v58)
  {
LABEL_34:
    v0 = v20;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v37 = v36;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  v0 = v20;
  Hasher._combine(_:)(0);
  v37 = 0;
LABEL_40:

  v42 = v75;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v42);
    swift_bridgeObjectRelease();
    v43 = v76;
    if (v76)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    if (v77)
      goto LABEL_43;
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }
  Hasher._combine(_:)(0);
  v43 = v76;
  if (!v76)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v43);
  swift_bridgeObjectRelease();
  if (!v77)
    goto LABEL_46;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v78 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v44 = v78 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }
  if (v79 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v45 = v79 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }
  if (v80 == 2)
  {
    v46 = 0;
  }
  else
  {
    v46 = v80 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v46);
  if (v81 == 2)
  {
    v47 = 0;
  }
  else
  {
    v48 = v81 & 1;
    Hasher._combine(_:)(1u);
    v47 = v48;
  }
  Hasher._combine(_:)(v47);
  outlined retain of LocalePreferences?((uint64_t)v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_60:
  swift_unknownObjectRelease();
  v49 = *(_QWORD *)(v2 + 96);
  v50 = *(_QWORD *)(v2 + 112);
  v51 = *(unsigned __int8 *)(v2 + 120);
  v52 = *(_BYTE *)(v2 + 121);
  v53 = swift_getObjectType();
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 112);
  swift_unknownObjectRetain();
  v54(v0, v53, v49);
  swift_unknownObjectRelease();
  v55 = swift_getObjectType();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 120);
  swift_unknownObjectRetain();
  v56(v0, v55, v50);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v51);
  Hasher._combine(_:)(v52);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v86, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v86, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  _OWORD v9[8];
  __int128 v10[8];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14[8];
  _OWORD v15[6];
  _OWORD v16[2];
  __int128 v17[8];
  _OWORD *v18;

  v18 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v8 = v18;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    v9 = v15[5];
    v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    v10 = v15[1];
    *v8 = v15[0];
    v8[1] = v10;
    v11 = v15[3];
    v8[2] = v15[2];
    v8[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      v18 = (uint64_t)v9;
      v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      v18 = (uint64_t)v6;
      v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
    }
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    Hasher._combine(_:)(0);
    specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v18 = (uint64_t)v12;
    v19 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }
  return outlined destroy of Any?(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x1E0C80A78](v2);
  v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v37);
  v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x1E0C80A78](v5);
  v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v32);
  v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v42, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      v22 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v16, v33, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      v23 = v34;
      v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
      v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v26 = v35;
    }
    else
    {
      v21 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      v22 = v38;
      outlined init with take of LocalePreferences?((uint64_t)v16, v38, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      v23 = v39;
      v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
      v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v26 = v40;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
    v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys>);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys>);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys>);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v43 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v43 - v20;
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  v60 = v9;
  v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
    goto LABEL_9;
  v44 = v15;
  v45 = v18;
  v46 = v12;
  v47 = v21;
  v25 = v57;
  v24 = v58;
  v26 = v59;
  v27 = v60;
  v62 = v10;
  v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v30 = v24;
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v33 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC450], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
LABEL_9:
    v38 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v38);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
      v29 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Currency and conformance IntegerFormatStyle<A>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
      v36 = (uint64_t)v44;
      v37 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
      v38 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
      v34 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int>.Percent and conformance IntegerFormatStyle<A>.Percent, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
      v36 = (uint64_t)v46;
      v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v24);
      swift_storeEnumTagMultiPayload();
      v38 = (uint64_t)v61;
    }
  }
  else
  {
    v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
    v36 = (uint64_t)v45;
    v39 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
    v38 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature(v36, (uint64_t)v47, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature(v42, v54, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return 0x74616D726F66;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  uint64_t result;
  Swift::String v4;

  v4 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(a2);
  result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(_QWORD *a1)
{
  return String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  Hasher.init(_seed:)();
  String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[8];
  __int128 v6[8];
  __int128 v7[8];
  __int128 v8[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v8);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v8, v5);
  specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(v6, v5);
  return v3 & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_QWORD *a1)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t *v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t isStackAllocationSafe;
  int v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char *v91;
  int v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  int v100;
  void *v101;
  void *v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  char *v128;
  int v129;
  void *v130;
  void *v131;
  uint64_t v132;
  int v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  Swift::String result;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int64_t v142;
  char *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  Swift::Int v152;
  _QWORD v153[18];
  _QWORD v154[18];
  _QWORD v155[20];

  v2 = v1;
  v152 = a1;
  v155[18] = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v6);
  v151 = (uint64_t *)((char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v147 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149);
  v148 = (uint64_t)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v150 = (uint64_t)&v139 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v19, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v50 = specialized static ICUNumberFormatter.create<A>(for:)((uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v51 = v152;
    if (!v50)
      goto LABEL_58;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v52 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1E0C80A78](v52);
    LODWORD(v155[0]) = 0;
    isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v155[0]) == 15)
    {
      v81 = isStackAllocationSafe + 1;
      if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_127;
      }
      if (v81 < 0)
      {
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      if (v81 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v83 = (char *)&v139 - v82;
        LODWORD(v154[0]) = 0;
        v84 = unumf_resultToString();
        if (SLODWORD(v154[0]) <= 0 && v84 > 0)
        {
          v85 = specialized String.init(_utf16:)((uint64_t)v83, v84);
          v87 = v86;
          goto LABEL_41;
        }
LABEL_57:
        swift_release();
        swift_release();
        goto LABEL_58;
      }
      v96 = swift_slowAlloc();
      LODWORD(v154[0]) = 0;
      v97 = unumf_resultToString();
      if (SLODWORD(v154[0]) > 0 || v97 <= 0)
      {
        MEMORY[0x186DA9E78](v96, -1, -1);
        goto LABEL_57;
      }
      v85 = specialized String.init(_utf16:)(v96, v97);
      v87 = v98;
      MEMORY[0x186DA9E78](v96, -1, -1);
    }
    else
    {
      if (SLODWORD(v155[0]) > 0 || (int)isStackAllocationSafe <= 0)
        goto LABEL_57;
      v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), isStackAllocationSafe);
      v87 = v94;
    }
LABEL_41:
    swift_release();
    swift_release();
    if (v87)
    {
LABEL_59:
      v103 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      v104 = (uint64_t)v16;
LABEL_125:
      outlined destroy of Any?(v104, v103);
      v136 = v85;
      v137 = v87;
      goto LABEL_135;
    }
LABEL_58:
    v155[0] = v51;
    lazy protocol witness table accessor for type Int and conformance Int();
    v85 = String.init<A>(_:radix:uppercase:)();
    v87 = v102;
    goto LABEL_59;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v53 = (uint64_t)v151;
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v151, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    v150 = type metadata accessor for ICUPercentNumberFormatter();
    v54 = v53 + *(int *)(v6 + 36);
    v55 = *(_QWORD *)(v53 + 8);
    ObjectType = swift_getObjectType();
    v57 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 472);
    swift_unknownObjectRetain();
    v58 = v57(ObjectType, v55);
    v60 = v59;
    swift_unknownObjectRelease();
    v61 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v55 + 464);
    swift_unknownObjectRetain();
    v61(v154, ObjectType, v55);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v154, (uint64_t)v155, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature(v54, (uint64_t)v5, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v62 = (uint64_t *)&v5[*(int *)(v3 + 20)];
    *v62 = v58;
    v62[1] = v60;
    outlined init with take of LocalePreferences?((uint64_t)v155, (uint64_t)&v5[*(int *)(v3 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    v63 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v5);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v5, type metadata accessor for ICUPercentNumberFormatter.Signature);
    v64 = v152;
    if (!v63)
      goto LABEL_62;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v65 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1E0C80A78](v65);
    LODWORD(v154[0]) = 0;
    v88 = unumf_resultToString();
    if (LODWORD(v154[0]) != 15)
    {
      if (SLODWORD(v154[0]) > 0 || (int)v88 <= 0)
        goto LABEL_61;
      v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), v88);
      v87 = v95;
      goto LABEL_46;
    }
    v89 = v88 + 1;
    if (!__OFADD__((_DWORD)v88, 1))
    {
      if (v89 < 0)
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      if (v89 < 513 || (v88 = swift_stdlib_isStackAllocationSafe(), (v88 & 1) != 0))
      {
        MEMORY[0x1E0C80A78](v88);
        v91 = (char *)&v139 - v90;
        LODWORD(v153[0]) = 0;
        v92 = unumf_resultToString();
        if (SLODWORD(v153[0]) <= 0 && v92 > 0)
        {
          v85 = specialized String.init(_utf16:)((uint64_t)v91, v92);
          v87 = v93;
          goto LABEL_46;
        }
LABEL_61:
        swift_release();
        swift_release();
        goto LABEL_62;
      }
      v99 = swift_slowAlloc();
      LODWORD(v153[0]) = 0;
      v100 = unumf_resultToString();
      if (SLODWORD(v153[0]) > 0 || v100 <= 0)
      {
        MEMORY[0x186DA9E78](v99, -1, -1);
        goto LABEL_61;
      }
      v85 = specialized String.init(_utf16:)(v99, v100);
      v87 = v101;
      MEMORY[0x186DA9E78](v99, -1, -1);
LABEL_46:
      swift_release();
      swift_release();
      if (v87)
      {
LABEL_63:
        v103 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        v104 = (uint64_t)v151;
        goto LABEL_125;
      }
LABEL_62:
      v154[0] = v64;
      lazy protocol witness table accessor for type Int and conformance Int();
      v85 = String.init<A>(_:radix:uppercase:)();
      v87 = v105;
      goto LABEL_63;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  v22 = (char *)v13 + *(int *)(v11 + 40);
  v24 = v13[2];
  v23 = v13[3];
  v25 = v13[1];
  v151 = v13;
  v26 = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v28 = v27(v26, v25);
  v30 = v29;
  swift_unknownObjectRelease();
  v31 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v31(v154, v26, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v154, (uint64_t)v155, &demangling cache variable for type metadata for LocalePreferences?);
  v32 = (uint64_t)v22;
  v33 = v150;
  outlined init with copy of ICUNumberFormatter.Signature(v32, v150, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v34 = v149;
  v35 = (_QWORD *)(v33 + *(int *)(v149 + 20));
  *v35 = v24;
  v35[1] = v23;
  v36 = (uint64_t *)(v33 + *(int *)(v34 + 24));
  *v36 = v28;
  v36[1] = v30;
  v37 = v33 + *(int *)(v34 + 28);
  outlined init with take of LocalePreferences?((uint64_t)v155, v37, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v38 = *(_QWORD *)algn_1EDC41C48;
  v146 = static ICUCurrencyNumberFormatter.cache;
  v39 = *(_QWORD *)algn_1EDC41C48 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  v40 = 0;
  v41 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v38 + 16, v33);
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
  swift_release();
  if (v41 != 1)
  {
    swift_release();
    v66 = (uint64_t)v151;
    v67 = v152;
    goto LABEL_100;
  }
  v145 = 0;
  v42 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v33);
  v44 = v43;
  v45 = *v36;
  v46 = v36[1];
  outlined init with take of LocalePreferences?(v37, (uint64_t)v154, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v154, (uint64_t)v153, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v154, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  v47 = v45;
  v48 = (os_unfair_lock_s *)(v38 + 24);
  v41 = (uint64_t)ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v42, v44, v47, v46, (uint64_t)v153);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  v49 = *(_QWORD *)(*(_QWORD *)(v38 + 16) + 16);
  v144 = *(_QWORD *)(v38 + 16);
  if (v146 >= v49)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v39 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v153[0] = *(_QWORD *)v39;
  v69 = v153[0];
  *(_QWORD *)v39 = 0x8000000000000000;
  v71 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
  v72 = *(_QWORD *)(v69 + 16);
  v73 = (v70 & 1) == 0;
  v74 = v72 + v73;
  if (__OFADD__(v72, v73))
  {
    __break(1u);
  }
  else
  {
    LODWORD(v39) = v70;
    v67 = v152;
    if (*(_QWORD *)(v69 + 24) < v74)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, isUniquelyReferenced_nonNull_native);
      v75 = v153[0];
      v33 = v150;
      v76 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
      if ((v39 & 1) != (v77 & 1))
        goto LABEL_134;
      v71 = v76;
      if ((v39 & 1) == 0)
        goto LABEL_98;
LABEL_21:
      v78 = *(_QWORD *)(v75 + 56);
      v79 = 8 * v71;
      swift_release();
      *(_QWORD *)(v78 + v79) = v41;
LABEL_99:
      v66 = (uint64_t)v151;
      *(_QWORD *)(v38 + 16) = v75;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v48);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
      swift_release();
      v40 = v145;
LABEL_100:
      outlined destroy of ICUNumberFormatter.Signature(v33, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v41)
        goto LABEL_123;
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      v124 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v40)
      {

LABEL_122:
        swift_release();
        v66 = (uint64_t)v151;
        goto LABEL_123;
      }
      MEMORY[0x1E0C80A78](v124);
      LODWORD(v154[0]) = 0;
      v125 = unumf_resultToString();
      if (LODWORD(v154[0]) != 15)
      {
        if (SLODWORD(v154[0]) > 0 || (int)v125 <= 0)
          goto LABEL_121;
        v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), v125);
        v87 = v131;
        goto LABEL_114;
      }
      v126 = v125 + 1;
      if (!__OFADD__((_DWORD)v125, 1))
      {
        if ((v126 & 0x80000000) == 0)
        {
          if (v126 < 513 || (v125 = swift_stdlib_isStackAllocationSafe(), (v125 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v125);
            v128 = (char *)&v139 - v127;
            LODWORD(v153[0]) = 0;
            v129 = unumf_resultToString();
            if (SLODWORD(v153[0]) <= 0 && v129 > 0)
            {
              v85 = specialized String.init(_utf16:)((uint64_t)v128, v129);
              v87 = v130;
              goto LABEL_114;
            }
LABEL_121:
            swift_release();
            goto LABEL_122;
          }
          v132 = swift_slowAlloc();
          LODWORD(v153[0]) = 0;
          v133 = unumf_resultToString();
          if (SLODWORD(v153[0]) > 0 || v133 <= 0)
          {
            MEMORY[0x186DA9E78](v132, -1, -1);
            goto LABEL_121;
          }
          v85 = specialized String.init(_utf16:)(v132, v133);
          v87 = v134;
          MEMORY[0x186DA9E78](v132, -1, -1);
LABEL_114:
          swift_release();
          swift_release();
          v66 = (uint64_t)v151;
          if (v87)
          {
LABEL_124:
            v103 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            v104 = v66;
            goto LABEL_125;
          }
LABEL_123:
          v154[0] = v67;
          lazy protocol witness table accessor for type Int and conformance Int();
          v85 = String.init<A>(_:radix:uppercase:)();
          v87 = v135;
          goto LABEL_124;
        }
LABEL_131:
        __break(1u);
      }
      goto LABEL_128;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v75 = v69;
      v33 = v150;
      if ((v70 & 1) != 0)
        goto LABEL_21;
LABEL_98:
      v122 = v148;
      v123 = v71;
      outlined init with copy of ICUNumberFormatter.Signature(v33, v148, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v123, v122, v41, (_QWORD *)v75);
      goto LABEL_99;
    }
  }
  v140 = v71;
  v141 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v106 = static _DictionaryStorage.copy(original:)();
  v75 = v106;
  if (!*(_QWORD *)(v69 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    v67 = v152;
    v33 = v150;
    v48 = (os_unfair_lock_s *)(v38 + 24);
    v71 = v140;
    if ((v141 & 1) != 0)
      goto LABEL_21;
    goto LABEL_98;
  }
  v107 = (char *)(v106 + 64);
  v108 = 1 << *(_BYTE *)(v75 + 32);
  v143 = (char *)(v69 + 64);
  v109 = (unint64_t)(v108 + 63) >> 6;
  if (v75 != v69 || v107 >= &v143[8 * v109])
    memmove(v107, v143, 8 * v109);
  v146 = 0;
  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v69 + 16);
  v110 = 1 << *(_BYTE *)(v69 + 32);
  v111 = -1;
  if (v110 < 64)
    v111 = ~(-1 << v110);
  v149 = v111 & *(_QWORD *)(v69 + 64);
  v142 = (unint64_t)(v110 + 63) >> 6;
  v112 = v148;
  while (1)
  {
    if (v149)
    {
      v113 = __clz(__rbit64(v149));
      v149 &= v149 - 1;
      v114 = v113 | (v146 << 6);
      goto LABEL_73;
    }
    v118 = v146 + 1;
    if (__OFADD__(v146, 1))
    {
      __break(1u);
      goto LABEL_133;
    }
    if (v118 >= v142)
      goto LABEL_97;
    v119 = *(_QWORD *)&v143[8 * v118];
    v120 = v146 + 1;
    if (!v119)
    {
      v120 = v146 + 2;
      if (v146 + 2 >= v142)
        goto LABEL_97;
      v119 = *(_QWORD *)&v143[8 * v120];
      if (!v119)
      {
        v120 = v146 + 3;
        if (v146 + 3 >= v142)
          goto LABEL_97;
        v119 = *(_QWORD *)&v143[8 * v120];
        if (!v119)
        {
          v120 = v146 + 4;
          if (v146 + 4 >= v142)
            goto LABEL_97;
          v119 = *(_QWORD *)&v143[8 * v120];
          if (!v119)
          {
            v120 = v146 + 5;
            if (v146 + 5 >= v142)
              goto LABEL_97;
            v119 = *(_QWORD *)&v143[8 * v120];
            if (!v119)
            {
              v120 = v146 + 6;
              if (v146 + 6 >= v142)
                goto LABEL_97;
              v119 = *(_QWORD *)&v143[8 * v120];
              if (!v119)
              {
                v120 = v146 + 7;
                if (v146 + 7 >= v142)
                  goto LABEL_97;
                v119 = *(_QWORD *)&v143[8 * v120];
                if (!v119)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_96:
    v149 = (v119 - 1) & v119;
    v146 = v120;
    v114 = __clz(__rbit64(v119)) + (v120 << 6);
LABEL_73:
    v115 = *(_QWORD *)(v147 + 72) * v114;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v69 + 48) + v115, v112, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v116 = 8 * v114;
    v117 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v114);
    outlined init with take of ICUNumberFormatter.Signature(v112, *(_QWORD *)(v75 + 48) + v115, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v75 + 56) + v116) = v117;
    swift_retain();
  }
  v121 = v146 + 8;
  if (v146 + 8 >= v142)
    goto LABEL_97;
  v119 = *(_QWORD *)&v143[8 * v121];
  if (v119)
  {
    v120 = v146 + 8;
    goto LABEL_96;
  }
  while (1)
  {
    v120 = v121 + 1;
    if (__OFADD__(v121, 1))
      break;
    if (v120 >= v142)
      goto LABEL_97;
    v119 = *(_QWORD *)&v143[8 * v120];
    ++v121;
    if (v119)
      goto LABEL_96;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  v136 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_135:
  result._object = v137;
  result._countAndFlagsBits = v136;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      Hasher._combine(_:)(1uLL);
      specialized IntegerFormatStyle.Currency.hash(into:)(a1, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      v18 = (uint64_t)v9;
      v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      Hasher._combine(_:)(2uLL);
      specialized IntegerFormatStyle.hash(into:)(a1, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      v18 = (uint64_t)v6;
      v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    }
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(0);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    v18 = (uint64_t)v12;
    v19 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
  }
  return outlined destroy of Any?(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x1E0C80A78](v2);
  v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v37);
  v38 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x1E0C80A78](v5);
  v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v32);
  v33 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v42, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      v22 = v33;
      outlined init with take of LocalePreferences?((uint64_t)v16, v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      v46 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      v23 = v34;
      v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
      v25 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v26 = v35;
    }
    else
    {
      v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      v22 = v38;
      outlined init with take of LocalePreferences?((uint64_t)v16, v38, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      v47 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      v23 = v39;
      v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
      v25 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v26 = v40;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    outlined destroy of Any?(v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v24);
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v45 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    v27 = v44;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    v28 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v28);
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v27);
  }
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys>);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys>);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys>);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v43 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v43 - v20;
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  v60 = v9;
  v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
    goto LABEL_9;
  v44 = v15;
  v45 = v18;
  v46 = v12;
  v47 = v21;
  v25 = v57;
  v24 = v58;
  v26 = v59;
  v27 = v60;
  v62 = v10;
  v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v30 = v24;
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v33 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC450], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v30);
LABEL_9:
    v38 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v38);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
      v29 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Currency and conformance FloatingPointFormatStyle<A>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
      v36 = (uint64_t)v44;
      v37 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
      v38 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
      v34 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
      v36 = (uint64_t)v46;
      v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v24);
      swift_storeEnumTagMultiPayload();
      v38 = (uint64_t)v61;
    }
  }
  else
  {
    v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    v36 = (uint64_t)v45;
    v39 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v24);
    v38 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature(v36, (uint64_t)v47, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature(v42, v54, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>(Swift::Int *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t result;
  Swift::String v4;

  v4 = String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.format(_:)(*a1);
  result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(_QWORD, __n128))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x79636E6572727563;
  if (*v0 != 1)
    v1 = 0x746E6563726570;
  if (*v0)
    return v1;
  else
    return 0x7265626D756ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(_QWORD *a1)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String result;
  uint64_t v28;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v14, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v22 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v17 = specialized FloatingPointFormatStyle.format(_:)();
    v19 = v23;
    v20 = (uint64_t)v11;
LABEL_6:
    v21 = v22;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v22 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    v17 = specialized FloatingPointFormatStyle.Percent.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
    v19 = v24;
    v20 = (uint64_t)v5;
    goto LABEL_6;
  }
  outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  v17 = specialized FloatingPointFormatStyle.Percent.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
  v19 = v18;
  v20 = (uint64_t)v8;
  v21 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_7:
  outlined destroy of Any?(v20, v21);
  v25 = v17;
  v26 = v19;
  result._object = v26;
  result._countAndFlagsBits = v25;
  return result;
}

uint64_t specialized FloatingPointFormatStyle.format(_:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[20];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!specialized static ICUNumberFormatter.create<A>(for:)(v0, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>))return Double.description.getter();
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  v1 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  MEMORY[0x1E0C80A78](v1);
  v7[17] = 0;
  v2 = unumf_resultToString();
  if (v2 <= 0)
  {
    swift_release();
    swift_release();
    return Double.description.getter();
  }
  v3 = specialized String.init(_utf16:)((uint64_t)v7, v2);
  v5 = v4;
  swift_release();
  swift_release();
  if (!v5)
    return Double.description.getter();
  return v3;
}

uint64_t specialized FloatingPointFormatStyle.Currency.format(_:)()
{
  return specialized FloatingPointFormatStyle.Percent.format(_:)((uint64_t (*)(uint64_t))specialized static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t specialized FloatingPointFormatStyle.Percent.format(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[20];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a1(v1))
    return Double.description.getter();
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  v2 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  MEMORY[0x1E0C80A78](v2);
  v8[17] = 0;
  v3 = unumf_resultToString();
  if (v3 <= 0)
  {
    swift_release();
    swift_release();
    return Double.description.getter();
  }
  v4 = specialized String.init(_utf16:)((uint64_t)v8, v3);
  v6 = v5;
  swift_release();
  swift_release();
  if (!v6)
    return Double.description.getter();
  return v4;
}

uint64_t specialized FloatingPointFormatStyle.Percent.format(_:)()
{
  return specialized FloatingPointFormatStyle.Percent.format(_:)(specialized static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(_QWORD, __n128)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a6;
  v46 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v44 = (uint64_t)&v43 - v14;
  v47 = a3;
  v15 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - v19;
  v45 = a4;
  v21 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1E0C80A78](v21);
  v23 = (uint64_t *)((char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v43 - v26;
  v28 = a5(0, v25);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v43 - v29;
  v31 = *a1;
  v49 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature(v48, (uint64_t)&v43 - v29, (uint64_t (*)(_QWORD))a5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v33 = v47;
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v20, v47);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)v17, v33);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v34 = v49;
      *v17 = v31;
      v17[1] = v34;
      outlined destroy of Any?((uint64_t)v20, v33);
      v35 = (uint64_t)v17;
    }
    else
    {
      v40 = v44;
      v33 = v46;
      outlined init with take of LocalePreferences?((uint64_t)v30, v44, v46);
      outlined init with copy of (Hashable & Sendable)?(v40, (uint64_t)v12, v33);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v41 = v49;
      *v12 = v31;
      v12[1] = v41;
      outlined destroy of Any?(v40, v33);
      v35 = (uint64_t)v12;
    }
    v38 = v50;
    v39 = v33;
  }
  else
  {
    v36 = v45;
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v27, v45);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v27, (uint64_t)v23, v36);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v37 = v49;
    *v23 = v31;
    v23[1] = v37;
    outlined destroy of Any?((uint64_t)v27, v36);
    v35 = (uint64_t)v23;
    v38 = v50;
    v39 = v36;
  }
  outlined init with take of LocalePreferences?(v35, v38, v39);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      v18 = (uint64_t)v9;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      v18 = (uint64_t)v6;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    v18 = (uint64_t)v12;
    v19 = type metadata accessor for NSDecimal.FormatStyle;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t (*v21)(uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x1E0C80A78](v2);
  v40 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v38);
  v39 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v34);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v31);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  v44 = *(_QWORD *)(v17 - 8);
  v45 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v43, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v8, type metadata accessor for NSDecimal.FormatStyle.Currency);
      v47 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      v22 = v35;
      v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      v24 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v24);
      v25 = (uint64_t)v8;
    }
    else
    {
      v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v27 = v39;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, v39, type metadata accessor for NSDecimal.FormatStyle.Percent);
      v48 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      v28 = v40;
      v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      v29 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v29);
      v25 = v27;
    }
  }
  else
  {
    v21 = type metadata accessor for NSDecimal.FormatStyle;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    v46 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    v23 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    v26 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v26);
    v25 = (uint64_t)v13;
  }
  outlined destroy of ICUNumberFormatter.Signature(v25, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v23);
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys>);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys>);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys>);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys>);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v43 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v43 - v20;
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  v60 = v9;
  v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
    goto LABEL_9;
  v44 = v15;
  v45 = v18;
  v46 = v12;
  v47 = v21;
  v24 = v57;
  v25 = v58;
  v27 = v59;
  v26 = v60;
  v62 = v10;
  v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v29 = v25;
    v30 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v32 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC450], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v29);
LABEL_9:
    v37 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v37);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v64 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Currency(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      v35 = (uint64_t)v44;
      v36 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      v37 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v65 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
      v33 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      v39 = (uint64_t)v46;
      v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v25);
      swift_storeEnumTagMultiPayload();
      v35 = v39;
      v37 = (uint64_t)v61;
    }
  }
  else
  {
    v63 = 0;
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    v35 = (uint64_t)v45;
    v38 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
    v37 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature(v35, (uint64_t)v47, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with take of ICUNumberFormatter.Signature(v42, v54, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>(Swift::Double *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t result;
  Swift::String v4;

  v4 = String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.format(_:)(*a1);
  result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.locale(_:)(a1, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(_QWORD, __n128))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(_QWORD *a1)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.encode(to:)(a1);
}

Swift::String __swiftcall String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(NSDecimal *a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  int EnumCaseMultiPayload;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  void *v44;
  unint64_t v45;
  Swift::String v46;
  int v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  void *v80;
  unint64_t v81;
  Swift::String v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  Swift::String v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  Swift::String v96;
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  void *v107;
  unint64_t v108;
  Swift::String v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  __int16 v119;
  __int16 v120;
  int v121;
  __int16 v122;
  __int16 v123;
  Swift::String v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  __int16 v132;
  __int16 v133;
  Swift::String v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int16 v139;
  __int16 v140;
  int v141;
  __int16 v142;
  __int16 v143;
  Swift::String v144;
  int v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;
  unint64_t v149;
  uint64_t (*v150)(uint64_t);
  uint64_t v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  unint64_t v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  Swift::String result;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  void *v170;
  unint64_t v171;
  unint64_t v172;
  _BYTE v173[20];
  uint64_t v174;
  unint64_t v175;
  _BYTE v176[140];
  unsigned int rawValue;
  __int128 v178;

  v3 = v2;
  v4 = v1;
  v5._rawValue = a1;
  v172 = (unint64_t)a1 >> 32;
  v170 = 0;
  v171 = (unint64_t)a1 >> 48;
  v169 = v1 >> 16;
  v6 = HIDWORD(v1);
  v7 = (char *)HIWORD(v1);
  v8 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v8);
  v167 = (uint64_t)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v10);
  v166 = (uint64_t)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v164);
  v165 = (uint64_t)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v168, (uint64_t)v18, v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = (_QWORD *)v166;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v18, v166, type metadata accessor for NSDecimal.FormatStyle.Currency);
      v22 = specialized static ICUCurrencyNumberFormatter.create(for:)(v21);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        v24 = v170;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v23, (uint64_t)v5._rawValue, v4, v3);
        if (!v24)
          goto LABEL_98;

        swift_release();
        v170 = 0;
      }
LABEL_6:
      rawValue = v5._rawValue;
      v25 = HIWORD(v3);
      v27 = v171;
      v26 = v172;
      LOWORD(v178) = v172;
      WORD1(v178) = v171;
      WORD2(v178) = v4;
      v28 = v169;
      WORD3(v178) = v169;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        rawValue = v5._rawValue;
        LOWORD(v178) = v26;
        WORD1(v178) = v27;
        WORD2(v178) = v4;
        WORD3(v178) = v28;
        WORD4(v178) = v6;
        WORD5(v178) = (_WORD)v7;
        HIDWORD(v178) = v3;
        if (_So9NSDecimala__isNegative_getter(&rawValue))
        {
          v111 = 5136718;
          v112 = 0xE300000000000000;
LABEL_127:
          v150 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          v151 = v166;
LABEL_140:
          outlined destroy of ICUNumberFormatter.Signature(v151, v150);
          v160 = v111;
          v161 = (void *)v112;
          goto LABEL_143;
        }
      }
      rawValue = v5._rawValue;
      LOWORD(v178) = v26;
      WORD1(v178) = v27;
      WORD2(v178) = v4;
      WORD3(v178) = v28;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (!_So9NSDecimala__length_getter(&rawValue))
      {
        v112 = 0xE100000000000000;
        v111 = 48;
        goto LABEL_127;
      }
      *(_QWORD *)v173 = 0;
      *(_QWORD *)&v173[8] = 0xE000000000000000;
      rawValue = v5._rawValue;
      LOWORD(v178) = v26;
      WORD1(v178) = v27;
      WORD2(v178) = v4;
      WORD3(v178) = v28;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_DWORD *)&v176[16] = v3;
      if ((int)_So9NSDecimala__exponent_getter(v176) >= 1)
      {
        do
        {
          LODWORD(v172) = v25;
          v29._countAndFlagsBits = 48;
          v29._object = (void *)0xE100000000000000;
          String.append(_:)(v29);
          *(_DWORD *)v176 = v5._rawValue;
          *(_WORD *)&v176[4] = v26;
          *(_WORD *)&v176[6] = v27;
          *(_WORD *)&v176[8] = v4;
          *(_WORD *)&v176[10] = v28;
          *(_WORD *)&v176[12] = v6;
          *(_WORD *)&v176[14] = (_WORD)v7;
          *(_WORD *)&v176[16] = v3;
          *(_WORD *)&v176[18] = v172;
          v30 = _So9NSDecimala__exponent_getter(v176);
          _So9NSDecimala__exponent_setter((v30 - 1), &rawValue);
          LODWORD(v5._rawValue) = rawValue;
          v26 = (unsigned __int16)v178;
          v27 = WORD1(v178);
          LOWORD(v4) = WORD2(v178);
          v28 = WORD3(v178);
          LOWORD(v6) = WORD4(v178);
          LOWORD(v7) = WORD5(v178);
          LOWORD(v3) = WORD6(v178);
          v25 = HIWORD(v178);
          *(_DWORD *)v176 = rawValue;
          *(_OWORD *)&v176[4] = v178;
        }
        while ((int)_So9NSDecimala__exponent_getter(v176) > 0);
      }
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v25;
      if (!_So9NSDecimala__exponent_getter(v176))
      {
        _So9NSDecimala__exponent_setter(1, &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        v26 = (unsigned __int16)v178;
        v27 = WORD1(v178);
        LOWORD(v4) = WORD2(v178);
        v28 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        LOWORD(v25) = HIWORD(v178);
      }
      *(_DWORD *)v176 = v5._rawValue;
      v171 = v27;
      v172 = v26;
      *(_WORD *)&v176[4] = v26;
      *(_WORD *)&v176[6] = v27;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v28;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v25;
      if (!_So9NSDecimala__length_getter(v176))
      {
        v32 = v171;
        v31 = v172;
LABEL_105:
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v31;
        *(_WORD *)&v176[6] = v32;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        v116 = v31;
        v117 = v32;
        v118 = _So9NSDecimala__exponent_getter(v176);
        v119 = v116;
        v120 = v117;
        if (v118 <= 0)
        {
          *(_DWORD *)v176 = v5._rawValue;
          *(_WORD *)&v176[4] = v116;
          v171 = v117;
          *(_WORD *)&v176[6] = v117;
          *(_WORD *)&v176[8] = v4;
          *(_WORD *)&v176[10] = v28;
          *(_WORD *)&v176[12] = v6;
          *(_WORD *)&v176[14] = (_WORD)v7;
          *(_WORD *)&v176[16] = v3;
          *(_WORD *)&v176[18] = v25;
          v121 = _So9NSDecimala__exponent_getter(v176);
          v172 = v116;
          v122 = v28;
          if (v121)
          {
            v123 = v171;
            do
            {
              v124._countAndFlagsBits = 48;
              v124._object = (void *)0xE100000000000000;
              String.append(_:)(v124);
              *(_DWORD *)v176 = v5._rawValue;
              *(_WORD *)&v176[4] = v172;
              *(_WORD *)&v176[6] = v123;
              *(_WORD *)&v176[8] = v4;
              *(_WORD *)&v176[10] = v122;
              *(_WORD *)&v176[12] = v6;
              *(_WORD *)&v176[14] = (_WORD)v7;
              *(_WORD *)&v176[16] = v3;
              *(_WORD *)&v176[18] = v25;
              v125 = _So9NSDecimala__exponent_getter(v176);
              _So9NSDecimala__exponent_setter((v125 + 1), &rawValue);
              LODWORD(v5._rawValue) = rawValue;
              v123 = WORD1(v178);
              LOWORD(v4) = WORD2(v178);
              v122 = WORD3(v178);
              LOWORD(v6) = WORD4(v178);
              LOWORD(v7) = WORD5(v178);
              LOWORD(v3) = WORD6(v178);
              LOWORD(v25) = HIWORD(v178);
              *(_DWORD *)v176 = rawValue;
              v172 = (unsigned __int16)v178;
              *(_OWORD *)&v176[4] = v178;
            }
            while (_So9NSDecimala__exponent_getter(v176));
          }
          else
          {
            v123 = v171;
          }
          v146._countAndFlagsBits = 46;
          v146._object = (void *)0xE100000000000000;
          String.append(_:)(v146);
          v147._countAndFlagsBits = 48;
          v147._object = (void *)0xE100000000000000;
          String.append(_:)(v147);
          LOWORD(v28) = v122;
          v119 = v172;
          v120 = v123;
        }
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v119;
        *(_WORD *)&v176[6] = v120;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        if (_So9NSDecimala__isNegative_getter(v176))
        {
          v148._countAndFlagsBits = 45;
          v148._object = (void *)0xE100000000000000;
          String.append(_:)(v148);
        }
        *(_QWORD *)v176 = *(_QWORD *)v173;
        *(_QWORD *)&v176[8] = *(_QWORD *)&v173[8];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
        v111 = String.init<A>(_:)();
        v112 = v149;
        goto LABEL_127;
      }
      v32 = v171;
      v31 = v172;
      while (1)
      {
        v171 = v32;
        v172 = v31;
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v31;
        *(_WORD *)&v176[6] = v32;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        if (!_So9NSDecimala__exponent_getter(v176))
        {
          v169 = v28;
          v33._countAndFlagsBits = 46;
          v33._object = (void *)0xE100000000000000;
          String.append(_:)(v33);
          LOWORD(v28) = v169;
        }
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v172;
        *(_WORD *)&v176[6] = v171;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v28;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v25;
        v34 = _So9NSDecimala__exponent_getter(v176);
        _So9NSDecimala__exponent_setter((v34 + 1), &rawValue);
        v35 = rawValue;
        v36 = (char *)(unsigned __int16)v178;
        LOWORD(v6) = WORD1(v178);
        v171 = WORD3(v178);
        v172 = WORD2(v178);
        v169 = WORD4(v178);
        v167 = WORD5(v178);
        LODWORD(v168) = WORD6(v178);
        LODWORD(v165) = HIWORD(v178);
        NSDecimal.asVariableLengthInteger()(rawValue | ((unint64_t)(unsigned __int16)v178 << 32) | ((unint64_t)WORD1(v178) << 48), WORD2(v178) | ((unint64_t)WORD3(v178) << 16) | ((unint64_t)WORD4(v178) << 32) | ((unint64_t)WORD5(v178) << 48), WORD6(v178) | (HIWORD(v178) << 16));
        v38 = v37;
        v4 = *(_QWORD *)(v37 + 16);
        if (!v4)
          break;
        v163 = v36;
        v164 = v35;
        v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v7 = (char *)v5._rawValue + 30;
        *((_QWORD *)v5._rawValue + 2) = v4;
        v24 = (void *)(2 * v4);
        bzero((char *)v5._rawValue + 32, 2 * v4);
        v39 = *(unsigned __int16 *)(2 * v4 + v38 + 30);
        LOWORD(v40) = *(_WORD *)(2 * v4 + v38 + 30) / 0xAu;
        while (1)
        {
          *(_WORD *)&v7[2 * v4] = v40;
          v3 = v39 % 0xA;
          if (v4 == 1)
            break;
          v39 = *(unsigned __int16 *)(v38 + 28 + 2 * v4) | (v3 << 16);
          v40 = v39 / 0xA;
          v41 = v4 - 2;
          --v4;
          if (v41 >= *((_QWORD *)v5._rawValue + 2))
          {
            __break(1u);
            goto LABEL_96;
          }
        }
        LOWORD(v36) = (_WORD)v163;
        LODWORD(v35) = v164;
        v42 = *((_QWORD *)v5._rawValue + 2);
        if (v42)
          goto LABEL_24;
LABEL_27:
        swift_bridgeObjectRelease();
        *(_DWORD *)v176 = v35;
        *(_WORD *)&v176[4] = (_WORD)v36;
        *(_WORD *)&v176[6] = v6;
        *(_WORD *)&v176[8] = v172;
        *(_WORD *)&v176[10] = v171;
        *(_WORD *)&v176[12] = v169;
        *(_WORD *)&v176[14] = v167;
        *(_WORD *)&v176[16] = (_WORD)v168;
        *(_WORD *)&v176[18] = v165;
        NSDecimal.copyVariableLengthInteger(_:)(v5);
        v170 = v44;
        if (v44)
          goto LABEL_141;
        v45 = *((_QWORD *)v5._rawValue + 2);
        swift_bridgeObjectRelease();
        if (HIDWORD(v45))
          goto LABEL_142;
        _So9NSDecimala__length_setter(v45, v176);
        rawValue = *(_DWORD *)v176;
        v178 = *(_OWORD *)&v176[4];
        *(_QWORD *)v176 = v3 | 0x30;
        v46._countAndFlagsBits = MEMORY[0x186DA46D0](v176, 1);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        LODWORD(v5._rawValue) = rawValue;
        v171 = WORD1(v178);
        v172 = (unsigned __int16)v178;
        LOWORD(v4) = WORD2(v178);
        v28 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        LOWORD(v25) = HIWORD(v178);
        *(_DWORD *)v176 = rawValue;
        *(_OWORD *)&v176[4] = v178;
        v47 = _So9NSDecimala__length_getter(v176);
        v32 = v171;
        v31 = v172;
        if (!v47)
          goto LABEL_105;
      }
      v3 = 0;
      v5._rawValue = (void *)MEMORY[0x1E0DEE9D8];
      v42 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v42)
        goto LABEL_27;
LABEL_24:
      if (!*((_WORD *)v5._rawValue + v42 + 15))
      {
        do
        {
          *((_QWORD *)v5._rawValue + 2) = v42 - 1;
          if (v42 == 1)
            break;
        }
        while (!*((unsigned __int16 *)v5._rawValue + v42-- + 14));
      }
      goto LABEL_27;
    }
    v84 = v167;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v18, v167, type metadata accessor for NSDecimal.FormatStyle.Percent);
    type metadata accessor for ICUPercentNumberFormatter();
    v85 = static ICUPercentNumberFormatter.create(for:)(v84);
    if (v85)
    {
      v86 = *(_QWORD *)(v85 + 16);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      v87 = v170;
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v86, (uint64_t)v5._rawValue, v4, v3);
      if (v87)
      {

        swift_release();
        v170 = 0;
      }
      else
      {
        v170 = 0;
        v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
        v112 = v115;
        swift_release();
        swift_release();
        if (v112)
          goto LABEL_139;
      }
    }
    rawValue = v5._rawValue;
    v88 = HIWORD(v3);
    v90 = v171;
    v89 = v172;
    LOWORD(v178) = v172;
    WORD1(v178) = v171;
    WORD2(v178) = v4;
    v91 = v169;
    WORD3(v178) = v169;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      rawValue = v5._rawValue;
      LOWORD(v178) = v89;
      WORD1(v178) = v90;
      WORD2(v178) = v4;
      WORD3(v178) = v91;
      WORD4(v178) = v6;
      WORD5(v178) = (_WORD)v7;
      HIDWORD(v178) = v3;
      if (_So9NSDecimala__isNegative_getter(&rawValue))
      {
        v111 = 5136718;
        v112 = 0xE300000000000000;
LABEL_139:
        v150 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        v151 = v167;
        goto LABEL_140;
      }
    }
    rawValue = v5._rawValue;
    LOWORD(v178) = v89;
    WORD1(v178) = v90;
    WORD2(v178) = v4;
    WORD3(v178) = v91;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    if (!_So9NSDecimala__length_getter(&rawValue))
    {
      v112 = 0xE100000000000000;
      v111 = 48;
      goto LABEL_139;
    }
    *(_QWORD *)v173 = 0;
    *(_QWORD *)&v173[8] = 0xE000000000000000;
    rawValue = v5._rawValue;
    LOWORD(v178) = v89;
    WORD1(v178) = v90;
    WORD2(v178) = v4;
    WORD3(v178) = v91;
    WORD4(v178) = v6;
    WORD5(v178) = (_WORD)v7;
    HIDWORD(v178) = v3;
    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_DWORD *)&v176[16] = v3;
    if ((int)_So9NSDecimala__exponent_getter(v176) >= 1)
    {
      do
      {
        LODWORD(v172) = v88;
        v92._countAndFlagsBits = 48;
        v92._object = (void *)0xE100000000000000;
        String.append(_:)(v92);
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v89;
        *(_WORD *)&v176[6] = v90;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v91;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v172;
        v93 = _So9NSDecimala__exponent_getter(v176);
        _So9NSDecimala__exponent_setter((v93 - 1), &rawValue);
        LODWORD(v5._rawValue) = rawValue;
        v89 = (unsigned __int16)v178;
        v90 = WORD1(v178);
        LOWORD(v4) = WORD2(v178);
        v91 = WORD3(v178);
        LOWORD(v6) = WORD4(v178);
        LOWORD(v7) = WORD5(v178);
        LOWORD(v3) = WORD6(v178);
        v88 = HIWORD(v178);
        *(_DWORD *)v176 = rawValue;
        *(_OWORD *)&v176[4] = v178;
      }
      while ((int)_So9NSDecimala__exponent_getter(v176) > 0);
    }
    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_WORD *)&v176[16] = v3;
    *(_WORD *)&v176[18] = v88;
    if (!_So9NSDecimala__exponent_getter(v176))
    {
      _So9NSDecimala__exponent_setter(1, &rawValue);
      LODWORD(v5._rawValue) = rawValue;
      v89 = (unsigned __int16)v178;
      v90 = WORD1(v178);
      LOWORD(v4) = WORD2(v178);
      v91 = WORD3(v178);
      LOWORD(v6) = WORD4(v178);
      LOWORD(v7) = WORD5(v178);
      LOWORD(v3) = WORD6(v178);
      LOWORD(v88) = HIWORD(v178);
    }
    *(_DWORD *)v176 = v5._rawValue;
    v171 = v90;
    v172 = v89;
    *(_WORD *)&v176[4] = v89;
    *(_WORD *)&v176[6] = v90;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v91;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_WORD *)&v176[16] = v3;
    *(_WORD *)&v176[18] = v88;
    if (!_So9NSDecimala__length_getter(v176))
    {
      v95 = v171;
      v94 = v172;
LABEL_117:
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v94;
      *(_WORD *)&v176[6] = v95;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      v136 = v94;
      v137 = v95;
      v138 = _So9NSDecimala__exponent_getter(v176);
      v139 = v136;
      v140 = v137;
      if (v138 <= 0)
      {
        *(_DWORD *)v176 = v5._rawValue;
        *(_WORD *)&v176[4] = v136;
        v171 = v137;
        *(_WORD *)&v176[6] = v137;
        *(_WORD *)&v176[8] = v4;
        *(_WORD *)&v176[10] = v91;
        *(_WORD *)&v176[12] = v6;
        *(_WORD *)&v176[14] = (_WORD)v7;
        *(_WORD *)&v176[16] = v3;
        *(_WORD *)&v176[18] = v88;
        v141 = _So9NSDecimala__exponent_getter(v176);
        v172 = v136;
        v142 = v91;
        if (v141)
        {
          v143 = v171;
          do
          {
            v144._countAndFlagsBits = 48;
            v144._object = (void *)0xE100000000000000;
            String.append(_:)(v144);
            *(_DWORD *)v176 = v5._rawValue;
            *(_WORD *)&v176[4] = v172;
            *(_WORD *)&v176[6] = v143;
            *(_WORD *)&v176[8] = v4;
            *(_WORD *)&v176[10] = v142;
            *(_WORD *)&v176[12] = v6;
            *(_WORD *)&v176[14] = (_WORD)v7;
            *(_WORD *)&v176[16] = v3;
            *(_WORD *)&v176[18] = v88;
            v145 = _So9NSDecimala__exponent_getter(v176);
            _So9NSDecimala__exponent_setter((v145 + 1), &rawValue);
            LODWORD(v5._rawValue) = rawValue;
            v143 = WORD1(v178);
            LOWORD(v4) = WORD2(v178);
            v142 = WORD3(v178);
            LOWORD(v6) = WORD4(v178);
            LOWORD(v7) = WORD5(v178);
            LOWORD(v3) = WORD6(v178);
            LOWORD(v88) = HIWORD(v178);
            *(_DWORD *)v176 = rawValue;
            v172 = (unsigned __int16)v178;
            *(_OWORD *)&v176[4] = v178;
          }
          while (_So9NSDecimala__exponent_getter(v176));
        }
        else
        {
          v143 = v171;
        }
        v156._countAndFlagsBits = 46;
        v156._object = (void *)0xE100000000000000;
        String.append(_:)(v156);
        v157._countAndFlagsBits = 48;
        v157._object = (void *)0xE100000000000000;
        String.append(_:)(v157);
        LOWORD(v91) = v142;
        v139 = v172;
        v140 = v143;
      }
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v139;
      *(_WORD *)&v176[6] = v140;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      if (_So9NSDecimala__isNegative_getter(v176))
      {
        v158._countAndFlagsBits = 45;
        v158._object = (void *)0xE100000000000000;
        String.append(_:)(v158);
      }
      *(_QWORD *)v176 = *(_QWORD *)v173;
      *(_QWORD *)&v176[8] = *(_QWORD *)&v173[8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
      v111 = String.init<A>(_:)();
      v112 = v159;
      goto LABEL_139;
    }
    v95 = v171;
    v94 = v172;
    while (1)
    {
      v171 = v95;
      v172 = v94;
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v94;
      *(_WORD *)&v176[6] = v95;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      if (!_So9NSDecimala__exponent_getter(v176))
      {
        v169 = v91;
        v96._countAndFlagsBits = 46;
        v96._object = (void *)0xE100000000000000;
        String.append(_:)(v96);
        LOWORD(v91) = v169;
      }
      *(_DWORD *)v176 = v5._rawValue;
      *(_WORD *)&v176[4] = v172;
      *(_WORD *)&v176[6] = v171;
      *(_WORD *)&v176[8] = v4;
      *(_WORD *)&v176[10] = v91;
      *(_WORD *)&v176[12] = v6;
      *(_WORD *)&v176[14] = (_WORD)v7;
      *(_WORD *)&v176[16] = v3;
      *(_WORD *)&v176[18] = v88;
      v97 = _So9NSDecimala__exponent_getter(v176);
      _So9NSDecimala__exponent_setter((v97 + 1), &rawValue);
      v98 = rawValue;
      v99 = (char *)(unsigned __int16)v178;
      LOWORD(v6) = WORD1(v178);
      v171 = WORD3(v178);
      v172 = WORD2(v178);
      v169 = WORD4(v178);
      v166 = WORD5(v178);
      LODWORD(v168) = WORD6(v178);
      LODWORD(v165) = HIWORD(v178);
      NSDecimal.asVariableLengthInteger()(rawValue | ((unint64_t)(unsigned __int16)v178 << 32) | ((unint64_t)WORD1(v178) << 48), WORD2(v178) | ((unint64_t)WORD3(v178) << 16) | ((unint64_t)WORD4(v178) << 32) | ((unint64_t)WORD5(v178) << 48), WORD6(v178) | (HIWORD(v178) << 16));
      v101 = v100;
      v4 = *(_QWORD *)(v100 + 16);
      if (!v4)
        break;
      v163 = v99;
      v164 = v98;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7 = (char *)v5._rawValue + 30;
      *((_QWORD *)v5._rawValue + 2) = v4;
      v24 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      v102 = *(unsigned __int16 *)(2 * v4 + v101 + 30);
      LOWORD(v103) = *(_WORD *)(2 * v4 + v101 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v103;
        v3 = v102 % 0xA;
        if (v4 == 1)
          break;
        v102 = *(unsigned __int16 *)(v101 + 28 + 2 * v4) | (v3 << 16);
        v103 = v102 / 0xA;
        v104 = v4 - 2;
        --v4;
        if (v104 >= *((_QWORD *)v5._rawValue + 2))
          goto LABEL_97;
      }
      LOWORD(v99) = (_WORD)v163;
      LODWORD(v98) = v164;
      v105 = *((_QWORD *)v5._rawValue + 2);
      if (v105)
        goto LABEL_80;
LABEL_83:
      swift_bridgeObjectRelease();
      *(_DWORD *)v176 = v98;
      *(_WORD *)&v176[4] = (_WORD)v99;
      *(_WORD *)&v176[6] = v6;
      *(_WORD *)&v176[8] = v172;
      *(_WORD *)&v176[10] = v171;
      *(_WORD *)&v176[12] = v169;
      *(_WORD *)&v176[14] = v166;
      *(_WORD *)&v176[16] = (_WORD)v168;
      *(_WORD *)&v176[18] = v165;
      NSDecimal.copyVariableLengthInteger(_:)(v5);
      v170 = v107;
      if (v107)
        goto LABEL_141;
      v108 = *((_QWORD *)v5._rawValue + 2);
      swift_bridgeObjectRelease();
      if (HIDWORD(v108))
        goto LABEL_142;
      _So9NSDecimala__length_setter(v108, v176);
      rawValue = *(_DWORD *)v176;
      v178 = *(_OWORD *)&v176[4];
      *(_QWORD *)v176 = v3 | 0x30;
      v109._countAndFlagsBits = MEMORY[0x186DA46D0](v176, 1);
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      LODWORD(v5._rawValue) = rawValue;
      v171 = WORD1(v178);
      v172 = (unsigned __int16)v178;
      LOWORD(v4) = WORD2(v178);
      v91 = WORD3(v178);
      LOWORD(v6) = WORD4(v178);
      LOWORD(v7) = WORD5(v178);
      LOWORD(v3) = WORD6(v178);
      LOWORD(v88) = HIWORD(v178);
      *(_DWORD *)v176 = rawValue;
      *(_OWORD *)&v176[4] = v178;
      v110 = _So9NSDecimala__length_getter(v176);
      v95 = v171;
      v94 = v172;
      if (!v110)
        goto LABEL_117;
    }
    v3 = 0;
    v5._rawValue = (void *)MEMORY[0x1E0DEE9D8];
    v105 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v105)
      goto LABEL_83;
LABEL_80:
    if (!*((_WORD *)v5._rawValue + v105 + 15))
    {
      do
      {
        *((_QWORD *)v5._rawValue + 2) = v105 - 1;
        if (v105 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v5._rawValue + v105-- + 14));
    }
    goto LABEL_83;
  }
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v18, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle);
  v168 = &v15[*(int *)(v13 + 20)];
  v48 = *((_QWORD *)v15 + 1);
  v163 = v15;
  ObjectType = swift_getObjectType();
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 472);
  swift_unknownObjectRetain();
  v51 = v50(ObjectType, v48);
  v166 = v52;
  v167 = v51;
  swift_unknownObjectRelease();
  v53 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v48 + 464);
  swift_unknownObjectRetain();
  v53(v176, ObjectType, v48);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)&rawValue, &demangling cache variable for type metadata for LocalePreferences?);
  v54 = v165;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v168, v165, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v55 = v164;
  v56 = (_QWORD *)(v54 + *(int *)(v164 + 20));
  v57 = v166;
  *v56 = v167;
  v56[1] = v57;
  outlined init with take of LocalePreferences?((uint64_t)&rawValue, v54 + *(int *)(v55 + 24), &demangling cache variable for type metadata for LocalePreferences?);
  v58 = specialized static ICUNumberFormatter._create(with:)(v54);
  outlined destroy of ICUNumberFormatter.Signature(v54, type metadata accessor for ICUNumberFormatter.Signature);
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v60 = v170;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v59, (uint64_t)v5._rawValue, v4, v3);
    if (v60)
    {

      swift_release();
      v170 = 0;
    }
    else
    {
      v170 = 0;
      v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
      v112 = v114;
      swift_release();
      swift_release();
      if (v112)
        goto LABEL_133;
    }
  }
  *(_DWORD *)v176 = v5._rawValue;
  v61 = HIWORD(v3);
  v63 = v171;
  v62 = v172;
  *(_WORD *)&v176[4] = v172;
  *(_WORD *)&v176[6] = v171;
  *(_WORD *)&v176[8] = v4;
  v64 = v169;
  *(_WORD *)&v176[10] = v169;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  if (!_So9NSDecimala__length_getter(v176))
  {
    *(_DWORD *)v176 = v5._rawValue;
    *(_WORD *)&v176[4] = v62;
    *(_WORD *)&v176[6] = v63;
    *(_WORD *)&v176[8] = v4;
    *(_WORD *)&v176[10] = v64;
    *(_WORD *)&v176[12] = v6;
    *(_WORD *)&v176[14] = (_WORD)v7;
    *(_DWORD *)&v176[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v176))
    {
      v111 = 5136718;
      v112 = 0xE300000000000000;
LABEL_133:
      v151 = (uint64_t)v163;
      v150 = type metadata accessor for NSDecimal.FormatStyle;
      goto LABEL_140;
    }
  }
  *(_DWORD *)v176 = v5._rawValue;
  *(_WORD *)&v176[4] = v62;
  *(_WORD *)&v176[6] = v63;
  *(_WORD *)&v176[8] = v4;
  *(_WORD *)&v176[10] = v64;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  if (!_So9NSDecimala__length_getter(v176))
  {
    v112 = 0xE100000000000000;
    v111 = 48;
    goto LABEL_133;
  }
  v174 = 0;
  v175 = 0xE000000000000000;
  *(_DWORD *)v176 = v5._rawValue;
  *(_WORD *)&v176[4] = v62;
  *(_WORD *)&v176[6] = v63;
  *(_WORD *)&v176[8] = v4;
  *(_WORD *)&v176[10] = v64;
  *(_WORD *)&v176[12] = v6;
  *(_WORD *)&v176[14] = (_WORD)v7;
  *(_DWORD *)&v176[16] = v3;
  *(_DWORD *)v173 = v5._rawValue;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_DWORD *)&v173[16] = v3;
  if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
  {
    do
    {
      LODWORD(v172) = v61;
      v65._countAndFlagsBits = 48;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
      *(_DWORD *)v173 = v5._rawValue;
      *(_WORD *)&v173[4] = v62;
      *(_WORD *)&v173[6] = v63;
      *(_WORD *)&v173[8] = v4;
      *(_WORD *)&v173[10] = v64;
      *(_WORD *)&v173[12] = v6;
      *(_WORD *)&v173[14] = (_WORD)v7;
      *(_WORD *)&v173[16] = v3;
      *(_WORD *)&v173[18] = v172;
      v66 = _So9NSDecimala__exponent_getter(v173);
      _So9NSDecimala__exponent_setter((v66 - 1), v176);
      LODWORD(v5._rawValue) = *(_DWORD *)v176;
      v62 = *(unsigned __int16 *)&v176[4];
      v63 = *(unsigned __int16 *)&v176[6];
      LOWORD(v4) = *(_WORD *)&v176[8];
      v64 = *(unsigned __int16 *)&v176[10];
      LOWORD(v6) = *(_WORD *)&v176[12];
      LOWORD(v7) = *(_WORD *)&v176[14];
      LOWORD(v3) = *(_WORD *)&v176[16];
      v61 = *(unsigned __int16 *)&v176[18];
      *(_DWORD *)v173 = *(_DWORD *)v176;
      *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
      *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
      *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
      *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
      *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
      *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
      *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
      *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
  }
  *(_DWORD *)v173 = v5._rawValue;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_WORD *)&v173[16] = v3;
  *(_WORD *)&v173[18] = v61;
  if (!_So9NSDecimala__exponent_getter(v173))
  {
    _So9NSDecimala__exponent_setter(1, v176);
    LODWORD(v5._rawValue) = *(_DWORD *)v176;
    v62 = *(unsigned __int16 *)&v176[4];
    v63 = *(unsigned __int16 *)&v176[6];
    LOWORD(v4) = *(_WORD *)&v176[8];
    v64 = *(unsigned __int16 *)&v176[10];
    LOWORD(v6) = *(_WORD *)&v176[12];
    LOWORD(v7) = *(_WORD *)&v176[14];
    LOWORD(v3) = *(_WORD *)&v176[16];
    LOWORD(v61) = *(_WORD *)&v176[18];
  }
  *(_DWORD *)v173 = v5._rawValue;
  v171 = v63;
  v172 = v62;
  *(_WORD *)&v173[4] = v62;
  *(_WORD *)&v173[6] = v63;
  *(_WORD *)&v173[8] = v4;
  *(_WORD *)&v173[10] = v64;
  *(_WORD *)&v173[12] = v6;
  *(_WORD *)&v173[14] = (_WORD)v7;
  *(_WORD *)&v173[16] = v3;
  *(_WORD *)&v173[18] = v61;
  if (!_So9NSDecimala__length_getter(v173))
  {
    v68 = v171;
    v67 = v172;
LABEL_111:
    *(_DWORD *)v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v67;
    *(_WORD *)&v173[6] = v68;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    v126 = v67;
    v127 = v68;
    v128 = _So9NSDecimala__exponent_getter(v173);
    v129 = v126;
    v130 = v127;
    if (v128 <= 0)
    {
      *(_DWORD *)v173 = v5._rawValue;
      *(_WORD *)&v173[4] = v126;
      v171 = v127;
      *(_WORD *)&v173[6] = v127;
      *(_WORD *)&v173[8] = v4;
      *(_WORD *)&v173[10] = v64;
      *(_WORD *)&v173[12] = v6;
      *(_WORD *)&v173[14] = (_WORD)v7;
      *(_WORD *)&v173[16] = v3;
      *(_WORD *)&v173[18] = v61;
      v131 = _So9NSDecimala__exponent_getter(v173);
      v172 = v126;
      v132 = v64;
      if (v131)
      {
        v133 = v171;
        do
        {
          v134._countAndFlagsBits = 48;
          v134._object = (void *)0xE100000000000000;
          String.append(_:)(v134);
          *(_DWORD *)v173 = v5._rawValue;
          *(_WORD *)&v173[4] = v172;
          *(_WORD *)&v173[6] = v133;
          *(_WORD *)&v173[8] = v4;
          *(_WORD *)&v173[10] = v132;
          *(_WORD *)&v173[12] = v6;
          *(_WORD *)&v173[14] = (_WORD)v7;
          *(_WORD *)&v173[16] = v3;
          *(_WORD *)&v173[18] = v61;
          v135 = _So9NSDecimala__exponent_getter(v173);
          _So9NSDecimala__exponent_setter((v135 + 1), v176);
          LODWORD(v5._rawValue) = *(_DWORD *)v176;
          v133 = *(_WORD *)&v176[6];
          LOWORD(v4) = *(_WORD *)&v176[8];
          v132 = *(_WORD *)&v176[10];
          LOWORD(v6) = *(_WORD *)&v176[12];
          LOWORD(v7) = *(_WORD *)&v176[14];
          LOWORD(v3) = *(_WORD *)&v176[16];
          LOWORD(v61) = *(_WORD *)&v176[18];
          *(_DWORD *)v173 = *(_DWORD *)v176;
          v172 = *(unsigned __int16 *)&v176[4];
          *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
          *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
          *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
          *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
          *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
          *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
          *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
          *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
        }
        while (_So9NSDecimala__exponent_getter(v173));
      }
      else
      {
        v133 = v171;
      }
      v152._countAndFlagsBits = 46;
      v152._object = (void *)0xE100000000000000;
      String.append(_:)(v152);
      v153._countAndFlagsBits = 48;
      v153._object = (void *)0xE100000000000000;
      String.append(_:)(v153);
      LOWORD(v64) = v132;
      v129 = v172;
      v130 = v133;
    }
    *(_DWORD *)v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v129;
    *(_WORD *)&v173[6] = v130;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    if (_So9NSDecimala__isNegative_getter(v173))
    {
      v154._countAndFlagsBits = 45;
      v154._object = (void *)0xE100000000000000;
      String.append(_:)(v154);
    }
    *(_QWORD *)v173 = v174;
    *(_QWORD *)&v173[8] = v175;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v111 = String.init<A>(_:)();
    v112 = v155;
    goto LABEL_133;
  }
  v68 = v171;
  v67 = v172;
  while (1)
  {
    v171 = v68;
    v172 = v67;
    *(_DWORD *)v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v67;
    *(_WORD *)&v173[6] = v68;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    if (!_So9NSDecimala__exponent_getter(v173))
    {
      v169 = v64;
      v69._countAndFlagsBits = 46;
      v69._object = (void *)0xE100000000000000;
      String.append(_:)(v69);
      LOWORD(v64) = v169;
    }
    *(_DWORD *)v173 = v5._rawValue;
    *(_WORD *)&v173[4] = v172;
    *(_WORD *)&v173[6] = v171;
    *(_WORD *)&v173[8] = v4;
    *(_WORD *)&v173[10] = v64;
    *(_WORD *)&v173[12] = v6;
    *(_WORD *)&v173[14] = (_WORD)v7;
    *(_WORD *)&v173[16] = v3;
    *(_WORD *)&v173[18] = v61;
    v70 = _So9NSDecimala__exponent_getter(v173);
    _So9NSDecimala__exponent_setter((v70 + 1), v176);
    v71 = *(unsigned int *)v176;
    v72 = *(unsigned __int16 *)&v176[4];
    LOWORD(v6) = *(_WORD *)&v176[6];
    v171 = *(unsigned __int16 *)&v176[10];
    v172 = *(unsigned __int16 *)&v176[8];
    v169 = *(unsigned __int16 *)&v176[12];
    v167 = *(unsigned __int16 *)&v176[14];
    LODWORD(v168) = *(unsigned __int16 *)&v176[16];
    LODWORD(v166) = *(unsigned __int16 *)&v176[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v176 | ((unint64_t)*(unsigned __int16 *)&v176[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v176[6] << 48), *(unsigned __int16 *)&v176[8] | ((unint64_t)*(unsigned __int16 *)&v176[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v176[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v176[14] << 48), *(unsigned __int16 *)&v176[16] | (*(unsigned __int16 *)&v176[18] << 16));
    v74 = v73;
    v4 = *(_QWORD *)(v73 + 16);
    if (v4)
    {
      v164 = v72;
      v165 = v71;
      v5._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7 = (char *)v5._rawValue + 30;
      *((_QWORD *)v5._rawValue + 2) = v4;
      v24 = (void *)(2 * v4);
      bzero((char *)v5._rawValue + 32, 2 * v4);
      v75 = *(unsigned __int16 *)(2 * v4 + v74 + 30);
      LOWORD(v76) = *(_WORD *)(2 * v4 + v74 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v7[2 * v4] = v76;
        v3 = v75 % 0xA;
        if (v4 == 1)
          break;
        v75 = *(unsigned __int16 *)(v74 + 28 + 2 * v4) | (v3 << 16);
        v76 = v75 / 0xA;
        v77 = v4 - 2;
        --v4;
        if (v77 >= *((_QWORD *)v5._rawValue + 2))
        {
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          v170 = v24;
          v111 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
          v112 = v113;
          swift_release();
          swift_release();
          if (!v112)
            goto LABEL_6;
          goto LABEL_127;
        }
      }
      LOWORD(v72) = v164;
      LODWORD(v71) = v165;
      v78 = *((_QWORD *)v5._rawValue + 2);
      if (!v78)
        goto LABEL_55;
    }
    else
    {
      v3 = 0;
      v5._rawValue = (void *)MEMORY[0x1E0DEE9D8];
      v78 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v78)
        goto LABEL_55;
    }
    if (!*((_WORD *)v5._rawValue + v78 + 15))
    {
      do
      {
        *((_QWORD *)v5._rawValue + 2) = v78 - 1;
        if (v78 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v5._rawValue + v78-- + 14));
    }
LABEL_55:
    swift_bridgeObjectRelease();
    *(_DWORD *)v173 = v71;
    *(_WORD *)&v173[4] = v72;
    *(_WORD *)&v173[6] = v6;
    *(_WORD *)&v173[8] = v172;
    *(_WORD *)&v173[10] = v171;
    *(_WORD *)&v173[12] = v169;
    *(_WORD *)&v173[14] = v167;
    *(_WORD *)&v173[16] = (_WORD)v168;
    *(_WORD *)&v173[18] = v166;
    NSDecimal.copyVariableLengthInteger(_:)(v5);
    v170 = v80;
    if (v80)
      break;
    v81 = *((_QWORD *)v5._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v81))
      goto LABEL_142;
    _So9NSDecimala__length_setter(v81, v173);
    *(_DWORD *)v176 = *(_DWORD *)v173;
    *(_OWORD *)&v176[4] = *(_OWORD *)&v173[4];
    *(_QWORD *)v173 = v3 | 0x30;
    v82._countAndFlagsBits = MEMORY[0x186DA46D0](v173, 1);
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    LODWORD(v5._rawValue) = *(_DWORD *)v176;
    v171 = *(unsigned __int16 *)&v176[6];
    v172 = *(unsigned __int16 *)&v176[4];
    LOWORD(v4) = *(_WORD *)&v176[8];
    v64 = *(unsigned __int16 *)&v176[10];
    LOWORD(v6) = *(_WORD *)&v176[12];
    LOWORD(v7) = *(_WORD *)&v176[14];
    LOWORD(v3) = *(_WORD *)&v176[16];
    LOWORD(v61) = *(_WORD *)&v176[18];
    *(_DWORD *)v173 = *(_DWORD *)v176;
    *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
    *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
    *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
    *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
    *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
    *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
    *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
    *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
    v83 = _So9NSDecimala__length_getter(v173);
    v68 = v171;
    v67 = v172;
    if (!v83)
      goto LABEL_111;
  }
LABEL_141:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_142:
  v160 = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_143:
  result._object = v161;
  result._countAndFlagsBits = v160;
  return result;
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v34 = (uint64_t)&v34 - v8;
  v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v34 - v13;
  v15 = type metadata accessor for NSDecimal.FormatStyle(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v34 - v19;
  v21 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  v25 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v23, v26);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v28 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v23, (uint64_t)v14, type metadata accessor for NSDecimal.FormatStyle.Currency);
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v14, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v12 = v24;
      v12[1] = v25;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v14, type metadata accessor for NSDecimal.FormatStyle.Currency);
      v29 = (uint64_t)v12;
    }
    else
    {
      v28 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v32 = v34;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v23, v34, type metadata accessor for NSDecimal.FormatStyle.Percent);
      outlined init with copy of ICUNumberFormatter.Signature(v32, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v7 = v24;
      v7[1] = v25;
      outlined destroy of ICUNumberFormatter.Signature(v32, type metadata accessor for NSDecimal.FormatStyle.Percent);
      v29 = (uint64_t)v7;
    }
    v30 = v35;
    v31 = v28;
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v23, (uint64_t)v20, type metadata accessor for NSDecimal.FormatStyle);
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v18, type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v18 = v24;
    v18[1] = v25;
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for NSDecimal.FormatStyle);
    v29 = (uint64_t)v18;
    v30 = v35;
    v31 = type metadata accessor for NSDecimal.FormatStyle;
  }
  outlined init with take of ICUNumberFormatter.Signature(v29, v30, v31);
  return swift_storeEnumTagMultiPayload();
}

uint64_t String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>(NSDecimal **a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t result;
  Swift::String v4;

  v4 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(*a1);
  result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t specialized static ICUNumberFormatter.create<A>(for:)(uint64_t a1)
{
  return specialized static ICUNumberFormatter.create<A>(for:)(a1, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
}

uint64_t specialized static ICUNumberFormatter.create<A>(for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int isUniquelyReferenced_nonNull_native;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t result;
  uint64_t v65;
  int64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  char *v75;
  _QWORD v76[18];
  _QWORD v77[20];

  v77[18] = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for ICUNumberFormatter.Signature(0);
  v72 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v73 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v75 = (char *)&v65 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v65 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  outlined init with copy of ICUNumberFormatter.Signature(a1 + *(int *)(v11 + 36), (uint64_t)v10, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v12 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 472);
  swift_unknownObjectRetain();
  v15 = v14(ObjectType, v12);
  v17 = v16;
  swift_unknownObjectRelease();
  v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 464);
  swift_unknownObjectRetain();
  v18(v76, ObjectType, v12);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  v19 = &v10[*(int *)(v4 + 20)];
  *(_QWORD *)v19 = v15;
  *((_QWORD *)v19 + 1) = v17;
  v71 = v4;
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v10[*(int *)(v4 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v21 = static ICUNumberFormatter.cache;
  v20 = qword_1EDC3D820;
  v22 = qword_1EDC3D820 + 16;
  v23 = (os_unfair_lock_s *)(qword_1EDC3D820 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v23);
  v24 = (_QWORD *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v22, (uint64_t)v10);
  v74 = v23;
  os_unfair_lock_unlock(v23);
  swift_release();
  if (v24 != (_QWORD *)1)
    goto LABEL_62;
  v70 = v21;
  v25 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  v27 = v26;
  v28 = *(_QWORD *)v19;
  type metadata accessor for ICUNumberFormatter();
  v24 = (_QWORD *)swift_allocObject();
  v24[3] = v25;
  v24[4] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v25, v27);
  swift_bridgeObjectRelease();
  LODWORD(v76[0]) = 0;
  v31 = v29[2];
  if (v31 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v32 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  v19 = (char *)v74;
  v31 = (unint64_t)v75;
  if (!v32)
    goto LABEL_8;
  if (SLODWORD(v76[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    v24 = 0;
    goto LABEL_10;
  }
  v24[2] = v32;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)v19);
  v33 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
  v69 = *(_QWORD *)(v20 + 16);
  if (v70 >= v33)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v22 = MEMORY[0x1E0DEE9E0];
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v10, v31, type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76[0] = *(_QWORD *)v22;
  v28 = v76[0];
  *(_QWORD *)v22 = 0x8000000000000000;
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
  v36 = *(_QWORD *)(v28 + 16);
  v37 = (v35 & 1) == 0;
  v38 = v36 + v37;
  if (!__OFADD__(v36, v37))
  {
    LOBYTE(v22) = v35;
    if (*(_QWORD *)(v28 + 24) < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      v39 = v76[0];
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
      if ((v22 & 1) != (v41 & 1))
        goto LABEL_65;
      v30 = v40;
LABEL_19:
      v42 = v73;
      if ((v22 & 1) != 0)
      {
LABEL_20:
        v43 = *(_QWORD *)(v39 + 56);
        v44 = 8 * v30;
        swift_release();
        *(_QWORD *)(v43 + v44) = v24;
LABEL_61:
        *(_QWORD *)(v20 + 16) = v39;
        swift_bridgeObjectRelease();
        outlined destroy of ICUNumberFormatter.Signature(v31, type metadata accessor for ICUNumberFormatter.Signature);
        os_unfair_lock_unlock((os_unfair_lock_t)v19);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of ICUDateIntervalFormatter??(1);
LABEL_62:
        swift_release();
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v10, type metadata accessor for ICUNumberFormatter.Signature);
        return (uint64_t)v24;
      }
LABEL_60:
      v63 = v30;
      outlined init with copy of ICUNumberFormatter.Signature(v31, v42, type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v63, v42, (uint64_t)v24, (_QWORD *)v39);
      goto LABEL_61;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v39 = v28;
      goto LABEL_19;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v65 = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  v45 = static _DictionaryStorage.copy(original:)();
  v39 = v45;
  if (!*(_QWORD *)(v28 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    v42 = v73;
    v30 = v65;
    if ((v22 & 1) != 0)
      goto LABEL_20;
    goto LABEL_60;
  }
  v46 = (char *)(v45 + 64);
  v47 = 1 << *(_BYTE *)(v39 + 32);
  v67 = (char *)(v28 + 64);
  v48 = (unint64_t)(v47 + 63) >> 6;
  if (v39 != v28 || v46 >= &v67[8 * v48])
    memmove(v46, v67, 8 * v48);
  v49 = 0;
  *(_QWORD *)(v39 + 16) = *(_QWORD *)(v28 + 16);
  v50 = 1 << *(_BYTE *)(v28 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & *(_QWORD *)(v28 + 64);
  v66 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    v19 = (char *)v74;
    v31 = (unint64_t)v75;
    if (v52)
    {
      v70 = (v52 - 1) & v52;
      v71 = v49;
      v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_31;
    }
    v58 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v58 >= v66)
      goto LABEL_59;
    v59 = *(_QWORD *)&v67[8 * v58];
    v60 = v49 + 1;
    if (!v59)
    {
      v60 = v58 + 1;
      if (v58 + 1 >= v66)
        goto LABEL_59;
      v59 = *(_QWORD *)&v67[8 * v60];
      if (!v59)
      {
        v60 = v58 + 2;
        if (v58 + 2 >= v66)
          goto LABEL_59;
        v59 = *(_QWORD *)&v67[8 * v60];
        if (!v59)
        {
          v60 = v58 + 3;
          if (v58 + 3 >= v66)
            goto LABEL_59;
          v59 = *(_QWORD *)&v67[8 * v60];
          if (!v59)
          {
            v60 = v58 + 4;
            if (v58 + 4 >= v66)
              goto LABEL_59;
            v59 = *(_QWORD *)&v67[8 * v60];
            if (!v59)
            {
              v60 = v58 + 5;
              if (v58 + 5 >= v66)
                goto LABEL_59;
              v59 = *(_QWORD *)&v67[8 * v60];
              if (!v59)
              {
                v60 = v58 + 6;
                if (v58 + 6 >= v66)
                  goto LABEL_59;
                v59 = *(_QWORD *)&v67[8 * v60];
                if (!v59)
                {
                  v60 = v58 + 7;
                  if (v58 + 7 >= v66)
                    goto LABEL_59;
                  v59 = *(_QWORD *)&v67[8 * v60];
                  if (!v59)
                  {
                    v60 = v58 + 8;
                    if (v58 + 8 >= v66)
                      goto LABEL_59;
                    v59 = *(_QWORD *)&v67[8 * v60];
                    if (!v59)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_58:
    v70 = (v59 - 1) & v59;
    v71 = v60;
    v53 = __clz(__rbit64(v59)) + (v60 << 6);
LABEL_31:
    v54 = *(_QWORD *)(v28 + 48);
    v55 = v73;
    v68 = *(_QWORD *)(v72 + 72) * v53;
    outlined init with copy of ICUNumberFormatter.Signature(v54 + v68, v73, type metadata accessor for ICUNumberFormatter.Signature);
    v56 = 8 * v53;
    v57 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v53);
    outlined init with take of ICUNumberFormatter.Signature(v55, *(_QWORD *)(v39 + 48) + v68, type metadata accessor for ICUNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v39 + 56) + v56) = v57;
    swift_retain();
    v52 = v70;
    v49 = v71;
  }
  v61 = v58 + 9;
  if (v61 >= v66)
    goto LABEL_59;
  v62 = v10;
  v59 = *(_QWORD *)&v67[8 * v61];
  if (v59)
  {
    v60 = v61;
    goto LABEL_58;
  }
  while (1)
  {
    v60 = v61 + 1;
    if (__OFADD__(v61, 1))
      break;
    v19 = (char *)v74;
    v31 = (unint64_t)v75;
    v10 = v62;
    if (v60 >= v66)
      goto LABEL_59;
    v59 = *(_QWORD *)&v67[8 * v60];
    ++v61;
    if (v59)
      goto LABEL_58;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUCurrencyNumberFormatter.create<A>(for:)(_QWORD *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  int64_t v62;
  char *v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  _QWORD v71[19];
  _QWORD v72[18];
  _BYTE v73[152];

  v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v66 = *((_QWORD *)v2 - 1);
  v3 = MEMORY[0x1E0C80A78](v2);
  v67 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v61 - v5;
  v69 = (uint64_t)a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
               + 40);
  v7 = a1[3];
  v70 = (int *)a1[2];
  v8 = a1[1];
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v68 = v10(ObjectType, v8);
  v12 = v11;
  swift_unknownObjectRelease();
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v13(v72, ObjectType, v8);
  v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v69, (uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v15 = &v6[v2[5]];
  *(_QWORD *)v15 = v70;
  *((_QWORD *)v15 + 1) = v7;
  v16 = (uint64_t *)&v6[v2[6]];
  *v16 = v68;
  v16[1] = v12;
  v70 = v2;
  v17 = (uint64_t)&v6[v2[7]];
  outlined init with take of LocalePreferences?((uint64_t)v73, v17, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v19 = static ICUCurrencyNumberFormatter.cache;
  v18 = *(_QWORD *)algn_1EDC41C48;
  v20 = *(_QWORD *)algn_1EDC41C48 + 16;
  v21 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC41C48 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v21);
  v22 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v20, v14);
  os_unfair_lock_unlock(v21);
  swift_release();
  if (v22 != 1)
    goto LABEL_51;
  v68 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  v69 = v19;
  v24 = v23;
  v25 = *v16;
  v26 = v16[1];
  outlined init with take of LocalePreferences?(v17, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  v22 = (uint64_t)ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v68, v24, v25, v26, (uint64_t)v71);
  swift_retain();
  os_unfair_lock_lock(v21);
  v27 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 16);
  v28 = v21;
  v68 = *(_QWORD *)(v18 + 16);
  if (v69 >= v27)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v20 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v71[0] = *(_QWORD *)v20;
  v30 = v71[0];
  *(_QWORD *)v20 = 0x8000000000000000;
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  v33 = *(_QWORD *)(v30 + 16);
  v34 = (v31 & 1) == 0;
  v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v20) = v31;
    if (*(_QWORD *)(v30 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
      v36 = v71[0];
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v20 & 1) != (v38 & 1))
        goto LABEL_54;
      v32 = v37;
      if ((v20 & 1) == 0)
        goto LABEL_49;
LABEL_14:
      v39 = *(_QWORD *)(v36 + 56);
      v40 = 8 * v32;
      swift_release();
      *(_QWORD *)(v39 + v40) = v22;
LABEL_50:
      *(_QWORD *)(v18 + 16) = v36;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v28);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_51:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature(v14, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return v22;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v36 = v30;
      if ((v31 & 1) != 0)
        goto LABEL_14;
LABEL_49:
      v58 = v67;
      v59 = v32;
      outlined init with copy of ICUNumberFormatter.Signature(v14, v67, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, v22, (_QWORD *)v36);
      goto LABEL_50;
    }
  }
  v61 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v41 = static _DictionaryStorage.copy(original:)();
  v36 = v41;
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    v32 = v61;
    if ((v20 & 1) != 0)
      goto LABEL_14;
    goto LABEL_49;
  }
  v64 = v28;
  v65 = v14;
  v42 = (char *)(v41 + 64);
  v43 = 1 << *(_BYTE *)(v36 + 32);
  v63 = (char *)(v30 + 64);
  v44 = (unint64_t)(v43 + 63) >> 6;
  if (v36 != v30 || v42 >= &v63[8 * v44])
    memmove(v42, v63, 8 * v44);
  v45 = 0;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v30 + 16);
  v46 = 1 << *(_BYTE *)(v30 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *(_QWORD *)(v30 + 64);
  v62 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    v28 = v64;
    v14 = v65;
    if (v48)
    {
      v69 = (v48 - 1) & v48;
      v70 = v45;
      v49 = __clz(__rbit64(v48)) | ((_QWORD)v45 << 6);
      goto LABEL_24;
    }
    v54 = (int64_t)v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v54 >= v62)
      goto LABEL_48;
    v55 = *(_QWORD *)&v63[8 * v54];
    v56 = (int64_t)v45 + 1;
    if (!v55)
    {
      v56 = v54 + 1;
      if (v54 + 1 >= v62)
        goto LABEL_48;
      v55 = *(_QWORD *)&v63[8 * v56];
      if (!v55)
      {
        v56 = v54 + 2;
        if (v54 + 2 >= v62)
          goto LABEL_48;
        v55 = *(_QWORD *)&v63[8 * v56];
        if (!v55)
        {
          v56 = v54 + 3;
          if (v54 + 3 >= v62)
            goto LABEL_48;
          v55 = *(_QWORD *)&v63[8 * v56];
          if (!v55)
          {
            v56 = v54 + 4;
            if (v54 + 4 >= v62)
              goto LABEL_48;
            v55 = *(_QWORD *)&v63[8 * v56];
            if (!v55)
            {
              v56 = v54 + 5;
              if (v54 + 5 >= v62)
                goto LABEL_48;
              v55 = *(_QWORD *)&v63[8 * v56];
              if (!v55)
              {
                v56 = v54 + 6;
                if (v54 + 6 >= v62)
                  goto LABEL_48;
                v55 = *(_QWORD *)&v63[8 * v56];
                if (!v55)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_47:
    v69 = (v55 - 1) & v55;
    v70 = (int *)v56;
    v49 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    v50 = v67;
    v51 = *(_QWORD *)(v66 + 72) * v49;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v30 + 48) + v51, v67, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v52 = 8 * v49;
    v53 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v49);
    outlined init with take of ICUNumberFormatter.Signature(v50, *(_QWORD *)(v36 + 48) + v51, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v36 + 56) + v52) = v53;
    swift_retain();
    v48 = v69;
    v45 = v70;
  }
  v57 = v54 + 7;
  if (v57 >= v62)
    goto LABEL_48;
  v55 = *(_QWORD *)&v63[8 * v57];
  if (v55)
  {
    v56 = v57;
    goto LABEL_47;
  }
  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    v28 = v64;
    v14 = v65;
    if (v56 >= v62)
      goto LABEL_48;
    v55 = *(_QWORD *)&v63[8 * v56];
    ++v57;
    if (v55)
      goto LABEL_47;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[18];
  _BYTE v19[152];

  v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ICUPercentNumberFormatter();
  v16 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent)
               + 36);
  v5 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 472);
  swift_unknownObjectRetain();
  v8 = v7(ObjectType, v5);
  v10 = v9;
  swift_unknownObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v18, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v16, (uint64_t)v4, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v12 = (uint64_t *)&v4[*(int *)(v2 + 20)];
  *v12 = v8;
  v12[1] = v10;
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v4[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  v13 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v4);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v4, type metadata accessor for ICUPercentNumberFormatter.Signature);
  return v13;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for String.LocalizationValue.FormatArgument.Storage(a2, a1);
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  destroy for String.LocalizationValue.FormatArgument.Storage(a1);
  return a1;
}

void specialized IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  Swift::UInt8 v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v4 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  v83 = v7;
  MEMORY[0x1E0C80A78](v6);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2[1];
  ObjectType = swift_getObjectType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v17 = 0;
    }
    else
    {
      v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v17);
    v18 = v87;
    v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v21 = v90;
          if (!v90)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          v24 = v93;
          v26 = v94;
          v25 = v95;
          v27 = v96;
          v76 = v96;
          v77 = v92;
          if (v92)
          {
            v80 = v2;
            v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v24;
            v30 = v26;
            v31 = v25;
            v32 = v27;
            v33 = v28;
            v4 = v80;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v34 = v27;
            v35 = v24;
            v36 = v26;
            v37 = v25;
          }
          v80 = v25;
          v38 = v4;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v39 = v24;
            v40 = v24;
            v41 = v26;
            v42 = v40;
            _CFObject.hash(into:)();

            v26 = v41;
            v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }
          else
          {
            v39 = 0;
            Hasher._combine(_:)(0);
            v78 = v26;
            if (v26)
              goto LABEL_30;
          }
          Hasher._combine(_:)(0);
LABEL_33:
          v44 = v80;
          v45 = v39;
          v4 = v38;
          v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v46)
              goto LABEL_35;
          }
          Hasher._combine(_:)(0);
          v48 = 0;
LABEL_38:
          v49 = v80;
          v50 = v78;

          v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v79;
          v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v102 == 2)
              {
                v55 = 0;
              }
              else
              {
                v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                v56 = 0;
              }
              else
              {
                v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                v56 = v57;
              }
              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_43;
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        v22 = v91;
        if (!v91)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_21;
  }
  v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  v16 = v82;
LABEL_59:
  v58 = (uint64_t)v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a2) + 36);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = *(_QWORD *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v60 = v59;
    else
      v60 = 0;
    Hasher._combine(_:)(v60);
  }
  outlined init with take of LocalePreferences?(v58 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }
  v63 = *(unsigned __int16 *)(v58 + 74);
  v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }
  v65 = v83;
  v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }
  v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v69 = v84;
  outlined init with copy of (Hashable & Sendable)?(v58 + v68[9], v84, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }
  v71 = v58 + v68[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

void specialized IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  Swift::UInt8 v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v4 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  v84 = v7;
  MEMORY[0x1E0C80A78](v6);
  v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v15 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v18 = 0;
    }
    else
    {
      v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    v19 = v87;
    v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v19 + 16));
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
LABEL_22:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v25 = v93;
          v27 = v94;
          v26 = v95;
          v28 = v96;
          v77 = v96;
          v78 = v92;
          if (v92)
          {
            v81 = v11;
            v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v30 = v25;
            v31 = v27;
            v32 = v26;
            v33 = v28;
            v34 = v29;
            v11 = v81;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v35 = v28;
            v36 = v25;
            v37 = v27;
            v38 = v26;
          }
          v4 = v76;
          v81 = v26;
          v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v40 = v25;
            v41 = v25;
            v42 = v27;
            v43 = v41;
            _CFObject.hash(into:)();

            v27 = v42;
            v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }
          else
          {
            v40 = 0;
            Hasher._combine(_:)(0);
            v79 = v27;
            if (v27)
              goto LABEL_31;
          }
          Hasher._combine(_:)(0);
LABEL_34:
          v45 = v81;
          v46 = v40;
          v11 = v39;
          v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v47)
              goto LABEL_36;
          }
          Hasher._combine(_:)(0);
          v49 = 0;
LABEL_39:
          v50 = v81;
          v51 = v79;

          v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v80;
          v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }
              if (v102 == 2)
              {
                v56 = 0;
              }
              else
              {
                v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                v57 = 0;
              }
              else
              {
                v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                v57 = v58;
              }
              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_44;
          }
          Hasher._combine(_:)(0);
          goto LABEL_47;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v22 = v90;
        if (!v90)
          goto LABEL_16;
        goto LABEL_22;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_20;
  }
  v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v59 = v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a2) + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v60 = *(_QWORD *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v61 = v60;
    else
      v61 = 0;
    Hasher._combine(_:)(v61);
  }
  v62 = v84;
  outlined init with take of LocalePreferences?(v59 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }
  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }
  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v59 + v69[9], (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }
  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

uint64_t specialized static IntegerFormatStyle.Currency.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  v6 = *a1;
  v10 = *a2;
  v11 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v11, (uint64_t)&v10) & 1) == 0)
    return 0;
  v7 = *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2) && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3);
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(v8 + 40), (char *)a2 + *(int *)(v8 + 40));
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (!v3)
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32), *(_QWORD *)(a2 + 24));
  if (!v3)
    *a3 = result;
  return result;
}

{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

void specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  char *v3;
  __int128 v4[8];
  __int128 v5[8];
  _OWORD v6[8];
  _OWORD v7[8];
  _OWORD v8[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v8);
  v3 = (char *)sub_181A2A740
     + 4
     * byte_182061722[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v8)];
  __asm { BR              X10 }
}

uint64_t sub_181A2A740()
{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  _OWORD v11[6];
  _BYTE v12[26];
  _OWORD v13[6];
  _BYTE v14[26];
  _OWORD v15[8];
  _BYTE v16[128];
  __int128 v17[8];
  _BYTE v18[488];

  v1 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(v0 - 216);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v15);
  if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v15))
  {
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v16, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v17, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v18);
    v9 = 0;
  }
  else
  {
    v2 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v15);
    v3 = v1[5];
    v13[4] = v1[4];
    v13[5] = v3;
    *(_OWORD *)v14 = v1[6];
    *(_OWORD *)&v14[10] = *(_OWORD *)((char *)v1 + 106);
    v4 = v1[1];
    v13[0] = *v1;
    v13[1] = v4;
    v5 = v1[3];
    v13[2] = v1[2];
    v13[3] = v5;
    v6 = v2[5];
    v11[4] = v2[4];
    v11[5] = v6;
    *(_OWORD *)v12 = v2[6];
    *(_OWORD *)&v12[10] = *(_OWORD *)((char *)v2 + 106);
    v7 = v2[1];
    v11[0] = *v2;
    v11[1] = v7;
    v8 = v2[3];
    v11[2] = v2[2];
    v11[3] = v8;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v17, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v16, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v16, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v17, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    v9 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v13, (uint64_t *)v11);
    outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)((uint64_t)v18);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v17, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v16, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return v9 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char v5;
  __int128 v7[2];
  uint64_t v8;
  _BYTE v9[32];
  _QWORD v10[3];
  uint64_t v11;

  outlined init with copy of Any(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Equatable);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v7, (uint64_t)v10);
    v3 = v11;
    v4 = __swift_project_boxed_opaque_existential_1(v10, v11);
    v5 = openEquatable #1 <A>(_:) in static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v4, a2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Equatable?);
    v5 = 0;
  }
  return v5 & 1;
}

void specialized static String.LocalizationValue.FormatArgument.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BYTE v3[120];
  uint64_t v4;

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)v3);
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a2, (uint64_t)&v4);
  __asm { BR              X10 }
}

uint64_t sub_181A2AF38()
{
  _OWORD *v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[22];
  _OWORD v12[17];
  uint64_t v13[26];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[1696];

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v16, (uint64_t)v12);
  if (v16[232])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.Storage, String.LocalizationValue.FormatArgument.Storage));
    v1 = 0;
  }
  else
  {
    outlined init with take of Any(v12, &v9);
    outlined init with take of Any(v0, &v14);
    v2 = v10;
    v3 = __swift_project_boxed_opaque_existential_1(&v9, v10);
    v13[3] = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
    v5 = v15;
    v6 = __swift_project_boxed_opaque_existential_1(&v14, v15);
    v11[3] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v7, v6, v5);
    v1 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v13, (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)v16);
  }
  return v1 & 1;
}

void specialized static String.LocalizationValue.FormatArgument.CodableStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  _BYTE v115[1740];

  v113 = (char *)a2;
  v112 = a1;
  v71 = 0;
  *(_QWORD *)&v115[1716] = *MEMORY[0x1E0C80C00];
  v69[0] = &v114;
  v69[1] = v115;
  v2 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v2);
  v96 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v97 = (char *)v69 - v5;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v74);
  v80 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v7);
  v79 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v72);
  v76 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v91);
  v86 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v84 = (char *)v69 - v12;
  MEMORY[0x1E0C80A78](v13);
  v85 = (char *)v69 - v14;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1E0C80A78](v90);
  v92 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v16);
  v95 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v110 = (char *)v69 - v19;
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v73);
  v78 = (char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v21);
  v77 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v70);
  v75 = (char *)v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v88);
  v83 = (char *)v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v81 = (char *)v69 - v26;
  MEMORY[0x1E0C80A78](v27);
  v82 = (char *)v69 - v28;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1E0C80A78](v87);
  v89 = (char *)v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v30);
  v93 = (char *)v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v94 = (char *)v69 - v33;
  v111 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  MEMORY[0x1E0C80A78](v111);
  v109 = (char *)v69 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v107 = (char *)v69 - v36;
  MEMORY[0x1E0C80A78](v37);
  v108 = (char *)v69 - v38;
  MEMORY[0x1E0C80A78](v39);
  v106 = (char *)v69 - v40;
  MEMORY[0x1E0C80A78](v41);
  v105 = (char *)v69 - v42;
  MEMORY[0x1E0C80A78](v43);
  v104 = (char *)v69 - v44;
  MEMORY[0x1E0C80A78](v45);
  v103 = (char *)v69 - v46;
  MEMORY[0x1E0C80A78](v47);
  v102 = (char *)v69 - v48;
  MEMORY[0x1E0C80A78](v49);
  v101 = (char *)v69 - v50;
  MEMORY[0x1E0C80A78](v51);
  v99 = (char *)v69 - v52;
  MEMORY[0x1E0C80A78](v53);
  v100 = (char *)v69 - v54;
  MEMORY[0x1E0C80A78](v55);
  v98 = (char *)v69 - v56;
  MEMORY[0x1E0C80A78](v57);
  MEMORY[0x1E0C80A78](v58);
  MEMORY[0x1E0C80A78](v59);
  MEMORY[0x1E0C80A78](v60);
  MEMORY[0x1E0C80A78](v61);
  MEMORY[0x1E0C80A78](v62);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
  MEMORY[0x1E0C80A78](v63);
  v65 = (char *)v69 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = (uint64_t)&v65[*(int *)(v66 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(v112, (uint64_t)v65, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  v112 = v67;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v113, v67, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  v113 = v65;
  v68 = (char *)&loc_181A2CD78 + dword_181A2FEBC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181A2CD88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v0 + 432), (uint64_t)v1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  v3 = v1[1];
  v2 = v1[2];
  v4 = v1[4];
  v6 = v1[6];
  v5 = v1[7];
  v7 = (void *)v1[9];
  *(_QWORD *)(v0 + 352) = v1[10];
  *(_QWORD *)(v0 + 368) = v1[11];
  *(_QWORD *)(v0 + 384) = v1[13];
  v8 = *(uint64_t **)(v0 + 416);
  if (swift_getEnumCaseMultiPayload())
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of Any?(*(_QWORD *)(v0 + 432), &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.CodableStorage, String.LocalizationValue.FormatArgument.CodableStorage));
    v9 = 0;
  }
  else
  {
    v11 = v1[12];
    v12 = v1[8];
    v13 = v1[5];
    v14 = v1[3];
    v15 = *v1;
    v17 = *v8;
    v16 = v8[1];
    v18 = v8[2];
    v19 = v8[3];
    *(_QWORD *)(v0 + 288) = v18;
    v20 = v8[4];
    v21 = v8[5];
    v22 = v8[6];
    *(_QWORD *)(v0 + 304) = v22;
    v24 = (void *)v8[9];
    v23 = v8[10];
    *(_QWORD *)(v0 + 328) = v23;
    *(_QWORD *)(v0 + 336) = v16;
    v25 = v8[13];
    *(_QWORD *)(v0 + 400) = v25;
    *(_QWORD *)(v0 + 1600) = v15;
    *(_QWORD *)(v0 + 1608) = v3;
    *(_QWORD *)(v0 + 1616) = v2;
    *(_QWORD *)(v0 + 1624) = v14;
    *(_QWORD *)(v0 + 1632) = v4;
    *(_QWORD *)(v0 + 1640) = v13;
    *(_QWORD *)(v0 + 344) = v6;
    *(_QWORD *)(v0 + 1648) = v6;
    *(_QWORD *)(v0 + 1656) = v5;
    *(_QWORD *)(v0 + 1664) = v12;
    *(_QWORD *)(v0 + 1672) = v7;
    *(_QWORD *)(v0 + 1680) = *(_QWORD *)(v0 + 352);
    *(_QWORD *)(v0 + 1688) = *(_QWORD *)(v0 + 368);
    *(_QWORD *)(v0 + 1696) = v11;
    *(_QWORD *)(v0 + 1704) = *(_QWORD *)(v0 + 384);
    *(_QWORD *)(v0 + 1328) = v17;
    *(_QWORD *)(v0 + 1336) = v16;
    *(_QWORD *)(v0 + 1344) = v18;
    *(_QWORD *)(v0 + 1352) = v19;
    *(_QWORD *)(v0 + 1360) = v20;
    *(_QWORD *)(v0 + 1368) = v21;
    v26 = *(_OWORD *)(v8 + 7);
    *(_OWORD *)(v0 + 272) = v26;
    *(_OWORD *)(v0 + 1384) = v26;
    *(_QWORD *)(v0 + 1376) = v22;
    *(_QWORD *)(v0 + 1400) = v24;
    v27 = *(_OWORD *)(v8 + 11);
    *(_OWORD *)(v0 + 416) = v27;
    *(_OWORD *)(v0 + 1416) = v27;
    *(_QWORD *)(v0 + 1408) = v23;
    *(_QWORD *)(v0 + 1432) = v25;
    v9 = ((uint64_t (*)(uint64_t, uint64_t))static LocalizedStringResource.== infix(_:_:))(v0 + 1600, v0 + 1328);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ICUNumberFormatter.Signature(*(_QWORD *)(v0 + 432), type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  }
  return v9 & 1;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v42 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v39);
  v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v38);
  v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (__int128 *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v37 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (__int128 *)((char *)&v37 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature(v42, v21, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v14, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v41;
        outlined init with take of LocalePreferences?(v21, v41, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        v24 = *(_OWORD *)v14;
        v43 = *(_OWORD *)v23;
        v44 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0)
        {
          v25 = *((_QWORD *)v14 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v14 + 3) == *(_QWORD *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v14[*(int *)(v38 + 40)], v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            v27 = (uint64_t)v14;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1;
          }
        }
        v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        v33 = (uint64_t)v14;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
        return 0;
      }
      v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      v29 = (uint64_t)v14;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        v30 = *v11;
        v43 = *(_OWORD *)v23;
        v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v11 + *(int *)(v39 + 36), v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          v27 = (uint64_t)v11;
          goto LABEL_18;
        }
        v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        v33 = (uint64_t)v11;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      v29 = (uint64_t)v11;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      v34 = *v16;
      v43 = *v7;
      v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        v31 = (uint64_t)v7;
        goto LABEL_26;
      }
      v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      v36 = (uint64_t)v7;
      goto LABEL_30;
    }
    v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;

  v41 = a2;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1E0C80A78](v38);
  v39 = (__int128 *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1E0C80A78](v37);
  v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (__int128 *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v36 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (__int128 *)((char *)&v36 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v19[*(int *)(v20 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature(v41, v21, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        v24 = *(_OWORD *)v13;
        v42 = *(_OWORD *)v23;
        v43 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0)
        {
          v25 = *((_QWORD *)v13 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v13 + 3) == *(_QWORD *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v37 + 40)], v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            outlined destroy of Any?(v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
            v27 = (uint64_t)v13;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
            return 1;
          }
        }
        v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        outlined destroy of Any?(v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
        v33 = (uint64_t)v13;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v30 = v39;
        outlined init with take of LocalePreferences?(v21, (uint64_t)v39, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        v31 = *v10;
        v42 = *v30;
        v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v38 + 36), (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
          outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
          v27 = (uint64_t)v10;
          goto LABEL_25;
        }
        v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
        v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      v34 = *v16;
      v42 = *v7;
      v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        v26 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
        v27 = (uint64_t)v16;
        goto LABEL_25;
      }
      v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
      return 0;
    }
    v28 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v40 = a2;
  v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v37);
  v38 = (__int128 *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v36);
  v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (__int128 *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v35 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (__int128 *)((char *)&v35 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature(v40, v21, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v14, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v39;
        outlined init with take of ICUNumberFormatter.Signature(v21, v39, type metadata accessor for NSDecimal.FormatStyle.Currency);
        v24 = *(_OWORD *)v14;
        v41 = *(_OWORD *)v23;
        v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((_QWORD *)v14 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v14 + 3) == *(_QWORD *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v14[*(int *)(v36 + 24)], v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
          v26 = (uint64_t)v14;
LABEL_23:
          outlined destroy of ICUNumberFormatter.Signature(v26, v25);
          outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
          return 1;
        }
        v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        v32 = (uint64_t)v14;
        goto LABEL_26;
      }
      v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      v28 = (uint64_t)v14;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v29 = v38;
        outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)v38, type metadata accessor for NSDecimal.FormatStyle.Percent);
        v30 = *v11;
        v41 = *v29;
        v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v11 + *(int *)(v37 + 20), (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          outlined destroy of ICUNumberFormatter.Signature((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
          v26 = (uint64_t)v11;
          goto LABEL_23;
        }
        v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
        v32 = (uint64_t)v11;
        goto LABEL_26;
      }
      v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v28 = (uint64_t)v11;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      v33 = *v16;
      v41 = *v7;
      v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 20), (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        v25 = type metadata accessor for NSDecimal.FormatStyle;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        v26 = (uint64_t)v16;
        goto LABEL_23;
      }
      v31 = type metadata accessor for NSDecimal.FormatStyle;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      v32 = (uint64_t)v16;
LABEL_26:
      outlined destroy of ICUNumberFormatter.Signature(v32, v31);
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
      return 0;
    }
    v27 = type metadata accessor for NSDecimal.FormatStyle;
    v28 = (uint64_t)v16;
  }
  outlined destroy of ICUNumberFormatter.Signature(v28, v27);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v42 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v39);
  v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v38);
  v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (__int128 *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v37 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (__int128 *)((char *)&v37 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature(v42, v21, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v14, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v41;
        outlined init with take of LocalePreferences?(v21, v41, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        v24 = *(_OWORD *)v14;
        v43 = *(_OWORD *)v23;
        v44 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0)
        {
          v25 = *((_QWORD *)v14 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v14 + 3) == *(_QWORD *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v14[*(int *)(v38 + 40)], v23 + *(int *)(v38 + 40)) & 1) != 0)
          {
            v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            v27 = (uint64_t)v14;
LABEL_18:
            outlined destroy of Any?(v27, v26);
            v31 = v23;
LABEL_26:
            outlined destroy of Any?(v31, v26);
            outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1;
          }
        }
        v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        v33 = (uint64_t)v14;
LABEL_28:
        outlined destroy of Any?(v33, v32);
        v36 = v23;
LABEL_30:
        outlined destroy of Any?(v36, v32);
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
        return 0;
      }
      v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      v29 = (uint64_t)v14;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v11, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        v30 = *v11;
        v43 = *(_OWORD *)v23;
        v44 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v11 + *(int *)(v39 + 36), v23 + *(int *)(v39 + 36)) & 1) != 0)
        {
          v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          v27 = (uint64_t)v11;
          goto LABEL_18;
        }
        v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        v33 = (uint64_t)v11;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      v29 = (uint64_t)v11;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v34 = *v16;
      v43 = *v7;
      v44 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v43) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        v31 = (uint64_t)v7;
        goto LABEL_26;
      }
      v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v36 = (uint64_t)v7;
      goto LABEL_30;
    }
    v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0;
}

uint64_t specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;

  v41 = a2;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v38);
  v39 = (__int128 *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v37);
  v40 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (__int128 *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v36 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (__int128 *)((char *)&v36 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v19[*(int *)(v20 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  outlined init with copy of ICUNumberFormatter.Signature(v41, v21, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v13, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v40;
        outlined init with take of LocalePreferences?(v21, v40, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        v24 = *(_OWORD *)v13;
        v42 = *(_OWORD *)v23;
        v43 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0)
        {
          v25 = *((_QWORD *)v13 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v13 + 3) == *(_QWORD *)(v23 + 24);
          if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v37 + 40)], v23 + *(int *)(v37 + 40)) & 1) != 0)
          {
            v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
            outlined destroy of Any?(v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
            v27 = (uint64_t)v13;
LABEL_25:
            outlined destroy of Any?(v27, v26);
            outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
            return 1;
          }
        }
        v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
        outlined destroy of Any?(v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
        v33 = (uint64_t)v13;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      v29 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v10, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v30 = v39;
        outlined init with take of LocalePreferences?(v21, (uint64_t)v39, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        v31 = *v10;
        v42 = *v30;
        v43 = v31;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v38 + 36), (char *)v30 + *(int *)(v38 + 36)) & 1) != 0)
        {
          v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
          outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
          v27 = (uint64_t)v10;
          goto LABEL_25;
        }
        v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
        v33 = (uint64_t)v10;
        goto LABEL_28;
      }
      v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      v29 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of LocalePreferences?(v21, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v34 = *v16;
      v42 = *v7;
      v43 = v34;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36)) & 1) != 0)
      {
        v26 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        v27 = (uint64_t)v16;
        goto LABEL_25;
      }
      v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v33 = (uint64_t)v16;
LABEL_28:
      outlined destroy of Any?(v33, v32);
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
      return 0;
    }
    v28 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    v29 = (uint64_t)v16;
  }
  outlined destroy of Any?(v29, v28);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format));
  return 0;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper(uint64_t a1)
{
  destroy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(a1, &type metadata for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper);
  return a1;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  destroy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(a1, &type metadata for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper);
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  switch(*(_BYTE *)(result + 112))
  {
    case 0:
      goto LABEL_3;
    case 1:
      result = swift_release();
      break;
    case 2:
    case 3:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
      result = v1 + 64;
LABEL_3:
      result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      swift_bridgeObjectRelease();
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;

  switch(*(_BYTE *)(a2 + 112))
  {
    case 0:
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 112) = 0;
      break;
    case 1:
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 112) = 1;
      swift_retain();
      break;
    case 2:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = v9;
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v10;
      v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      swift_retain();
      swift_retain();
      v11(a1 + 32, a2 + 32, v10);
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
      *(_BYTE *)(a1 + 112) = 2;
      break;
    case 3:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = v13;
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8);
      swift_retain();
      swift_retain();
      v15(a1 + 32, a2 + 32, v14);
      v16 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 64, a2 + 64);
      *(_BYTE *)(a1 + 112) = 3;
      break;
    case 4:
      v17 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v17;
      v18 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v18;
      v19 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v19;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v21 = *(void **)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v21;
      *(_QWORD *)(a1 + 80) = v20;
      v22 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v22;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v23 = v21;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 112) = 5;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      break;
    default:
      v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    switch(*((_BYTE *)a2 + 112))
    {
      case 0:
        v4 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v4;
        (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
        *(_BYTE *)(a1 + 112) = 0;
        break;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_BYTE *)(a1 + 112) = 1;
        swift_retain();
        break;
      case 2:
        v5 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        v6 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = v6;
        v7 = *((_QWORD *)a2 + 7);
        *(_QWORD *)(a1 + 56) = v7;
        v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
        swift_retain();
        swift_retain();
        v8(a1 + 32, (uint64_t)(a2 + 2), v7);
        v9 = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 88) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(_BYTE *)(a1 + 112) = 2;
        break;
      case 3:
        v10 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v10;
        v11 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = v11;
        v12 = *((_QWORD *)a2 + 7);
        *(_QWORD *)(a1 + 56) = v12;
        v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
        swift_retain();
        swift_retain();
        v13(a1 + 32, (uint64_t)(a2 + 2), v12);
        v14 = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 88) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        *(_BYTE *)(a1 + 112) = 3;
        break;
      case 4:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
        v15 = (void *)*((_QWORD *)a2 + 9);
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_BYTE *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v16 = v15;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_BYTE *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        break;
      default:
        v17 = *a2;
        v18 = a2[1];
        v19 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        v20 = a2[4];
        v21 = a2[5];
        v22 = a2[6];
        *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
        *(_OWORD *)(a1 + 80) = v21;
        *(_OWORD *)(a1 + 96) = v22;
        *(_OWORD *)(a1 + 64) = v20;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a1 != a2)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage(a1);
    v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 112) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument()
{
  return &type metadata for String.LocalizationValue.FormatArgument;
}

void outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  __asm { BR              X10 }
}

uint64_t sub_181A31D24()
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

void outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  __asm { BR              X11 }
}

uint64_t sub_181A31E00()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

__n128 __swift_memcpy122_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(__int128 *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int v8;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v8 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 36);
      v27 = a1 + v26;
      v28 = (uint64_t)a2 + v26;
      *(_QWORD *)v27 = *(uint64_t *)((char *)a2 + v26);
      *(_BYTE *)(v27 + 8) = *((_BYTE *)a2 + v26 + 8);
      v29 = *(_OWORD *)((char *)a2 + v26 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v26 + 16);
      *(_OWORD *)(v27 + 32) = v29;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v26 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
      *(_BYTE *)(v27 + 73) = *((_BYTE *)a2 + v26 + 73);
      *(_BYTE *)(v27 + 76) = *((_BYTE *)a2 + v26 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v26 + 74);
      *(_BYTE *)(v27 + 77) = *((_BYTE *)a2 + v26 + 77);
      v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v31 = v30[9];
      v32 = (void *)(v27 + v31);
      v33 = (const void *)(v28 + v31);
      v34 = type metadata accessor for FloatingPointRoundingRule();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
LABEL_10:
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
LABEL_14:
        v43 = v30[10];
        v44 = v27 + v43;
        v45 = v28 + v43;
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v27 + v30[11]) = *(_BYTE *)(v28 + v30[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v13 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v13;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
        v15 = a1 + v14;
        v16 = (uint64_t)a2 + v14;
        *(_QWORD *)v15 = *(uint64_t *)((char *)a2 + v14);
        *(_BYTE *)(v15 + 8) = *((_BYTE *)a2 + v14 + 8);
        v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)((char *)a2 + v14 + 16);
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        *(_BYTE *)(v15 + 73) = *((_BYTE *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        *(_BYTE *)(v15 + 78) = *((_BYTE *)a2 + v14 + 78);
        v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v19 = v18[9];
        v20 = (void *)(v15 + v19);
        v21 = (const void *)(v16 + v19);
        v22 = type metadata accessor for FloatingPointRoundingRule();
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v40 = v18[10];
        v41 = v15 + v40;
        v42 = v16 + v40;
        *(_QWORD *)v41 = *(_QWORD *)v42;
        *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
        *(_BYTE *)(v15 + v18[11]) = *(_BYTE *)(v16 + v18[11]);
        *(_BYTE *)(v15 + v18[12]) = *(_BYTE *)(v16 + v18[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 36);
      v27 = a1 + v36;
      v28 = (uint64_t)a2 + v36;
      *(_QWORD *)v27 = *(uint64_t *)((char *)a2 + v36);
      *(_BYTE *)(v27 + 8) = *((_BYTE *)a2 + v36 + 8);
      v37 = *(_OWORD *)((char *)a2 + v36 + 32);
      *(_OWORD *)(v27 + 16) = *(_OWORD *)((char *)a2 + v36 + 16);
      *(_OWORD *)(v27 + 32) = v37;
      *(_OWORD *)(v27 + 48) = *(_OWORD *)((char *)a2 + v36 + 48);
      *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v36 + 57);
      *(_BYTE *)(v27 + 73) = *((_BYTE *)a2 + v36 + 73);
      *(_BYTE *)(v27 + 76) = *((_BYTE *)a2 + v36 + 76);
      *(_WORD *)(v27 + 74) = *(_WORD *)((char *)a2 + v36 + 74);
      *(_BYTE *)(v27 + 77) = *((_BYTE *)a2 + v36 + 77);
      v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v38 = v30[9];
      v32 = (void *)(v27 + v38);
      v33 = (const void *)(v28 + v38);
      v34 = type metadata accessor for FloatingPointRoundingRule();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    goto LABEL_14;
  }
  v25 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v25 + ((v8 + 16) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v10 = a5;
LABEL_6:
    v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v10) + 36);
    v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v10 = a3;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a4) + 40);
  v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v13 = v11 + *(int *)(v12 + 36);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    v24 = a6;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v12 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      v14 = a1 + v13;
      v15 = a2 + v13;
      *(_QWORD *)v14 = *(_QWORD *)(a2 + v13);
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(a2 + v13 + 8);
      v16 = *(_OWORD *)(a2 + v13 + 32);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(a2 + v13 + 16);
      *(_OWORD *)(v14 + 32) = v16;
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)(a2 + v13 + 57);
      *(_BYTE *)(v14 + 73) = *(_BYTE *)(a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)(a2 + v13 + 74);
      *(_BYTE *)(v14 + 78) = *(_BYTE *)(a2 + v13 + 78);
      v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v18 = v17[9];
      v19 = (void *)(v14 + v18);
      v20 = (const void *)(v15 + v18);
      v21 = type metadata accessor for FloatingPointRoundingRule();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v42 = v17[10];
      v43 = v14 + v42;
      v44 = v15 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
      *(_BYTE *)(v14 + v17[11]) = *(_BYTE *)(v15 + v17[11]);
      v45 = v17[12];
      v40 = (_BYTE *)(v14 + v45);
      v41 = (_BYTE *)(v15 + v45);
      goto LABEL_13;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    v24 = a4;
  }
  v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)(a2 + v25);
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(a2 + v25 + 8);
  v28 = *(_OWORD *)(a2 + v25 + 32);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)(a2 + v25 + 16);
  *(_OWORD *)(v26 + 32) = v28;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)(a2 + v25 + 57);
  *(_BYTE *)(v26 + 73) = *(_BYTE *)(a2 + v25 + 73);
  *(_BYTE *)(v26 + 76) = *(_BYTE *)(a2 + v25 + 76);
  *(_WORD *)(v26 + 74) = *(_WORD *)(a2 + v25 + 74);
  *(_BYTE *)(v26 + 77) = *(_BYTE *)(a2 + v25 + 77);
  v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v30 = v29[9];
  v31 = (void *)(v26 + v30);
  v32 = (const void *)(v27 + v30);
  v33 = type metadata accessor for FloatingPointRoundingRule();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = v29[10];
  v37 = v26 + v36;
  v38 = v27 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = v29[11];
  v40 = (_BYTE *)(v26 + v39);
  v41 = (_BYTE *)(v27 + v39);
LABEL_13:
  *v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, a4);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v27 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        v14 = a1 + v13;
        v15 = a2 + v13;
        v16 = *(_QWORD *)(a2 + v13);
        *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
        *(_QWORD *)v14 = v16;
        v17 = *(_OWORD *)(v15 + 57);
        v19 = *(_OWORD *)(v15 + 32);
        v18 = *(_OWORD *)(v15 + 48);
        *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
        *(_OWORD *)(v14 + 32) = v19;
        *(_OWORD *)(v14 + 48) = v18;
        *(_OWORD *)(v14 + 57) = v17;
        *(_BYTE *)(v14 + 73) = *(_BYTE *)(v15 + 73);
        *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
        *(_BYTE *)(v14 + 78) = *(_BYTE *)(v15 + 78);
        v20 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v21 = v20[9];
        v22 = (void *)(v14 + v21);
        v23 = (const void *)(v15 + v21);
        v24 = type metadata accessor for FloatingPointRoundingRule();
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        v49 = v20[10];
        v50 = v14 + v49;
        v51 = (uint64_t *)(v15 + v49);
        v52 = *v51;
        *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
        *(_QWORD *)v50 = v52;
        *(_BYTE *)(v14 + v20[11]) = *(_BYTE *)(v15 + v20[11]);
        v53 = v20[12];
        v47 = (_BYTE *)(v14 + v53);
        v48 = (_BYTE *)(v15 + v53);
LABEL_14:
        *v47 = *v48;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v27 = a5;
    }
    v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v27) + 36);
    v29 = a1 + v28;
    v30 = a2 + v28;
    v31 = *(_QWORD *)(a2 + v28);
    *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
    *(_QWORD *)v29 = v31;
    v32 = *(_OWORD *)(v30 + 57);
    v34 = *(_OWORD *)(v30 + 32);
    v33 = *(_OWORD *)(v30 + 48);
    *(_OWORD *)(v29 + 16) = *(_OWORD *)(v30 + 16);
    *(_OWORD *)(v29 + 32) = v34;
    *(_OWORD *)(v29 + 48) = v33;
    *(_OWORD *)(v29 + 57) = v32;
    *(_BYTE *)(v29 + 73) = *(_BYTE *)(v30 + 73);
    LOBYTE(v31) = *(_BYTE *)(v30 + 76);
    *(_WORD *)(v29 + 74) = *(_WORD *)(v30 + 74);
    *(_BYTE *)(v29 + 76) = v31;
    *(_BYTE *)(v29 + 77) = *(_BYTE *)(v30 + 77);
    v35 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v36 = v35[9];
    v37 = (void *)(v29 + v36);
    v38 = (const void *)(v30 + v36);
    v39 = type metadata accessor for FloatingPointRoundingRule();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    v42 = v35[10];
    v43 = v29 + v42;
    v44 = (uint64_t *)(v30 + v42);
    v45 = *v44;
    *(_BYTE *)(v43 + 8) = *((_BYTE *)v44 + 8);
    *(_QWORD *)v43 = v45;
    v46 = v35[11];
    v47 = (_BYTE *)(v29 + v46);
    v48 = (_BYTE *)(v30 + v46);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int EnumCaseMultiPayload;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v24 = a6;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      *(_QWORD *)v14 = *(_QWORD *)((char *)a2 + v13);
      v14[8] = *((_BYTE *)a2 + v13 + 8);
      v16 = *(_OWORD *)((char *)a2 + v13 + 32);
      *((_OWORD *)v14 + 1) = *(_OWORD *)((char *)a2 + v13 + 16);
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)((char *)a2 + v13 + 57);
      v14[73] = *((_BYTE *)a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)((char *)a2 + v13 + 74);
      v14[78] = *((_BYTE *)a2 + v13 + 78);
      v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v18 = v17[9];
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = type metadata accessor for FloatingPointRoundingRule();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v42 = v17[10];
      v43 = &v14[v42];
      v44 = &v15[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v14[v17[11]] = v15[v17[11]];
      v45 = v17[12];
      v40 = &v14[v45];
      v41 = &v15[v45];
      goto LABEL_13;
    }
    *a1 = *a2;
    v24 = a4;
  }
  v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v24) + 36);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)((char *)a2 + v25);
  v26[8] = *((_BYTE *)a2 + v25 + 8);
  v28 = *(_OWORD *)((char *)a2 + v25 + 32);
  *((_OWORD *)v26 + 1) = *(_OWORD *)((char *)a2 + v25 + 16);
  *((_OWORD *)v26 + 2) = v28;
  *((_OWORD *)v26 + 3) = *(_OWORD *)((char *)a2 + v25 + 48);
  *(_OWORD *)(v26 + 57) = *(_OWORD *)((char *)a2 + v25 + 57);
  v26[73] = *((_BYTE *)a2 + v25 + 73);
  v26[76] = *((_BYTE *)a2 + v25 + 76);
  *((_WORD *)v26 + 37) = *(_WORD *)((char *)a2 + v25 + 74);
  v26[77] = *((_BYTE *)a2 + v25 + 77);
  v29 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v30 = v29[9];
  v31 = &v26[v30];
  v32 = &v27[v30];
  v33 = type metadata accessor for FloatingPointRoundingRule();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = v29[10];
  v37 = &v26[v36];
  v38 = &v27[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = v29[11];
  v40 = &v26[v39];
  v41 = &v27[v39];
LABEL_13:
  *v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, a4);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v25 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
        v15[8] = *((_BYTE *)a2 + v14 + 8);
        v17 = *(_OWORD *)((char *)a2 + v14 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
        *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
        v15[73] = *((_BYTE *)a2 + v14 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
        v15[78] = *((_BYTE *)a2 + v14 + 78);
        v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v19 = v18[9];
        v20 = &v15[v19];
        v21 = &v16[v19];
        v22 = type metadata accessor for FloatingPointRoundingRule();
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v43 = v18[10];
        v44 = &v15[v43];
        v45 = &v16[v43];
        *(_QWORD *)v44 = *(_QWORD *)v45;
        v44[8] = v45[8];
        v15[v18[11]] = v16[v18[11]];
        v46 = v18[12];
        v41 = &v15[v46];
        v42 = &v16[v46];
LABEL_14:
        *v41 = *v42;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v25 = a5;
    }
    v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_QWORD *)v27 = *(_QWORD *)((char *)a2 + v26);
    v27[8] = *((_BYTE *)a2 + v26 + 8);
    v29 = *(_OWORD *)((char *)a2 + v26 + 32);
    *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
    *((_OWORD *)v27 + 2) = v29;
    *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
    *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
    v27[73] = *((_BYTE *)a2 + v26 + 73);
    v27[76] = *((_BYTE *)a2 + v26 + 76);
    *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
    v27[77] = *((_BYTE *)a2 + v26 + 77);
    v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v31 = v30[9];
    v32 = &v27[v31];
    v33 = &v28[v31];
    v34 = type metadata accessor for FloatingPointRoundingRule();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v30[10];
    v38 = &v27[v37];
    v39 = &v28[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v30[11];
    v41 = &v27[v40];
    v42 = &v28[v40];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v20 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v21 = a1 + v20;
      v22 = (uint64_t)a2 + v20;
      *(_QWORD *)v21 = *(uint64_t *)((char *)a2 + v20);
      *(_BYTE *)(v21 + 8) = *((_BYTE *)a2 + v20 + 8);
      v23 = *(_OWORD *)((char *)a2 + v20 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v20 + 16);
      *(_OWORD *)(v21 + 32) = v23;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v20 + 57);
      *(_BYTE *)(v21 + 73) = *((_BYTE *)a2 + v20 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v20 + 74);
      *(_BYTE *)(v21 + 76) = *((_BYTE *)a2 + v20 + 76);
      *(_BYTE *)(v21 + 77) = *((_BYTE *)a2 + v20 + 77);
      v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v25 = v24[9];
      v26 = (void *)(v21 + v25);
      v27 = (const void *)(v22 + v25);
      v28 = type metadata accessor for FloatingPointRoundingRule();
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v30(v27, 1, v28))
      {
LABEL_10:
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
LABEL_14:
        v39 = v24[10];
        v40 = v21 + v39;
        v41 = v22 + v39;
        *(_QWORD *)v40 = *(_QWORD *)v41;
        *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
        *(_BYTE *)(v21 + v24[11]) = *(_BYTE *)(v22 + v24[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v7;
        v8 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v9 = a1 + v8;
        v10 = (uint64_t)a2 + v8;
        *(_QWORD *)v9 = *(uint64_t *)((char *)a2 + v8);
        *(_BYTE *)(v9 + 8) = *((_BYTE *)a2 + v8 + 8);
        v11 = *(_OWORD *)((char *)a2 + v8 + 32);
        *(_OWORD *)(v9 + 16) = *(_OWORD *)((char *)a2 + v8 + 16);
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = *(_OWORD *)((char *)a2 + v8 + 48);
        *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
        *(_BYTE *)(v9 + 73) = *((_BYTE *)a2 + v8 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
        *(_BYTE *)(v9 + 78) = *((_BYTE *)a2 + v8 + 78);
        v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v13 = v12[9];
        __dst = (void *)(v9 + v13);
        v14 = (const void *)(v10 + v13);
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        v36 = v12[10];
        v37 = v9 + v36;
        v38 = v10 + v36;
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
        *(_BYTE *)(v9 + v12[11]) = *(_BYTE *)(v10 + v12[11]);
        *(_BYTE *)(v9 + v12[12]) = *(_BYTE *)(v10 + v12[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v31 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v21 = a1 + v31;
      v22 = (uint64_t)a2 + v31;
      *(_QWORD *)v21 = *(uint64_t *)((char *)a2 + v31);
      *(_BYTE *)(v21 + 8) = *((_BYTE *)a2 + v31 + 8);
      v32 = *(_OWORD *)((char *)a2 + v31 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v31 + 16);
      *(_OWORD *)(v21 + 32) = v32;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v31 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v31 + 57);
      *(_BYTE *)(v21 + 73) = *((_BYTE *)a2 + v31 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v31 + 74);
      *(_BYTE *)(v21 + 76) = *((_BYTE *)a2 + v31 + 76);
      *(_BYTE *)(v21 + 77) = *((_BYTE *)a2 + v31 + 77);
      v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v33 = v24[9];
      v26 = (void *)(v21 + v33);
      v27 = (const void *)(v22 + v33);
      v28 = type metadata accessor for FloatingPointRoundingRule();
      v29 = *(_QWORD *)(v28 - 8);
      v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      if (v34(v27, 1, v28))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    goto LABEL_14;
  }
  v19 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    v19 = a1 + v18;
    v20 = a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = (void *)(v19 + v23);
    v25 = (const void *)(v20 + v23);
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1, v26))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v48 = v22[10];
    v49 = v19 + v48;
    v50 = v20 + v48;
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    v51 = v22[11];
    v46 = (_BYTE *)(v19 + v51);
    v47 = (_BYTE *)(v20 + v51);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    v7 = a1 + v6;
    v8 = a2 + v6;
    *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v11 = v10[9];
    v12 = (void *)(v7 + v11);
    v13 = (const void *)(v8 + v11);
    v14 = type metadata accessor for FloatingPointRoundingRule();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v42 = v10[10];
    v43 = v7 + v42;
    v44 = v8 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    v45 = v10[12];
    v46 = (_BYTE *)(v7 + v45);
    v47 = (_BYTE *)(v8 + v45);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    v31 = a1 + v30;
    v32 = a2 + v30;
    *(_QWORD *)v31 = *(_QWORD *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v35 = v34[9];
    v36 = (void *)(v31 + v35);
    v37 = (const void *)(v32 + v35);
    v38 = type metadata accessor for FloatingPointRoundingRule();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1, v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v52 = v34[10];
    v53 = v31 + v52;
    v54 = v32 + v52;
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    v55 = v34[11];
    v46 = (_BYTE *)(v31 + v55);
    v47 = (_BYTE *)(v32 + v55);
  }
  *v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      v22 = *(_OWORD *)(v21 + 57);
      v24 = *(_OWORD *)(v21 + 32);
      v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v25[9];
      v27 = (void *)(v20 + v26);
      v28 = (const void *)(v21 + v26);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
LABEL_9:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
        v46 = v25[10];
        v47 = v20 + v46;
        v48 = (uint64_t *)(v21 + v46);
        v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(_QWORD *)v47 = v49;
        v50 = v25[11];
        v44 = (_BYTE *)(v20 + v50);
        v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v6 = a1 + v5;
        v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        v8 = *(_OWORD *)(v7 + 57);
        v10 = *(_OWORD *)(v7 + 32);
        v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        v13 = (void *)(v6 + v12);
        v14 = (const void *)(v7 + v12);
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v39 = v11[10];
        v40 = v6 + v39;
        v41 = (uint64_t *)(v7 + v39);
        v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(_QWORD *)v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        v43 = v11[12];
        v44 = (_BYTE *)(v6 + v43);
        v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v32;
      v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      v33 = *(_OWORD *)(v21 + 57);
      v35 = *(_OWORD *)(v21 + 32);
      v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v36 = v25[9];
      v27 = (void *)(v20 + v36);
      v28 = (const void *)(v21 + v36);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1, v29))
        goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
      v7[8] = *((_BYTE *)a2 + v6 + 8);
      v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v11 = v10[9];
      v12 = &v7[v11];
      v13 = &v8[v11];
      v14 = type metadata accessor for FloatingPointRoundingRule();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v35 = v10[10];
      v36 = &v7[v35];
      v37 = &v8[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      v38 = v10[12];
      v33 = &v7[v38];
      v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  v18 = *(int *)(v17 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
  v19[8] = *((_BYTE *)a2 + v18 + 8);
  v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v23 = v22[9];
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = type metadata accessor for FloatingPointRoundingRule();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v22[10];
  v30 = &v19[v29];
  v31 = &v20[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  v32 = v22[11];
  v33 = &v19[v32];
  v34 = &v20[v32];
LABEL_13:
  *v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v11 = v10[9];
        v12 = &v7[v11];
        v13 = &v8[v11];
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        v35 = v10[10];
        v36 = &v7[v35];
        v37 = &v8[v35];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        v38 = v10[12];
        v33 = &v7[v38];
        v34 = &v8[v38];
LABEL_14:
        *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    v18 = *(int *)(v17 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = &v19[v23];
    v25 = &v20[v23];
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v22[10];
    v30 = &v19[v29];
    v31 = &v20[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v22[11];
    v33 = &v19[v32];
    v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, &demangling cache variable for type metadata for IntegerFormatStyle<Int>, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A34630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A34648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v12 = *(_DWORD *)(*(_QWORD *)(a4(0) - 8) + 80);
  if ((v12 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a7) + 36);
      v28 = a1 + v27;
      v29 = (uint64_t)a2 + v27;
      *(_QWORD *)v28 = *(uint64_t *)((char *)a2 + v27);
      *(_BYTE *)(v28 + 8) = *((_BYTE *)a2 + v27 + 8);
      v30 = *(_OWORD *)((char *)a2 + v27 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v27 + 16);
      *(_OWORD *)(v28 + 32) = v30;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v27 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v27 + 57);
      *(_BYTE *)(v28 + 73) = *((_BYTE *)a2 + v27 + 73);
      *(_BYTE *)(v28 + 76) = *((_BYTE *)a2 + v27 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v27 + 74);
      *(_BYTE *)(v28 + 77) = *((_BYTE *)a2 + v27 + 77);
      v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v32 = v31[9];
      v33 = (void *)(v28 + v32);
      v34 = (const void *)(v29 + v32);
      v35 = type metadata accessor for FloatingPointRoundingRule();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
LABEL_10:
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
LABEL_14:
        v44 = v31[10];
        v45 = v28 + v44;
        v46 = v29 + v44;
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(_BYTE *)(v28 + v31[11]) = *(_BYTE *)(v29 + v31[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v14 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v14;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        v16 = a1 + v15;
        v17 = (uint64_t)a2 + v15;
        *(_QWORD *)v16 = *(uint64_t *)((char *)a2 + v15);
        *(_BYTE *)(v16 + 8) = *((_BYTE *)a2 + v15 + 8);
        v18 = *(_OWORD *)((char *)a2 + v15 + 32);
        *(_OWORD *)(v16 + 16) = *(_OWORD *)((char *)a2 + v15 + 16);
        *(_OWORD *)(v16 + 32) = v18;
        *(_OWORD *)(v16 + 48) = *(_OWORD *)((char *)a2 + v15 + 48);
        *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)a2 + v15 + 57);
        *(_BYTE *)(v16 + 73) = *((_BYTE *)a2 + v15 + 73);
        *(_DWORD *)(v16 + 74) = *(_DWORD *)((char *)a2 + v15 + 74);
        *(_BYTE *)(v16 + 78) = *((_BYTE *)a2 + v15 + 78);
        v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v20 = v19[9];
        v21 = (void *)(v16 + v20);
        v22 = (const void *)(v17 + v20);
        v23 = type metadata accessor for FloatingPointRoundingRule();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v41 = v19[10];
        v42 = v16 + v41;
        v43 = v17 + v41;
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v16 + v19[11]) = *(_BYTE *)(v17 + v19[11]);
        *(_BYTE *)(v16 + v19[12]) = *(_BYTE *)(v17 + v19[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 36);
      v28 = a1 + v37;
      v29 = (uint64_t)a2 + v37;
      *(_QWORD *)v28 = *(uint64_t *)((char *)a2 + v37);
      *(_BYTE *)(v28 + 8) = *((_BYTE *)a2 + v37 + 8);
      v38 = *(_OWORD *)((char *)a2 + v37 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)a2 + v37 + 16);
      *(_OWORD *)(v28 + 32) = v38;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)((char *)a2 + v37 + 48);
      *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v37 + 57);
      *(_BYTE *)(v28 + 73) = *((_BYTE *)a2 + v37 + 73);
      *(_BYTE *)(v28 + 76) = *((_BYTE *)a2 + v37 + 76);
      *(_WORD *)(v28 + 74) = *(_WORD *)((char *)a2 + v37 + 74);
      *(_BYTE *)(v28 + 77) = *((_BYTE *)a2 + v37 + 77);
      v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v39 = v31[9];
      v33 = (void *)(v28 + v39);
      v34 = (const void *)(v29 + v39);
      v35 = type metadata accessor for FloatingPointRoundingRule();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    goto LABEL_14;
  }
  v26 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v26 + ((v12 + 16) & ~(unint64_t)v12);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  return destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t destroy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  a3(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v11 = a6;
LABEL_6:
    v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v11) + 36);
    v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v11 = a4;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a5) + 40);
  v13 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v14 = v12 + *(int *)(v13 + 36);
  v15 = type metadata accessor for FloatingPointRoundingRule();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  a4(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    v25 = a7;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v13;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      v15 = a1 + v14;
      v16 = a2 + v14;
      *(_QWORD *)v15 = *(_QWORD *)(a2 + v14);
      *(_BYTE *)(v15 + 8) = *(_BYTE *)(a2 + v14 + 8);
      v17 = *(_OWORD *)(a2 + v14 + 32);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + v14 + 16);
      *(_OWORD *)(v15 + 32) = v17;
      *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(a2 + v14 + 57);
      *(_BYTE *)(v15 + 73) = *(_BYTE *)(a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)(a2 + v14 + 74);
      *(_BYTE *)(v15 + 78) = *(_BYTE *)(a2 + v14 + 78);
      v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v19 = v18[9];
      v20 = (void *)(v15 + v19);
      v21 = (const void *)(v16 + v19);
      v22 = type metadata accessor for FloatingPointRoundingRule();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v43 = v18[10];
      v44 = v15 + v43;
      v45 = v16 + v43;
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_BYTE *)(v15 + v18[11]) = *(_BYTE *)(v16 + v18[11]);
      v46 = v18[12];
      v41 = (_BYTE *)(v15 + v46);
      v42 = (_BYTE *)(v16 + v46);
      goto LABEL_13;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_unknownObjectRetain();
    v25 = a5;
  }
  v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)(a2 + v26);
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(a2 + v26 + 8);
  v29 = *(_OWORD *)(a2 + v26 + 32);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a2 + v26 + 16);
  *(_OWORD *)(v27 + 32) = v29;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)(a2 + v26 + 57);
  *(_BYTE *)(v27 + 73) = *(_BYTE *)(a2 + v26 + 73);
  *(_BYTE *)(v27 + 76) = *(_BYTE *)(a2 + v26 + 76);
  *(_WORD *)(v27 + 74) = *(_WORD *)(a2 + v26 + 74);
  *(_BYTE *)(v27 + 77) = *(_BYTE *)(a2 + v26 + 77);
  v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v31 = v30[9];
  v32 = (void *)(v27 + v31);
  v33 = (const void *)(v28 + v31);
  v34 = type metadata accessor for FloatingPointRoundingRule();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = v30[10];
  v38 = v27 + v37;
  v39 = v28 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = v30[11];
  v41 = (_BYTE *)(v27 + v40);
  v42 = (_BYTE *)(v28 + v40);
LABEL_13:
  *v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, a4);
    a4(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v28 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        v15 = a1 + v14;
        v16 = a2 + v14;
        v17 = *(_QWORD *)(a2 + v14);
        *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
        *(_QWORD *)v15 = v17;
        v18 = *(_OWORD *)(v16 + 57);
        v20 = *(_OWORD *)(v16 + 32);
        v19 = *(_OWORD *)(v16 + 48);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
        *(_OWORD *)(v15 + 32) = v20;
        *(_OWORD *)(v15 + 48) = v19;
        *(_OWORD *)(v15 + 57) = v18;
        *(_BYTE *)(v15 + 73) = *(_BYTE *)(v16 + 73);
        *(_DWORD *)(v15 + 74) = *(_DWORD *)(v16 + 74);
        *(_BYTE *)(v15 + 78) = *(_BYTE *)(v16 + 78);
        v21 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v22 = v21[9];
        v23 = (void *)(v15 + v22);
        v24 = (const void *)(v16 + v22);
        v25 = type metadata accessor for FloatingPointRoundingRule();
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        v50 = v21[10];
        v51 = v15 + v50;
        v52 = (uint64_t *)(v16 + v50);
        v53 = *v52;
        *(_BYTE *)(v51 + 8) = *((_BYTE *)v52 + 8);
        *(_QWORD *)v51 = v53;
        *(_BYTE *)(v15 + v21[11]) = *(_BYTE *)(v16 + v21[11]);
        v54 = v21[12];
        v48 = (_BYTE *)(v15 + v54);
        v49 = (_BYTE *)(v16 + v54);
LABEL_14:
        *v48 = *v49;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      swift_unknownObjectRetain();
      v28 = a5;
    }
    v29 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v28) + 36);
    v30 = a1 + v29;
    v31 = a2 + v29;
    v32 = *(_QWORD *)(a2 + v29);
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(_QWORD *)v30 = v32;
    v33 = *(_OWORD *)(v31 + 57);
    v35 = *(_OWORD *)(v31 + 32);
    v34 = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(v31 + 16);
    *(_OWORD *)(v30 + 32) = v35;
    *(_OWORD *)(v30 + 48) = v34;
    *(_OWORD *)(v30 + 57) = v33;
    *(_BYTE *)(v30 + 73) = *(_BYTE *)(v31 + 73);
    LOBYTE(v32) = *(_BYTE *)(v31 + 76);
    *(_WORD *)(v30 + 74) = *(_WORD *)(v31 + 74);
    *(_BYTE *)(v30 + 76) = v32;
    *(_BYTE *)(v30 + 77) = *(_BYTE *)(v31 + 77);
    v36 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v37 = v36[9];
    v38 = (void *)(v30 + v37);
    v39 = (const void *)(v31 + v37);
    v40 = type metadata accessor for FloatingPointRoundingRule();
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = v36[10];
    v44 = v30 + v43;
    v45 = (uint64_t *)(v31 + v43);
    v46 = *v45;
    *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
    *(_QWORD *)v44 = v46;
    v47 = v36[11];
    v48 = (_BYTE *)(v30 + v47);
    v49 = (_BYTE *)(v31 + v47);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;

  a4(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v25 = a7;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
      v15[8] = *((_BYTE *)a2 + v14 + 8);
      v17 = *(_OWORD *)((char *)a2 + v14 + 32);
      *((_OWORD *)v15 + 1) = *(_OWORD *)((char *)a2 + v14 + 16);
      *((_OWORD *)v15 + 2) = v17;
      *((_OWORD *)v15 + 3) = *(_OWORD *)((char *)a2 + v14 + 48);
      *(_OWORD *)(v15 + 57) = *(_OWORD *)((char *)a2 + v14 + 57);
      v15[73] = *((_BYTE *)a2 + v14 + 73);
      *(_DWORD *)(v15 + 74) = *(_DWORD *)((char *)a2 + v14 + 74);
      v15[78] = *((_BYTE *)a2 + v14 + 78);
      v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v19 = v18[9];
      v20 = &v15[v19];
      v21 = &v16[v19];
      v22 = type metadata accessor for FloatingPointRoundingRule();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v43 = v18[10];
      v44 = &v15[v43];
      v45 = &v16[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v15[v18[11]] = v16[v18[11]];
      v46 = v18[12];
      v41 = &v15[v46];
      v42 = &v16[v46];
      goto LABEL_13;
    }
    *a1 = *a2;
    v25 = a5;
  }
  v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v25) + 36);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)((char *)a2 + v26);
  v27[8] = *((_BYTE *)a2 + v26 + 8);
  v29 = *(_OWORD *)((char *)a2 + v26 + 32);
  *((_OWORD *)v27 + 1) = *(_OWORD *)((char *)a2 + v26 + 16);
  *((_OWORD *)v27 + 2) = v29;
  *((_OWORD *)v27 + 3) = *(_OWORD *)((char *)a2 + v26 + 48);
  *(_OWORD *)(v27 + 57) = *(_OWORD *)((char *)a2 + v26 + 57);
  v27[73] = *((_BYTE *)a2 + v26 + 73);
  v27[76] = *((_BYTE *)a2 + v26 + 76);
  *((_WORD *)v27 + 37) = *(_WORD *)((char *)a2 + v26 + 74);
  v27[77] = *((_BYTE *)a2 + v26 + 77);
  v30 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v31 = v30[9];
  v32 = &v27[v31];
  v33 = &v28[v31];
  v34 = type metadata accessor for FloatingPointRoundingRule();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = v30[10];
  v38 = &v27[v37];
  v39 = &v28[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = v30[11];
  v41 = &v27[v40];
  v42 = &v28[v40];
LABEL_13:
  *v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  int EnumCaseMultiPayload;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, a4);
    a4(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v26 = a7;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 40);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        *(_QWORD *)v16 = *(_QWORD *)((char *)a2 + v15);
        v16[8] = *((_BYTE *)a2 + v15 + 8);
        v18 = *(_OWORD *)((char *)a2 + v15 + 32);
        *((_OWORD *)v16 + 1) = *(_OWORD *)((char *)a2 + v15 + 16);
        *((_OWORD *)v16 + 2) = v18;
        *((_OWORD *)v16 + 3) = *(_OWORD *)((char *)a2 + v15 + 48);
        *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)a2 + v15 + 57);
        v16[73] = *((_BYTE *)a2 + v15 + 73);
        *(_DWORD *)(v16 + 74) = *(_DWORD *)((char *)a2 + v15 + 74);
        v16[78] = *((_BYTE *)a2 + v15 + 78);
        v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v20 = v19[9];
        v21 = &v16[v20];
        v22 = &v17[v20];
        v23 = type metadata accessor for FloatingPointRoundingRule();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v44 = v19[10];
        v45 = &v16[v44];
        v46 = &v17[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v16[v19[11]] = v17[v19[11]];
        v47 = v19[12];
        v42 = &v16[v47];
        v43 = &v17[v47];
LABEL_14:
        *v42 = *v43;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v26 = a5;
    }
    v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v26) + 36);
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    *(_QWORD *)v28 = *(_QWORD *)((char *)a2 + v27);
    v28[8] = *((_BYTE *)a2 + v27 + 8);
    v30 = *(_OWORD *)((char *)a2 + v27 + 32);
    *((_OWORD *)v28 + 1) = *(_OWORD *)((char *)a2 + v27 + 16);
    *((_OWORD *)v28 + 2) = v30;
    *((_OWORD *)v28 + 3) = *(_OWORD *)((char *)a2 + v27 + 48);
    *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)a2 + v27 + 57);
    v28[73] = *((_BYTE *)a2 + v27 + 73);
    v28[76] = *((_BYTE *)a2 + v27 + 76);
    *((_WORD *)v28 + 37) = *(_WORD *)((char *)a2 + v27 + 74);
    v28[77] = *((_BYTE *)a2 + v27 + 77);
    v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v32 = v31[9];
    v33 = &v28[v32];
    v34 = &v29[v32];
    v35 = type metadata accessor for FloatingPointRoundingRule();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v38 = v31[10];
    v39 = &v28[v38];
    v40 = &v29[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v31[11];
    v42 = &v28[v41];
    v43 = &v29[v41];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A358A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A358BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t *a2)
{
  int v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = (uint64_t)a2 + v19;
      *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v19);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v19 + 8);
      v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v19 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v19 + 77);
      v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v24 = v23[9];
      v25 = (void *)(v20 + v24);
      v26 = (const void *)(v21 + v24);
      v27 = type metadata accessor for FloatingPointRoundingRule();
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1, v27))
      {
LABEL_10:
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_14:
        v38 = v23[10];
        v39 = v20 + v38;
        v40 = v21 + v38;
        *(_QWORD *)v39 = *(_QWORD *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v20 + v23[11]) = *(_BYTE *)(v21 + v23[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v6 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v6;
        v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v8 = a1 + v7;
        v9 = (uint64_t)a2 + v7;
        *(_QWORD *)v8 = *(uint64_t *)((char *)a2 + v7);
        *(_BYTE *)(v8 + 8) = *((_BYTE *)a2 + v7 + 8);
        v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(_BYTE *)(v8 + 73) = *((_BYTE *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(_BYTE *)(v8 + 78) = *((_BYTE *)a2 + v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        __dst = (void *)(v8 + v12);
        v13 = (const void *)(v9 + v12);
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        v35 = v11[10];
        v36 = v8 + v35;
        v37 = v9 + v35;
        *(_QWORD *)v36 = *(_QWORD *)v37;
        *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
        *(_BYTE *)(v8 + v11[11]) = *(_BYTE *)(v9 + v11[11]);
        *(_BYTE *)(v8 + v11[12]) = *(_BYTE *)(v9 + v11[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v30;
      v21 = (uint64_t)a2 + v30;
      *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v30);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v30 + 8);
      v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v30 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v30 + 77);
      v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v32 = v23[9];
      v25 = (void *)(v20 + v32);
      v26 = (const void *)(v21 + v32);
      v27 = type metadata accessor for FloatingPointRoundingRule();
      v28 = *(_QWORD *)(v27 - 8);
      v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v33(v26, 1, v27))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    goto LABEL_14;
  }
  v18 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    v19 = a1 + v18;
    v20 = a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = (void *)(v19 + v23);
    v25 = (const void *)(v20 + v23);
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1, v26))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v48 = v22[10];
    v49 = v19 + v48;
    v50 = v20 + v48;
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    v51 = v22[11];
    v46 = (_BYTE *)(v19 + v51);
    v47 = (_BYTE *)(v20 + v51);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    v7 = a1 + v6;
    v8 = a2 + v6;
    *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v11 = v10[9];
    v12 = (void *)(v7 + v11);
    v13 = (const void *)(v8 + v11);
    v14 = type metadata accessor for FloatingPointRoundingRule();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v42 = v10[10];
    v43 = v7 + v42;
    v44 = v8 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    v45 = v10[12];
    v46 = (_BYTE *)(v7 + v45);
    v47 = (_BYTE *)(v8 + v45);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    v31 = a1 + v30;
    v32 = a2 + v30;
    *(_QWORD *)v31 = *(_QWORD *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v35 = v34[9];
    v36 = (void *)(v31 + v35);
    v37 = (const void *)(v32 + v35);
    v38 = type metadata accessor for FloatingPointRoundingRule();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1, v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v52 = v34[10];
    v53 = v31 + v52;
    v54 = v32 + v52;
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    v55 = v34[11];
    v46 = (_BYTE *)(v31 + v55);
    v47 = (_BYTE *)(v32 + v55);
  }
  *v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      v22 = *(_OWORD *)(v21 + 57);
      v24 = *(_OWORD *)(v21 + 32);
      v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v25[9];
      v27 = (void *)(v20 + v26);
      v28 = (const void *)(v21 + v26);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
LABEL_9:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
        v46 = v25[10];
        v47 = v20 + v46;
        v48 = (uint64_t *)(v21 + v46);
        v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(_QWORD *)v47 = v49;
        v50 = v25[11];
        v44 = (_BYTE *)(v20 + v50);
        v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v6 = a1 + v5;
        v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        v8 = *(_OWORD *)(v7 + 57);
        v10 = *(_OWORD *)(v7 + 32);
        v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        v13 = (void *)(v6 + v12);
        v14 = (const void *)(v7 + v12);
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v39 = v11[10];
        v40 = v6 + v39;
        v41 = (uint64_t *)(v7 + v39);
        v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(_QWORD *)v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        v43 = v11[12];
        v44 = (_BYTE *)(v6 + v43);
        v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v32;
      v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      v33 = *(_OWORD *)(v21 + 57);
      v35 = *(_OWORD *)(v21 + 32);
      v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v36 = v25[9];
      v27 = (void *)(v20 + v36);
      v28 = (const void *)(v21 + v36);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1, v29))
        goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
      v7[8] = *((_BYTE *)a2 + v6 + 8);
      v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v11 = v10[9];
      v12 = &v7[v11];
      v13 = &v8[v11];
      v14 = type metadata accessor for FloatingPointRoundingRule();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v35 = v10[10];
      v36 = &v7[v35];
      v37 = &v8[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      v38 = v10[12];
      v33 = &v7[v38];
      v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  v18 = *(int *)(v17 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
  v19[8] = *((_BYTE *)a2 + v18 + 8);
  v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v23 = v22[9];
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = type metadata accessor for FloatingPointRoundingRule();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v22[10];
  v30 = &v19[v29];
  v31 = &v20[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  v32 = v22[11];
  v33 = &v19[v32];
  v34 = &v20[v32];
LABEL_13:
  *v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
    type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v11 = v10[9];
        v12 = &v7[v11];
        v13 = &v8[v11];
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        v35 = v10[10];
        v36 = &v7[v35];
        v37 = &v8[v35];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        v38 = v10[12];
        v33 = &v7[v38];
        v34 = &v8[v38];
LABEL_14:
        *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    v18 = *(int *)(v17 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = &v19[v23];
    v25 = &v20[v23];
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v22[10];
    v30 = &v19[v29];
    v31 = &v20[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v22[11];
    v33 = &v19[v32];
    v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A36CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181A36CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

char *initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  int *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t __dsta;
  char *__dst;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v8;
      v9 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v9;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v10 = (void *)*((_QWORD *)a2 + 9);
      v11 = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 9) = v10;
      *((_QWORD *)a1 + 10) = v11;
      v12 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = v12;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v13 = v10;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      v16 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v16;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xAu:
      v17 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v17;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xBu:
      v18 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = *((_QWORD *)a2 + 2);
      v20 = *((_QWORD *)a2 + 3);
      v21 = *((_QWORD *)a2 + 4);
      v22 = *((_QWORD *)a2 + 5);
      v23 = *((_QWORD *)a2 + 6);
      v24 = *((_QWORD *)a2 + 7);
      v25 = *((_QWORD *)a2 + 8);
      v120 = *((_QWORD *)a2 + 9);
      v121 = *((_QWORD *)a2 + 10);
      v122 = *((_QWORD *)a2 + 11);
      v123 = *((_QWORD *)a2 + 12);
      __dsta = *((_QWORD *)a2 + 13);
      v126 = *((_QWORD *)a2 + 14);
      v127 = *((_QWORD *)a2 + 15);
      v26 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v18, v19, v20, v21, v22, v23, v24, v25, v120, v121, v122, v123, __dsta, v126, v127, v26);
      *((_QWORD *)a1 + 1) = v18;
      *((_QWORD *)a1 + 2) = v19;
      *((_QWORD *)a1 + 3) = v20;
      *((_QWORD *)a1 + 4) = v21;
      *((_QWORD *)a1 + 5) = v22;
      *((_QWORD *)a1 + 6) = v23;
      *((_QWORD *)a1 + 7) = v24;
      *((_QWORD *)a1 + 8) = v25;
      *((_QWORD *)a1 + 9) = v120;
      *((_QWORD *)a1 + 10) = v121;
      *((_QWORD *)a1 + 11) = v122;
      *((_QWORD *)a1 + 12) = v123;
      *((_QWORD *)a1 + 13) = __dsta;
      *((_QWORD *)a1 + 14) = v126;
      *((_QWORD *)a1 + 15) = v127;
      *((_WORD *)a1 + 64) = v26;
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xCu:
      v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v27;
      v128 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v128;
      v28 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v28;
      v29 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v29;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xDu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                   + 48);
      v31 = &a1[v30];
      v32 = &a2[v30];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        v70 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)v31 = *(_OWORD *)v32;
          v34 = *((_QWORD *)v32 + 3);
          *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
          *((_QWORD *)v31 + 3) = v34;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          v35 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          v36 = &v31[v35];
          v37 = &v32[v35];
          *(_QWORD *)v36 = *(_QWORD *)&v32[v35];
          v36[8] = v32[v35 + 8];
          v38 = *(_OWORD *)&v32[v35 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v32[v35 + 16];
          *((_OWORD *)v36 + 2) = v38;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v32[v35 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v32[v35 + 57];
          v36[73] = v32[v35 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v32[v35 + 74];
          v36[78] = v32[v35 + 78];
          v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v40 = v39[9];
          v41 = &v36[v40];
          v42 = &v37[v40];
          v43 = type metadata accessor for FloatingPointRoundingRule();
          v44 = *(_QWORD *)(v43 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
            goto LABEL_39;
          goto LABEL_13;
        }
        *(_OWORD *)v31 = *(_OWORD *)v32;
        swift_unknownObjectRetain();
        v70 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v70) + 36);
      v72 = &v31[v71];
      v73 = &v32[v71];
      *(_QWORD *)v72 = *(_QWORD *)&v32[v71];
      v72[8] = v32[v71 + 8];
      v74 = *(_OWORD *)&v32[v71 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v32[v71 + 16];
      *((_OWORD *)v72 + 2) = v74;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v32[v71 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v32[v71 + 57];
      v72[73] = v32[v71 + 73];
      v72[76] = v32[v71 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v32[v71 + 74];
      v72[77] = v32[v71 + 77];
      v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v76 = v75[9];
      v77 = &v72[v76];
      v78 = &v73[v76];
      v79 = type metadata accessor for FloatingPointRoundingRule();
      v80 = *(_QWORD *)(v79 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
        goto LABEL_36;
      goto LABEL_27;
    case 0xEu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v46 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      v47 = &a1[v46];
      v48 = &a2[v46];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      v49 = swift_getEnumCaseMultiPayload();
      if (v49 == 2)
      {
        *(_OWORD *)v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        v82 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v49 == 1)
        {
          *(_OWORD *)v47 = *(_OWORD *)v48;
          v50 = *((_QWORD *)v48 + 3);
          *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
          *((_QWORD *)v47 + 3) = v50;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          v36 = &v47[v51];
          v37 = &v48[v51];
          *(_QWORD *)v36 = *(_QWORD *)&v48[v51];
          v36[8] = v48[v51 + 8];
          v52 = *(_OWORD *)&v48[v51 + 32];
          *((_OWORD *)v36 + 1) = *(_OWORD *)&v48[v51 + 16];
          *((_OWORD *)v36 + 2) = v52;
          *((_OWORD *)v36 + 3) = *(_OWORD *)&v48[v51 + 48];
          *(_OWORD *)(v36 + 57) = *(_OWORD *)&v48[v51 + 57];
          v36[73] = v48[v51 + 73];
          *(_DWORD *)(v36 + 74) = *(_DWORD *)&v48[v51 + 74];
          v36[78] = v48[v51 + 78];
          v39 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v53 = v39[9];
          v41 = &v36[v53];
          v42 = &v37[v53];
          v43 = type metadata accessor for FloatingPointRoundingRule();
          v44 = *(_QWORD *)(v43 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
          {
LABEL_13:
            v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
          }
          else
          {
LABEL_39:
            (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          }
          v108 = v39[10];
          v109 = &v36[v108];
          v110 = &v37[v108];
          *(_QWORD *)v109 = *(_QWORD *)v110;
          v109[8] = v110[8];
          v36[v39[11]] = v37[v39[11]];
          v111 = v39[12];
          v106 = &v36[v111];
          v107 = &v37[v111];
          goto LABEL_41;
        }
        *(_OWORD *)v47 = *(_OWORD *)v48;
        swift_unknownObjectRetain();
        v82 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      v83 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v82) + 36);
      v72 = &v47[v83];
      v73 = &v48[v83];
      *(_QWORD *)v72 = *(_QWORD *)&v48[v83];
      v72[8] = v48[v83 + 8];
      v84 = *(_OWORD *)&v48[v83 + 32];
      *((_OWORD *)v72 + 1) = *(_OWORD *)&v48[v83 + 16];
      *((_OWORD *)v72 + 2) = v84;
      *((_OWORD *)v72 + 3) = *(_OWORD *)&v48[v83 + 48];
      *(_OWORD *)(v72 + 57) = *(_OWORD *)&v48[v83 + 57];
      v72[73] = v48[v83 + 73];
      v72[76] = v48[v83 + 76];
      *((_WORD *)v72 + 37) = *(_WORD *)&v48[v83 + 74];
      v72[77] = v48[v83 + 77];
      v75 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v85 = v75[9];
      v77 = &v72[v85];
      v78 = &v73[v85];
      v79 = type metadata accessor for FloatingPointRoundingRule();
      v80 = *(_QWORD *)(v79 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
      {
LABEL_27:
        v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
LABEL_36:
        (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      }
      v102 = v75[10];
      v103 = &v72[v102];
      v104 = &v73[v102];
      *(_QWORD *)v103 = *(_QWORD *)v104;
      v103[8] = v104[8];
      v105 = v75[11];
      v106 = &v72[v105];
      v107 = &v73[v105];
      goto LABEL_41;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      v54 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      v55 = &a1[v54];
      v56 = &a2[v54];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      v57 = swift_getEnumCaseMultiPayload();
      if (v57 == 2)
      {
        *(_OWORD *)v55 = *(_OWORD *)v56;
        v86 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
        v87 = &v55[v86];
        v88 = &v56[v86];
        *(_QWORD *)v87 = *(_QWORD *)&v56[v86];
        v87[8] = v56[v86 + 8];
        v89 = *(_OWORD *)&v56[v86 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v86 + 16];
        *((_OWORD *)v87 + 2) = v89;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v86 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v86 + 57];
        v87[73] = v56[v86 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v86 + 74];
        v87[76] = v56[v86 + 76];
        v87[77] = v56[v86 + 77];
        v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v91 = v90[9];
        v92 = &v87[v91];
        v93 = &v88[v91];
        v94 = type metadata accessor for FloatingPointRoundingRule();
        v95 = *(_QWORD *)(v94 - 8);
        v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_unknownObjectRetain();
        if (v96(v93, 1, v94))
          goto LABEL_35;
        goto LABEL_45;
      }
      if (v57 != 1)
      {
        *(_OWORD *)v55 = *(_OWORD *)v56;
        v97 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
        v87 = &v55[v97];
        v88 = &v56[v97];
        *(_QWORD *)v87 = *(_QWORD *)&v56[v97];
        v87[8] = v56[v97 + 8];
        v98 = *(_OWORD *)&v56[v97 + 32];
        *((_OWORD *)v87 + 1) = *(_OWORD *)&v56[v97 + 16];
        *((_OWORD *)v87 + 2) = v98;
        *((_OWORD *)v87 + 3) = *(_OWORD *)&v56[v97 + 48];
        *(_OWORD *)(v87 + 57) = *(_OWORD *)&v56[v97 + 57];
        v87[73] = v56[v97 + 73];
        *((_WORD *)v87 + 37) = *(_WORD *)&v56[v97 + 74];
        v87[76] = v56[v97 + 76];
        v87[77] = v56[v97 + 77];
        v90 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v99 = v90[9];
        v92 = &v87[v99];
        v93 = &v88[v99];
        v94 = type metadata accessor for FloatingPointRoundingRule();
        v95 = *(_QWORD *)(v94 - 8);
        v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
        swift_unknownObjectRetain();
        if (v100(v93, 1, v94))
        {
LABEL_35:
          v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
LABEL_46:
          v116 = v90[10];
          v117 = &v87[v116];
          v118 = &v88[v116];
          *(_QWORD *)v117 = *(_QWORD *)v118;
          v117[8] = v118[8];
          v119 = v90[11];
          v106 = &v87[v119];
          v107 = &v88[v119];
          goto LABEL_41;
        }
LABEL_45:
        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        goto LABEL_46;
      }
      *(_OWORD *)v55 = *(_OWORD *)v56;
      v58 = *((_QWORD *)v56 + 3);
      *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
      *((_QWORD *)v55 + 3) = v58;
      v59 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      v60 = &v55[v59];
      v61 = &v56[v59];
      *(_QWORD *)v60 = *(_QWORD *)&v56[v59];
      v60[8] = v56[v59 + 8];
      v62 = *(_OWORD *)&v56[v59 + 32];
      *((_OWORD *)v60 + 1) = *(_OWORD *)&v56[v59 + 16];
      *((_OWORD *)v60 + 2) = v62;
      *((_OWORD *)v60 + 3) = *(_OWORD *)&v56[v59 + 48];
      *(_OWORD *)(v60 + 57) = *(_OWORD *)&v56[v59 + 57];
      v60[73] = v56[v59 + 73];
      *(_DWORD *)(v60 + 74) = *(_DWORD *)&v56[v59 + 74];
      v60[78] = v56[v59 + 78];
      v63 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v64 = v63[9];
      __dst = &v60[v64];
      v65 = &v61[v64];
      v66 = type metadata accessor for FloatingPointRoundingRule();
      v67 = *(_QWORD *)(v66 - 8);
      v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v68(v65, 1, v66))
      {
        v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v65, v66);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v66);
      }
      v112 = v63[10];
      v113 = &v60[v112];
      v114 = &v61[v112];
      *(_QWORD *)v113 = *(_QWORD *)v114;
      v113[8] = v114[8];
      v60[v63[11]] = v61[v63[11]];
      v115 = v63[12];
      v106 = &v60[v115];
      v107 = &v61[v115];
LABEL_41:
      *v106 = *v107;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
      return a1;
  }
}

void destroy for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      goto LABEL_3;
    case 8u:
LABEL_3:
      swift_bridgeObjectRelease();
      return;
    case 0xAu:
      swift_release();
      return;
    case 0xBu:
      outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_WORD *)(a1 + 128));
      return;
    case 0xCu:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_20;
    case 0xDu:
      v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        swift_unknownObjectRelease();
        v4 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        goto LABEL_24;
      }
      if (EnumCaseMultiPayload == 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        v8 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
        goto LABEL_26;
      }
      if (EnumCaseMultiPayload)
        return;
      swift_unknownObjectRelease();
      v4 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      goto LABEL_24;
    case 0xEu:
      v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      v5 = swift_getEnumCaseMultiPayload();
      if (v5 == 2)
      {
        swift_unknownObjectRelease();
        v4 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_24:
        v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v4) + 36);
        goto LABEL_29;
      }
      if (v5 != 1)
      {
        if (v5)
          return;
        swift_unknownObjectRelease();
        v4 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        goto LABEL_24;
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v8 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_26:
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v8) + 40);
LABEL_31:
      v10 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_32:
      v11 = v2 + v9 + *(int *)(v10 + 36);
      v12 = type metadata accessor for FloatingPointRoundingRule();
      v13 = *(_QWORD *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      return;
    case 0xFu:
      v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                  + 48);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      v6 = swift_getEnumCaseMultiPayload();
      if (v6 == 2)
      {
        swift_unknownObjectRelease();
        v7 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (v6 == 1)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v9 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          goto LABEL_31;
        }
        if (v6)
          return;
        swift_unknownObjectRelease();
        v7 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      v9 = *(int *)(v7 + 20);
LABEL_29:
      v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      goto LABEL_32;
    case 0x10u:
      swift_bridgeObjectRelease();
LABEL_20:
      swift_unknownObjectRelease();
      return;
    default:
      return;
  }
}

char *initializeWithCopy for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  int *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t __dsta;
  char *__dst;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v6;
      v7 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v7;
      v8 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v8;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v9 = (void *)*((_QWORD *)a2 + 9);
      v10 = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 9) = v9;
      *((_QWORD *)a1 + 10) = v10;
      v11 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = v11;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v12 = v9;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_44;
    case 8u:
      v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_44;
    case 0xAu:
      v14 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v14;
      swift_retain();
      goto LABEL_44;
    case 0xBu:
      v15 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 2);
      v17 = *((_QWORD *)a2 + 3);
      v18 = *((_QWORD *)a2 + 4);
      v19 = *((_QWORD *)a2 + 5);
      v20 = *((_QWORD *)a2 + 6);
      v21 = *((_QWORD *)a2 + 7);
      v22 = *((_QWORD *)a2 + 8);
      v118 = *((_QWORD *)a2 + 9);
      v119 = *((_QWORD *)a2 + 10);
      v120 = *((_QWORD *)a2 + 11);
      v121 = *((_QWORD *)a2 + 12);
      __dsta = *((_QWORD *)a2 + 13);
      v124 = *((_QWORD *)a2 + 14);
      v125 = *((_QWORD *)a2 + 15);
      v23 = *((_WORD *)a2 + 64);
      outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v15, v16, v17, v18, v19, v20, v21, v22, v118, v119, v120, v121, __dsta, v124, v125, v23);
      *((_QWORD *)a1 + 1) = v15;
      *((_QWORD *)a1 + 2) = v16;
      *((_QWORD *)a1 + 3) = v17;
      *((_QWORD *)a1 + 4) = v18;
      *((_QWORD *)a1 + 5) = v19;
      *((_QWORD *)a1 + 6) = v20;
      *((_QWORD *)a1 + 7) = v21;
      *((_QWORD *)a1 + 8) = v22;
      *((_QWORD *)a1 + 9) = v118;
      *((_QWORD *)a1 + 10) = v119;
      *((_QWORD *)a1 + 11) = v120;
      *((_QWORD *)a1 + 12) = v121;
      *((_QWORD *)a1 + 13) = __dsta;
      *((_QWORD *)a1 + 14) = v124;
      *((_QWORD *)a1 + 15) = v125;
      *((_WORD *)a1 + 64) = v23;
      goto LABEL_44;
    case 0xCu:
      v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      v126 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v126;
      v25 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v25;
      v26 = *((_OWORD *)a2 + 6);
      *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
      *((_OWORD *)a1 + 6) = v26;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_44;
    case 0xDu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                   + 48);
      v28 = &a1[v27];
      v29 = &a2[v27];
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        v67 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_OWORD *)v28 = *(_OWORD *)v29;
          v31 = *((_QWORD *)v29 + 3);
          *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
          *((_QWORD *)v28 + 3) = v31;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          v33 = &v28[v32];
          v34 = &v29[v32];
          *(_QWORD *)v33 = *(_QWORD *)&v29[v32];
          v33[8] = v29[v32 + 8];
          v35 = *(_OWORD *)&v29[v32 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v29[v32 + 16];
          *((_OWORD *)v33 + 2) = v35;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v29[v32 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v29[v32 + 57];
          v33[73] = v29[v32 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v29[v32 + 74];
          v33[78] = v29[v32 + 78];
          v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v37 = v36[9];
          v38 = &v33[v37];
          v39 = &v34[v37];
          v40 = type metadata accessor for FloatingPointRoundingRule();
          v41 = *(_QWORD *)(v40 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
            goto LABEL_36;
          goto LABEL_10;
        }
        *(_OWORD *)v28 = *(_OWORD *)v29;
        swift_unknownObjectRetain();
        v67 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      v68 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v67) + 36);
      v69 = &v28[v68];
      v70 = &v29[v68];
      *(_QWORD *)v69 = *(_QWORD *)&v29[v68];
      v69[8] = v29[v68 + 8];
      v71 = *(_OWORD *)&v29[v68 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v29[v68 + 16];
      *((_OWORD *)v69 + 2) = v71;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v29[v68 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v29[v68 + 57];
      v69[73] = v29[v68 + 73];
      v69[76] = v29[v68 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v29[v68 + 74];
      v69[77] = v29[v68 + 77];
      v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v73 = v72[9];
      v74 = &v69[v73];
      v75 = &v70[v73];
      v76 = type metadata accessor for FloatingPointRoundingRule();
      v77 = *(_QWORD *)(v76 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        goto LABEL_33;
      goto LABEL_24;
    case 0xEu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      v44 = &a1[v43];
      v45 = &a2[v43];
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 2)
      {
        *(_OWORD *)v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        v79 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v46 == 1)
        {
          *(_OWORD *)v44 = *(_OWORD *)v45;
          v47 = *((_QWORD *)v45 + 3);
          *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
          *((_QWORD *)v44 + 3) = v47;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          v33 = &v44[v48];
          v34 = &v45[v48];
          *(_QWORD *)v33 = *(_QWORD *)&v45[v48];
          v33[8] = v45[v48 + 8];
          v49 = *(_OWORD *)&v45[v48 + 32];
          *((_OWORD *)v33 + 1) = *(_OWORD *)&v45[v48 + 16];
          *((_OWORD *)v33 + 2) = v49;
          *((_OWORD *)v33 + 3) = *(_OWORD *)&v45[v48 + 48];
          *(_OWORD *)(v33 + 57) = *(_OWORD *)&v45[v48 + 57];
          v33[73] = v45[v48 + 73];
          *(_DWORD *)(v33 + 74) = *(_DWORD *)&v45[v48 + 74];
          v33[78] = v45[v48 + 78];
          v36 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v50 = v36[9];
          v38 = &v33[v50];
          v39 = &v34[v50];
          v40 = type metadata accessor for FloatingPointRoundingRule();
          v41 = *(_QWORD *)(v40 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
LABEL_10:
            v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
          else
          {
LABEL_36:
            (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          v105 = v36[10];
          v106 = &v33[v105];
          v107 = &v34[v105];
          *(_QWORD *)v106 = *(_QWORD *)v107;
          v106[8] = v107[8];
          v33[v36[11]] = v34[v36[11]];
          v108 = v36[12];
          v103 = &v33[v108];
          v104 = &v34[v108];
          goto LABEL_43;
        }
        *(_OWORD *)v44 = *(_OWORD *)v45;
        swift_unknownObjectRetain();
        v79 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v79) + 36);
      v69 = &v44[v80];
      v70 = &v45[v80];
      *(_QWORD *)v69 = *(_QWORD *)&v45[v80];
      v69[8] = v45[v80 + 8];
      v81 = *(_OWORD *)&v45[v80 + 32];
      *((_OWORD *)v69 + 1) = *(_OWORD *)&v45[v80 + 16];
      *((_OWORD *)v69 + 2) = v81;
      *((_OWORD *)v69 + 3) = *(_OWORD *)&v45[v80 + 48];
      *(_OWORD *)(v69 + 57) = *(_OWORD *)&v45[v80 + 57];
      v69[73] = v45[v80 + 73];
      v69[76] = v45[v80 + 76];
      *((_WORD *)v69 + 37) = *(_WORD *)&v45[v80 + 74];
      v69[77] = v45[v80 + 77];
      v72 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v82 = v72[9];
      v74 = &v69[v82];
      v75 = &v70[v82];
      v76 = type metadata accessor for FloatingPointRoundingRule();
      v77 = *(_QWORD *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
      {
LABEL_24:
        v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
LABEL_33:
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
      }
      v99 = v72[10];
      v100 = &v69[v99];
      v101 = &v70[v99];
      *(_QWORD *)v100 = *(_QWORD *)v101;
      v100[8] = v101[8];
      v102 = v72[11];
      v103 = &v69[v102];
      v104 = &v70[v102];
      goto LABEL_43;
    case 0xFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      v52 = &a1[v51];
      v53 = &a2[v51];
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      v54 = swift_getEnumCaseMultiPayload();
      if (v54 == 2)
      {
        *(_OWORD *)v52 = *(_OWORD *)v53;
        v83 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
        v84 = &v52[v83];
        v85 = &v53[v83];
        *(_QWORD *)v84 = *(_QWORD *)&v53[v83];
        v84[8] = v53[v83 + 8];
        v86 = *(_OWORD *)&v53[v83 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v83 + 16];
        *((_OWORD *)v84 + 2) = v86;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v83 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v83 + 57];
        v84[73] = v53[v83 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v83 + 74];
        v84[76] = v53[v83 + 76];
        v84[77] = v53[v83 + 77];
        v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v88 = v87[9];
        v89 = &v84[v88];
        v90 = &v85[v88];
        v91 = type metadata accessor for FloatingPointRoundingRule();
        v92 = *(_QWORD *)(v91 - 8);
        v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        swift_unknownObjectRetain();
        if (v93(v90, 1, v91))
          goto LABEL_32;
        goto LABEL_41;
      }
      if (v54 != 1)
      {
        *(_OWORD *)v52 = *(_OWORD *)v53;
        v94 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
        v84 = &v52[v94];
        v85 = &v53[v94];
        *(_QWORD *)v84 = *(_QWORD *)&v53[v94];
        v84[8] = v53[v94 + 8];
        v95 = *(_OWORD *)&v53[v94 + 32];
        *((_OWORD *)v84 + 1) = *(_OWORD *)&v53[v94 + 16];
        *((_OWORD *)v84 + 2) = v95;
        *((_OWORD *)v84 + 3) = *(_OWORD *)&v53[v94 + 48];
        *(_OWORD *)(v84 + 57) = *(_OWORD *)&v53[v94 + 57];
        v84[73] = v53[v94 + 73];
        *((_WORD *)v84 + 37) = *(_WORD *)&v53[v94 + 74];
        v84[76] = v53[v94 + 76];
        v84[77] = v53[v94 + 77];
        v87 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v96 = v87[9];
        v89 = &v84[v96];
        v90 = &v85[v96];
        v91 = type metadata accessor for FloatingPointRoundingRule();
        v92 = *(_QWORD *)(v91 - 8);
        v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        swift_unknownObjectRetain();
        if (v97(v90, 1, v91))
        {
LABEL_32:
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
LABEL_42:
          v113 = v87[10];
          v114 = &v84[v113];
          v115 = &v85[v113];
          *(_QWORD *)v114 = *(_QWORD *)v115;
          v114[8] = v115[8];
          v116 = v87[11];
          v103 = &v84[v116];
          v104 = &v85[v116];
          goto LABEL_43;
        }
LABEL_41:
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        goto LABEL_42;
      }
      *(_OWORD *)v52 = *(_OWORD *)v53;
      v55 = *((_QWORD *)v53 + 3);
      *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
      *((_QWORD *)v52 + 3) = v55;
      v56 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      v57 = &v52[v56];
      v58 = &v53[v56];
      *(_QWORD *)v57 = *(_QWORD *)&v53[v56];
      v57[8] = v53[v56 + 8];
      v59 = *(_OWORD *)&v53[v56 + 32];
      *((_OWORD *)v57 + 1) = *(_OWORD *)&v53[v56 + 16];
      *((_OWORD *)v57 + 2) = v59;
      *((_OWORD *)v57 + 3) = *(_OWORD *)&v53[v56 + 48];
      *(_OWORD *)(v57 + 57) = *(_OWORD *)&v53[v56 + 57];
      v57[73] = v53[v56 + 73];
      *(_DWORD *)(v57 + 74) = *(_DWORD *)&v53[v56 + 74];
      v57[78] = v53[v56 + 78];
      v60 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v61 = v60[9];
      __dst = &v57[v61];
      v62 = &v58[v61];
      v63 = type metadata accessor for FloatingPointRoundingRule();
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v65(v62, 1, v63))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(__dst, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v63);
      }
      v109 = v60[10];
      v110 = &v57[v109];
      v111 = &v58[v109];
      *(_QWORD *)v110 = *(_QWORD *)v111;
      v110[8] = v111[8];
      v57[v60[11]] = v58[v60[11]];
      v112 = v60[12];
      v103 = &v57[v112];
      v104 = &v58[v112];
LABEL_43:
      *v103 = *v104;
      swift_storeEnumTagMultiPayload();
LABEL_44:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_44;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

char *assignWithCopy for String.LocalizationValue.FormatArgument.CodableStorage(char *a1, char *a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t __dsta;
  char *__dst;
  uint64_t v132;
  uint64_t v133;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        v6 = (void *)*((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 9) = v6;
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v7 = v6;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_45;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_45;
      case 0xAu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        swift_retain();
        goto LABEL_45;
      case 0xBu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v26 = *((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        v28 = *((_QWORD *)a2 + 3);
        v29 = *((_QWORD *)a2 + 4);
        v30 = *((_QWORD *)a2 + 5);
        v31 = *((_QWORD *)a2 + 6);
        v33 = *((_QWORD *)a2 + 7);
        v32 = *((_QWORD *)a2 + 8);
        v126 = *((_QWORD *)a2 + 9);
        v127 = *((_QWORD *)a2 + 10);
        v128 = *((_QWORD *)a2 + 11);
        v129 = *((_QWORD *)a2 + 12);
        __dsta = *((_QWORD *)a2 + 13);
        v132 = *((_QWORD *)a2 + 14);
        v133 = *((_QWORD *)a2 + 15);
        v34 = *((_WORD *)a2 + 64);
        outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v26, v27, v28, v29, v30, v31, v33, v32, v126, v127, v128, v129, __dsta, v132, v133, v34);
        *((_QWORD *)a1 + 1) = v26;
        *((_QWORD *)a1 + 2) = v27;
        *((_QWORD *)a1 + 3) = v28;
        *((_QWORD *)a1 + 4) = v29;
        *((_QWORD *)a1 + 5) = v30;
        *((_QWORD *)a1 + 6) = v31;
        *((_QWORD *)a1 + 7) = v33;
        *((_QWORD *)a1 + 8) = v32;
        *((_QWORD *)a1 + 9) = v126;
        *((_QWORD *)a1 + 10) = v127;
        *((_QWORD *)a1 + 11) = v128;
        *((_QWORD *)a1 + 12) = v129;
        *((_QWORD *)a1 + 13) = __dsta;
        *((_QWORD *)a1 + 14) = v132;
        *((_QWORD *)a1 + 15) = v133;
        *((_WORD *)a1 + 64) = v34;
        goto LABEL_45;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        v35 = *((_OWORD *)a2 + 4);
        v36 = *((_OWORD *)a2 + 5);
        v37 = *((_OWORD *)a2 + 6);
        *((_WORD *)a1 + 56) = *((_WORD *)a2 + 56);
        *((_OWORD *)a1 + 5) = v36;
        *((_OWORD *)a1 + 6) = v37;
        *((_OWORD *)a1 + 4) = v35;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_45;
      case 0xDu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                    + 48);
        v9 = &a1[v8];
        v10 = &a2[v8];
        type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          *(_OWORD *)v9 = *(_OWORD *)v10;
          swift_unknownObjectRetain();
          v66 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        }
        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            *(_OWORD *)v9 = *(_OWORD *)v10;
            *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
            *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                         + 40);
            v13 = &v9[v12];
            v14 = &v10[v12];
            v15 = *(_QWORD *)&v10[v12];
            v13[8] = v14[8];
            *(_QWORD *)v13 = v15;
            v16 = *(_OWORD *)(v14 + 57);
            v18 = *((_OWORD *)v14 + 2);
            v17 = *((_OWORD *)v14 + 3);
            *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
            *((_OWORD *)v13 + 2) = v18;
            *((_OWORD *)v13 + 3) = v17;
            *(_OWORD *)(v13 + 57) = v16;
            v13[73] = v14[73];
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            v13[78] = v14[78];
            v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
            v20 = v19[9];
            v21 = &v13[v20];
            v22 = &v14[v20];
            v23 = type metadata accessor for FloatingPointRoundingRule();
            v24 = *(_QWORD *)(v23 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
              goto LABEL_39;
            goto LABEL_8;
          }
          *(_OWORD *)v9 = *(_OWORD *)v10;
          swift_unknownObjectRetain();
          v66 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
        }
        v67 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v66) + 36);
        v68 = &v9[v67];
        v69 = &v10[v67];
        v70 = *(_QWORD *)&v10[v67];
        v68[8] = v69[8];
        *(_QWORD *)v68 = v70;
        v71 = *(_OWORD *)(v69 + 57);
        v73 = *((_OWORD *)v69 + 2);
        v72 = *((_OWORD *)v69 + 3);
        *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
        *((_OWORD *)v68 + 2) = v73;
        *((_OWORD *)v68 + 3) = v72;
        *(_OWORD *)(v68 + 57) = v71;
        v68[73] = v69[73];
        LOBYTE(v70) = v69[76];
        *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
        v68[76] = v70;
        v68[77] = v69[77];
        v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v75 = v74[9];
        v76 = &v68[v75];
        v77 = &v69[v75];
        v78 = type metadata accessor for FloatingPointRoundingRule();
        v79 = *(_QWORD *)(v78 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          goto LABEL_34;
        goto LABEL_25;
      case 0xEu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                     + 48);
        v39 = &a1[v38];
        v40 = &a2[v38];
        type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
        v41 = swift_getEnumCaseMultiPayload();
        if (v41 == 2)
        {
          *(_OWORD *)v39 = *(_OWORD *)v40;
          swift_unknownObjectRetain();
          v81 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
        }
        else
        {
          if (v41 == 1)
          {
            *(_OWORD *)v39 = *(_OWORD *)v40;
            *((_QWORD *)v39 + 2) = *((_QWORD *)v40 + 2);
            *((_QWORD *)v39 + 3) = *((_QWORD *)v40 + 3);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            v42 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                         + 40);
            v13 = &v39[v42];
            v14 = &v40[v42];
            v43 = *(_QWORD *)&v40[v42];
            v13[8] = v14[8];
            *(_QWORD *)v13 = v43;
            v44 = *(_OWORD *)(v14 + 57);
            v46 = *((_OWORD *)v14 + 2);
            v45 = *((_OWORD *)v14 + 3);
            *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
            *((_OWORD *)v13 + 2) = v46;
            *((_OWORD *)v13 + 3) = v45;
            *(_OWORD *)(v13 + 57) = v44;
            v13[73] = v14[73];
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            v13[78] = v14[78];
            v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
            v47 = v19[9];
            v21 = &v13[v47];
            v22 = &v14[v47];
            v23 = type metadata accessor for FloatingPointRoundingRule();
            v24 = *(_QWORD *)(v23 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
            {
LABEL_8:
              v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
              memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
            }
            else
            {
LABEL_39:
              (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
            }
            v115 = v19[10];
            v116 = &v13[v115];
            v117 = &v14[v115];
            v118 = *(_QWORD *)v117;
            v116[8] = v117[8];
            *(_QWORD *)v116 = v118;
            v13[v19[11]] = v14[v19[11]];
            v119 = v19[12];
            v108 = &v13[v119];
            v109 = &v14[v119];
            goto LABEL_44;
          }
          *(_OWORD *)v39 = *(_OWORD *)v40;
          swift_unknownObjectRetain();
          v81 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
        }
        v82 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v81) + 36);
        v68 = &v39[v82];
        v69 = &v40[v82];
        v83 = *(_QWORD *)&v40[v82];
        v68[8] = v69[8];
        *(_QWORD *)v68 = v83;
        v84 = *(_OWORD *)(v69 + 57);
        v86 = *((_OWORD *)v69 + 2);
        v85 = *((_OWORD *)v69 + 3);
        *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
        *((_OWORD *)v68 + 2) = v86;
        *((_OWORD *)v68 + 3) = v85;
        *(_OWORD *)(v68 + 57) = v84;
        v68[73] = v69[73];
        LOBYTE(v83) = v69[76];
        *((_WORD *)v68 + 37) = *((_WORD *)v69 + 37);
        v68[76] = v83;
        v68[77] = v69[77];
        v74 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v87 = v74[9];
        v76 = &v68[v87];
        v77 = &v69[v87];
        v78 = type metadata accessor for FloatingPointRoundingRule();
        v79 = *(_QWORD *)(v78 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
        {
LABEL_25:
          v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
LABEL_34:
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
        }
        v103 = v74[10];
        v104 = &v68[v103];
        v105 = &v69[v103];
        v106 = *(_QWORD *)v105;
        v104[8] = v105[8];
        *(_QWORD *)v104 = v106;
        v107 = v74[11];
        v108 = &v68[v107];
        v109 = &v69[v107];
        goto LABEL_44;
      case 0xFu:
        v48 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = v48;
        v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                     + 48);
        v50 = &a1[v49];
        v51 = &a2[v49];
        type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
        v52 = swift_getEnumCaseMultiPayload();
        if (v52 == 2)
        {
          *(_OWORD *)v50 = *(_OWORD *)v51;
          v88 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
        }
        else
        {
          if (v52 == 1)
          {
            *(_OWORD *)v50 = *(_OWORD *)v51;
            *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
            *((_QWORD *)v50 + 3) = *((_QWORD *)v51 + 3);
            v53 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
            v54 = &v50[v53];
            v55 = &v51[v53];
            LOBYTE(v53) = v51[v53 + 8];
            *(_QWORD *)v54 = *(_QWORD *)v55;
            v54[8] = v53;
            v56 = *(_OWORD *)(v55 + 57);
            v58 = *((_OWORD *)v55 + 2);
            v57 = *((_OWORD *)v55 + 3);
            *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
            *((_OWORD *)v54 + 2) = v58;
            *((_OWORD *)v54 + 3) = v57;
            *(_OWORD *)(v54 + 57) = v56;
            v54[73] = v55[73];
            *(_DWORD *)(v54 + 74) = *(_DWORD *)(v55 + 74);
            v54[78] = v55[78];
            v59 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
            v60 = v59[9];
            __dst = &v54[v60];
            v61 = &v55[v60];
            v62 = type metadata accessor for FloatingPointRoundingRule();
            v63 = *(_QWORD *)(v62 - 8);
            v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            if (v64(v61, 1, v62))
            {
              v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
              memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v63 + 16))(__dst, v61, v62);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
            }
            v120 = v59[10];
            v121 = &v54[v120];
            v122 = &v55[v120];
            v123 = *(_QWORD *)v122;
            v121[8] = v122[8];
            *(_QWORD *)v121 = v123;
            v54[v59[11]] = v55[v59[11]];
            v124 = v59[12];
            v108 = &v54[v124];
            v109 = &v55[v124];
            goto LABEL_44;
          }
          *(_OWORD *)v50 = *(_OWORD *)v51;
          v88 = type metadata accessor for NSDecimal.FormatStyle(0);
        }
        v89 = *(int *)(v88 + 20);
        v90 = &v50[v89];
        v91 = &v51[v89];
        LOBYTE(v89) = v51[v89 + 8];
        *(_QWORD *)v90 = *(_QWORD *)v91;
        v90[8] = v89;
        v92 = *(_OWORD *)(v91 + 57);
        v94 = *((_OWORD *)v91 + 2);
        v93 = *((_OWORD *)v91 + 3);
        *((_OWORD *)v90 + 1) = *((_OWORD *)v91 + 1);
        *((_OWORD *)v90 + 2) = v94;
        *((_OWORD *)v90 + 3) = v93;
        *(_OWORD *)(v90 + 57) = v92;
        v90[73] = v91[73];
        LOWORD(v89) = *((_WORD *)v91 + 37);
        v90[76] = v91[76];
        *((_WORD *)v90 + 37) = v89;
        v90[77] = v91[77];
        v95 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v96 = v95[9];
        v97 = &v90[v96];
        v98 = &v91[v96];
        v99 = type metadata accessor for FloatingPointRoundingRule();
        v100 = *(_QWORD *)(v99 - 8);
        v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
        swift_unknownObjectRetain();
        if (v101(v98, 1, v99))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        }
        v110 = v95[10];
        v111 = &v90[v110];
        v112 = &v91[v110];
        v113 = *(_QWORD *)v112;
        v111[8] = v112[8];
        *(_QWORD *)v111 = v113;
        v114 = v95[11];
        v108 = &v90[v114];
        v109 = &v91[v114];
LABEL_44:
        *v108 = *v109;
        swift_storeEnumTagMultiPayload();
LABEL_45:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        a1[9] = a2[9];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_45;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

_DWORD *initializeWithTake for String.LocalizationValue.FormatArgument.CodableStorage(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      v23 = (_OWORD *)((char *)a1 + v22);
      v24 = (_OWORD *)((char *)a2 + v22);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 2)
      {
        *v23 = *v24;
        v48 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (v25 == 1)
        {
          v26 = v24[1];
          *v23 = *v24;
          v23[1] = v26;
          v27 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          v13 = (char *)v23 + v27;
          v14 = (char *)v24 + v27;
          *(_QWORD *)v13 = *(_QWORD *)((char *)v24 + v27);
          v13[8] = *((_BYTE *)v24 + v27 + 8);
          v28 = *(_OWORD *)((char *)v24 + v27 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v27 + 16);
          *((_OWORD *)v13 + 2) = v28;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v27 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v27 + 57);
          v13[73] = *((_BYTE *)v24 + v27 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v24 + v27 + 74);
          v13[78] = *((_BYTE *)v24 + v27 + 78);
          v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v29 = v16[9];
          v18 = &v13[v29];
          v19 = &v14[v29];
          v20 = type metadata accessor for FloatingPointRoundingRule();
          v21 = *(_QWORD *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
LABEL_11:
            v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
LABEL_32:
            v61 = v16[10];
            v62 = &v13[v61];
            v63 = &v14[v61];
            *(_QWORD *)v62 = *(_QWORD *)v63;
            v62[8] = v63[8];
            v13[v16[11]] = v14[v16[11]];
            v60 = v16[12];
            goto LABEL_33;
          }
LABEL_31:
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          goto LABEL_32;
        }
        *v23 = *v24;
        v48 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      v49 = *(int *)(v48 + 20);
      v13 = (char *)v23 + v49;
      v14 = (char *)v24 + v49;
      *(_QWORD *)v13 = *(_QWORD *)((char *)v24 + v49);
      v13[8] = *((_BYTE *)v24 + v49 + 8);
      v50 = *(_OWORD *)((char *)v24 + v49 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v24 + v49 + 16);
      *((_OWORD *)v13 + 2) = v50;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v24 + v49 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v24 + v49 + 57);
      v13[73] = *((_BYTE *)v24 + v49 + 73);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v24 + v49 + 74);
      v13[76] = *((_BYTE *)v24 + v49 + 76);
      v13[77] = *((_BYTE *)v24 + v49 + 77);
      v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v51 = v42[9];
      v44 = &v13[v51];
      v45 = &v14[v51];
      v46 = type metadata accessor for FloatingPointRoundingRule();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        goto LABEL_28;
      goto LABEL_29;
    case 14:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      v32 = (_OWORD *)((char *)a1 + v31);
      v33 = (_OWORD *)((char *)a2 + v31);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2)
      {
        *v32 = *v33;
        v52 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v34 == 1)
        {
          v35 = v33[1];
          *v32 = *v33;
          v32[1] = v35;
          v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          v13 = (char *)v32 + v36;
          v14 = (char *)v33 + v36;
          *(_QWORD *)v13 = *(_QWORD *)((char *)v33 + v36);
          v13[8] = *((_BYTE *)v33 + v36 + 8);
          v37 = *(_OWORD *)((char *)v33 + v36 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v36 + 16);
          *((_OWORD *)v13 + 2) = v37;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v36 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v36 + 57);
          v13[73] = *((_BYTE *)v33 + v36 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v33 + v36 + 74);
          v13[78] = *((_BYTE *)v33 + v36 + 78);
          v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v38 = v16[9];
          v18 = &v13[v38];
          v19 = &v14[v38];
          v20 = type metadata accessor for FloatingPointRoundingRule();
          v21 = *(_QWORD *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
            goto LABEL_11;
          goto LABEL_31;
        }
        *v32 = *v33;
        v52 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v52) + 36);
      v13 = (char *)v32 + v53;
      v14 = (char *)v33 + v53;
      *(_QWORD *)v13 = *(_QWORD *)((char *)v33 + v53);
      v13[8] = *((_BYTE *)v33 + v53 + 8);
      v54 = *(_OWORD *)((char *)v33 + v53 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v33 + v53 + 16);
      *((_OWORD *)v13 + 2) = v54;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v33 + v53 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v33 + v53 + 57);
      v13[73] = *((_BYTE *)v33 + v53 + 73);
      v13[76] = *((_BYTE *)v33 + v53 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v33 + v53 + 74);
      v13[77] = *((_BYTE *)v33 + v53 + 77);
      v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v55 = v42[9];
      v44 = &v13[v55];
      v45 = &v14[v55];
      v46 = type metadata accessor for FloatingPointRoundingRule();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
LABEL_28:
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
LABEL_30:
        v57 = v42[10];
        v58 = &v13[v57];
        v59 = &v14[v57];
        *(_QWORD *)v58 = *(_QWORD *)v59;
        v58[8] = v59[8];
        v60 = v42[11];
LABEL_33:
        v13[v60] = v14[v60];
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_29:
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_30;
    case 13:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      v8 = (_OWORD *)((char *)a1 + v7);
      v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *v8 = *v9;
        v39 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }
      else
      {
        if (v10 == 1)
        {
          v11 = v9[1];
          *v8 = *v9;
          v8[1] = v11;
          v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          v13 = (char *)v8 + v12;
          v14 = (char *)v9 + v12;
          *(_QWORD *)v13 = *(_QWORD *)((char *)v9 + v12);
          v13[8] = *((_BYTE *)v9 + v12 + 8);
          v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((_BYTE *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((_BYTE *)v9 + v12 + 78);
          v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v17 = v16[9];
          v18 = &v13[v17];
          v19 = &v14[v17];
          v20 = type metadata accessor for FloatingPointRoundingRule();
          v21 = *(_QWORD *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
            goto LABEL_11;
          goto LABEL_31;
        }
        *v8 = *v9;
        v39 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }
      v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v39) + 36);
      v13 = (char *)v8 + v40;
      v14 = (char *)v9 + v40;
      *(_QWORD *)v13 = *(_QWORD *)((char *)v9 + v40);
      v13[8] = *((_BYTE *)v9 + v40 + 8);
      v41 = *(_OWORD *)((char *)v9 + v40 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v40 + 16);
      *((_OWORD *)v13 + 2) = v41;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v40 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v40 + 57);
      v13[73] = *((_BYTE *)v9 + v40 + 73);
      v13[76] = *((_BYTE *)v9 + v40 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v9 + v40 + 74);
      v13[77] = *((_BYTE *)v9 + v40 + 77);
      v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v43 = v42[9];
      v44 = &v13[v43];
      v45 = &v14[v43];
      v46 = type metadata accessor for FloatingPointRoundingRule();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        goto LABEL_28;
      goto LABEL_29;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_DWORD *assignWithTake for String.LocalizationValue.FormatArgument.CodableStorage(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;

  if (a1 == a2)
    return a1;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 15:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[4] = a2[4];
      v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                   + 48);
      v24 = (_OWORD *)((char *)a1 + v23);
      v25 = (_OWORD *)((char *)a2 + v23);
      type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
      v26 = swift_getEnumCaseMultiPayload();
      if (v26 == 2)
      {
        *v24 = *v25;
        v61 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      }
      else
      {
        if (v26 == 1)
        {
          v27 = v25[1];
          *v24 = *v25;
          v24[1] = v27;
          v28 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
          v29 = (char *)v24 + v28;
          v30 = (char *)v25 + v28;
          *(_QWORD *)v29 = *(_QWORD *)((char *)v25 + v28);
          v29[8] = *((_BYTE *)v25 + v28 + 8);
          v31 = *(_OWORD *)((char *)v25 + v28 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v28 + 16);
          *((_OWORD *)v29 + 2) = v31;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v28 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v28 + 57);
          v29[73] = *((_BYTE *)v25 + v28 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v25 + v28 + 74);
          v29[78] = *((_BYTE *)v25 + v28 + 78);
          v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v33 = v32[9];
          v34 = &v29[v33];
          v35 = &v30[v33];
          v36 = type metadata accessor for FloatingPointRoundingRule();
          v37 = *(_QWORD *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
          {
LABEL_12:
            v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_36:
            v85 = v32[10];
            v86 = &v29[v85];
            v87 = &v30[v85];
            *(_QWORD *)v86 = *(_QWORD *)v87;
            v86[8] = v87[8];
            v29[v32[11]] = v30[v32[11]];
            v78 = v32[12];
            goto LABEL_37;
          }
LABEL_35:
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_36;
        }
        *v24 = *v25;
        v61 = type metadata accessor for NSDecimal.FormatStyle(0);
      }
      v62 = *(int *)(v61 + 20);
      v29 = (char *)v24 + v62;
      v30 = (char *)v25 + v62;
      *(_QWORD *)v29 = *(_QWORD *)((char *)v25 + v62);
      v29[8] = *((_BYTE *)v25 + v62 + 8);
      v63 = *(_OWORD *)((char *)v25 + v62 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v25 + v62 + 16);
      *((_OWORD *)v29 + 2) = v63;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v25 + v62 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v25 + v62 + 57);
      v29[73] = *((_BYTE *)v25 + v62 + 73);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v25 + v62 + 74);
      v29[76] = *((_BYTE *)v25 + v62 + 76);
      v29[77] = *((_BYTE *)v25 + v62 + 77);
      v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v65 = v64[9];
      v66 = &v29[v65];
      v67 = &v30[v65];
      v68 = type metadata accessor for FloatingPointRoundingRule();
      v69 = *(_QWORD *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        goto LABEL_25;
      goto LABEL_30;
    case 14:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                   + 48);
      v40 = (_OWORD *)((char *)a1 + v39);
      v41 = (_OWORD *)((char *)a2 + v39);
      type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
      v42 = swift_getEnumCaseMultiPayload();
      if (v42 == 2)
      {
        *v40 = *v41;
        v71 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      }
      else
      {
        if (v42 == 1)
        {
          v43 = v41[1];
          *v40 = *v41;
          v40[1] = v43;
          v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
                       + 40);
          v29 = (char *)v40 + v44;
          v30 = (char *)v41 + v44;
          *(_QWORD *)v29 = *(_QWORD *)((char *)v41 + v44);
          v29[8] = *((_BYTE *)v41 + v44 + 8);
          v45 = *(_OWORD *)((char *)v41 + v44 + 32);
          *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v44 + 16);
          *((_OWORD *)v29 + 2) = v45;
          *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v44 + 48);
          *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v44 + 57);
          v29[73] = *((_BYTE *)v41 + v44 + 73);
          *(_DWORD *)(v29 + 74) = *(_DWORD *)((char *)v41 + v44 + 74);
          v29[78] = *((_BYTE *)v41 + v44 + 78);
          v32 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v46 = v32[9];
          v34 = &v29[v46];
          v35 = &v30[v46];
          v36 = type metadata accessor for FloatingPointRoundingRule();
          v37 = *(_QWORD *)(v36 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
            goto LABEL_12;
          goto LABEL_35;
        }
        *v40 = *v41;
        v71 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
      }
      v72 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v71) + 36);
      v29 = (char *)v40 + v72;
      v30 = (char *)v41 + v72;
      *(_QWORD *)v29 = *(_QWORD *)((char *)v41 + v72);
      v29[8] = *((_BYTE *)v41 + v72 + 8);
      v73 = *(_OWORD *)((char *)v41 + v72 + 32);
      *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v41 + v72 + 16);
      *((_OWORD *)v29 + 2) = v73;
      *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v41 + v72 + 48);
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v41 + v72 + 57);
      v29[73] = *((_BYTE *)v41 + v72 + 73);
      v29[76] = *((_BYTE *)v41 + v72 + 76);
      *((_WORD *)v29 + 37) = *(_WORD *)((char *)v41 + v72 + 74);
      v29[77] = *((_BYTE *)v41 + v72 + 77);
      v64 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v74 = v64[9];
      v66 = &v29[v74];
      v67 = &v30[v74];
      v68 = type metadata accessor for FloatingPointRoundingRule();
      v69 = *(_QWORD *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
      {
LABEL_25:
        v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
LABEL_31:
        v75 = v64[10];
        v76 = &v29[v75];
        v77 = &v30[v75];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v77[8];
        v78 = v64[11];
LABEL_37:
        v29[v78] = v30[v78];
        swift_storeEnumTagMultiPayload();
LABEL_42:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_30:
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
      goto LABEL_31;
    case 13:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                  + 48);
      v8 = (_OWORD *)((char *)a1 + v7);
      v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
      v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        *v8 = *v9;
        v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent)
                     + 36);
        v48 = (char *)v8 + v47;
        v49 = (char *)v9 + v47;
        *(_QWORD *)v48 = *(_QWORD *)((char *)v9 + v47);
        v48[8] = *((_BYTE *)v9 + v47 + 8);
        v50 = *(_OWORD *)((char *)v9 + v47 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v47 + 16);
        *((_OWORD *)v48 + 2) = v50;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v47 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v47 + 57);
        v48[73] = *((_BYTE *)v9 + v47 + 73);
        v48[76] = *((_BYTE *)v9 + v47 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v47 + 74);
        v48[77] = *((_BYTE *)v9 + v47 + 77);
        v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v52 = v51[9];
        v53 = &v48[v52];
        v54 = &v49[v52];
        v55 = type metadata accessor for FloatingPointRoundingRule();
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
LABEL_21:
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
LABEL_40:
          v88 = v51[10];
          v89 = &v48[v88];
          v90 = &v49[v88];
          *(_QWORD *)v89 = *(_QWORD *)v90;
          v89[8] = v90[8];
          v91 = v51[11];
          v83 = &v48[v91];
          v84 = &v49[v91];
LABEL_41:
          *v83 = *v84;
          swift_storeEnumTagMultiPayload();
          goto LABEL_42;
        }
      }
      else
      {
        if (v10 == 1)
        {
          v11 = v9[1];
          *v8 = *v9;
          v8[1] = v11;
          v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
                       + 40);
          v13 = (char *)v8 + v12;
          v14 = (char *)v9 + v12;
          *(_QWORD *)v13 = *(_QWORD *)((char *)v9 + v12);
          v13[8] = *((_BYTE *)v9 + v12 + 8);
          v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((_BYTE *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((_BYTE *)v9 + v12 + 78);
          v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
          v17 = v16[9];
          v18 = &v13[v17];
          v19 = &v14[v17];
          v20 = type metadata accessor for FloatingPointRoundingRule();
          v21 = *(_QWORD *)(v20 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
            memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
          }
          v79 = v16[10];
          v80 = &v13[v79];
          v81 = &v14[v79];
          *(_QWORD *)v80 = *(_QWORD *)v81;
          v80[8] = v81[8];
          v13[v16[11]] = v14[v16[11]];
          v82 = v16[12];
          v83 = &v13[v82];
          v84 = &v14[v82];
          goto LABEL_41;
        }
        *v8 = *v9;
        v57 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>)
                     + 36);
        v48 = (char *)v8 + v57;
        v49 = (char *)v9 + v57;
        *(_QWORD *)v48 = *(_QWORD *)((char *)v9 + v57);
        v48[8] = *((_BYTE *)v9 + v57 + 8);
        v58 = *(_OWORD *)((char *)v9 + v57 + 32);
        *((_OWORD *)v48 + 1) = *(_OWORD *)((char *)v9 + v57 + 16);
        *((_OWORD *)v48 + 2) = v58;
        *((_OWORD *)v48 + 3) = *(_OWORD *)((char *)v9 + v57 + 48);
        *(_OWORD *)(v48 + 57) = *(_OWORD *)((char *)v9 + v57 + 57);
        v48[73] = *((_BYTE *)v9 + v57 + 73);
        v48[76] = *((_BYTE *)v9 + v57 + 76);
        *((_WORD *)v48 + 37) = *(_WORD *)((char *)v9 + v57 + 74);
        v48[77] = *((_BYTE *)v9 + v57 + 77);
        v51 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v59 = v51[9];
        v53 = &v48[v59];
        v54 = &v49[v59];
        v55 = type metadata accessor for FloatingPointRoundingRule();
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_40;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1)
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a1 + 32;
  v6 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  swift_retain();
  v8(v5, v6, v7);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
  return a1;
}

_QWORD *assignWithCopy for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_0(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_0(a1 + 8, a2 + 8);
  return a1;
}

_OWORD *assignWithTake for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 4));
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper;
}

uint64_t destroy for String.LocalizationValue.FormatArgument.Storage(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 112);
  while (2)
  {
    switch(v2)
    {
      case 0:
        goto LABEL_5;
      case 1:
        return swift_release();
      case 2:
      case 3:
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v1 + 32);
        result = v1 + 64;
LABEL_5:
        result = __swift_destroy_boxed_opaque_existential_1(result);
        break;
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_release();
        swift_release();
        result = swift_bridgeObjectRelease();
        break;
      case 5:
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease();
        break;
      case 6:
        return result;
      default:
        v2 = *(_DWORD *)result + 7;
        continue;
    }
    return result;
  }
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;

  v4 = *(unsigned __int8 *)(a2 + 112);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
        *(_BYTE *)(a1 + 112) = 0;
        return a1;
      case 1:
        v6 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v6;
        *(_BYTE *)(a1 + 112) = 1;
        swift_retain();
        return a1;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = v7;
        v8 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v8;
        v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
        swift_retain();
        swift_retain();
        v9(a1 + 32, a2 + 32, v8);
        v10 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 88) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, a2 + 64);
        v11 = 2;
        goto LABEL_11;
      case 3:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v12 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = v12;
        v13 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v13;
        v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
        swift_retain();
        swift_retain();
        v14(a1 + 32, a2 + 32, v13);
        v15 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 88) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 64, a2 + 64);
        v11 = 3;
        goto LABEL_11;
      case 4:
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v16;
        v17 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v17;
        v18 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = v18;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        v20 = *(void **)(a2 + 72);
        v19 = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 72) = v20;
        *(_QWORD *)(a1 + 80) = v19;
        v21 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 96) = v21;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_BYTE *)(a1 + 112) = 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v22 = v20;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        return a1;
      case 5:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 112) = 5;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return a1;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = 6;
LABEL_11:
        *(_BYTE *)(a1 + 112) = v11;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 7;
        continue;
    }
  }
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  id v19;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        case 1:
          swift_release();
          break;
        case 2:
        case 3:
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          __swift_destroy_boxed_opaque_existential_1(a1 + 64);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          break;
        case 5:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          break;
        case 6:
          break;
        default:
          v4 = *(_DWORD *)a1 + 7;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 112);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v6;
          (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
          *(_BYTE *)(a1 + 112) = 0;
          return a1;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 112) = 1;
          swift_retain();
          return a1;
        case 2:
          v7 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v7;
          v8 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = v8;
          v9 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v9;
          v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
          swift_retain();
          swift_retain();
          v10(a1 + 32, a2 + 32, v9);
          v11 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 88) = v11;
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
          v12 = 2;
          goto LABEL_20;
        case 3:
          v13 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v13;
          v14 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = v14;
          v15 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v15;
          v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
          swift_retain();
          swift_retain();
          v16(a1 + 32, a2 + 32, v15);
          v17 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 88) = v17;
          (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 64, a2 + 64);
          v12 = 3;
          goto LABEL_20;
        case 4:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
          v18 = *(void **)(a2 + 72);
          *(_QWORD *)(a1 + 72) = v18;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          *(_BYTE *)(a1 + 112) = 4;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          v19 = v18;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          return a1;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_BYTE *)(a1 + 112) = 5;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          return a1;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v12 = 6;
LABEL_20:
          *(_BYTE *)(a1 + 112) = v12;
          break;
        default:
          v5 = *(_DWORD *)a2 + 7;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, __int128 *a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 112);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        case 1:
          swift_release();
          break;
        case 2:
        case 3:
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          __swift_destroy_boxed_opaque_existential_1(a1 + 64);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          break;
        case 5:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          break;
        case 6:
          break;
        default:
          v4 = *(_DWORD *)a1 + 7;
          continue;
      }
      break;
    }
    v5 = *((unsigned __int8 *)a2 + 112);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          v7 = *a2;
          v8 = a2[1];
          goto LABEL_17;
        case 1:
          *(_OWORD *)a1 = *a2;
          v6 = 1;
          break;
        case 2:
          v9 = a2[3];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v9;
          v10 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v10;
          v7 = *a2;
          v8 = a2[1];
          v6 = 2;
          goto LABEL_17;
        case 3:
          v11 = a2[3];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v11;
          v12 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v12;
          v7 = *a2;
          v8 = a2[1];
          v6 = 3;
LABEL_17:
          *(_OWORD *)a1 = v7;
          *(_OWORD *)(a1 + 16) = v8;
          break;
        case 4:
          v13 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v13;
          *(_OWORD *)(a1 + 96) = a2[6];
          v14 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v14;
          v15 = a2[3];
          v6 = 4;
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v15;
          break;
        case 5:
          v16 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v16;
          v6 = 5;
          break;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 6;
          break;
        default:
          v5 = *(_DWORD *)a2 + 7;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 112) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 >= 7)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 112) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument.Storage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 112);
  if (result >= 7)
    return (*(_DWORD *)a1 + 7);
  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.Storage(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 6)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    v2 = a2 - 7;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 7;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.Storage()
{
  return &type metadata for String.LocalizationValue.FormatArgument.Storage;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t base witness table accessor for Equatable in String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[2] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  result = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys, &unk_1E0F339D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys, &unk_1E0F339D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys, &unk_1E0F339D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys, &unk_1E0F339D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys, &unk_1E0F33F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys, &unk_1E0F33F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys, &unk_1E0F33F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys, &unk_1E0F33F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder, &type metadata for String.LocalizationValue.Placeholder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder, &type metadata for String.LocalizationValue.Placeholder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder, &type metadata for String.LocalizationValue.Placeholder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder and conformance String.LocalizationValue.Placeholder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys, &unk_1E0F34128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys, &unk_1E0F34128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys, &unk_1E0F34128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys, &unk_1E0F34128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource, &type metadata for LocalizedStringResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource, &type metadata for LocalizedStringResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource, &type metadata for LocalizedStringResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource, &type metadata for LocalizedStringResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource, &type metadata for LocalizedStringResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys, &unk_1E0F342D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys, &unk_1E0F342D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys, &unk_1E0F342D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys, &unk_1E0F342D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys, &unk_1E0F341B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys, &unk_1E0F341B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys, &unk_1E0F341B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys, &unk_1E0F341B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys, &unk_1E0F34008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys, &unk_1E0F34008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys, &unk_1E0F34008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys, &unk_1E0F34008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys, &unk_1E0F34368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys, &unk_1E0F34368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys, &unk_1E0F34368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys, &unk_1E0F34368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle, &type metadata for Date.IntervalFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle, &type metadata for Date.IntervalFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle, &type metadata for Date.IntervalFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle, &type metadata for Date.IntervalFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys, &unk_1E0F34098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys, &unk_1E0F34098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys, &unk_1E0F34098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys, &unk_1E0F34098);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys, &unk_1E0F34248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys, &unk_1E0F34248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys, &unk_1E0F34248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys, &unk_1E0F34248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys, &unk_1E0F33A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys, &unk_1E0F33A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys, &unk_1E0F33A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys, &unk_1E0F33A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys, &unk_1E0F33D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys, &unk_1E0F33D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys, &unk_1E0F33D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys, &unk_1E0F33D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys, &unk_1E0F33EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys, &unk_1E0F33EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys, &unk_1E0F33EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys, &unk_1E0F33EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF098], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF070], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys, &unk_1E0F33CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys, &unk_1E0F33CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys, &unk_1E0F33CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys, &unk_1E0F33CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys, &unk_1E0F33AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys, &unk_1E0F33AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys, &unk_1E0F33AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys, &unk_1E0F33AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys, &unk_1E0F33E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys, &unk_1E0F33E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys, &unk_1E0F33E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys, &unk_1E0F33E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys, &unk_1E0F33DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys, &unk_1E0F33DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys, &unk_1E0F33DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys, &unk_1E0F33DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys, &unk_1E0F33C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys, &unk_1E0F33C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys, &unk_1E0F33C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys, &unk_1E0F33C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys, &unk_1E0F33B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys, &unk_1E0F33B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys, &unk_1E0F33B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys, &unk_1E0F33B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys, &unk_1E0F343F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys, &unk_1E0F343F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys, &unk_1E0F343F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys, &unk_1E0F343F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys and conformance String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_OWORD *)((char *)a2 + 106) = *(__int128 *)((char *)a1 + 106);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_WORD *)(result + 120) & 0x107 | 0xC000;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  *(_QWORD *)(result + 96) = v2;
  *(_QWORD *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_WORD *)(result + 120) & 0x107 | 0x8000;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  *(_QWORD *)(result + 96) = v2;
  *(_QWORD *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_(uint64_t result)
{
  *(_WORD *)(result + 120) &= 0x3FFFu;
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_WORD *)(result + 120) & 0x107;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  *(_QWORD *)(result + 96) = v2;
  *(_QWORD *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int16 v4;

  v4 = *(_WORD *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t outlined retain of Date.FormatStyle(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_SSs5NeverOTg506_sSS10d164E17LocalizationValueV14FormatArgumentV7resolve10attributed4with9includings7CVarArg_p6vararg_AE15_AttributeFixupOSg11attrStrInfotSb_AA6LocaleVxmtAA0M5ScopeRzlFSSAA23efG7VXEfU0_AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char v42[8];
  _QWORD v43[2];
  _QWORD v44[2];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[11];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v52 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v6 = a3;
  result = v52;
  v44[0] = 0;
  v44[1] = 0;
  v45 = 256;
  v46 = 0;
  v47 = 0;
  v8 = (_QWORD *)(a1 + 136);
  v48 = 0;
  v33 = v6;
  do
  {
    v36 = v3;
    v37 = result;
    v38 = *(v8 - 12);
    v10 = *(v8 - 11);
    v9 = (char *)*(v8 - 10);
    v12 = *(v8 - 9);
    v11 = *(v8 - 8);
    v13 = *(v8 - 7);
    v14 = (void *)*(v8 - 4);
    v15 = *(v8 - 3);
    v16 = *v8;
    v49[0] = *(v8 - 13);
    v49[1] = v38;
    v49[2] = v10;
    v49[3] = v9;
    v40 = v12;
    v41 = v10;
    v35 = v9;
    v49[4] = v12;
    v49[5] = v11;
    v49[6] = v13;
    v49[7] = a2;
    v49[8] = v6;
    v49[9] = v14;
    v49[10] = v15;
    v50 = *((_OWORD *)v8 - 1);
    v51 = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v17 = v14;
    swift_unknownObjectRetain();
    v18 = v17;
    swift_bridgeObjectRelease();
    v19 = v18;
    v34 = (char *)specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)v49, (uint64_t)v44, (uint64_t)v49);
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v23 = v34;
      v24 = v36;
    }
    else
    {
      v43[0] = MEMORY[0x1E0DEE9D8];
      v43[1] = 0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v41, v43, a2, v33);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v25 + 16))
      {
        swift_unknownObjectRetain();
        v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v25, a2, v33, v42);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v35 = specialized withVaList<A>(_:_:)(v32, (uint64_t)v35, v40, a2, v33);
        v27 = v26;
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = v27;
        v28 = v19;
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v28 = v19;

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        v22 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v24 = v36;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v23 = v35;
    }
    result = v37;
    v52 = v37;
    v30 = *(_QWORD *)(v37 + 16);
    v29 = *(_QWORD *)(v37 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      result = v52;
    }
    *(_QWORD *)(result + 16) = v30 + 1;
    v31 = result + 16 * v30;
    *(_QWORD *)(v31 + 32) = v23;
    *(_QWORD *)(v31 + 40) = v22;
    v8 += 14;
    v3 = v24 - 1;
    v6 = v33;
  }
  while (v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys, &unk_1E0F33328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys, &unk_1E0F33328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys, &unk_1E0F33328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys, &unk_1E0F33328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys);
  }
  return result;
}

