uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t static AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute.name.getter()
{
  return 0xD000000000000016;
}

uint64_t static AttributeScopes.FoundationAttributes.ImageURLAttribute.name.getter()
{
  return 0x556567616D49534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.ReplacementIndexAttribute.name.getter()
{
  return 0xD000000000000012;
}

unint64_t static AttributeScopes.FoundationAttributes.MeasurementAttribute.name.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.ByteCountAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((v1 - 9) >= 3u)
    Hasher._combine(_:)(2uLL);
  else
    v1 = qword_182169040[(char)(v1 - 9)];
  Hasher._combine(_:)(v1);
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }
  if ((v3 - 9) < 3)
    return 0;
  return v2 == v3;
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E6C0B0 + 4 * byte_182166575[*v0]))(0x65756C6176, 0xE500000000000000);
}

uint64_t sub_181E6C0B0()
{
  return 0x4F64656C6C657073;
}

uint64_t sub_181E6C0D4()
{
  return 1953066613;
}

uint64_t sub_181E6C0E4()
{
  return 0x79426C6175746361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x1E0C80A78](v4);
  v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x1E0C80A78](v6);
  v32 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  v35 = *(_QWORD *)(v15 - 8);
  v36 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v18)
  {
    case 11:
      v41 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      v20 = v29;
      v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    case 10:
      v38 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      v22 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v22);
    case 9:
      v37 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    default:
      v40 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
      v23 = v32;
      v24 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v39 = v18;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
      v25 = v34;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v24);
  }
}

Swift::Int AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u)
    Hasher._combine(_:)(2uLL);
  else
    v1 = qword_182169040[(char)(v1 - 9)];
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;

  v26 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  v24 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v29 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  v28 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v27 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  v13 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v19[0] = v7;
    v19[1] = v6;
    v31 = v9;
    v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v14 + 16) == 1)
      __asm { BR              X10 }
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v17 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC450], v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v8);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(_QWORD *a1)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u)
    Hasher._combine(_:)(2uLL);
  else
    v1 = qword_182169040[(char)(v1 - 9)];
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((v1 - 9) >= 3u)
    Hasher._combine(_:)(2uLL);
  else
    v1 = qword_182169040[(char)(v1 - 9)];
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u)
    Hasher._combine(_:)(2uLL);
  else
    v1 = qword_182169040[(char)(v1 - 9)];
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }
  if ((v3 - 9) < 3)
    return 0;
  return v2 == v3;
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E6CD90 + 4 * byte_18216657D[a1]))(1702132066, 0xE400000000000000);
}

uint64_t sub_181E6CD90()
{
  return 25195;
}

uint64_t sub_181E6CD9C()
{
  return 25197;
}

uint64_t sub_181E6CDA8()
{
  return 25191;
}

uint64_t sub_181E6CDB4()
{
  return 25204;
}

uint64_t sub_181E6CDC0()
{
  return 25200;
}

uint64_t sub_181E6CDCC()
{
  return 25189;
}

uint64_t sub_181E6CDD8()
{
  return 25210;
}

uint64_t sub_181E6CDE4()
{
  return 25209;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  unsigned __int8 *v0;

  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();
  return CodingKey.debugDescription.getter();
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v39 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x1E0C80A78](v5);
  v36 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7);
  v33 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x1E0C80A78](v9);
  v30 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x1E0C80A78](v11);
  v27 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v24 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v21 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  v19[1] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  MEMORY[0x1E0C80A78](v15);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  v43 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_181E6D45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 89) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
  v5 = *(_QWORD *)(v3 - 112);
  v4 = *(_QWORD *)(v3 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v5, v4);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  v58 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  MEMORY[0x1E0C80A78](v3);
  v54 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5);
  v57 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  MEMORY[0x1E0C80A78](v7);
  v56 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  v40 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v53 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v52 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v51 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v50 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  v24 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    v32[3] = v18;
    v32[1] = v16;
    v32[2] = v15;
    v60 = v20;
    v33 = v19;
    v25 = v22;
    v26 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v26 + 16) == 1)
      __asm { BR              X9 }
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v29 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
    v30 = v33;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC450], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v25, v30);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit(_QWORD *a1)
{
  AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.encode(to:)(a1);
}

unint64_t static AttributeScopes.FoundationAttributes.DurationFieldAttribute.name.getter()
{
  return 0xD000000000000021;
}

unint64_t AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 8;
  if (result < 8)
    v2 = result;
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.name.getter()
{
  return 0xD00000000000002CLL;
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hash(into:)()
{
  __asm { BR              X11 }
}

void sub_181E6E0F4()
{
  Swift::UInt64 v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E6E18C + 4 * byte_1821665A6[*v0]))(1953393013, 0xE400000000000000);
}

uint64_t sub_181E6E18C()
{
  return 7630441;
}

uint64_t sub_181E6E19C()
{
  return 0x656C62756F64;
}

uint64_t sub_181E6E1B0()
{
  return 0x6C616D69636564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  return CodingKey.debugDescription.getter();
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[14];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v12[9] = *(_QWORD *)(v3 - 8);
  v12[10] = v3;
  MEMORY[0x1E0C80A78](v3);
  v12[8] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  v12[6] = *(_QWORD *)(v5 - 8);
  v12[7] = v5;
  MEMORY[0x1E0C80A78](v5);
  v12[5] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v12[3] = *(_QWORD *)(v7 - 8);
  v12[4] = v7;
  MEMORY[0x1E0C80A78](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  v12[1] = v8;
  v12[2] = v9;
  MEMORY[0x1E0C80A78](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v12[12] = *(_QWORD *)(v10 - 8);
  v12[13] = v10;
  MEMORY[0x1E0C80A78](v10);
  v12[11] = *(_QWORD *)v1;
  v11 = *(unsigned __int8 *)(v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_181E6E540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 100) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  v3 = *(_QWORD *)(v2 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v4 = *(_QWORD *)(v2 - 216);
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v0, v3);
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E6E804()
{
  Swift::UInt64 v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v36 = v4;
  MEMORY[0x1E0C80A78](v3);
  v39 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v34 = v7;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v32 = v10;
  MEMORY[0x1E0C80A78](v9);
  v37 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  v21 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    v29[2] = v12;
    v29[3] = v15;
    v29[1] = v13;
    v42 = v17;
    v30 = v16;
    v22 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v22 + 16) == 1)
    {
      v23 = (char *)&loc_181E6EA90 + 4 * byte_1821665B2[*(unsigned __int8 *)(v22 + 32)];
      v29[0] = *(unsigned __int8 *)(v22 + 32);
      __asm { BR              X9 }
    }
    v24 = type metadata accessor for DecodingError();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v26 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v27 = v30;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC450], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
}

void sub_181E6EC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 100) = 1;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  v3 = v0;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181E6EBD8);
  }
  v4 = *(_QWORD *)(v2 - 200);
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  JUMPOUT(0x181E6EDCCLL);
}

void sub_181E6EC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 100) = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  v4 = *(_QWORD *)(v3 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v0)
    JUMPOUT(0x181E6EC9CLL);
  v5 = *(_QWORD *)(v3 - 184);
  KeyedDecodingContainer.decode(_:forKey:)();
  v6 = *(_QWORD *)(v3 - 112);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 176) + 8))(v2, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  JUMPOUT(0x181E6EEA8);
}

void sub_181E6ECB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 144) = v0;
  *(_BYTE *)(v4 - 100) = 3;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  v5 = *(_QWORD *)(v4 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    type metadata accessor for NSDecimal(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
    v6 = *(_QWORD *)(v4 - 168);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v1, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v3, v5);
    JUMPOUT(0x181E6EEA4);
  }
  JUMPOUT(0x181E6ED6CLL);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E6EF04()
{
  Swift::UInt64 v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(_QWORD *a1)
{
  AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.encode(to:)(a1);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return 0xD00000000000002CLL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute.name.getter()
{
  return 0xD000000000000029;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return 0xD000000000000029;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute.name.getter()
{
  return 0xD000000000000031;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return 0xD000000000000031;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute.name.getter()
{
  return 0xD000000000000028;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return 0xD000000000000028;
}

id static AttributeScopes.FoundationAttributes.LinkAttribute.objectiveCValue(for:)(id *a1)
{
  return *a1;
}

void static AttributeScopes.FoundationAttributes.LinkAttribute.value(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  __int128 v23;

  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
  {
    URL.init(reference:)(v4, &v22);
    v5 = v22;
LABEL_3:
    v6 = v23;
    *(_QWORD *)a2 = v5;
    *(_OWORD *)(a2 + 8) = v6;
    return;
  }
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;
    v11 = a1;
    URL.init(string:)((uint64_t)v8, v10, &v22);
    swift_bridgeObjectRelease();

    v5 = v22;
    if (v22)
      goto LABEL_3;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
    goto LABEL_12;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(id *a1)
{
  return *a1;
}

void protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(void *a1@<X0>, uint64_t a2@<X8>)
{
  static AttributeScopes.FoundationAttributes.LinkAttribute.value(for:)(a1, a2);
}

unint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.markdownName.getter()
{
  return 0xD000000000000012;
}

NSLocalizedNumberFormatRule __swiftcall AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._bridgeToObjectiveC()()
{
  return (NSLocalizedNumberFormatRule)objc_msgSend((id)objc_opt_self(), sel_automatic);
}

void static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return objc_msgSend((id)objc_opt_self(), sel_automatic);
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 1;
}

uint64_t specialized NSAttributedString.init<A>(_:including:)(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  char v35;
  unint64_t v36;
  int v37;
  char v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  _QWORD *v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t AssociatedTypeWitness;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t isClassOrObjCExistentialType;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  id v104;
  _QWORD v105[2];
  uint64_t v106;
  void **v107;
  id v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  _QWORD v135[4];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _OWORD v147[12];
  _OWORD v148[2];
  __int128 v149;
  __int128 v150[3];
  _BYTE v151[56];
  uint64_t v152;

  specialized static AttributeScope.scopeDescription.getter();
  v119 = v2;
  swift_bridgeObjectRelease();
  v3 = *(_OWORD *)(a1 + 32);
  v148[0] = *(_OWORD *)(a1 + 16);
  v148[1] = v3;
  v149 = *(_OWORD *)(a1 + 48);
  v150[0] = v148[0];
  v150[1] = v3;
  v150[2] = v149;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v151);
  outlined retain of Locale((uint64_t)v151);
  MEMORY[0x186DA46F4](v148);
  v4 = objc_allocWithZone((Class)NSMutableAttributedString);
  v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v108 = objc_msgSend(v4, sel_initWithString_, v5);
  swift_unknownObjectRelease();
  v6 = *(_OWORD *)(a1 + 32);
  v147[9] = *(_OWORD *)(a1 + 16);
  v147[10] = v6;
  v147[11] = *(_OWORD *)(a1 + 48);
  v7 = BigString.startIndex.getter();
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v106 = a1;
  v15 = *(_QWORD *)(a1 + 80);
  v14 = *(void **)(a1 + 88);
  v128 = v16;
  if (v12)
  {
    v17 = *(unsigned __int8 *)(v12 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    v17 = 0;
  }
  v18 = 0;
  v19 = 0;
  v109 = (_OWORD *)(v106 + 16);
  v137 = v12;
  v138 = v13;
  v139 = v15;
  v140 = v14;
  v107 = &v141;
  v141 = v14;
  v142 = v17;
  v144 = 0;
  v145 = 0;
  v143 = 0;
  v105[1] = MEMORY[0x1E0DEE9B8] + 8;
  if (v12)
    goto LABEL_5;
LABEL_7:
  if (!v18)
  {
LABEL_87:
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    v103 = objc_allocWithZone((Class)NSAttributedString);
    v104 = v108;
    v102 = objc_msgSend(v103, sel_initWithAttributedString_, v108);

    return (uint64_t)v102;
  }
LABEL_8:
  if (v141 == v14)
  {
    v125 = v18;
    v126 = v11;
    v123 = v14;
    v124 = (_QWORD *)v7;
    v127 = v9;
    v115 = v19;
    v20 = v142;
    v21 = v143;
    if (v143)
    {
      v22 = (_QWORD *)(v143 + 24 * ((v142 >> ((4 * *(_BYTE *)(v143 + 18) + 8) & 0x3C)) & 0xF));
      v24 = v22[3];
      v23 = v22[4];
      v25 = v22[5];
      v26 = v144 + 1;
      v27 = __OFADD__(v144, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27)
        goto LABEL_91;
      v144 = v26;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = v24;
      v152 = v23;
      v116 = v25;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v20, v12);
      v30 = v29;
      v32 = v31;
      swift_unknownObjectRelease();
      if (__OFADD__(v144, 1))
        goto LABEL_91;
      v116 = v32;
      v152 = v30;
      ++v144;
      swift_unknownObjectRetain();
      v28 = specialized Rope._Node.subscript.getter(v20, v12);
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (__OFADD__(v125, v28))
      goto LABEL_92;
    v145 = v125 + v28;
    if (!v12)
      goto LABEL_96;
    v34 = ((-15 << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v12 + 18) | ((unint64_t)*(unsigned __int16 *)(v12 + 16) << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
    if (v20 >= v34)
      goto LABEL_96;
    if (v21)
    {
      v35 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      v36 = ((v20 >> v35) & 0xF) + 1;
      if (v36 < *(unsigned __int16 *)(v21 + 16))
      {
        v142 = (v36 << v35) | ((-15 << v35) - 1) & v20;
LABEL_25:
        swift_unknownObjectRelease_n();
LABEL_31:
        v44 = v109;
        v45 = v109[1];
        v147[6] = *v109;
        v147[7] = v45;
        v147[8] = v109[2];
        BigString.utf8.getter();
        v46 = BigString.UTF8View.index(_:offsetBy:)();
        v48 = v47;
        v50 = v49;
        v52 = v51;
        outlined release of Locale((uint64_t)&v146);
        v53 = v44[1];
        v147[3] = *v44;
        v147[4] = v53;
        v147[5] = v44[2];
        BigString.utf16.getter();
        v110 = v46;
        v111 = v48;
        v112 = v52;
        v113 = v50;
        v114 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v147);
        if (!*(_QWORD *)(v152 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v99 = v115;
          goto LABEL_81;
        }
        v136 = MEMORY[0x1E0DEE9E0];
        v54 = v152 + 64;
        v55 = 1 << *(_BYTE *)(v152 + 32);
        if (v55 < 64)
          v56 = ~(-1 << v55);
        else
          v56 = -1;
        v57 = v56 & *(_QWORD *)(v152 + 64);
        v58 = (unint64_t)(v55 + 63) >> 6;
        v59 = v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60 = 0;
        v117 = v54;
        v118 = v58;
        while (1)
        {
          while (v57)
          {
            v61 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            v62 = v61 | (v60 << 6);
            if (v59[2])
              goto LABEL_53;
          }
          v63 = __OFADD__(v60++, 1);
          if (v63)
          {
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          if (v60 >= v58)
            goto LABEL_77;
          v64 = *(_QWORD *)(v54 + 8 * v60);
          if (!v64)
          {
            v65 = v60 + 1;
            if (v60 + 1 >= v58)
              goto LABEL_77;
            v64 = *(_QWORD *)(v54 + 8 * v65);
            if (!v64)
            {
              v65 = v60 + 2;
              if (v60 + 2 >= v58)
                goto LABEL_77;
              v64 = *(_QWORD *)(v54 + 8 * v65);
              if (!v64)
              {
                v65 = v60 + 3;
                if (v60 + 3 >= v58)
                  goto LABEL_77;
                v64 = *(_QWORD *)(v54 + 8 * v65);
                if (!v64)
                {
                  v65 = v60 + 4;
                  if (v60 + 4 >= v58)
                  {
LABEL_77:
                    v99 = v115;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (*(_QWORD *)(v136 + 16))
                    {
                      type metadata accessor for NSAttributedStringKey(0);
                      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
                      v100 = _NativeDictionary.bridged()();
                      v101 = v114;
                      objc_msgSend(v108, sel_setAttributes_range_, v100, v99, v114);
                      swift_unknownObjectRelease();
                      goto LABEL_82;
                    }
                    swift_bridgeObjectRelease();
LABEL_81:
                    v101 = v114;
LABEL_82:
                    v63 = __OFADD__(v99, v101);
                    v19 = v99 + v101;
                    if (v63)
                      goto LABEL_94;
                    v18 = v145;
                    v12 = v137;
                    v7 = v110;
                    v9 = v111;
                    v11 = v113;
                    v128 = v112;
                    v15 = v139;
                    v14 = v140;
                    if (!v137)
                      goto LABEL_7;
LABEL_5:
                    if (v18 == v15)
                      goto LABEL_87;
                    goto LABEL_8;
                  }
                  v64 = *(_QWORD *)(v54 + 8 * v65);
                  if (!v64)
                  {
                    while (1)
                    {
                      v60 = v65 + 1;
                      if (__OFADD__(v65, 1))
                        goto LABEL_93;
                      if (v60 >= v58)
                        goto LABEL_77;
                      v64 = *(_QWORD *)(v54 + 8 * v60);
                      ++v65;
                      if (v64)
                        goto LABEL_52;
                    }
                  }
                }
              }
            }
            v60 = v65;
          }
LABEL_52:
          v57 = (v64 - 1) & v64;
          v62 = __clz(__rbit64(v64)) + (v60 << 6);
          if (v59[2])
          {
LABEL_53:
            v66 = v152;
            v67 = (uint64_t *)(*(_QWORD *)(v152 + 48) + 16 * v62);
            v68 = *v67;
            v69 = v67[1];
            swift_bridgeObjectRetain();
            v70 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            if ((v71 & 1) != 0)
            {
              v72 = (uint64_t *)(v59[7] + 16 * v70);
              v73 = *v72;
              v74 = v72[1];
              v125 = v69;
              v123 = (void *)String._bridgeToObjectiveCImpl()();
              AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              v124 = v105;
              v126 = *(_QWORD *)(AssociatedTypeWitness - 8);
              v127 = AssociatedTypeWitness;
              v76 = *(_QWORD *)(v126 + 64);
              v77 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
              v128 = (_QWORD *)((char *)v105 - v78);
              v79 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v74 + 24))(v73, v74, v77);
              if (*(_QWORD *)(v66 + 16)
                && (v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80), (v82 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v152 + 56) + 72 * v81, (uint64_t)&v130);
              }
              else
              {
                v134 = 0;
                v132 = 0u;
                v133 = 0u;
                v130 = 0u;
                v131 = 0u;
              }
              v83 = v127;
              swift_bridgeObjectRelease();
              if (!*((_QWORD *)&v131 + 1))
                goto LABEL_95;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v130, (uint64_t)&v129);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v84 = v128;
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v130);
              v85 = swift_conformsToProtocol2();
              if (v85)
                v86 = v85;
              else
                v86 = 0;
              if (v85)
                v87 = v73;
              else
                v87 = 0;
              if (v87)
              {
                v121 = v105;
                v88 = MEMORY[0x1E0C80A78](v85);
                (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v126 + 16))((char *)v105 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0), v84, v83, v88);
                v89 = swift_getAssociatedTypeWitness();
                v120 = v105;
                v90 = *(_QWORD *)(v89 - 8);
                MEMORY[0x1E0C80A78](v89);
                v92 = (char *)v105 - v91;
                swift_dynamicCast();
                v93 = v122;
                v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 24))(v92, v87, v86);
                v122 = v93;
                if (v93)
                {
                  (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
                  swift_unknownObjectRelease();
                  (*(void (**)(uint64_t *, uint64_t))(v126 + 8))(v128, v127);
                  v102 = v119;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_willThrow();

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_unknownObjectRelease();
                  return (uint64_t)v102;
                }
                v95 = v94;
                (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
                v58 = v118;
                v83 = v127;
                v96 = v128;
              }
              else
              {
                isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
                v58 = v118;
                if ((isClassOrObjCExistentialType & 1) != 0)
                {
                  if (v76 != 8)
                    goto LABEL_89;
                  v96 = v128;
                  v95 = *v128;
                  swift_unknownObjectRetain();
                }
                else
                {
                  v98 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
                  v96 = v128;
                  (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v126 + 16))((char *)v105 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0), v128, v83, v98);
                  v95 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
                }
              }
              (*(void (**)(uint64_t *, uint64_t))(v126 + 8))(v96, v83);
              v135[3] = swift_getObjectType();
              v135[0] = v95;
              specialized Dictionary.subscript.setter((uint64_t)v135, v123);
              swift_bridgeObjectRelease();
              v54 = v117;
              v59 = v119;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
    v37 = *(unsigned __int8 *)(v12 + 18);
    v38 = (4 * v37 + 8) & 0x3C;
    *(_QWORD *)&v130 = (v20 >> v38) & 0xF;
    if (v37)
    {
      swift_unknownObjectRetain();
      v39 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v12 + 24, (uint64_t *)&v130, (uint64_t)v107, v12, v37);
      swift_unknownObjectRelease();
      if ((v39 & 1) != 0)
        goto LABEL_25;
      v41 = *(unsigned __int8 *)(v12 + 18);
    }
    else
    {
      v40 = ((v20 >> v38) & 0xF) + 1;
      if (v40 < *(unsigned __int16 *)(v12 + 16))
      {
        v142 = (v40 << v38) | ((-15 << v38) - 1) & v20;
        swift_unknownObjectRelease_n();
        v143 = v12;
        goto LABEL_31;
      }
      v41 = 0;
    }
    v42 = *(unsigned __int16 *)(v12 + 16);
    v43 = *(_BYTE *)(v12 + 18);
    swift_unknownObjectRelease_n();
    v141 = v123;
    v142 = ((-15 << ((4 * v43 + 8) & 0x3C)) - 1) & v41 | (unint64_t)(v42 << ((4 * v43 + 8) & 0x3C));
    v143 = 0;
    goto LABEL_31;
  }
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v130);
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys, &unk_1E0F1B470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys, &unk_1E0F1B470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys, &unk_1E0F1B470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys, &unk_1E0F1B470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys, &unk_1E0F1B5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys, &unk_1E0F1B5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys, &unk_1E0F1B5C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys, &unk_1E0F1B5E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys, &unk_1E0F1B5E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys, &unk_1E0F1B5E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys, &unk_1E0F1B500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys, &unk_1E0F1B500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys, &unk_1E0F1B500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys, &unk_1E0F1B580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys, &unk_1E0F1B580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys, &unk_1E0F1B580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys, &unk_1E0F1B5A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys, &unk_1E0F1B5A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys, &unk_1E0F1B5A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys, &unk_1E0F1B520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys, &unk_1E0F1B520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys, &unk_1E0F1B520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys, &unk_1E0F1B560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys, &unk_1E0F1B560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys, &unk_1E0F1B560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys, &unk_1E0F1B540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys, &unk_1E0F1B540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys, &unk_1E0F1B540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys, &unk_1E0F1B450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys, &unk_1E0F1B450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys, &unk_1E0F1B450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.== infix(_:_:)(uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_181E703B0 + 4 * byte_1821665BA[*(unsigned __int8 *)(a1 + 20)]))(*(_QWORD *)a1);
}

BOOL sub_181E703B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  return !v4 && a1 == a4;
}

uint64_t sub_181E703E8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t a3@<X4>, unsigned int a4@<W5>, uint64_t a5@<X8>)
{
  int v5;

  if (v5 == 3)
    return specialized static NSDecimal.== infix(_:_:)(a1, *(_QWORD *)(a5 + 8), *(_DWORD *)(a5 + 16), a2, a3, a4);
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LinkAttribute, &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LinkAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return MEMORY[0x1E0DEB428];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value, &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value, &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute, &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return MEMORY[0x1E0DEA978];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute, &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute, &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DateFieldAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.PresentationIntentAttribute, &type metadata for AttributeScopes.FoundationAttributes.PresentationIntentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute, &type metadata for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ImageURLAttribute, &type metadata for AttributeScopes.FoundationAttributes.ImageURLAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ImageURLAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ByteCountAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Date> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Date>);
    v2 = lazy protocol witness table accessor for type Date and conformance Date();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB888], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181E71124 + 4 * byte_1821665C3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181E71158 + 4 * byte_1821665BE[v4]))();
}

uint64_t sub_181E71158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E71168);
  return result;
}

uint64_t sub_181E71174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E7117CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181E71180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181E71204 + 4 * byte_1821665CD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181E71238 + 4 * byte_1821665C8[v4]))();
}

uint64_t sub_181E71238(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E71248);
  return result;
}

uint64_t sub_181E71254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E7125CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181E71260(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71268(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_181E71360 + 4 * byte_1821665D7[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_181E71394 + 4 * byte_1821665D2[v4]))();
}

uint64_t sub_181E71394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E7139C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E713A4);
  return result;
}

uint64_t sub_181E713B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E713B8);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_181E713BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E713C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E7142C + 4 * byte_1821665E1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E71460 + 4 * byte_1821665DC[v4]))();
}

uint64_t sub_181E71460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E71470);
  return result;
}

uint64_t sub_181E7147C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E71484);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E71488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
  {
    v6 = *a1;
    if (v6 >= 9)
      v7 = v6 - 8;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_181E714FC + 4 * byte_1821665E6[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF5)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_181E715A8 + 4 * byte_1821665F0[v5]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_181E715DC + 4 * byte_1821665EB[v5]))();
}

uint64_t sub_181E715DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E715E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E715ECLL);
  return result;
}

uint64_t sub_181E715F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E71600);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_181E71604(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E7160C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 9)
    return v1 - 8;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 8;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181E716B0 + 4 * byte_1821665FA[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181E716E4 + 4 * byte_1821665F5[v4]))();
}

uint64_t sub_181E716E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E716EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E716F4);
  return result;
}

uint64_t sub_181E71700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E71708);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181E7170C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t result, char a2)
{
  *(_BYTE *)(result + 20) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_181E718D4 + 4 * byte_182166604[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_181E71908 + 4 * byte_1821665FF[v4]))();
}

uint64_t sub_181E71908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E71918);
  return result;
}

uint64_t sub_181E71924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E7192CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_181E71930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return &unk_1E0F1B470;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  return &unk_1E0F1B450;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  return &unk_1E0F1B540;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  return &unk_1E0F1B560;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  return &unk_1E0F1B520;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  return &unk_1E0F1B5A0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  return &unk_1E0F1B580;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  return &unk_1E0F1B500;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  return &unk_1E0F1B5E0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  return &unk_1E0F1B5C0;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181E71A30 + 4 * byte_18216660E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181E71A64 + 4 * byte_182166609[v4]))();
}

uint64_t sub_181E71A64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E71A74);
  return result;
}

uint64_t sub_181E71A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E71A88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181E71A8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E71A94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181E71B10 + 4 * byte_182166613[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181E71B30 + 4 * byte_182166618[v4]))();
}

_BYTE *sub_181E71B10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181E71B30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E71B38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E71B40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E71B48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E71B50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format, &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format);
  }
  return result;
}

uint64_t specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1953393013 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616D69636564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702132066 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25195 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 25197 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 25191 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25204 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 25200 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 25189 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 25210 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 25209 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4F64656C6C657073 && a2 == 0xEF65756C61567475
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79426C6175746361 && a2 == 0xEF746E756F436574)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t outlined destroy of AttributedString._AttributeValue?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PredicateExpressions.SequenceMaximum.elements.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.SequenceMaximum.init(elements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x1E0DEAB78], a3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return 0x73746E656D656C65;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMaximum<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_max<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x800000018230EE80);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys);
}

void type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys, (uint64_t (*)(_QWORD, uint64_t *, __n128))type metadata accessor for PredicateExpressions.SequenceMaximum);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.SequenceMaximum<>.init(from:), a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMaximum<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, *(_QWORD *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceMinimum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x1E0DEAB80], a3);
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void (*a3)(uint64_t, _QWORD, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t v17;

  v15 = a4;
  v16 = a3;
  v7 = a2[2];
  v8 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  v17 = *a1;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v17, v7, v8, v11);
  if (!v4)
  {
    v16(AssociatedTypeWitness, a2[4], a2[5]);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMinimum<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMinimum.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.SequenceMinimum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x800000018230EEA0);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1, void *a2)
{
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(29);
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = a2;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t PredicateExpressions.SequenceMinimum<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _OWORD *), uint64_t a6)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];

  v16 = a4;
  v8 = *(_OWORD *)(a2 + 32);
  v15 = *(_OWORD *)(a2 + 16);
  v17[0] = v15;
  v17[1] = v8;
  v9 = a5(255, v17);
  MEMORY[0x186DA9D64](a6, v9);
  v10 = type metadata accessor for KeyedEncodingContainer();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v15 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t PredicateExpressions.SequenceMinimum<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys, (uint64_t (*)(_QWORD, uint64_t *, __n128))type metadata accessor for PredicateExpressions.SequenceMinimum);
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t (*a9)(_QWORD, uint64_t *, __n128))
{
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t *, __n128);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a7;
  v42 = *(_QWORD *)(a2 - 8);
  v43 = a4;
  v14 = MEMORY[0x1E0C80A78](a1);
  v44 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v16;
  v48 = v17;
  v49 = v18;
  v50 = v19;
  v21 = v20(255, &v47, v14);
  v46 = MEMORY[0x186DA9D64](a8, v21);
  v45 = type metadata accessor for KeyedDecodingContainer();
  v39 = *(_QWORD *)(v45 - 8);
  v22 = MEMORY[0x1E0C80A78](v45);
  v24 = (char *)&v37 - v23;
  v41 = a2;
  v47 = a2;
  v48 = a3;
  v49 = a5;
  v50 = a6;
  v25 = a9(0, &v47, v22);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v37 - v27;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v40 = v24;
  v29 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v29)
  {
    v37 = v28;
    v46 = v26;
    v51 = v25;
    v31 = v39;
    v30 = v40;
    v32 = v41;
    v33 = v42;
    v34 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v45);
    v35 = v37;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v34, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v38, v35, v51);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.SequenceMinimum<>.init(from:), a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t a5)
{
  return a4(a1, a2[2], a2[3], *(_QWORD *)(a3 - 8), a5, a2[4], a2[5]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMinimum<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.encode(to:)(a1, a2, a3, *(_QWORD *)(a3 - 16));
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceMaximum(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181E73B2C + 4 * byte_182169058[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceMaximum(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.SequenceMinimum.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181E73D70 + 4 * byte_182169066[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181E73D90 + 4 * byte_18216906B[v4]))();
}

_BYTE *sub_181E73D70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181E73D90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E73D98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E73DA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E73DA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E73DB0(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t AnySortComparator.order.getter()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t v2;
  _QWORD *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v7[4];

  v1 = (uint64_t (*)(uint64_t *))v0[9];
  v2 = v0[3];
  v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t AnySortComparator.order.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];

  v2 = v1;
  v3 = a1 & 1;
  v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t AnySortComparator.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = *(_QWORD *)(a3 + 8);
  a4[3] = a2;
  a4[4] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  a4[5] = (uint64_t)partial apply for closure #1 in AnySortComparator.init<A>(_:);
  a4[6] = v10;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(_QWORD *)(v12 + 24) = v11;
  a4[7] = (uint64_t)_sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  a4[8] = v12;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  a4[9] = (uint64_t)partial apply for closure #3 in AnySortComparator.init<A>(_:);
  a4[10] = result;
  return result;
}

uint64_t ComparableComparator.init(order:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

uint64_t OptionalComparator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t AnySortComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v11[4];

  v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  v6 = v2[3];
  v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

BOOL static SortOrder.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

NSComparisonResult __swiftcall NSComparisonResult.withOrder(_:)(Foundation::SortOrder a1)
{
  NSComparisonResult v1;
  NSComparisonResult v2;
  uint64_t v3;

  v2 = NSOrderedDescending;
  if (v1 == NSOrderedDescending)
    v3 = -1;
  else
    v3 = v1;
  if (v1 != NSOrderedAscending)
    v2 = v3;
  if ((a1 & 1) != 0)
    return v2;
  else
    return v1;
}

uint64_t SortOrder.init(from:)(_QWORD *a1)
{
  return specialized SortOrder.init(from:)(a1) & 1;
}

uint64_t SortOrder.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void SortOrder.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int SortOrder.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortOrder@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized SortOrder.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortOrder(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[32];

  v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v27);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v26);
  swift_dynamicCast();
  outlined init with copy of Any(v24, (uint64_t)v25);
  swift_dynamicCast();
  v20 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a5 + 24))(v15, v12, a4, a5);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v12, AssociatedTypeWitness);
  v21(v15, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  return v20;
}

uint64_t sub_181E74474()
{
  return swift_deallocObject();
}

uint64_t closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  uint64_t *boxed_opaque_existential_1;
  void (*v16)(uint64_t *, char *, uint64_t);
  _BYTE v19[40];

  v7 = a2 & 1;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v19[-v12 - 8];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v14, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v7, a3, a4);
  a1[3] = a3;
  a1[4] = *(_QWORD *)(a4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  v16 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 16);
  v16(boxed_opaque_existential_1, v13, a3);
  v16((uint64_t *)v10, v13, a3);
  AnyHashable.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a3);
}

uint64_t sub_181E745B0()
{
  return swift_deallocObject();
}

uint64_t sub_181E745C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16), a3);
}

uint64_t closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v8, (uint64_t)v11);
  swift_dynamicCast();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) & 1;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a2);
  return v9;
}

uint64_t sub_181E7469C()
{
  return swift_deallocObject();
}

uint64_t key path getter for AnySortComparator.order : AnySortComparator@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_1;
  char v7;
  uint64_t result;
  uint64_t v9[4];

  v3 = (uint64_t (*)(uint64_t *))a1[9];
  v4 = a1[3];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v9[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  v7 = v3(v9) & 1;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  *a2 = v7;
  return result;
}

uint64_t key path setter for AnySortComparator.order : AnySortComparator(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];

  v3 = *a1;
  v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  swift_retain();
  v4(v6, a2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, a2);
}

void (*AnySortComparator.order.modify(uint64_t **a1))(__int128 **a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t (*v4)(uint64_t *);
  uint64_t v5;
  _QWORD *v6;
  uint64_t *boxed_opaque_existential_1;

  v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  v4 = (uint64_t (*)(uint64_t *))v1[9];
  v5 = v1[3];
  v6 = __swift_project_boxed_opaque_existential_1(v1, v5);
  v3[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v6, v5);
  LOBYTE(v5) = v4(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((_BYTE *)v3 + 48) = v5;
  return AnySortComparator.order.modify;
}

void AnySortComparator.order.modify(__int128 **a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = *((_QWORD *)*a1 + 5);
  v3 = *((unsigned __int8 *)*a1 + 48);
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v2);
  free(v1);
}

uint64_t AnySortComparator.hash(into:)()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char v23;
  _QWORD v25[2];

  v25[1] = a5;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v14, a2, a4, v17);
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v11, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v11, a3);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
  else
  {
    v22(v11, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v23 = 0;
  }
  return v23 & 1;
}

Swift::Int AnySortComparator.hashValue.getter()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.compare(_:_:) in conformance AnySortComparator(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v11[4];

  v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  v6 = v2[3];
  v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t protocol witness for SortComparator.order.getter in conformance AnySortComparator()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t *);
  uint64_t v2;
  _QWORD *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v7[4];

  v1 = (uint64_t (*)(uint64_t *))v0[9];
  v2 = v0[3];
  v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for SortComparator.order.setter in conformance AnySortComparator(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];

  v2 = v1;
  v3 = a1 & 1;
  v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance AnySortComparator(uint64_t ***a1))()
{
  uint64_t **v2;

  v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)AnySortComparator.order.modify(v2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnySortComparator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  v6 = a2[3];
  v7 = __swift_project_boxed_opaque_existential_1(a2, v6);
  return compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)((uint64_t)v5, (uint64_t)v7, v3, v6, *(_QWORD *)(v4 + 8));
}

uint64_t ComparableComparator.order.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ComparableComparator.order.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t (*ComparableComparator.order.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ComparableComparator.compare(_:_:)()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v3;

  v1 = *v0;
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    if (v1)
      return 1;
    else
      return -1;
  }
  else
  {
    v3 = dispatch thunk of static Comparable.> infix(_:_:)();
    if (v1)
      return v3 << 63 >> 63;
    else
      return v3 & 1;
  }
}

void ComparableComparator.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ComparableComparator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int ComparableComparator.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance ComparableComparator<A>(char a1)
{
  return ComparableComparator.order.setter(a1 & 1);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance ComparableComparator<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ComparableComparator.order.modify();
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComparableComparator<A>()
{
  Hasher.init(_seed:)();
  ComparableComparator.hash(into:)();
  return Hasher._finalize()();
}

uint64_t OptionalComparator.order.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 32))(*(_QWORD *)(a1 + 16)) & 1;
}

uint64_t OptionalComparator.order.setter(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 40))(a1 & 1, *(_QWORD *)(a2 + 16));
}

uint64_t (*OptionalComparator.order.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(uint64_t (**)(void))(v5 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6() & 1;
  return OptionalComparator.order.modify;
}

uint64_t OptionalComparator.order.modify(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 40))(*(unsigned __int8 *)(a1 + 24), *(_QWORD *)(a1 + 16));
}

uint64_t OptionalComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char v27;
  BOOL v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v5 = a3 + 16;
  v4 = *(_QWORD *)(a3 + 16);
  v33 = *(_QWORD *)(v5 + 8);
  v32 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v32 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v22(v13, a1, v7, v19);
  v23 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v14[6];
  if (v23((uint64_t)v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    if (v23(v34, 1, AssociatedTypeWitness) == 1)
      return 0;
    v28 = ((*(uint64_t (**)(uint64_t))(v33 + 32))(v32) & 1) == 0;
    v29 = -1;
  }
  else
  {
    v25 = v13;
    v26 = (void (*)(char *, char *, uint64_t))v14[4];
    v26(v21, v25, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v10, v34, v7);
    if (v23((uint64_t)v10, 1, AssociatedTypeWitness) != 1)
    {
      v26(v17, v10, AssociatedTypeWitness);
      v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 24))(v21, v17, v32);
      v30 = (void (*)(char *, uint64_t))v14[1];
      v30(v17, AssociatedTypeWitness);
      v30(v21, AssociatedTypeWitness);
      return v24;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v27 = (*(uint64_t (**)(uint64_t))(v33 + 32))(v32);
    ((void (*)(char *, uint64_t))v14[1])(v21, AssociatedTypeWitness);
    v28 = (v27 & 1) == 0;
    v29 = 1;
  }
  if (v28)
    return v29;
  else
    return -v29;
}

uint64_t OptionalComparator.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OptionalComparator.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OptionalComparator.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance OptionalComparator<A>(char a1, uint64_t a2)
{
  return OptionalComparator.order.setter(a1 & 1, a2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance OptionalComparator<A>(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = OptionalComparator.order.modify((uint64_t)v4, a2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalComparator<A>()
{
  Hasher.init(_seed:)();
  OptionalComparator.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OptionalComparator<A>()
{
  return static OptionalComparator.== infix(_:_:)();
}

uint64_t MutableCollection<>.sort<A>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t MutableCollection<>.sort<A, B>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t specialized static AnySortComparator.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char v18;
  uint64_t v20;

  v3 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v4 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, __n128))(v11 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - v14;
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v16)
  {
    v17(v15, 0, 1, v3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v3);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  }
  else
  {
    v17(v15, 1, 1, v3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized SortOrder.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  char v3;
  _QWORD v5[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (v3 & 1) == 0;
}

BOOL partial apply for closure #1 in Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 40) + 24))(a1, a2, *(_QWORD *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 48) + 24))(a1, a2, *(_QWORD *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[7], v2[8]) == -1;
}

unint64_t instantiation function for generic protocol witness table for AnySortComparator(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AnySortComparator, &type metadata for AnySortComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AnySortComparator, &type metadata for AnySortComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ComparableComparator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ComparableComparator<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for OptionalComparator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in OptionalComparator<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t sub_181E75830@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for OptionalComparator(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = OptionalComparator.order.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_181E75868(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for OptionalComparator(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return OptionalComparator.order.setter(v4, v5);
}

uint64_t sub_181E758A4()
{
  return 16;
}

__n128 sub_181E758B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of SortComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SortComparator.order.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))() & 1;
}

uint64_t dispatch thunk of SortComparator.order.setter(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 40))(a1 & 1);
}

uint64_t dispatch thunk of SortComparator.order.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for SortOrder()
{
  return &type metadata for SortOrder;
}

uint64_t destroy for AnySortComparator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AnySortComparator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for AnySortComparator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  swift_retain();
  swift_release();
  v6 = a2[10];
  a1[9] = a2[9];
  a1[10] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnySortComparator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySortComparator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySortComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySortComparator()
{
  return &type metadata for AnySortComparator;
}

uint64_t storeEnumTagSinglePayload for SortOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E75BA8 + 4 * byte_1821694E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E75BDC + 4 * byte_1821694E0[v4]))();
}

uint64_t sub_181E75BDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E75BE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E75BECLL);
  return result;
}

uint64_t sub_181E75BF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E75C00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E75C04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E75C0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ComparableComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComparableComparator);
}

uint64_t getEnumTagSinglePayload for OptionalComparator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181E75CD4 + 4 * byte_1821694EA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for OptionalComparator(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for OptionalComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalComparator);
}

uint64_t specialized Collection.subscript.getter()
{
  String.index(after:)();
  return String.subscript.getter();
}

uint64_t specialized static RFC3986Parser.validate<A>(_:component:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

uint64_t specialized static RFC3986Parser.percentEncode<A>(_:component:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  if (a2)
  {
    if ((a2 & 0x2000000000000000) != 0)
      v4 = HIBYTE(a2) & 0xF;
    else
      v4 = a1 & 0xFFFFFFFFFFFFLL;
    if (v4)
      __asm { BR              X10 }
    return 0;
  }
  return v3;
}

void sub_181E76E48()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181E76EE4);
}

uint64_t (*specialized static RFC3986Parser.IDNAEncodeHost<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), unint64_t a2))(uint64_t, uint64_t, uint64_t)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[6];
  char v29;
  uint64_t v30[2];
  int32_t (__cdecl *v31)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v32;
  int32_t (__cdecl *v33)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v34;

  v2 = a1;
  if (a2)
  {
    v4 = HIBYTE(a2) & 0xF;
    v5 = (unint64_t)a1 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0)
      v6 = HIBYTE(a2) & 0xF;
    else
      v6 = (unint64_t)a1 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v33 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
          v34 = a2 & 0xFFFFFFFFFFFFFFLL;
          v31 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          v32 = 0;
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v33, v4, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v31, 1, (unsigned __int8 *)&v33, v4, v30);
          v8 = v30[0];
          v10 = v30[1];
          swift_release();
        }
        else
        {
          if (((unint64_t)a1 & 0x1000000000000000) != 0)
          {
            v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            v5 = v24;
          }
          v33 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          v34 = 0;
          swift_bridgeObjectRetain_n();
          v8 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v7, v5, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v33, 1, v7, v5);
          v10 = v9;
        }
        swift_bridgeObjectRelease();
        if (v10 != 1)
        {
          swift_bridgeObjectRelease();
          return (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8;
        }
      }
      v33 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
      v34 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v11 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v12 = objc_msgSend(v11, sel__fastCharacterContents);
      v13 = v11;
      if (v12)
      {
        v33 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
        v34 = a2;
        StringProtocol._ephemeralString.getter();
        v14 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v15 = objc_msgSend(v14, sel_length);
        v16 = swift_unknownObjectRelease();
        MEMORY[0x1E0C80A78](v16);
        v29 = 1;
        MEMORY[0x1E0C80A78](v17);
        v28[2] = v12;
        v28[3] = v15;
        v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v18, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v28);
        swift_bridgeObjectRelease();
        return v2;
      }
      v33 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
      v34 = a2;
      swift_bridgeObjectRetain();
      v20 = String.init<A>(_:)();
      v21 = v19;
      if ((v19 & 0x1000000000000000) != 0)
      {
        v20 = static String._copying(_:)();
        v26 = v25;
        swift_bridgeObjectRelease();
        v21 = v26;
        if ((v26 & 0x2000000000000000) == 0)
          goto LABEL_20;
      }
      else if ((v19 & 0x2000000000000000) == 0)
      {
LABEL_20:
        if ((v20 & 0x1000000000000000) != 0)
        {
          v22 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v23 = v20 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        v33 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        v34 = 0;
        v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v22, v23, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v33, 1, v22, v23);
        goto LABEL_27;
      }
      v33 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v20;
      v34 = v21 & 0xFFFFFFFFFFFFFFLL;
      v31 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v32 = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v33, HIBYTE(v21) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v31, 1, (unsigned __int8 *)&v33, HIBYTE(v21) & 0xF, v30);
      v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30[0];
      swift_release();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    return 0;
  }
  return v2;
}

void specialized Collection.first.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_181E773F0(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

unint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[3];

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    v13 = 0;
    return v13 | ((v2 == 0) << 8);
  }
  v5 = (v2 << 16) | 0xB;
  v6 = a1 & 0x800000000000000;
  if ((a1 & 0x800000000000000) != 0)
    v5 = (v2 << 16) | 7;
  v7 = v6 >> 59;
  v8 = 4 << (v6 >> 59);
  if ((a2 & 0x1000000000000000) != 0)
    result = v5;
  else
    result = (v2 << 16) | 7;
  v10 = 8;
  if ((a2 & 0x1000000000000000) != 0)
    v10 = v8;
  if ((result & 0xC) == v10 && (result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2), result < 0x4000))
  {
    __break(1u);
  }
  else if ((a2 & 0x1000000000000000) == 0)
  {
    v11 = (result & 0xFFFFFFFFFFFF0000) - 65532;
    LOBYTE(v7) = 1;
    goto LABEL_15;
  }
  if (v2 >= result >> 16)
  {
    v11 = String.UTF8View._foreignIndex(before:)();
LABEL_15:
    if ((v11 & 0xC) == 4 << v7)
      v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
    v12 = v11 >> 16;
    if (v11 >> 16 >= v2)
    {
      __break(1u);
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v13 = String.UTF8View._foreignSubscript(position:)();
        return v13 | ((v2 == 0) << 8);
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v13 = *((_BYTE *)v14 + v12);
        return v13 | ((v2 == 0) << 8);
      }
      if ((a1 & 0x1000000000000000) != 0)
      {
        v13 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v11 >> 16));
        return v13 | ((v2 == 0) << 8);
      }
    }
    v13 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v12);
    return v13 | ((v2 == 0) << 8);
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

void specialized BidirectionalCollection.last.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    return swift_retain();
  else
    return 0;
}

void *specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(void **)(a1 + 8 * v1 + 24);
  v3 = v2;
  return v2;
}

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  int v18;

  v18 = a3;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v6 = 4 * v5;
  v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = 4 << v7;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v9 = 15;
  while (1)
  {
    v10 = v9 >> 14;
    if (v9 >> 14 == v6)
      return v10 == v6;
    v11 = v9 & 0xC;
    result = v9;
    if (v11 == v8)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    v13 = result >> 16;
    if (result >> 16 >= v5)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v14 = result;
      if (v11 != v8)
        goto LABEL_18;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = v16;
      v14 = *((_BYTE *)v17 + v13);
      if (v11 != v8)
        goto LABEL_18;
    }
    else
    {
      result = v15;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v14 = *(_BYTE *)(result + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_19;
        goto LABEL_23;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    v9 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_19:
      v9 = (v9 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v14 < 0)
        return v10 == v6;
      goto LABEL_25;
    }
LABEL_23:
    if (v5 <= v9 >> 16)
      goto LABEL_28;
    v9 = String.UTF8View._foreignIndex(after:)();
    if (v14 < 0)
      return v10 == v6;
LABEL_25:
    if ((UInt8.allowedURLComponents.getter(v14) & v18) == 0)
      return v10 == v6;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  v8 = (uint64_t (*)(_QWORD *))result;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LODWORD(v9) = 1;
  v10 = 11;
  if ((_DWORD)v9)
    v10 = 7;
  v11 = v10 | (v5 << 16);
  v12 = 4 << v9;
  v18 = a4 & 0xFFFFFFFFFFFFFFLL;
  v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    if ((v11 & 0xC) != v12)
    {
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_12;
      goto LABEL_15;
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    if (result < 0x4000)
      break;
    v11 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_12:
      v11 = (v11 & 0xFFFFFFFFFFFF0000) - 65532;
      goto LABEL_17;
    }
LABEL_15:
    if (v5 < v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(before:)();
LABEL_17:
    result = v11;
    if ((v11 & 0xC) == v12)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    v13 = result >> 16;
    if (result >> 16 >= v5)
      goto LABEL_34;
    if ((a4 & 0x1000000000000000) != 0)
    {
      v15 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v17[0] = a3;
      v17[1] = v18;
      v15 = *((_BYTE *)v17 + v13);
    }
    else
    {
      v14 = v16;
      if ((a3 & 0x1000000000000000) == 0)
        v14 = _StringObject.sharedUTF8.getter();
      v15 = *(_BYTE *)(v14 + v13);
    }
    LOBYTE(v17[0]) = v15;
    result = v8(v17);
    if (v4 || (result & 1) != 0)
      return v11;
    if (v11 < 0x4000)
      return 0;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  while (1)
  {
    v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    v9 = a1(v12);
    if (v4)
      break;
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v7;
    if (v7 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;

  if (a2 == a3)
  {
    return 0;
  }
  else
  {
    v4 = a2;
    if (*(unsigned __int8 *)(a4 + a2) == a1)
    {
      return a2;
    }
    else
    {
      while (a3 - 1 != v4)
      {
        v6 = *(unsigned __int8 *)(a4 + 1 + v4++);
        if (v6 == a1)
          return v4;
      }
      return 0;
    }
  }
}

unint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  if ((a3 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a3) & 0xF;
  else
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  v7 = 4 * v3;
  v8 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  v15 = a3 & 0xFFFFFFFFFFFFFFLL;
  v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v11 = 15;
  while (1)
  {
    result = v11;
    if ((v11 & 0xC) == v9)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    v13 = result >> 16;
    if (result >> 16 >= v3)
      break;
    if ((a3 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v16[0] = a2;
      v16[1] = v15;
      result = *((unsigned __int8 *)v16 + v13);
    }
    else
    {
      v14 = v10;
      if ((a2 & 0x1000000000000000) == 0)
        v14 = _StringObject.sharedUTF8.getter();
      result = *(unsigned __int8 *)(v14 + v13);
    }
    if (result == a1)
      return v11;
    if ((v11 & 0xC) == v9)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      v11 = result;
      if ((a3 & 0x1000000000000000) == 0)
        goto LABEL_8;
LABEL_21:
      if (v3 <= v11 >> 16)
        goto LABEL_31;
      v11 = String.UTF8View._foreignIndex(after:)();
      if (v7 == v11 >> 14)
        return 0;
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
        goto LABEL_21;
LABEL_8:
      v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v7 == v11 >> 14)
        return 0;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = a2 + 32;
  v5 = qword_182169CD8[a1];
  while (qword_182169CD8[*(char *)(v4 + v3)] != v5)
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    if ((v6 & 1) != 0)
      return v3;
    if (v2 == ++v3)
      return 0;
  }
  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14)
    return 0;
  result = Substring.UTF8View.subscript.getter();
  if (result == a1)
    return a2;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  if ((a5 & 0x2000000000000000) != 0)
    v14 = HIBYTE(a5) & 0xF;
  else
    v14 = a4 & 0xFFFFFFFFFFFFLL;
  v6 = a2;
  while (1)
  {
    if ((v6 & 0xC) == v13)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a4, a5);
      v6 = result;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_13:
        v6 = (v6 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_17;
      }
    }
    else if ((a5 & 0x1000000000000000) == 0)
    {
      goto LABEL_13;
    }
    if (v14 <= v6 >> 16)
      break;
    v6 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    if (v6 >> 14 == v5)
      return 0;
    result = Substring.UTF8View.subscript.getter();
    if (result == a1)
      return v6;
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (!a3)
    return 0;
  v5 = swift_retain();
  v6 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v5, a1);
  swift_release();
  v7 = 0;
  if ((v6 & 1) == 0)
  {
    while (a3 - 1 != v7)
    {
      v8 = swift_retain();
      v9 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v8, a1);
      swift_release();
      ++v7;
      if ((v9 & 1) != 0)
        return v7;
    }
    return 0;
  }
  return v7;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = String.index(after:)();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  char v14;
  char v15;
  char v16;
  _QWORD v17[2];
  uint64_t (*v18)(_QWORD *);

  v18 = a1;
  if ((a4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a4) & 0xF;
  else
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    v16 = 0;
    return v16 & 1;
  }
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  v10 = 15;
  while (1)
  {
    v11 = v10 & 0xC;
    result = v10;
    if (v11 == v9)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    v13 = result >> 16;
    if (result >> 16 >= v7)
      break;
    if ((a4 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v14 = result;
      if (v11 != v9)
        goto LABEL_18;
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v17[0] = a3;
      v17[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      v14 = *((_BYTE *)v17 + v13);
      if (v11 != v9)
        goto LABEL_18;
    }
    else
    {
      result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v14 = *(_BYTE *)(result + v13);
      if (v11 != v9)
      {
LABEL_18:
        if ((a4 & 0x1000000000000000) == 0)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    v10 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_19:
      v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 <= v10 >> 16)
      goto LABEL_32;
    v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    LOBYTE(v17[0]) = v14;
    v15 = v18(v17);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v16 = 1;
      return v16 & 1;
    }
    if (4 * v7 == v10 >> 14)
      goto LABEL_27;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void URL.init(_fileManagerFailableFileURLWithPath:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  _BOOL8 v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[3];
  unsigned __int8 v14;
  _QWORD *v15;
  __int128 v16;

  if (_foundation_swift_url_feature_enabled())
  {
    v14 = 3;
    memset(v13, 0, sizeof(v13));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v14, (uint64_t)v13, (uint64_t *)&v15);
    v6 = v15;
    v7 = v16;
LABEL_9:
    *(_QWORD *)a3 = v6;
    *(_OWORD *)(a3 + 8) = v7;
    return;
  }
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v8)
    swift_bridgeObjectRetain();
  v9 = (specialized BidirectionalCollection.last.getter(a1, a2) & 0x1FF) == 47;
  v10 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
  v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_initFileURLWithPath_isDirectory_, v11, v9);
  swift_unknownObjectRelease();
  v6 = static URL._converted(from:)(v12);

  if (v6)
  {
    v7 = 0uLL;
    goto LABEL_9;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(_QWORD *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E0C99AA0], a1);
}

uint64_t URLResourceValues.volumeSupportsCasePreservedNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C68]);
}

uint64_t URLResourceValues.volumeSupportsCaseSensitiveNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C70]);
}

uint64_t URL.user.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.user(percentEncoded:), (SEL *)&selRef_user);
}

uint64_t URL.password.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.password(percentEncoded:), (SEL *)&selRef_password);
}

uint64_t URL.port.getter()
{
  uint64_t v0;
  _BYTE *v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  void *v6;
  id v7;

  v2 = *(void **)v0;
  v1 = *(_BYTE **)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v5 = objc_msgSend(v2, sel_port);
    if (!v5)
      return 0;
    v6 = v5;
    v7 = objc_msgSend(v5, sel_integerValue);

    return (uint64_t)v7;
  }
  if (v1)
  {
    if (v1[72] == 1 && v1[96] == 1 && v1[120] == 1 && (v1[144] & 1) != 0 && !v3)
      return 0;
    return URLParseInfo.port.getter();
  }
  __break(1u);
  return result;
}

uint64_t URL.query.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.query(percentEncoded:), (SEL *)&selRef_query);
}

uint64_t URL.fragment.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.fragment(percentEncoded:), (SEL *)&selRef_fragment);
}

uint64_t URL.user.getter(uint64_t (*a1)(uint64_t), SEL *a2)
{
  void **v2;
  void *v5;
  id v6;
  id v7;
  void *v8;

  v5 = *v2;
  if (_foundation_swift_url_feature_enabled())
    return a1(1);
  v7 = objc_msgSend(v5, *a2);
  if (!v7)
    return 0;
  v8 = v7;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return (uint64_t)v6;
}

uint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[16];
  unint64_t *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2);
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((a2 & 0x1000000000000000) != 0)
    {
      v12 = 0;
      v28 = 0;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v63 = a1;
        v64 = a2 & 0xFFFFFFFFFFFFFFLL;
        v13 = &v63;
        v14 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v13 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v13 = (unint64_t *)_StringObject.sharedUTF8.getter();
          v3 = v58;
        }
        v14 = v3;
      }
      v12 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v13, v14, 32, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
      v28 = v27;
    }
    swift_bridgeObjectRelease();
    if (!v28)
    {
      swift_bridgeObjectRetain();
      v29 = a1;
      v30 = a2;
      v31 = 32;
LABEL_28:
      v12 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v29, v30, v31);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v9 = v7;
    if (v7 >= 0x4000)
    {
      v15 = String.subscript.getter();
      v17 = v16;
      v63 = v15;
      v64 = v18;
      v65 = v19;
      v66 = v16;
      MEMORY[0x1E0C80A78](v15);
      v61 = &v63;
      v62 = 32;
      v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v60, v21, v22, v20, v17);
      if (v24)
      {
        v25 = (uint64_t)v23;
        v26 = v24;
      }
      else
      {
        v34 = v63;
        v35 = v64;
        v36 = v65;
        v37 = v66;
        swift_bridgeObjectRetain();
        v25 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v34, v35, v36, v37, 0x20u);
        v26 = v38;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v39 = specialized Collection.suffix(from:)(v9, a1, a2);
      v41 = v40;
      v63 = v39;
      v64 = v42;
      v65 = v43;
      v66 = v40;
      MEMORY[0x1E0C80A78](v39);
      v61 = &v63;
      v62 = 16;
      v47 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v60, v45, v46, v44, v41);
      if (v48)
      {
        v49 = (uint64_t)v47;
        v50 = v48;
      }
      else
      {
        v51 = v63;
        v52 = v64;
        v53 = v65;
        v54 = v66;
        swift_bridgeObjectRetain();
        v49 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v51, v52, v53, v54, 0x10u);
        v50 = v55;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v63 = v25;
      v64 = v26;
      swift_bridgeObjectRetain();
      v56._countAndFlagsBits = v49;
      v56._object = v50;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v63;
    }
    else
    {
      swift_bridgeObjectRetain();
      if ((a2 & 0x1000000000000000) != 0)
      {
        v12 = 0;
        v33 = 0;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v63 = a1;
          v64 = a2 & 0xFFFFFFFFFFFFFFLL;
          v10 = &v63;
          v11 = v2;
        }
        else
        {
          if ((a1 & 0x1000000000000000) != 0)
          {
            v10 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v10 = (unint64_t *)_StringObject.sharedUTF8.getter();
            v3 = v59;
          }
          v11 = v3;
        }
        v12 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v10, v11, 16, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
        v33 = v32;
      }
      swift_bridgeObjectRelease();
      if (!v33)
      {
        swift_bridgeObjectRetain();
        v29 = a1;
        v30 = a2;
        v31 = 16;
        goto LABEL_28;
      }
    }
  }
  return v12;
}

uint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  Swift::String v64;
  _BYTE v65[16];
  unint64_t *v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v4 = a1 >> 14;
  v5 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14)
    return 0;
  swift_bridgeObjectRetain();
  v11 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2, a3, a4);
  v13 = v12;
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    v71 = a1;
    v72 = a2;
    v73 = a3;
    v74 = a4;
    MEMORY[0x1E0C80A78](result);
    v66 = &v71;
    v67 = 32;
    swift_bridgeObjectRetain();
    v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v65, a1, a2, a3, a4);
    v27 = v26;
    swift_bridgeObjectRelease();
    if (v27)
      return v6;
    v28 = v71;
    v29 = v72;
    v30 = v73;
    v31 = v74;
    swift_bridgeObjectRetain();
    v21 = v28;
    v22 = v29;
    v23 = v30;
    v24 = v31;
    v25 = 32;
    goto LABEL_9;
  }
  if (v11 >> 14 == v4)
  {
    v71 = a1;
    v72 = a2;
    v73 = a3;
    v74 = a4;
    MEMORY[0x1E0C80A78](result);
    v66 = &v71;
    v67 = 16;
    swift_bridgeObjectRetain();
    v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v65, a1, a2, a3, a4);
    v16 = v15;
    swift_bridgeObjectRelease();
    if (v16)
      return v6;
    v17 = v71;
    v18 = v72;
    v19 = v73;
    v20 = v74;
    swift_bridgeObjectRetain();
    v21 = v17;
    v22 = v18;
    v23 = v19;
    v24 = v20;
    v25 = 16;
LABEL_9:
    v6 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease();
    return v6;
  }
  if (v11 >> 14 >= v4)
  {
    v32 = Substring.subscript.getter();
    v34 = v33;
    v71 = v32;
    v72 = v35;
    v73 = v36;
    v74 = v33;
    MEMORY[0x1E0C80A78](v32);
    v66 = &v71;
    v67 = 32;
    v40 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v65, v38, v39, v37, v34);
    if (v41)
    {
      v42 = v41;
      v70 = v40;
    }
    else
    {
      v69 = 0;
      v70 = (_QWORD *)v71;
      v43 = v72;
      v68 = v73;
      v44 = v74;
      swift_bridgeObjectRetain();
      v70 = (_QWORD *)specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v70, v43, v68, v44, 0x20u);
      v46 = v45;
      swift_bridgeObjectRelease();
      v42 = v46;
    }
    result = swift_bridgeObjectRelease();
    if (v5 >= v11 >> 14)
    {
      v47 = Substring.subscript.getter();
      v49 = v48;
      v71 = v47;
      v72 = v50;
      v73 = v51;
      v74 = v48;
      MEMORY[0x1E0C80A78](v47);
      v66 = &v71;
      v67 = 16;
      v55 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v65, v53, v54, v52, v49);
      if (v56)
      {
        v57 = (uint64_t)v55;
        v58 = v56;
      }
      else
      {
        v59 = v71;
        v60 = v72;
        v61 = v73;
        v62 = v74;
        swift_bridgeObjectRetain();
        v57 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v59, v60, v61, v62, 0x10u);
        v58 = v63;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v71 = (unint64_t)v70;
      v72 = v42;
      swift_bridgeObjectRetain();
      v64._countAndFlagsBits = v57;
      v64._object = v58;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v71;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  Swift::Int result;
  _QWORD v12[2];

  v4 = specialized Collection.first.getter(a1, a2);
  if ((v4 & 0x1FF) != 0x5B)
    return 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    v6 = (a1 >> 59) & 1;
    v4 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
LABEL_7:
    if ((v4 & 0xC) != 4 << v6)
      goto LABEL_8;
    goto LABEL_24;
  }
  v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  if (v5)
  {
    v4 = (v5 << 16) - 65532;
    LOBYTE(v6) = 1;
    goto LABEL_7;
  }
  __break(1u);
LABEL_24:
  v4 = _StringGuts._slowEnsureMatchingEncoding(_:)(v4, a1, a2);
LABEL_8:
  v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  v8 = v4 >> 16;
  if (v4 >> 16 >= v7)
  {
    __break(1u);
LABEL_26:
    v9 = _StringObject.sharedUTF8.getter();
    goto LABEL_15;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v10 = String.UTF8View._foreignSubscript(position:)();
    return v10 == 93;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v10 = *((_BYTE *)v12 + v8);
    return v10 == 93;
  }
  if ((a1 & 0x1000000000000000) == 0)
    goto LABEL_26;
  v9 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_15:
  v10 = *(_BYTE *)(v9 + v8);
  return v10 == 93;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unsigned __int16 *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  _BOOL8 result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned int v16;

  v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2)
      return 1;
    v13 = *a1;
    if (v13 <= 0x7F)
    {
      v14 = 2 * a2 - 2;
      v15 = a1 + 1;
      while (2)
      {
        switch((char)v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a3 & 0xF6) == 0)
              return 0;
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a3 & 0x76) == 0)
              return 0;
            goto LABEL_70;
          case '+':
            if ((a3 & 0xF7) == 0)
              return 0;
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a3 < 0x10u)
              return 0;
            goto LABEL_70;
          default:
            if ((v13 - 58) > 0xF5u)
              goto LABEL_69;
            break;
        }
        switch((char)v13)
        {
          case ':':
            if ((a3 & 0xD2) == 0)
              return 0;
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a3 < 0x40u)
              return 0;
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if ((v13 - 91) > 0xE5u)
              goto LABEL_69;
            if (v13 == 95)
            {
              if (a3 < 2u)
                return 0;
            }
            else if ((v13 - 123) > 0xE5u)
            {
LABEL_69:
              if (!a3)
                return 0;
            }
            else
            {
              result = 0;
              if (v13 != 126 || a3 < 2u)
                return result;
            }
LABEL_70:
            if (!v14)
              return 1;
            v16 = *v15++;
            LOBYTE(v13) = v16;
            v14 -= 2;
            if (v16 >= 0x80)
              return 0;
            continue;
        }
      }
    }
    return 0;
  }
  if (!a1 || !a2)
  {
    v6 = 0;
    return v6 == 0;
  }
  v5 = *a1;
  if (v5 > 0x7F)
    return 0;
  v6 = 0;
  v7 = 2 * a2 - 2;
  v8 = a1 + 1;
  do
  {
    if ((unsigned __int16)v5 == 37)
    {
      if (v6)
        return 0;
      v6 = 2;
    }
    else
    {
      switch((char)v5)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_10:
          if ((v4 & 0xF6) == 0)
            return 0;
          goto LABEL_33;
        case '&':
LABEL_16:
          if ((v4 & 0x76) == 0)
            return 0;
          goto LABEL_33;
        case '+':
          if ((v4 & 0xFFFFFFF7) == 0)
            return 0;
          goto LABEL_33;
        case '-':
        case '.':
          goto LABEL_32;
        case '/':
LABEL_18:
          if (v4 < 0x10)
            return 0;
          goto LABEL_33;
        default:
          if ((v5 - 58) > 0xF5u)
            goto LABEL_32;
          break;
      }
      switch((char)v5)
      {
        case ':':
          if ((v4 & 0xD2) == 0)
            return 0;
          goto LABEL_33;
        case ';':
          goto LABEL_10;
        case '=':
          goto LABEL_16;
        case '?':
          if (v4 < 0x40)
            return 0;
          goto LABEL_33;
        case '@':
          goto LABEL_18;
        default:
          if ((v5 - 91) > 0xE5u)
            goto LABEL_32;
          if (v5 == 95)
          {
            if (v4 < 2)
              return 0;
          }
          else if ((v5 - 123) > 0xE5u)
          {
LABEL_32:
            if (!v4)
              return 0;
          }
          else
          {
            result = 0;
            if (v5 != 126 || v4 < 2)
              return result;
          }
LABEL_33:
          if (v6-- < 1)
          {
            v6 = 0;
          }
          else if ((v5 - 58) <= 0xF5u)
          {
            result = 0;
            v11 = v5 - 65;
            if (v11 > 0x25 || ((1 << v11) & 0x3F0000003FLL) == 0)
              return result;
          }
          break;
      }
    }
    if (!v7)
      return v6 == 0;
    result = 0;
    v12 = *v8++;
    LOWORD(v5) = v12;
    v7 -= 2;
  }
  while (v12 < 0x80);
  return result;
}

uint64_t specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unint64_t a1, unint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  char v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  if ((a4 & 1) != 0)
  {
    v7 = 0;
    if ((a2 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a2) & 0xF;
    else
      v8 = a1 & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0)
        LOBYTE(v9) = 1;
      v10 = 4 << v9;
      v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v26 = a2 & 0xFFFFFFFFFFFFFFLL;
      v24 = a3 & 0xF6;
      v22 = a3 & 0xF7;
      v23 = a3 & 0x76;
      v21 = a3 & 0xD2;
      v11 = 15;
      while (1)
      {
        v12 = v11 & 0xC;
        v13 = v11;
        if (v12 == v10)
          v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        v14 = v13 >> 16;
        if (v13 >> 16 >= v8)
        {
          __break(1u);
LABEL_63:
          __break(1u);
          JUMPOUT(0x181E79B94);
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          v16 = String.UTF8View._foreignSubscript(position:)();
          if (v12 != v10)
            goto LABEL_21;
        }
        else if ((a2 & 0x2000000000000000) != 0)
        {
          v27[0] = a1;
          v27[1] = v26;
          v16 = *((_BYTE *)v27 + v14);
          if (v12 != v10)
            goto LABEL_21;
        }
        else
        {
          v15 = v25;
          if ((a1 & 0x1000000000000000) == 0)
            v15 = _StringObject.sharedUTF8.getter();
          v16 = *(_BYTE *)(v15 + v14);
          if (v12 != v10)
          {
LABEL_21:
            if ((a2 & 0x1000000000000000) == 0)
              goto LABEL_22;
            goto LABEL_26;
          }
        }
        v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        if ((a2 & 0x1000000000000000) == 0)
        {
LABEL_22:
          v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if ((v16 & 0x80) != 0)
            goto LABEL_60;
          goto LABEL_28;
        }
LABEL_26:
        if (v8 <= v11 >> 16)
          goto LABEL_63;
        v11 = String.UTF8View._foreignIndex(after:)();
        if ((v16 & 0x80) != 0)
        {
LABEL_60:
          v18 = 0;
          return v18 & 1;
        }
LABEL_28:
        switch(v16)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_29:
            v17 = v24;
            goto LABEL_30;
          case '%':
            if (v7)
              goto LABEL_60;
            v7 = 2;
            goto LABEL_10;
          case '&':
LABEL_35:
            if (!v23)
              goto LABEL_60;
            goto LABEL_53;
          case '+':
            v17 = v22;
LABEL_30:
            if (!v17)
              goto LABEL_60;
            goto LABEL_53;
          case '-':
          case '.':
            goto LABEL_52;
          case '/':
LABEL_37:
            if (a3 < 0x10u)
              goto LABEL_60;
            goto LABEL_53;
          default:
            if ((v16 - 58) > 0xF5u)
              goto LABEL_52;
            break;
        }
        switch(v16)
        {
          case ':':
            v17 = v21;
            goto LABEL_30;
          case ';':
            goto LABEL_29;
          case '=':
            goto LABEL_35;
          case '?':
            if (a3 < 0x40u)
              goto LABEL_60;
            goto LABEL_53;
          case '@':
            goto LABEL_37;
          default:
            if ((v16 - 91) > 0xE5u)
              goto LABEL_52;
            if (v16 == 95)
            {
              if (a3 < 2u)
                goto LABEL_60;
            }
            else if ((v16 - 123) > 0xE5u)
            {
LABEL_52:
              if (!a3)
                goto LABEL_60;
            }
            else
            {
              v18 = 0;
              if (v16 != 126 || a3 < 2u)
                return v18 & 1;
            }
LABEL_53:
            if (v7-- < 1)
            {
              v7 = 0;
            }
            else if ((v16 - 58) <= 0xF5u)
            {
              v18 = 0;
              if (v16 - 65 > 0x25 || ((1 << (v16 - 65)) & 0x3F0000003FLL) == 0)
                return v18 & 1;
            }
LABEL_10:
            if (4 * v8 == v11 >> 14)
              goto LABEL_59;
            break;
        }
      }
    }
LABEL_59:
    v18 = v7 == 0;
  }
  else
  {
    v18 = specialized Sequence.allSatisfy(_:)(a1, a2, a3);
  }
  return v18 & 1;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(char *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  _BOOL8 result;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;

  v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2)
      return 1;
    if ((*a1 & 0x80000000) == 0)
    {
      v13 = *a1;
      v14 = a2 - 1;
      v15 = a1 + 1;
      while (2)
      {
        switch(v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_46:
            if ((a3 & 0xF6) == 0)
              return 0;
            goto LABEL_69;
          case '&':
LABEL_52:
            if ((a3 & 0x76) == 0)
              return 0;
            goto LABEL_69;
          case '+':
            if ((a3 & 0xF7) == 0)
              return 0;
            goto LABEL_69;
          case '-':
          case '.':
            goto LABEL_68;
          case '/':
LABEL_54:
            if (a3 < 0x10u)
              return 0;
            goto LABEL_69;
          default:
            if ((v13 - 58) > 0xFFFFFFF5)
              goto LABEL_68;
            break;
        }
        switch(v13)
        {
          case ':':
            if ((a3 & 0xD2) == 0)
              return 0;
            goto LABEL_69;
          case ';':
            goto LABEL_46;
          case '=':
            goto LABEL_52;
          case '?':
            if (a3 < 0x40u)
              return 0;
            goto LABEL_69;
          case '@':
            goto LABEL_54;
          default:
            if ((v13 - 91) > 0xFFFFFFE5)
              goto LABEL_68;
            if (v13 == 95)
            {
              if (a3 < 2u)
                return 0;
            }
            else if ((v13 - 123) > 0xFFFFFFE5)
            {
LABEL_68:
              if (!a3)
                return 0;
            }
            else
            {
              result = 0;
              if (v13 != 126 || a3 < 2u)
                return result;
            }
LABEL_69:
            if (!v14)
              return 1;
            v16 = *v15++;
            v13 = v16;
            --v14;
            if (v16 < 0)
              return 0;
            continue;
        }
      }
    }
    return 0;
  }
  if (a1 && a2)
  {
    if ((*a1 & 0x80000000) == 0)
    {
      v5 = 0;
      v6 = *a1;
      v7 = a2 - 1;
      v8 = a1 + 1;
      while (2)
      {
        switch(v6)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_7:
            if ((v4 & 0xF6) == 0)
              return 0;
            goto LABEL_32;
          case '%':
            if (v5)
              return 0;
            v5 = 2;
            goto LABEL_38;
          case '&':
LABEL_13:
            if ((v4 & 0x76) == 0)
              return 0;
            goto LABEL_32;
          case '+':
            if ((v4 & 0xFFFFFFF7) == 0)
              return 0;
            goto LABEL_32;
          case '-':
          case '.':
            goto LABEL_31;
          case '/':
LABEL_15:
            if (v4 < 0x10)
              return 0;
            goto LABEL_32;
          default:
            if ((v6 - 58) > 0xFFFFFFF5)
              goto LABEL_31;
            break;
        }
        switch(v6)
        {
          case ':':
            if ((v4 & 0xD2) == 0)
              return 0;
            goto LABEL_32;
          case ';':
            goto LABEL_7;
          case '=':
            goto LABEL_13;
          case '?':
            if (v4 < 0x40)
              return 0;
            goto LABEL_32;
          case '@':
            goto LABEL_15;
          default:
            if ((v6 - 91) > 0xFFFFFFE5)
              goto LABEL_31;
            if (v6 == 95)
            {
              if (v4 < 2)
                return 0;
            }
            else if ((v6 - 123) > 0xFFFFFFE5)
            {
LABEL_31:
              if (!v4)
                return 0;
            }
            else
            {
              result = 0;
              if (v6 != 126 || v4 < 2)
                return result;
            }
LABEL_32:
            if (v5-- < 1)
            {
              v5 = 0;
            }
            else if ((v6 - 58) <= 0xFFFFFFF5)
            {
              result = 0;
              v11 = v6 - 65;
              if (v11 > 0x25 || ((1 << v11) & 0x3F0000003FLL) == 0)
                return result;
            }
LABEL_38:
            if (!v7)
              return v5 == 0;
            v12 = *v8++;
            v6 = v12;
            --v7;
            if (v12 < 0)
              return 0;
            continue;
        }
      }
    }
    return 0;
  }
  v5 = 0;
  return v5 == 0;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  int v29;
  char v30;
  unint64_t v31;

  v10 = a2 >> 14;
  if ((a6 & 1) == 0)
  {
    if (a1 >> 14 == a2 >> 14)
      return 1;
    v21 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v21) = 1;
    v22 = 4 << v21;
    if ((a4 & 0x2000000000000000) != 0)
      v23 = HIBYTE(a4) & 0xF;
    else
      v23 = a3 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v24 = a1;
    while (1)
    {
      v25 = Substring.UTF8View.subscript.getter();
      if ((v24 & 0xC) == v22)
      {
        v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, a3, a4);
        if ((a4 & 0x1000000000000000) != 0)
        {
LABEL_62:
          if (v23 <= v24 >> 16)
          {
            __break(1u);
LABEL_70:
            __break(1u);
            JUMPOUT(0x181E7A258);
          }
          v24 = String.UTF8View._foreignIndex(after:)();
          v26 = v25;
          if (v25 < 0)
            goto LABEL_50;
          goto LABEL_64;
        }
      }
      else if ((a4 & 0x1000000000000000) != 0)
      {
        goto LABEL_62;
      }
      v24 = (v24 & 0xFFFFFFFFFFFF0000) + 65540;
      v26 = v25;
      if (v25 < 0)
        goto LABEL_50;
LABEL_64:
      if ((UInt8.allowedURLComponents.getter(v26) & a5) == 0)
        goto LABEL_50;
      if (v10 == v24 >> 14)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
  }
  if (a1 >> 14 != a2 >> 14)
  {
    v13 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v13) = 1;
    v14 = 4 << v13;
    v15 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v15 = a3 & 0xFFFFFFFFFFFFLL;
    v31 = v15;
    v30 = a5 & 0xF6;
    v28 = a5 & 0xF7;
    v29 = a5 & 0x76;
    v27 = a5 & 0xD2;
    swift_bridgeObjectRetain();
    v11 = 0;
    v16 = a1;
    while (2)
    {
      v17 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v14)
      {
        v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a3, a4);
        if ((a4 & 0x1000000000000000) == 0)
          goto LABEL_15;
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_15:
        if ((v17 & 0x80) != 0)
          goto LABEL_50;
        v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_21:
        switch(v17)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_22:
            v19 = v30;
            goto LABEL_23;
          case '%':
            if (v11)
              goto LABEL_50;
            v11 = 2;
            if (v10 == v16 >> 14)
              goto LABEL_67;
            continue;
          case '&':
LABEL_28:
            if (!v29)
              goto LABEL_50;
            goto LABEL_43;
          case '+':
            v19 = v28;
LABEL_23:
            if (!v19)
              goto LABEL_50;
            goto LABEL_43;
          case '-':
          case '.':
            goto LABEL_42;
          case '/':
LABEL_30:
            if (a5 <= 0xFu)
              goto LABEL_50;
            goto LABEL_43;
          default:
            if ((v17 - 58) <= 0xF5u)
            {
              switch(v17)
              {
                case ':':
                  v19 = v27;
                  goto LABEL_23;
                case ';':
                  goto LABEL_22;
                case '=':
                  goto LABEL_28;
                case '?':
                  if (a5 <= 0x3Fu)
                    goto LABEL_50;
                  goto LABEL_43;
                case '@':
                  goto LABEL_30;
                default:
                  if ((v17 - 91) > 0xE5u)
                    break;
                  if (v17 == 95)
                    goto LABEL_40;
                  if ((v17 - 123) > 0xE5u)
                    break;
                  if (v17 != 126)
                    goto LABEL_50;
LABEL_40:
                  if (a5 <= 1u)
                    goto LABEL_50;
                  goto LABEL_43;
              }
            }
LABEL_42:
            if (!a5)
              goto LABEL_50;
LABEL_43:
            if (v11-- < 1)
            {
              v11 = 0;
            }
            else if ((v17 - 58) <= 0xF5u
                   && (v17 - 71) <= 0xF9u
                   && (v17 <= 0x60u || v17 >= 0x67u))
            {
              goto LABEL_50;
            }
            if (v10 != v16 >> 14)
              continue;
LABEL_67:
            swift_bridgeObjectRelease();
            break;
        }
        return v11 == 0;
      }
      break;
    }
    if (v31 <= v16 >> 16)
      goto LABEL_70;
    v18 = String.UTF8View._foreignIndex(after:)();
    if ((v17 & 0x80) != 0)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      return 0;
    }
    v16 = v18;
    goto LABEL_21;
  }
  v11 = 0;
  return v11 == 0;
}

unint64_t specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  void *v23;
  unsigned __int16 *v24;
  id v25;
  void *v26;
  id v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t i;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  void *v44;
  unsigned __int16 *v45;
  id v46;
  unsigned __int16 *v47;
  void *v48;
  id v49;
  BOOL v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  void *v60;
  unsigned __int16 *v61;
  id v62;
  void *v63;
  id v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100) != 0)
  {
LABEL_102:
    __break(1u);
  }
  else
  {
    if (result == 91)
    {
      v2 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x1000000000000000) == 0)
      {
        v12 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a2 & 0x2000000000000000) != 0)
          v12 = HIBYTE(a2) & 0xF;
        if (!v12)
        {
          __break(1u);
LABEL_38:
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
LABEL_9:
          if ((a2 & 0x2000000000000000) != 0)
            v13 = v2;
          else
            v13 = a1 & 0xFFFFFFFFFFFFLL;
          v14 = result >> 16;
          if (result >> 16 >= v13)
          {
            __break(1u);
          }
          else if ((a2 & 0x1000000000000000) != 0)
          {
            if (String.UTF8View._foreignSubscript(position:)() == 93)
            {
              v14 = String.UTF8View._foreignIndex(after:)();
              v16 = String.UTF8View._foreignCount()();
              if (__OFSUB__(v16, 1))
              {
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              v3 = MEMORY[0x186DA485C](15, v16 - 1, a1, a2);
              goto LABEL_24;
            }
          }
          else
          {
            if ((a2 & 0x2000000000000000) == 0)
            {
              if ((a1 & 0x1000000000000000) != 0)
                v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
              else
                v15 = _StringObject.sharedUTF8.getter();
              if (*(_BYTE *)(v15 + v14) != 93)
                goto LABEL_40;
              goto LABEL_23;
            }
            v68 = a1;
            v69 = a2 & 0xFFFFFFFFFFFFFFLL;
            if (*((_BYTE *)&v68 + v14) == 93)
            {
LABEL_23:
              v14 = 65540;
              v3 = (v13 << 16) - 65532;
LABEL_24:
              if (v3 >> 14 >= v14 >> 14)
              {
                swift_bridgeObjectRetain();
                v4 = String.subscript.getter();
                v6 = v17;
                v5 = v18;
                v3 = v19;
                v20 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                if ((v21 & 1) != 0)
                {
                  v22 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v4, v6, v5, v3, 2u, 0);
                  if (v22 == 2)
                  {
                    v68 = v4;
                    v69 = v6;
                    v70 = v5;
                    v71 = v3;
                    lazy protocol witness table accessor for type Substring and conformance Substring();
                    StringProtocol._ephemeralString.getter();
                    v23 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
                    v25 = v23;
                    if (v24)
                    {
                      v68 = v4;
                      v69 = v6;
                      v70 = v5;
                      v71 = v3;
                      StringProtocol._ephemeralString.getter();
                      v26 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v27 = objc_msgSend(v26, sel_length);
                      swift_unknownObjectRelease();
                      v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, (uint64_t)v27, 2u, 0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v6, v5, v3, 2u, 0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                  }
                  else
                  {
                    v29 = v22;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v28 = v29 & 1;
                  }
                  return v28 & 1;
                }
                v14 = v20;
                if ((v20 & 0xC) != v8)
                {
                  v67 = v4;
                  if ((a2 & 0x1000000000000000) != 0)
                  {
LABEL_44:
                    if (v13 <= v20 >> 16)
                    {
                      __break(1u);
                      goto LABEL_65;
                    }
                    v7 = String.UTF8View._foreignIndex(after:)();
LABEL_46:
                    v4 = 4 * v13;
                    if (4 * v13 == v7 >> 14)
                    {
LABEL_61:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v28 = 0;
                      return v28 & 1;
                    }
                    v3 = v6;
                    v5 = v7 & 0xC;
                    v30 = v7;
                    if (v5 != v8)
                    {
LABEL_49:
                      v31 = v30 >> 16;
                      if (v30 >> 16 >= v13)
                      {
                        __break(1u);
                      }
                      else
                      {
                        if ((a2 & 0x1000000000000000) != 0)
                        {
                          v32 = String.UTF8View._foreignSubscript(position:)();
                        }
                        else if ((a2 & 0x2000000000000000) != 0)
                        {
                          v68 = a1;
                          v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          v32 = *((_BYTE *)&v68 + v31);
                        }
                        else if ((a1 & 0x1000000000000000) != 0)
                        {
                          v32 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v30 >> 16));
                        }
                        else
                        {
                          v32 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v31);
                        }
                        if (v32 != 50)
                          goto LABEL_61;
                        v31 = v3;
                        if (v5 != v8)
                        {
                          if ((a2 & 0x1000000000000000) == 0)
                            goto LABEL_59;
                          goto LABEL_68;
                        }
                      }
                      v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                      if ((a2 & 0x1000000000000000) == 0)
                      {
LABEL_59:
                        v7 = (v7 & 0xFFFFFFFFFFFF0000) + 65540;
                        if (v4 == v7 >> 14)
                          goto LABEL_61;
                        goto LABEL_70;
                      }
LABEL_68:
                      if (v13 <= v7 >> 16)
                      {
                        __break(1u);
LABEL_97:
                        v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_71:
                        v34 = v33 >> 16;
                        if (v33 >> 16 >= v13)
                        {
                          __break(1u);
                          goto LABEL_99;
                        }
                        if ((a2 & 0x1000000000000000) != 0)
                        {
                          v36 = String.UTF8View._foreignSubscript(position:)();
                          goto LABEL_79;
                        }
                        if ((a2 & 0x2000000000000000) != 0)
                        {
                          v68 = a1;
                          v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          v36 = *((_BYTE *)&v68 + v34);
                          goto LABEL_79;
                        }
                        if ((a1 & 0x1000000000000000) == 0)
                          goto LABEL_100;
                        for (i = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32; ; i = _StringObject.sharedUTF8.getter())
                        {
                          v36 = *(_BYTE *)(i + v34);
LABEL_79:
                          v34 = v67;
                          if (v36 != 53)
                            break;
                          if (v14 >> 14 >= v67 >> 14)
                          {
                            v37 = Substring.subscript.getter();
                            v39 = v38;
                            v66 = v40;
                            v42 = v41;
                            v43 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v37, v38, v40, v41, 2u, 0);
                            if (v43 == 2)
                            {
                              v68 = v37;
                              v69 = v39;
                              v70 = v66;
                              v71 = v42;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              v44 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              v45 = (unsigned __int16 *)objc_msgSend(v44, sel__fastCharacterContents);
                              v46 = v44;
                              if (v45)
                              {
                                v68 = v37;
                                v69 = v39;
                                v70 = v66;
                                v71 = v42;
                                v47 = v45;
                                StringProtocol._ephemeralString.getter();
                                v48 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                v49 = objc_msgSend(v48, sel_length);
                                swift_unknownObjectRelease();
                                v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, (uint64_t)v49, 2u, 0);
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                swift_bridgeObjectRetain();
                                v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v39, v66, v42, 2u, 0);
                                swift_bridgeObjectRelease_n();
                              }
                              if (!v50)
                                goto LABEL_61;
                            }
                            else
                            {
                              v51 = v43;
                              swift_bridgeObjectRelease();
                              if ((v51 & 1) == 0)
                                goto LABEL_61;
                            }
                            swift_bridgeObjectRetain();
                            result = Substring.index(after:)();
                            if (v31 >> 14 < result >> 14)
                            {
                              __break(1u);
                              goto LABEL_102;
                            }
                            v52 = Substring.subscript.getter();
                            v54 = v53;
                            v56 = v55;
                            v58 = v57;
                            v59 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v52, v53, v55, v57, 8u, 1);
                            if (v59 == 2)
                            {
                              v68 = v52;
                              v69 = v54;
                              v70 = v56;
                              v71 = v58;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              v60 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
                              v62 = v60;
                              if (v61)
                              {
                                v68 = v52;
                                v69 = v54;
                                v70 = v56;
                                v71 = v58;
                                StringProtocol._ephemeralString.getter();
                                v63 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                v64 = objc_msgSend(v63, sel_length);
                                swift_unknownObjectRelease();
                                v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v64, 8u, 1);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease_n();
                                swift_bridgeObjectRelease();
                                return v28 & 1;
                              }
                              swift_bridgeObjectRetain();
                              v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v52, v54, v56, v58, 8u, 1);
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease_n();
                            }
                            else
                            {
                              v65 = v59;
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              v28 = v65 & 1;
                            }
                            swift_bridgeObjectRelease();
                            return v28 & 1;
                          }
LABEL_99:
                          __break(1u);
LABEL_100:
                          ;
                        }
                        goto LABEL_61;
                      }
                      v7 = String.UTF8View._foreignIndex(after:)();
                      if (v4 == v7 >> 14)
                        goto LABEL_61;
LABEL_70:
                      v33 = v7;
                      if ((v7 & 0xC) != v8)
                        goto LABEL_71;
                      goto LABEL_97;
                    }
LABEL_65:
                    v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                    goto LABEL_49;
                  }
LABEL_28:
                  v7 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
                  goto LABEL_46;
                }
LABEL_43:
                v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
                v67 = v4;
                if ((a2 & 0x1000000000000000) != 0)
                  goto LABEL_44;
                goto LABEL_28;
              }
              goto LABEL_41;
            }
          }
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        result = (v12 << 16) - 65532;
        v3 = 1;
LABEL_8:
        v8 = 4 << v3;
        if ((result & 0xC) != 4 << v3)
          goto LABEL_9;
        goto LABEL_38;
      }
    }
    else
    {
      __break(1u);
    }
    result = String.UTF8View._foreignCount()();
    if (!__OFSUB__(result, 1))
    {
      v3 = (a1 >> 59) & 1;
      result = MEMORY[0x186DA485C](15, result - 1, a1, a2);
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t URLResourceValues.localizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99A70]);
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t), char a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    result = closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(a1, a2, a3, a4 & 1, a5, a6, v9);
    if (!v6)
      return v9[0];
  }
  else
  {
    v8 = one-time initialization token for idnaTranscoder;
    swift_retain();
    if (v8 != -1)
      swift_once();
    if ((byte_1EDC3E6C0 & 1) != 0)
    {
      swift_release();
      return 0;
    }
    else
    {
      if ((swift_stdlib_isStackAllocationSafe() & 1) != 0)
        __break(1u);
      result = swift_slowAlloc();
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t isStackAllocationSafe;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v8 = 0;
  v24[3] = *MEMORY[0x1E0C80C00];
  if (a2 <= 2048)
  {
    if (one-time initialization token for idnaTranscoder != -1)
      swift_once();
    if (byte_1EDC3E6C0 == 1)
    {
      return 0;
    }
    else
    {
      v17 = static UIDNAHookICU.idnaTranscoder;
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) != 0)
      {
        v24[1] = v24;
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        return specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)&v21, 2048, a1, a2, a3, a4, v17, a5, a6, a7);
      }
      else
      {
        v23 = a8;
        v22 = a6;
        v19 = swift_slowAlloc();
        v8 = specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(v19, 2048, a1, a2, a3, a4, v17, a5, v22, a7);
        MEMORY[0x186DA9E78](v19, -1, -1);
      }
    }
  }
  return v8;
}

uint64_t specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9, uint64_t (*a10)(uint64_t, _QWORD))
{
  int v12;
  uint64_t result;
  int v14;
  char v15;
  int v16;
  __int16 v17;
  _WORD v18[11];

  *(_QWORD *)&v18[7] = *MEMORY[0x1E0C80C00];
  v17 = 16;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)&v18[3] = 0;
  v16 = 0;
  if (!a3)
    goto LABEL_16;
  if (!a1)
    goto LABEL_17;
  if (a4 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_14;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  v12 = a5(a7, a3, a4, a1, a2, &v17, &v16);
  if (v16 > 0)
    return 0;
  v14 = v12;
  v15 = a8(*(unsigned int *)&v18[1]);
  result = 0;
  if ((v15 & 1) != 0 && v14 >= 1)
    return a10(a1, v14);
  return result;
}

uint64_t specialized URLResourceValues._get<A>(_:)(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 16))
  {
    v3 = a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }

  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

{
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 16))
  {
    v3 = a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }

  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, uint64_t a2, char a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;

  v5 = a1;
  specialized Set._Variant.insert(_:)(&v11, v5);

  if ((a3 & 1) != 0)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = v5;
  }
  else
  {
    v6 = objc_allocWithZone((Class)NSNumber);
    v7 = v5;
    v8 = objc_msgSend(v6, sel_initWithInteger_, a2);
    *((_QWORD *)&v12 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v11 = v8;
    v9 = v7;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
}

uint64_t URLResourceValues.allValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t URLResourceValues.name.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99A90]);
}

uint64_t URLResourceValues.name.setter(uint64_t a1, uint64_t a2)
{
  specialized URLResourceValues.name.setter(a1, a2, MEMORY[0x1E0C99A90]);
  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.name.modify(_QWORD *a1))()
{
  uint64_t *v1;
  uint64_t *v2;
  _OWORD *v4;
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char v11;
  int v12;
  __int128 v13;

  v2 = v1;
  v4 = malloc(0x50uLL);
  v5 = v4;
  *a1 = v4;
  v6 = v4 + 3;
  v7 = *v2;
  v8 = (void *)*MEMORY[0x1E0C99A90];
  *((_QWORD *)v4 + 8) = v2;
  *((_QWORD *)v4 + 9) = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v9 = v8;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }
    else
    {
      *v5 = 0u;
      v5[1] = 0u;
    }

  }
  else
  {
    *v4 = 0u;
    v4[1] = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12 = swift_dynamicCast();
  v13 = 0uLL;
  if (v12)
    v13 = *v6;
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

uint64_t URLResourceValues.isRegularFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A18]);
}

uint64_t URLResourceValues.isSymbolicLink.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A28]);
}

uint64_t URLResourceValues.isVolume.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A48]);
}

uint64_t URLResourceValues.isPackage.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A00]);
}

uint64_t URLResourceValues.isPackage.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A00], a1);
}

uint64_t (*URLResourceValues.isPackage.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C99A00];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isApplication.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999C0]);
}

uint64_t URLResourceValues.isSystemImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A30]);
}

uint64_t URLResourceValues.isUserImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A40]);
}

uint64_t URLResourceValues.isUserImmutable.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A40], a1);
}

uint64_t (*URLResourceValues.isUserImmutable.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C99A40];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isHidden.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999F0]);
}

uint64_t URLResourceValues.isHidden.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999F0], a1);
}

uint64_t (*URLResourceValues.isHidden.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C999F0];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.hasHiddenExtension.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999B0]);
}

uint64_t URLResourceValues.hasHiddenExtension.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999B0], a1);
}

uint64_t (*URLResourceValues.hasHiddenExtension.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C999B0];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E0C998E8]);
}

uint64_t (*URLResourceValues.creationDate.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  URLResourceValues.creationDate.getter(a1);
  return URLResourceValues.creationDate.modify;
}

uint64_t URLResourceValues.creationDate.modify(uint64_t a1)
{
  double v1;
  char v2;
  id v3;
  id v4;
  __int128 v6;
  __int128 v7;

  v1 = *(double *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v3 = (id)*MEMORY[0x1E0C998E8];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    v6 = 0u;
    v7 = 0u;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((_QWORD *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(_QWORD *)&v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentAccessDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C998D0], a1);
}

uint64_t URLResourceValues.contentAccessDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E0C998D0]);
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1, id *a2)
{
  double v2;
  char v3;
  id v4;
  id v5;
  __int128 v7;
  __int128 v8;

  v2 = *(double *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if ((v3 & 1) != 0)
  {
    v7 = 0u;
    v8 = 0u;
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    *((_QWORD *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(_QWORD *)&v7 = v5;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

uint64_t (*URLResourceValues.contentAccessDate.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  URLResourceValues.contentAccessDate.getter(a1);
  return URLResourceValues.contentAccessDate.modify;
}

uint64_t URLResourceValues.contentAccessDate.modify(uint64_t a1)
{
  double v1;
  char v2;
  id v3;
  id v4;
  __int128 v6;
  __int128 v7;

  v1 = *(double *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v3 = (id)*MEMORY[0x1E0C998D0];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    v6 = 0u;
    v7 = 0u;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((_QWORD *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(_QWORD *)&v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentModificationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E0C998D8]);
}

uint64_t (*URLResourceValues.contentModificationDate.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  URLResourceValues.contentModificationDate.getter(a1);
  return URLResourceValues.contentModificationDate.modify;
}

uint64_t URLResourceValues.contentModificationDate.modify(uint64_t a1)
{
  double v1;
  char v2;
  id v3;
  id v4;
  __int128 v6;
  __int128 v7;

  v1 = *(double *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v3 = (id)*MEMORY[0x1E0C998D8];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    v6 = 0u;
    v7 = 0u;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((_QWORD *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(_QWORD *)&v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.attributeModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C998C0], a1);
}

id URLResourceValues.linkCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99A60]);
}

uint64_t URLResourceValues.localizedTypeDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99A78]);
}

id URLResourceValues.labelNumber.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99A58]);
}

uint64_t key path getter for URLResourceValues.labelNumber : URLResourceValues@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  char v4;
  uint64_t result;

  v2 = (void *)*MEMORY[0x1E0C99A58];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = URLResourceValues._get(_:)(v2);
  LOBYTE(v2) = v4;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t URLResourceValues.labelNumber.setter(uint64_t a1, char a2)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A58], a1, a2 & 1);
}

uint64_t (*URLResourceValues.labelNumber.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = (void *)*MEMORY[0x1E0C99A58];
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)a1 = URLResourceValues._get(_:)(v3);
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return URLResourceValues.labelNumber.modify;
}

uint64_t URLResourceValues.labelNumber.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 24), *(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t URLResourceValues.localizedLabel.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99A68]);
}

uint64_t URLResourceValues.fileResourceIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E0C99948]);
}

uint64_t URLResourceValues.volumeIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E0C99BC8]);
}

uint64_t URLResourceValues.fileIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E0C99910]);
}

uint64_t URLResourceValues.fileContentIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E0C99908]);
}

id URLResourceValues.preferredIOBlockSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99AB0]);
}

uint64_t URLResourceValues.isReadable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A10]);
}

uint64_t URLResourceValues.isWritable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A50]);
}

uint64_t URLResourceValues.isExecutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999E8]);
}

uint64_t URLResourceValues.fileSecurity.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E0C99990], &lazy cache variable for type metadata for NSFileSecurity);
}

uint64_t key path getter for URLResourceValues.fileSecurity : URLResourceValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = (void *)*MEMORY[0x1E0C99990];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized URLResourceValues._get<A>(_:)(v4, v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void URLResourceValues.fileSecurity.setter(void *a1)
{
  specialized URLResourceValues.fileSecurity.setter(a1);

}

void (*URLResourceValues.fileSecurity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[6] = v1;
  v5 = *v1;
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = (id)*MEMORY[0x1E0C99990];
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, v4);
    }
    else
    {
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }

  }
  else
  {
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
  v9 = swift_dynamicCast();
  v10 = *(_QWORD *)(v4 + 40);
  if (!v9)
    v10 = 0;
  *(_QWORD *)(v4 + 32) = v10;
  return URLResourceValues.fileSecurity.modify;
}

void URLResourceValues.fileSecurity.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void **v4;
  id v5;

  v2 = *(void **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 32);
  v3 = *v4;
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    specialized URLResourceValues.fileSecurity.setter(v3);

    v3 = *v4;
  }
  else
  {
    specialized URLResourceValues.fileSecurity.setter(*(void **)(*(_QWORD *)a1 + 32));
  }

  free(v2);
}

uint64_t URLResourceValues.isExcludedFromBackup.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999D8]);
}

uint64_t (*URLResourceValues.isExcludedFromBackup.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C999D8];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.path.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99AA8]);
}

uint64_t URLResourceValues.canonicalPath.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C998C8]);
}

uint64_t URLResourceValues.isMountTrigger.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999F8]);
}

id URLResourceValues.documentIdentifier.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C998F8]);
}

uint64_t URLResourceValues.addedToDirectoryDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C998B0], a1);
}

uint64_t URLResourceValues.mayHaveExtendedAttributes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A80]);
}

uint64_t URLResourceValues.isPurgeable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A08]);
}

uint64_t URLResourceValues.isSparse.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A20]);
}

uint64_t URLResourceValues.mayShareFileContent.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A88]);
}

uint64_t URLResourceValues.fileResourceType.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E0C99968], type metadata accessor for NSURLFileResourceType);
}

uint64_t URLResourceValues.fileProtection.getter(id *a1, void (*a2)(_QWORD))
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *a1;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  a2(0);
  if (swift_dynamicCast())
    return v11;
  else
    return 0;
}

id URLResourceValues.directoryEntryCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C998F0]);
}

uint64_t URLResourceValues.volumeLocalizedFormatDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99C20]);
}

id URLResourceValues.volumeTotalCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99CF0]);
}

id URLResourceValues.volumeAvailableCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99BB8]);
}

uint64_t URLResourceValues.volumeAvailableCapacityForImportantUsage.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E0C99BA8]);
}

id URLResourceValues.volumeResourceCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99C48]);
}

uint64_t URLResourceValues.volumeSupportsPersistentIDs.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CB0]);
}

uint64_t URLResourceValues.volumeSupportsSymbolicLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CD8]);
}

uint64_t URLResourceValues.volumeSupportsHardLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C98]);
}

uint64_t URLResourceValues.volumeSupportsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CA8]);
}

uint64_t URLResourceValues.volumeIsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BF8]);
}

uint64_t URLResourceValues.volumeSupportsSparseFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CC8]);
}

uint64_t URLResourceValues.volumeSupportsZeroRuns.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CE8]);
}

uint64_t URLResourceValues.volumeSupportsRootDirectoryDates.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CC0]);
}

uint64_t URLResourceValues.volumeSupportsVolumeSizes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CE0]);
}

uint64_t URLResourceValues.volumeSupportsRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CB8]);
}

uint64_t URLResourceValues.volumeSupportsAdvisoryFileLocking.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C60]);
}

uint64_t URLResourceValues.volumeSupportsExtendedSecurity.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C88]);
}

uint64_t URLResourceValues.volumeIsBrowsable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BD8]);
}

id URLResourceValues.volumeMaximumFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99C30]);
}

uint64_t URLResourceValues.volumeIsEjectable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BE0]);
}

uint64_t URLResourceValues.volumeIsRemovable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C10]);
}

uint64_t URLResourceValues.volumeIsInternal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BF0]);
}

uint64_t URLResourceValues.volumeIsAutomounted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BD0]);
}

uint64_t URLResourceValues.volumeIsLocal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C00]);
}

uint64_t URLResourceValues.volumeIsReadOnly.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C08]);
}

uint64_t URLResourceValues.volumeCreationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C99BC0], a1);
}

uint64_t URLResourceValues.volumeURLForRemounting.getter@<X0>(_QWORD *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E0C99D00], a1);
}

uint64_t URLResourceValues.volumeUUIDString.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99D10]);
}

uint64_t URLResourceValues.volumeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99C40]);
}

uint64_t key path getter for URLResourceValues.name : URLResourceValues@<X0>(uint64_t *a1@<X0>, void **a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized URLResourceValues._get<A>(_:)(v5, v4);
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t key path setter for URLResourceValues.name : URLResourceValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized URLResourceValues.name.setter(v6, v7, a5);
  return swift_bridgeObjectRelease();
}

uint64_t URLResourceValues.volumeName.setter(uint64_t a1, uint64_t a2)
{
  specialized URLResourceValues.name.setter(a1, a2, MEMORY[0x1E0C99C40]);
  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.volumeName.modify(_QWORD *a1))()
{
  uint64_t *v1;
  uint64_t *v2;
  _OWORD *v4;
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char v11;
  int v12;
  __int128 v13;

  v2 = v1;
  v4 = malloc(0x50uLL);
  v5 = v4;
  *a1 = v4;
  v6 = v4 + 3;
  v7 = *v2;
  v8 = (void *)*MEMORY[0x1E0C99C40];
  *((_QWORD *)v4 + 8) = v2;
  *((_QWORD *)v4 + 9) = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v9 = v8;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }
    else
    {
      *v5 = 0u;
      v5[1] = 0u;
    }

  }
  else
  {
    *v4 = 0u;
    v4[1] = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12 = swift_dynamicCast();
  v13 = 0uLL;
  if (v12)
    v13 = *v6;
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

void URLResourceValues.name.modify(id **a1, char a2)
{
  id *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *a1;
  v3 = (*a1)[5];
  v4 = (*a1)[9];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      v5 = String._bridgeToObjectiveCImpl()();
      *((_QWORD *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(_QWORD *)&v7 = v5;
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      v6 = String._bridgeToObjectiveCImpl()();
      *((_QWORD *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(_QWORD *)&v7 = v6;
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t URLResourceValues.volumeLocalizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99C28]);
}

uint64_t URLResourceValues.volumeIsEncrypted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99BE8]);
}

uint64_t URLResourceValues.volumeIsRootFileSystem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C18]);
}

uint64_t URLResourceValues.volumeSupportsCompression.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C78]);
}

uint64_t URLResourceValues.volumeSupportsFileCloning.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C90]);
}

uint64_t URLResourceValues.volumeSupportsSwapRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CD0]);
}

uint64_t URLResourceValues.volumeSupportsExclusiveRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C80]);
}

uint64_t URLResourceValues.volumeSupportsImmutableFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99CA0]);
}

uint64_t URLResourceValues.volumeSupportsAccessPermissions.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99C58]);
}

uint64_t URLResourceValues.volumeTypeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99CF8]);
}

id URLResourceValues.volumeSubtype.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99C50]);
}

uint64_t URLResourceValues.volumeMountFromLocation.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99C38]);
}

uint64_t URLResourceValues.isUbiquitousItem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99A38]);
}

uint64_t URLResourceValues.ubiquitousItemHasUnresolvedConflicts.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B10]);
}

uint64_t URLResourceValues.ubiquitousItemIsDownloading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B20]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploaded.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B38]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B40]);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingStatus.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E0C99B00], type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingError.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E0C99AE8], (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.fileSecurity.getter(id *a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *a1;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, a2);
  if (swift_dynamicCast())
    return v11;
  else
    return 0;
}

uint64_t URLResourceValues.ubiquitousItemUploadingError.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E0C99B48], (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.ubiquitousItemDownloadRequested.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99AE0]);
}

uint64_t URLResourceValues.ubiquitousItemContainerDisplayName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99AD8]);
}

uint64_t URLResourceValues.localizedName.getter(id *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }

  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B28]);
}

uint64_t key path getter for URLResourceValues.isPackage : URLResourceValues@<X0>(void **a1@<X3>, _BYTE *a2@<X8>)
{
  void *v3;
  char v4;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = URLResourceValues._get(_:)(v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99B28], a1);
}

uint64_t (*URLResourceValues.ubiquitousItemIsExcludedFromSync.modify(uint64_t a1))()
{
  uint64_t v1;
  void *v3;

  v3 = (void *)*MEMORY[0x1E0C99B28];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isPackage.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t URLResourceValues.ubiquitousItemIsShared.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C99B30]);
}

uint64_t URLResourceValues.ubiquitousSharedItemCurrentUserRole.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E0C99B58], type metadata accessor for NSURLUbiquitousSharedItemRole);
}

uint64_t URLResourceValues.ubiquitousSharedItemCurrentUserPermissions.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E0C99B50], type metadata accessor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter@<X0>(_QWORD *a1@<X8>)
{
  return URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter(MEMORY[0x1E0C99B68], a1);
}

uint64_t URLResourceValues.ubiquitousSharedItemMostRecentEditorNameComponents.getter@<X0>(_QWORD *a1@<X8>)
{
  return URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter(MEMORY[0x1E0C99B60], a1);
}

uint64_t URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *a1;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    *a2 = 0;
  return result;
}

uint64_t URLResourceValues.fileProtection.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E0C99938], type metadata accessor for NSURLFileProtectionType);
}

id URLResourceValues.fileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99900]);
}

id URLResourceValues.totalFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99AC8]);
}

id URLResourceValues.totalFileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99AC0]);
}

uint64_t URLResourceValues.isAliasFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999B8]);
}

void URL.init(string:encodingInvalidCharacters:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  if (!_foundation_swift_url_feature_enabled())
  {
    v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initWithString_encodingInvalidCharacters_, String._bridgeToObjectiveCImpl()(), a3 & 1);
      swift_unknownObjectRelease();
      if (v13)
      {
        v11 = (uint64_t)static URL._converted(from:)(v13);

        v9 = 0;
        goto LABEL_9;
      }
    }
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_11;
  }
  v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3 & 1);
  if (!v8)
    goto LABEL_10;
  v9 = v8;
  v10 = swift_retain();
  v11 = specialized static URL._cfURL(from:baseURL:)(v10);
  swift_release();
LABEL_9:
  *a4 = v11;
  a4[1] = v9;
LABEL_11:
  a4[2] = 0;
}

void URL.init(fileURLWithPath:isDirectory:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD v17[3];
  BOOL v18;
  _QWORD *v19;
  __int128 v20;

  v9 = *(void **)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v18 = (a3 & 1) == 0;
    v17[0] = v9;
    v17[1] = v10;
    v17[2] = v11;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v9);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v18, (uint64_t)v17, (uint64_t *)&v19);
    v12 = v19;
    v13 = v20;
  }
  else
  {
    v14 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v14 = a1 & 0xFFFFFFFFFFFFLL;
    if (v14)
      swift_bridgeObjectRetain();
    v15 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v9);
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_release();
      swift_release();
    }
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initFileURLWithPath_isDirectory_relativeToURL_, v15, a3 & 1, v9);
    swift_unknownObjectRelease();

    v12 = static URL._converted(from:)(v16);
    v13 = 0uLL;
  }
  *(_QWORD *)a5 = v12;
  *(_OWORD *)(a5 + 8) = v13;
}

void URL.init(fileURLWithPath:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD v15[3];
  unsigned __int8 v16;
  _QWORD *v17;
  __int128 v18;

  v7 = *(void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v16 = 2;
    v15[0] = v7;
    v15[1] = v8;
    v15[2] = v9;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v16, (uint64_t)v15, (uint64_t *)&v17);
    v10 = v17;
    v11 = v18;
  }
  else
  {
    v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    if (v12)
      swift_bridgeObjectRetain();
    v13 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v7);
    swift_bridgeObjectRelease();
    if (v7)
    {
      swift_release();
      swift_release();
    }
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initFileURLWithPath_relativeToURL_, v13, v7);
    swift_unknownObjectRelease();

    v10 = static URL._converted(from:)(v14);
    v11 = 0uLL;
  }
  *(_QWORD *)a4 = v10;
  *(_OWORD *)(a4 + 8) = v11;
}

void URL.init(dataRepresentation:relativeTo:isAbsolute:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  _QWORD *v24;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v11 = *(void **)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  v26 = 0;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v14 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(a1, a2, a3, &v30, (uint64_t)&v26);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    v24 = a6;
    v16 = static URL._converted(from:)(v15);

    *a5 = v26;
    v17 = v16;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      v18 = objc_msgSend(v17, sel_relativeString);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v22 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v19, v21, 1);
      swift_bridgeObjectRelease();
      if (!v22)
      {

        *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        return;
      }
      if ((*(_BYTE *)(v22 + 48) & 1) != 0)
      {
        if (v11)
        {
          v27 = v11;
          v28 = v12;
          v29 = v13;
          URL.absoluteURL.getter(&v30);
          v23 = v31;

          swift_release();
LABEL_11:
          *v24 = v17;
          v24[1] = v22;
          v24[2] = v23;
          swift_retain();
          swift_release();

          return;
        }
      }
      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }
      v23 = 0;
      goto LABEL_11;
    }
    v23 = 0;
    v22 = 0;
    goto LABEL_11;
  }
}

{
  uint64_t v6;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  Swift::Int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v11 = *(void **)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  v28 = 0;
  v32 = v11;
  v33 = v12;
  v34 = v13;
  v14 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(a1, a2, a3, &v32, (uint64_t)&v28);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    v26 = a6;
    v16 = static URL._converted(from:)(v15);

    v17 = v28;
    *a5 = v28;
    v18 = v16;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *a5 = v17;
      v19 = objc_msgSend(v18, sel_relativeString);

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v20, v22, 1);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        __break(1u);
        return;
      }
      v24 = v26;
      if ((*(_BYTE *)(v23 + 48) & 1) != 0)
      {
        if (v11)
        {
          v29 = v11;
          v30 = v12;
          v31 = v13;
          URL.absoluteURL.getter(&v32);
          v25 = v33;

          swift_release();
LABEL_10:
          *v24 = v18;
          v24[1] = v23;
          v24[2] = v25;
          return;
        }
      }
      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }
      v25 = 0;
      goto LABEL_10;
    }

    v23 = 0;
    v25 = 0;
    v24 = v26;
    goto LABEL_10;
  }
}

__n128 URL.init(resolvingAliasFileAt:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  __n128 result;
  void *v12;
  void *v13[3];
  uint64_t v14;
  __n128 v15;

  v7 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  swift_retain();
  v9 = v7;
  swift_retain();
  v10 = @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(v13, a2);
  if (!v3)
  {
    v12 = v10;
    URL.init(reference:)(v10, &v14);

    result = v15;
    *(_QWORD *)a3 = v14;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

id @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(void **a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v7[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_URLByResolvingAliasFileAtURL_options_error_, v2, a2, v7);
  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    if (v7[0])
    {
      v7[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v5 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v3;
}

void URL.init(reference:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15[2];

  v4 = (void *)static URL._converted(from:)();
  objc_msgSend(v4, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
  swift_dynamicCast();
  v5 = v14;
  if (!_foundation_swift_url_feature_enabled())
  {

    v10 = 0;
    goto LABEL_6;
  }
  v6 = objc_msgSend(v5, sel_relativeString);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v7, v9, 1);
  swift_bridgeObjectRelease();
  if (v10)
  {
    v11 = objc_msgSend(a1, sel_baseURL);
    if (v11)
    {
      v12 = v11;
      URL.init(reference:)(v15);

      v13 = v15[1];
      swift_release();
LABEL_7:
      *a2 = v5;
      a2[1] = v10;
      a2[2] = v13;
      return;
    }
LABEL_6:
    v13 = 0;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t URL.dataRepresentation.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v7 = objc_msgSend(v1, sel_dataRepresentation);
    if (!v7)
      return 0;
    v8 = v7;
    v6 = specialized Data.init(referencing:)(v8);

    return (uint64_t)v6;
  }
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v4, v5);
  }
  __break(1u);
  return result;
}

void URL.baseURL.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 48) & 1) != 0)
      {
        swift_retain_n();
      }
      else
      {
        swift_retain_n();
        String.subscript.getter();
        swift_bridgeObjectRelease();
      }
      v9 = swift_retain();
      v10 = specialized static URL._cfURL(from:baseURL:)(v9);
      swift_release_n();
      *a1 = v10;
      a1[1] = v4;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    a1[2] = 0;
  }
  else
  {
    v5 = objc_msgSend(v3, sel_baseURL);
    if (v5)
    {
      v6 = v5;
      URL.init(reference:)(v5, &v11);

      v7 = v11;
      v8 = v12;
    }
    else
    {
      v7 = 0;
      v8 = 0uLL;
    }
    *a1 = v7;
    *(_OWORD *)(a1 + 1) = v8;
  }
}

void URL.encodedHost.getter()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;

  v1 = *(_BYTE **)(v0 + 8);
  if (v1)
  {
    if ((v1[72] != 1 || v1[96] != 1 || v1[120] != 1 || (v1[144] & 1) == 0 || (v1 = *(_BYTE **)(v0 + 16)) != 0)
      && (v1[120] & 1) == 0)
    {
      v2 = String.subscript.getter();
      MEMORY[0x186DA4634](v2);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32_t (__cdecl **v22)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int32_t (__cdecl **v54)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  Swift::Int v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t v86;
  Swift::String_optional result;
  _QWORD v88[4];
  uint64_t v89;
  int32_t (__cdecl **v90)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  char v91;
  int32_t (__cdecl *v92)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int32_t (__cdecl *v98)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v99;

  v3 = *(void **)v1;
  v4 = *(_BYTE **)(v1 + 8);
  v5 = *(_BYTE **)(v1 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    v16 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
    v17 = (void *)_CFURLCopyHostName();
    if (v17)
    {
      v18 = v17;
      v8 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v9 = v19;

    }
    else
    {

LABEL_24:
      v8 = 0;
      v9 = 0;
    }
    goto LABEL_110;
  }
  v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
  v93 = (uint64_t)v4;
  v94 = (unint64_t)v5;
  URL.encodedHost.getter();
  v8 = v6;
  v9 = v7;
  if (!v7)
    goto LABEL_110;
  if (v4)
  {
    if (v4[72] == 1 && v4[96] == 1 && v4[120] == 1 && v4[144] == 1)
    {
      if (!v5)
      {
        if (percentEncoded)
          goto LABEL_12;
        goto LABEL_55;
      }
      v4 = v5;
    }
    if (percentEncoded)
    {
      if (!v4[218])
      {
LABEL_12:
        v10 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x2000000000000000) != 0)
          v11 = HIBYTE(v7) & 0xF;
        else
          v11 = v6 & 0xFFFFFFFFFFFFLL;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          v13 = 0;
          v15 = 0xE000000000000000;
          goto LABEL_64;
        }
        if ((v7 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
          goto LABEL_39;
        }
        if ((v7 & 0x2000000000000000) != 0)
        {
          v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
          v93 = v7 & 0xFFFFFFFFFFFFFFLL;
          v98 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          v99 = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v92, HIBYTE(v9) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, 0, (unsigned __int8 *)&v92, HIBYTE(v9) & 0xF, (uint64_t *)&v96);
          v13 = v96;
          v15 = v97;
          swift_release();
        }
        else
        {
          if ((v6 & 0x1000000000000000) != 0)
          {
            v12 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            v10 = v45;
          }
          v92 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          v93 = 0;
          swift_bridgeObjectRetain_n();
          v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v12, v10, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v92, 0, v12, v10);
          v15 = v14;
        }
        swift_bridgeObjectRelease();
        if (v15 == 1)
        {
LABEL_39:
          v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          v93 = v9;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol._ephemeralString.getter();
          v24 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v25 = objc_msgSend(v24, sel__fastCharacterContents);
          v26 = v24;
          if (v25)
          {
            v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
            v93 = v9;
            StringProtocol._ephemeralString.getter();
            v27 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v28 = objc_msgSend(v27, sel_length);
            v29 = swift_unknownObjectRelease();
            MEMORY[0x1E0C80A78](v29);
            LOBYTE(v90) = 0;
            MEMORY[0x1E0C80A78](v30);
            v88[2] = v25;
            v88[3] = v28;
            v13 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v31, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v88);
            v15 = v32;
            swift_bridgeObjectRelease_n();
            if (v15)
              goto LABEL_63;
            goto LABEL_110;
          }
          v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          v93 = v9;
          swift_bridgeObjectRetain();
          v39 = String.init<A>(_:)();
          v40 = v38;
          if ((v38 & 0x1000000000000000) != 0)
          {
            v39 = static String._copying(_:)();
            v47 = v46;
            swift_bridgeObjectRelease();
            v40 = v47;
            if ((v47 & 0x2000000000000000) == 0)
              goto LABEL_51;
          }
          else if ((v38 & 0x2000000000000000) == 0)
          {
LABEL_51:
            if ((v39 & 0x1000000000000000) == 0)
              goto LABEL_121;
            v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v42 = v39 & 0xFFFFFFFFFFFFLL;
            while (1)
            {
              v92 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              v93 = 0;
              v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v41, v42, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v92, 0, v41, v42);
              v15 = v43;
LABEL_62:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              if (!v15)
                goto LABEL_110;
LABEL_63:
              swift_bridgeObjectRelease();
LABEL_64:
              v9 = HIBYTE(v15) & 0xF;
              v48 = v13 & 0xFFFFFFFFFFFFLL;
              if ((v15 & 0x2000000000000000) != 0)
                v49 = HIBYTE(v15) & 0xF;
              else
                v49 = v13 & 0xFFFFFFFFFFFFLL;
              if (!v49)
                goto LABEL_81;
              if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v13, v15) & 1) == 0)
              {
                swift_bridgeObjectRetain();
                if ((v15 & 0x1000000000000000) != 0)
                  goto LABEL_92;
                if ((v15 & 0x2000000000000000) != 0)
                {
                  v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                  v93 = v15 & 0xFFFFFFFFFFFFFFLL;
                  v54 = &v92;
                  v55 = HIBYTE(v15) & 0xF;
                }
                else
                {
                  if ((v13 & 0x1000000000000000) == 0)
                    goto LABEL_117;
                  v54 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_86:
                  v55 = v48;
                }
                v56 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v54, v55, 4, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
                v8 = v56;
                v9 = v57;
                if (!v57)
                {
LABEL_92:
                  swift_bridgeObjectRetain();
                  v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v13, v15, 4u);
                  v9 = v58;
                }
                swift_bridgeObjectRelease_n();
                goto LABEL_110;
              }
              v6 = specialized Collection.first.getter(v13, v15);
              if ((v6 & 0x100) != 0)
                goto LABEL_123;
              if (v6 != 91)
              {
                __break(1u);
                goto LABEL_92;
              }
              if ((v15 & 0x1000000000000000) != 0)
              {
                v6 = String.UTF8View._foreignCount()();
                v7 = v6 - 1;
                if (__OFSUB__(v6, 1))
                  goto LABEL_124;
                v51 = (v13 >> 59) & 1;
                v50 = MEMORY[0x186DA485C](15, v7, v13, v15);
              }
              else
              {
                v50 = (v49 << 16) - 65532;
                LOBYTE(v51) = 1;
              }
              if ((v50 & 0xC) == 4 << v51)
                v50 = _StringGuts._slowEnsureMatchingEncoding(_:)(v50, v13, v15);
              v8 = v50 >> 16;
              if (v50 >> 16 >= v49)
              {
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                v54 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))_StringObject.sharedUTF8.getter();
                v48 = v86;
                goto LABEL_86;
              }
              if ((v15 & 0x1000000000000000) != 0)
              {
                v53 = String.UTF8View._foreignSubscript(position:)();
              }
              else
              {
                if ((v15 & 0x2000000000000000) == 0)
                {
                  if ((v13 & 0x1000000000000000) != 0)
                  {
                    v52 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
                    goto LABEL_80;
                  }
                  goto LABEL_119;
                }
                v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                v93 = v15 & 0xFFFFFFFFFFFFFFLL;
                v53 = *((_BYTE *)&v92 + v8);
              }
              while (1)
              {
                if (v53 != 93)
                  goto LABEL_116;
                v59 = specialized Collection<>.firstIndex(of:)(0x25u, v13, v15);
                if ((v60 & 1) != 0)
                {
                  swift_bridgeObjectRetain();
                  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v13, v15) & 1) == 0)
                  {
                    swift_bridgeObjectRelease_n();
                    goto LABEL_24;
                  }
                  v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                  v93 = v15;
                  v8 = String.init<A>(_:)();
                  v9 = v61;
                  goto LABEL_109;
                }
                v8 = v59;
                if ((v15 & 0x1000000000000000) == 0)
                {
                  v9 = (v49 << 16) - 65532;
                  goto LABEL_103;
                }
                v62 = String.UTF8View._foreignCount()();
                if (__OFSUB__(v62, 1))
                  break;
                v9 = MEMORY[0x186DA485C](15, v62 - 1, v13, v15);
LABEL_103:
                if (v9 >> 14 >= v8 >> 14)
                {
                  swift_bridgeObjectRetain_n();
                  v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                  v65 = v64;
                  v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v63;
                  v93 = v66;
                  v94 = v67;
                  v95 = v64;
                  MEMORY[0x1E0C80A78](v63);
                  v90 = &v92;
                  v91 = 8;
                  v71 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)&v89, v69, v70, v68, v65);
                  if (v72)
                  {
                    v73 = (uint64_t)v71;
                    v74 = v72;
                  }
                  else
                  {
                    v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
                    v76 = v93;
                    v77 = v94;
                    v78 = v95;
                    swift_bridgeObjectRetain();
                    v73 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v75, v76, v77, v78, 8u);
                    v74 = v79;
                    swift_bridgeObjectRelease();
                  }
                  v80 = String.subscript.getter();
                  v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186DA4634](v80);
                  v83 = v82;
                  swift_bridgeObjectRelease();
                  v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v81;
                  v93 = v83;
                  v84._countAndFlagsBits = v73;
                  v84._object = v74;
                  String.append(_:)(v84);
                  swift_bridgeObjectRelease();
                  v85._countAndFlagsBits = 93;
                  v85._object = (void *)0xE100000000000000;
                  String.append(_:)(v85);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  v8 = (unint64_t)v92;
                  v9 = v93;
LABEL_109:
                  swift_bridgeObjectRelease();
                  goto LABEL_110;
                }
                __break(1u);
LABEL_119:
                v52 = _StringObject.sharedUTF8.getter();
LABEL_80:
                v53 = *(_BYTE *)(v52 + v8);
              }
              __break(1u);
LABEL_121:
              v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            }
          }
          v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v39;
          v93 = v40 & 0xFFFFFFFFFFFFFFLL;
          v98 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          v99 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v92, HIBYTE(v40) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, 0, (unsigned __int8 *)&v92, HIBYTE(v40) & 0xF, (uint64_t *)&v96);
          v13 = v96;
          v15 = v97;
          swift_release();
          goto LABEL_62;
        }
        swift_bridgeObjectRelease_n();
        if (v15)
          goto LABEL_63;
LABEL_110:
        v6 = v8;
        v7 = v9;
        goto LABEL_125;
      }
    }
    else if (v4[218])
    {
      v20 = v6 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000) != 0)
        v21 = HIBYTE(v9) & 0xF;
      else
        v21 = v6 & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        if ((v9 & 0x1000000000000000) != 0)
        {
          v33 = 0;
          v35 = 1;
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
            v93 = v9 & 0xFFFFFFFFFFFFFFLL;
            v23 = MEMORY[0x1E0DEE9E8];
            v22 = &v92;
            v20 = HIBYTE(v9) & 0xF;
          }
          else
          {
            if ((v6 & 0x1000000000000000) != 0)
              v22 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            else
              v22 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))_StringObject.sharedUTF8.getter();
            v23 = MEMORY[0x1E0DEE9E8];
          }
          v33 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v22, v20, v23, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
          v35 = v34;
        }
        if (v35 == 1)
        {
          swift_bridgeObjectRetain();
          v8 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v8, v9, MEMORY[0x1E0DEE9E8]);
          v37 = v36;
          swift_bridgeObjectRelease_n();
          v9 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          v8 = v33;
          v9 = v35;
        }
      }
      else
      {
LABEL_81:
        swift_bridgeObjectRelease();
        v8 = 0;
        v9 = 0xE000000000000000;
      }
      goto LABEL_110;
    }
LABEL_55:
    v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
    v93 = v7;
    v8 = String.init<A>(_:)();
    v9 = v44;
    goto LABEL_110;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  result.value._object = (void *)v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.user(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String_optional result;
  _QWORD v32[6];
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v3 = *(void **)v1;
  v4 = *(_BYTE **)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v4[72] != 1
      || v4[96] == 1
      && v4[120] == 1
      && (v4[144] == 1 ? (v8 = v5 == 0) : (v8 = 1), !v8 && (*(_BYTE *)(v5 + 72) & 1) == 0))
    {
      v9 = String.subscript.getter();
      v13 = v9;
      v14 = v10;
      v15 = v11;
      v16 = v12;
      if (percentEncoded)
      {
        v17 = (id)MEMORY[0x186DA4634](v9, v10, v11, v12);
        v19 = v18;
        swift_bridgeObjectRelease();
      }
      else if ((v9 ^ v10) >> 14)
      {
        v33 = v9;
        v34 = v10;
        v35 = v11;
        v36 = v12;
        MEMORY[0x1E0C80A78](v9);
        v32[2] = &v33;
        v32[3] = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v32, v13, v14, v15, v16);
        if (v25 == 1)
        {
          v26 = v33;
          v27 = v34;
          v28 = v35;
          v29 = v36;
          swift_bridgeObjectRetain();
          v17 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, v28, v29, MEMORY[0x1E0DEE9E8]);
          v19 = v30;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          v17 = v24;
          v19 = v25;
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v17 = 0;
        v19 = 0xE000000000000000;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v20 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
  v21 = (void *)_CFURLCopyUserName();
  if (!v21)
  {

LABEL_16:
    v17 = 0;
    v19 = 0;
    goto LABEL_17;
  }
  v22 = v21;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v19 = v23;

LABEL_17:
  v6 = (uint64_t)v17;
  v7 = (void *)v19;
LABEL_24:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.password(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  void *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String_optional result;
  _QWORD v33[6];
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v3 = *(void **)v1;
  v4 = *(_BYTE **)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_25;
    }
    v8 = v4[96];
    if (v4[72] == 1)
    {
      if (!v4[96])
        goto LABEL_12;
      if (v4[120] != 1)
        goto LABEL_17;
      if (v4[144] != 1 || v5 == 0)
        goto LABEL_17;
      v8 = *(_BYTE *)(v5 + 96);
    }
    if ((v8 & 1) == 0)
    {
LABEL_12:
      v10 = String.subscript.getter();
      v14 = v10;
      v15 = v11;
      v16 = v12;
      v17 = v13;
      if (percentEncoded)
      {
        v18 = (id)MEMORY[0x186DA4634](v10, v11, v12, v13);
        v20 = v19;
        swift_bridgeObjectRelease();
      }
      else if ((v10 ^ v11) >> 14)
      {
        v34 = v10;
        v35 = v11;
        v36 = v12;
        v37 = v13;
        MEMORY[0x1E0C80A78](v10);
        v33[2] = &v34;
        v33[3] = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v33, v14, v15, v16, v17);
        if (v26 == 1)
        {
          v27 = v34;
          v28 = v35;
          v29 = v36;
          v30 = v37;
          swift_bridgeObjectRetain();
          v18 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v27, v28, v29, v30, MEMORY[0x1E0DEE9E8]);
          v20 = v31;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = v25;
          v20 = v26;
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v18 = 0;
        v20 = 0xE000000000000000;
      }
      goto LABEL_18;
    }
LABEL_17:
    v18 = 0;
    v20 = 0;
    goto LABEL_18;
  }
  v21 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
  v22 = (void *)_CFURLCopyPassword();
  if (!v22)
  {

    goto LABEL_17;
  }
  v23 = v22;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v20 = v24;

LABEL_18:
  v6 = (uint64_t)v18;
  v7 = (void *)v20;
LABEL_25:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.query(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *String;
  void *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String_optional result;
  _QWORD v37[6];
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (*(_BYTE *)(v4 + 192) != 1)
      goto LABEL_18;
    if ((*(_BYTE *)(v4 + 168) & 1) != 0)
      v8 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v8 = String.subscript.getter();
    v15 = MEMORY[0x186DA4634](v8);
    v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = v15 & 0xFFFFFFFFFFFFLL;
    v19 = v18 || v5 == 0;
    if (!v19 && (*(_BYTE *)(v5 + 192) & 1) == 0)
    {
LABEL_18:
      v20 = String.subscript.getter();
      v24 = v20;
      v25 = v21;
      v26 = v22;
      v27 = v23;
      if (percentEncoded)
      {
        v12 = (id)MEMORY[0x186DA4634](v20, v21, v22, v23);
        v14 = v28;
        swift_bridgeObjectRelease();
      }
      else if ((v20 ^ v21) >> 14)
      {
        v38 = v20;
        v39 = v21;
        v40 = v22;
        v41 = v23;
        MEMORY[0x1E0C80A78](v20);
        v37[2] = &v38;
        v37[3] = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v37, v24, v25, v26, v27);
        if (v30 == 1)
        {
          v31 = v38;
          v32 = v39;
          v33 = v40;
          v34 = v41;
          swift_bridgeObjectRetain();
          v12 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v31, v32, v33, v34, MEMORY[0x1E0DEE9E8]);
          v14 = v35;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          v12 = v29;
          v14 = v30;
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v12 = 0;
        v14 = 0xE000000000000000;
      }
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  v9 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
  String = (void *)_CFURLCopyQueryString();
  if (!String)
  {

LABEL_17:
    v12 = 0;
    v14 = 0;
    goto LABEL_25;
  }
  v11 = String;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(String);
  v14 = v13;

LABEL_25:
  v6 = (uint64_t)v12;
  v7 = (void *)v14;
LABEL_27:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.fragment(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String_optional result;
  _QWORD v29[6];
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  if (!_foundation_swift_url_feature_enabled())
  {
    v12 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
    v13 = (void *)_CFURLCopyFragment();
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      goto LABEL_16;
    }

LABEL_9:
    v15 = 0;
    v17 = 0;
    goto LABEL_16;
  }
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x181E7F7BCLL);
  }
  if ((*(_BYTE *)(v4 + 216) & 1) != 0)
    goto LABEL_9;
  v5 = String.subscript.getter();
  v9 = v8;
  if (percentEncoded)
  {
    v10 = (_QWORD *)MEMORY[0x186DA4634](v5, v6, v7, v8);
    goto LABEL_14;
  }
  if ((v5 ^ v6) >> 14)
  {
    v30 = v5;
    v31 = v6;
    v32 = v7;
    v33 = v8;
    MEMORY[0x1E0C80A78](v5);
    v29[2] = &v30;
    v29[3] = MEMORY[0x1E0DEE9E8];
    v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v29, v20, v19, v18, v9);
    if (v11 == 1)
    {
      v21 = v30;
      v22 = v31;
      v23 = v32;
      v24 = v33;
      swift_bridgeObjectRetain();
      v15 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v21, v22, v23, v24, MEMORY[0x1E0DEE9E8]);
      v17 = v25;
      swift_bridgeObjectRelease();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
LABEL_14:
    v15 = v10;
    v17 = v11;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v15 = 0;
  v17 = 0xE000000000000000;
LABEL_16:
  v26 = (uint64_t)v15;
  v27 = (void *)v17;
  result.value._object = v27;
  result.value._countAndFlagsBits = v26;
  return result;
}

Swift::Void __swiftcall URL.deleteLastPathComponent()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingLastPathComponent());
}

Swift::Void __swiftcall URL.deletePathExtension()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingPathExtension());
}

Swift::Void __swiftcall URL.standardize()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(void **)v0;
  URL.standardized.getter((uint64_t)&v2);

  swift_release();
  swift_release();
  *(_QWORD *)v0 = v2;
  *(_OWORD *)(v0 + 8) = v3;
}

Swift::Void __swiftcall URL.resolveSymlinksInPath()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.resolvingSymlinksInPath());
}

double URL.deleteLastPathComponent()(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  void *v2;
  double result;
  uint64_t v4;
  __int128 v5;

  v2 = *(void **)v1;
  a1(&v4);

  swift_release();
  swift_release();
  *(_QWORD *)v1 = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkPromisedItemIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkPromisedItemIsReachableAndReturnError_) & 1;
}

uint64_t URL.setTemporaryResourceValue(_:forKey:)(_QWORD *a1, uint64_t a2)
{
  void **v2;
  void *v4;

  v4 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  objc_msgSend(v4, sel_setTemporaryResourceValue_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), a2);
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall URL.removeAllCachedResourceValues()()
{
  id *v0;

  objc_msgSend(*v0, sel_removeAllCachedResourceValues);
}

uint64_t URL.promisedItemResourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_promisedItemResourceValuesForKeys_error_, a2);
}

id URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)(uint64_t a1, void *a2, id *a3)
{
  void **v3;
  void *v4;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v14[2];

  v4 = a2;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = *v3;
  if (a2)
  {
    v8 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for NSURLResourceKey(0);
    v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  if (v6)
    v6 = v6;
  v14[0] = 0;
  v9 = objc_msgSend(v7, sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_, a1, v4, v6, v14);

  if (v9)
  {
    v10 = v14[0];
    v11 = v9;
    v9 = specialized Data.init(referencing:)(v11);

  }
  else
  {
    if (v14[0])
    {
      v14[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v12 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v9;
}

void static URL.resourceValues(forKeys:fromBookmarkData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

void sub_181E7FBDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v8, BYTE6(v4));
  v6 = objc_msgSend((id)objc_opt_self(), sel_resourceValuesForKeys_fromBookmarkData_, v2, v5);
  swift_unknownObjectRelease();

  if (v6)
  {
    v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6);

    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0;
    v1 = 0;
  }
  *v0 = v7;
  v0[1] = v1;
}

void static URL.writeBookmarkData(_:to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_181E7FE0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  unsigned int v5;
  id v7;
  id v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v1;
  v9 = v2;
  v10 = BYTE2(v2);
  v11 = BYTE3(v2);
  v12 = BYTE4(v2);
  v13 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v8, BYTE6(v2));
  v4 = (void *)objc_opt_self();
  v8 = 0;
  v5 = objc_msgSend(v4, sel_writeBookmarkData_toURL_options_error_, v3, v0, 0, &v8);

  if (v5)
    return v8;
  if (v8)
  {
    v8;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v7 = (id)_nilObjCError;
  }
  return (id)swift_willThrow();
}

id static URL.bookmarkData(withContentsOf:)(id *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *a1;
  v8[0] = 0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_bookmarkDataWithContentsOfURL_error_, v1, v8);
  if (v2)
  {
    v3 = v2;
    v4 = v8[0];
    v5 = v3;
    v1 = specialized Data.init(referencing:)(v5);

  }
  else
  {
    if (v8[0])
    {
      v8[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v6 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v1;
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
  id *v0;

  objc_msgSend(*v0, sel_stopAccessingSecurityScopedResource);
}

void URL.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(id *)v0;
  NSObject.hash(into:)();

  if (_foundation_swift_url_feature_enabled())
  {
    if (v1)
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t URL.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t result;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  v4 = v1;
  NSObject.hash(into:)();

  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
    return Hasher._finalize()();
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  __break(1u);
  return result;
}

void static URL.currentDirectoryOrNil()(_QWORD *a1@<X8>)
{
  int v1;
  unint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t, uint64_t, uint64_t);
  _OWORD *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t (**v64)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  void *v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  __int16 v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (**v106)(uint64_t, uint64_t, uint64_t);
  _OWORD *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  id v118;
  id v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Swift::String v151;
  Swift::String v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t (**v158)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v159;
  uint64_t v160;
  void *v161;
  id v162;
  void *v163;
  id v164;
  Swift::Int v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char v172;
  _BYTE *v173;
  _BYTE v174[16];
  id v175;
  id v176;
  _BYTE v177[16];
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  _QWORD v186[3];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _OWORD v195[2];
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  _BYTE v201[40];
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  __int128 v205;
  _OWORD v206[3];
  char v207;
  char v208;
  char v209;
  unsigned __int8 v210;
  unsigned __int8 v211;
  __int16 v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  char v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int16 v227;

  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v5 = objc_msgSend(v4, sel_currentDirectoryPath);

  v6 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if ((specialized Collection.first.getter(v6, v8) & 0x1FF) != 0x2F
    && (specialized Collection.first.getter(v6, v8) & 0x1FF) != 0x7E)
  {
    swift_bridgeObjectRelease();
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v9 = _foundation_swift_url_feature_enabled();
  v10 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v8) & 0xF;
  else
    v11 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    if (!v11)
      swift_bridgeObjectRelease();
    v35 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
    v36 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v35, sel_initFileURLWithPath_isDirectory_relativeToURL_, v36, 1, 0);
    swift_unknownObjectRelease();
    v38 = static URL._converted(from:)(v37);

    v39 = 0;
    v40 = 0;
    goto LABEL_82;
  }
  if (!v11)
  {
    v41 = swift_bridgeObjectRelease();
    static URL.currentDirectoryOrNil()(&v216, v41);
    v42 = (void *)v216;
    v43 = v217;
    v199 = v216;
    *(_QWORD *)&v200 = v217;
    outlined copy of URL?(v216);
    URL.init(string:relativeTo:)(0, 0xE000000000000000, (id *)&v199, (uint64_t *)&v216);
    outlined consume of URL?(v42);
    v38 = (_QWORD *)v216;
    if ((_QWORD)v216)
    {
      v39 = *((_QWORD *)&v216 + 1);
      v40 = v217;
      outlined consume of URL?(v42);
LABEL_82:
      *a1 = v38;
      a1[1] = v39;
      a1[2] = v40;
      return;
    }
    __break(1u);
    goto LABEL_196;
  }
  v214 = v6;
  v215 = v8;
  if ((specialized Collection.first.getter(v6, v8) & 0x1FF) != 0x2F)
  {
    v12 = specialized Collection.first.getter(v6, v8);
    if ((v12 & 0x1FF) != 0x7E)
    {
      static URL.currentDirectoryOrNil()(&v216, v12);
      v1 = 0;
      v14 = *((_QWORD *)&v216 + 1);
      v13 = (void *)v216;
      v15 = v217;
      v17 = *((_QWORD *)&v216 + 1);
      v16 = (void *)v216;
      v18 = v217;
      if ((v8 & 0x2000000000000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v1 = 1;
  if ((v8 & 0x2000000000000000) != 0)
  {
LABEL_11:
    v10 = HIBYTE(v8) & 0xF;
    v16 = v13;
    v17 = v14;
    v18 = v15;
  }
LABEL_12:
  if (v10 && (specialized BidirectionalCollection.last.getter(v6, v8) & 0x1FF) != 0x2F)
  {
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
  }
  v213 = 1;
  v212 = 0;
  v211 = 0;
  v210 = 0;
  v209 = 0;
  v208 = 0;
  v207 = 1;
  v183 = v17;
  v184 = v16;
  v182 = v18;
  if (!v1)
  {
    v185 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
LABEL_71:
    v78 = v214;
    v79 = v215;
    v80 = HIBYTE(v215) & 0xF;
    if ((v215 & 0x2000000000000000) == 0)
      v80 = v214 & 0xFFFFFFFFFFFFLL;
    if (v80)
    {
      swift_bridgeObjectRetain();
      v81 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v78, v79);
      v83 = v82;
      swift_bridgeObjectRelease();
    }
    else
    {
      v81 = 0;
      v83 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    if ((v1 & 1) != 0)
    {
      *(_QWORD *)&v199 = 0;
      BYTE8(v199) = 0;
      BYTE9(v199) = HIBYTE(v212);
      BYTE10(v199) = v212;
      *(_WORD *)((char *)&v199 + 11) = v211;
      *(_WORD *)((char *)&v199 + 13) = v210;
      HIBYTE(v199) = v209;
      LOBYTE(v200) = v208;
      *((_QWORD *)&v200 + 1) = v185;
      *(_QWORD *)v201 = v44;
      memset(&v201[8], 0, 32);
      v202 = 0;
      v203 = v45;
      v204 = 0;
      LOBYTE(v205) = v207;
      *((_QWORD *)&v205 + 1) = v81;
      *(_QWORD *)&v206[0] = v83;
      *(_OWORD *)((char *)v206 + 8) = 0u;
      *(_OWORD *)((char *)&v206[1] + 8) = 0u;
      WORD4(v206[2]) = v46 & 1;
      v193 = v205;
      v194 = v206[0];
      v195[0] = v206[1];
      *(_OWORD *)((char *)v195 + 10) = *(_OWORD *)((char *)&v206[1] + 10);
      v189 = *(_OWORD *)v201;
      v190 = *(_OWORD *)&v201[16];
      v191 = 0uLL;
      v192 = v45;
      v187 = v199;
      v188 = v200;
      URLComponents.url.getter((uint64_t *)&v196);
      v38 = v196;
      if (v196)
      {
        v39 = v197;
        v40 = v198;
        outlined release of URLComponents((uint64_t)&v199);
        v84 = v184;
LABEL_81:
        outlined consume of URL?(v84);
        swift_bridgeObjectRelease();
        goto LABEL_82;
      }
      __break(1u);
    }
    else
    {
      *(_QWORD *)&v199 = 0;
      BYTE8(v199) = 0;
      BYTE9(v199) = HIBYTE(v212);
      BYTE10(v199) = v212;
      *(_WORD *)((char *)&v199 + 11) = v211;
      *(_WORD *)((char *)&v199 + 13) = v210;
      HIBYTE(v199) = v209;
      LOBYTE(v200) = v208;
      *((_QWORD *)&v200 + 1) = v185;
      *(_QWORD *)v201 = v44;
      memset(&v201[8], 0, 32);
      v202 = 0;
      v203 = v45;
      v204 = 0;
      LOBYTE(v205) = v207;
      *((_QWORD *)&v205 + 1) = v81;
      *(_QWORD *)&v206[0] = v83;
      *(_OWORD *)((char *)v206 + 8) = 0u;
      *(_OWORD *)((char *)&v206[1] + 8) = 0u;
      WORD4(v206[2]) = v46 & 1;
      v193 = v205;
      v194 = v206[0];
      v195[0] = v206[1];
      *(_OWORD *)((char *)v195 + 10) = *(_OWORD *)((char *)&v206[1] + 10);
      v189 = *(_OWORD *)v201;
      v190 = *(_OWORD *)&v201[16];
      v191 = 0uLL;
      v192 = v45;
      v187 = v199;
      v188 = v200;
      v85 = v184;
      v186[0] = v184;
      v186[1] = v183;
      v186[2] = v182;
      URLComponents.url(relativeTo:)((uint64_t)v186, (uint64_t *)&v196);
      v38 = v196;
      if (v196)
      {
        v39 = v197;
        v40 = v198;
        outlined release of URLComponents((uint64_t)&v199);
        v84 = v85;
        goto LABEL_81;
      }
    }
    __break(1u);
    goto LABEL_199;
  }
  v216 = xmmword_182169810;
  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v216, 4, 1u, 0))
  {
    v185 = 1701603686;
    swift_bridgeObjectRelease();
    LOBYTE(v196) = 1;
    v216 = 0uLL;
    LOBYTE(v217) = 0;
    v218 = xmmword_182169820;
    v219 = 0u;
    v220 = 0u;
    v221 = 0u;
    v222 = 0;
    v223 = 1;
    v224 = 0u;
    v225 = 0u;
    v226 = 0u;
    v227 = 0;
    URLComponents._URLComponents.encodedHost.getter();
    v21 = v20;
    swift_bridgeObjectRelease();
    if (!v21)
    {
LABEL_70:
      v77 = swift_bridgeObjectRelease();
      LOBYTE(v199) = 37;
      MEMORY[0x1E0C80A78](v77);
      v178 = (uint64_t)&v199;
      v45 = 0xE000000000000000;
      v46 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v177, 0, 0xE000000000000000);
      v44 = 0xE400000000000000;
      goto LABEL_71;
    }
    v22 = URLComponents._URLComponents.encodedHost.getter();
    if (!v23)
      goto LABEL_69;
    v24 = v22;
    v25 = v23;
    v26 = ((unint64_t)v23 >> 56) & 0xF;
    v27 = v22 & 0xFFFFFFFFFFFFLL;
    if (((unint64_t)v23 & 0x2000000000000000) != 0)
      v28 = ((unint64_t)v23 >> 56) & 0xF;
    else
      v28 = v22 & 0xFFFFFFFFFFFFLL;
    if (!v28)
    {
      swift_bridgeObjectRelease();
      v47 = 0;
      v2 = 0xE000000000000000;
      goto LABEL_54;
    }
    if (((unint64_t)v23 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      if (((unint64_t)v23 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v199 = v22;
        *((_QWORD *)&v199 + 1) = (unint64_t)v23 & 0xFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v187 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v187 + 1) = 0;
        swift_bridgeObjectRetain_n();
        v31 = &v199;
        v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v187;
        v33 = (unsigned __int8 *)&v199;
        v32 = v26;
        v34 = v26;
      }
      else
      {
        if ((v22 & 0x1000000000000000) != 0)
        {
          v29 = ((unint64_t)v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          v29 = _StringObject.sharedUTF8.getter();
          v27 = v66;
        }
        *(_QWORD *)&v199 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v199 + 1) = 0;
        swift_bridgeObjectRetain_n();
        v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v199;
        v31 = (_OWORD *)v29;
        v32 = v27;
        v33 = (unsigned __int8 *)v29;
        v34 = v27;
      }
      v48 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v31, v32, v30, 0, v33, v34);
      v2 = v49;
      swift_bridgeObjectRelease();
      if (v2 != 1)
      {
        swift_bridgeObjectRelease_n();
        v47 = v48;
        goto LABEL_53;
      }
    }
    *(_QWORD *)&v199 = v24;
    *((_QWORD *)&v199 + 1) = v25;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v50 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v51 = objc_msgSend(v50, sel__fastCharacterContents);
    v52 = v50;
    if (v51)
    {
      *(_QWORD *)&v199 = v24;
      *((_QWORD *)&v199 + 1) = v25;
      StringProtocol._ephemeralString.getter();
      v53 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v54 = objc_msgSend(v53, sel_length);
      v55 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v55);
      LOBYTE(v178) = 0;
      MEMORY[0x1E0C80A78](v56);
      v175 = v51;
      v176 = v54;
      v47 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v51, (uint64_t)v54, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v57, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v174);
      v2 = v58;
      swift_bridgeObjectRelease_n();
      goto LABEL_53;
    }
    *(_QWORD *)&v199 = v24;
    *((_QWORD *)&v199 + 1) = v25;
    swift_bridgeObjectRetain();
    v60 = String.init<A>(_:)();
    v61 = v59;
    if ((v59 & 0x1000000000000000) != 0)
    {
      v60 = static String._copying(_:)();
      v68 = v67;
      swift_bridgeObjectRelease();
      v61 = v68;
      if ((v68 & 0x2000000000000000) == 0)
        goto LABEL_45;
    }
    else if ((v59 & 0x2000000000000000) == 0)
    {
LABEL_45:
      if ((v60 & 0x1000000000000000) != 0)
      {
        v62 = (unsigned __int8 *)((v61 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v63 = v60 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v62 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      *(_QWORD *)&v199 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v199 + 1) = 0;
      v64 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v199;
      v65 = v62;
      goto LABEL_52;
    }
    v63 = HIBYTE(v61) & 0xF;
    *(_QWORD *)&v199 = v60;
    *((_QWORD *)&v199 + 1) = v61 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v187 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((_QWORD *)&v187 + 1) = 0;
    v62 = (unsigned __int8 *)&v199;
    v64 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v187;
    v65 = (unsigned __int8 *)&v199;
LABEL_52:
    v47 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v62, v63, v64, 0, v65, v63);
    v2 = v69;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_53:
    if (!v2)
      goto LABEL_69;
LABEL_54:
    v70 = specialized Collection.first.getter(v47, v2);
    if ((v70 & 0x1FF) != 0x5B)
      goto LABEL_109;
    if ((v2 & 0x1000000000000000) != 0)
    {
      v165 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v165, 1))
      {
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      v72 = (v47 >> 59) & 1;
      v70 = MEMORY[0x186DA485C](15, v165 - 1, v47, v2);
    }
    else
    {
      v71 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000) == 0)
        v71 = v47 & 0xFFFFFFFFFFFFLL;
      if (!v71)
      {
        __break(1u);
        goto LABEL_169;
      }
      v70 = (v71 << 16) - 65532;
      LOBYTE(v72) = 1;
    }
    if ((v70 & 0xC) != 4 << v72)
    {
LABEL_61:
      v73 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000) == 0)
        v73 = v47 & 0xFFFFFFFFFFFFLL;
      v74 = v70 >> 16;
      if (v70 >> 16 >= v73)
      {
        __break(1u);
        goto LABEL_171;
      }
      if ((v2 & 0x1000000000000000) != 0)
      {
        v76 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((v2 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v199 = v47;
        *((_QWORD *)&v199 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
        v76 = *((_BYTE *)&v199 + v74);
      }
      else
      {
        if ((v47 & 0x1000000000000000) != 0)
          v75 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          v75 = _StringObject.sharedUTF8.getter();
        v76 = *(_BYTE *)(v75 + v74);
      }
      if (v76 == 93)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v86 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v47, v2);
        goto LABEL_87;
      }
LABEL_109:
      if ((v2 & 0x1000000000000000) != 0)
      {
        *(_QWORD *)&v199 = v47;
        *((_QWORD *)&v199 + 1) = v2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v161 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v25 = (unsigned __int16 *)objc_msgSend(v161, sel__fastCharacterContents);
        v162 = v161;
        if (v25)
        {
          *(_QWORD *)&v199 = v47;
          *((_QWORD *)&v199 + 1) = v2;
          StringProtocol._ephemeralString.getter();
          v163 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v164 = objc_msgSend(v163, sel_length);
          swift_unknownObjectRelease();
          v86 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v25, (uint64_t)v164, 4u, 1);
        }
        else
        {
          v86 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v2, 4u, 1);
        }
LABEL_87:
        v87 = v86;
        swift_bridgeObjectRelease_n();
        if ((v87 & 1) == 0)
          goto LABEL_88;
        goto LABEL_115;
      }
      if ((v2 & 0x2000000000000000) != 0)
      {
        v100 = HIBYTE(v2) & 0xF;
        *(_QWORD *)&v199 = v47;
        *((_QWORD *)&v199 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
        v99 = (char *)&v199;
        goto LABEL_114;
      }
      if ((v47 & 0x1000000000000000) != 0)
      {
        v99 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v100 = v47 & 0xFFFFFFFFFFFFLL;
        goto LABEL_114;
      }
LABEL_171:
      v99 = (char *)_StringObject.sharedUTF8.getter();
LABEL_114:
      v101 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v99, v100, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!v101)
      {
LABEL_88:
        if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v47, v2) & 1) == 0)
        {
          v88 = one-time initialization token for schemesToPercentEncodeHost;
          swift_bridgeObjectRetain_n();
          if (v88 != -1)
            swift_once();
          v89 = static RFC3986Parser.schemesToPercentEncodeHost;
          v90 = String.lowercased()();
          LOBYTE(v89) = specialized Set.contains(_:)(v90._countAndFlagsBits, (uint64_t)v90._object, v89);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if ((v89 & 1) == 0)
          {
            v103 = v47 & 0xFFFFFFFFFFFFLL;
            if ((v2 & 0x2000000000000000) != 0)
              v104 = HIBYTE(v2) & 0xF;
            else
              v104 = v47 & 0xFFFFFFFFFFFFLL;
            if (!v104)
            {
              v43 = v47;
              v114 = 0;
              v115 = 0xE000000000000000;
              goto LABEL_191;
            }
            if ((v2 & 0x1000000000000000) == 0)
            {
              if ((v2 & 0x2000000000000000) != 0)
              {
                v43 = v47;
                *(_QWORD *)&v199 = v47;
                *((_QWORD *)&v199 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
                *(_QWORD *)&v187 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
                *((_QWORD *)&v187 + 1) = 0;
                swift_bridgeObjectRetain_n();
                v107 = &v199;
                v106 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v187;
                v109 = (unsigned __int8 *)&v199;
                v108 = HIBYTE(v2) & 0xF;
                v110 = v108;
                goto LABEL_138;
              }
              if ((v47 & 0x1000000000000000) != 0)
              {
                v43 = v47;
                v105 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_125:
                *(_QWORD *)&v199 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
                *((_QWORD *)&v199 + 1) = 0;
                swift_bridgeObjectRetain_n();
                v106 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v199;
                v107 = (_OWORD *)v105;
                v108 = v103;
                v109 = (unsigned __int8 *)v105;
                v110 = v103;
LABEL_138:
                v114 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v107, v108, v106, 1, v109, v110);
                v115 = v116;
                swift_bridgeObjectRelease();
                if (v115 == 1)
                  goto LABEL_139;
                swift_bridgeObjectRelease_n();
                if (!v115)
                  goto LABEL_193;
LABEL_191:
                swift_bridgeObjectRetain();
                v172 = specialized static RFC3986Parser.validate<A>(_:component:)(v114, v115, 3);
                swift_bridgeObjectRelease();
                if ((v172 & 1) != 0)
                {
LABEL_194:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_70;
                }
                swift_bridgeObjectRelease();
LABEL_193:
                specialized static RFC3986Parser.percentEncode<A>(_:component:)(v43, v2, 3);
                goto LABEL_194;
              }
LABEL_185:
              v43 = v47;
              v105 = _StringObject.sharedUTF8.getter();
              v103 = v168;
              goto LABEL_125;
            }
LABEL_181:
            v43 = v47;
            swift_bridgeObjectRetain_n();
LABEL_139:
            v25 = (unsigned __int16 *)v43;
            *(_QWORD *)&v199 = v43;
            *((_QWORD *)&v199 + 1) = v2;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol._ephemeralString.getter();
            v117 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v118 = objc_msgSend(v117, sel__fastCharacterContents);
            v119 = v117;
            if (v118)
            {
              v43 = (uint64_t)v25;
              *(_QWORD *)&v199 = v25;
              *((_QWORD *)&v199 + 1) = v2;
              StringProtocol._ephemeralString.getter();
              v120 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v121 = objc_msgSend(v120, sel_length);
              v122 = swift_unknownObjectRelease();
              MEMORY[0x1E0C80A78](v122);
              LOBYTE(v178) = 1;
              MEMORY[0x1E0C80A78](v123);
              v175 = v118;
              v176 = v121;
              v114 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v118, (uint64_t)v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v124, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v174);
              v115 = v125;
              swift_bridgeObjectRelease_n();
              if (!v115)
                goto LABEL_193;
              goto LABEL_191;
            }
            *(_QWORD *)&v199 = v25;
            *((_QWORD *)&v199 + 1) = v2;
            swift_bridgeObjectRetain();
            v154 = String.init<A>(_:)();
            v155 = v153;
            if ((v153 & 0x1000000000000000) == 0)
            {
              v43 = (uint64_t)v25;
              if ((v153 & 0x2000000000000000) == 0)
                goto LABEL_161;
              goto LABEL_189;
            }
LABEL_188:
            v154 = static String._copying(_:)();
            v170 = v169;
            swift_bridgeObjectRelease();
            v155 = v170;
            v43 = (uint64_t)v25;
            if ((v155 & 0x2000000000000000) == 0)
            {
LABEL_161:
              if ((v154 & 0x1000000000000000) != 0)
              {
                v156 = (unsigned __int8 *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v157 = v154 & 0xFFFFFFFFFFFFLL;
LABEL_163:
                *(_QWORD *)&v199 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
                *((_QWORD *)&v199 + 1) = 0;
                v158 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v199;
                v159 = v156;
                v160 = v157;
                goto LABEL_190;
              }
LABEL_196:
              v156 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              goto LABEL_163;
            }
LABEL_189:
            v157 = HIBYTE(v155) & 0xF;
            *(_QWORD *)&v199 = v154;
            *((_QWORD *)&v199 + 1) = v155 & 0xFFFFFFFFFFFFFFLL;
            *(_QWORD *)&v187 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
            *((_QWORD *)&v187 + 1) = 0;
            v156 = (unsigned __int8 *)&v199;
            v158 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v187;
            v159 = (unsigned __int8 *)&v199;
            v160 = v157;
LABEL_190:
            v114 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v156, v157, v158, 1, v159, v160);
            v115 = v171;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            if (!v115)
              goto LABEL_193;
            goto LABEL_191;
          }
        }
        v91 = v47 & 0xFFFFFFFFFFFFLL;
        if ((v2 & 0x2000000000000000) != 0)
          v92 = HIBYTE(v2) & 0xF;
        else
          v92 = v47 & 0xFFFFFFFFFFFFLL;
        if (v92)
        {
          if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v47, v2) & 1) != 0)
          {
            v93 = specialized Collection.first.getter(v47, v2);
            if ((v93 & 0x100) != 0)
            {
LABEL_200:
              __break(1u);
              goto LABEL_201;
            }
            if (v93 == 91)
            {
              if ((v2 & 0x1000000000000000) != 0)
              {
                v166 = String.UTF8View._foreignCount()();
                if (__OFSUB__(v166, 1))
                {
LABEL_201:
                  __break(1u);
                  goto LABEL_202;
                }
                v95 = (v47 >> 59) & 1;
                v94 = MEMORY[0x186DA485C](15, v166 - 1, v47, v2);
              }
              else
              {
                v94 = (v92 << 16) - 65532;
                LOBYTE(v95) = 1;
              }
              if ((v94 & 0xC) == 4 << v95)
                v94 = _StringGuts._slowEnsureMatchingEncoding(_:)(v94, v47, v2);
              v96 = v94 >> 16;
              if (v94 >> 16 >= v92)
              {
                __break(1u);
              }
              else
              {
                if ((v2 & 0x1000000000000000) != 0)
                {
                  v98 = String.UTF8View._foreignSubscript(position:)();
                }
                else if ((v2 & 0x2000000000000000) != 0)
                {
                  *(_QWORD *)&v199 = v47;
                  *((_QWORD *)&v199 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
                  v98 = *((_BYTE *)&v199 + v96);
                }
                else
                {
                  if ((v47 & 0x1000000000000000) != 0)
                    v97 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  else
                    v97 = _StringObject.sharedUTF8.getter();
                  v98 = *(_BYTE *)(v97 + v96);
                }
                if (v98 == 93)
                {
                  v126 = specialized Collection<>.firstIndex(of:)(0x25u, v47, v2);
                  if ((v127 & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v47, v2) & 1) == 0)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_70;
                    }
                    *(_QWORD *)&v199 = v47;
                    *((_QWORD *)&v199 + 1) = v2;
                    String.init<A>(_:)();
                    swift_bridgeObjectRelease();
                    goto LABEL_69;
                  }
                  v128 = v126;
                  if ((v2 & 0x1000000000000000) != 0)
                  {
                    v130 = String.UTF8View._foreignCount()();
                    if (__OFSUB__(v130, 1))
                    {
                      __break(1u);
                      goto LABEL_188;
                    }
                    v129 = MEMORY[0x186DA485C](15, v130 - 1, v47, v2);
                  }
                  else
                  {
                    v129 = (v92 << 16) - 65532;
                  }
                  if (v129 >> 14 >= v128 >> 14)
                  {
                    swift_bridgeObjectRetain_n();
                    v181 = v47;
                    *(_QWORD *)&v199 = String.subscript.getter();
                    *((_QWORD *)&v199 + 1) = v131;
                    *(_QWORD *)&v200 = v132;
                    *((_QWORD *)&v200 + 1) = v133;
                    MEMORY[0x1E0C80A78](v199);
                    v178 = (uint64_t)&v199;
                    LOBYTE(v179) = 8;
                    v180 = v134;
                    v138 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v177, v136, v137, v135, v134);
                    if (v139)
                    {
                      v140 = (uint64_t)v138;
                      v141 = v139;
                    }
                    else
                    {
                      v142 = *((_QWORD *)&v199 + 1);
                      v143 = v199;
                      v144 = *((_QWORD *)&v200 + 1);
                      v145 = v200;
                      swift_bridgeObjectRetain();
                      v140 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v143, v142, v145, v144, 8u);
                      v141 = v146;
                      swift_bridgeObjectRelease();
                    }
                    v147 = String.subscript.getter();
                    v148 = MEMORY[0x186DA4634](v147);
                    v150 = v149;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v199 = v148;
                    *((_QWORD *)&v199 + 1) = v150;
                    v151._countAndFlagsBits = v140;
                    v151._object = v141;
                    String.append(_:)(v151);
                    swift_bridgeObjectRelease();
                    v152._countAndFlagsBits = 93;
                    v152._object = (void *)0xE100000000000000;
                    String.append(_:)(v152);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    goto LABEL_176;
                  }
                  __break(1u);
                  goto LABEL_185;
                }
              }
              __break(1u);
              goto LABEL_181;
            }
            __break(1u);
          }
          else
          {
            swift_bridgeObjectRetain();
            if ((v2 & 0x1000000000000000) == 0)
            {
              if ((v2 & 0x2000000000000000) != 0)
              {
                *(_QWORD *)&v199 = v47;
                *((_QWORD *)&v199 + 1) = v2 & 0xFFFFFFFFFFFFFFLL;
                v111 = &v199;
                v112 = HIBYTE(v2) & 0xF;
              }
              else
              {
                if ((v47 & 0x1000000000000000) != 0)
                {
                  v111 = (_OWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else
                {
                  v111 = (_OWORD *)_StringObject.sharedUTF8.getter();
                  v91 = v167;
                }
                v112 = v91;
              }
              specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v111, v112, 4, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
              if (v113)
                goto LABEL_176;
            }
          }
          swift_bridgeObjectRetain();
          specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v47, v2, 4u);
LABEL_176:
          swift_bridgeObjectRelease_n();
          goto LABEL_69;
        }
        swift_bridgeObjectRelease();
LABEL_69:
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
LABEL_115:
      swift_bridgeObjectRetain();
      v102 = swift_bridgeObjectRelease();
      LOBYTE(v199) = 37;
      MEMORY[0x1E0C80A78](v102);
      v178 = (uint64_t)&v199;
      specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v177, v47, v2);
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
LABEL_169:
    v70 = _StringGuts._slowEnsureMatchingEncoding(_:)(v70, v47, v2);
    goto LABEL_61;
  }
LABEL_202:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v173 = 0;
  swift_willThrow();
  v179 = 0;
  v178 = 714;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  __int16 v28;
  Swift::String v29;
  Swift::String v30;
  char v31;
  unint64_t v32;

  swift_bridgeObjectRetain();
  v9 = String.init<A>(_:)();
  if (!a6)
  {
    __break(1u);
    JUMPOUT(0x181E82848);
  }
  v11 = v9;
  v12 = v10;
  v31 = a3;
  if ((*(_BYTE *)(a6 + 168) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v13 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain();
    v13 = String.subscript.getter();
  }
  v14 = MEMORY[0x186DA4634](v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v14 & 0xFFFFFFFFFFFFLL;
  if (v17 && (specialized Collection.first.getter(v11, v12) & 0x1FF) != 0x2F)
  {
    v22._countAndFlagsBits = v11;
    v22._object = (void *)v12;
    String.append(_:)(v22);
    v11 = 47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v18 = 1;
    v12 = 0xE100000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = 0;
    if ((v12 & 0x2000000000000000) == 0)
    {
      if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_11;
      goto LABEL_15;
    }
  }
  if ((v12 & 0xF00000000000000) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    v19 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v11, v12);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((a4 & 1) == 0)
      goto LABEL_21;
    goto LABEL_16;
  }
LABEL_15:
  v19 = 0;
  v21 = (void *)0xE000000000000000;
  if ((a4 & 1) == 0)
    goto LABEL_21;
LABEL_16:
  swift_bridgeObjectRetain();
  v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v19, (unint64_t)v21);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 < v18)
  {
    __break(1u);
  }
  else
  {
    v32 = (2 * v24) | 1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF90]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF50]);
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    v25 = *(_QWORD *)(v23 + 16);
    if (v25 >= v18)
    {
      if ((uint64_t)(v32 >> 1) < (uint64_t)v18)
      {
        __break(1u);
        JUMPOUT(0x181E827FCLL);
      }
      if (v25 != v32 >> 1)
        specialized Array.replaceSubrange<A>(_:with:)(v18, v25, v23, v23 + 32, v18, v32);
      swift_unknownObjectRelease();
      v19 = static String._fromUTF8Repairing(_:)();
      v27 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v27;
LABEL_21:
      if ((specialized BidirectionalCollection.last.getter(v14, v16) & 0x1FF) == 0x2F
        || (specialized Collection.first.getter(v19, (unint64_t)v21) & 0x1FF) == 0x2F)
      {
        v28 = specialized BidirectionalCollection.last.getter(v14, v16);
        swift_bridgeObjectRelease();
        if ((v28 & 0x1FF) == 0x2F && (specialized Collection.first.getter(v19, (unint64_t)v21) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 47;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
      }
      v30._countAndFlagsBits = v19;
      v30._object = v21;
      String.append(_:)(v30);
      specialized BidirectionalCollection.last.getter(v14, v16);
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x181E82760);
}

void URL.appending<A>(path:directoryHint:encodingSlashes:)(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  __n128 v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  __int16 v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v42 = a3;
  v58 = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v8;
  v10 = v3[1];
  v11 = v3[2];
  v46 = *v3;
  v47 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v7, v14, v13, v5);
  v15 = v10;
  v16 = String.init<A>(_:)();
  if (!v10)
  {
    __break(1u);
    JUMPOUT(0x181E8390CLL);
  }
  v18 = v16;
  v19 = v17;
  v20 = *(_BYTE *)(v15 + 168);
  v45 = v15;
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v21 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain();
    v21 = String.subscript.getter();
  }
  v22 = MEMORY[0x186DA4634](v21);
  v24 = v23;
  swift_bridgeObjectRelease();
  v49 = v22;
  v50 = v24;
  v25 = HIBYTE(v24) & 0xF;
  v43 = v22;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v22 & 0xFFFFFFFFFFFFLL;
  if (v25 && (specialized Collection.first.getter(v18, v19) & 0x1FF) != 0x2F)
  {
    v54 = 47;
    v55 = 0xE100000000000000;
    v35._countAndFlagsBits = v18;
    v35._object = (void *)v19;
    String.append(_:)(v35);
    v18 = v54;
    v36 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v26 = 1;
    v19 = v36;
    if ((v36 & 0x2000000000000000) == 0)
    {
LABEL_10:
      v44 = v9;
      if ((v18 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = 0;
    if ((v19 & 0x2000000000000000) == 0)
      goto LABEL_10;
  }
  v44 = v9;
  if ((v19 & 0xF00000000000000) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    v27 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v18, v19);
    v29 = v28;
    swift_bridgeObjectRelease();
    v41 = v19;
    if ((a2 & 1) != 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v27 = 0;
  v29 = (void *)0xE000000000000000;
  v41 = v19;
  if ((a2 & 1) != 0)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v27, (unint64_t)v29);
    swift_bridgeObjectRelease();
    v53 = v30;
    v51 = &outlined read-only object #0 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    v52 = &outlined read-only object #1 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31 < v26)
    {
      __break(1u);
    }
    else
    {
      v48 = v29;
      v54 = v30;
      v55 = v30 + 32;
      v56 = v26;
      v57 = (2 * v31) | 1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF90]);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF50]);
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      v32 = *(_QWORD *)(v30 + 16);
      if (v32 >= v26)
      {
        if (v30 + 32 + v26 != v55 + v56)
          goto LABEL_15;
        if ((uint64_t)(v57 >> 1) < v56)
        {
          __break(1u);
          JUMPOUT(0x181E838C0);
        }
        if (v26 == v56 && v32 == v57 >> 1)
        {
          swift_unknownObjectRelease();
        }
        else
        {
LABEL_15:
          specialized Array.replaceSubrange<A>(_:with:)(v26, v32, v54, v55, v56, v57);
          swift_unknownObjectRelease();
        }
        v33 = v43;
        v27 = static String._fromUTF8Repairing(_:)();
        v29 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_21:
        if ((specialized BidirectionalCollection.last.getter(v33, v24) & 0x1FF) == 0x2F
          || (specialized Collection.first.getter(v27, (unint64_t)v29) & 0x1FF) == 0x2F)
        {
          v37 = specialized BidirectionalCollection.last.getter(v33, v24);
          swift_bridgeObjectRelease();
          if ((v37 & 0x1FF) == 0x2F
            && (specialized Collection.first.getter(v27, (unint64_t)v29) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 47;
          v38._object = (void *)0xE100000000000000;
          String.append(_:)(v38);
        }
        v39._countAndFlagsBits = v27;
        v48 = v29;
        v39._object = v29;
        String.append(_:)(v39);
        specialized BidirectionalCollection.last.getter(v49, v50);
        __asm { BR              X9 }
      }
    }
    __break(1u);
    JUMPOUT(0x181E83824);
  }
LABEL_20:
  v33 = v43;
  goto LABEL_21;
}

double URL.append<A>(path:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(path:directoryHint:));
}

double URL.append<A>(component:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(component:directoryHint:));
}

double URL.append<A>(path:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, char *))
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double result;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = *a2;
  v7 = v5[1];
  v9 = v5[2];
  v12 = (void *)*v5;
  v8 = v12;
  v13 = v7;
  v14 = v9;
  v11 = v6;
  a5(&v15, a1, &v11);

  swift_release();
  swift_release();
  *v5 = v15;
  result = *(double *)&v16;
  *(_OWORD *)(v5 + 1) = v16;
  return result;
}

uint64_t URL.appending(queryItems:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[8];
  _OWORD v17[2];
  void *v18;
  _OWORD v19[8];
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30[20];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  Swift::OpaquePointer_optional v49;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)&v40 = *(_QWORD *)v1;
  *((_QWORD *)&v40 + 1) = v3;
  *(_QWORD *)&v41 = v5;
  v6 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v6, v7, 1, (uint64_t)v30);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v31, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v31) == 1)
    goto LABEL_6;
  v46 = v37;
  v47 = v38;
  v48[0] = v39[0];
  *(_OWORD *)((char *)v48 + 10) = *(_OWORD *)((char *)v39 + 10);
  v42 = v33;
  v43 = v34;
  v44 = v35;
  v45 = v36;
  v40 = v31;
  v41 = v32;
  v19[6] = v37;
  v19[7] = v38;
  v20[0] = v39[0];
  *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)((char *)v39 + 10);
  v19[2] = v33;
  v19[3] = v34;
  v19[4] = v35;
  v19[5] = v36;
  v19[0] = v31;
  v19[1] = v32;
  v27 = v37;
  v28 = v38;
  v29[0] = v39[0];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v39 + 10);
  v23 = v33;
  v24 = v34;
  v25 = v35;
  v26 = v36;
  v21 = v31;
  v22 = v32;
  outlined retain of URLComponents((uint64_t)v19);
  v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents?(v30);
  v9 = (void *)MEMORY[0x1E0DEE9D8];
  if (v8)
    v9 = (void *)v8;
  v18 = v9;
  v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  v49.value._rawValue = v18;
  URLComponents._URLComponents.setQueryItems(_:)(v49);
  swift_bridgeObjectRelease();
  v16[6] = v27;
  v16[7] = v28;
  v17[0] = v29[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v29 + 10);
  v16[2] = v23;
  v16[3] = v24;
  v16[4] = v25;
  v16[5] = v26;
  v16[0] = v21;
  v16[1] = v22;
  URLComponents.url.getter(&v14);
  result = outlined release of URLComponents((uint64_t)v16);
  if (!v14)
  {
LABEL_6:
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    v13 = v4;
    return swift_retain();
  }
  else
  {
    v12 = v15;
    *a1 = v14;
    *(_OWORD *)(a1 + 1) = v12;
  }
  return result;
}

Swift::Void __swiftcall URL.append(queryItems:)(Swift::OpaquePointer queryItems)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(void **)v1;
  URL.appending(queryItems:)(&v3);

  swift_release();
  swift_release();
  *(_QWORD *)v1 = v3;
  *(_OWORD *)(v1 + 8) = v4;
}

void *static URL.currentDirectory()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[3];
  unsigned __int8 v9;

  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v3 = objc_msgSend(v2, sel_currentDirectoryPath);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  return URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v4, v6, &v9, (uint64_t)v8, a1);
}

void *static URL.homeDirectory.getter@<X0>(uint64_t *a1@<X8>)
{
  NSString *v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[3];
  unsigned __int8 v8;

  v2 = NSHomeDirectory();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  return URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v3, v5, &v8, (uint64_t)v7, a1);
}

uint64_t static URL.homeDirectory(forUser:)@<X0>(uint64_t a1@<X8>)
{
  NSString *v2;
  NSString *v3;
  uint64_t result;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];
  unsigned __int8 v11;
  uint64_t v12;
  __int128 v13;

  v2 = (NSString *)String._bridgeToObjectiveCImpl()();
  v3 = NSHomeDirectoryForUser(v2);
  result = swift_unknownObjectRelease();
  if (v3)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v11 = 0;
    memset(v10, 0, sizeof(v10));
    result = (uint64_t)URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v5, v7, &v11, (uint64_t)v10, &v12);
    v8 = v12;
    v9 = v13;
  }
  else
  {
    v8 = 0;
    v9 = 0uLL;
  }
  *(_QWORD *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v9;
  return result;
}

void static URL.cachesDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 13, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.applicationDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 1, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSApplicationDirectory, 2uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.libraryDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 5, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.userDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 7, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSUserDirectory, 2uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.documentsDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 9, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.desktopDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 12, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSDesktopDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.downloadsDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 15, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSDownloadsDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.moviesDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 17, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSMoviesDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.musicDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 18, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSMusicDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.picturesDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 19, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSPicturesDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.sharedPublicDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 21, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSSharedPublicDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.trashDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 102, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSTrashDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void URL.init(for:in:appropriateFor:create:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  id v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  if (v8)
  {
    v10 = v8;
    outlined consume of URL?(v8);
  }
  else
  {
    v10 = 0;
  }
  v18 = 0;
  v11 = objc_msgSend(v9, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a1, a2, v10, a4 & 1, &v18);

  v12 = v18;
  if (v11)
  {
    URL.init(reference:)(v11, &v18);
    v13 = v18;
    v16 = v19;
    v14 = v12;

    *(_QWORD *)a5 = v13;
    *(_OWORD *)(a5 + 8) = v16;
  }
  else
  {
    if (v18)
    {
      v18;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v15 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
}

BOOL static URL.DirectoryHint.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void URL.DirectoryHint.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int URL.DirectoryHint.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double static URL._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  __int128 v6;

  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(_QWORD *)a2 = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t static URL._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v5;
  __int128 v6;

  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URL(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    v3 = v5;
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t NSURL._toCustomAnyHashable()()
{
  void *v0;
  uint64_t v2;

  URL.init(reference:)(v0, &v2);
  lazy protocol witness table accessor for type URL and conformance URL();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURL()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  URL.init(reference:)(v1, &v2);
  lazy protocol witness table accessor for type URL and conformance URL();
  AnyHashable.init<A>(_:)();

}

uint64_t URL.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URL.absoluteString.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance URL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = URL.absoluteString.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URL.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.CodingKeys()
{
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.CodingKeys()
{
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void URL.init(fileReferenceLiteralResourceName:)(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v2 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_URLForResource_withExtension_, v3, 0);

  swift_unknownObjectRelease();
  if (v4)
  {
    URL.init(reference:)(v4, &v6);

    v5 = v7;
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

_QWORD *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(_QWORD *(*a1)(__int128 *__return_ptr, _QWORD *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD v9[2];
  __int128 v10;

  if ((a4 & 0x1000000000000000) != 0)
    return (_QWORD *)xmmword_18205FD60;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v6 = v9;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v6 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = a1(&v10, v6, v7);
  if (!v4)
    return (_QWORD *)v10;
  return result;
}

_QWORD *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(_QWORD *(*a1)(_QWORD *__return_ptr, _QWORD *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD v9[2];
  _QWORD v10[2];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v10[0] = 0;
    v10[1] = 0;
    return (_QWORD *)v10[0];
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v6 = v9;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v6 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = a1(v10, v6, v7);
  if (!v4)
    return (_QWORD *)v10[0];
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x186DA485C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD v47[9];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v13 = swift_retain();
      v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = swift_retain();
        v17 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v16, a2);
        swift_release();
        if ((v17 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47[0] = *v2;
    *v2 = 0x8000000000000000;
    v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v47[0];
LABEL_58:
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = __CocoaSet.member(for:)();
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    *a1 = v47[0];
    swift_unknownObjectRelease();
    return 0;
  }
  result = __CocoaSet.count.getter();
  if (__OFADD__(result, 1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
  if (*(_QWORD *)(v18 + 24) > *(_QWORD *)(v18 + 16))
  {
    swift_retain();
    v19 = v18;
LABEL_57:
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
    goto LABEL_58;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  v22 = static _SetStorage.resize(original:capacity:move:)();
  v19 = v22;
  if (!*(_QWORD *)(v18 + 16))
  {
    swift_retain();
LABEL_56:
    swift_release();
    goto LABEL_57;
  }
  v44 = v3;
  v45 = a1;
  v46 = (_QWORD *)(v18 + 56);
  v23 = 1 << *(_BYTE *)(v18 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & *(_QWORD *)(v18 + 56);
  v26 = (unint64_t)(v23 + 63) >> 6;
  v27 = v22 + 56;
  result = swift_retain();
  v28 = 0;
  while (1)
  {
    if (v25)
    {
      v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v31 = v30 | (v28 << 6);
      goto LABEL_42;
    }
    v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v32 >= v26)
    {
LABEL_51:
      v43 = 1 << *(_BYTE *)(v18 + 32);
      if (v43 > 63)
        bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v46 = -1 << v43;
      v3 = v44;
      a1 = v45;
      *(_QWORD *)(v18 + 16) = 0;
      goto LABEL_56;
    }
    v33 = v46[v32];
    ++v28;
    if (!v33)
    {
      v28 = v32 + 1;
      if (v32 + 1 >= v26)
        goto LABEL_51;
      v33 = v46[v28];
      if (!v33)
      {
        v28 = v32 + 2;
        if (v32 + 2 >= v26)
          goto LABEL_51;
        v33 = v46[v28];
        if (!v33)
        {
          v28 = v32 + 3;
          if (v32 + 3 >= v26)
            goto LABEL_51;
          v33 = v46[v28];
          if (!v33)
            break;
        }
      }
    }
LABEL_41:
    v25 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_42:
    v35 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v31);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    result = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v19 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v27 + 8 * (v37 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v27 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_59;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v27 + 8 * v38);
      }
      while (v42 == -1);
      v29 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v27 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v29) = v35;
    ++*(_QWORD *)(v19 + 16);
  }
  v34 = v32 + 4;
  if (v34 >= v26)
    goto LABEL_51;
  v33 = v46[v34];
  if (v33)
  {
    v28 = v34;
    goto LABEL_41;
  }
  while (1)
  {
    v28 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v28 >= v26)
      goto LABEL_51;
    v33 = v46[v28];
    ++v34;
    if (v33)
      goto LABEL_41;
  }
LABEL_61:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2);
  }
  result = 0;
  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(*v2 + 48) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;

  v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(v10 + 48);
    v15 = v14 + 32 * v13;
    v16 = *(_QWORD *)(v15 + 16) == a4 && *(_QWORD *)(v15 + 24) == a5;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = (unint64_t *)(*(_QWORD *)(*v5 + 48) + 32 * v13);
      v18 = v17[1];
      v19 = v17[2];
      v20 = v17[3];
      *a1 = *v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    v22 = ~v12;
    while (1)
    {
      v13 = (v13 + 1) & v22;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        break;
      v23 = v14 + 32 * v13;
      v24 = *(_QWORD *)(v23 + 16) == a4 && *(_QWORD *)(v23 + 24) == a5;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = *v5;
  *v5 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v13, isUniquelyReferenced_nonNull_native);
  *v5 = v27;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::UInt v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  Swift::UInt v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::UInt64 v27;
  Swift::UInt32 v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  Swift::String v45;
  uint64_t v46;
  _QWORD v47[11];

  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  v3 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  v4 = __CocoaSet.Iterator.next()();
  if (!v4)
    goto LABEL_70;
  v5 = v4;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  v46 = v2;
  while (2)
  {
    v47[0] = v5;
    swift_dynamicCast();
    if (*(_QWORD *)(v3 + 24) > *(_QWORD *)(v3 + 16))
      goto LABEL_7;
    v6 = (_QWORD *)v2;
    v7 = static _SetStorage.resize(original:capacity:move:)();
    v14 = v7;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_6;
    v15 = 0;
    v16 = (_QWORD *)(v3 + 56);
    v17 = 1 << *(_BYTE *)(v3 + 32);
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v19 = v18 & *(_QWORD *)(v3 + 56);
    v20 = (unint64_t)(v17 + 63) >> 6;
    v21 = v7 + 56;
    while (1)
    {
      if (v19)
      {
        v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v24 = v23 | (v15 << 6);
        goto LABEL_36;
      }
      v9 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_74;
      if (v9 >= v20)
        break;
      v25 = v16[v9];
      ++v15;
      if (!v25)
      {
        v15 = v9 + 1;
        if (v9 + 1 >= v20)
          break;
        v25 = v16[v15];
        if (!v25)
        {
          v15 = v9 + 2;
          if (v9 + 2 >= v20)
            break;
          v25 = v16[v15];
          if (!v25)
          {
            v15 = v9 + 3;
            if (v9 + 3 >= v20)
              break;
            v25 = v16[v15];
            if (!v25)
            {
              v9 += 4;
              if (v9 >= v20)
                break;
              v25 = v16[v9];
              if (!v25)
              {
                while (1)
                {
                  v15 = v9 + 1;
                  if (__OFADD__(v9, 1))
                    goto LABEL_75;
                  if (v15 >= v20)
                    goto LABEL_68;
                  v25 = v16[v15];
                  ++v9;
                  if (v25)
                    goto LABEL_35;
                }
              }
              v15 = v9;
            }
          }
        }
      }
LABEL_35:
      v19 = (v25 - 1) & v25;
      v24 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_36:
      v26 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v24);
      Hasher.init(_seed:)();
      v8 = *(_QWORD *)(v26 + 16);
      v6 = *(_QWORD **)(v26 + 24);
      v7 = *(_QWORD *)(v26 + 32);
      LODWORD(v9) = *(unsigned __int8 *)(v26 + 40);
      switch(v9 >> 4)
      {
        case 0u:
          Hasher._combine(_:)(v7);
          goto LABEL_51;
        case 1u:
        case 2u:
          Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
          goto LABEL_51;
        case 3u:
        case 7u:
          if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
            v27 = *(_QWORD *)(v26 + 16);
          else
            v27 = 0;
          Hasher._combine(_:)(v27);
          goto LABEL_51;
        case 4u:
          if ((v8 & 0x7FFFFF) == 0 && (*(_QWORD *)(v26 + 16) & 0x7F800000) == 0)
            v29 = 0;
          else
            v29 = *(_QWORD *)(v26 + 16);
          Hasher._combine(_:)(v29);
          goto LABEL_51;
        case 8u:
          Data.hash(into:)((uint64_t)v47, v8, *(_QWORD *)(v26 + 24));
LABEL_51:
          v6 = v47;
          v7 = Hasher._finalize()();
          v30 = -1 << *(_BYTE *)(v14 + 32);
          v31 = v7 & ~v30;
          v32 = v31 >> 6;
          if (((-1 << v31) & ~*(_QWORD *)(v21 + 8 * (v31 >> 6))) != 0)
          {
            v22 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v21 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
            goto LABEL_17;
          }
          LOBYTE(v9) = 0;
          v33 = (unint64_t)(63 - v30) >> 6;
          break;
        default:
          goto LABEL_76;
      }
      do
      {
        if (++v32 == v33 && (v9 & 1) != 0)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          v42 = v7;
          v43 = v8;
          v44 = v9;
          swift_retain();
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v43, (unint64_t)v6, v42, v44);
          _StringGuts.grow(_:)(79);
          v45._object = (void *)0x800000018230A590;
          v45._countAndFlagsBits = 0xD00000000000004DLL;
          String.append(_:)(v45);
          _print_unlocked<A, B>(_:_:)();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x181E8799CLL);
        }
        v34 = v32 == v33;
        if (v32 == v33)
          v32 = 0;
        LOBYTE(v9) = v34 | v9;
        v35 = *(_QWORD *)(v21 + 8 * v32);
      }
      while (v35 == -1);
      v22 = __clz(__rbit64(~v35)) + (v32 << 6);
LABEL_17:
      *(_QWORD *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v22) = v26;
      ++*(_QWORD *)(v14 + 16);
    }
LABEL_68:
    v40 = 1 << *(_BYTE *)(v3 + 32);
    if (v40 > 63)
      bzero((void *)(v3 + 56), ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v16 = -1 << v40;
    v2 = v46;
    *(_QWORD *)(v3 + 16) = 0;
LABEL_6:
    swift_release();
    v3 = v14;
LABEL_7:
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    v6 = v47;
    v7 = Hasher._finalize()();
    v9 = v3 + 56;
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = v7 & ~v10;
    v12 = v11 >> 6;
    if (((-1 << v11) & ~*(_QWORD *)(v3 + 56 + 8 * (v11 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v11) & ~*(_QWORD *)(v3 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v10) >> 6;
      do
      {
        if (++v12 == v37 && (v36 & 1) != 0)
          goto LABEL_73;
        v38 = v12 == v37;
        if (v12 == v37)
          v12 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v9 + 8 * v12);
      }
      while (v39 == -1);
      v13 = __clz(__rbit64(~v39)) + (v12 << 6);
    }
    *(_QWORD *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v47[9];
    ++*(_QWORD *)(v3 + 16);
    v5 = __CocoaSet.Iterator.next()();
    if (v5)
      continue;
    break;
  }
LABEL_70:
  swift_release();
  return v3;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v5);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  AnyHashable._rawHashValue(seed:)(a2[5]);
  v4 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << v4;
  v5 = a2[6] + 40 * v4;
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a1 + 32);
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  BOOL v83;
  uint64_t v84;
  Swift::Int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  int64_t v102;
  int64_t v103;
  uint64_t v105;

  v9 = a3;
  v10 = *v6;
  v11 = *(_QWORD *)(*v6 + 16);
  v12 = *(_QWORD *)(*v6 + 24);
  if (v12 > v11 && (a6 & 1) != 0)
  {
    v13 = *v6;
    goto LABEL_121;
  }
  v99 = result;
  v100 = a2;
  v105 = *v6;
  v98 = v6;
  if ((a6 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
    if (v12 > v11)
    {
      v39 = static _SetStorage.copy(original:)();
      v13 = v39;
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_102;
      result = v39 + 56;
      v40 = v10 + 56;
      v41 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
      if (v13 != v10 || result >= v40 + 8 * v41)
        result = (unint64_t)memmove((void *)result, (const void *)(v10 + 56), 8 * v41);
      v42 = 0;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v10 + 16);
      v43 = 1 << *(_BYTE *)(v10 + 32);
      v44 = -1;
      if (v43 < 64)
        v44 = ~(-1 << v43);
      v45 = v44 & *(_QWORD *)(v10 + 56);
      v46 = (unint64_t)(v43 + 63) >> 6;
      while (1)
      {
        if (v45)
        {
          v47 = __clz(__rbit64(v45));
          v45 &= v45 - 1;
          v48 = v47 | (v42 << 6);
        }
        else
        {
          v55 = v42 + 1;
          if (__OFADD__(v42, 1))
            goto LABEL_126;
          v9 = a3;
          if (v55 >= v46)
            goto LABEL_102;
          v56 = *(_QWORD *)(v40 + 8 * v55);
          ++v42;
          if (!v56)
          {
            v42 = v55 + 1;
            if (v55 + 1 >= v46)
              goto LABEL_102;
            v56 = *(_QWORD *)(v40 + 8 * v42);
            if (!v56)
            {
              v42 = v55 + 2;
              if (v55 + 2 >= v46)
                goto LABEL_102;
              v56 = *(_QWORD *)(v40 + 8 * v42);
              if (!v56)
              {
                v42 = v55 + 3;
                if (v55 + 3 >= v46)
                  goto LABEL_102;
                v56 = *(_QWORD *)(v40 + 8 * v42);
                if (!v56)
                {
                  v57 = v55 + 4;
                  if (v57 >= v46)
                    goto LABEL_102;
                  v56 = *(_QWORD *)(v40 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      v42 = v57 + 1;
                      if (__OFADD__(v57, 1))
                        goto LABEL_130;
                      if (v42 >= v46)
                        break;
                      v56 = *(_QWORD *)(v40 + 8 * v42);
                      ++v57;
                      if (v56)
                        goto LABEL_65;
                    }
LABEL_102:
                    swift_release();
                    *v98 = v13;
LABEL_120:
                    result = v99;
                    a2 = v100;
LABEL_121:
                    *(_QWORD *)(v13 + 8 * (a5 >> 6) + 56) |= 1 << a5;
                    v93 = (unint64_t *)(*(_QWORD *)(v13 + 48) + 32 * a5);
                    *v93 = result;
                    v93[1] = a2;
                    v93[2] = v9;
                    v93[3] = a4;
                    v94 = *(_QWORD *)(v13 + 16);
                    v95 = __OFADD__(v94, 1);
                    v96 = v94 + 1;
                    if (!v95)
                    {
                      *(_QWORD *)(v13 + 16) = v96;
                      return result;
                    }
LABEL_128:
                    __break(1u);
                    goto LABEL_129;
                  }
                  v42 = v57;
                }
              }
            }
          }
LABEL_65:
          v45 = (v56 - 1) & v56;
          v48 = __clz(__rbit64(v56)) + (v42 << 6);
        }
        v49 = 32 * v48;
        v50 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v49);
        v51 = v50[1];
        v52 = v50[2];
        v53 = v50[3];
        v54 = (_QWORD *)(*(_QWORD *)(v13 + 48) + v49);
        *v54 = *v50;
        v54[1] = v51;
        v54[2] = v52;
        v54[3] = v53;
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
      }
    }
    v59 = static _SetStorage.resize(original:capacity:move:)();
    v13 = v59;
    if (*(_QWORD *)(v10 + 16))
    {
      v97 = a4;
      v60 = 1 << *(_BYTE *)(v10 + 32);
      v61 = v10 + 56;
      if (v60 < 64)
        v62 = ~(-1 << v60);
      else
        v62 = -1;
      v63 = v62 & *(_QWORD *)(v10 + 56);
      v103 = (unint64_t)(v60 + 63) >> 6;
      v64 = v59 + 56;
      result = swift_retain();
      v65 = 0;
      while (1)
      {
        if (v63)
        {
          v68 = __clz(__rbit64(v63));
          v63 &= v63 - 1;
          v69 = v68 | (v65 << 6);
        }
        else
        {
          v70 = v65 + 1;
          if (__OFADD__(v65, 1))
            goto LABEL_127;
          if (v70 >= v103)
            goto LABEL_123;
          v71 = *(_QWORD *)(v61 + 8 * v70);
          ++v65;
          if (!v71)
          {
            v65 = v70 + 1;
            if (v70 + 1 >= v103)
              goto LABEL_123;
            v71 = *(_QWORD *)(v61 + 8 * v65);
            if (!v71)
            {
              v65 = v70 + 2;
              if (v70 + 2 >= v103)
                goto LABEL_123;
              v71 = *(_QWORD *)(v61 + 8 * v65);
              if (!v71)
              {
                v65 = v70 + 3;
                if (v70 + 3 >= v103)
                  goto LABEL_123;
                v71 = *(_QWORD *)(v61 + 8 * v65);
                if (!v71)
                {
                  v72 = v70 + 4;
                  if (v72 >= v103)
                    goto LABEL_123;
                  v71 = *(_QWORD *)(v61 + 8 * v72);
                  if (!v71)
                  {
                    while (1)
                    {
                      v65 = v72 + 1;
                      if (__OFADD__(v72, 1))
                        goto LABEL_131;
                      if (v65 >= v103)
                        break;
                      v71 = *(_QWORD *)(v61 + 8 * v65);
                      ++v72;
                      if (v71)
                        goto LABEL_92;
                    }
LABEL_123:
                    swift_release_n();
                    a4 = v97;
LABEL_106:
                    *v6 = v13;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
                    v85 = Hasher._finalize()();
                    v86 = -1 << *(_BYTE *)(v13 + 32);
                    a5 = v85 & ~v86;
                    if (((*(_QWORD *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
                    {
                      v87 = *(_QWORD *)(v13 + 48);
                      v88 = v87 + 32 * a5;
                      v89 = *(_QWORD *)(v88 + 16) == v9 && *(_QWORD *)(v88 + 24) == a4;
                      if (v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
LABEL_119:
                        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        v90 = ~v86;
                        while (1)
                        {
                          a5 = (a5 + 1) & v90;
                          if (((*(_QWORD *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
                            break;
                          v91 = v87 + 32 * a5;
                          v92 = *(_QWORD *)(v91 + 16) == v9 && *(_QWORD *)(v91 + 24) == a4;
                          if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            goto LABEL_119;
                        }
                      }
                    }
                    goto LABEL_120;
                  }
                  v65 = v72;
                }
              }
            }
          }
LABEL_92:
          v63 = (v71 - 1) & v71;
          v69 = __clz(__rbit64(v71)) + (v65 << 6);
        }
        v73 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 32 * v69);
        v74 = *v73;
        v75 = v73[1];
        v77 = v73[2];
        v76 = v73[3];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v78 = -1 << *(_BYTE *)(v13 + 32);
        v79 = result & ~v78;
        v80 = v79 >> 6;
        if (((-1 << v79) & ~*(_QWORD *)(v64 + 8 * (v79 >> 6))) != 0)
        {
          v66 = __clz(__rbit64((-1 << v79) & ~*(_QWORD *)(v64 + 8 * (v79 >> 6)))) | v79 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        v81 = 0;
        v82 = (unint64_t)(63 - v78) >> 6;
        do
        {
          if (++v80 == v82 && (v81 & 1) != 0)
          {
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          v83 = v80 == v82;
          if (v80 == v82)
            v80 = 0;
          v81 |= v83;
          v84 = *(_QWORD *)(v64 + 8 * v80);
        }
        while (v84 == -1);
        v66 = __clz(__rbit64(~v84)) + (v80 << 6);
LABEL_74:
        *(_QWORD *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
        v67 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 32 * v66);
        *v67 = v74;
        v67[1] = v75;
        v67[2] = v77;
        v67[3] = v76;
        ++*(_QWORD *)(v13 + 16);
        v9 = a3;
        v10 = v105;
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  v14 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v14;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_105;
  v15 = 1 << *(_BYTE *)(v10 + 32);
  v101 = (_QWORD *)(v10 + 56);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & *(_QWORD *)(v10 + 56);
  v102 = (unint64_t)(v15 + 63) >> 6;
  v18 = v14 + 56;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_30;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
      goto LABEL_125;
    if (v24 >= v102)
    {
LABEL_66:
      swift_release();
      v58 = 1 << *(_BYTE *)(v10 + 32);
      v9 = a3;
      if (v58 > 63)
        bzero(v101, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v101 = -1 << v58;
      *(_QWORD *)(v10 + 16) = 0;
      goto LABEL_105;
    }
    v25 = v101[v24];
    ++v19;
    if (!v25)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v102)
        goto LABEL_66;
      v25 = v101[v19];
      if (!v25)
      {
        v19 = v24 + 2;
        if (v24 + 2 >= v102)
          goto LABEL_66;
        v25 = v101[v19];
        if (!v25)
        {
          v19 = v24 + 3;
          if (v24 + 3 >= v102)
            goto LABEL_66;
          v25 = v101[v19];
          if (!v25)
            break;
        }
      }
    }
LABEL_29:
    v17 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_30:
    v27 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 32 * v23);
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v27[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v13 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v18 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v18 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_124;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v18 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 32 * v20);
    *v21 = v28;
    v21[1] = v29;
    v21[2] = v30;
    v21[3] = v31;
    ++*(_QWORD *)(v13 + 16);
    v10 = v105;
  }
  v26 = v24 + 4;
  if (v26 >= v102)
    goto LABEL_66;
  v25 = v101[v26];
  if (v25)
  {
    v19 = v26;
    goto LABEL_29;
  }
  while (1)
  {
    v19 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v19 >= v102)
      goto LABEL_66;
    v25 = v101[v19];
    ++v26;
    if (v25)
      goto LABEL_29;
  }
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a1;
  v41 = a2;
  v42 = a3;
  v43 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  result = String.init<A>(_:)();
  v8 = result;
  v9 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    v8 = static String._copying(_:)();
    v14 = v13;
    result = swift_bridgeObjectRelease();
    v9 = v14;
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_3;
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  v15 = HIBYTE(v9) & 0xF;
  v40 = v8;
  v41 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      v25 = v15 - 1;
      if (v25)
      {
        v17 = 0;
        v26 = a5 + 48;
        v27 = a5 + 55;
        v28 = a5 + 87;
        if (a5 > 10)
        {
          v26 = 58;
        }
        else
        {
          v28 = 97;
          v27 = 65;
        }
        v29 = (unsigned __int8 *)&v40 + 1;
        do
        {
          v30 = *v29;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v12 = 0;
              if (v30 < 0x61 || v30 >= v28)
                goto LABEL_66;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          v32 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63)
            goto LABEL_65;
          v17 = v32 + (v30 + v31);
          if (__OFADD__(v32, (v30 + v31)))
            goto LABEL_65;
          ++v29;
          --v25;
        }
        while (v25);
LABEL_64:
        v12 = (unsigned __int8 *)v17;
        goto LABEL_66;
      }
LABEL_65:
      v12 = 0;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }
  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        v17 = 0;
        v33 = a5 + 48;
        v34 = a5 + 55;
        v35 = a5 + 87;
        if (a5 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        v36 = &v40;
        while (1)
        {
          v37 = *(unsigned __int8 *)v36;
          if (v37 < 0x30 || v37 >= v33)
          {
            if (v37 < 0x41 || v37 >= v34)
            {
              v12 = 0;
              if (v37 < 0x61 || v37 >= v35)
                goto LABEL_66;
              v38 = -87;
            }
            else
            {
              v38 = -55;
            }
          }
          else
          {
            v38 = -48;
          }
          v39 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63)
            goto LABEL_65;
          v17 = v39 + (v37 + v38);
          if (__OFADD__(v39, (v37 + v38)))
            goto LABEL_65;
          v36 = (uint64_t *)((char *)v36 + 1);
          if (!--v15)
            goto LABEL_64;
        }
      }
      goto LABEL_65;
    }
    if (v15)
    {
      v16 = v15 - 1;
      if (v16)
      {
        v17 = 0;
        v18 = a5 + 48;
        v19 = a5 + 55;
        v20 = a5 + 87;
        if (a5 > 10)
        {
          v18 = 58;
        }
        else
        {
          v20 = 97;
          v19 = 65;
        }
        v21 = (unsigned __int8 *)&v40 + 1;
        while (1)
        {
          v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              v12 = 0;
              if (v22 < 0x61 || v22 >= v20)
                goto LABEL_66;
              v23 = -87;
            }
            else
            {
              v23 = -55;
            }
          }
          else
          {
            v23 = -48;
          }
          v24 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63)
            goto LABEL_65;
          v17 = v24 - (v22 + v23);
          if (__OFSUB__(v24, (v22 + v23)))
            goto LABEL_65;
          ++v21;
          if (!--v16)
            goto LABEL_64;
        }
      }
      goto LABEL_65;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 *v31;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t *v39;
  unsigned int v40;
  char v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v44 = a1;
  v45 = a2;
  v46 = a3;
  v47 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  result = String.init<A>(_:)();
  v8 = result;
  v9 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    v8 = static String._copying(_:)();
    v14 = v13;
    result = swift_bridgeObjectRelease();
    v9 = v14;
    if ((v14 & 0x2000000000000000) == 0)
      goto LABEL_3;
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    v12 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  v15 = HIBYTE(v9) & 0xF;
  v44 = v8;
  v45 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      v27 = v15 - 1;
      if (v27)
      {
        v17 = 0;
        v28 = a5 + 48;
        v29 = a5 + 55;
        v30 = a5 + 87;
        if (a5 > 10)
        {
          v28 = 58;
        }
        else
        {
          v30 = 97;
          v29 = 65;
        }
        v31 = (unsigned __int8 *)&v44 + 1;
        do
        {
          v32 = *v31;
          if (v32 < 0x30 || v32 >= v28)
          {
            if (v32 < 0x41 || v32 >= v29)
            {
              v12 = 0;
              if (v32 < 0x61 || v32 >= v30)
                goto LABEL_67;
              v33 = -87;
            }
            else
            {
              v33 = -55;
            }
          }
          else
          {
            v33 = -48;
          }
          if (!is_mul_ok(v17, a5))
            goto LABEL_66;
          v34 = v17 * a5;
          v35 = v32 + v33;
          v26 = __CFADD__(v34, v35);
          v17 = v34 + v35;
          if (v26)
            goto LABEL_66;
          ++v31;
          --v27;
        }
        while (v27);
LABEL_65:
        v12 = (unsigned __int8 *)v17;
        goto LABEL_67;
      }
LABEL_66:
      v12 = 0;
LABEL_67:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }
  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        v17 = 0;
        v36 = a5 + 48;
        v37 = a5 + 55;
        v38 = a5 + 87;
        if (a5 > 10)
        {
          v36 = 58;
        }
        else
        {
          v38 = 97;
          v37 = 65;
        }
        v39 = &v44;
        while (1)
        {
          v40 = *(unsigned __int8 *)v39;
          if (v40 < 0x30 || v40 >= v36)
          {
            if (v40 < 0x41 || v40 >= v37)
            {
              v12 = 0;
              if (v40 < 0x61 || v40 >= v38)
                goto LABEL_67;
              v41 = -87;
            }
            else
            {
              v41 = -55;
            }
          }
          else
          {
            v41 = -48;
          }
          if (!is_mul_ok(v17, a5))
            goto LABEL_66;
          v42 = v17 * a5;
          v43 = v40 + v41;
          v26 = __CFADD__(v42, v43);
          v17 = v42 + v43;
          if (v26)
            goto LABEL_66;
          v39 = (uint64_t *)((char *)v39 + 1);
          if (!--v15)
            goto LABEL_65;
        }
      }
      goto LABEL_66;
    }
    if (v15)
    {
      v16 = v15 - 1;
      if (v16)
      {
        v17 = 0;
        v18 = a5 + 48;
        v19 = a5 + 55;
        v20 = a5 + 87;
        if (a5 > 10)
        {
          v18 = 58;
        }
        else
        {
          v20 = 97;
          v19 = 65;
        }
        v21 = (unsigned __int8 *)&v44 + 1;
        while (1)
        {
          v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              v12 = 0;
              if (v22 < 0x61 || v22 >= v20)
                goto LABEL_67;
              v23 = -87;
            }
            else
            {
              v23 = -55;
            }
          }
          else
          {
            v23 = -48;
          }
          if (!is_mul_ok(v17, a5))
            goto LABEL_66;
          v24 = v17 * a5;
          v25 = v22 + v23;
          v26 = v24 >= v25;
          v17 = v24 - v25;
          if (!v26)
            goto LABEL_66;
          ++v21;
          if (!--v16)
            goto LABEL_65;
        }
      }
      goto LABEL_66;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t specialized Array._customRemoveLast()()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v0 = v1;
  if (!(_DWORD)result || (v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

_QWORD *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5(_QWORD *(*a1)(_QWORD *__return_ptr, _QWORD, _QWORD), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  _QWORD v13[2];

  if ((a6 & 0x1000000000000000) != 0)
    return 0;
  if ((a6 & 0x2000000000000000) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a5 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(v11, a3, a4, a5, a6, a1);
}

_QWORD *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5(_QWORD *(*a1)(_QWORD *__return_ptr, _QWORD, _QWORD), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  _QWORD v13[2];

  if ((a6 & 0x1000000000000000) != 0)
    return 0;
  if ((a6 & 0x2000000000000000) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a5 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(v11, a3, a4, a5, a6, a1);
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, a3, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(a1, a2, a3, (uint64_t (*)(void))specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:));
  *a4 = result;
  a4[1] = v6;
  return result;
}

id specialized static URL.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  result = (id)_foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
    return objc_msgSend(v2, sel_isEqual_, v5);
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (!v6)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v9 = *(_QWORD *)(v3 + 16) == *(_QWORD *)(v6 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(v6 + 24);
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      v12 = *(_QWORD *)(v4 + 16);
      v11 = *(_QWORD *)(v4 + 24);
      swift_bridgeObjectRetain();
      if (!v7)
      {
        if (!v11)
          return objc_msgSend(v2, sel_isEqual_, v5);
LABEL_22:
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if (!v7)
        return objc_msgSend(v2, sel_isEqual_, v5);
      v11 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(v7 + 16);
    v13 = *(_QWORD *)(v7 + 24);
    swift_bridgeObjectRetain();
    if (v11)
    {
      if (v13)
      {
        if (v12 == v14 && v11 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = 0;
          if ((v15 & 1) == 0)
            return result;
        }
        return objc_msgSend(v2, sel_isEqual_, v5);
      }
      goto LABEL_22;
    }
    if (v13)
      goto LABEL_22;
    return objc_msgSend(v2, sel_isEqual_, v5);
  }
  return result;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  char *v10;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;

  v5 = a4;
  if ((a5 & 1) == 0)
  {
    if (a1 == a2)
      return 1;
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      v13 = *(unsigned __int8 *)(a3 + a1);
      v14 = ~a1 + a2;
      v15 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a4 & 0xF6) == 0)
              return 0;
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a4 & 0x76) == 0)
              return 0;
            goto LABEL_70;
          case '+':
            if ((a4 & 0xF7) == 0)
              return 0;
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a4 < 0x10u)
              return 0;
            goto LABEL_70;
          default:
            if ((v13 - 58) > 0xFFFFFFF5)
              goto LABEL_69;
            break;
        }
        switch(v13)
        {
          case ':':
            if ((a4 & 0xD2) == 0)
              return 0;
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a4 < 0x40u)
              return 0;
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if ((v13 - 91) > 0xFFFFFFE5)
              goto LABEL_69;
            if (v13 == 95)
            {
              if (a4 < 2u)
                return 0;
            }
            else if ((v13 - 123) > 0xFFFFFFE5)
            {
LABEL_69:
              if (!a4)
                return 0;
            }
            else
            {
              result = 0;
              if (v13 != 126 || a4 < 2u)
                return result;
            }
LABEL_70:
            if (!v14)
              return 1;
            v16 = *v15++;
            v13 = v16;
            --v14;
            if (v16 < 0)
              return 0;
            continue;
        }
      }
    }
    return 0;
  }
  if (a1 != a2)
  {
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      v6 = 0;
      v8 = *(unsigned __int8 *)(a3 + a1);
      v9 = ~a1 + a2;
      v10 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v8)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_10:
            if ((v5 & 0xF6) == 0)
              return 0;
            goto LABEL_35;
          case '%':
            if (v6)
              return 0;
            v6 = 2;
            goto LABEL_41;
          case '&':
LABEL_16:
            if ((v5 & 0x76) == 0)
              return 0;
            goto LABEL_35;
          case '+':
            if ((v5 & 0xFFFFFFF7) == 0)
              return 0;
            goto LABEL_35;
          case '-':
          case '.':
            goto LABEL_34;
          case '/':
LABEL_18:
            if (v5 < 0x10)
              return 0;
            goto LABEL_35;
          default:
            if ((v8 - 58) > 0xFFFFFFF5)
              goto LABEL_34;
            break;
        }
        switch(v8)
        {
          case ':':
            if ((v5 & 0xD2) == 0)
              return 0;
            goto LABEL_35;
          case ';':
            goto LABEL_10;
          case '=':
            goto LABEL_16;
          case '?':
            if (v5 < 0x40)
              return 0;
            goto LABEL_35;
          case '@':
            goto LABEL_18;
          default:
            if ((v8 - 91) > 0xFFFFFFE5)
              goto LABEL_34;
            if (v8 == 95)
            {
              if (v5 < 2)
                return 0;
            }
            else if ((v8 - 123) > 0xFFFFFFE5)
            {
LABEL_34:
              if (!v5)
                return 0;
            }
            else
            {
              result = 0;
              if (v8 != 126 || v5 < 2)
                return result;
            }
LABEL_35:
            if (v6-- < 1)
            {
              v6 = 0;
            }
            else if ((v8 - 58) <= 0xFFFFFFF5)
            {
              result = 0;
              if ((v8 - 65) > 0x25 || ((1 << (v8 - 65)) & 0x3F0000003FLL) == 0)
                return result;
            }
LABEL_41:
            if (!v9)
              return v6 == 0;
            v12 = *v10++;
            v8 = v12;
            --v9;
            if (v12 < 0)
              return 0;
            continue;
        }
      }
    }
    return 0;
  }
  v6 = 0;
  return v6 == 0;
}

_QWORD *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(_QWORD *result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, _QWORD *(*a6)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *(*v16)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unint64_t v17;
  unint64_t v18;
  _QWORD *(*v19)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *(*v20)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unint64_t v21;
  _QWORD *(*v22)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *v23;
  char *v24;
  _QWORD *(*v25)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    v27 = v6;
    v16 = a6;
    result = (_QWORD *)_StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v16;
    a2 = (unint64_t)result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = (char *)(a2 >> 16);
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v25 = a6;
  v27 = v6;
  v17 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v17 = HIBYTE(a5) & 0xF;
  if (v17 < a2 >> 16)
    goto LABEL_33;
  result = (_QWORD *)String.UTF8View._foreignDistance(from:to:)();
  v15 = (char *)result;
  v6 = v27;
  a6 = v25;
  if (v14 == v13)
  {
LABEL_14:
    v18 = v10;
    v19 = a6;
    result = (_QWORD *)_StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
    a6 = v19;
    v10 = (unint64_t)result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    v20 = a6;
    result = (_QWORD *)_StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = (unint64_t)result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (_QWORD *)((a3 >> 16) - (v10 >> 16));
    goto LABEL_21;
  }
  v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v21 = a4 & 0xFFFFFFFFFFFFLL;
  if (v21 < v10 >> 16)
    goto LABEL_31;
  if (v21 < a3 >> 16)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  v22 = a6;
  result = (_QWORD *)String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_30;
  }
  v23 = result;
  if ((uint64_t)((char *)result + (unint64_t)v15) < (uint64_t)v15)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v11)
    v24 = &v15[(_QWORD)v11];
  else
    v24 = 0;
  result = a6(&v26, v24, v23);
  if (!v6)
    return (_QWORD *)v26;
  return result;
}

uint64_t specialized StringProtocol.hexToAscii(_:)(unsigned __int8 a1)
{
  uint64_t result;
  Swift::String v2;

  if (a1 <= 0xFu)
    return byte_182169830[(char)a1];
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned __int8 a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int v25;
  unint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unint64_t v30;

  if (!a1)
  {
LABEL_50:
    __break(1u);
    JUMPOUT(0x181E8C8B4);
  }
  v30 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
  {
    v10 = 0;
    goto LABEL_43;
  }
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v29 = 4 << v13;
  v14 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0)
    v14 = a5 & 0xFFFFFFFFFFFFLL;
  v27 = v14;
  v28 = a7 & 0xF6;
  v24 = a7 & 0xF7;
  v25 = a7 & 0x76;
  v23 = a7 & 0xD2;
  swift_bridgeObjectRetain();
  v10 = 0;
  v15 = a3;
  while (2)
  {
    v16 = Substring.UTF8View.subscript.getter();
    if ((v15 & 0xC) == v29)
    {
      v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_13:
        v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_17;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_13;
    }
    if (v27 <= v15 >> 16)
      goto LABEL_46;
    v15 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    switch(v16)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_18:
        v18 = v28;
        goto LABEL_34;
      case '&':
LABEL_22:
        if (!v25)
          goto LABEL_38;
        goto LABEL_35;
      case '+':
        v18 = v24;
        goto LABEL_34;
      case '-':
      case '.':
        goto LABEL_33;
      case '/':
LABEL_24:
        if (a7 < 0x10u)
          goto LABEL_38;
        goto LABEL_35;
      default:
        if ((v16 - 58) <= 0xF5u)
        {
          switch(v16)
          {
            case ':':
              v18 = v23;
              goto LABEL_34;
            case ';':
              goto LABEL_18;
            case '=':
              goto LABEL_22;
            case '?':
              if (a7 < 0x40u)
                goto LABEL_38;
              goto LABEL_35;
            case '@':
              goto LABEL_24;
            default:
              if ((v16 - 91) > 0xE5u)
                break;
              if (v16 == 95)
                goto LABEL_31;
              if ((v16 - 123) > 0xE5u)
                break;
              if (v16 != 126)
                goto LABEL_38;
LABEL_31:
              if (a7 < 2u)
                goto LABEL_38;
              goto LABEL_35;
          }
        }
LABEL_33:
        v18 = a7;
LABEL_34:
        if (v18)
        {
LABEL_35:
          if (v10 < a2)
          {
            v19 = v10;
            v17 = 1;
            goto LABEL_10;
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_38:
        if (v10 >= a2)
          goto LABEL_47;
        *(_BYTE *)(a1 + v10) = 37;
        v20 = specialized StringProtocol.hexToAscii(_:)(v16 >> 4);
        if (v10 + 1 >= a2)
          goto LABEL_48;
        *(_BYTE *)(a1 + v10 + 1) = v20;
        v19 = v10 + 2;
        v21 = specialized StringProtocol.hexToAscii(_:)(v16 & 0xF);
        if (v10 + 2 < a2)
        {
          v16 = v21;
          v17 = 3;
LABEL_10:
          *(_BYTE *)(a1 + v19) = v16;
          v10 += v17;
          if (v30 == v15 >> 14)
            goto LABEL_42;
          continue;
        }
        __break(1u);
LABEL_42:
        swift_bridgeObjectRelease();
LABEL_43:
        if (v10 >= a2)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        *(_BYTE *)(a1 + v10) = 0;
        return String.init(cString:)();
    }
  }
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  int64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < -1)
    goto LABEL_9;
  v12 = v11 + 1;
  if (v11 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v17 - v13, v12, a1, a2, a3, a4, a5);
  }
  else
  {
    v15 = swift_slowAlloc();
    v14 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v15, v12, a1, a2, a3, a4, a5);
    MEMORY[0x186DA9E78](v15, -1, -1);
  }
  return v14;
}

uint64_t specialized static URL._cfURL(from:baseURL:)(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = 81920;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    i = *(_QWORD **)(a1 + 40);
    v78 = *(_QWORD *)(a1 + 16);
    v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    v8 = &v78;
    v9 = StringProtocol._toUTF16Offsets(_:)();
    v12 = v11 - v9;
    if (__OFSUB__(v11, v9))
    {
      __break(1u);
      goto LABEL_70;
    }
    v8 = (uint64_t *)v9;
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v1 = i[2];
    v10 = i[3];
    v7 = v1 + 1;
    if (v1 >= v10 >> 1)
      goto LABEL_71;
    goto LABEL_7;
  }
  for (i = (_QWORD *)MEMORY[0x1E0DEE9D8]; (*(_BYTE *)(a1 + 72) & 1) == 0; ++v3)
  {
    v1 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
    v78 = v5;
    v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    v8 = &v78;
    v14 = StringProtocol._toUTF16Offsets(_:)();
    v12 = v15 - v14;
    if (!__OFSUB__(v15, v14))
    {
      v16 = (uint64_t *)v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_10;
      goto LABEL_73;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v7, 1, i);
LABEL_7:
    i[2] = v7;
    v13 = &i[2 * v1];
    v13[4] = v8;
    v13[5] = v12;
  }
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
    goto LABEL_18;
  do
  {
    v78 = v5;
    v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    v16 = &v78;
    v20 = StringProtocol._toUTF16Offsets(_:)();
    v12 = v21 - v20;
    if (!__OFSUB__(v21, v20))
    {
      v22 = (uint64_t *)v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_15;
      goto LABEL_75;
    }
    __break(1u);
LABEL_73:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_10:
    v3 |= 2u;
    v18 = i[2];
    v17 = i[3];
    if (v18 >= v17 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, i);
    i[2] = v18 + 1;
    v19 = &i[2 * v18];
    v19[4] = v16;
    v19[5] = v12;
  }
  while ((*(_BYTE *)(a1 + 96) & 1) == 0);
  while (1)
  {
LABEL_18:
    v26 = *(_BYTE *)(a1 + 144);
    if (!v26)
      v3 |= 0x10u;
    v77 = v5;
    if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    {
      if ((*(_QWORD *)(a1 + 112) ^ *(_QWORD *)(a1 + 104)) >> 14)
        v27 = 0;
      else
        v27 = (v3 & 0x16) == 0;
      if (v27)
      {
        if ((*(_BYTE *)(a1 + 144) & 1) != 0)
          break;
        goto LABEL_33;
      }
      v78 = v5;
      v79 = v4;
      v76 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      v28 = &v78;
      v29 = StringProtocol._toUTF16Offsets(_:)();
      v31 = v30 - v29;
      if (__OFSUB__(v30, v29))
      {
        __break(1u);
      }
      else
      {
        v28 = (uint64_t *)v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_27:
          v3 |= 8u;
          v33 = i[2];
          v32 = i[3];
          if (v33 >= v32 >> 1)
            i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, i);
          i[2] = v33 + 1;
          v34 = &i[2 * v33];
          v34[4] = v28;
          v34[5] = v31;
          v5 = v77;
          v4 = v76;
          goto LABEL_30;
        }
      }
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
      goto LABEL_27;
    }
LABEL_30:
    if ((v26 & 1) != 0)
      break;
LABEL_33:
    v78 = v5;
    v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    v22 = &v78;
    v35 = StringProtocol._toUTF16Offsets(_:)();
    v12 = v36 - v35;
    if (!__OFSUB__(v36, v35))
    {
      v37 = (uint64_t *)v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_35;
      goto LABEL_78;
    }
    __break(1u);
LABEL_75:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_15:
    v3 |= 4u;
    v24 = i[2];
    v23 = i[3];
    if (v24 >= v23 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, i);
    i[2] = v24 + 1;
    v25 = &i[2 * v24];
    v25[4] = v22;
    v25[5] = v12;
  }
  while (1)
  {
    v41 = *(_BYTE *)(a1 + 168);
    if ((v41 & 1) == 0)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
    v43 = i[2];
    v42 = i[3];
    if (v43 >= v42 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, i);
    i[2] = v43 + 1;
    *(_OWORD *)&i[2 * v43 + 4] = xmmword_1820E51B0;
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      goto LABEL_44;
LABEL_53:
    v54 = v5;
    v5 = *(_QWORD *)(a1 + 176);
    v78 = v54;
    v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    v37 = &v78;
    v55 = StringProtocol._toUTF16Offsets(_:)();
    v12 = v56 - v55;
    if (!__OFSUB__(v56, v55))
    {
      v57 = (uint64_t *)v55;
      v59 = i[2];
      v58 = i[3];
      v60 = v59 + 1;
      if (v59 >= v58 >> 1)
        goto LABEL_80;
      goto LABEL_55;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_35:
    v39 = i[2];
    v38 = i[3];
    if (v39 >= v38 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, i);
    i[2] = v39 + 1;
    v40 = &i[2 * v39];
    v40[4] = v37;
    v40[5] = v12;
  }
  v78 = v5;
  v79 = v4;
  lazy protocol witness table accessor for type String and conformance String();
  v37 = &v78;
  v48 = StringProtocol._toUTF16Offsets(_:)();
  v12 = v49 - v48;
  if (__OFSUB__(v49, v48))
  {
    __break(1u);
    goto LABEL_77;
  }
  v50 = v48;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
  v52 = i[2];
  v51 = i[3];
  if (v52 >= v51 >> 1)
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, i);
  i[2] = v52 + 1;
  v53 = &i[2 * v52];
  v53[4] = v50;
  v53[5] = v12;
  v5 = v77;
  if ((*(_BYTE *)(a1 + 192) & 1) == 0)
    goto LABEL_53;
LABEL_44:
  if ((*(_BYTE *)(a1 + 216) & 1) != 0)
  {
LABEL_45:
    if ((v41 & 1) != 0)
      goto LABEL_46;
LABEL_60:
    v44 = String.subscript.getter();
  }
  else
  {
    while (1)
    {
      v62 = v5;
      v59 = *(_QWORD *)(a1 + 200);
      v60 = *(_QWORD *)(a1 + 208);
      v78 = v62;
      v79 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      v57 = &v78;
      v63 = StringProtocol._toUTF16Offsets(_:)();
      v12 = v64 - v63;
      if (!__OFSUB__(v64, v63))
        break;
      __break(1u);
LABEL_80:
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v60, 1, i);
LABEL_55:
      i[2] = v60;
      v61 = &i[2 * v59];
      v61[4] = v57;
      v61[5] = v12;
      v5 = v77;
      if ((*(_BYTE *)(a1 + 216) & 1) != 0)
        goto LABEL_45;
    }
    v65 = v63;
    v67 = i[2];
    v66 = i[3];
    if (v67 >= v66 >> 1)
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, i);
    i[2] = v67 + 1;
    v68 = &i[2 * v67];
    v68[4] = v65;
    v68[5] = v12;
    if ((v41 & 1) == 0)
      goto LABEL_60;
LABEL_46:
    v44 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  v69 = v44;
  v70 = v45;
  v71 = v46;
  v72 = v47;
  if ((v44 ^ v45) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    Substring.UTF8View.index(before:)();
    Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  if ((*(_BYTE *)(a1 + 217) & 1) != 0)
LABEL_65:
    specialized Sequence<>.starts<A>(with:)((uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:), v69, v70, v71, v72);
  else
    specialized Sequence<>.starts<A>(with:)((uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:), v44, v45, v46, v47);
  v73 = i[2];
  String._bridgeToObjectiveCImpl()();
  if (v73 >= 0x100)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v74 = _CFURLCreateWithRangesAndFlags();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return v74;
  }
  return result;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  _QWORD v30[2];
  uint64_t v31;

  if (!a1)
    goto LABEL_60;
  if ((a4 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a4) & 0xF;
  else
    v8 = a3 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v10 = 0;
  if (v8)
  {
    v31 = 4 * v8;
    v11 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v11) = 1;
    v12 = 4 << v11;
    v13 = 15;
    v14 = a3;
    while (1)
    {
      v17 = v13 & 0xC;
      v18 = v13;
      if (v17 == v12)
      {
        v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
        v14 = a3;
      }
      v19 = v18 >> 16;
      if (v18 >> 16 >= v8)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        JUMPOUT(0x181E8D634);
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        v22 = String.UTF8View._foreignSubscript(position:)();
        v14 = a3;
        v21 = v22;
        if (v17 != v12)
          goto LABEL_23;
      }
      else if ((a4 & 0x2000000000000000) != 0)
      {
        v30[0] = v14;
        v30[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        v21 = *((_BYTE *)v30 + v19);
        if (v17 != v12)
          goto LABEL_23;
      }
      else
      {
        v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v14 & 0x1000000000000000) == 0)
        {
          v20 = _StringObject.sharedUTF8.getter();
          v14 = a3;
        }
        v21 = *(_BYTE *)(v20 + v19);
        if (v17 != v12)
        {
LABEL_23:
          if ((a4 & 0x1000000000000000) != 0)
            goto LABEL_27;
          goto LABEL_24;
        }
      }
      v23 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v14, a4);
      v14 = a3;
      v13 = v23;
      if ((a4 & 0x1000000000000000) != 0)
      {
LABEL_27:
        if (v8 <= v13 >> 16)
          goto LABEL_55;
        v24 = String.UTF8View._foreignIndex(after:)();
        v14 = a3;
        v13 = v24;
        goto LABEL_29;
      }
LABEL_24:
      v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_29:
      switch(v21)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_30:
          v25 = a5 & 0xF6;
          goto LABEL_44;
        case '&':
LABEL_9:
          if ((a5 & 0x76) != 0)
            goto LABEL_10;
          goto LABEL_45;
        case '+':
          v25 = a5 & 0xF7;
          goto LABEL_44;
        case '-':
        case '.':
          goto LABEL_43;
        case '/':
LABEL_34:
          if (a5 < 0x10u)
            goto LABEL_45;
          goto LABEL_10;
        default:
          if ((v21 - 58) <= 0xF5u)
          {
            switch(v21)
            {
              case ':':
                v25 = a5 & 0xD2;
                goto LABEL_44;
              case ';':
                goto LABEL_30;
              case '=':
                goto LABEL_9;
              case '?':
                if (a5 < 0x40u)
                  goto LABEL_45;
                goto LABEL_10;
              case '@':
                goto LABEL_34;
              default:
                if ((v21 - 91) > 0xE5u)
                  break;
                if (v21 == 95)
                  goto LABEL_41;
                if ((v21 - 123) > 0xE5u)
                  break;
                if (v21 != 126)
                  goto LABEL_45;
LABEL_41:
                if (a5 < 2u)
                  goto LABEL_45;
                goto LABEL_10;
            }
          }
LABEL_43:
          v25 = a5;
LABEL_44:
          if (v25)
          {
LABEL_10:
            if (v10 >= a2)
              goto LABEL_54;
            v15 = v10;
            v16 = 1;
          }
          else
          {
LABEL_45:
            if (v10 >= a2)
              goto LABEL_56;
            *(_BYTE *)(a1 + v10) = 37;
            v26 = specialized StringProtocol.hexToAscii(_:)(v21 >> 4);
            if (v10 + 1 >= a2)
              goto LABEL_57;
            *(_BYTE *)(a1 + v10 + 1) = v26;
            v15 = v10 + 2;
            v27 = specialized StringProtocol.hexToAscii(_:)(v21 & 0xF);
            if (v10 + 2 >= a2)
              goto LABEL_58;
            v21 = v27;
            v16 = 3;
            v14 = a3;
          }
          *(_BYTE *)(a1 + v15) = v21;
          v10 += v16;
          if (v31 == v13 >> 14)
            goto LABEL_51;
          break;
      }
    }
  }
LABEL_51:
  swift_bridgeObjectRelease();
  if (v10 >= a2)
    goto LABEL_59;
  *(_BYTE *)(a1 + v10) = 0;
  return String.init(cString:)();
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  Swift::Int isStackAllocationSafe;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  if (v7 < -1)
    goto LABEL_14;
  v8 = v7 + 1;
  if (v7 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v13 - v9, v8, a1, a2, a3);
  }
  else
  {
    v11 = swift_slowAlloc();
    v10 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v11, v8, a1, a2, a3);
    MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return v10;
}

uint64_t _sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)(a1, a2, a3);
}

uint64_t _sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL9excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:), a3);
}

void (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4))(char *, _QWORD)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int16 v29;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  _BYTE v41[13];

  *(_QWORD *)&v41[5] = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a3) & 0xF;
  else
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  v36 = 4 * v6;
  v7 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = 4 << v7;
  v33 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v34 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v9 = 0;
  v32 = 0;
  v10 = 0;
  v11 = 15;
  while (1)
  {
    if (v36 == v11 >> 14)
      goto LABEL_147;
    v13 = v11 & 0xC;
    v14 = v11;
    if (v13 == v8)
      v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    v15 = v14 >> 16;
    if (v14 >> 16 >= v6)
      goto LABEL_152;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v17 = String.UTF8View._foreignSubscript(position:)();
      if (v13 == v8)
        goto LABEL_18;
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v37 = a2;
      v38 = v34;
      v17 = *((_BYTE *)&v37 + v15);
      if (v13 == v8)
        goto LABEL_18;
    }
    else
    {
      v16 = v33;
      if ((a2 & 0x1000000000000000) == 0)
        v16 = _StringObject.sharedUTF8.getter();
      v17 = *(_BYTE *)(v16 + v15);
      if (v13 == v8)
      {
LABEL_18:
        v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000) == 0)
          goto LABEL_23;
        goto LABEL_19;
      }
    }
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_23:
      v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_19:
    if (v6 <= v11 >> 16)
      goto LABEL_154;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if (v17 == 37)
    {
      if (v9)
        goto LABEL_150;
LABEL_26:
      if (v36 == v11 >> 14)
        goto LABEL_150;
      v18 = v11 & 0xC;
      v19 = v11;
      if (v18 == v8)
        v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      v20 = v19 >> 16;
      if (v19 >> 16 < v6)
      {
        if ((a3 & 0x1000000000000000) != 0)
        {
          v17 = String.UTF8View._foreignSubscript(position:)();
          if (v18 == v8)
            goto LABEL_35;
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          v37 = a2;
          v38 = v34;
          v17 = *((_BYTE *)&v37 + v20);
          if (v18 == v8)
            goto LABEL_35;
        }
        else
        {
          v21 = v33;
          if ((a2 & 0x1000000000000000) == 0)
            v21 = _StringObject.sharedUTF8.getter();
          v17 = *(_BYTE *)(v21 + v20);
          if (v18 == v8)
          {
LABEL_35:
            v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
            if ((a3 & 0x1000000000000000) != 0)
            {
LABEL_36:
              if (v6 <= v11 >> 16)
                goto LABEL_154;
              v11 = String.UTF8View._foreignIndex(after:)();
LABEL_63:
              if (v17 != 37)
              {
                v9 = 2;
                goto LABEL_65;
              }
LABEL_150:
              swift_bridgeObjectRelease();
              return 0;
            }
LABEL_62:
            v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_63;
          }
        }
        if ((a3 & 0x1000000000000000) != 0)
          goto LABEL_36;
        goto LABEL_62;
      }
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (!v9)
      break;
LABEL_65:
    switch(v17)
    {
      case '0':
        v12 = 0;
        if (v9 == 1)
          goto LABEL_130;
        if (v9 != 2)
          goto LABEL_7;
        goto LABEL_8;
      case '1':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 16;
            goto LABEL_8;
          }
LABEL_7:
          v12 = v32;
          goto LABEL_8;
        }
        v12 = 1;
        goto LABEL_130;
      case '2':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 32;
          goto LABEL_8;
        }
        v12 = 2;
        goto LABEL_130;
      case '3':
        if (v9 == 1)
        {
          v12 = 3;
LABEL_130:
          if ((((_WORD)v12 + v32) & 0x100) == 0)
          {
            v27 = v12 + v32;
            if (!specialized Set.contains(_:)(v12 + v32, a4))
            {
              *(_BYTE *)(a1 + v10) = v27;
              v22 = __OFADD__(v10++, 1);
              if (!v22)
              {
                v12 = 0;
                goto LABEL_8;
              }
              goto LABEL_157;
            }
            if (!__OFADD__(v10, 2))
            {
              if (v10 + 2 >= v10)
              {
                LOBYTE(v39) = 37;
                HIBYTE(v39) = specialized StringProtocol.hexToAscii(_:)(v27 >> 4);
                v40 = v17;
                if (a1)
                {
                  v28 = a1 + v10;
                  if ((unint64_t)&v39 < a1 + v10 + 3 && v28 < (unint64_t)v41)
                  {
                    _fatalErrorMessage(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E8E004);
                  }
                  v29 = v39;
                  *(_BYTE *)(v28 + 2) = v40;
                  *(_WORD *)v28 = v29;
                }
                v22 = __OFADD__(v10, 3);
                v10 += 3;
                if (!v22)
                {
                  v12 = v27;
                  goto LABEL_8;
                }
LABEL_159:
                __break(1u);
                __break(1u);
                __break(1u);
                goto LABEL_160;
              }
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        if (v9 != 2)
          goto LABEL_7;
        v12 = 48;
LABEL_8:
        v32 = v12;
        --v9;
        break;
      case '4':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 64;
          goto LABEL_8;
        }
        v12 = 4;
        goto LABEL_130;
      case '5':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 80;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 5;
        goto LABEL_130;
      case '6':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 96;
          goto LABEL_8;
        }
        v12 = 6;
        goto LABEL_130;
      case '7':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 112;
          goto LABEL_8;
        }
        v12 = 7;
        goto LABEL_130;
      case '8':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 128;
          goto LABEL_8;
        }
        v12 = 8;
        goto LABEL_130;
      case '9':
        if (v9 != 1)
        {
          if (v9 != 2)
            goto LABEL_7;
          v12 = 144;
          goto LABEL_8;
        }
        v12 = 9;
        goto LABEL_130;
      case 'A':
      case 'a':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 160;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 10;
        goto LABEL_130;
      case 'B':
      case 'b':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 176;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 11;
        goto LABEL_130;
      case 'C':
      case 'c':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 192;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 12;
        goto LABEL_130;
      case 'D':
      case 'd':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 208;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 13;
        goto LABEL_130;
      case 'E':
      case 'e':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 224;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 14;
        goto LABEL_130;
      case 'F':
      case 'f':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            v12 = 240;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        v12 = 15;
        goto LABEL_130;
      default:
        goto LABEL_150;
    }
  }
  while (1)
  {
    *(_BYTE *)(a1 + v10) = v17;
    v22 = __OFADD__(v10++, 1);
    if (v22)
      goto LABEL_153;
    if (v36 == v11 >> 14)
      break;
    v23 = v11 & 0xC;
    v24 = v11;
    if (v23 == v8)
      v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    v25 = v24 >> 16;
    if (v24 >> 16 >= v6)
      goto LABEL_152;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v17 = String.UTF8View._foreignSubscript(position:)();
      if (v23 == v8)
        goto LABEL_52;
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v37 = a2;
      v38 = v34;
      v17 = *((_BYTE *)&v37 + v25);
      if (v23 == v8)
        goto LABEL_52;
    }
    else
    {
      v26 = v33;
      if ((a2 & 0x1000000000000000) == 0)
        v26 = _StringObject.sharedUTF8.getter();
      v17 = *(_BYTE *)(v26 + v25);
      if (v23 == v8)
      {
LABEL_52:
        v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000) == 0)
          goto LABEL_40;
        goto LABEL_56;
      }
    }
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_40:
      v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_41;
    }
LABEL_56:
    if (v6 <= v11 >> 16)
      goto LABEL_154;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_41:
    if (v17 == 37)
      goto LABEL_26;
  }
  v9 = 0;
LABEL_147:
  swift_bridgeObjectRelease();
  if (!v9)
  {
    if ((v10 & 0x8000000000000000) == 0)
      return specialized String.init<A, B>(_validating:as:)(0, v10, a1);
LABEL_160:
    __break(1u);
  }
  return 0;
}

void (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(Swift::Int isStackAllocationSafe, unint64_t a2, uint64_t a3))(char *, _QWORD)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, _QWORD);
  uint64_t v9;
  _QWORD v11[2];

  v5 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
    v6 = isStackAllocationSafe;
    if (isStackAllocationSafe < 0)
      __break(1u);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v6 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v6 = isStackAllocationSafe & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v11 - v7, v5, a2, a3);
  }
  else
  {
    v9 = swift_slowAlloc();
    v8 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v5, a2, a3);
    MEMORY[0x186DA9E78](v9, -1, -1);
  }
  return v8;
}

BOOL _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

void (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6))(char *, _QWORD)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int16 v27;
  char v28;
  _BYTE v29[13];

  *(_QWORD *)&v29[5] = *MEMORY[0x1E0C80C00];
  v26 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14)
  {
    v6 = 0;
    return specialized String.init<A, B>(_validating:as:)(0, v6, a1);
  }
  v11 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = 4 << v11;
  v13 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v13 = a4 & 0xFFFFFFFFFFFFLL;
  v24 = v13;
  v25 = v12;
  swift_bridgeObjectRetain();
  v14 = 0;
  LOBYTE(v15) = 0;
  v6 = 0;
  v16 = a2;
  do
  {
    v18 = Substring.UTF8View.subscript.getter();
    if ((v16 & 0xC) == v25)
    {
      v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_19;
      }
    }
    else if ((a5 & 0x1000000000000000) == 0)
    {
      goto LABEL_15;
    }
    if (v24 <= v16 >> 16)
      goto LABEL_115;
    v16 = String.UTF8View._foreignIndex(after:)();
LABEL_19:
    if (v18 == 37)
    {
      if (v14 || v26 == v16 >> 14)
      {
LABEL_110:
        swift_bridgeObjectRelease();
        return 0;
      }
      v18 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v25)
      {
        v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
        if ((a5 & 0x1000000000000000) == 0)
          goto LABEL_24;
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_24:
        v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_31:
        if (v18 == 37)
          goto LABEL_110;
        v14 = 2;
        goto LABEL_33;
      }
      if (v24 <= v16 >> 16)
        goto LABEL_115;
      v16 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_31;
    }
    if (!v14)
    {
      *(_BYTE *)(a1 + v6) = v18;
      v19 = __OFADD__(v6++, 1);
      if (v19)
        goto LABEL_117;
      v14 = 0;
      continue;
    }
LABEL_33:
    switch(v18)
    {
      case '0':
        v17 = 0;
        if (v14 == 1)
          goto LABEL_97;
        if (v14 != 2)
          goto LABEL_11;
        goto LABEL_10;
      case '1':
        if (v14 == 1)
        {
          v17 = 1;
          goto LABEL_97;
        }
        if (v14 == 2)
        {
          LOBYTE(v17) = 16;
          goto LABEL_10;
        }
        goto LABEL_11;
      case '2':
        if (v14 == 1)
        {
          v17 = 2;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 32;
        goto LABEL_10;
      case '3':
        if (v14 == 1)
        {
          v17 = 3;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 48;
        goto LABEL_10;
      case '4':
        if (v14 == 1)
        {
          v17 = 4;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 64;
        goto LABEL_10;
      case '5':
        if (v14 == 1)
        {
          v17 = 5;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 80;
        goto LABEL_10;
      case '6':
        if (v14 == 1)
        {
          v17 = 6;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 96;
        goto LABEL_10;
      case '7':
        if (v14 == 1)
        {
          v17 = 7;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 112;
        goto LABEL_10;
      case '8':
        if (v14 == 1)
        {
          v17 = 8;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = 0x80;
        goto LABEL_10;
      case '9':
        if (v14 == 1)
        {
          v17 = 9;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -112;
        goto LABEL_10;
      case 'A':
      case 'a':
        if (v14 == 1)
        {
          v17 = 10;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -96;
        goto LABEL_10;
      case 'B':
      case 'b':
        if (v14 == 1)
        {
          v17 = 11;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -80;
        goto LABEL_10;
      case 'C':
      case 'c':
        if (v14 == 1)
        {
          v17 = 12;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -64;
        goto LABEL_10;
      case 'D':
      case 'd':
        if (v14 == 1)
        {
          v17 = 13;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -48;
        goto LABEL_10;
      case 'E':
      case 'e':
        if (v14 == 1)
        {
          v17 = 14;
          goto LABEL_97;
        }
        if (v14 != 2)
          goto LABEL_11;
        LOBYTE(v17) = -32;
        goto LABEL_10;
      case 'F':
      case 'f':
        if (v14 == 1)
        {
          v17 = 15;
LABEL_97:
          v15 = v17 + v15;
          if ((v15 & 0x100) != 0)
            goto LABEL_116;
          if (specialized Set.contains(_:)(v15, a6))
          {
            if (__OFADD__(v6, 2))
              goto LABEL_118;
            if (v6 + 2 < v6)
              goto LABEL_120;
            LOBYTE(v27) = 37;
            HIBYTE(v27) = specialized StringProtocol.hexToAscii(_:)(v15 >> 4);
            v28 = v18;
            if (a1)
            {
              v20 = a1 + v6;
              if ((unint64_t)&v27 < a1 + v6 + 3 && v20 < (unint64_t)v29)
              {
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x181E8E824);
              }
              v21 = v27;
              *(_BYTE *)(v20 + 2) = v28;
              *(_WORD *)v20 = v21;
            }
            v19 = __OFADD__(v6, 3);
            v6 += 3;
            if (v19)
              goto LABEL_121;
          }
          else
          {
            *(_BYTE *)(a1 + v6) = v15;
            v19 = __OFADD__(v6++, 1);
            if (v19)
              goto LABEL_119;
            LOBYTE(v15) = 0;
          }
        }
        else if (v14 == 2)
        {
          LOBYTE(v17) = -16;
LABEL_10:
          LOBYTE(v15) = v17;
        }
LABEL_11:
        --v14;
        break;
      default:
        goto LABEL_110;
    }
  }
  while (v26 != v16 >> 14);
  swift_bridgeObjectRelease();
  if (v14)
    return 0;
  if (v6 < 0)
  {
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
  }
  return specialized String.init<A, B>(_validating:as:)(0, v6, a1);
}

void (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5))(char *, _QWORD)
{
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void (*v12)(char *, _QWORD);
  uint64_t v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  if (isStackAllocationSafe < 0)
    __break(1u);
  if (isStackAllocationSafe < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v15 - v11, a1, a2, a3, a4, a5);
  }
  else
  {
    v13 = swift_slowAlloc();
    v12 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v13, a1, a2, a3, a4, a5);
    MEMORY[0x186DA9E78](v13, -1, -1);
  }
  return v12;
}

uint64_t partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    goto LABEL_40;
  v5 = 0;
  if (a3 && a4)
  {
    while (1)
    {
      v6 = *a3;
      switch(*a3)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_8:
          if ((a5 & 0xF6) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '&':
LABEL_16:
          if ((a5 & 0x76) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '+':
          if ((a5 & 0xF7) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '-':
        case '.':
          goto LABEL_26;
        case '/':
LABEL_14:
          if (a5 < 0x10u)
            goto LABEL_30;
          goto LABEL_27;
        default:
          if ((v6 - 58) <= 0xFFFFFFF5)
          {
            switch(*a3)
            {
              case ':':
                if ((a5 & 0xD2) == 0)
                  goto LABEL_30;
                goto LABEL_27;
              case ';':
                goto LABEL_8;
              case '=':
                goto LABEL_16;
              case '?':
                if (a5 < 0x40u)
                  goto LABEL_30;
                goto LABEL_27;
              case '@':
                goto LABEL_14;
              default:
                if ((v6 - 91) > 0xFFFFFFE5)
                  break;
                if ((_DWORD)v6 == 95)
                  goto LABEL_24;
                if ((v6 - 123) > 0xFFFFFFE5)
                  break;
                if ((_DWORD)v6 != 126)
                  goto LABEL_30;
LABEL_24:
                if (a5 < 2u)
                  goto LABEL_30;
                goto LABEL_27;
            }
          }
LABEL_26:
          if (a5)
          {
LABEL_27:
            if (v5 >= a2)
            {
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              JUMPOUT(0x181E8EC60);
            }
            v8 = v5;
            v7 = 1;
          }
          else
          {
LABEL_30:
            if (v5 >= a2)
              goto LABEL_37;
            *(_BYTE *)(a1 + v5) = 37;
            if (v5 + 1 >= a2)
              goto LABEL_38;
            *(_BYTE *)(a1 + v5 + 1) = byte_182169830[v6 >> 4];
            v8 = v5 + 2;
            if (v5 + 2 >= a2)
            {
              __break(1u);
              goto LABEL_34;
            }
            LOBYTE(v6) = byte_182169830[v6 & 0xF];
            v7 = 3;
          }
          *(_BYTE *)(a1 + v8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4)
            goto LABEL_34;
          break;
      }
    }
  }
LABEL_34:
  if (v5 >= a2)
    goto LABEL_39;
  *(_BYTE *)(a1 + v5) = 0;
  return String.init(cString:)();
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    goto LABEL_40;
  v5 = 0;
  if (a3 && a4)
  {
    while (1)
    {
      v6 = *a3;
      switch(*a3)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_8:
          if ((a5 & 0xF6) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '&':
LABEL_16:
          if ((a5 & 0x76) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '+':
          if ((a5 & 0xF7) == 0)
            goto LABEL_30;
          goto LABEL_27;
        case '-':
        case '.':
          goto LABEL_26;
        case '/':
LABEL_14:
          if (a5 < 0x10u)
            goto LABEL_30;
          goto LABEL_27;
        default:
          if ((v6 - 58) <= 0xFFFFFFF5)
          {
            switch(*a3)
            {
              case ':':
                if ((a5 & 0xD2) == 0)
                  goto LABEL_30;
                goto LABEL_27;
              case ';':
                goto LABEL_8;
              case '=':
                goto LABEL_16;
              case '?':
                if (a5 < 0x40u)
                  goto LABEL_30;
                goto LABEL_27;
              case '@':
                goto LABEL_14;
              default:
                if ((v6 - 91) > 0xFFFFFFE5)
                  break;
                if ((_DWORD)v6 == 95)
                  goto LABEL_24;
                if ((v6 - 123) > 0xFFFFFFE5)
                  break;
                if ((_DWORD)v6 != 126)
                  goto LABEL_30;
LABEL_24:
                if (a5 < 2u)
                  goto LABEL_30;
                goto LABEL_27;
            }
          }
LABEL_26:
          if (a5)
          {
LABEL_27:
            if (v5 >= a2)
            {
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              JUMPOUT(0x181E8EE7CLL);
            }
            v8 = v5;
            v7 = 1;
          }
          else
          {
LABEL_30:
            if (v5 >= a2)
              goto LABEL_37;
            *(_BYTE *)(a1 + v5) = 37;
            if (v5 + 1 >= a2)
              goto LABEL_38;
            *(_BYTE *)(a1 + v5 + 1) = byte_182169830[v6 >> 4];
            v8 = v5 + 2;
            if (v5 + 2 >= a2)
            {
              __break(1u);
              goto LABEL_34;
            }
            LOBYTE(v6) = byte_182169830[v6 & 0xF];
            v7 = 3;
          }
          *(_BYTE *)(a1 + v8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4)
            goto LABEL_34;
          break;
      }
    }
  }
LABEL_34:
  if (v5 >= a2)
    goto LABEL_39;
  *(_BYTE *)(a1 + v5) = 0;
  return String.init(cString:)();
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v4 < -1)
    goto LABEL_9;
  v8 = isStackAllocationSafe;
  v9 = v4 + 1;
  if (v4 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    return a4();
  }
  else
  {
    v11 = swift_slowAlloc();
    v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4)(v11, v9, v8, a2, a3);
    MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return v10;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  __int16 v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v25;
  __int16 v26;
  char v27;
  _BYTE v28[13];

  v6 = result;
  *(_QWORD *)&v28[5] = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    v10 = 0;
    return (uint64_t)specialized String.init<A, B>(_validating:as:)(0, v10, v6);
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  v11 = &a2[a3];
  v25 = a4 + 56;
  v12 = a2;
  do
  {
    v15 = *v12++;
    v14 = v15;
    if (v15 == 37)
    {
      result = 0;
      if (v8 || v12 == v11)
        return result;
      v14 = *v12;
      if (v14 == 37)
        return 0;
      v12 = a2 + 2;
      v8 = 2;
    }
    else if (v8 <= 0)
    {
      *(_BYTE *)(v6 + v10) = v14;
      v16 = __OFADD__(v10++, 1);
      if (v16)
        goto LABEL_108;
      goto LABEL_9;
    }
    result = 0;
    switch(v14)
    {
      case '0':
        v13 = 0;
        if (v8 == 1)
          goto LABEL_83;
        if (v8 != 2)
          goto LABEL_8;
        goto LABEL_7;
      case '1':
        if (v8 == 1)
        {
          v13 = 1;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 16;
        goto LABEL_7;
      case '2':
        if (v8 == 1)
        {
          v13 = 2;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 32;
        goto LABEL_7;
      case '3':
        if (v8 == 1)
        {
          v13 = 3;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 48;
        goto LABEL_7;
      case '4':
        if (v8 == 1)
        {
          v13 = 4;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 64;
        goto LABEL_7;
      case '5':
        if (v8 == 1)
        {
          v13 = 5;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 80;
        goto LABEL_7;
      case '6':
        if (v8 == 1)
        {
          v13 = 6;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 96;
        goto LABEL_7;
      case '7':
        if (v8 == 1)
        {
          v13 = 7;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 112;
        goto LABEL_7;
      case '8':
        if (v8 == 1)
        {
          v13 = 8;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = 0x80;
        goto LABEL_7;
      case '9':
        if (v8 == 1)
        {
          v13 = 9;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = -112;
        goto LABEL_7;
      case 'A':
      case 'a':
        if (v8 == 1)
        {
          v13 = 10;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = -96;
        goto LABEL_7;
      case 'B':
      case 'b':
        if (v8 == 1)
        {
          v13 = 11;
          goto LABEL_83;
        }
        if (v8 == 2)
        {
          LOBYTE(v13) = -80;
          goto LABEL_7;
        }
        goto LABEL_8;
      case 'C':
      case 'c':
        if (v8 == 1)
        {
          v13 = 12;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = -64;
        goto LABEL_7;
      case 'D':
      case 'd':
        if (v8 == 1)
        {
          v13 = 13;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = -48;
        goto LABEL_7;
      case 'E':
      case 'e':
        if (v8 == 1)
        {
          v13 = 14;
          goto LABEL_83;
        }
        if (v8 != 2)
          goto LABEL_8;
        LOBYTE(v13) = -32;
        goto LABEL_7;
      case 'F':
      case 'f':
        if (v8 == 1)
        {
          v13 = 15;
LABEL_83:
          v9 = v13 + v9;
          if ((v9 & 0x100) != 0)
          {
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
          }
          if (!*(_QWORD *)(a4 + 16))
            goto LABEL_99;
          v17 = v5;
          result = MEMORY[0x186DA5EC4](*(_QWORD *)(a4 + 40), v9, 1);
          v5 = v17;
          v18 = -1 << *(_BYTE *)(a4 + 32);
          v19 = result & ~v18;
          if (((*(_QWORD *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
            goto LABEL_99;
          v20 = *(_QWORD *)(a4 + 48);
          if (*(unsigned __int8 *)(v20 + v19) != v9)
          {
            v21 = ~v18;
            while (1)
            {
              v19 = (v19 + 1) & v21;
              if (((*(_QWORD *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
                break;
              if (*(unsigned __int8 *)(v20 + v19) == v9)
                goto LABEL_90;
            }
LABEL_99:
            *(_BYTE *)(v6 + v10) = v9;
            v16 = __OFADD__(v10++, 1);
            if (v16)
              goto LABEL_107;
            LOBYTE(v9) = 0;
            goto LABEL_8;
          }
LABEL_90:
          if (__OFADD__(v10, 2))
            goto LABEL_109;
          if (v10 + 2 < v10)
            goto LABEL_110;
          LOBYTE(v26) = 37;
          result = a5(v9 >> 4);
          v5 = v17;
          HIBYTE(v26) = result;
          v27 = v14;
          if (v6)
          {
            v22 = v6 + v10;
            if ((unint64_t)&v26 < v6 + v10 + 3 && v22 < (unint64_t)v28)
            {
              _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181E8F544);
            }
            v23 = v26;
            *(_BYTE *)(v22 + 2) = v27;
            *(_WORD *)v22 = v23;
          }
          v16 = __OFADD__(v10, 3);
          v10 += 3;
          if (v16)
            goto LABEL_111;
        }
        else if (v8 == 2)
        {
          LOBYTE(v13) = -16;
LABEL_7:
          LOBYTE(v9) = v13;
        }
LABEL_8:
        --v8;
        break;
      default:
        return result;
    }
LABEL_9:
    a2 = v12;
  }
  while (v12 != v11);
  if (!v8)
  {
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }
    return (uint64_t)specialized String.init<A, B>(_validating:as:)(0, v10, v6);
  }
  return 0;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  void *v4;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (a2 < 0)
    __break(1u);
  v8 = (unsigned __int8 *)isStackAllocationSafe;
  if (a2 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v9 = v16;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v16 - v10, v8, a2, a3, a4);
    v12 = v4;
    if (!v4)
      return v11;
    swift_willThrow();

    __break(1u);
  }
  else
  {
    v9 = (_QWORD *)swift_slowAlloc();
    v14 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v9, v8, a2, a3, a4);
    v12 = v4;
    if (!v4)
    {
      v13 = v14;
      MEMORY[0x186DA9E78](v9, -1, -1);
      return v13;
    }
  }

  result = MEMORY[0x186DA9E78](v9, -1, -1);
  __break(1u);
  return result;
}

uint64_t specialized URL.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized URLResourceValues.fileSecurity.setter(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v6[4];
  __int128 v7;
  __int128 v8;

  v2 = (void *)*MEMORY[0x1E0C99990];
  if (a1)
  {
    *((_QWORD *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
    *(_QWORD *)&v7 = a1;
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  v3 = a1;
  v4 = v2;
  specialized Set._Variant.insert(_:)(v6, v4);

  outlined init with copy of Any?((uint64_t)&v7, (uint64_t)v6);
  specialized Dictionary.subscript.setter((uint64_t)v6, v4);
  return outlined destroy of Any?((uint64_t)&v7);
}

uint64_t specialized URLResourceValues.name.setter(uint64_t a1, uint64_t a2, id *a3)
{
  id v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  v4 = *a3;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if (a2)
  {
    v5 = String._bridgeToObjectiveCImpl()();
    *((_QWORD *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    *(_QWORD *)&v7 = v5;
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

id specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  void *v5;
  void *v6;
  NSData v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v16[2];

  v6 = v5;
  v16[1] = *(id *)MEMORY[0x1E0C80C00];
  v10.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = *a4;
  if (*a4)
  {
    swift_release();
    swift_release();
  }
  v16[0] = 0;
  v12 = objc_msgSend(v6, sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_, v10.super.isa, a3, v11, a5, v16);

  if (v12)
  {
    v13 = v16[0];
  }
  else
  {
    if (v16[0])
    {
      v16[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v14 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v12;
}

uint64_t partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;

  result = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, *(_QWORD *)(v4 + 24), a3);
  if (!v5)
  {
    *a4 = result;
    a4[1] = v8;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.DirectoryHint and conformance URL.DirectoryHint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint;
  if (!lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.DirectoryHint, &type metadata for URL.DirectoryHint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[2] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[3] = lazy protocol witness table accessor for type URL and conformance URL();
  result = lazy protocol witness table accessor for type URL and conformance URL();
  a1[4] = result;
  return result;
}

uint64_t sub_181E8FCC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x1E0C99A90], a2);
}

uint64_t sub_181E8FCE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x1E0C99A90]);
}

uint64_t sub_181E8FD00@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C99A00], a1);
}

uint64_t sub_181E8FD1C(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A00], *a1);
}

uint64_t sub_181E8FD50@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C99A40], a1);
}

uint64_t sub_181E8FD6C(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A40], *a1);
}

uint64_t sub_181E8FDA0@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C999F0], a1);
}

uint64_t sub_181E8FDBC(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999F0], *a1);
}

uint64_t sub_181E8FDF0@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C999B0], a1);
}

uint64_t sub_181E8FE0C(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999B0], *a1);
}

_QWORD *sub_181E8FE40@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_37Tm((_QWORD *(*)(uint64_t *__return_ptr))URLResourceValues.creationDate.getter, a1);
}

uint64_t sub_181E8FE4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.creationDate.setter);
}

_QWORD *sub_181E8FE58@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_37Tm((_QWORD *(*)(uint64_t *__return_ptr))URLResourceValues.contentAccessDate.getter, a1);
}

_QWORD *keypath_get_37Tm@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  result = a1(&v5);
  v4 = v6;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_181E8FEAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.contentAccessDate.setter);
}

_QWORD *sub_181E8FEB8@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_37Tm((_QWORD *(*)(uint64_t *__return_ptr))URLResourceValues.contentModificationDate.getter, a1);
}

uint64_t sub_181E8FEC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.contentModificationDate.setter);
}

uint64_t keypath_set_38Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5;
  uint64_t v7;
  char v8;

  v5 = *((_BYTE *)a1 + 8);
  v7 = *a1;
  v8 = v5;
  return a5(&v7);
}

uint64_t sub_181E8FF10(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99A58], *(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void sub_181E8FF48(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized URLResourceValues.fileSecurity.setter(v1);

}

uint64_t sub_181E8FF84@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C999D8], a1);
}

uint64_t sub_181E8FFA0(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999D8], *a1);
}

uint64_t sub_181E8FFD4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x1E0C99C40], a2);
}

uint64_t sub_181E8FFF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x1E0C99C40]);
}

uint64_t sub_181E9000C@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E0C99B28], a1);
}

uint64_t sub_181E90028(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C99B28], *a1);
}

uint64_t storeEnumTagSinglePayload for URL.DirectoryHint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181E900A8 + 4 * byte_1821698C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181E900DC + 4 * byte_1821698C4[v4]))();
}

uint64_t sub_181E900DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E900E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E900ECLL);
  return result;
}

uint64_t sub_181E900F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E90100);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181E90104(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9010C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for URL.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E90164 + 4 * byte_1821698D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E90198 + 4 * byte_1821698CE[v4]))();
}

uint64_t sub_181E90198(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E901A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E901A8);
  return result;
}

uint64_t sub_181E901B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E901BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E901C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E901C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

BOOL specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(a1, a2);
}

uint64_t _NSRange.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata2;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];

  v66 = a1;
  v67 = a4;
  v6 = *(_QWORD *)(a4 + 8);
  v7 = *(_QWORD *)(v6 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = v7;
  v9 = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v51 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v55 = (char *)&v51 - v14;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v51 - v19;
  v61 = v6;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21);
  v59 = a3;
  v65 = a2;
  swift_getAssociatedConformanceWitness();
  v56 = type metadata accessor for Range();
  v22 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v53 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v51 - v25;
  MEMORY[0x1E0C80A78](v27);
  v58 = (char *)&v51 - v28;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v21, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  dispatch thunk of static FixedWidthInteger.max.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v51 = v26;
    v52 = v22;
    v31 = TupleTypeMetadata2;
    v32 = v54;
    v33 = v55;
    v34 = &v55[*(int *)(TupleTypeMetadata2 + 48)];
    v35 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v35(v55, v20, AssociatedTypeWitness);
    v35(v34, v17, AssociatedTypeWitness);
    v36 = &v12[*(int *)(v31 + 48)];
    v37 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v37(v12, v33, AssociatedTypeWitness);
    v37(v36, v34, AssociatedTypeWitness);
    v38 = v53;
    v35(v53, v12, AssociatedTypeWitness);
    v39 = *(void (**)(char *, uint64_t))(v32 + 8);
    v39(v36, AssociatedTypeWitness);
    v40 = &v12[*(int *)(v31 + 48)];
    v35(v12, v33, AssociatedTypeWitness);
    v35(v40, v34, AssociatedTypeWitness);
    v41 = v56;
    v35(&v38[*(int *)(v56 + 36)], v40, AssociatedTypeWitness);
    v39(v12, AssociatedTypeWitness);
    v43 = v51;
    v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v38, v41);
    v44 = v63;
    v45 = swift_getAssociatedConformanceWitness();
    v68[0] = v64;
    v68[1] = v45;
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8C0], v41, v68);
    v46 = (uint64_t)v58;
    v47 = v65;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v48 = *(void (**)(char *, uint64_t))(v42 + 8);
    v48(v43, v41);
    v61 = specialized numericCast<A, B>(_:)(v46, AssociatedTypeWitness, v61);
    v49 = (uint64_t)v60;
    dispatch thunk of Strideable.distance(to:)();
    v50 = swift_getAssociatedConformanceWitness();
    specialized numericCast<A, B>(_:)(v49, v44, *(_QWORD *)(v50 + 8));
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v49, v44);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v66, v47);
    v48((char *)v46, v41);
    return v61;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Range<>.init(_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  if (!__OFADD__(result, a2))
    return result;
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v2;

  if (a1 >= v1)
  {
    if (__OFSUB__(a1, v1))
      __break(1u);
    else
      LOBYTE(a1) = a1 - v1 < v2;
  }
  else
  {
    LOBYTE(a1) = 0;
  }
  return a1;
}

void _NSRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
}

BOOL static _NSRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

Swift::Int _NSRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _NSRange()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _NSRange()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _NSRange()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _NSRange.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 125;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 123;
}

uint64_t _NSRange.debugDescription.getter(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v6[2];

  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "{NSNotFound, ");
    HIWORD(v6[1]) = -4864;
  }
  else
  {
    v6[0] = 123;
    v6[1] = 0xE100000000000000;
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 8236;
    v2._object = (void *)0xE200000000000000;
    String.append(_:)(v2);
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 125;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _NSRange()
{
  return _NSRange.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _NSRange()
{
  uint64_t *v0;

  return _NSRange.debugDescription.getter(*v0);
}

const __CFCharacterSet *_NSRange.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v3;
  const __CFCharacterSet *result;
  const __CFCharacterSet *v5;
  uint64_t inited;
  id v7;
  unsigned int v8;
  id v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  id v13;
  double v14[9];

  v14[8] = *(double *)MEMORY[0x1E0C80C00];
  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = objc_msgSend(objc_allocWithZone((Class)NSScanner), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v5 = result;
  type metadata accessor for __CharacterSetStorage();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v5;
  *(_BYTE *)(inited + 24) = 0;
  -[__CFCharacterSet copy](v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, v13, 0);

  if (!objc_msgSend(v3, sel_isAtEnd))
  {
    v13 = 0;
    v7 = objc_msgSend(v3, sel__deprecated_scanLocation);
    if (objc_msgSend(v3, sel_scanInteger_, &v13) && !objc_msgSend(v3, sel_isAtEnd))
    {
      v8 = objc_msgSend(v3, sel__deprecated_scanString_intoString_, String._bridgeToObjectiveCImpl()(), 0);
      swift_unknownObjectRelease();
      if (!v8)
      {
LABEL_15:
        objc_msgSend(*(id *)(inited + 16), sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        swift_dynamicCast();
        objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, *(_QWORD *)&v12, 0);

        if (!objc_msgSend(v3, sel_isAtEnd))
        {
          v14[0] = 0.0;
          v9 = objc_msgSend(v3, sel__deprecated_scanLocation);
          if (objc_msgSend(v3, sel_scanInteger_, v14))
          {
            if ((objc_msgSend(v3, sel_isAtEnd) & 1) != 0
              || (v10 = objc_msgSend(v3, sel__deprecated_scanString_intoString_, String._bridgeToObjectiveCImpl()(), 0), swift_unknownObjectRelease(), !v10))
            {

              swift_release();
            }
            else
            {
              objc_msgSend(v3, sel__deprecated_setScanLocation_, v9);
              v12 = 0.0;
              v11 = objc_msgSend(v3, sel__deprecated_scanDouble_, &v12);

              swift_release();
              if (!v11 || v12 <= -9.22337204e18 || v12 >= 9.22337204e18 || v12 != trunc(v12))
                return 0;
              *(_QWORD *)&v14[0] = (uint64_t)v12;
            }
            return (const __CFCharacterSet *)v13;
          }
        }
        goto LABEL_24;
      }
      objc_msgSend(v3, sel__deprecated_setScanLocation_, v7);
      v14[0] = 0.0;
      if (objc_msgSend(v3, sel__deprecated_scanDouble_, v14)
        && v14[0] > -9.22337204e18
        && v14[0] < 9.22337204e18
        && v14[0] == trunc(v14[0]))
      {
        v13 = (id)(uint64_t)v14[0];
        goto LABEL_15;
      }
    }
LABEL_24:

    swift_release();
    return 0;
  }
  swift_setDeallocating();

  return 0;
}

uint64_t _NSRange.upperBound.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

Swift::Void __swiftcall _NSRange.formUnion(_:)(__C::_NSRange a1)
{
  Swift::Int *v1;
  Swift::Int location;
  Swift::Int v3;
  BOOL v4;
  Swift::Int v5;
  Swift::Int v6;

  location = *v1;
  v3 = v1[1];
  v4 = __OFADD__(*v1, v3);
  v5 = *v1 + v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 <= a1.location + a1.length)
    v5 = a1.location + a1.length;
  if (location >= a1.location)
    location = a1.location;
  v4 = __OFSUB__(v5, location);
  v6 = v5 - location;
  if (!v4)
  {
    *v1 = location;
    v1[1] = v6;
    return;
  }
LABEL_11:
  __break(1u);
}

__C::_NSRange __swiftcall _NSRange.union(_:)(__C::_NSRange result)
{
  Swift::Int v1;
  uint64_t v2;
  Swift::Int v3;

  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (__OFADD__(result.location, result.length))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v3 <= result.location + result.length)
    v3 = result.location + result.length;
  if (v1 < result.location)
    result.location = v1;
  result.length = v3 - result.location;
  if (__OFSUB__(v3, result.location))
    goto LABEL_11;
  return result;
}

__C::_NSRange_optional __swiftcall _NSRange.intersection(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int location;
  __C::_NSRange_optional result;

  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = v1;
  if (v3 >= v4)
    v6 = a1.location + a1.length;
  else
    v6 = v1 + v2;
  if (v1 < a1.location || v4 <= v1)
  {
    location = 0;
    LOBYTE(v1) = 1;
    a1.length = 0;
    if (a1.location >= v5 && v3 > a1.location)
    {
      a1.length = v6 - a1.location;
      if (__OFSUB__(v6, a1.location))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      LOBYTE(v1) = 0;
      location = a1.location;
    }
    a1.location = location;
    goto LABEL_19;
  }
  a1.length = v6 - v1;
  if (__OFSUB__(v6, v1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  LOBYTE(v1) = 0;
  a1.location = v5;
LABEL_19:
  result.value = a1;
  result.is_nil = v1;
  return result;
}

uint64_t _NSRange.toRange()(uint64_t result, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;

  if (result == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v3 = __OFADD__(result, a2);
  v4 = result + a2;
  if (v3)
  {
    __break(1u);
  }
  else if (v4 >= result)
  {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Range<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v6);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = type metadata accessor for Range();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    result = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    if (__OFADD__(a1, a2))
    {
      __break(1u);
    }
    else
    {
      dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
      Range.init(uncheckedBounds:)();
      v10 = type metadata accessor for Range();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 0, 1, v10);
    }
  }
  return result;
}

uint64_t Range<>.init<A>(_:_genericIn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _QWORD v18[3];
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v18 - v12;
  MEMORY[0x186DA50C0](a4, a5, v11);
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_5;
  v18[1] = a3;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  v20 = v21;
  dispatch thunk of Collection.endIndex.getter();
  v18[2] = v19;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)();
  if (v23 == 1
    || (v14 = v22,
        v21 = v22,
        dispatch thunk of Collection.endIndex.getter(),
        v19 = v20,
        dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)(),
        v23 == 1)
    || (v15 = v22, dispatch thunk of Collection.startIndex.getter(), v14 >> 14 < v22 >> 14))
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    return 0;
  }
  dispatch thunk of Collection.endIndex.getter();
  v17 = v22;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  if (v15 >> 14 > v17 >> 14)
    return 0;
  if (v15 >> 14 >= v14 >> 14)
    return v14;
  __break(1u);
  return result;
}

uint64_t Range<>.init<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Range<>.init<A>(_:_genericIn:)(a1, a2, a3, a4, a5);
}

uint64_t _NSRange.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a1;
  v15[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18205F0D0;
  *(_QWORD *)(v11 + 32) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(v11 + 40) = 0xE800000000000000;
  v12 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v11 + 48) = a1;
  *(_QWORD *)(v11 + 72) = v12;
  *(_QWORD *)(v11 + 80) = 0x6874676E656CLL;
  *(_QWORD *)(v11 + 120) = v12;
  *(_QWORD *)(v11 + 88) = 0xE600000000000000;
  *(_QWORD *)(v11 + 96) = a2;
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEDFE8], v4);
  type metadata accessor for _NSRange(0);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _NSRange()
{
  uint64_t *v0;

  return _NSRange.customMirror.getter(*v0, v0[1]);
}

uint64_t _NSRange.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 32) = 14;
  return result;
}

__n128 protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance _NSRange@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 14;
  return result;
}

uint64_t _NSRange.init(from:)(_QWORD *a1)
{
  return specialized _NSRange.init(from:)(a1);
}

uint64_t _NSRange.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _NSRange and conformance _NSRange;
  if (!lazy protocol witness table cache variable for type _NSRange and conformance _NSRange)
  {
    type metadata accessor for _NSRange(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _NSRange, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange);
  }
  return result;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_181E91CD8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_181E91DA8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  if ((a3 & 1) != 0)
    v3 = 65;
  else
    v3 = 83;
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  if (v4 >= 9)
    v5 = 9;
  else
    v5 = v4;
  if (v5 != 1)
  {
    swift_bridgeObjectRetain_n();
    v6._countAndFlagsBits = v3;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    if (v5 != 2)
    {
      swift_bridgeObjectRetain();
      v7._countAndFlagsBits = v3;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      if (v5 != 3)
      {
        swift_bridgeObjectRetain();
        v8._countAndFlagsBits = v3;
        v8._object = (void *)0xE100000000000000;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        if (v5 != 4)
        {
          swift_bridgeObjectRetain();
          v9._countAndFlagsBits = v3;
          v9._object = (void *)0xE100000000000000;
          String.append(_:)(v9);
          swift_bridgeObjectRelease();
          if (v5 != 5)
          {
            swift_bridgeObjectRetain();
            v10._countAndFlagsBits = v3;
            v10._object = (void *)0xE100000000000000;
            String.append(_:)(v10);
            swift_bridgeObjectRelease();
            if (v5 != 6)
            {
              swift_bridgeObjectRetain();
              v11._countAndFlagsBits = v3;
              v11._object = (void *)0xE100000000000000;
              String.append(_:)(v11);
              swift_bridgeObjectRelease();
              if (v5 != 7)
              {
                swift_bridgeObjectRetain();
                v12._countAndFlagsBits = v3;
                v12._object = (void *)0xE100000000000000;
                String.append(_:)(v12);
                swift_bridgeObjectRelease();
                if (v5 != 8)
                {
                  swift_bridgeObjectRetain();
                  v13._countAndFlagsBits = v3;
                  v13._object = (void *)0xE100000000000000;
                  String.append(_:)(v13);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_181E92048()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181E92120()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181E92200()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181E922C8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181E92368()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

_QWORD *static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0x2000406u >> (8 * *result);
  }
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.genericName(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result)
    v2 = 7;
  else
    v2 = 6;
  *a2 = v2;
  return result;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E92540 + 4 * byte_182169EA7[a1]))(97, 0xE100000000000000);
}

uint64_t sub_181E92540()
{
  return 1633771873;
}

uint64_t sub_181E92550()
{
  return 0x6161616161;
}

uint64_t sub_181E92564()
{
  return 98;
}

uint64_t sub_181E9256C()
{
  return 1650614882;
}

uint64_t sub_181E9257C()
{
  return 0x6262626262;
}

uint64_t sub_181E92590()
{
  return 66;
}

uint64_t sub_181E92598()
{
  return 1111638594;
}

uint64_t sub_181E925A8()
{
  return 0x4242424242;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  if ((a2 & 1) != 0)
    v2 = 65;
  else
    v2 = 83;
  if (a1 <= 1)
    v3 = 1;
  else
    v3 = a1;
  if (v3 >= 9)
    v4 = 9;
  else
    v4 = v3;
  if (v4 != 1)
  {
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = v2;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    if (v4 != 2)
    {
      v6._countAndFlagsBits = v2;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      if (v4 != 3)
      {
        v7._countAndFlagsBits = v2;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        if (v4 != 4)
        {
          v8._countAndFlagsBits = v2;
          v8._object = (void *)0xE100000000000000;
          String.append(_:)(v8);
          if (v4 != 5)
          {
            v9._countAndFlagsBits = v2;
            v9._object = (void *)0xE100000000000000;
            String.append(_:)(v9);
            if (v4 != 6)
            {
              v10._countAndFlagsBits = v2;
              v10._object = (void *)0xE100000000000000;
              String.append(_:)(v10);
              if (v4 != 7)
              {
                v11._countAndFlagsBits = v2;
                v11._object = (void *)0xE100000000000000;
                String.append(_:)(v11);
                if (v4 != 8)
                {
                  v12._countAndFlagsBits = v2;
                  v12._object = (void *)0xE100000000000000;
                  String.append(_:)(v12);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E92710 + 4 * byte_182169EBE[a1]))(122, 0xE100000000000000);
}

uint64_t sub_181E92710()
{
  return 2054847098;
}

uint64_t sub_181E92720()
{
  return 90;
}

uint64_t sub_181E92728()
{
  return 1515870810;
}

uint64_t sub_181E92738()
{
  return 0x5A5A5A5A5ALL;
}

uint64_t sub_181E9274C()
{
  return 79;
}

uint64_t sub_181E92754()
{
  return 118;
}

uint64_t sub_181E9275C()
{
  return 1987475062;
}

uint64_t sub_181E9276C()
{
  return 86;
}

uint64_t sub_181E92774()
{
  return 22102;
}

uint64_t sub_181E92780()
{
  return 5658198;
}

uint64_t sub_181E92790()
{
  return 1448498774;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.specificName(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void Date.FormatStyle.Symbol.Era.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Era.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Era()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Era()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Year.hash(into:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Year.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.YearForWeekOfYear.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)v0;
    v2 = *(_BYTE *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v3 = 10;
      if (v1 < 10)
        v3 = v1;
      if (v3 <= 1)
        v4 = 1;
      else
        v4 = v3;
      MEMORY[0x186DA4928](89, 0xE100000000000000, v4);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.YearForWeekOfYear.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v4 = 10;
      if (v1 < 10)
        v4 = v1;
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
      MEMORY[0x186DA4928](89, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v4 = 10;
      if (v1 < 10)
        v4 = v1;
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
      MEMORY[0x186DA4928](89, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.CyclicYear.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.CyclicYear.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Quarter.hash(into:)()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_181E9326C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.Quarter.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Quarter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(a1, a2, a3, a4, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.Month.hash(into:)()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_181E934EC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Month.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2, uint64_t (*a3)(void))
{
  int v3;

  v3 = *a2;
  if (*a1 != 5)
    return v3 != 5 && (a3() & 1) != 0;
  return v3 == 5;
}

Swift::Int Date.FormatStyle.Symbol.Month.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Month()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Month(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(a1, a2, a3, a4, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v5;

  v5 = *a2;
  if (*a1 != 5)
    return v5 != 5 && (a5() & 1) != 0;
  return v5 == 5;
}

void Date.FormatStyle.Symbol.Week.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Week.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Week()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Week()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Day.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)v0;
    v2 = *(_BYTE *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v3 = 10;
      if (v1 < 10)
        v3 = v1;
      if (v3 <= 1)
        v4 = 1;
      else
        v4 = v3;
      MEMORY[0x186DA4928](103, 0xE100000000000000, v4);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.Day.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  if ((*(_BYTE *)(a1 + 9) & 1) == 0)
    return (*(_BYTE *)(a2 + 9) & 1) == 0
        && (a3(*(_QWORD *)a1, *(_BYTE *)(a1 + 8) & 1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8) & 1) & 1) != 0;
  return (*(_BYTE *)(a2 + 9) & 1) != 0;
}

Swift::Int Date.FormatStyle.Symbol.Day.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v4 = 10;
      if (v1 < 10)
        v4 = v1;
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
      MEMORY[0x186DA4928](103, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Day()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      v4 = 10;
      if (v1 < 10)
        v4 = v1;
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
      MEMORY[0x186DA4928](103, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Day(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  if ((*(_BYTE *)(a1 + 9) & 1) == 0)
    return (*(_BYTE *)(a2 + 9) & 1) == 0
        && (a5(*(_QWORD *)a1, *(_BYTE *)(a1 + 8) & 1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8) & 1) & 1) != 0;
  return *(_BYTE *)(a2 + 9) != 0;
}

void Date.FormatStyle.Symbol.DayOfYear.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.DayOfYear.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  _BYTE *v0;

  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Weekday.hash(into:)()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_181E9406C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Weekday.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 6)
  {
    if (v3 == 6)
      return 0;
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }
  return v3 == 6;
}

Swift::Int Date.FormatStyle.Symbol.Weekday.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Weekday()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Weekday(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 6)
  {
    if (v3 == 6)
      return 0;
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }
  return v3 == 6;
}

void Date.FormatStyle.Symbol.DayPeriod.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  int v3;

  v3 = *v1;
  if (v3 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v3);
  }
}

BOOL static Date.FormatStyle.Symbol.DayPeriod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 9)
  {
    if (v3 == 9)
      return 0;
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }
  return v3 == 9;
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  unsigned __int8 *v0;
  int v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayPeriod(uint64_t a1)
{
  unsigned __int8 *v1;
  int v3;

  v3 = *v1;
  if (v3 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v3);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  unsigned __int8 *v0;
  int v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.DayPeriod(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 9)
  {
    if (v3 == 9)
      return 0;
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }
  return v3 == 9;
}

void Date.FormatStyle.Symbol.Hour.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Hour.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Hour()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Hour()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Hour()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Minute.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Minute.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Minute()
{
  _BYTE *v0;

  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Minute()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Second.hash(into:)()
{
  _BYTE *v0;

  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Second.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Second()
{
  _BYTE *v0;

  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Second()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.SecondFraction.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  char v5;

  v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)v1;
    v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255)
      return 1;
  }
  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(_QWORD *)a1, v2 & 1, *(_QWORD *)a2, v3 & 1) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

Swift::Int Date.FormatStyle.Symbol.SecondFraction.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SecondFraction(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  char v5;

  v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)v1;
    v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SecondFraction(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255)
      return 1;
  }
  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(_QWORD *)a1, v2 & 1, *(_QWORD *)a2, v3 & 1) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

void Date.FormatStyle.Symbol.TimeZone.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.TimeZone.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.TimeZone()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneQuarter.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181E9521C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneQuarter.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181E952A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_181E95304 + 4 * byte_182169F04[a2]))(29041, a1, 113);
}

uint64_t sub_181E95304(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 29041 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneQuarter.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E953E8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  __asm { BR              X10 }
}

uint64_t sub_181E95484()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95514()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneMonth.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181E955AC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneMonth.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181E95638@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_181E95694 + 4 * byte_182169F22[a2]))(19532, a1, 76);
}

uint64_t sub_181E95694(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 19532 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneMonth.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95778()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  __asm { BR              X10 }
}

uint64_t sub_181E95814()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E958A4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneWeekday.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181E9593C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneWeekday.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181E959D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_181E95A34 + 4 * byte_182169F40[a2]))(6513507, a1, 99);
}

uint64_t sub_181E95A34(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6513507 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneWeekday.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95B20()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  __asm { BR              X10 }
}

uint64_t sub_181E95BC4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95C5C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.VerbatimHour.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181E95CFC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.VerbatimHour.== infix(_:_:)(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void Date.FormatStyle.Symbol.VerbatimHour.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95DA4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E95E58()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.EraOption.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0xE400000000000000;
  v5 = 1195853639;
  if (v2 != 1)
  {
    v5 = 0x4747474747;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 71;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = v3;
  a1[1] = v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v0;

  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v2 = *(_QWORD *)a2;
  v3 = *(_BYTE *)(a2 + 8);
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v5 = v4;
  v7 = v6;
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v3);
  if (v5 == v9 && v7 == v8)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t result;

  v2 = specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)();
  v4 = v3;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = HIBYTE(v4) & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    if (v3)
      result = 22873;
    else
      result = 89;
    if (v3)
      v5 = 0xE200000000000000;
    else
      v5 = 0xE100000000000000;
  }
  else
  {
    if (v3 >= 10)
      v3 = 10;
    if (v3 <= 1)
      v6 = 1;
    else
      v6 = v3;
    result = MEMORY[0x186DA4928](89, 0xE100000000000000, v6);
  }
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  uint64_t v0;

  return specialized RawRepresentable<>._rawHashValue(seed:)(0, *(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    if (v1 >= 10)
      v1 = 10;
    if (v1 <= 1)
      v2 = 1;
    else
      v2 = v1;
    MEMORY[0x186DA4928](89, 0xE100000000000000, v2);
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption(uint64_t a1)
{
  uint64_t v1;

  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.CyclicYearOption.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0xE400000000000000;
  v5 = 1431655765;
  if (v2 != 1)
  {
    v5 = 0x5555555555;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 85;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.QuarterOption.init(rawValue:);
  result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E96928 + 4 * byte_182169F6C[*v0]))();
}

void sub_181E96928(_QWORD *a1@<X8>)
{
  *a1 = 20817;
  a1[1] = 0xE200000000000000;
}

void sub_181E96938(_QWORD *a1@<X8>)
{
  *a1 = 5329233;
  a1[1] = 0xE300000000000000;
}

void sub_181E9694C(_QWORD *a1@<X8>)
{
  *a1 = 1364283729;
  a1[1] = 0xE400000000000000;
}

void sub_181E96960(_QWORD *a1@<X8>)
{
  *a1 = 0x5151515151;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E96A60()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E96AF8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E96B88()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption.init(rawValue:);
  result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E96C54 + 4 * byte_182169F80[*v0]))();
}

void sub_181E96C54(_QWORD *a1@<X8>)
{
  *a1 = 29041;
  a1[1] = 0xE200000000000000;
}

void sub_181E96C64(_QWORD *a1@<X8>)
{
  *a1 = 7434609;
  a1[1] = 0xE300000000000000;
}

void sub_181E96C78(_QWORD *a1@<X8>)
{
  *a1 = 1903260017;
  a1[1] = 0xE400000000000000;
}

void sub_181E96C8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7171717171;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E96D8C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E96E24()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E96EB4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:);
  result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E96F80 + 4 * byte_182169F94[*v0]))();
}

void sub_181E96F80(_QWORD *a1@<X8>)
{
  *a1 = 19789;
  a1[1] = 0xE200000000000000;
}

void sub_181E96F90(_QWORD *a1@<X8>)
{
  *a1 = 5066061;
  a1[1] = 0xE300000000000000;
}

void sub_181E96FA4(_QWORD *a1@<X8>)
{
  *a1 = 1296911693;
  a1[1] = 0xE400000000000000;
}

void sub_181E96FB8(_QWORD *a1@<X8>)
{
  *a1 = 0x4D4D4D4D4DLL;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E970B8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E97150()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E971E0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption.init(rawValue:);
  result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E972AC + 4 * byte_182169FA8[*v0]))();
}

void sub_181E972AC(_QWORD *a1@<X8>)
{
  *a1 = 19532;
  a1[1] = 0xE200000000000000;
}

void sub_181E972BC(_QWORD *a1@<X8>)
{
  *a1 = 5000268;
  a1[1] = 0xE300000000000000;
}

void sub_181E972D0(_QWORD *a1@<X8>)
{
  *a1 = 1280068684;
  a1[1] = 0xE400000000000000;
}

void sub_181E972E4(_QWORD *a1@<X8>)
{
  *a1 = 0x4C4C4C4C4CLL;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E973E4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E9747C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E9750C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekOption.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0xE200000000000000;
  v5 = 30583;
  if (v2 != 1)
  {
    v5 = 87;
    v4 = 0xE100000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 119;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayOfYearOption.init(rawValue:);
  result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 0xE200000000000000;
  v5 = 17476;
  if (v2 != 1)
  {
    v5 = 4473924;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 68;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    v4 = 0xE200000000000000;
    v5 = 25700;
    if (v3 != 1)
    {
      v5 = 70;
      v4 = 0xE100000000000000;
    }
    if (v3)
      result = v5;
    else
      result = 100;
    if (v3)
      v7 = v4;
    else
      v7 = 0xE100000000000000;
  }
  else
  {
    if (v3 >= 10)
      v3 = 10;
    if (v3 <= 1)
      v8 = 1;
    else
      v8 = v3;
    result = MEMORY[0x186DA4928](103, 0xE100000000000000, v8);
  }
  *a1 = result;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  uint64_t v0;

  return specialized RawRepresentable<>._rawHashValue(seed:)(0, *(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    if (v1 >= 10)
      v1 = 10;
    if (v1 <= 1)
      v2 = 1;
    else
      v2 = v1;
    MEMORY[0x186DA4928](103, 0xE100000000000000, v2);
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t a1)
{
  uint64_t v1;

  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E97CFC + 4 * byte_182169FBC[*v0]))();
}

void sub_181E97CFC(_QWORD *a1@<X8>)
{
  *a1 = 1162167621;
  a1[1] = 0xE400000000000000;
}

void sub_181E97D10(_QWORD *a1@<X8>)
{
  *a1 = 0x4545454545;
  a1[1] = 0xE500000000000000;
}

void sub_181E97D28(_QWORD *a1@<X8>)
{
  *a1 = 0x454545454545;
  a1[1] = 0xE600000000000000;
}

void sub_181E97D40(_QWORD *a1@<X8>)
{
  *a1 = 101;
  a1[1] = 0xE100000000000000;
}

void sub_181E97D50(_QWORD *a1@<X8>)
{
  *a1 = 25957;
  a1[1] = 0xE200000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E97E44()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption.init(rawValue:);
  result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E97F14 + 4 * byte_182169FC8[*v0]))();
}

void sub_181E97F14(_QWORD *a1@<X8>)
{
  *a1 = 6513507;
  a1[1] = 0xE300000000000000;
}

void sub_181E97F28(_QWORD *a1@<X8>)
{
  *a1 = 1667457891;
  a1[1] = 0xE400000000000000;
}

void sub_181E97F3C(_QWORD *a1@<X8>)
{
  *a1 = 0x6363636363;
  a1[1] = 0xE500000000000000;
}

void sub_181E97F54(_QWORD *a1@<X8>)
{
  *a1 = 0x636363636363;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E98054()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  __asm { BR              X10 }
}

uint64_t sub_181E980F4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181E9818C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(_QWORD))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E98518 + 4 * byte_182169FDC[*v0]))();
}

void sub_181E98518(_QWORD *a1@<X8>)
{
  *a1 = 26728;
  a1[1] = 0xE200000000000000;
}

void sub_181E98528(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 72;
  a1[1] = v1;
}

void sub_181E98534(_QWORD *a1@<X8>)
{
  *a1 = 18504;
  a1[1] = 0xE200000000000000;
}

void sub_181E98544(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 75;
  a1[1] = v1;
}

void sub_181E98550(_QWORD *a1@<X8>)
{
  *a1 = 19275;
  a1[1] = 0xE200000000000000;
}

void sub_181E98560(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 107;
  a1[1] = v1;
}

void sub_181E9856C(_QWORD *a1@<X8>)
{
  *a1 = 27499;
  a1[1] = 0xE200000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MinuteOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 109;
  if (*v1)
    v2 = 28013;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.SecondOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 115;
  if (*v1)
    v2 = 29555;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.SymbolType.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_181E98A68()
{
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption(uint64_t a1)
{
  uint64_t v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(_QWORD))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  uint64_t v1;

  Date.FormatStyle.Symbol.SymbolType.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void Date.FormatStyle.Symbol.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181E99528()
{
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int Date.FormatStyle.Symbol.hashValue.getter()
{
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol()
{
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol()
{
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)();
  return Hasher._finalize()();
}

void static Date.FormatStyle.Symbol.Year.twoDigits.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 3;
}

uint64_t static Date.FormatStyle.Symbol.Year.extended(minimumLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 2;
  return result;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.twoDigits.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t static Date.FormatStyle.Symbol.YearForWeekOfYear.padded(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

void static Date.FormatStyle.Symbol.CyclicYear.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.Month.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.defaultDigits.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.twoDigits.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.Day.ordinalOfDayInMonth.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_WORD *)(a1 + 8) = 1;
}

BOOL static Date.FormatStyle.Symbol.DayPeriod.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.Symbol.DayPeriod.Width.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.Width.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.standard(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.with12s(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result + 3;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.conversational(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0x70806u >> (8 * *result);
  return result;
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(_QWORD *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

_QWORD *static Date.FormatStyle.Symbol.Hour.twoDigits(amPM:)@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0x3010507u >> (8 * *result);
  }
  return result;
}

_QWORD *static Date.FormatStyle.Symbol.Hour.conversationalDefaultDigits(amPM:)@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0xA080C06u >> (8 * *result);
  }
  return result;
}

_QWORD *static Date.FormatStyle.Symbol.Hour.conversationalTwoDigits(amPM:)@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0xB090D07u >> (8 * *result);
  }
  return result;
}

void static Date.FormatStyle.Symbol.Hour.defaultDigitsNoAMPM.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static Date.FormatStyle.Symbol.Hour.twoDigitsNoAMPM.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.oneBased.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void Date.FormatStyle.Symbol.VerbatimHour.HourCycle.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.encode(to:)(_QWORD *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.encode(to:)(_QWORD *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

_QWORD *static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  if (*result == 1)
  {
    if (v3)
      v4 = 6;
    else
      v4 = 2;
    goto LABEL_7;
  }
  if (!*result)
  {
    v4 = 4 * (v3 == 0);
LABEL_7:
    *a3 = v4;
    return result;
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *static Date.FormatStyle.Symbol.VerbatimHour.twoDigits(clock:hourCycle:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  if (*result == 1)
  {
    if (v3)
      v4 = 7;
    else
      v4 = 3;
LABEL_9:
    *a3 = v4;
    return result;
  }
  if (!*result)
  {
    if (v3)
      v4 = 1;
    else
      v4 = 5;
    goto LABEL_9;
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.fractional(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.milliseconds(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

BOOL static Date.FormatStyle.Symbol.TimeZone.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Date.FormatStyle.Symbol.TimeZone.Width.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Date.FormatStyle.Symbol.TimeZone.Width.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.iso8601(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result)
    v2 = 4;
  else
    v2 = 2;
  *a2 = v2;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.localizedGMT(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result)
    v2 = 3;
  else
    v2 = 5;
  *a2 = v2;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.identifier(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result)
    v2 = 9;
  else
    v2 = 8;
  *a2 = v2;
  return result;
}

void static Date.FormatStyle.Symbol.TimeZone.exemplarLocation.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static Date.FormatStyle.Symbol.TimeZone.genericLocation.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.omitted.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void static Date.FormatStyle.Symbol.CyclicYear.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.Month.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Date.FormatStyle.Symbol.DayPeriod.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static Date.FormatStyle.Symbol.Hour.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

void static Date.FormatStyle.Symbol.SecondFraction.omitted.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
}

void static Date.FormatStyle.Symbol.TimeZone.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_181E9A4B4@<X0>(char a1@<W8>)
{
  char v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if (v2 >= 8u)
    return 0;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1195853639;
    else
      v3 = 0x4747474747;
    if (a1 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 71;
  }
  if (v1)
  {
    if (v1 == 1)
      v6 = 1195853639;
    else
      v6 = 0x4747474747;
    if (v1 == 1)
      v7 = 0xE400000000000000;
    else
      v7 = 0xE500000000000000;
  }
  else
  {
    v7 = 0xE100000000000000;
    v6 = 71;
  }
  if (v3 == v6 && v4 == v7)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
}

uint64_t specialized static Date.FormatStyle.Symbol.CyclicYear.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        v4 = 0xE400000000000000;
        v5 = 1431655765;
      }
      else
      {
        v4 = 0xE500000000000000;
        v5 = 0x5555555555;
      }
    }
    else
    {
      v4 = 0xE100000000000000;
      v5 = 85;
    }
    v6 = 0xE400000000000000;
    v7 = 1431655765;
    if (v3 != 1)
    {
      v7 = 0x5555555555;
      v6 = 0xE500000000000000;
    }
    if (*a2)
      v8 = v7;
    else
      v8 = 85;
    if (*a2)
      v9 = v6;
    else
      v9 = 0xE100000000000000;
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t specialized static Date.FormatStyle.Symbol.Era.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        v4 = 0xE400000000000000;
        v5 = 1195853639;
      }
      else
      {
        v4 = 0xE500000000000000;
        v5 = 0x4747474747;
      }
    }
    else
    {
      v4 = 0xE100000000000000;
      v5 = 71;
    }
    v6 = 0xE400000000000000;
    v7 = 1195853639;
    if (v3 != 1)
    {
      v7 = 0x4747474747;
      v6 = 0xE500000000000000;
    }
    if (*a2)
      v8 = v7;
    else
      v8 = 71;
    if (*a2)
      v9 = v6;
    else
      v9 = 0xE100000000000000;
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t specialized static Date.FormatStyle.Symbol.Hour.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 14)
    return v3 == 14;
  if (v3 == 14)
    return 0;
  v5 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v2);
  v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v3) || v7 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Week.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        v4 = 0xE200000000000000;
        v5 = 30583;
      }
      else
      {
        v4 = 0xE100000000000000;
        v5 = 87;
      }
    }
    else
    {
      v4 = 0xE100000000000000;
      v5 = 119;
    }
    v6 = 0xE200000000000000;
    v7 = 30583;
    if (v3 != 1)
    {
      v7 = 87;
      v6 = 0xE100000000000000;
    }
    if (*a2)
      v8 = v7;
    else
      v8 = 119;
    if (*a2)
      v9 = v6;
    else
      v9 = 0xE100000000000000;
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      return 1;
  }
  return 0;
}

BOOL specialized static Date.FormatStyle.Symbol.Year.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == 255)
  {
    if (v4 != 255)
      return 0;
  }
  else
  {
    if (v4 == 255)
      return 0;
    v5 = *(_QWORD *)a2;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(_QWORD *)a1, v3);
    v7 = v6;
    v9 = v8;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4);
    if (v7 != v11 || v9 != v10)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (v13 & 1) != 0;
    }
    swift_bridgeObjectRelease_n();
  }
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Minute.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v3 == 2)
    return 0;
  if ((v2 & 1) != 0)
    v5 = 28013;
  else
    v5 = 109;
  if ((v2 & 1) != 0)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE100000000000000;
  if ((v3 & 1) != 0)
    v7 = 28013;
  else
    v7 = 109;
  if ((v3 & 1) != 0)
    v8 = 0xE200000000000000;
  else
    v8 = 0xE100000000000000;
  if (v5 != v7 || v6 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Second.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v3 == 2)
    return 0;
  if ((v2 & 1) != 0)
    v5 = 29555;
  else
    v5 = 115;
  if ((v2 & 1) != 0)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE100000000000000;
  if ((v3 & 1) != 0)
    v7 = 29555;
  else
    v7 = 115;
  if ((v3 & 1) != 0)
    v8 = 0xE200000000000000;
  else
    v8 = 0xE100000000000000;
  if (v5 != v7 || v6 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.TimeZone.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 12)
    return v3 == 12;
  if (v3 == 12)
    return 0;
  v5 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v2);
  v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v3) || v7 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.DayOfYear.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        v4 = 0xE200000000000000;
        v5 = 17476;
      }
      else
      {
        v4 = 0xE300000000000000;
        v5 = 4473924;
      }
    }
    else
    {
      v4 = 0xE100000000000000;
      v5 = 68;
    }
    v6 = 0xE200000000000000;
    v7 = 17476;
    if (v3 != 1)
    {
      v7 = 4473924;
      v6 = 0xE300000000000000;
    }
    if (*a2)
      v8 = v7;
    else
      v8 = 68;
    if (*a2)
      v9 = v6;
    else
      v9 = 0xE100000000000000;
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      return 1;
  }
  return 0;
}

void specialized static Date.FormatStyle.Symbol.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181E9B9B8(unsigned __int8 a1)
{
  char v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if (v2 < 8)
  {
    v3 = a1;
    if (a1)
    {
      if (a1 == 1)
        v4 = 1195853639;
      else
        v4 = 0x4747474747;
      if (v3 == 1)
        v5 = 0xE400000000000000;
      else
        v5 = 0xE500000000000000;
    }
    else
    {
      v5 = 0xE100000000000000;
      v4 = 71;
    }
    if (v1)
    {
      if (v1 == 1)
        v6 = 1195853639;
      else
        v6 = 0x4747474747;
      if (v1 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
    }
    else
    {
      v7 = 0xE100000000000000;
      v6 = 71;
    }
    if (v4 == v6 && v5 == v7)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      return 1;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, &unk_1E0F2C700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, &unk_1E0F2C700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, &unk_1E0F2C700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, &unk_1E0F2C700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, &unk_1E0F2C238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, &unk_1E0F2C238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, &unk_1E0F2C238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, &unk_1E0F2C238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, &unk_1E0F2C2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, &unk_1E0F2C2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, &unk_1E0F2C2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, &unk_1E0F2C2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Era, &type metadata for Date.FormatStyle.Symbol.Era);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Year, &type metadata for Date.FormatStyle.Symbol.Year);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.YearForWeekOfYear, &type metadata for Date.FormatStyle.Symbol.YearForWeekOfYear);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.CyclicYear, &type metadata for Date.FormatStyle.Symbol.CyclicYear);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Quarter, &type metadata for Date.FormatStyle.Symbol.Quarter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Month, &type metadata for Date.FormatStyle.Symbol.Month);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Week, &type metadata for Date.FormatStyle.Symbol.Week);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Day, &type metadata for Date.FormatStyle.Symbol.Day);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.DayOfYear, &type metadata for Date.FormatStyle.Symbol.DayOfYear);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Weekday, &type metadata for Date.FormatStyle.Symbol.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.DayPeriod, &type metadata for Date.FormatStyle.Symbol.DayPeriod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour, &type metadata for Date.FormatStyle.Symbol.Hour);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Minute, &type metadata for Date.FormatStyle.Symbol.Minute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Second, &type metadata for Date.FormatStyle.Symbol.Second);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SecondFraction, &type metadata for Date.FormatStyle.Symbol.SecondFraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.TimeZone, &type metadata for Date.FormatStyle.Symbol.TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneQuarter, &type metadata for Date.FormatStyle.Symbol.StandaloneQuarter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneMonth, &type metadata for Date.FormatStyle.Symbol.StandaloneMonth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneWeekday, &type metadata for Date.FormatStyle.Symbol.StandaloneWeekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour, &type metadata for Date.FormatStyle.Symbol.VerbatimHour);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol, &type metadata for Date.FormatStyle.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.DayPeriod.Width, &type metadata for Date.FormatStyle.Symbol.DayPeriod.Width);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle, &type metadata for Date.FormatStyle.Symbol.Hour.AMPMStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle, &type metadata for Date.FormatStyle.Symbol.VerbatimHour.HourCycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock, &type metadata for Date.FormatStyle.Symbol.VerbatimHour.Clock);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.TimeZone.Width, &type metadata for Date.FormatStyle.Symbol.TimeZone.Width);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width);
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol()
{
  return &type metadata for Date.FormatStyle.Symbol;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Era()
{
  return &type metadata for Date.FormatStyle.Symbol.Era;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Year(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Year(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.YearForWeekOfYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.CyclicYear()
{
  return &type metadata for Date.FormatStyle.Symbol.CyclicYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Quarter()
{
  return &type metadata for Date.FormatStyle.Symbol.Quarter;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  if (*a1 <= 5u)
    v6 = 5;
  else
    v6 = *a1;
  v7 = v6 - 6;
  if (*a1 < 5u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Week()
{
  return &type metadata for Date.FormatStyle.Symbol.Week;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Era(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Era(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181E9D238 + 4 * byte_18216A223[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181E9D26C + 4 * byte_18216A21E[v4]))();
}

uint64_t sub_181E9D26C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9D27CLL);
  return result;
}

uint64_t sub_181E9D288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9D290);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181E9D294(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D29C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.DayOfYear;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  if (*a1 <= 6u)
    v6 = 6;
  else
    v6 = *a1;
  v7 = v6 - 7;
  if (*a1 < 6u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181E9D3A4 + 4 * byte_18216A22D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181E9D3D8 + 4 * byte_18216A228[v4]))();
}

uint64_t sub_181E9D3D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D3E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9D3E8);
  return result;
}

uint64_t sub_181E9D3F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9D3FCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181E9D400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  if (*a1 <= 9u)
    v6 = 9;
  else
    v6 = *a1;
  v7 = v6 - 10;
  if (*a1 < 9u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_181E9D500 + 4 * byte_18216A237[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_181E9D534 + 4 * byte_18216A232[v4]))();
}

uint64_t sub_181E9D534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D53C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9D544);
  return result;
}

uint64_t sub_181E9D550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9D558);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_181E9D55C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  if (*a1 <= 0xEu)
    v6 = 14;
  else
    v6 = *a1;
  v7 = v6 - 15;
  if (*a1 < 0xEu)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_181E9D66C + 4 * byte_18216A241[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_181E9D6A0 + 4 * byte_18216A23C[v4]))();
}

uint64_t sub_181E9D6A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D6A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9D6B0);
  return result;
}

uint64_t sub_181E9D6BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9D6C4);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_181E9D6C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D6D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Minute()
{
  return &type metadata for Date.FormatStyle.Symbol.Minute;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  if (*a1 <= 2u)
    v6 = 2;
  else
    v6 = *a1;
  v7 = v6 - 3;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Second()
{
  return &type metadata for Date.FormatStyle.Symbol.Second;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SecondFraction()
{
  return &type metadata for Date.FormatStyle.Symbol.SecondFraction;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  if (*a1 <= 0xCu)
    v6 = 12;
  else
    v6 = *a1;
  v7 = v6 - 13;
  if (*a1 < 0xCu)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_181E9D940 + 4 * byte_18216A24B[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_181E9D974 + 4 * byte_18216A246[v4]))();
}

uint64_t sub_181E9D974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D97C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9D984);
  return result;
}

uint64_t sub_181E9D990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9D998);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_181E9D99C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9D9A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneQuarter()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneQuarter;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneMonth()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneMonth;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneWeekday()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneWeekday;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod.Width;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour.AMPMStyle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.Clock;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone.Width;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181E9DAA8 + 4 * byte_18216A255[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181E9DADC + 4 * byte_18216A250[v4]))();
}

uint64_t sub_181E9DADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DAE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DAECLL);
  return result;
}

uint64_t sub_181E9DAF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DB00);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181E9DB04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DB0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_181E9DC34 + 4 * byte_18216A25F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_181E9DC68 + 4 * byte_18216A25A[v4]))();
}

uint64_t sub_181E9DC68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DC70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DC78);
  return result;
}

uint64_t sub_181E9DC84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DC8CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_181E9DC90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DC98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone.Width(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E9DCF0 + 4 * byte_18216A269[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E9DD24 + 4 * byte_18216A264[v4]))();
}

uint64_t sub_181E9DD24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DD34);
  return result;
}

uint64_t sub_181E9DD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DD48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E9DD4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DD54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.HourOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_181E9DDAC + 4 * byte_18216A273[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_181E9DDE0 + 4 * byte_18216A26E[v4]))();
}

uint64_t sub_181E9DDE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DDE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DDF0);
  return result;
}

uint64_t sub_181E9DDFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DE04);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_181E9DE08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DE10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_181E9DE68 + 4 * byte_18216A27D[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_181E9DE9C + 4 * byte_18216A278[v4]))();
}

uint64_t sub_181E9DE9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DEA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DEACLL);
  return result;
}

uint64_t sub_181E9DEB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DEC0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_181E9DEC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181E9DF24 + 4 * byte_18216A287[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181E9DF58 + 4 * byte_18216A282[v4]))();
}

uint64_t sub_181E9DF58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9DF68);
  return result;
}

uint64_t sub_181E9DF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9DF7CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181E9DF80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9DF88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.StandaloneQuarter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181E9DFE0 + 4 * byte_18216A291[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181E9E014 + 4 * byte_18216A28C[v4]))();
}

uint64_t sub_181E9E014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9E01C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9E024);
  return result;
}

uint64_t sub_181E9E030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9E038);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181E9E03C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9E044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181E9E178 + 4 * byte_18216A29B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181E9E1AC + 4 * byte_18216A296[v4]))();
}

uint64_t sub_181E9E1AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9E1B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E9E1BCLL);
  return result;
}

uint64_t sub_181E9E1C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E9E1D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181E9E1D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E9E1DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x2E && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 46);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 3) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 8) >> 2) & 1))) ^ 0x3F;
  if (v3 >= 0x2D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x2D)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 46;
    if (a3 >= 0x2E)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x2E)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 4 * (((-a2 & 0x20) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 3;
}

uint64_t destructiveProjectEnumData for Date.FormatStyle.Symbol.SymbolType(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 7u;
  return result;
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 3 | (8 * a2);
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  return &unk_1E0F2C2F0;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  return &unk_1E0F2C238;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181E9E334 + 4 * byte_18216A2A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181E9E354 + 4 * byte_18216A2A5[v4]))();
}

_BYTE *sub_181E9E334(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181E9E354(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E9E35C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E9E364(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181E9E36C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181E9E374(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  return &unk_1E0F2C700;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType, &type metadata for Date.FormatStyle.Symbol.SymbolType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t countAndFlagsBits;
  Swift::String_optional v7;
  void *object;
  char v9;
  Swift::String_optional v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  v7 = String.Iterator.next()();
  countAndFlagsBits = v7.value._countAndFlagsBits;
  if (v7.value._object)
  {
    object = v7.value._object;
    do
    {
      if (countAndFlagsBits == a3 && object == a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          v11 = 0;
          goto LABEL_10;
        }
      }
      v10 = String.Iterator.next()();
      countAndFlagsBits = v10.value._countAndFlagsBits;
      object = v10.value._object;
    }
    while (v10.value._object);
  }
  v11 = 1;
LABEL_10:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)()
{
  uint64_t countAndFlagsBits;
  Swift::String_optional v1;
  void *object;
  char v3;
  Swift::String_optional v4;

  swift_bridgeObjectRetain();
  v1 = String.Iterator.next()();
  countAndFlagsBits = v1.value._countAndFlagsBits;
  if (v1.value._object)
  {
    object = v1.value._object;
    do
    {
      if (countAndFlagsBits == 89 && object == (void *)0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v4 = String.Iterator.next()();
      countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  if (String.count.getter() == 1)
    return 0;
  if (String.count.getter() == 2)
    return 1;
  return String.count.getter();
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  _BOOL4 v10;
  uint64_t v11;

  v4 = specialized Collection.first.getter(a1, a2);
  if (!v5)
    goto LABEL_27;
  v6 = v4;
  v7 = v5;
  if (v4 == 121 && v5 == (void *)0xE100000000000000)
    goto LABEL_18;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v10 = v6 == 114 && v7 == (void *)0xE100000000000000;
  if ((v8 & 1) == 0
    && !v10
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && ((v6 != 117 || v7 != (void *)0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
     || (specialized Sequence.allSatisfy(_:)(a1, a2, v6, v7) & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_27:
    v11 = 0;
    goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (!v10)
      _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (String.count.getter() != 1)
  {
    if (String.count.getter() == 2)
    {
      v11 = 1;
      goto LABEL_28;
    }
LABEL_25:
    v11 = String.count.getter();
    goto LABEL_28;
  }
  v11 = 0;
LABEL_28:
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v10;

  v4 = specialized Collection.first.getter(a1, a2);
  if (!v5)
    goto LABEL_8;
  v6 = v4;
  v7 = v5;
  if ((specialized Sequence.allSatisfy(_:)(a1, a2, v4, v5) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if ((v6 != 83 || v7 != (void *)0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v6 == 65 && v7 == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      v8 = String.count.getter();
      goto LABEL_9;
    }
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      goto LABEL_14;
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v8 = String.count.getter();
LABEL_9:
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5)
    return 5;
  else
    return v5;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t countAndFlagsBits;
  Swift::String_optional v7;
  void *object;
  char v9;
  Swift::String_optional v10;

  if (a1 == 100 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25700 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 70 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = String.Iterator.next()();
    countAndFlagsBits = v7.value._countAndFlagsBits;
    if (v7.value._object)
    {
      object = v7.value._object;
      do
      {
        if (countAndFlagsBits == 103 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
        }
        v10 = String.Iterator.next()();
        countAndFlagsBits = v10.value._countAndFlagsBits;
        object = v10.value._object;
      }
      while (v10.value._object);
    }
    swift_bridgeObjectRelease();
    v4 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  return v4;
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v0;

  return ((*(_QWORD *)(v0 + 48) ^ *(_QWORD *)(v0 + 80)) & 0x7FFFFFFFFFFF800) == 0;
}

_QWORD *specialized Collection<>.indices.getter@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  v5 = result[8];
  if (v5)
    v6 = result[10];
  else
    v6 = 0;
  if (a2 < 0 || v6 < a2)
    goto LABEL_112;
  v8 = a3;
  v9 = (unint64_t)result;
  v10 = result[11];
  v54 = result[9];
  if (v5)
  {
    if (result[10] > a2 && *(_WORD *)(v5 + 16) != 0)
    {
      v53 = result[10];
      v51 = result[11];
      v30 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        result = (_QWORD *)swift_retain();
        v14 = a2;
        v31 = v5;
        while (1)
        {
          v33 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16))
            goto LABEL_42;
          v34 = *(_QWORD *)(v31 + 40);
          v23 = __OFSUB__(v14, v34);
          v35 = v14 - v34;
          if (v23)
            goto LABEL_107;
          if (__OFADD__(v35, 1))
            goto LABEL_108;
          if (v35 + 1 < 1)
          {
            v33 = 0;
            goto LABEL_43;
          }
          if ((_DWORD)v33 == 1)
            break;
          v36 = (uint64_t *)(v31 + 64);
          v37 = 1;
          while (1)
          {
            v38 = *v36;
            v36 += 3;
            v14 = v35 - v38;
            if (__OFSUB__(v35, v38))
            {
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if (__OFADD__(v14, 1))
              goto LABEL_103;
            if (v14 + 1 < 1)
              break;
            ++v37;
            v35 = v14;
            if (v33 == v37)
              goto LABEL_42;
          }
          v33 = v37;
          v14 = v35;
LABEL_43:
          v32 = (4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C;
          v30 = ((-15 << v32) - 1) & v30 | (v33 << v32);
          v13 = *(_QWORD *)(v31 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v31 = v13;
          if (!*(_BYTE *)(v13 + 18))
            goto LABEL_61;
        }
        v14 = v35;
LABEL_42:
        if (!v14)
          goto LABEL_43;
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      swift_unknownObjectRetain_n();
      result = (_QWORD *)swift_retain();
      v14 = a2;
      v13 = v5;
LABEL_61:
      v39 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        v40 = *(_QWORD *)(v13 + 24);
        v23 = __OFSUB__(v14, v40);
        v41 = v14 - v40;
        if (v23)
          goto LABEL_120;
        if (__OFADD__(v41, 1))
        {
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        if (v41 + 1 < 1)
        {
          v39 = 0;
LABEL_86:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v12 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
          v10 = v51;
          v8 = a3;
          goto LABEL_13;
        }
        if ((_DWORD)v39 != 1)
        {
          v46 = (uint64_t *)(v13 + 48);
          v47 = 1;
          while (1)
          {
            v48 = *v46;
            v46 += 3;
            v14 = v41 - v48;
            if (__OFSUB__(v41, v48))
              goto LABEL_113;
            if (__OFADD__(v14, 1))
              goto LABEL_114;
            if (v14 + 1 < 1)
              break;
            ++v47;
            v41 = v14;
            if (v39 == v47)
              goto LABEL_85;
          }
          v39 = v47;
          v14 = v41;
          goto LABEL_86;
        }
        v14 = v41;
      }
LABEL_85:
      if (v14)
        goto LABEL_118;
      goto LABEL_86;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  v12 = specialized Rope._endPath.getter(v5);
  result = (_QWORD *)swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  if (!v5)
  {
    v15 = 0;
    v16 = a2;
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v54);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v16 = a2 - v14;
  if (__OFSUB__(a2, v14))
  {
    __break(1u);
    goto LABEL_89;
  }
LABEL_14:
  a4[3] = v10;
  a4[4] = v12;
  a4[5] = v13;
  a4[6] = v15;
  a4[7] = v16;
  v15 = *(_QWORD *)(v9 + 64);
  v17 = *(_QWORD *)(v9 + 72);
  v18 = *(_QWORD *)(v9 + 80);
  v9 = *(_QWORD *)(v9 + 88);
  if (a2 != v8)
  {
    v28 = swift_unknownObjectRetain();
    result = (_QWORD *)specialized Rope._endPath.getter(v28);
    v29 = (unint64_t)result;
    if (v15)
    {
      result = (_QWORD *)swift_unknownObjectRelease();
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v17 = 0;
      v18 = 0;
    }
LABEL_72:
    a4[8] = v9;
    a4[9] = v29;
    a4[10] = v8;
    a4[11] = v17;
    a4[12] = v18;
    return result;
  }
  if (!v15)
  {
    if (a2 > 0)
      goto LABEL_119;
LABEL_70:
    swift_unknownObjectRetain_n();
    v29 = specialized Rope._endPath.getter(v15);
    result = (_QWORD *)swift_unknownObjectRelease();
    v8 = 0;
    v13 = 0;
    if (!v15)
      goto LABEL_98;
    goto LABEL_71;
  }
  if (v18 < a2)
    goto LABEL_117;
  if (!*(_WORD *)(v15 + 16) || v18 <= a2)
    goto LABEL_70;
  v53 = v17;
  v54 = v9;
  v19 = *(unsigned __int8 *)(v15 + 18);
  if (!*(_BYTE *)(v15 + 18))
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v9 = 0;
    v13 = a2;
    v8 = v15;
    v42 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
      goto LABEL_75;
LABEL_96:
    if (!v13)
    {
      while (1)
      {
LABEL_97:
        swift_unknownObjectRelease();
        result = (_QWORD *)swift_unknownObjectRelease();
        v29 = v9 | (v42 << 8);
        v17 = v53;
        v9 = v54;
        if (v15)
        {
LABEL_71:
          swift_unknownObjectRetain();
          v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v29, v8, v15, v17);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v18 = a2 - v13;
          if (!__OFSUB__(a2, v13))
            goto LABEL_72;
        }
        else
        {
LABEL_98:
          v17 = 0;
          v18 = a2 - v13;
          if (!__OFSUB__(a2, v13))
            goto LABEL_72;
        }
        __break(1u);
LABEL_101:
        v42 = v44;
        v13 = v43;
      }
    }
    goto LABEL_124;
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v13 = a2;
  v8 = v15;
  do
  {
    v21 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
    {
      v22 = *(_QWORD *)(v8 + 40);
      v23 = __OFSUB__(v13, v22);
      v24 = v13 - v22;
      if (v23)
        goto LABEL_110;
      if (__OFADD__(v24, 1))
        goto LABEL_111;
      if (v24 + 1 < 1)
      {
        v21 = 0;
        goto LABEL_23;
      }
      if ((_DWORD)v21 != 1)
      {
        v25 = (uint64_t *)(v8 + 64);
        v26 = 1;
        while (1)
        {
          v27 = *v25;
          v25 += 3;
          v13 = v24 - v27;
          if (__OFSUB__(v24, v27))
            goto LABEL_104;
          if (__OFADD__(v13, 1))
            goto LABEL_105;
          if (v13 + 1 < 1)
            break;
          ++v26;
          v24 = v13;
          if (v21 == v26)
            goto LABEL_22;
        }
        v21 = v26;
        v13 = v24;
        goto LABEL_23;
      }
      v13 = v24;
    }
LABEL_22:
    if (v13)
      goto LABEL_109;
LABEL_23:
    v20 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
    v19 = ((-15 << v20) - 1) & v19 | (v21 << v20);
    v8 = *(_QWORD *)(v8 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    result = (_QWORD *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v8 + 18));
  v9 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  v42 = *(unsigned __int16 *)(v8 + 16);
  if (!*(_WORD *)(v8 + 16))
    goto LABEL_96;
LABEL_75:
  v45 = *(_QWORD *)(v8 + 24);
  v23 = __OFSUB__(v13, v45);
  v43 = v13 - v45;
  if (v23)
    goto LABEL_122;
  if (!__OFADD__(v43, 1))
  {
    if (v43 + 1 >= 1)
    {
      if ((_DWORD)v42 == 1)
      {
        v13 = v43;
        goto LABEL_96;
      }
      v49 = (uint64_t *)(v8 + 48);
      v44 = 1;
      while (1)
      {
        v50 = *v49;
        v49 += 3;
        v13 = v43 - v50;
        if (__OFSUB__(v43, v50))
          break;
        if (__OFADD__(v13, 1))
          goto LABEL_116;
        if (v13 + 1 < 1)
          goto LABEL_101;
        ++v44;
        v43 = v13;
        if (v42 == v44)
          goto LABEL_96;
      }
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_89:
    v42 = 0;
    goto LABEL_97;
  }
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  if (a1)
  {
    v9 = *(unsigned __int8 *)(a1 + 18);
    swift_unknownObjectRetain();
    v10 = a2;
    v11 = a3;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
  }
  a5[4] = a4;
  a5[5] = v9;
  a5[7] = 0;
  a5[8] = 0;
  a5[6] = 0;
  v12 = swift_unknownObjectRetain();
  v13 = specialized Rope._endPath.getter(v12);
  result = swift_unknownObjectRelease();
  a5[9] = a4;
  a5[10] = v13;
  a5[11] = 0;
  a5[12] = v10;
  a5[13] = v11;
  return result;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  int64x2_t v4;
  int8x16_t v5;
  __int128 v6;

  v2 = v1[5];
  v3 = v1[6];
  v4 = *((int64x2_t *)v1 + 3);
  *(_OWORD *)(a1 + 64) = v1[4];
  *(_OWORD *)(a1 + 80) = v2;
  v5 = *((int8x16_t *)v1 + 1);
  *(_OWORD *)a1 = *v1;
  *(int8x16_t *)(a1 + 16) = v5;
  v6 = v1[3];
  *(_OWORD *)(a1 + 32) = v1[2];
  *(_OWORD *)(a1 + 48) = v6;
  v4.i64[1] = *((_QWORD *)v1 + 10);
  v5.i64[0] = -65536;
  v5.i64[1] = -65536;
  *(_OWORD *)(a1 + 96) = v3;
  *(int8x16_t *)(a1 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v4, 5uLL), v5), (int8x16_t)vdupq_n_s64(4uLL));
  return outlined retain of Locale((uint64_t)v1);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = a2[8];
  if (v6)
    v7 = a2[10];
  else
    v7 = 0;
  if (a3 < 0)
    goto LABEL_118;
  v8 = a3;
  if (v7 < a3)
    goto LABEL_118;
  v9 = a4;
  v11 = result;
  v12 = a2[9];
  v60 = a2[11];
  if (v6)
  {
    if (a2[10] > a3 && *(_WORD *)(v6 + 16) != 0)
    {
      v58 = a3;
      v59 = a2[9];
      v56 = a4;
      v57 = result;
      v18 = *(unsigned __int8 *)(v6 + 18);
      if (*(_BYTE *)(v6 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v16 = v58;
        v19 = v6;
        while (1)
        {
          v21 = *(unsigned __int16 *)(v19 + 16);
          if (!*(_WORD *)(v19 + 16))
            goto LABEL_17;
          v22 = *(_QWORD *)(v19 + 40);
          v23 = __OFSUB__(v16, v22);
          v24 = v16 - v22;
          if (v23)
            goto LABEL_113;
          if (__OFADD__(v24, 1))
          {
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
          if (v24 + 1 >= 1)
            break;
          v21 = 0;
LABEL_18:
          v20 = (4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C;
          v18 = ((-15 << v20) - 1) & v18 | (v21 << v20);
          v17 = *(_QWORD *)(v19 + 24 + 24 * v21);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v19 = v17;
          if (!*(_BYTE *)(v17 + 18))
            goto LABEL_33;
        }
        if ((_DWORD)v21 != 1)
        {
          v25 = (uint64_t *)(v19 + 64);
          v26 = 1;
          while (1)
          {
            v27 = *v25;
            v25 += 3;
            v16 = v24 - v27;
            if (__OFSUB__(v24, v27))
            {
              __break(1u);
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }
            if (__OFADD__(v16, 1))
              goto LABEL_109;
            if (v16 + 1 < 1)
              break;
            ++v26;
            v24 = v16;
            if (v21 == v26)
              goto LABEL_17;
          }
          v21 = v26;
          v16 = v24;
          goto LABEL_18;
        }
        v16 = v24;
LABEL_17:
        if (v16)
          goto LABEL_112;
        goto LABEL_18;
      }
      result = swift_unknownObjectRetain_n();
      v16 = v58;
      v17 = v6;
LABEL_33:
      v28 = *(unsigned __int16 *)(v17 + 16);
      if (*(_WORD *)(v17 + 16))
      {
        v29 = *(_QWORD *)(v17 + 24);
        v23 = __OFSUB__(v16, v29);
        v30 = v16 - v29;
        v9 = v56;
        if (v23)
        {
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
        if (__OFADD__(v30, 1))
        {
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
        if (v30 + 1 < 1)
        {
          v28 = 0;
        }
        else
        {
          if ((_DWORD)v28 == 1)
          {
            v16 = v30;
            goto LABEL_46;
          }
          v31 = (uint64_t *)(v17 + 48);
          v32 = 1;
          while (1)
          {
            v33 = *v31;
            v31 += 3;
            v16 = v30 - v33;
            if (__OFSUB__(v30, v33))
              goto LABEL_122;
            if (__OFADD__(v16, 1))
              goto LABEL_123;
            if (v16 + 1 < 1)
              break;
            ++v32;
            v30 = v16;
            if (v28 == v32)
              goto LABEL_46;
          }
          v28 = v32;
          v16 = v30;
        }
LABEL_47:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v15 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
        v11 = v57;
        v8 = v58;
        goto LABEL_48;
      }
      v9 = v56;
LABEL_46:
      if (v16)
      {
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      goto LABEL_47;
    }
  }
  v14 = swift_unknownObjectRetain_n();
  v15 = specialized Rope._endPath.getter(v14);
  result = swift_unknownObjectRelease();
  v16 = 0;
  if (!v6)
    goto LABEL_49;
  v59 = v12;
  v17 = 0;
LABEL_48:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v15, v17, v6, v59);
  result = swift_unknownObjectRelease_n();
LABEL_49:
  v34 = v8 - v16;
  if (!__OFSUB__(v8, v16))
  {
    v6 = a2[8];
    v35 = a2[10];
    if (v8 != v9)
    {
      v43 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v43);
      if (v6)
        result = swift_unknownObjectRelease();
      else
        v35 = 0;
      goto LABEL_102;
    }
    v59 = a2[9];
    v60 = a2[11];
    if (v6)
    {
      if (v35 < v8)
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      if (*(_WORD *)(v6 + 16) && v35 > v8)
      {
        v55 = v34;
        v57 = v11;
        v58 = v8;
        v8 = *(unsigned __int8 *)(v6 + 18);
        if (*(_BYTE *)(v6 + 18))
        {
          v56 = v9;
          result = swift_unknownObjectRetain_n();
          v15 = v58;
          v34 = v6;
          while (1)
          {
            v37 = *(unsigned __int16 *)(v34 + 16);
            if (!*(_WORD *)(v34 + 16))
              goto LABEL_58;
            v38 = *(_QWORD *)(v34 + 40);
            v23 = __OFSUB__(v15, v38);
            v39 = v15 - v38;
            if (v23)
              goto LABEL_116;
            if (__OFADD__(v39, 1))
              goto LABEL_117;
            if ((uint64_t)(v39 + 1) >= 1)
              break;
            v37 = 0;
LABEL_59:
            v36 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
            v8 = ((-15 << v36) - 1) & v8 | (v37 << v36);
            v34 = *(_QWORD *)(v34 + 24 + 24 * v37);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            if (!*(_BYTE *)(v34 + 18))
              goto LABEL_79;
          }
          if ((_DWORD)v37 != 1)
          {
            v40 = (uint64_t *)(v34 + 64);
            v41 = 1;
            while (1)
            {
              v42 = *v40;
              v40 += 3;
              v15 = v39 - v42;
              if (__OFSUB__(v39, v42))
                break;
              if (__OFADD__(v15, 1))
                goto LABEL_111;
              if ((uint64_t)(v15 + 1) < 1)
              {
                v37 = v41;
                v15 = v39;
                goto LABEL_59;
              }
              ++v41;
              v39 = v15;
              if (v37 == v41)
                goto LABEL_58;
            }
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }
          v15 = v39;
LABEL_58:
          if (v15)
            goto LABEL_115;
          goto LABEL_59;
        }
        result = swift_unknownObjectRetain_n();
        v44 = 0;
        v8 = v58;
        v15 = v58;
        v34 = v6;
        v45 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16))
          goto LABEL_96;
        goto LABEL_84;
      }
    }
    else if (v8 > 0)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    swift_unknownObjectRetain_n();
    v46 = specialized Rope._endPath.getter(v6);
    result = swift_unknownObjectRelease();
    v15 = 0;
    if (!v6)
      goto LABEL_101;
    v55 = v34;
    v34 = 0;
    goto LABEL_99;
  }
  __break(1u);
LABEL_79:
  v44 = v8 & 0xFFFFFFFFFFFFF0FFLL;
  v9 = v56;
  v8 = v58;
  v45 = *(unsigned __int16 *)(v34 + 16);
  if (!*(_WORD *)(v34 + 16))
    goto LABEL_96;
LABEL_84:
  v47 = *(_QWORD *)(v34 + 24);
  v23 = __OFSUB__(v15, v47);
  v48 = v15 - v47;
  if (v23)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (__OFADD__(v48, 1))
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if ((uint64_t)(v48 + 1) < 1)
  {
    v45 = 0;
LABEL_97:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    if (!v6)
    {
      v11 = v57;
      goto LABEL_100;
    }
    v46 = v44 | (v45 << 8);
    v11 = v57;
LABEL_99:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v46, v34, v6, v59);
    result = swift_unknownObjectRelease_n();
LABEL_100:
    v34 = v55;
LABEL_101:
    v35 = v8 - v15;
    if (__OFSUB__(v8, v15))
    {
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
LABEL_102:
    if (v35 < v34)
      goto LABEL_119;
    v52 = *(_QWORD *)(v11 + 32);
    if (v52 < v34)
    {
LABEL_120:
      __break(1u);
    }
    else
    {
      v53 = *(_QWORD *)(v11 + 72);
      if (v35 >= v53)
      {
        *(_QWORD *)(a5 + 88) = v8;
        *(_QWORD *)(a5 + 96) = v9;
        v54 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)a5 = *(_OWORD *)v11;
        *(_OWORD *)(a5 + 16) = v54;
        *(_QWORD *)(a5 + 32) = v52;
        *(_OWORD *)(a5 + 40) = *(_OWORD *)(v11 + 40);
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(v11 + 56);
        *(_QWORD *)(a5 + 72) = v53;
        *(_QWORD *)(a5 + 80) = a2;
        return swift_retain();
      }
    }
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  if ((_DWORD)v45 != 1)
  {
    v49 = (uint64_t *)(v34 + 48);
    v50 = 1;
    while (1)
    {
      v51 = *v49;
      v49 += 3;
      v15 = v48 - v51;
      if (__OFSUB__(v48, v51))
        goto LABEL_125;
      if (__OFADD__(v15, 1))
        goto LABEL_126;
      if ((uint64_t)(v15 + 1) < 1)
      {
        v45 = v50;
        v15 = v48;
        goto LABEL_97;
      }
      ++v50;
      v48 = v15;
      if (v45 == v50)
        goto LABEL_96;
    }
  }
  v15 = v48;
LABEL_96:
  if (!v15)
    goto LABEL_97;
LABEL_134:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (a2)
    v12 = a4;
  else
    v12 = 0;
  swift_unknownObjectRetain();
  specialized Rope._endPath.getter(a2);
  result = swift_unknownObjectRelease();
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = *(_QWORD *)(a1 + 32);
  if (v14 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a1 + 72);
  if (v12 >= v15)
  {
    *(_QWORD *)(a6 + 88) = a3;
    *(_QWORD *)(a6 + 96) = a4;
    *(_QWORD *)(a6 + 104) = a5;
    v16 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a1;
    *(_OWORD *)(a6 + 16) = v16;
    *(_QWORD *)(a6 + 32) = v14;
    *(_OWORD *)(a6 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a6 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a6 + 72) = v15;
    *(_QWORD *)(a6 + 80) = a2;
    return swift_unknownObjectRetain();
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized Collection<>.subscript.getter@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = (*(_QWORD *)(v3 + 80) >> 9) & 0x3FFFFFFFFFFFCLL;
  v5 = (*(_QWORD *)(v3 + 48) >> 9) & 0x3FFFFFFFFFFFCLL;
  if (v4 < v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 > result >> 14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 >= a2 >> 14)
  {
    v6 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a3 + 96) = v6;
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v3 + 96);
    v7 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 32) = v7;
    v8 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a3 + 64) = v8;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = a2;
    return outlined retain of Locale(v3);
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *Range<>.init<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void (**Description)(char *, _QWORD, ValueMetadata *);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (**v30)(char *, _QWORD, ValueMetadata *);
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(char *, _QWORD, ValueMetadata *);
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;

  v46 = a6;
  Description = (void (**)(char *, _QWORD, ValueMetadata *))a4[-1].Description;
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))((char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<String.Index>);
  if (swift_dynamicCast())
  {
    v21 = v47;
    Description[2](v15, a2, a4);
    Range<>.init<A>(_range:in:)(v21, *((unint64_t *)&v21 + 1), (uint64_t)v15, a4, v46, (uint64_t)&v47);
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a2, a4);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  }
  else
  {
    v43 = a5;
    v44 = v17;
    v45 = Description;
    v23 = v46;
    v24 = a2;
    v25 = (_QWORD *)AttributedStringProtocol.__guts.getter(a4, v46);
    v26 = v25[2];
    v42 = v25[3];
    v41 = v25[4];
    v40 = v25[5];
    v39 = v25[6];
    v38 = v25[7];
    swift_unknownObjectRetain();
    swift_release();
    (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(v23 + 32))(&v47, a4, v23);
    v37 = *((_QWORD *)&v47 + 1);
    v27 = v47;
    v36 = v48;
    v35 = v49;
    result = (*(_QWORD *(**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(v23 + 40))(&v57, a4, v23);
    if (v57 >> 10 < v27 >> 10)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)&v47 = v26;
    *((_QWORD *)&v47 + 1) = v42;
    v48 = v41;
    v49 = v40;
    *(_QWORD *)&v50 = v39;
    *((_QWORD *)&v50 + 1) = v38;
    *(_QWORD *)&v51 = v27;
    *((_QWORD *)&v51 + 1) = v37;
    v52 = v36;
    v53 = v35;
    v54 = v57;
    v55 = v58;
    v56 = v59;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v28 = v57;
    v29 = v58;
    v30 = v45;
    v45[2](v15, v24, a4);
    Range<>.init<A>(_range:in:)(v28, v29, (uint64_t)v15, a4, v46, (uint64_t)&v47);
    swift_unknownObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))v30[1])(v24, a4);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(a1, a3);
  }
  v31 = v49;
  if (v49 == 2)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)(a7 + 24) = 2;
    v32 = 0uLL;
    *(_OWORD *)(a7 + 32) = 0u;
  }
  else
  {
    v33 = v50;
    v32 = v51;
    v34 = v48;
    *(_OWORD *)a7 = v47;
    *(_QWORD *)(a7 + 16) = v34;
    *(_QWORD *)(a7 + 24) = v31;
    *(_OWORD *)(a7 + 32) = v33;
  }
  *(_OWORD *)(a7 + 48) = v32;
  return result;
}

uint64_t String.init(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[7];
  _OWORD v12[11];
  _OWORD v13[3];
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v1 = a1[3];
  v15 = a1[2];
  v16 = v1;
  v2 = a1[8];
  v3 = a1[6];
  v20 = a1[7];
  v21 = v2;
  v4 = a1[5];
  v17 = a1[4];
  v18 = v4;
  v19 = v3;
  v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  v12[7] = v14[0];
  v12[8] = v5;
  v12[9] = v15;
  v12[10] = v16;
  v6 = (_OWORD *)v17;
  v7 = *(_OWORD *)(v17 + 16);
  v8 = *(_OWORD *)(v17 + 48);
  v13[1] = *(_OWORD *)(v17 + 32);
  v13[2] = v8;
  v13[0] = v7;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Locale((uint64_t)v13);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v13);
  outlined release of Locale((uint64_t)v11);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  v9 = v6[2];
  v12[0] = v6[1];
  v12[1] = v9;
  v12[2] = v6[3];
  v12[3] = v11[3];
  v12[4] = v11[4];
  v12[5] = v11[5];
  v12[6] = v11[6];
  swift_unknownObjectRetain();
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  return MEMORY[0x186DA46E8](v12);
}

uint64_t Range<>.init<A>(_:in:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD v24[2];
  void (*v25)(char *, uint64_t);
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  _QWORD v33[10];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v18 - v12;
  v9 = (void (*)(char *, uint64_t))*((_QWORD *)a1 + 4);
  v10 = a1[64];
  v11 = *((_QWORD *)a1 + 9);
  LOBYTE(v12) = a1[104];
  if ((v10 & 1) == 0 && (a1[104] & 1) == 0)
  {
    v19 = (void (*)(char *, uint64_t))*((_QWORD *)a1 + 9);
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    dispatch thunk of Collection.startIndex.getter();
    v23 = v33[0];
    swift_getAssociatedConformanceWitness();
    dispatch thunk of Collection.index(_:offsetBy:)();
    v9 = *(void (**)(char *, uint64_t))(v7 + 8);
    v9(v8, AssociatedTypeWitness);
    v7 = *(_QWORD *)&v24[0];
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    result = dispatch thunk of Collection.startIndex.getter();
    v22 = v23;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    a1 = v8;
    dispatch thunk of Collection.index(_:offsetBy:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
    v9(v8, AssociatedTypeWitness);
    v12 = v33[0] >> 14;
    if (v33[0] >> 14 >= v7 >> 14)
      return v7;
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 12);
  v15 = *((_QWORD *)a1 + 7);
  v16 = *((_OWORD *)a1 + 1);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v16;
  v25 = v9;
  v26 = *(_OWORD *)(a1 + 40);
  v27 = v15;
  v28 = v10;
  v29 = v11;
  v30 = *((_OWORD *)a1 + 5);
  v31 = v14;
  v32 = v12;
  AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v33);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
  if (v28 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
    return 0;
  }
  v19 = v25;
  dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
  dispatch thunk of Collection.startIndex.getter();
  v21 = v22;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.index(_:offsetBy:)();
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v8, AssociatedTypeWitness);
  v7 = v23;
  dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
  result = dispatch thunk of Collection.startIndex.getter();
  v20 = v21;
  if (__OFADD__(v19, 1))
    goto LABEL_12;
  dispatch thunk of Collection.index(_:offsetBy:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  result = ((uint64_t (*)(char *, uint64_t))v17)(v8, AssociatedTypeWitness);
  if (v22 >> 14 >= v7 >> 14)
    return v7;
LABEL_13:
  __break(1u);
  return result;
}

void protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181EA1250()
{
  uint64_t v0;

  v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)(a1, a2);
}

uint64_t specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  char v14;
  char v15;
  Swift::String v16;

  v16._countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  result = AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(v16, &v15);
  v4 = v15;
  if (v15 != 7)
    goto LABEL_8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v5 = objc_allocWithZone((Class)NSError);
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithDomain_code_userInfo_, v6, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_domain);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    a2 = v12;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      __break(1u);
LABEL_8:
      *a2 = v4;
      return result;
    }
  }
  return swift_willThrow();
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  _QWORD v20[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v20 - v7;
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v20[1] = v9;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v11 = objc_allocWithZone((Class)NSError);
  v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v8 = (char *)objc_msgSend(v13, sel_domain);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  a2 = v15;

  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && a2 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    AssociatedTypeWitness = v16;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      __break(1u);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
    }
  }
  return swift_willThrow();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  _QWORD v20[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v7 = MEMORY[0x1E0C80A78](v5).n128_u64[0];
  v9 = (char *)v20 - v8;
  v20[1] = objc_msgSend(a1, sel_integerValue, v7);
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v11 = objc_allocWithZone((Class)NSError);
  v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v9 = (char *)objc_msgSend(v13, sel_domain);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  a2 = v15;

  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && a2 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    AssociatedTypeWitness = v16;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      __break(1u);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, AssociatedTypeWitness);
    }
  }
  return swift_willThrow();
}

uint64_t String.init(_characters:)(uint64_t *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];

  v1 = *a1;
  v2 = *(_OWORD *)(*a1 + 32);
  v6[0] = *(_OWORD *)(*a1 + 16);
  v6[1] = v2;
  v3 = *(_OWORD *)(a1 + 1);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v3;
  v4 = *(_OWORD *)(a1 + 5);
  v6[4] = *(_OWORD *)(a1 + 3);
  v6[5] = v4;
  v6[6] = *(_OWORD *)(a1 + 7);
  swift_unknownObjectRetain();
  swift_release();
  return MEMORY[0x186DA46E8](v6);
}

id static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v1);
}

void AttributeContainer.init(_:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t Default;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  __CFString *v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __CFString *v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  __n128 v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t, __n128);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  char v92;
  char v93;
  int64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  __CFString *v104;
  int64_t *v105;
  int64_t *v106;
  int64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _QWORD *v116;
  int64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  int64_t *v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[32];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  void *v133;
  char v134;
  __int128 v135;

  v99 = a2;
  Default = _loadDefaultAttributes()();
  v4 = Default;
  v5 = 0;
  v114 = 0;
  v135 = MEMORY[0x1E0DEE9E0];
  v6 = *(_QWORD *)(a1 + 64);
  v110 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = (char *)&v126 + 8;
  v11 = &v134;
  v104 = CFSTR("NSCocoaErrorDomain");
  v117 = (unint64_t)(v7 + 63) >> 6;
  v98 = v117 - 1;
  v101 = MEMORY[0x1E0DEE9B0] + 8;
  v100 = MEMORY[0x1E0DEE9B8] + 8;
  v109 = a1;
  v113 = Default;
  v112 = (char *)&v126 + 8;
  v111 = &v134;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v5 << 6);
LABEL_7:
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v126 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v15 = (void *)v126;
    outlined init with copy of Any(v14 + 32 * v13, (uint64_t)v10);
    v16 = v15;
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)&v126, (uint64_t)&v133, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    v19 = v133;
    if (!v133)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *v99 = v135;
      return;
    }
    outlined init with take of Any(v11, &v131);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (*(_QWORD *)(v4 + 16)
      && (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20, v21), (v23 & 1) != 0))
    {
      v24 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v22);
      v26 = *v24;
      v25 = v24[1];
      swift_bridgeObjectRelease();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v28 = type metadata accessor for Optional();
      v122 = &v98;
      v119 = v28;
      v120 = *(_QWORD *)(v28 - 8);
      v29 = *(_QWORD *)(v120 + 64);
      MEMORY[0x1E0C80A78](v28);
      v118 = (char *)&v98 - v30;
      v31 = v132;
      v32 = __swift_project_boxed_opaque_existential_1(&v131, v132);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v34 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
      v121 = v5;
      v115 = v25;
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (v34 != 8)
          goto LABEL_68;
        v35 = *v32;
        swift_unknownObjectRetain();
      }
      else
      {
        v95 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v97 + 16))((char *)&v98 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v31, v95);
        v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      v36 = swift_conformsToProtocol2();
      if (v36)
        v37 = v36;
      else
        v37 = 0;
      if (v36)
        v38 = v26;
      else
        v38 = 0;
      if (!v38)
      {
        v108 = &v98;
        v45 = *(_QWORD **)(AssociatedTypeWitness - 8);
        MEMORY[0x1E0C80A78](v36);
        v47 = (char *)&v98 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
        v107 = &v98;
        *(_QWORD *)&v126 = v35;
        MEMORY[0x1E0C80A78](v48);
        swift_unknownObjectRetain();
        v49 = swift_dynamicCast();
        v50 = (_QWORD *)v35;
        v116 = v45;
        v51 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v45[7];
        if ((v49 & 1) != 0)
        {
          v51((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, AssociatedTypeWitness);
          v52 = (void (*)(char *, char *, uint64_t))v116[4];
          v52(v47, (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), AssociatedTypeWitness);
          v53 = v118;
          v52(v118, v47, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          goto LABEL_43;
        }
        v116 = v50;
        v51((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v120 + 8))((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v119);
        v63 = v104;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v64 = objc_allocWithZone((Class)NSError);
        v65 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v57 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v66 = objc_msgSend(v57, sel_domain);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        if (v67 != static String._unconditionallyBridgeFromObjectiveC(_:)(v63) || v69 != v70)
        {
          v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v109;
          v4 = v113;
          v10 = v112;
          v11 = v111;
          if ((v93 & 1) == 0)
            goto LABEL_70;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease_n();
        a1 = v109;
        goto LABEL_41;
      }
      swift_getAssociatedTypeWitness();
      v116 = (_QWORD *)v35;
      v39 = swift_dynamicCastUnknownClass();
      if (v39)
      {
        v40 = v39;
        v41 = swift_getAssociatedTypeWitness();
        v108 = &v98;
        v42 = MEMORY[0x1E0C80A78](v41);
        v43 = v40;
        v44 = v114;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v37 + 32))(v43, v38, v37, v42);
        if (v44)
        {
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

          v114 = 0;
          a1 = v109;
          v4 = v113;
          v10 = v112;
          v11 = v111;
          goto LABEL_51;
        }
        v114 = 0;
        v53 = v118;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v116 = *(_QWORD **)(AssociatedTypeWitness - 8);
        v51 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v116[7];
LABEL_43:
        v51(v53, 0, 1, AssociatedTypeWitness);
        v71 = v115;
        v72 = v53;
        v107 = (int64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v115 + 24))(v26, v115);
        v108 = (_QWORD *)v73;
        v106 = &v98;
        v74 = v116;
        v75 = v116[8];
        MEMORY[0x1E0C80A78](v107);
        v102 = (v75 + 15) & 0xFFFFFFFFFFFFFFF0;
        v103 = (char *)&v98 - v102;
        v105 = &v98;
        v77 = MEMORY[0x1E0C80A78](v76);
        v78 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        v79 = v120;
        v80 = v72;
        v81 = v119;
        (*(void (**)(char *, char *, uint64_t, __n128))(v120 + 16))(v78, v80, v119, v77);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v74[6])(v78, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v81);
          v130 = 0;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          v126 = 0u;
          v4 = v113;
          v10 = v112;
          v11 = v111;
          v5 = v121;
          v82 = v81;
        }
        else
        {
          v83 = v116;
          v84 = v103;
          v85 = ((uint64_t (*)(char *, char *, uint64_t))v116[4])(v103, v78, AssociatedTypeWitness);
          v105 = &v98;
          v86 = MEMORY[0x1E0C80A78](v85);
          v87 = (char *)&v98 - v102;
          v88 = (void (*)(char *, char *, uint64_t, __n128))v83[2];
          v88((char *)&v98 - v102, v84, AssociatedTypeWitness, v86);
          *((_QWORD *)&v124 + 1) = AssociatedTypeWitness;
          *(_QWORD *)v125 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v123);
          ((void (*)(uint64_t *, char *, uint64_t))v88)(boxed_opaque_existential_1, v87, AssociatedTypeWitness);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v71 + 32))(&v126, v26, v71);
          *(_OWORD *)&v125[8] = v126;
          v125[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 40))(v26, v71) & 1;
          v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 48))(v26, v71);
          v91 = (void (*)(char *, uint64_t))v83[1];
          v91(v87, AssociatedTypeWitness);
          v130 = v90;
          v128 = *(_OWORD *)v125;
          v129 = *(_OWORD *)&v125[16];
          v127 = v124;
          v126 = v123;
          v91(v84, AssociatedTypeWitness);
          v4 = v113;
          v10 = v112;
          v11 = v111;
          v5 = v121;
          v82 = v119;
        }
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v126, (unint64_t)v107, (unint64_t)v108);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v120 + 8))(v118, v82);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

        a1 = v109;
      }
      else
      {
        v54 = v104;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v55 = objc_allocWithZone((Class)NSError);
        v56 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v57 = objc_msgSend(v55, sel_initWithDomain_code_userInfo_, v56, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v58 = objc_msgSend(v57, sel_domain);
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v61 = v60;

        if (v59 != static String._unconditionallyBridgeFromObjectiveC(_:)(v54) || v61 != v62)
        {
          v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v4 = v113;
          v10 = v112;
          v11 = v111;
          if ((v92 & 1) == 0)
            goto LABEL_69;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease_n();
LABEL_41:
        v4 = v113;
        v10 = v112;
        v11 = v111;
LABEL_50:
        swift_willThrow();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

        v114 = 0;
LABEL_51:
        v5 = v121;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

    }
  }
  v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v17 >= v117)
    goto LABEL_16;
  v18 = *(_QWORD *)(v110 + 8 * v17);
  if (v18)
  {
LABEL_11:
    v9 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v17 << 6);
    v5 = v17;
    goto LABEL_7;
  }
  v5 += 2;
  if (v17 + 1 >= v117)
  {
    v5 = v17;
LABEL_16:
    v9 = 0;
    *(_QWORD *)&v128 = 0;
    v127 = 0u;
    v126 = 0u;
    goto LABEL_17;
  }
  v18 = *(_QWORD *)(v110 + 8 * v5);
  if (v18)
  {
LABEL_14:
    v17 = v5;
    goto LABEL_11;
  }
  v94 = v17 + 2;
  if (v17 + 2 >= v117)
    goto LABEL_16;
  v18 = *(_QWORD *)(v110 + 8 * v94);
  if (v18)
  {
LABEL_54:
    v17 = v94;
    goto LABEL_11;
  }
  v5 = v17 + 3;
  if (v17 + 3 >= v117)
  {
    v5 = v17 + 2;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)(v110 + 8 * v5);
  if (v18)
    goto LABEL_14;
  v94 = v17 + 4;
  if (v17 + 4 >= v117)
    goto LABEL_16;
  v18 = *(_QWORD *)(v110 + 8 * v94);
  if (v18)
    goto LABEL_54;
  while (1)
  {
    v17 = v94 + 1;
    if (__OFADD__(v94, 1))
      break;
    if (v17 >= v117)
    {
      v5 = v98;
      goto LABEL_16;
    }
    v18 = *(_QWORD *)(v110 + 8 * v17);
    ++v94;
    if (v18)
      goto LABEL_11;
  }
LABEL_71:
  __break(1u);
}

double AttributeContainer.init<A>(_:including:)@<D0>(uint64_t a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v7;

  AttributeContainer.init<A>(_:including:)(a1, a2, a3, &v7);
  swift_release();
  if (!v4)
  {
    result = *(double *)&v7;
    *a4 = v7;
  }
  return result;
}

uint64_t Dictionary<>.init(_:)(__int128 *a1)
{
  uint64_t Default;
  __int128 v3;

  v3 = *a1;
  Default = _loadDefaultAttributes()();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v3, Default, 1);
}

uint64_t Dictionary<>.init<A>(_:includingOnly:)(__int128 *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  void *v4;
  __int128 v6;

  v6 = *a1;
  v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v6, (uint64_t)v4, 0);
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._IndexConverterFromString, &type metadata for AttributedString._IndexConverterFromString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._IndexConverterFromString, &type metadata for AttributedString._IndexConverterFromString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }
  return result;
}

uint64_t String.Index.init<A>(_:within:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v5 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v8 = String.Index.init<A>(_:within:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, a3);
  return v8;
}

uint64_t AttributedString.Index.init<A>(_:within:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD v34[3];
  _OWORD v35[3];
  __int128 v36[3];
  _BYTE v37[40];
  __int128 v38[3];
  _BYTE v39[48];

  v10 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
  v11 = v10[1];
  v12 = v10[3];
  v35[1] = v10[2];
  v35[2] = v12;
  v35[0] = v11;
  v13 = v10[1];
  v36[1] = v10[2];
  v36[2] = v12;
  v36[0] = v13;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
  outlined retain of Locale((uint64_t)v37);
  swift_release();
  v14 = BigString.index(from:)(a1);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  outlined release of Locale((uint64_t)v35);
  if (v20 == 2
    || ((*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(v38, a3, a4),
        v21 = v14 >> 10,
        v14 >> 10 < *(_QWORD *)&v38[0] >> 10)
    || ((*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(v38, a3, a4),
        v21 > *(_QWORD *)&v38[0] >> 10))
  {
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
  }
  else
  {
    v23 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
    v24 = v23[1];
    v25 = v23[3];
    v34[1] = v23[2];
    v34[2] = v25;
    v34[0] = v24;
    v26 = v23[1];
    v38[1] = v23[2];
    v38[2] = v25;
    v38[0] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
    outlined retain of Locale((uint64_t)v39);
    swift_release();
    v27 = MEMORY[0x186DA3EC0](v14, v16, v18, v20);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    outlined release of Locale((uint64_t)v34);
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
    if (v21 == v27 >> 10)
    {
      *a5 = v27;
      a5[1] = v29;
      a5[2] = v31;
      a5[3] = v33;
      return result;
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 2;
  return result;
}

unint64_t BigString.index(from:)(unint64_t a1)
{
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _BYTE v7[48];
  _BYTE v8[48];

  v1 = a1;
  v2 = a1 >> 16;
  if ((a1 & 0xC) == 8)
  {
    BigString.utf16.getter();
    v3 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v6);
    if (v3 >= v2)
    {
      BigString.utf16.getter();
      BigString.startIndex.getter();
      v4 = BigString.UTF16View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v7);
      if (v1 >> 14)
      {
        BigString.utf8.getter();
        v4 = BigString.UTF8View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v8);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    if ((unint64_t)BigString.endIndex.getter() >> 10 < v4 >> 10)
      return 0;
  }
  return v4;
}

uint64_t _NSRange.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, unint64_t a5, uint64_t a6)
{
  void (*Description)(uint64_t, ValueMetadata *);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t, ValueMetadata *);
  uint64_t v21;
  void (*v22)(_QWORD *__return_ptr, ValueMetadata *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, ValueMetadata *);
  uint64_t result;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, ValueMetadata *);
  _QWORD v34[8];
  uint64_t v35;
  void (*v36)(uint64_t, ValueMetadata *);
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[10];
  _QWORD v40[10];
  _QWORD v41[8];
  char v42[48];
  char v43[48];
  _BYTE v44[48];

  v37 = a5;
  v38 = a3;
  Description = (void (*)(uint64_t, ValueMetadata *))a4[-1].Description;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v34 - v15;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v17 + 56))(v40, v18, v17, v14);
  v39[0] = v40[0];
  *(_OWORD *)&v39[1] = *(_OWORD *)&v40[1];
  *(_OWORD *)&v39[3] = *(_OWORD *)&v40[3];
  *(_OWORD *)&v39[5] = *(_OWORD *)&v40[5];
  *(_OWORD *)&v39[7] = *(_OWORD *)&v40[7];
  v39[9] = v40[9];
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  v35 = a1;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  v19 = v41[0];
  v34[5] = v41[2];
  v34[6] = v41[1];
  v36 = Description;
  v37 = v41[4];
  v34[3] = v41[5];
  v34[4] = v41[3];
  v34[1] = v41[7];
  v34[2] = v41[6];
  v20 = (void (*)(char *, uint64_t, ValueMetadata *))*((_QWORD *)Description + 2);
  v21 = a2;
  v20(v16, a2, a4);
  v22 = *(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32);
  v22(v40, a4, a6);
  v23 = v40[0];
  v34[7] = v19;
  v20(v12, (uint64_t)v16, a4);
  if (v19 >> 10 < v23 >> 10)
  {
    v33 = (void (*)(char *, ValueMetadata *))*((_QWORD *)v36 + 1);
    v33(v12, a4);
    result = ((uint64_t (*)(char *, ValueMetadata *))v33)(v16, a4);
    goto LABEL_6;
  }
  (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a6 + 40))(v40, a4, a6);
  v24 = v40[0] >> 10;
  v25 = (void (*)(char *, ValueMetadata *))*((_QWORD *)v36 + 1);
  v25(v12, a4);
  result = ((uint64_t (*)(char *, ValueMetadata *))v25)(v16, a4);
  if (v24 < v37 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v27 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a6);
  v28 = v27[1];
  v29 = v27[3];
  *(_OWORD *)&v39[2] = v27[2];
  *(_OWORD *)&v39[4] = v29;
  *(_OWORD *)v39 = v28;
  v30 = v27[1];
  *(_OWORD *)&v40[2] = v27[2];
  *(_OWORD *)&v40[4] = v29;
  *(_OWORD *)v40 = v30;
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v40, (uint64_t)v44);
  outlined retain of Locale((uint64_t)v44);
  swift_release();
  BigString.utf16.getter();
  BigString.startIndex.getter();
  v36 = (void (*)(uint64_t, ValueMetadata *))v25;
  v22(v41, a4, a6);
  v31 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v42);
  BigString.utf16.getter();
  v32 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v43);
  BigString.utf16.getter();
  BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v39);
  outlined release of Locale((uint64_t)v41);
  v36(v21, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v35);
  result = v32 - v31;
  if (__OFSUB__(v32, v31))
LABEL_7:
    __break(1u);
  return result;
}

uint64_t _NSRange.init<A>(_:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[9];

  v5 = *(_QWORD *)(result + 40);
  LOBYTE(v6) = *(_BYTE *)(result + 64);
  v7 = *(_QWORD *)(result + 72);
  v9 = *(_QWORD *)(result + 88);
  v8 = *(_QWORD *)(result + 96);
  LOBYTE(v10) = *(_BYTE *)(result + 104);
  if ((v6 & 1) != 0 || (*(_BYTE *)(result + 104) & 1) != 0)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  v6 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_14:
    __break(1u);
  }
  else
  {
    while (1)
    {
      v10 = v5;
      if (v6 == v9)
      {
        v10 = v5 + v8;
        if (__OFADD__(v5, v8))
          break;
      }
      if (!__OFSUB__(v10, v5))
        return v5;
      __break(1u);
LABEL_9:
      v11 = *(_QWORD *)(result + 80);
      v12 = *(_QWORD *)(result + 32);
      v13 = *(_OWORD *)(result + 16);
      v14[0] = *(_OWORD *)result;
      v14[1] = v13;
      v15 = v12;
      v16 = v5;
      v17 = *(_OWORD *)(result + 48);
      v18 = v6;
      v19 = v7;
      v20 = v11;
      v21 = v9;
      v22 = v8;
      v23 = v10;
      AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
      result = outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
      if ((v18 & 1) != 0)
        return 0x7FFFFFFFFFFFFFFFLL;
      v5 = *((_QWORD *)&v14[0] + 1);
      v7 = v15;
      v8 = *((_QWORD *)&v17 + 1);
      v9 = v17;
      v6 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromString(uint64_t *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(_QWORD *)(v1 + 48) >> 11 << 16) | 4;
}

void protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromString(uint64_t *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(_QWORD *)(v1 + 80) >> 11 << 16) | 4;
}

unint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromString()
{
  return specialized Collection.isEmpty.getter();
}

unint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;

  result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t i;

  if (a5 < 0)
  {
    __break(1u);
  }
  else
  {
    for (i = a5; i; --i)
    {
      Substring.index(after:)();
      result = BigString.Index.init(_utf8Offset:)();
    }
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
  }
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:)(unint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[48];
  _BYTE v16[48];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a2 < 0)
    goto LABEL_14;
  v3 = a2;
  v4 = result;
  if (!a2)
    return v4;
  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v12 = v2[5];
  v13 = v2[4];
  v11 = v8;
  while ((v4 & 0xC) == 8)
  {
    v23 = v5;
    v24 = v6;
    v25 = v7;
    v26 = v8;
    v27 = v13;
    v28 = v12;
    BigString.utf16.getter();
    v10 = BigString.UTF16View.count.getter();
    result = outlined release of Locale((uint64_t)v14);
    if (v10 < (uint64_t)(v4 >> 16))
      goto LABEL_13;
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v15);
    if ((unsigned __int16)v4 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v16);
    }
    v8 = v11;
LABEL_5:
    v17 = v5;
    v18 = v6;
    v19 = v7;
    v20 = v8;
    v21 = v13;
    v22 = v12;
    v4 = ((unint64_t)BigString.index(after:)() >> 11 << 16) | 4;
    if (!--v3)
      return v4;
  }
  v29 = v5;
  v30 = v6;
  v31 = v7;
  v32 = v8;
  v33 = v13;
  v34 = v12;
  v9 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
  result = BigString.endIndex.getter();
  if (result >> 10 >= v9 >> 10)
    goto LABEL_5;
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;

  if (a5 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = a5;
    if (a5)
    {
      while ((result ^ a6) >= 0x400)
      {
        Substring.index(after:)();
        result = BigString.Index.init(_utf8Offset:)();
        if (!--v7)
          goto LABEL_5;
      }
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      a7[3] = 2;
    }
    else
    {
LABEL_5:
      *a7 = result;
      a7[1] = a2;
      a7[2] = a3;
      a7[3] = a4;
    }
  }
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  _BYTE v23[48];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a2 < 0)
    goto LABEL_15;
  v4 = a2;
  v5 = result;
  if (!a2)
    return v5;
  v6 = v3;
  while (1)
  {
    if ((v5 ^ a3) < 0x4000)
      return 0;
    v10 = v6[1];
    v11 = v6[2];
    v12 = v6[3];
    v14 = v6[4];
    v13 = v6[5];
    v19 = v10;
    v20 = *v6;
    v17 = v12;
    v18 = v11;
    if ((v5 & 0xC) != 8)
      break;
    v30 = *v6;
    v31 = v10;
    v32 = v11;
    v33 = v12;
    v7 = v14;
    v34 = v14;
    v35 = v13;
    v8 = v13;
    BigString.utf16.getter();
    v15 = BigString.UTF16View.count.getter();
    result = outlined release of Locale((uint64_t)v21);
    if (v15 < (uint64_t)(v5 >> 16))
      goto LABEL_14;
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v22);
    if ((unsigned __int16)v5 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v23);
    }
LABEL_5:
    v24 = v20;
    v25 = v19;
    v26 = v18;
    v27 = v17;
    v28 = v7;
    v29 = v8;
    v5 = ((unint64_t)BigString.index(after:)() >> 11 << 16) | 4;
    if (!--v4)
      return v5;
  }
  v36 = *v6;
  v37 = v10;
  v38 = v11;
  v39 = v12;
  v7 = v14;
  v40 = v14;
  v41 = v13;
  v8 = v13;
  v9 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
  result = BigString.endIndex.getter();
  if (result >> 10 >= v9 >> 10)
    goto LABEL_5;
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromString(unint64_t *a1, unint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t i;

  v5 = a5 >> 10;
  if (a5 >> 10 >= result >> 10)
  {
    if (result >> 10 == v5)
      return 0;
    Substring.index(after:)();
    result = BigString.Index.init(_utf8Offset:)();
    if (v5 == result >> 10)
      return 1;
    for (i = 1; ; ++i)
    {
      v6 = i + 1;
      if (__OFADD__(i, 1))
        break;
      Substring.index(after:)();
      result = BigString.Index.init(_utf8Offset:)();
      if (v5 == result >> 10)
        return v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, unint64_t a2)
{
  __int128 *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  _BYTE v12[48];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = a2 >> 14;
  if (a2 >> 14 < result >> 14)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (result >> 14 != v3)
  {
    v5 = result;
    v6 = 0;
    v7 = v2[1];
    v13 = *v2;
    v14 = v7;
    v15 = v2[2];
    while (1)
    {
      v4 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if ((v5 & 0xC) == 8)
      {
        BigString.utf16.getter();
        v9 = BigString.UTF16View.count.getter();
        result = outlined release of Locale((uint64_t)&v10);
        if (v9 < (uint64_t)(v5 >> 16))
          goto LABEL_15;
        BigString.utf16.getter();
        BigString.startIndex.getter();
        BigString.UTF16View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v11);
        if ((unsigned __int16)v5 >> 14)
        {
          BigString.utf8.getter();
          BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)v12);
        }
      }
      else
      {
        v8 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        result = BigString.endIndex.getter();
        if (result >> 10 < v8 >> 10)
          goto LABEL_14;
      }
      result = BigString.index(after:)();
      v5 = (result >> 11 << 16) | 4;
      ++v6;
      if (v3 == ((32 * result) & 0xFFFFFFFFFFFF0000) >> 14)
        return v4;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return 0;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._IndexConverterFromString(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;

  v2 = *result >> 14;
  if (v2 < *a2 >> 14 || v2 >= a2[1] >> 14)
    __break(1u);
  return result;
}

{
  unint64_t v2;

  v2 = *result >> 14;
  if (v2 < *a2 >> 14 || a2[1] >> 14 < v2)
    __break(1u);
  return result;
}

{
  if (*result >> 14 < *a2 >> 14 || a2[1] >> 14 < result[1] >> 14)
    __break(1u);
  return result;
}

unint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  uint64_t v4;

  result = BigString.index(from:)(*a1);
  if (v4 == 2)
  {
    __break(1u);
  }
  else
  {
    result = BigString.index(after:)();
    *a2 = (result >> 11 << 16) | 4;
  }
  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromString(unint64_t *a1)
{
  __int128 *v1;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  char v10[48];
  char v11[48];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = v1[1];
  v12 = *v1;
  v13 = v3;
  v14 = v1[2];
  v4 = *a1;
  v5 = *a1 >> 16;
  if ((*a1 & 0xC) == 8)
  {
    BigString.utf16.getter();
    v6 = BigString.UTF16View.count.getter();
    result = outlined release of Locale((uint64_t)&v9);
    if (v6 >= v5)
    {
      BigString.utf16.getter();
      BigString.startIndex.getter();
      BigString.UTF16View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v10);
      if ((unsigned __int16)v4 >> 14)
      {
        BigString.utf8.getter();
        BigString.UTF8View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v11);
      }
      goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
    v8 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    result = BigString.endIndex.getter();
    if (result >> 10 >= v8 >> 10)
    {
LABEL_6:
      result = BigString.index(after:)();
      *a1 = (result >> 11 << 16) | 4;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromString@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  __int128 v5;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = ((unint64_t)v3 >> 11 << 16) | 4;
  v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 112) = v4;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromString()
{
  uint64_t v0;

  return specialized Collection.distance(from:to:)((*(_QWORD *)(v0 + 48) >> 11 << 16) | 4, (*(_QWORD *)(v0 + 80) >> 11 << 16) | 4);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromString()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  _OWORD v6[7];

  v1 = v0[5];
  v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  v3 = v0[3];
  v6[2] = v0[2];
  v6[3] = v3;
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v6);
  outlined release of Locale((uint64_t)v6);
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t Range<>.init<A>(_:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[4];
  char v32[48];
  char v33[48];
  char v34[48];
  _OWORD v35[3];
  __int128 v36[3];
  _BYTE v37[48];

  if (result == 0x7FFFFFFFFFFFFFFFLL || result < 0 || a2 < 0)
  {
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
  }
  else
  {
    v9 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }
    v11 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
    v12 = v11[1];
    v13 = v11[3];
    v35[1] = v11[2];
    v35[2] = v13;
    v35[0] = v12;
    v14 = v11[1];
    v36[1] = v11[2];
    v36[2] = v13;
    v36[0] = v14;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
    outlined retain of Locale((uint64_t)v37);
    swift_release();
    BigString.utf16.getter();
    v15 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)v32);
    if (v15 < v9)
      goto LABEL_7;
    BigString.utf16.getter();
    BigString.startIndex.getter();
    v16 = BigString.UTF16View.index(_:offsetBy:)();
    v18 = v17;
    v20 = v19;
    v22 = v21;
    outlined release of Locale((uint64_t)v33);
    BigString.utf16.getter();
    v23 = BigString.UTF16View.index(_:offsetBy:)();
    v28 = v24;
    v29 = v25;
    v30 = v26;
    outlined release of Locale((uint64_t)v34);
    (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(v31, a4, a5);
    if (v16 >> 10 >= v31[0] >> 10)
    {
      (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v31, a4, a5);
      outlined release of Locale((uint64_t)v35);
      v27 = v31[0] >> 10;
      result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      if (v27 >= v23 >> 10)
      {
        *a6 = v16;
        a6[1] = v18;
        a6[2] = v20;
        a6[3] = v22;
        a6[4] = v23;
        a6[5] = v28;
        a6[6] = v30;
        a6[7] = v29;
        return result;
      }
    }
    else
    {
LABEL_7:
      (*((void (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      result = outlined release of Locale((uint64_t)v35);
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 2;
  *((_OWORD *)a6 + 2) = 0u;
  *((_OWORD *)a6 + 3) = 0u;
  return result;
}

uint64_t Range<>.init<A>(_range:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  _OWORD v36[3];
  _OWORD v37[3];
  __int128 v38[3];
  _BYTE v39[40];
  __int128 v40[3];
  _BYTE v41[48];

  v12 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  v13 = v12[1];
  v14 = v12[3];
  v37[1] = v12[2];
  v37[2] = v14;
  v37[0] = v13;
  v15 = v12[1];
  v38[1] = v12[2];
  v38[2] = v14;
  v38[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
  outlined retain of Locale((uint64_t)v39);
  swift_release();
  v16 = BigString.index(from:)(a1);
  v34 = v17;
  v19 = v18;
  v21 = v20;
  outlined release of Locale((uint64_t)v37);
  if (v21 == 2)
    goto LABEL_5;
  v22 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  v23 = v22[1];
  v24 = v22[3];
  v36[1] = v22[2];
  v36[2] = v24;
  v36[0] = v23;
  v25 = v22[1];
  v40[1] = v22[2];
  v40[2] = v24;
  v40[0] = v25;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
  outlined retain of Locale((uint64_t)v41);
  swift_release();
  v26 = BigString.index(from:)(a2);
  v32 = v28;
  v33 = v27;
  v30 = v29;
  outlined release of Locale((uint64_t)v36);
  if (v30 == 2
    || ((*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(v35, a4, a5),
        v16 >> 10 < v35[0] >> 10)
    || ((*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v35, a4, a5),
        v35[0] >> 10 < v26 >> 10))
  {
LABEL_5:
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 2;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
  }
  else
  {
    result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(_QWORD *)a6 = v16;
    *(_QWORD *)(a6 + 8) = v34;
    *(_QWORD *)(a6 + 16) = v19;
    *(_QWORD *)(a6 + 24) = v21;
    *(_QWORD *)(a6 + 32) = v26;
    *(_QWORD *)(a6 + 40) = v33;
    *(_QWORD *)(a6 + 48) = v32;
    *(_QWORD *)(a6 + 56) = v30;
  }
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString._IndexConverterFromAttributedString(_OWORD *a1, _OWORD *a2))(_QWORD, _QWORD)
{
  __int128 v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *a1;
  v16 = a1[2];
  v17 = a1[1];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v14 = a1[7];
  v15 = a1[3];
  v8 = *v2;
  v9 = v2[1];
  v11 = v2[2];
  v10 = v2[3];
  v12 = BigString.Index.init(_utf8Offset:)();
  result = BigString.Index.init(_utf8Offset:)();
  if (result >> 10 < v12 >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v12 >> 10 > v4 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >> 10 >= v5 >> 10)
  {
    a2[8] = v8;
    a2[9] = v9;
    a2[10] = v11;
    a2[11] = v10;
    *a2 = v4;
    a2[1] = v17;
    a2[2] = v16;
    a2[3] = v15;
    a2[4] = v5;
    a2[5] = v6;
    a2[6] = v7;
    a2[7] = v14;
    return swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = BigString.Index.init(_utf8Offset:)();
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = BigString.Index.init(_utf8Offset:)();
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  uint64_t v0;

  v0 = BigString.Index.init(_utf8Offset:)();
  return (BigString.Index.init(_utf8Offset:)() ^ (unint64_t)v0) < 0x400;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, *a3, a4);
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromAttributedString(uint64_t a1, unint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *a2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Substring.index(after:)();
  result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromAttributedString(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Substring.index(after:)();
  result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromAttributedString@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v3 = *v1;
  v10 = *(__n128 *)(v1 + 1);
  v4 = v1[3];
  v5 = BigString.Index.init(_utf8Offset:)();
  *(_QWORD *)a1 = v3;
  result = v10;
  *(__n128 *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v0 = BigString.Index.init(_utf8Offset:)();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = BigString.Index.init(_utf8Offset:)();
  return specialized Collection.distance(from:to:)(v0, v2, v4, v6, v7);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromAttributedString()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2], v0[3]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromAttributedString(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t Range<>.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    v16 = Substring.init<A>(_:)();
    v18 = specialized Range<>.init(_range:in:)(&v34, v16, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    v21 = Substring.init<A>(_:)();
    v23 = v22;
    v29 = a2;
    v30 = v21;
    v31 = v22;
    v32 = v24;
    v33 = v25;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v18 = specialized Range<>.init(_range:in:)(&v34, v21, v23);
    v20 = v26;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, a4);
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  if ((v20 & 1) != 0)
    return 0;
  return v18;
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._IndexConverterFromAttributedString, &type metadata for AttributedString._IndexConverterFromAttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._IndexConverterFromAttributedString, &type metadata for AttributedString._IndexConverterFromAttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }
  return result;
}

uint64_t specialized Range<>.init(_range:in:)(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  v5 = a1[4];
  v6 = (16 * (unsigned __int16)*a1) & 0x4000 | (*a1 >> 11 << 16);
  swift_bridgeObjectRelease();
  if (v6 >> 14 >= a2 >> 14 && a3 >> 14 >= ((32 * v5) & 0xFFFFFFFFFFFF0000 | (((v5 >> 10) & 1) << 14)) >> 14)
    return v6 | 4;
  else
    return 0;
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.value(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t destroy for AttributedString._IndexConverterFromAttributedString()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AttributedString._IndexConverterFromAttributedString(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromAttributedString()
{
  return &type metadata for AttributedString._IndexConverterFromAttributedString;
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromString(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromString()
{
  return &type metadata for AttributedString._IndexConverterFromString;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromString> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromString>, MEMORY[0x1E0DEC908]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromAttributedString> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromAttributedString>, MEMORY[0x1E0DEC908]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromAttributedString> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromAttributedString>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromAttributedString> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromAttributedString>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in AttributedString._IndexConverterFromString()
{
  return MEMORY[0x1E0DEA7A0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromString> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromString>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromString> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromString>, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_181EA5210()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181EA523C()
{
  return swift_deallocObject();
}

id URLResource.bundle.getter()
{
  id *v0;

  return *v0;
}

uint64_t URLResource.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.subdirectory.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

__n128 URLResource.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*URLResource.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 URLResource.init(name:subdirectory:locale:bundle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __n128 result;

  *(_QWORD *)a7 = a6;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a2;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  result = *a5;
  *(__n128 *)(a7 + 40) = *a5;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLResource.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181EA5338 + 4 * byte_18216CA8C[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_181EA5338()
{
  return 0x6365726964627573;
}

uint64_t sub_181EA5358()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181EA536C()
{
  return 0x6150656C646E7562;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLResource.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized URLResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLResource.CodingKeys()
{
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLResource.CodingKeys()
{
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URLResource.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLResource.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)v1;
  v20 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v18 = v8;
  v19 = v9;
  v17 = *(_OWORD *)(v1 + 40);
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v18;
  LOBYTE(v21) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v21 = v17;
  v22 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v15 = objc_msgSend(v14, sel_bundlePath);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

  LOBYTE(v21) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLResource.CodingKeys, &unk_1E0F176C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLResource.CodingKeys, &unk_1E0F176C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLResource.CodingKeys, &unk_1E0F176C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLResource.CodingKeys, &unk_1E0F176C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

void URLResource.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLResource.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v40) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    LOBYTE(v40) = 1;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v39 = v13;
    v36 = v12;
    v38 = v11;
    v41 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    swift_bridgeObjectRetain();
    v37 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v14 = v40;
    LOBYTE(v40) = 3;
    v34 = v14;
    v35 = v14;
    swift_unknownObjectRetain();
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    v18 = v17;
    v19 = objc_allocWithZone((Class)NSBundle);
    v31 = v16;
    v32 = v19;
    v33 = v18;
    v20 = objc_msgSend(v19, sel_initWithPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    v21 = v38;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      v22 = v20;
      *(_QWORD *)a2 = v22;
      *(_QWORD *)(a2 + 8) = v9;
      v23 = v36;
      *(_QWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 24) = v23;
      *(_QWORD *)(a2 + 32) = v39;
      *(_OWORD *)(a2 + 40) = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v36 = type metadata accessor for DecodingError();
      swift_allocError();
      *(_QWORD *)&v34 = v24;
      v26 = a1[3];
      v25 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v26);
      MEMORY[0x186DA5FB4](v26, v25);
      *(_QWORD *)&v40 = 0;
      *((_QWORD *)&v40 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40 = 0xD00000000000001FLL;
      *((_QWORD *)&v40 + 1) = 0x800000018230F2E0;
      v27._countAndFlagsBits = v31;
      v27._object = v33;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 39;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      v29 = v34;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v36 - 8) + 104))(v29, *MEMORY[0x1E0DEC458]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v15 = v37;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      if (!v15)
        swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t URLResource.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  _QWORD v61[18];
  _BYTE v62[144];
  _BYTE v63[152];

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(id *)v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v4) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v9(v61, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      v10 = 0;
    }
    else
    {
      v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v46)
            goto LABEL_17;
          goto LABEL_24;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_17:
          Hasher._combine(_:)(0);
          v14 = v47;
          if (!v47)
            goto LABEL_18;
          goto LABEL_25;
        }
LABEL_24:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v14 = v47;
        if (!v47)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          v15 = v48;
          if (!v48)
          {
LABEL_19:
            Hasher._combine(_:)(0);
            goto LABEL_27;
          }
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_27:
          v18 = v49;
          v17 = v50;
          v20 = v51;
          v19 = v52;
          v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v22 = v17;
            v23 = v20;
            v24 = v19;
            v25 = v21;
            v26 = v18;
            _CFObject.hash(into:)();
            if (v17)
              goto LABEL_29;
          }
          else
          {
            Hasher._combine(_:)(0);
            v31 = v21;
            v32 = v17;
            v33 = v20;
            v34 = v19;
            if (v17)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v27 = v17;
              _CFObject.hash(into:)();

              if (v20)
                goto LABEL_30;
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v20;
            _CFObject.hash(into:)();

            if (v19)
              goto LABEL_31;
            goto LABEL_36;
          }
LABEL_35:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_31:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_32:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
LABEL_37:
            Hasher._combine(_:)(0);
            v30 = 0;
LABEL_38:

            v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              v36 = v55;
              if (v55)
                goto LABEL_40;
            }
            else
            {
              Hasher._combine(_:)(0);
              v36 = v55;
              if (v55)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_44:
                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }
            Hasher._combine(_:)(0);
            if (v56)
              goto LABEL_41;
            goto LABEL_44;
          }
LABEL_36:
          Hasher._combine(_:)(0);
          if (v21)
            goto LABEL_32;
          goto LABEL_37;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        v15 = v48;
        if (!v48)
          goto LABEL_19;
        goto LABEL_26;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      v16 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      v16 = v43;
    }
    outlined retain of LocalePreferences(v16);
    if (!v45)
      goto LABEL_16;
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

Swift::Int URLResource.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  _QWORD v61[18];
  _BYTE v62[144];
  _BYTE v63[144];
  _BYTE v64[72];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v3) & 1) != 0)
  {
    v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v61, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
  {
    v7 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
  Hasher._combine(_:)(1u);
  if (v43[0] == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v43[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v44;
  if (!v44)
  {
    Hasher._combine(_:)(0);
    v15 = v43;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
    v15 = v42;
LABEL_23:
    outlined retain of LocalePreferences(v15);
    if (!v45)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v46)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v13 = v47;
    if (!v47)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
    swift_bridgeObjectRelease();
    v14 = v48;
    if (!v48)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v13 = v47;
  if (v47)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v14 = v48;
  if (!v48)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
  swift_bridgeObjectRelease();
LABEL_28:
  v17 = v49;
  v16 = v50;
  v19 = v51;
  v18 = v52;
  v20 = v53;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_39:

  v34 = v54;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
    swift_bridgeObjectRelease();
    v35 = v55;
    if (v55)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v56)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v35 = v55;
  if (!v55)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
  swift_bridgeObjectRelease();
  if (!v56)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v60 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v60 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLResource()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[72];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v3) & 1) != 0)
  {
    v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v59, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    v7 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
  Hasher._combine(_:)(1u);
  if (v41 == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v41);
    if (!v43)
      goto LABEL_17;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_22;
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v44)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v13 = v45;
    if (!v45)
      goto LABEL_19;
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
    swift_bridgeObjectRelease();
    v14 = v46;
    if (!v46)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v13 = v45;
  if (v45)
    goto LABEL_25;
LABEL_19:
  Hasher._combine(_:)(0);
  v14 = v46;
  if (!v46)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
  swift_bridgeObjectRelease();
LABEL_27:
  v16 = v47;
  v15 = v48;
  v18 = v49;
  v17 = v50;
  v19 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v20 = v15;
    v21 = v18;
    v22 = v17;
    v23 = v19;
    v24 = v16;
    _CFObject.hash(into:)();
    if (v15)
      goto LABEL_29;
  }
  else
  {
    Hasher._combine(_:)(0);
    v29 = v19;
    v30 = v15;
    v31 = v18;
    v32 = v17;
    if (v15)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v25 = v15;
      _CFObject.hash(into:)();

      if (v18)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v26 = v18;
    _CFObject.hash(into:)();

    if (v17)
      goto LABEL_31;
LABEL_36:
    Hasher._combine(_:)(0);
    if (v19)
      goto LABEL_32;
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v17)
    goto LABEL_36;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v28 = 0;
LABEL_38:

  v33 = v52;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
    swift_bridgeObjectRelease();
    v34 = v53;
    if (v53)
      goto LABEL_40;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v54)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  v34 = v53;
  if (!v53)
    goto LABEL_43;
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
  swift_bridgeObjectRelease();
  if (!v54)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    v37 = 0;
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v39 = v58 & 1;
    Hasher._combine(_:)(1u);
    v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance URLResource(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  URLResource.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLResource(_QWORD *a1)
{
  return URLResource.encode(to:)(a1);
}

void URL.init(resource:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t (*v32)(uint64_t *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;

  v4 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v56 = 46;
  *(_QWORD *)&v57 = 0xE100000000000000;
  v55 = &v56;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v54, v3, v5);
  v9 = v8;
  swift_bridgeObjectRelease();
  v52 = v6;
  v53 = a2;
  swift_bridgeObjectRetain();
  if ((v9 & 1) != 0)
  {
    v50 = 0;
  }
  else
  {
    v10 = String.subscript.getter();
    v12 = v11;
    v13 = v4;
    v15 = v14;
    v17 = v16;
    swift_bridgeObjectRelease();
    MEMORY[0x186DA4634](v10, v12, v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18 = String.index(after:)();
    v19 = specialized Collection.suffix(from:)(v18, v3, v5);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = v23;
    v4 = v13;
    MEMORY[0x186DA4634](v19, v21, v26, v25);
    v50 = v27;
    swift_bridgeObjectRelease();
  }
  v51 = v4;
  v28 = objc_msgSend(v4, sel_localizations);
  if (!v28)
    v28 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  v29 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18205C850;
  ObjectType = swift_getObjectType();
  LOBYTE(v56) = 1;
  v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 416);
  swift_unknownObjectRetain();
  v33 = v32(&v56, ObjectType, v7);
  v35 = v34;
  swift_unknownObjectRelease();
  *(_QWORD *)(v30 + 32) = v33;
  *(_QWORD *)(v30 + 40) = v35;
  v36 = objc_msgSend(v29, sel_preferredLocalizationsFromArray_forPreferences_, v28, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v36)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    v39 = v51;
    v38 = v52;
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_15;
LABEL_13:
    swift_bridgeObjectRelease();
    v41 = 0;
    goto LABEL_16;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  v37 = swift_dynamicCastClass();
  v39 = v51;
  v38 = v52;
  if (!v37)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v36, sel_copy);
    v42 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v40 = specialized _arrayForceCast<A, B>(_:)(v42);

    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v40 + 16))
      goto LABEL_15;
    goto LABEL_13;
  }
  v40 = v37;

  if (!*(_QWORD *)(v40 + 16))
    goto LABEL_13;
LABEL_15:
  v41 = *(_QWORD *)(v40 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_16:
  v43 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v50)
  {
    v44 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v38)
      goto LABEL_18;
LABEL_21:
    v45 = 0;
    if (v41)
      goto LABEL_19;
    goto LABEL_22;
  }
  v44 = 0;
  if (!v38)
    goto LABEL_21;
LABEL_18:
  v45 = (void *)String._bridgeToObjectiveCImpl()();
  if (v41)
  {
LABEL_19:
    v46 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_22:
  v46 = 0;
LABEL_23:
  v47 = objc_msgSend(v39, sel_URLForResource_withExtension_subdirectory_localization_, v43, v44, v45, v46);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v47)
  {
    URL.init(reference:)(v47, &v56);

    v48 = v56;
    v49 = v57;
  }
  else
  {
    v48 = 0;
    v49 = 0uLL;
  }
  *(_QWORD *)v53 = v48;
  *(_OWORD *)(v53 + 8) = v49;
}

uint64_t specialized static URLResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_OWORD *)(a1 + 40);
  type metadata accessor for NSObject();
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
    goto LABEL_12;
  if (v2 != v6 || v4 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v11 = 0;
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  if (!v5)
  {
    if (!v9)
    {
LABEL_14:
      v16 = v14;
      v17 = v15;
      v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16);
      return v11 & 1;
    }
    goto LABEL_12;
  }
  if (!v9)
  {
LABEL_12:
    v11 = 0;
    return v11 & 1;
  }
  if (v3 == v7 && v5 == v9)
    goto LABEL_14;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v11 = 0;
  if ((v12 & 1) != 0)
    goto LABEL_14;
  return v11 & 1;
}

unint64_t lazy protocol witness table accessor for type URLResource and conformance URLResource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLResource and conformance URLResource;
  if (!lazy protocol witness table cache variable for type URLResource and conformance URLResource)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLResource, &type metadata for URLResource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource and conformance URLResource);
  }
  return result;
}

uint64_t destroy for URLResource(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for URLResource(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

ValueMetadata *type metadata accessor for URLResource()
{
  return &type metadata for URLResource;
}

uint64_t storeEnumTagSinglePayload for URLResource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181EA7814 + 4 * byte_18216CA95[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181EA7848 + 4 * byte_18216CA90[v4]))();
}

uint64_t sub_181EA7848(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EA7850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EA7858);
  return result;
}

uint64_t sub_181EA7864(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EA786CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181EA7870(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EA7878(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URLResource.CodingKeys()
{
  return &unk_1E0F176C0;
}

uint64_t specialized URLResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6365726964627573 && a2 == 0xEC00000079726F74
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

double Locale.Components.init(languageCode:script:languageRegion:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;

  v4 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v4;
  v5 = a2[1];
  *(_OWORD *)(a4 + 32) = *a2;
  *(_OWORD *)(a4 + 48) = v5;
  v6 = a3[1];
  *(_OWORD *)(a4 + 64) = *a3;
  *(_OWORD *)(a4 + 80) = v6;
  *(_BYTE *)(a4 + 96) = 16;
  result = 0.0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_WORD *)(a4 + 200) = 1031;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  return result;
}

uint64_t Locale.Weekday.rawValue.getter()
{
  char *v0;

  return qword_18216EAC8[*v0];
}

uint64_t Locale.HourCycle.rawValue.getter()
{
  char *v0;

  return qword_18216EB00[*v0];
}

uint64_t static Locale.Subdivision.subdivision(for:)@<X0>(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  void *v7;

  v6 = *a1;
  v7 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 2054847098;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  v5 = String.lowercased()();
  result = v5._countAndFlagsBits;
  a2->_countAndFlagsBits = v6;
  a2->_object = v7;
  a2[1] = v5;
  return result;
}

uint64_t Locale.Variant.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Collation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Currency.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.NumberingSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Weekday.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.Weekday.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Locale.HourCycle.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.HourCycle.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Locale.MeasurementSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Region.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA628], a3);
}

uint64_t Locale.Subdivision.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.LanguageCode.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Currency.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.NumberingSystem.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Script.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  Swift::String v6;
  uint64_t result;

  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  a3->_countAndFlagsBits = a1;
  a3->_object = a2;
  a3[1] = v6;
  return result;
}

uint64_t Locale.Weekday.icuIndex.getter()
{
  char *v0;
  char v1;
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;

  v1 = *v0;
  if (one-time initialization token for weekdays != -1)
    swift_once();
  v2 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  v3 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    goto LABEL_7;
  result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t Locale.Weekday.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v3;
  unsigned int v4;

  if ((result - 8) < 0xFFFFFFF9)
  {
    v3 = 7;
LABEL_7:
    *a2 = v3;
    return result;
  }
  v4 = result;
  if (one-time initialization token for weekdays != -1)
    result = swift_once();
  if (*((_QWORD *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v4)
  {
    v3 = *((_BYTE *)static Locale.Weekday.weekdays + v4 + 31);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  unsigned int v2;
  char v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  v2 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    result = swift_once();
    goto LABEL_6;
  }
  if ((result - 8) < 0xFFFFFFF9)
  {
    v4 = 7;
LABEL_8:
    *a2 = v4;
    return result;
  }
  if (one-time initialization token for weekdays != -1)
    goto LABEL_11;
LABEL_6:
  if ((unint64_t)v2 <= *((_QWORD *)static Locale.Weekday.weekdays + 2))
  {
    v4 = *((_BYTE *)static Locale.Weekday.weekdays + v2 + 31);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

Foundation::ICUCLDRKey __swiftcall ICUCLDRKey.init(_:)(Foundation::ICUCLDRKey result)
{
  Foundation::ICUCLDRKey *v1;

  *v1 = result;
  return result;
}

uint64_t Locale.Components.languageComponents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v13 = v1[10];
  v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

__n128 Locale.Components.languageComponents.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v12 = a1[1];
  v13 = *a1;
  v10 = a1[3];
  v11 = a1[2];
  v9 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v8 = *((_QWORD *)a1 + 11);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v8;
  return result;
}

uint64_t (*Locale.Components.languageComponents.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.calendar.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *Locale.Components.calendar.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

uint64_t (*Locale.Components.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.collation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[13];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.collation.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[13], v1[14]);
  result = v5;
  *(__n128 *)(v1 + 13) = v5;
  v1[15] = v2;
  v1[16] = v3;
  return result;
}

uint64_t (*Locale.Components.collation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.currency.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[17];
  v3 = v1[18];
  v4 = v1[19];
  v5 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.currency.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[17], v1[18]);
  result = v5;
  *(__n128 *)(v1 + 17) = v5;
  v1[19] = v2;
  v1[20] = v3;
  return result;
}

uint64_t (*Locale.Components.currency.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.numberingSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[21];
  v3 = v1[22];
  v4 = v1[23];
  v5 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.numberingSystem.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[21], v1[22]);
  result = v5;
  *(__n128 *)(v1 + 21) = v5;
  v1[23] = v2;
  v1[24] = v3;
  return result;
}

uint64_t (*Locale.Components.numberingSystem.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.firstDayOfWeek.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 200);
}

_BYTE *Locale.Components.firstDayOfWeek.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 200) = *result;
  return result;
}

uint64_t (*Locale.Components.firstDayOfWeek.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.hourCycle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 201);
}

_BYTE *Locale.Components.hourCycle.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 201) = *result;
  return result;
}

uint64_t (*Locale.Components.hourCycle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.measurementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[26];
  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.measurementSystem.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[26], v1[27]);
  result = v5;
  *((__n128 *)v1 + 13) = v5;
  v1[28] = v2;
  v1[29] = v3;
  return result;
}

uint64_t (*Locale.Components.measurementSystem.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[30];
  v3 = v1[31];
  v4 = v1[32];
  v5 = v1[33];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.region.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[30], v1[31]);
  result = v5;
  *((__n128 *)v1 + 15) = v5;
  v1[32] = v2;
  v1[33] = v3;
  return result;
}

uint64_t (*Locale.Components.region.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.subdivision.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[34];
  v3 = v1[35];
  v4 = v1[36];
  v5 = v1[37];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.subdivision.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[34], v1[35]);
  result = v5;
  *((__n128 *)v1 + 17) = v5;
  v1[36] = v2;
  v1[37] = v3;
  return result;
}

uint64_t (*Locale.Components.subdivision.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 304);
  return swift_unknownObjectRetain();
}

uint64_t Locale.Components.timeZone.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 304) = v2;
  *(_QWORD *)(v1 + 312) = v3;
  return result;
}

uint64_t (*Locale.Components.timeZone.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.variant.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[40];
  v3 = v1[41];
  v4 = v1[42];
  v5 = v1[43];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.variant.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[40], v1[41]);
  result = v5;
  *((__n128 *)v1 + 20) = v5;
  v1[42] = v2;
  v1[43] = v3;
  return result;
}

uint64_t (*Locale.Components.variant.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  v31 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 64);
  v35 = *(_QWORD *)(v1 + 72);
  v32 = *(unsigned __int8 *)(v1 + 96);
  v15 = *(_QWORD *)(v1 + 104);
  v23 = *(_QWORD *)(v1 + 112);
  v24 = *(_QWORD *)(v1 + 144);
  v16 = *(_QWORD *)(v1 + 136);
  v17 = *(_QWORD *)(v1 + 168);
  v25 = *(_QWORD *)(v1 + 176);
  v26 = *(char *)(v1 + 200);
  v27 = *(char *)(v1 + 201);
  v18 = *(_QWORD *)(v1 + 208);
  v33 = *(_QWORD *)(v1 + 216);
  v19 = *(_QWORD *)(v1 + 240);
  v34 = *(_QWORD *)(v1 + 248);
  v20 = *(_QWORD *)(v1 + 272);
  v28 = *(_QWORD *)(v1 + 280);
  v29 = *(_QWORD *)(v1 + 304);
  v21 = *(_QWORD *)(v1 + 312);
  v22 = *(_QWORD *)(v1 + 320);
  v30 = *(_QWORD *)(v1 + 328);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v4, v3);
    v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
    outlined copy of Locale.LanguageCode?(v4, v3);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    outlined copy of Locale.LanguageCode?(v4, 0);
    v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
  }
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v8 = v7;
    outlined consume of Locale.LanguageCode?(v5, v7);
    v9 = v35;
    if (v35)
    {
LABEL_6:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of Locale.LanguageCode?(v6, v9);
      goto LABEL_9;
    }
  }
  else
  {
    v8 = 0;
    Hasher._combine(_:)(0);
    v9 = v35;
    if (v35)
      goto LABEL_6;
  }
  Hasher._combine(_:)(0);
LABEL_9:
  outlined consume of Locale.LanguageCode?(v4, v3);
  outlined consume of Locale.LanguageCode?(v5, v8);
  outlined consume of Locale.LanguageCode?(v6, v9);
  if ((_DWORD)v32 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v23)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v15, v23);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v15, v23);
    if (v24)
      goto LABEL_14;
LABEL_17:
    Hasher._combine(_:)(0);
    v10 = v30;
    if (v25)
      goto LABEL_15;
    goto LABEL_18;
  }
  Hasher._combine(_:)(0);
  if (!v24)
    goto LABEL_17;
LABEL_14:
  Hasher._combine(_:)(1u);
  outlined copy of Locale.LanguageCode?(v16, v24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v16, v24);
  v10 = v30;
  if (v25)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v17, v25);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v17, v25);
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(0);
LABEL_19:
  if (v26 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v11 = v10;
  if (v27 == 4)
  {
    Hasher._combine(_:)(0);
    if (v33)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v33)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      outlined copy of Locale.LanguageCode?(v18, v33);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v18, v33);
      v12 = v34;
      if (v34)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  Hasher._combine(_:)(0);
  v12 = v34;
  if (v34)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v19, v12);
    if (v28)
      goto LABEL_26;
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (v28)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v20, v28);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, v28);
    if (v29)
      goto LABEL_27;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v10)
      goto LABEL_28;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v29)
    goto LABEL_33;
LABEL_27:
  Hasher._combine(_:)(1u);
  ObjectType = swift_getObjectType();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 112);
  swift_unknownObjectRetain();
  v14(a1, ObjectType, v21);
  swift_unknownObjectRelease();
  if (v11)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v22, v11);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v22, v11);
    return;
  }
LABEL_34:
  Hasher._combine(_:)(0);
}

uint64_t Locale.Components.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181EA8C64 + 4 * byte_18216CC90[a1]))(0xD000000000000012, 0x800000018230F300);
}

uint64_t sub_181EA8C64()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181EA8C7C()
{
  return 0x6F6974616C6C6F63;
}

uint64_t sub_181EA8C9C()
{
  return 0x79636E6572727563;
}

uint64_t sub_181EA8CB4()
{
  return 0x6E697265626D756ELL;
}

uint64_t sub_181EA8CD8()
{
  return 0x7961447473726966;
}

uint64_t sub_181EA8CFC()
{
  return 0x6C63794372756F68;
}

unint64_t sub_181EA8D18()
{
  return 0xD000000000000011;
}

uint64_t sub_181EA8D34()
{
  return 0x6E6F69676572;
}

uint64_t sub_181EA8D48()
{
  return 0x7369766964627573;
}

uint64_t sub_181EA8D68()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181EA8D80()
{
  return 0x746E6169726176;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Components.CodingKeys()
{
  unsigned __int8 *v0;

  return Locale.Components.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Components.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Locale.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Locale.Components.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Components.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Components.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Components.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Components.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v43 = v1[1];
  v44 = v7;
  v8 = v1[2];
  v41 = v1[3];
  v42 = v8;
  v40 = v1[4];
  v10 = *((_QWORD *)v1 + 10);
  v9 = *((_QWORD *)v1 + 11);
  v53 = *((unsigned __int8 *)v1 + 96);
  v39 = *((_QWORD *)v1 + 13);
  v38 = *((_QWORD *)v1 + 14);
  v37 = *((_QWORD *)v1 + 15);
  v36 = *((_QWORD *)v1 + 16);
  v35 = *((_QWORD *)v1 + 17);
  v33 = *((_QWORD *)v1 + 18);
  v34 = *(__int128 *)((char *)v1 + 152);
  v31 = *(__int128 *)((char *)v1 + 168);
  v32 = *(__int128 *)((char *)v1 + 184);
  v30 = *((unsigned __int8 *)v1 + 200);
  v29 = *((unsigned __int8 *)v1 + 201);
  v27 = v1[13];
  v28 = v1[14];
  v25 = v1[15];
  v26 = v1[16];
  v23 = v1[17];
  v24 = v1[18];
  v22 = v1[19];
  v20 = v1[20];
  v21 = v1[21];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v46 = v44;
  v47 = v43;
  v48 = v42;
  v49 = v41;
  v50 = v40;
  v51 = v10;
  v52 = v9;
  v11 = v6;
  v54 = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  v12 = v45;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v13 = v36;
  v14 = v37;
  v15 = v38;
  v16 = v39;
  v17 = v35;
  LOBYTE(v46) = v53;
  v54 = 1;
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  *(_QWORD *)&v46 = v16;
  *((_QWORD *)&v46 + 1) = v15;
  *(_QWORD *)&v47 = v14;
  *((_QWORD *)&v47 + 1) = v13;
  v54 = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v45 = v4;
  *(_QWORD *)&v46 = v17;
  *((_QWORD *)&v46 + 1) = v33;
  v47 = v34;
  v54 = 3;
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v31;
  v47 = v32;
  v54 = 4;
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = v30;
  v54 = 5;
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = v29;
  v54 = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v27;
  v47 = v28;
  v54 = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v25;
  v47 = v26;
  v54 = 8;
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v23;
  v47 = v24;
  v54 = 9;
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v22;
  v54 = 10;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v46 = v20;
  v47 = v21;
  v54 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

Swift::Int Locale.Components.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *Locale.Components.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113[44];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE v127[7];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char v141;
  int v142;
  __int16 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  __int16 v168;
  _DWORD v169[3];
  uint64_t v170;

  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Components.CodingKeys>);
  v5 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v170 = v2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v100 = 0;
    v101 = 0;
    v103 = 0;
    v104 = 0;
    v102 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v111 = 0;
    v112 = 0;
    v109 = 0;
    v110 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
LABEL_4:
    outlined consume of Locale.LanguageCode?(v14, v13);
    outlined consume of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v10, v9);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v101, v102);
    swift_unknownObjectRelease();
    return (uint64_t *)outlined consume of Locale.LanguageCode?(0, 0);
  }
  v98 = v5;
  v93 = a2;
  LOBYTE(v113[0]) = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  v8 = v99;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v170 = 0;
  v73 = a1;
  v16 = v8;
  v17 = v118;
  v91 = v119;
  v92 = v116;
  v18 = v120;
  v19 = v121;
  v20 = v122;
  v21 = v123;
  v22 = v124;
  v79 = v7;
  v23 = v125;
  LOBYTE(v113[0]) = 1;
  v97 = v114;
  v76 = v115;
  v94 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  v77 = v17;
  v24 = v17;
  v25 = v91;
  v95 = v19;
  v96 = v18;
  outlined copy of Locale.LanguageCode?(v24, v91);
  v74 = v20;
  v75 = v21;
  v26 = v79;
  outlined copy of Locale.LanguageCode?(v20, v21);
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  v27 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v26, v16);
    v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    v29 = v77;
    outlined consume of Locale.LanguageCode?(v77, v25);
    v30 = v74;
    v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    v100 = 0;
    v101 = 0;
    v103 = 0;
    v104 = 0;
    v102 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v111 = 0;
    v112 = 0;
    v109 = 0;
    v110 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v85 = 0;
    v86 = 0;
    v78 = 0;
    v84 = 0;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v90 = 0;
    v170 = v27;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    outlined consume of Locale.LanguageCode?(v97, v28);
    outlined consume of Locale.LanguageCode?(v29, v25);
    outlined consume of Locale.LanguageCode?(v30, v31);
    v13 = v87;
    v12 = v84;
    v11 = v85;
    v10 = v82;
    v9 = v83;
    v14 = v90;
    goto LABEL_4;
  }
  v71 = v23;
  v72 = v22;
  v32 = v114;
  LOBYTE(v113[0]) = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v70 = v32;
  v33 = v114;
  v34 = v115;
  v35 = v116;
  v36 = v117;
  LOBYTE(v113[0]) = 3;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v88 = v35;
  v89 = v36;
  v87 = v34;
  v90 = v33;
  v37 = v114;
  v38 = v115;
  v39 = v116;
  v40 = v117;
  LOBYTE(v113[0]) = 4;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v85 = v38;
  v86 = v40;
  v78 = v39;
  v84 = v37;
  v41 = v115;
  v42 = v116;
  v43 = v117;
  LOBYTE(v113[0]) = 5;
  v44 = v114;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v80 = v42;
  v81 = v43;
  v82 = v44;
  v83 = v41;
  LODWORD(v42) = v114;
  LOBYTE(v113[0]) = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v69 = v114;
  LOBYTE(v113[0]) = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v68 = v42;
  v45 = v114;
  v46 = v115;
  v47 = v117;
  LOBYTE(v113[0]) = 8;
  v112 = v116;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v170 = 0;
  v110 = v46;
  v111 = v47;
  v109 = v45;
  LOBYTE(v113[0]) = 9;
  v105 = v114;
  v106 = v115;
  v107 = v116;
  v108 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  v48 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v170 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    v29 = v77;
    v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    v30 = v74;
    v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    v100 = 0;
    v101 = 0;
    v103 = 0;
    v104 = 0;
    v102 = 0;
    goto LABEL_8;
  }
  LOBYTE(v113[0]) = 10;
  v101 = v114;
  v102 = v115;
  v103 = v116;
  v104 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  v49 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v170 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    v29 = v77;
    v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    v30 = v74;
    v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    v100 = 0;
    goto LABEL_8;
  }
  v50 = v114;
  v51 = v115;
  v162 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  v100 = v50;
  swift_unknownObjectRetain();
  v52 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v170 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    v29 = v77;
    v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    v30 = v74;
    v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
  v53 = v163;
  v54 = v164;
  v55 = v165;
  v99 = v166;
  outlined copy of Locale.LanguageCode?(v163, v164);
  outlined consume of Locale.LanguageCode?(0, 0);
  v113[0] = v97;
  v113[1] = v76;
  v113[2] = v92;
  v113[3] = v94;
  v113[4] = v77;
  v113[5] = v91;
  v113[6] = v96;
  v113[7] = v95;
  v113[8] = v74;
  v113[9] = v75;
  v113[10] = v72;
  v113[11] = v71;
  LOBYTE(v113[12]) = v70;
  v113[13] = v90;
  v113[14] = v87;
  v113[15] = v88;
  v113[16] = v89;
  v113[17] = v84;
  v113[18] = v85;
  v113[19] = v78;
  v113[20] = v86;
  v113[21] = v82;
  v113[22] = v83;
  v113[23] = v80;
  v113[24] = v81;
  LOBYTE(v113[25]) = v68;
  BYTE1(v113[25]) = v69;
  v113[26] = v109;
  v113[27] = v110;
  v113[28] = v112;
  v113[29] = v111;
  v113[30] = v105;
  v113[31] = v106;
  v113[32] = v107;
  v113[33] = v108;
  v57 = v101;
  v56 = v102;
  v113[34] = v101;
  v113[35] = v102;
  v113[36] = v103;
  v113[37] = v104;
  v113[38] = v100;
  v66 = v55;
  v67 = v51;
  v113[39] = v51;
  v113[40] = v53;
  v79 = (char *)v54;
  v113[41] = v54;
  v113[42] = v55;
  v113[43] = v99;
  outlined retain of Locale.Components(v113);
  v98 = v53;
  outlined consume of Locale.LanguageCode?(v53, v54);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v57, v56);
  outlined consume of Locale.LanguageCode?(v105, v106);
  outlined consume of Locale.LanguageCode?(v109, v110);
  outlined consume of Locale.LanguageCode?(v82, v83);
  outlined consume of Locale.LanguageCode?(v84, v85);
  outlined consume of Locale.LanguageCode?(v90, v87);
  v58 = v92;
  v59 = v94;
  outlined consume of Locale.LanguageCode?(v97, v76);
  v61 = v95;
  v60 = v96;
  outlined consume of Locale.LanguageCode?(v77, v91);
  v62 = v74;
  v63 = v75;
  v65 = v71;
  v64 = v72;
  outlined consume of Locale.LanguageCode?(v74, v75);
  memcpy(v93, v113, 0x160uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  v114 = v97;
  v115 = v76;
  v116 = v58;
  v117 = v59;
  v118 = v77;
  v119 = v91;
  v120 = v60;
  v121 = v61;
  v122 = v62;
  v123 = v63;
  v124 = v64;
  v125 = v65;
  v126 = v70;
  v128 = v90;
  v129 = v87;
  v130 = v88;
  v131 = v89;
  *(_DWORD *)v127 = v169[0];
  *(_DWORD *)&v127[3] = *(_DWORD *)((char *)v169 + 3);
  v132 = v84;
  v133 = v85;
  v134 = v78;
  v135 = v86;
  v136 = v82;
  v137 = v83;
  v138 = v80;
  v139 = v81;
  v140 = v68;
  v141 = v69;
  v142 = v167;
  v143 = v168;
  v144 = v109;
  v145 = v110;
  v146 = v112;
  v147 = v111;
  v148 = v105;
  v149 = v106;
  v150 = v107;
  v151 = v108;
  v152 = v101;
  v153 = v102;
  v154 = v103;
  v155 = v104;
  v156 = v100;
  v157 = v67;
  v158 = v98;
  v159 = v79;
  v160 = v66;
  v161 = v99;
  return outlined release of Locale.Components(&v114);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Components()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Components()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *protocol witness for Decodable.init(from:) in conformance Locale.Components@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return Locale.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Components(_QWORD *a1)
{
  return Locale.Components.encode(to:)(a1);
}

uint64_t Locale.Subdivision.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t (*Locale.LanguageCode.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify(_QWORD *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

BOOL static Locale.LanguageCode.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Locale.LanguageCode.IdentifierType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Locale.LanguageCode.IdentifierType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for unidentified()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unidentified = 6581877;
  unk_1EDC463F0 = 0xE300000000000000;
  xmmword_1EDC463F8 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unidentified.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for unidentified != -1)
    swift_once();
  v2 = unk_1EDC463F0;
  v3 = xmmword_1EDC463F8;
  *(_QWORD *)a1 = static Locale.LanguageCode.unidentified;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for uncoded()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.LanguageCode.uncoded = 7563629;
  unk_1EDC46410 = 0xE300000000000000;
  xmmword_1EDC46418 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.uncoded.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for uncoded != -1)
    swift_once();
  v2 = unk_1EDC46410;
  v3 = xmmword_1EDC46418;
  *(_QWORD *)a1 = static Locale.LanguageCode.uncoded;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for multiple()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.LanguageCode.multiple = 7107949;
  unk_1EDC46430 = 0xE300000000000000;
  xmmword_1EDC46438 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.multiple.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for multiple != -1)
    swift_once();
  v2 = unk_1EDC46430;
  v3 = xmmword_1EDC46438;
  *(_QWORD *)a1 = static Locale.LanguageCode.multiple;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for unavailable()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unavailable = 7895162;
  unk_1EDC46450 = 0xE300000000000000;
  xmmword_1EDC46458 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unavailable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for unavailable != -1)
    swift_once();
  v2 = unk_1EDC46450;
  v3 = xmmword_1EDC46458;
  *(_QWORD *)a1 = static Locale.LanguageCode.unavailable;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.LanguageCode.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.LanguageCode.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.LanguageCode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, (uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.LanguageCode.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys, a2);
}

uint64_t Locale.LanguageCode.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.LanguageCode()
{
  return String.hash(into:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.LanguageCode@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.LanguageCode(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode(a1, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610], a2);
}

uint64_t Locale.Script.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  Swift::String v6;
  uint64_t result;

  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  a3->_countAndFlagsBits = a1;
  a3->_object = a2;
  a3[1] = v6;
  return result;
}

uint64_t (*Locale.Script.identifier.modify(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

uint64_t static Locale.Script.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for unknown != -1)
    swift_once();
  v2 = unk_1EDC46470;
  v3 = xmmword_1EDC46478;
  *(_QWORD *)a1 = static Locale.Script.unknown;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Script.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Script.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Script.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Script.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys, a2);
}

uint64_t Locale.Script.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Script@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Script@<X0>(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t result;

  v4 = *a1;
  v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  a2->_countAndFlagsBits = v4;
  a2->_object = v3;
  a2[1] = v5;
  return result;
}

void static Locale.Region.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 26482;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Region.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA628]);
}

uint64_t (*Locale.Region.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.Region.identifier.modify;
}

uint64_t Locale.Region.identifier.modify(_QWORD *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA628]);
}

uint64_t static Locale.Region.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for unknown != -1)
    swift_once();
  v2 = unk_1EDC46490;
  v3 = xmmword_1EDC46498;
  *(_QWORD *)a1 = static Locale.Region.unknown;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.Region.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Region.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Region.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Region.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Region.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA628], (void (*)(void))lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys, a2);
}

uint64_t Locale.Region.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.LanguageCode.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Region@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Region.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Region@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode(a1, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA628], a2);
}

void static Locale.Collation.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 28515;
  a1[1] = 0xE200000000000000;
}

void static Locale.Collation.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6974616C6C6F63;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t Locale.Collation.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t key path setter for Locale.Script.identifier : Locale.Script(uint64_t *a1, Swift::String *a2)
{
  void *v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t result;

  v4 = *a1;
  v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2[1] = v5;
  result = swift_bridgeObjectRelease();
  a2->_countAndFlagsBits = v4;
  a2->_object = v3;
  return result;
}

uint64_t Locale.Script.identifier.setter(uint64_t a1, void *a2)
{
  Swift::String *v2;
  Swift::String v5;
  uint64_t result;

  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2[1] = v5;
  result = swift_bridgeObjectRelease();
  v2->_countAndFlagsBits = a1;
  v2->_object = a2;
  return result;
}

uint64_t (*Locale.Collation.identifier.modify(_QWORD *a1))()
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

void Locale.Script.identifier.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String v7;
  Swift::String v8;

  v3 = *a1;
  v5 = **a1;
  v4 = (void *)(*a1)[1];
  v3[2] = v5;
  v6 = (Swift::String *)v3[4];
  v3[3] = (uint64_t)v4;
  swift_bridgeObjectRetain_n();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v7 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v7;
    swift_bridgeObjectRelease();
    v6->_countAndFlagsBits = v5;
    v6->_object = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    String.init<A>(_:)();
    v8 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v8;
    swift_bridgeObjectRelease();
    v6->_countAndFlagsBits = v5;
    v6->_object = v4;
  }
  free(v3);
}

uint64_t one-time initialization function for searchRules()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.Collation.searchRules = 0x686372616573;
  unk_1EDC464B0 = 0xE600000000000000;
  xmmword_1EDC464B8 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.searchRules.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for searchRules != -1)
    swift_once();
  v2 = unk_1EDC464B0;
  v3 = xmmword_1EDC464B8;
  *(_QWORD *)a1 = static Locale.Collation.searchRules;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for standard()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.Collation.standard = 0x647261646E617473;
  unk_1EDC464D0 = 0xE800000000000000;
  xmmword_1EDC464D8 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.standard.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = unk_1EDC464D0;
  v3 = xmmword_1EDC464D8;
  *(_QWORD *)a1 = static Locale.Collation.standard;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Collation.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Collation.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Collation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Collation.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys, a2);
}

uint64_t Locale.Script.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t countAndFlagsBits;
  void *object;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;

  v25 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  v22 = a4;
  if (v4)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    a3();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v24[0]) = 0;
    v10 = v25;
    countAndFlagsBits = KeyedDecodingContainer.decode(_:forKey:)();
    object = v17;
    LOBYTE(v24[0]) = 1;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v18;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v10);

  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v13 = v12;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v24[0] = v11;
    v24[1] = v13;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v14 = String._capitalized()();
    countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v22;
  *v22 = v11;
  v19[1] = v13;
  v19[2] = countAndFlagsBits;
  v19[3] = (uint64_t)object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Collation.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Collation@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Collation.init(from:)(a1, a2);
}

void static Locale.Currency.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 30051;
  a1[1] = 0xE200000000000000;
}

void static Locale.Currency.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x79636E6572727563;
  a1[1] = 0xE800000000000000;
}

uint64_t Locale.Currency.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t (*Locale.Currency.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Currency.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Currency.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Currency.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Currency.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys, a2);
}

uint64_t Locale.Currency.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Currency@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Currency.init(from:)(a1, a2);
}

void static Locale.NumberingSystem.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 30062;
  a1[1] = 0xE200000000000000;
}

void static Locale.NumberingSystem.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x737265626D756ELL;
  a1[1] = 0xE700000000000000;
}

uint64_t Locale.NumberingSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t (*Locale.NumberingSystem.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for latn()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.NumberingSystem.latn = 1853120876;
  qword_1EDC464F0 = 0xE400000000000000;
  xmmword_1EDC464F8 = (__int128)v1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.NumberingSystem.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.NumberingSystem.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.NumberingSystem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.NumberingSystem.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys, a2);
}

uint64_t Locale.NumberingSystem.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.NumberingSystem@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.NumberingSystem.init(from:)(a1, a2);
}

void static Locale.Weekday.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 30566;
  a1[1] = 0xE200000000000000;
}

void one-time initialization function for weekdays()
{
  static Locale.Weekday.weekdays = &outlined read-only object #0 of one-time initialization function for weekdays;
}

uint64_t static Locale.Weekday.weekdays.getter()
{
  if (one-time initialization token for weekdays != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Weekday(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.Weekday@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.Weekday.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.Weekday(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_18216EAC8[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Weekday()
{
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Weekday()
{
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.Weekday()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void static Locale.HourCycle.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 25448;
  a1[1] = 0xE200000000000000;
}

void static Locale.HourCycle.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7372756F68;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.HourCycle(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.HourCycle@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.HourCycle.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.HourCycle(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_18216EB00[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.HourCycle()
{
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.HourCycle()
{
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.HourCycle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.HourCycle()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.HourCycle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void static Locale.MeasurementSystem.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 29549;
  a1[1] = 0xE200000000000000;
}

void static Locale.MeasurementSystem.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6572757361656DLL;
  a1[1] = 0xE700000000000000;
}

uint64_t Locale.MeasurementSystem.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.MeasurementSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t (*Locale.MeasurementSystem.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for metric()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.metric = 0x63697274656DLL;
  *(_QWORD *)algn_1EDC3AF38 = 0xE600000000000000;
  xmmword_1EDC3AF40 = (__int128)v1;
  return result;
}

uint64_t static Locale.MeasurementSystem.measurementSystems.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.MeasurementSystem>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065BD0;
  if (one-time initialization token for metric != -1)
    swift_once();
  v1 = *(_QWORD *)algn_1EDC3AF38;
  v2 = xmmword_1EDC3AF40;
  *(_QWORD *)(v0 + 32) = static Locale.MeasurementSystem.metric;
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  v3 = one-time initialization token for us;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v4 = unk_1EDC3E860;
  v5 = xmmword_1EDC3E868;
  *(_QWORD *)(v0 + 64) = static Locale.MeasurementSystem.us;
  *(_QWORD *)(v0 + 72) = v4;
  *(_OWORD *)(v0 + 80) = v5;
  v6 = one-time initialization token for uk;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = *(_QWORD *)algn_1EDC3A1D8;
  v8 = xmmword_1EDC3A1E0;
  *(_QWORD *)(v0 + 96) = static Locale.MeasurementSystem.uk;
  *(_QWORD *)(v0 + 104) = v7;
  *(_OWORD *)(v0 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.MeasurementSystem.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.MeasurementSystem.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.MeasurementSystem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.MeasurementSystem.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys, a2);
}

uint64_t Locale.MeasurementSystem.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.MeasurementSystem@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.MeasurementSystem.init(from:)(a1, a2);
}

void static Locale.Subdivision.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 25715;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Subdivision.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t Locale.Subdivision._identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Locale.Subdivision.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t (*Locale.Subdivision.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Subdivision.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6669746E6564695FLL;
  else
    return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Subdivision.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Locale.Subdivision.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Subdivision.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Subdivision.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Subdivision.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Subdivision.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys, a2);
}

uint64_t Locale.Subdivision.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Subdivision@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Subdivision.init(from:)(a1, a2);
}

void static Locale.Variant.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 24950;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Variant.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = *a1;
  v7 = a1[1];
  v8 = a5(*a1, v7);
  v10 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a2[2] = v8;
  a2[3] = v10;
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t Locale.Variant.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E0DEA610]);
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a3();
  v8 = v7;
  swift_bridgeObjectRelease();
  v3[2] = v6;
  v3[3] = v8;
  result = swift_bridgeObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  return result;
}

uint64_t (*Locale.Variant.identifier.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify(_QWORD *a1, char a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  v6 = *a1;
  v7 = a3(*a1, v4);
  v9 = v8;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[2] = v7;
    v5[3] = v9;
    swift_bridgeObjectRelease();
    *v5 = v6;
    v5[1] = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5[2] = v7;
    v5[3] = v9;
    result = swift_bridgeObjectRelease();
    *v5 = v6;
    v5[1] = v4;
  }
  return result;
}

uint64_t one-time initialization function for posix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.Variant.posix = 0x7869736F70;
  unk_1EDC46510 = 0xE500000000000000;
  xmmword_1EDC46518 = (__int128)v1;
  return result;
}

uint64_t static Locale.Variant.posix.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for posix != -1)
    swift_once();
  v2 = unk_1EDC46510;
  v3 = xmmword_1EDC46518;
  *(_QWORD *)a1 = static Locale.Variant.posix;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Locale.LanguageCode.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Variant.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Variant.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Variant.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Variant.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610], (void (*)(void))lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys, a2);
}

uint64_t Locale.LanguageCode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  void (*v27)(void);

  v27 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v5)
  {
    v23 = a5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v27();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v26[0]) = 0;
    v12 = v25;
    v15 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = v16;
    LOBYTE(v26[0]) = 1;
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v12);

    a5 = v23;
    v21 = v18;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v21 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v20 = v13;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    v15 = a3(v21, v20);
    v17 = v14;
    swift_bridgeObjectRelease();
  }
  *a5 = v21;
  a5[1] = v20;
  a5[2] = v15;
  a5[3] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Variant.encode(to:)(_QWORD *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.Collation.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Variant@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Variant.init(from:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Collation()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  result = a2(*a1, v5);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = result;
  a3[3] = v7;
  return result;
}

Swift::Int ICULegacyKey.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUCLDRKey()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyKey()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

BOOL specialized static Locale.Components.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[6];
  _OWORD v90[7];

  v2 = *(unsigned __int8 *)(a1 + 96);
  v87 = *(_QWORD *)(a1 + 128);
  v88 = *(_QWORD *)(a1 + 112);
  v85 = *(_QWORD *)(a1 + 144);
  v86 = *(_QWORD *)(a1 + 120);
  v82 = *(_QWORD *)(a1 + 152);
  v83 = *(_QWORD *)(a1 + 104);
  v84 = *(_QWORD *)(a1 + 160);
  v74 = *(_QWORD *)(a1 + 168);
  v81 = *(_QWORD *)(a1 + 176);
  v77 = *(_QWORD *)(a1 + 184);
  v78 = *(_QWORD *)(a1 + 136);
  v79 = *(_QWORD *)(a1 + 192);
  v72 = *(unsigned __int8 *)(a1 + 200);
  v70 = *(unsigned __int8 *)(a1 + 201);
  v68 = *(_QWORD *)(a1 + 216);
  v65 = *(_QWORD *)(a1 + 224);
  v66 = *(_QWORD *)(a1 + 232);
  v62 = *(_QWORD *)(a1 + 248);
  v57 = *(_QWORD *)(a1 + 256);
  v59 = *(_QWORD *)(a1 + 208);
  v60 = *(_QWORD *)(a1 + 264);
  v46 = *(_QWORD *)(a1 + 272);
  v54 = *(_QWORD *)(a1 + 280);
  v49 = *(_QWORD *)(a1 + 288);
  v51 = *(_QWORD *)(a1 + 240);
  v52 = *(_QWORD *)(a1 + 296);
  v44 = *(_QWORD *)(a1 + 304);
  v3 = *(_QWORD *)(a1 + 312);
  v4 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v90[2] = *(_OWORD *)(a1 + 32);
  v90[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v34 = *(_QWORD *)(a1 + 320);
  v41 = *(_QWORD *)(a1 + 328);
  v42 = v3;
  v37 = *(_QWORD *)(a1 + 336);
  v39 = *(_QWORD *)(a1 + 344);
  v90[4] = *(_OWORD *)(a1 + 64);
  v90[5] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v89[2] = *(_OWORD *)(a2 + 32);
  v89[3] = v8;
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(unsigned __int8 *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 136);
  v15 = *(_QWORD *)(a2 + 144);
  v18 = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(a2 + 160);
  v73 = *(_QWORD *)(a2 + 168);
  v80 = *(_QWORD *)(a2 + 176);
  v75 = *(_QWORD *)(a2 + 192);
  v76 = *(_QWORD *)(a2 + 184);
  v71 = *(unsigned __int8 *)(a2 + 200);
  v69 = *(unsigned __int8 *)(a2 + 201);
  v58 = *(_QWORD *)(a2 + 208);
  v67 = *(_QWORD *)(a2 + 216);
  v63 = *(_QWORD *)(a2 + 232);
  v64 = *(_QWORD *)(a2 + 224);
  v50 = *(_QWORD *)(a2 + 240);
  v61 = *(_QWORD *)(a2 + 248);
  v55 = *(_QWORD *)(a2 + 264);
  v56 = *(_QWORD *)(a2 + 256);
  v45 = *(_QWORD *)(a2 + 272);
  v53 = *(_QWORD *)(a2 + 280);
  v47 = *(_QWORD *)(a2 + 296);
  v48 = *(_QWORD *)(a2 + 288);
  v43 = *(_QWORD *)(a2 + 304);
  v38 = *(_QWORD *)(a2 + 312);
  v33 = *(_QWORD *)(a2 + 320);
  v40 = *(_QWORD *)(a2 + 328);
  v35 = *(_QWORD *)(a2 + 344);
  v36 = *(_QWORD *)(a2 + 336);
  v89[4] = *(_OWORD *)(a2 + 64);
  v89[5] = v9;
  if (!specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v90, (uint64_t *)v89))
    return 0;
  if (v2 == 16)
  {
    if (v10 != 16)
      return 0;
  }
  else
  {
    result = 0;
    if (v10 == 16 || v2 != v10)
      return result;
  }
  if (!v88)
  {
    if (!v11)
    {
LABEL_14:
      if (v85)
      {
        if (v15)
        {
          if (v82 != v18 || v84 != v17)
          {
            v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            result = 0;
            if ((v21 & 1) == 0)
              return result;
          }
LABEL_23:
          if (v81)
          {
            if (v80)
            {
              if (v77 != v76 || v79 != v75)
              {
                v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
                result = 0;
                if ((v24 & 1) == 0)
                  return result;
              }
LABEL_32:
              if (v72 == 7)
              {
                if (v71 != 7)
                  return 0;
              }
              else if (v71 == 7 || (specialized == infix<A>(_:_:)(v72, v71) & 1) == 0)
              {
                return 0;
              }
              if (v70 == 4)
              {
                if (v69 != 4)
                  return 0;
              }
              else if (v69 == 4 || (specialized == infix<A>(_:_:)(v70, v69) & 1) == 0)
              {
                return 0;
              }
              if (v68)
              {
                if (v67)
                {
                  if (v65 != v64 || v66 != v63)
                  {
                    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    result = 0;
                    if ((v29 & 1) == 0)
                      return result;
                  }
LABEL_55:
                  if (v62)
                  {
                    if (v61)
                    {
                      if (v57 != v56 || v60 != v55)
                      {
                        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        result = 0;
                        if ((v30 & 1) == 0)
                          return result;
                      }
                      goto LABEL_64;
                    }
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else if (!v61)
                  {
LABEL_64:
                    if (v54)
                    {
                      if (v53)
                      {
                        if (v49 != v48 || v52 != v47)
                        {
                          v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          result = 0;
                          if ((v31 & 1) == 0)
                            return result;
                        }
LABEL_73:
                        if (v44)
                        {
                          *(_QWORD *)&v90[0] = v44;
                          *((_QWORD *)&v90[0] + 1) = v42;
                          if (v43)
                          {
                            *(_QWORD *)&v89[0] = v43;
                            *((_QWORD *)&v89[0] + 1) = v38;
                            swift_unknownObjectRetain_n();
                            v32 = specialized static TimeZone.== infix(_:_:)((uint64_t)v90, (uint64_t)v89);
                            swift_unknownObjectRelease();
                            swift_unknownObjectRelease();
                            if ((v32 & 1) == 0)
                              return 0;
                            goto LABEL_80;
                          }
                          swift_unknownObjectRetain();
                        }
                        else if (!v43)
                        {
LABEL_80:
                          if (v41)
                          {
                            if (v40)
                              return v37 == v36 && v39 == v35
                                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }
                          else if (!v40)
                          {
                            return 1;
                          }
                          v25 = v33;
                          v26 = v40;
                          outlined copy of Locale.LanguageCode?(v33, v40);
                          v27 = v34;
                          v28 = v41;
                          goto LABEL_37;
                        }
                        swift_unknownObjectRelease();
                        return 0;
                      }
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else if (!v53)
                    {
                      goto LABEL_73;
                    }
                    v25 = v45;
                    v26 = v53;
                    outlined copy of Locale.LanguageCode?(v45, v53);
                    v27 = v46;
                    v28 = v54;
LABEL_37:
                    outlined consume of Locale.LanguageCode?(v27, v28);
                    v22 = v25;
                    v23 = v26;
                    goto LABEL_38;
                  }
                  v25 = v50;
                  v26 = v61;
                  outlined copy of Locale.LanguageCode?(v50, v61);
                  v27 = v51;
                  v28 = v62;
                  goto LABEL_37;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else if (!v67)
              {
                goto LABEL_55;
              }
              v25 = v58;
              v26 = v67;
              outlined copy of Locale.LanguageCode?(v58, v67);
              v27 = v59;
              v28 = v68;
              goto LABEL_37;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else if (!v80)
          {
            goto LABEL_32;
          }
          v25 = v73;
          v26 = v80;
          outlined copy of Locale.LanguageCode?(v73, v80);
          v27 = v74;
          v28 = v81;
          goto LABEL_37;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else if (!v15)
      {
        goto LABEL_23;
      }
      outlined copy of Locale.LanguageCode?(v16, v15);
      outlined consume of Locale.LanguageCode?(v78, v85);
      v22 = v16;
      v23 = v15;
LABEL_38:
      outlined consume of Locale.LanguageCode?(v22, v23);
      return 0;
    }
LABEL_21:
    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v83, v88);
    v22 = v12;
    v23 = v11;
    goto LABEL_38;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  if (v86 == v13 && v87 == v14)
    goto LABEL_14;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v20 & 1) != 0)
    goto LABEL_14;
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_1E0F2F1A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_1E0F2F1A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_1E0F2F1A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_1E0F2F1A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation, &type metadata for Locale.Collation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation, &type metadata for Locale.Collation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation, &type metadata for Locale.Collation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation, &type metadata for Locale.Collation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation, &type metadata for Locale.Collation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency, &type metadata for Locale.Currency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency, &type metadata for Locale.Currency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency, &type metadata for Locale.Currency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency, &type metadata for Locale.Currency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency, &type metadata for Locale.Currency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem, &type metadata for Locale.NumberingSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem, &type metadata for Locale.NumberingSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem, &type metadata for Locale.NumberingSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem, &type metadata for Locale.NumberingSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem, &type metadata for Locale.NumberingSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.HourCycle, &type metadata for Locale.HourCycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.HourCycle, &type metadata for Locale.HourCycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.HourCycle, &type metadata for Locale.HourCycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.HourCycle, &type metadata for Locale.HourCycle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem, &type metadata for Locale.MeasurementSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem, &type metadata for Locale.MeasurementSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem, &type metadata for Locale.MeasurementSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem, &type metadata for Locale.MeasurementSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem, &type metadata for Locale.MeasurementSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision, &type metadata for Locale.Subdivision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision, &type metadata for Locale.Subdivision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision, &type metadata for Locale.Subdivision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision, &type metadata for Locale.Subdivision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision, &type metadata for Locale.Subdivision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode.CodingKeys, &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode.CodingKeys, &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode.CodingKeys, &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode.CodingKeys, &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script.CodingKeys, &type metadata for Locale.Script.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script.CodingKeys, &type metadata for Locale.Script.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script.CodingKeys, &type metadata for Locale.Script.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script.CodingKeys, &type metadata for Locale.Script.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region.CodingKeys, &type metadata for Locale.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region.CodingKeys, &type metadata for Locale.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region.CodingKeys, &type metadata for Locale.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region.CodingKeys, &type metadata for Locale.Region.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation.CodingKeys, &type metadata for Locale.Collation.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation.CodingKeys, &type metadata for Locale.Collation.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation.CodingKeys, &type metadata for Locale.Collation.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Collation.CodingKeys, &type metadata for Locale.Collation.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency.CodingKeys, &type metadata for Locale.Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency.CodingKeys, &type metadata for Locale.Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency.CodingKeys, &type metadata for Locale.Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Currency.CodingKeys, &type metadata for Locale.Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem.CodingKeys, &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem.CodingKeys, &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem.CodingKeys, &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.NumberingSystem.CodingKeys, &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys, &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys, &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys, &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys, &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision.CodingKeys, &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision.CodingKeys, &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision.CodingKeys, &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Subdivision.CodingKeys, &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant.CodingKeys, &type metadata for Locale.Variant.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant.CodingKeys, &type metadata for Locale.Variant.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant.CodingKeys, &type metadata for Locale.Variant.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Variant.CodingKeys, &type metadata for Locale.Variant.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Components and conformance Locale.Components()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components;
  if (!lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Components, &type metadata for Locale.Components);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode.IdentifierType, &type metadata for Locale.LanguageCode.IdentifierType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUCLDRKey and conformance ICUCLDRKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey;
  if (!lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUCLDRKey, &type metadata for ICUCLDRKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey);
  }
  return result;
}

uint64_t sub_181EAE270@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181EAE27C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t sub_181EAE298(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_181EAE2AC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA628]);
}

uint64_t sub_181EAE2C8(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_181EAE2DC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t sub_181EAE2F8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t sub_181EAE314(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t sub_181EAE330(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t sub_181EAE34C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t destroy for Locale.Components(_QWORD *a1)
{
  uint64_t result;

  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  result = a1[41];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v8 = *(_QWORD *)(a2 + 72);
    if (v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_7:
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 112);
  if (v13)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = *(_QWORD *)(a2 + 144);
    if (v15)
      goto LABEL_10;
LABEL_13:
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    v17 = *(_QWORD *)(a2 + 176);
    if (v17)
      goto LABEL_11;
    goto LABEL_14;
  }
  v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  v15 = *(_QWORD *)(a2 + 144);
  if (!v15)
    goto LABEL_13;
LABEL_10:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = *(_QWORD *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v17;
    v18 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
LABEL_14:
  v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  v22 = *(_QWORD *)(a2 + 216);
  if (v22)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v22;
    v23 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = *(_QWORD *)(a2 + 248);
    if (v24)
      goto LABEL_17;
LABEL_20:
    v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    v26 = *(_QWORD *)(a2 + 280);
    if (v26)
      goto LABEL_18;
    goto LABEL_21;
  }
  v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  v24 = *(_QWORD *)(a2 + 248);
  if (!v24)
    goto LABEL_20;
LABEL_17:
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v24;
  v25 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = *(_QWORD *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v26;
    v27 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
LABEL_21:
  v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  v31 = *(_QWORD *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v31;
    v32 = *(_QWORD *)(a2 + 336);
    v33 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v32;
    *(_QWORD *)(a1 + 344) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
  }
  return a1;
}

uint64_t assignWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  v7 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 32);
      v10 = *(_OWORD *)(a2 + 48);
      *v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }
  v12 = (_OWORD *)(a1 + 64);
  v13 = (_OWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 64);
      v15 = *(_OWORD *)(a2 + 80);
      *v12 = *v13;
      *(_OWORD *)(a1 + 80) = v15;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 80);
    *v12 = *v13;
    *(_OWORD *)(a1 + 80) = v16;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v17 = (_OWORD *)(a1 + 104);
  v18 = (_OWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 104);
      v20 = *(_OWORD *)(a2 + 120);
      *v17 = *v18;
      *(_OWORD *)(a1 + 120) = v20;
    }
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 120);
    *v17 = *v18;
    *(_OWORD *)(a1 + 120) = v21;
  }
  v22 = (_OWORD *)(a1 + 136);
  v23 = (_OWORD *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v24)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 136);
      v25 = *(_OWORD *)(a2 + 152);
      *v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }
  else if (v24)
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 152);
    *v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }
  v27 = (_OWORD *)(a1 + 168);
  v28 = (_OWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v29)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 168);
      v30 = *(_OWORD *)(a2 + 184);
      *v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 184);
    *v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v32 = (_OWORD *)(a1 + 208);
  v33 = (_OWORD *)(a2 + 208);
  v34 = *(_QWORD *)(a2 + 216);
  if (*(_QWORD *)(a1 + 216))
  {
    if (v34)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 208);
      v35 = *(_OWORD *)(a2 + 224);
      *v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 224);
    *v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }
  v37 = (_OWORD *)(a1 + 240);
  v38 = (_OWORD *)(a2 + 240);
  v39 = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 248))
  {
    if (v39)
    {
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 240);
      v40 = *(_OWORD *)(a2 + 256);
      *v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }
  else if (v39)
  {
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 256);
    *v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }
  v42 = (_OWORD *)(a1 + 272);
  v43 = (_OWORD *)(a2 + 272);
  v44 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v44)
    {
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 272);
      v45 = *(_OWORD *)(a2 + 288);
      *v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }
  else if (v44)
  {
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *(_OWORD *)(a2 + 288);
    *v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }
  v47 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 312) = v47;
  v48 = (_OWORD *)(a1 + 320);
  v49 = (_OWORD *)(a2 + 320);
  v50 = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 328))
  {
    if (v50)
    {
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 320);
      v51 = *(_OWORD *)(a2 + 336);
      *v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }
  else if (v50)
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v52 = *(_OWORD *)(a2 + 336);
    *v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }
  return a1;
}

void *__swift_memcpy352_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.LanguageCode(a1 + 32);
  }
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(_QWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a2 + 72);
    if (v10)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Locale.LanguageCode(a1 + 64);
  }
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_16:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a2 + 112);
    if (v13)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.LanguageCode(a1 + 104);
  }
  v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
LABEL_21:
  if (*(_QWORD *)(a1 + 144))
  {
    v16 = *(_QWORD *)(a2 + 144);
    if (v16)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Locale.LanguageCode(a1 + 136);
  }
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(_QWORD *)(a1 + 176))
  {
    v19 = *(_QWORD *)(a2 + 176);
    if (v19)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.LanguageCode(a1 + 168);
  }
  v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 216))
  {
    v22 = *(_QWORD *)(a2 + 216);
    if (v22)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v22;
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.LanguageCode(a1 + 208);
  }
  v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(_QWORD *)(a1 + 248))
  {
    v25 = *(_QWORD *)(a2 + 248);
    if (v25)
    {
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    outlined destroy of Locale.LanguageCode(a1 + 240);
  }
  v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(_QWORD *)(a1 + 280))
  {
    v28 = *(_QWORD *)(a2 + 280);
    if (v28)
    {
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = v28;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    outlined destroy of Locale.LanguageCode(a1 + 272);
  }
  v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  v31 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 312) = v31;
  if (!*(_QWORD *)(a1 + 328))
  {
LABEL_50:
    v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    return a1;
  }
  v32 = *(_QWORD *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.LanguageCode(a1 + 320);
    goto LABEL_50;
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Locale.Components(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 352))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Locale.Components(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 352) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.Components()
{
  return &type metadata for Locale.Components;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.IdentifierType()
{
  return &type metadata for Locale.LanguageCode.IdentifierType;
}

ValueMetadata *type metadata accessor for Locale.Collation()
{
  return &type metadata for Locale.Collation;
}

ValueMetadata *type metadata accessor for Locale.Currency()
{
  return &type metadata for Locale.Currency;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem()
{
  return &type metadata for Locale.NumberingSystem;
}

uint64_t storeEnumTagSinglePayload for Locale.Weekday(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181EAF2E0 + 4 * byte_18216CCA1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181EAF314 + 4 * byte_18216CC9C[v4]))();
}

uint64_t sub_181EAF314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF31C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EAF324);
  return result;
}

uint64_t sub_181EAF330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EAF338);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181EAF33C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.Weekday()
{
  return &type metadata for Locale.Weekday;
}

uint64_t storeEnumTagSinglePayload for Locale.HourCycle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181EAF3AC + 4 * byte_18216CCAB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181EAF3E0 + 4 * byte_18216CCA6[v4]))();
}

uint64_t sub_181EAF3E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF3E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EAF3F0);
  return result;
}

uint64_t sub_181EAF3FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EAF404);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181EAF408(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF410(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.HourCycle()
{
  return &type metadata for Locale.HourCycle;
}

ValueMetadata *type metadata accessor for Locale.Subdivision()
{
  return &type metadata for Locale.Subdivision;
}

ValueMetadata *type metadata accessor for Locale.Variant()
{
  return &type metadata for Locale.Variant;
}

ValueMetadata *type metadata accessor for ICUCLDRKey()
{
  return &type metadata for ICUCLDRKey;
}

ValueMetadata *type metadata accessor for Locale.Variant.CodingKeys()
{
  return &type metadata for Locale.Variant.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Subdivision.CodingKeys()
{
  return &type metadata for Locale.Subdivision.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem.CodingKeys()
{
  return &type metadata for Locale.MeasurementSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem.CodingKeys()
{
  return &type metadata for Locale.NumberingSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Currency.CodingKeys()
{
  return &type metadata for Locale.Currency.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Collation.CodingKeys()
{
  return &type metadata for Locale.Collation.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Region.CodingKeys()
{
  return &type metadata for Locale.Region.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Script.CodingKeys()
{
  return &type metadata for Locale.Script.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Locale.LanguageCode.IdentifierType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181EAF528 + 4 * byte_18216CCB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181EAF55C + 4 * byte_18216CCB0[v4]))();
}

uint64_t sub_181EAF55C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF564(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EAF56CLL);
  return result;
}

uint64_t sub_181EAF578(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EAF580);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181EAF584(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF58C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.CodingKeys()
{
  return &type metadata for Locale.LanguageCode.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Locale.Components.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_181EAF5F4 + 4 * byte_18216CCBF[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_181EAF628 + 4 * byte_18216CCBA[v4]))();
}

uint64_t sub_181EAF628(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EAF638);
  return result;
}

uint64_t sub_181EAF644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EAF64CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_181EAF650(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EAF658(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.Components.CodingKeys()
{
  return &unk_1E0F2F1A0;
}

uint64_t specialized Locale.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000018230F300
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6974616C6C6F63 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E697265626D756ELL && a2 == 0xEF6D657473795367
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7961447473726966 && a2 == 0xEE006B656557664FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C63794372756F68 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018230F320
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7369766964627573 && a2 == 0xEB000000006E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x746E6169726176 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t specialized Locale.Subdivision.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x800000018230F340
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6669746E6564695FLL && a2 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

__CFString *one-time initialization function for _catInfoKeys()
{
  uint64_t v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSFileAttributeKey>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065BB0;
  *(_QWORD *)(v0 + 32) = CFSTR("NSFileHFSCreatorCode");
  *(_QWORD *)(v0 + 40) = CFSTR("NSFileHFSTypeCode");
  *(_QWORD *)(v0 + 48) = CFSTR("NSFileBusy");
  *(_QWORD *)(v0 + 56) = CFSTR("NSFileExtensionHidden");
  *(_QWORD *)(v0 + 64) = CFSTR("NSFileCreationDate");
  static _FileManagerImpl._catInfoKeys = (_UNKNOWN *)v0;
  v1 = CFSTR("NSFileHFSCreatorCode");
  v2 = CFSTR("NSFileHFSTypeCode");
  v3 = CFSTR("NSFileBusy");
  v4 = CFSTR("NSFileExtensionHidden");
  return CFSTR("NSFileCreationDate");
}

uint64_t closure #1 in static _FileManagerImpl._setAttribute(_:value:at:followSymLinks:)(void *value, uint64_t a2, char *path, char *name, char a5)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  unint64_t i;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  char v69;
  Swift::String v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  if (!value)
    goto LABEL_67;
  result = setxattr(path, name, value, a2 - (_QWORD)value, 0, (a5 & 1) == 0);
  if ((_DWORD)result == -1)
  {
    v7 = String.init(cString:)();
    v9 = v8;
    LODWORD(v5) = MEMORY[0x186DA4118]();
    v76 = MEMORY[0x1E0DEE9E0];
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v12 = v11;
    *(_QWORD *)&v78 = v7;
    *((_QWORD *)&v78 + 1) = v9;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v10, v12);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v15 = v14;
    URL.init(_fileManagerFailableFileURLWithPath:)(v7, v9, (uint64_t)&v78);
    if ((_QWORD)v78)
    {
      *((_QWORD *)&v77 + 1) = v79;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
      v83 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v13, v15);
    v84 = v76;
    swift_bridgeObjectRetain();
    if ((_DWORD)v5 == 102)
    {
LABEL_7:
      v16 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
LABEL_68:
        *(_QWORD *)&v81 = 0;
        *((_QWORD *)&v81 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v81 = 0xD000000000000014;
        *((_QWORD *)&v81 + 1) = 0x8000000182306980;
        LODWORD(v78) = (_DWORD)v5;
        v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181EB0FB8);
      }
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v21 = v20;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v22 = (int)POSIXErrorCode.rawValue.getter();
      v23 = objc_allocWithZone((Class)NSError);
      v24 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, v22, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v26 = objc_msgSend(v25, sel_domain);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v29 == v30)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
        {
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
      }
      *(_QWORD *)&v78 = v25;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v19, v21);
      v16 = 4;
      switch((int)v5)
      {
        case 1:
        case 13:
          v16 = 513;
          break;
        case 2:
          break;
        case 17:
          v16 = 516;
          break;
        case 28:
        case 69:
          v16 = 640;
          break;
        case 30:
          v16 = 642;
          break;
        case 63:
          v16 = 514;
          break;
        default:
          goto LABEL_7;
      }
    }
    v17 = v84;
    v71 = v16;
    if (*(_QWORD *)(v84 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v73 = v17 + 64;
    v31 = -1;
    v32 = -1 << *(_BYTE *)(v17 + 32);
    if (-v32 < 64)
      v31 = ~(-1 << -(char)v32);
    v33 = v31 & *(_QWORD *)(v17 + 64);
    v34 = &v82;
    v35 = (__int128 *)((char *)&v77 + 8);
    v5 = &v79;
    v72 = (unint64_t)(63 - v32) >> 6;
    swift_bridgeObjectRetain();
    v74 = 0;
    if (v33)
      goto LABEL_20;
LABEL_21:
    v43 = v74 + 1;
    if (__OFADD__(v74, 1))
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (v43 < v72)
    {
      v44 = *(_QWORD *)(v73 + 8 * v43);
      v45 = v74 + 1;
      if (v44)
        goto LABEL_40;
      v45 = v74 + 2;
      if (v74 + 2 >= v72)
        goto LABEL_46;
      v44 = *(_QWORD *)(v73 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v74 + 3;
      if (v74 + 3 >= v72)
        goto LABEL_46;
      v44 = *(_QWORD *)(v73 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v74 + 4;
      if (v74 + 4 >= v72)
        goto LABEL_46;
      v44 = *(_QWORD *)(v73 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v74 + 5;
      if (v74 + 5 >= v72)
        goto LABEL_46;
      v44 = *(_QWORD *)(v73 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v74 + 6;
      if (v74 + 6 >= v72)
        goto LABEL_46;
      v44 = *(_QWORD *)(v73 + 8 * v45);
      if (v44)
      {
LABEL_40:
        v74 = v45;
        v75 = (v44 - 1) & v44;
        for (i = __clz(__rbit64(v44)) + (v45 << 6); ; i = __clz(__rbit64(v33)) | (v74 << 6))
        {
          v47 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * i);
          v49 = *v47;
          v48 = v47[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v17 + 56) + 40 * i, (uint64_t)v34);
          *(_QWORD *)&v81 = v49;
          *((_QWORD *)&v81 + 1) = v48;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v51 = v49;
          v50 = v48;
          outlined init with take of Any(v35, v5);
          outlined init with take of Any(v5, v80);
          outlined init with take of Any(v80, &v78);
          v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v48);
          v53 = v52;
          if ((v54 & 1) != 0)
          {
            v36 = v34;
            v37 = v5;
            v38 = v35;
            v39 = v17;
            v40 = (uint64_t *)(v18[6] + 16 * v52);
            swift_bridgeObjectRelease();
            *v40 = v51;
            v40[1] = v50;
            v17 = v39;
            v35 = v38;
            v5 = v37;
            v34 = v36;
            v41 = (_OWORD *)(v18[7] + 32 * v53);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
            outlined init with take of Any(&v78, v41);
            v33 = v75;
            if (!v75)
              goto LABEL_21;
          }
          else
          {
            if (v18[2] >= v18[3])
            {
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            *(_QWORD *)((char *)v18 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v52;
            v55 = (uint64_t *)(v18[6] + 16 * v52);
            *v55 = v51;
            v55[1] = v50;
            outlined init with take of Any(&v78, (_OWORD *)(v18[7] + 32 * v52));
            v56 = v18[2];
            v57 = __OFADD__(v56, 1);
            v58 = v56 + 1;
            if (v57)
              goto LABEL_63;
            v18[2] = v58;
            v33 = v75;
            if (!v75)
              goto LABEL_21;
          }
LABEL_20:
          v75 = (v33 - 1) & v33;
        }
      }
      v46 = v74 + 7;
      if (v74 + 7 < v72)
      {
        v44 = *(_QWORD *)(v73 + 8 * v46);
        if (v44)
        {
          v45 = v74 + 7;
          goto LABEL_40;
        }
        while (1)
        {
          v45 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_65;
          if (v45 >= v72)
            break;
          v44 = *(_QWORD *)(v73 + 8 * v45);
          ++v46;
          if (v44)
            goto LABEL_40;
        }
      }
    }
LABEL_46:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v59 = objc_allocWithZone((Class)NSError);
    v60 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v61 = objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, v71, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v62 = objc_msgSend(v61, sel_domain);
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v65 = v64;

    if (v63 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v65 != v66)
    {
      v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v68 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  return result;
}

void closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_181EB1108@<X0>(char *path@<X3>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, char *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v12 = a2;
  v13 = a3;
  v14 = BYTE2(a3);
  v15 = BYTE3(a3);
  v16 = BYTE4(a3);
  v17 = BYTE5(a3);
  return closure #1 in static _FileManagerImpl._setAttribute(_:value:at:followSymLinks:)(&v12, (uint64_t)&v12 + BYTE6(a3), path, a5, a4 & 1);
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)((uint64_t (*)(void))MEMORY[0x1E0C83790], a1);
}

uint64_t closure #1 in static _FileManagerImpl._groupAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)(MEMORY[0x1E0C83690], a1);
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;

  result = a1();
  if (result)
    v4 = *(_DWORD *)(result + 16);
  else
    v4 = 0;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = result == 0;
  return result;
}

unint64_t specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(const char *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v5[1] = 0;
  v5[2] = 0;
  v4 = 0;
  v5[0] = 0x4000000000000005;
  v1 = getattrlist(a1, v5, &v4, 8uLL, 1u);
  if (v1)
    v2 = 0;
  else
    v2 = HIDWORD(v4);
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

uint64_t specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  void **p_storeEnumTagSinglePayload;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __CFString *v70;
  uint64_t v71;
  char v72;
  void *v73;
  __CFString *v74;
  uint64_t v75;
  char v76;
  void *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v87;
  int64_t v88;
  uint64_t v89;
  unsigned int v90;
  id v91;
  id v92;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[5];

  v3 = a1;
  v105[3] = *MEMORY[0x1E0C80C00];
  v95 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v96 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v7 = 0;
  p_storeEnumTagSinglePayload = (void **)(&value witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle
                                        + 56);
  v9 = (void **)(&value witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle + 56);
  v97 = v3;
  while (1)
  {
    do
    {
      if (v6)
      {
        v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v11 = v10 | (v7 << 6);
      }
      else
      {
        v12 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_125;
        if (v12 >= v96)
          goto LABEL_61;
        v13 = *(_QWORD *)(v95 + 8 * v12);
        ++v7;
        if (!v13)
        {
          v7 = v12 + 1;
          if (v12 + 1 >= v96)
            goto LABEL_61;
          v13 = *(_QWORD *)(v95 + 8 * v7);
          if (!v13)
          {
            v7 = v12 + 2;
            if (v12 + 2 >= v96)
              goto LABEL_61;
            v13 = *(_QWORD *)(v95 + 8 * v7);
            if (!v13)
            {
              v7 = v12 + 3;
              if (v12 + 3 >= v96)
                goto LABEL_61;
              v13 = *(_QWORD *)(v95 + 8 * v7);
              if (!v13)
              {
                v7 = v12 + 4;
                if (v12 + 4 >= v96)
                  goto LABEL_61;
                v13 = *(_QWORD *)(v95 + 8 * v7);
                if (!v13)
                {
                  v14 = v12 + 5;
                  if (v14 >= v96)
                    goto LABEL_61;
                  v13 = *(_QWORD *)(v95 + 8 * v14);
                  if (!v13)
                  {
                    while (1)
                    {
                      v7 = v14 + 1;
                      if (__OFADD__(v14, 1))
                        __break(1u);
                      if (v7 >= v96)
                        break;
                      v13 = *(_QWORD *)(v95 + 8 * v7);
                      ++v14;
                      if (v13)
                        goto LABEL_24;
                    }
LABEL_61:
                    swift_release();
                    return swift_bridgeObjectRelease();
                  }
                  v7 = v14;
                }
              }
            }
          }
        }
LABEL_24:
        v6 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v7 << 6);
      }
      v15 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v11);
      if (p_storeEnumTagSinglePayload[507] != (void *)-1)
        swift_once();
      v16 = v9[508];
      v17 = *((_QWORD *)v16 + 2);
    }
    while (!v17);
    v98 = v7;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((void **)v16 + 4));
    v20 = v19;
    v22 = v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v20 == v21;
    if (v22
      || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          swift_bridgeObjectRetain_n(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v23 & 1) != 0))
    {
LABEL_47:
      v3 = a2;
      v36 = a3;
      goto LABEL_49;
    }
    if (v17 != 1)
      break;
LABEL_4:
    swift_bridgeObjectRelease_n();
    v3 = v97;
    v7 = v98;
    p_storeEnumTagSinglePayload = &value witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.storeEnumTagSinglePayload;
    v9 = &value witness table for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.storeEnumTagSinglePayload;
  }
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((void **)v16 + 5));
  v26 = v25;
  if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)(v15) || v26 != v27)
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
      goto LABEL_47;
    if (v17 != 2)
    {
      v29 = 6;
      while (1)
      {
        v3 = v29 - 3;
        if (__OFADD__(v29 - 4, 1))
          break;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((void **)v16 + v29));
        v32 = v31;
        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(v15) && v32 == v33)
          goto LABEL_48;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0)
          goto LABEL_47;
        ++v29;
        if (v3 == v17)
          goto LABEL_4;
      }
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      swift_once();
      goto LABEL_120;
    }
    goto LABEL_4;
  }
LABEL_48:
  v3 = a2;
  v36 = a3;
  swift_bridgeObjectRelease_n();
LABEL_49:
  swift_bridgeObjectRelease_n();
  v37 = v97;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v38 = specialized Collection.first.getter(v3, v36);
  if (v39)
  {
    if (v38 == 126 && v39 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
LABEL_54:
      v41 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v3, v36);
      if ((v42 & 1) != 0)
      {
        v44 = HIBYTE(v36) & 0xF;
        if ((v36 & 0x2000000000000000) == 0)
          v44 = v3;
        v45 = v44 << 16;
        if ((v36 & 0x1000000000000000) == 0 || (v3 & 0x800000000000000) != 0)
          v43 = v45 | 7;
        else
          v43 = v45 | 0xB;
      }
      else
      {
        v43 = v41;
      }
      v47 = String.index(after:)();
      if (v43 >> 14 == v47 >> 14)
      {
        v48 = 0;
        v49 = 0;
      }
      else
      {
        if (v43 >> 14 < v47 >> 14)
          goto LABEL_127;
        v50 = String.subscript.getter();
        v48 = MEMORY[0x186DA4634](v50);
        v49 = v51;
        swift_bridgeObjectRelease();
      }
      v52 = static String.homeDirectoryPath(forUser:)(v48, v49);
      v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v55 = specialized Collection.suffix(from:)(v43, v3, v36);
      v57 = v56;
      v59 = v58;
      v61 = v60;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v100 = v52;
      *((_QWORD *)&v100 + 1) = v54;
      *(_QWORD *)&v102 = v55;
      *((_QWORD *)&v102 + 1) = v57;
      v103 = v59;
      v104 = v61;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v54;
      v3 = v52;
      v37 = v97;
    }
  }
  v62 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0)
    v62 = v3 & 0xFFFFFFFFFFFFLL;
  if (v62)
  {
    swift_bridgeObjectRetain();
    v63 = specialized String.withFileSystemRepresentation<A>(_:)(v3, v36, v3, v36);
    if (v64)
    {
      v65 = v63;
      v66 = v64;
      swift_bridgeObjectRelease();
      v3 = v65;
      v36 = v66;
    }
  }
  v67 = String._standardizingPath.getter(v3, v36);
  v69 = v68;
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:isDirectory:)(v67, v69, 0, (uint64_t)v105);
  swift_bridgeObjectRelease();
  v99 = MEMORY[0x1E0DEE9E0];
  if (!*(_QWORD *)(v37 + 16))
  {
    v100 = 0u;
    v101 = 0u;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v100);
    if (*(_QWORD *)(v37 + 16))
      goto LABEL_82;
LABEL_80:
    v100 = 0u;
    v101 = 0u;
    goto LABEL_87;
  }
  v70 = CFSTR("NSFileExtensionHidden");
  v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
  if ((v72 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v37 + 56) + 32 * v71, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }

  if (!*((_QWORD *)&v101 + 1))
    goto LABEL_81;
  outlined init with take of Any(&v100, &v102);
  v73 = (void *)*MEMORY[0x1E0C999B0];
  outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
  specialized Dictionary.subscript.setter((uint64_t)&v100, v73);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  if (!*(_QWORD *)(v37 + 16))
    goto LABEL_80;
LABEL_82:
  v74 = CFSTR("NSFileCreationDate");
  v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
  if ((v76 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v37 + 56) + 32 * v75, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }

  if (*((_QWORD *)&v101 + 1))
  {
    outlined init with take of Any(&v100, &v102);
    v77 = (void *)*MEMORY[0x1E0C998E8];
    outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
    specialized Dictionary.subscript.setter((uint64_t)&v100, v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    goto LABEL_88;
  }
LABEL_87:
  outlined destroy of Any?((uint64_t)&v100);
LABEL_88:
  v3 = *(_QWORD *)(v99 + 16);
  type metadata accessor for NSURLResourceKey(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  v78 = 0;
  *(_QWORD *)&v102 = Set.init(minimumCapacity:)();
  v79 = 1 << *(_BYTE *)(v99 + 32);
  v80 = -1;
  if (v79 < 64)
    v80 = ~(-1 << v79);
  v81 = v99 + 64;
  v82 = v80 & *(_QWORD *)(v99 + 64);
  v83 = (unint64_t)(v79 + 63) >> 6;
  while (2)
  {
    if (v82)
    {
      v84 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      v85 = v84 | (v78 << 6);
LABEL_92:
      v3 = (uint64_t)&v102;
      specialized Set._Variant.insert(_:)(&v100, *(id *)(*(_QWORD *)(v99 + 48) + 8 * v85));

      continue;
    }
    break;
  }
  if (__OFADD__(v78++, 1))
  {
    __break(1u);
    goto LABEL_124;
  }
  if (v78 < v83)
  {
    v87 = *(_QWORD *)(v81 + 8 * v78);
    if (!v87)
    {
      v88 = v78 + 1;
      if (v78 + 1 >= v83)
        goto LABEL_115;
      v87 = *(_QWORD *)(v81 + 8 * v88);
      if (!v87)
      {
        v88 = v78 + 2;
        if (v78 + 2 >= v83)
          goto LABEL_115;
        v87 = *(_QWORD *)(v81 + 8 * v88);
        if (!v87)
        {
          v88 = v78 + 3;
          if (v78 + 3 >= v83)
            goto LABEL_115;
          v87 = *(_QWORD *)(v81 + 8 * v88);
          if (!v87)
          {
            v88 = v78 + 4;
            if (v78 + 4 >= v83)
              goto LABEL_115;
            v87 = *(_QWORD *)(v81 + 8 * v88);
            if (!v87)
            {
              v88 = v78 + 5;
              if (v78 + 5 >= v83)
                goto LABEL_115;
              v87 = *(_QWORD *)(v81 + 8 * v88);
              if (!v87)
              {
                v88 = v78 + 6;
                if (v78 + 6 >= v83)
                  goto LABEL_115;
                v87 = *(_QWORD *)(v81 + 8 * v88);
                if (!v87)
                {
                  while (1)
                  {
                    v78 = v88 + 1;
                    if (__OFADD__(v88, 1))
                      goto LABEL_126;
                    if (v78 >= v83)
                      goto LABEL_115;
                    v87 = *(_QWORD *)(v81 + 8 * v78);
                    ++v88;
                    if (v87)
                      goto LABEL_110;
                  }
                }
              }
            }
          }
        }
      }
      v78 = v88;
    }
LABEL_110:
    v82 = (v87 - 1) & v87;
    v85 = __clz(__rbit64(v87)) + (v78 << 6);
    goto LABEL_92;
  }
LABEL_115:
  swift_release();
  v3 = v105[0];
  swift_bridgeObjectRetain();
  v89 = _NativeDictionary.bridged()();
  *(_QWORD *)&v102 = 0;
  v90 = objc_msgSend((id)v3, sel_setResourceValues_error_, v89, &v102);
  swift_unknownObjectRelease();
  if (v90)
  {
    v91 = (id)v102;
    goto LABEL_122;
  }
  if ((_QWORD)v102)
  {
    (id)v102;
    goto LABEL_121;
  }
  if (one-time initialization token for _nilObjCError != -1)
    goto LABEL_128;
LABEL_120:
  v92 = (id)_nilObjCError;
LABEL_121:
  swift_willThrow();
LABEL_122:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

uint64_t specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;

  v19 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v20 = (unint64_t)(v1 + 63) >> 6;
  v4 = swift_bridgeObjectRetain();
  v5 = 0;
  v21 = v4;
  while (1)
  {
    if (v3)
    {
      v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v7 = v6 | (v5 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
      JUMPOUT(0x181EB4468);
    }
    if (v5 >= v20)
      return swift_release();
    v9 = *(_QWORD *)(v19 + 8 * v5);
    if (!v9)
      break;
LABEL_17:
    v3 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v5 << 6);
LABEL_18:
    v11 = 16 * v7;
    v12 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + v11);
    v13 = (uint64_t *)(*(_QWORD *)(v21 + 56) + v11);
    v15 = *v13;
    v14 = v13[1];
    MEMORY[0x1E0C80A78](v4);
    if ((v16 & 0x1000000000000000) == 0)
    {
      if ((v16 & 0x2000000000000000) != 0)
        __asm { BR              X9 }
      if ((v12 & 0x1000000000000000) != 0)
        __asm { BR              X9 }
    }
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v15, v14);
    _StringGuts._slowWithCString<A>(_:)();
    if (v18)
    {
      swift_release();
      outlined consume of Data._Representation(v15, v14);
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v4 = outlined consume of Data._Representation(v15, v14);
  }
  v10 = v5 + 1;
  if (v5 + 1 >= v20)
    return swift_release();
  v9 = *(_QWORD *)(v19 + 8 * v10);
  if (v9)
    goto LABEL_16;
  v10 = v5 + 2;
  if (v5 + 2 >= v20)
    return swift_release();
  v9 = *(_QWORD *)(v19 + 8 * v10);
  if (v9)
    goto LABEL_16;
  v10 = v5 + 3;
  if (v5 + 3 >= v20)
    return swift_release();
  v9 = *(_QWORD *)(v19 + 8 * v10);
  if (v9)
  {
LABEL_16:
    v5 = v10;
    goto LABEL_17;
  }
  while (1)
  {
    v5 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      JUMPOUT(0x181EB4480);
    }
    if (v5 >= v20)
      return swift_release();
    v9 = *(_QWORD *)(v19 + 8 * v5);
    ++v10;
    if (v9)
      goto LABEL_17;
  }
}

void partial apply for closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t specialized static _FileManagerImpl._setFileProtectionValueForPath(_:_:newValue:)(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *p_f_bfree;
  DIR *v12;
  DIR *v13;
  uint64_t *v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t *v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  unint64_t j;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  void **v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  int v99;
  int object;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  _OWORD *v120;
  _OWORD *v121;
  char *v122;
  _OWORD *v123;
  _OWORD *v124;
  uint64_t v125;
  _OWORD *v126;
  _OWORD *v127;
  unint64_t i;
  int64_t v129;
  unint64_t v130;
  int64_t v131;
  int64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  _OWORD *v159;
  _OWORD *v160;
  uint64_t *v161;
  _OWORD *v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t *v165;
  _OWORD *v166;
  unint64_t k;
  int64_t v168;
  unint64_t v169;
  int64_t v170;
  int64_t v171;
  void **v172;
  uint64_t v173;
  void *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v193;
  Swift::String v194;
  Swift::String v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  DIR *v199;
  DIR *v200;
  uint64_t v201;
  int64_t v202;
  int64_t v203;
  int64_t v204;
  uint64_t v205;
  uint64_t v206;
  int64_t v207;
  int64_t v208;
  int64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _OWORD v214[2];
  uint64_t v215;
  _BYTE v216[32];
  uint64_t v217;
  _OWORD v218[2];
  unint64_t v219;
  __int128 v220;
  uint64_t v221;
  statfs v222;
  uint64_t v223;
  _OWORD v224[2];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  result = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(a3);
  if ((result & 0x100000000) != 0 || (_DWORD)result != (_DWORD)a4)
  {
    v9 = (uint64_t)&v219;
    v10 = open(_:_:)();
    if ((v10 & 0x80000000) == 0)
    {
      p_f_bfree = (uint64_t *)v10;
      v12 = 0;
LABEL_5:
      if (!MEMORY[0x186DA4130](p_f_bfree, 64, a4))
        goto LABEL_9;
      if (MEMORY[0x186DA4118]() == 45)
      {
        bzero(&v222, 0x878uLL);
        if (fstatfs((int)p_f_bfree, &v222) || (v222.f_flags & 0x80) == 0)
        {
LABEL_9:
          if (!v12)
            return close((int)p_f_bfree);
          goto LABEL_10;
        }
        v200 = v12;
        *(_QWORD *)&v214[0] = MEMORY[0x1E0DEE9E0];
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v56 = v55;
        v223 = a1;
        *(_QWORD *)&v224[0] = a2;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v219, (uint64_t)v54, v56);
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v59 = v58;
        URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v223);
        if (v223)
        {
          *(_QWORD *)v216 = v223;
          *(_OWORD *)&v216[8] = v224[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
LABEL_92:
          specialized Dictionary.subscript.setter((uint64_t)&v219, (uint64_t)v57, v59);
          v213 = *(_QWORD *)&v214[0];
          swift_bridgeObjectRetain();
          object = 45;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
            while (1)
            {
              v219 = 0;
              *(_QWORD *)&v220 = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              v219 = 0xD000000000000014;
              *(_QWORD *)&v220 = 0x8000000182306980;
              LODWORD(v223) = object;
              v195._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              object = (int)v195._object;
              String.append(_:)(v195);
              swift_bridgeObjectRelease();
LABEL_203:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v103 = v102;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v104 = (int)POSIXErrorCode.rawValue.getter();
          v105 = objc_allocWithZone((Class)NSError);
          v106 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v107 = objc_msgSend(v105, sel_initWithDomain_code_userInfo_, v106, v104, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v108 = objc_msgSend(v107, sel_domain);
          v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          v111 = v110;

          if (v109 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v111 == v112)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v113 & 1) == 0)
            {
LABEL_198:
              __break(1u);
              goto LABEL_199;
            }
          }
          v223 = (uint64_t)v107;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v219, (uint64_t)v101, v103);
          v114 = v213;
          v198 = (int)p_f_bfree;
          if (*(_QWORD *)(v213 + 16))
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v115 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          }
          else
          {
            v115 = (_QWORD *)MEMORY[0x1E0DEE9E0];
          }
          v205 = v213 + 64;
          v116 = -1;
          v117 = -1 << *(_BYTE *)(v213 + 32);
          if (-v117 < 64)
            v116 = ~(-1 << -(char)v117);
          v118 = v116 & *(_QWORD *)(v213 + 64);
          v119 = (char *)&v220 + 8;
          v120 = &v216[16];
          v121 = (_OWORD *)((char *)v224 + 8);
          v202 = (unint64_t)(63 - v117) >> 6;
          swift_bridgeObjectRetain();
          v208 = 0;
          if (v118)
            goto LABEL_105;
LABEL_106:
          v129 = v208 + 1;
          if (!__OFADD__(v208, 1))
          {
            if (v129 >= v202)
              goto LABEL_131;
            v130 = *(_QWORD *)(v205 + 8 * v129);
            v131 = v208 + 1;
            if (!v130)
            {
              v131 = v208 + 2;
              if (v208 + 2 >= v202)
                goto LABEL_131;
              v130 = *(_QWORD *)(v205 + 8 * v131);
              if (!v130)
              {
                v131 = v208 + 3;
                if (v208 + 3 >= v202)
                  goto LABEL_131;
                v130 = *(_QWORD *)(v205 + 8 * v131);
                if (!v130)
                {
                  v131 = v208 + 4;
                  if (v208 + 4 >= v202)
                    goto LABEL_131;
                  v130 = *(_QWORD *)(v205 + 8 * v131);
                  if (!v130)
                  {
                    v131 = v208 + 5;
                    if (v208 + 5 >= v202)
                      goto LABEL_131;
                    v130 = *(_QWORD *)(v205 + 8 * v131);
                    if (!v130)
                    {
                      v131 = v208 + 6;
                      if (v208 + 6 >= v202)
                        goto LABEL_131;
                      v130 = *(_QWORD *)(v205 + 8 * v131);
                      if (!v130)
                      {
                        v132 = v208 + 7;
                        if (v208 + 7 < v202)
                        {
                          v130 = *(_QWORD *)(v205 + 8 * v132);
                          if (v130)
                          {
                            v131 = v208 + 7;
                            goto LABEL_125;
                          }
                          while (1)
                          {
                            v131 = v132 + 1;
                            if (__OFADD__(v132, 1))
                              break;
                            if (v131 >= v202)
                              goto LABEL_131;
                            v130 = *(_QWORD *)(v205 + 8 * v131);
                            ++v132;
                            if (v130)
                              goto LABEL_125;
                          }
LABEL_199:
                          __break(1u);
                        }
LABEL_131:
                        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                        swift_bridgeObjectRelease();
                        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                        v143 = objc_allocWithZone((Class)NSError);
                        v144 = String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        v145 = objc_msgSend(v143, sel_initWithDomain_code_userInfo_, v144, 256, _NativeDictionary.bridged()());
                        swift_unknownObjectRelease();
                        swift_unknownObjectRelease();
                        v146 = objc_msgSend(v145, sel_domain);
                        v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
                        v149 = v148;

                        if (v147 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                          || v149 != v150)
                        {
                          v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v99 = v198;
                          if ((v152 & 1) != 0)
                            goto LABEL_138;
                          __break(1u);
                        }
LABEL_137:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease_n();
                        v99 = v198;
LABEL_138:
                        swift_willThrow();
                        result = (unint64_t)v200;
                        if (!v200)
                          return close(v99);
                        return closedir((DIR *)result);
                      }
                    }
                  }
                }
              }
            }
LABEL_125:
            v208 = v131;
            v211 = (v130 - 1) & v130;
            for (i = __clz(__rbit64(v130)) + (v131 << 6); ; i = __clz(__rbit64(v118)) | (v208 << 6))
            {
              v133 = (unint64_t *)(*(_QWORD *)(v114 + 48) + 16 * i);
              v135 = *v133;
              v134 = v133[1];
              outlined init with copy of AnyHashable(*(_QWORD *)(v114 + 56) + 40 * i, (uint64_t)v119);
              v219 = v135;
              *(_QWORD *)&v220 = v134;
              v136 = *((_OWORD *)v119 + 1);
              v214[0] = *(_OWORD *)v119;
              v214[1] = v136;
              v215 = *((_QWORD *)v119 + 4);
              *(_QWORD *)v216 = v135;
              *(_QWORD *)&v216[8] = v134;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              v137 = *(_OWORD *)v216;
              outlined init with take of Any(v120, v121);
              outlined init with take of Any(v121, v218);
              outlined init with take of Any(v218, &v223);
              v138 = specialized __RawDictionaryStorage.find<A>(_:)(v137, *((uint64_t *)&v137 + 1));
              v139 = v138;
              if ((v140 & 1) != 0)
              {
                v122 = v119;
                v123 = v121;
                v124 = v120;
                v125 = v114;
                v126 = (_OWORD *)(v115[6] + 16 * v138);
                swift_bridgeObjectRelease();
                *v126 = v137;
                v114 = v125;
                v120 = v124;
                v121 = v123;
                v119 = v122;
                v127 = (_OWORD *)(v115[7] + 32 * v139);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
                outlined init with take of Any(&v223, v127);
                v118 = v211;
                if (!v211)
                  goto LABEL_106;
              }
              else
              {
                if (v115[2] >= v115[3])
                  goto LABEL_191;
                *(_QWORD *)((char *)v115 + ((v138 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v138;
                *(_OWORD *)(v115[6] + 16 * v138) = v137;
                outlined init with take of Any(&v223, (_OWORD *)(v115[7] + 32 * v138));
                v141 = v115[2];
                v89 = __OFADD__(v141, 1);
                v142 = v141 + 1;
                if (v89)
                  goto LABEL_192;
                v115[2] = v142;
                v118 = v211;
                if (!v211)
                  goto LABEL_106;
              }
LABEL_105:
              v211 = (v118 - 1) & v118;
            }
          }
          goto LABEL_193;
        }
LABEL_91:
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        v221 = 0;
        goto LABEL_92;
      }
      v200 = v12;
      v22 = MEMORY[0x186DA4118]();
      *(_QWORD *)v216 = MEMORY[0x1E0DEE9E0];
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v25 = v24;
      v219 = a1;
      *(_QWORD *)&v220 = a2;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v23, v25);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v28 = v27;
      URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v219);
      if (v219)
      {
        v223 = v219;
        v224[0] = v220;
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        memset(&v222, 0, 40);
      }
      specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v26, v28);
      *(_QWORD *)&v218[0] = *(_QWORD *)v216;
      swift_bridgeObjectRetain();
      if (v22 == 102)
      {
LABEL_24:
        v29 = 256;
LABEL_51:
        v196 = v29;
        v61 = *(_QWORD *)&v218[0];
        v198 = (int)p_f_bfree;
        if (*(_QWORD *)(*(_QWORD *)&v218[0] + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v62 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v62 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v201 = *(_QWORD *)&v218[0] + 64;
        v63 = -1;
        v64 = -1 << *(_BYTE *)(*(_QWORD *)&v218[0] + 32);
        if (-v64 < 64)
          v63 = ~(-1 << -(char)v64);
        v65 = v63 & *(_QWORD *)(*(_QWORD *)&v218[0] + 64);
        v204 = (unint64_t)(63 - v64) >> 6;
        p_f_bfree = &v222.f_bfree;
        v66 = (_OWORD *)((char *)v224 + 8);
        v67 = (__int128 *)((char *)&v220 + 8);
        swift_bridgeObjectRetain();
        v207 = 0;
        if (v65)
          goto LABEL_59;
LABEL_60:
        v75 = v207 + 1;
        if (!__OFADD__(v207, 1))
        {
          if (v75 < v204)
          {
            v76 = *(_QWORD *)(v201 + 8 * v75);
            v77 = v207 + 1;
            if (v76)
              goto LABEL_79;
            v77 = v207 + 2;
            if (v207 + 2 < v204)
            {
              v76 = *(_QWORD *)(v201 + 8 * v77);
              if (v76)
                goto LABEL_79;
              v77 = v207 + 3;
              if (v207 + 3 < v204)
              {
                v76 = *(_QWORD *)(v201 + 8 * v77);
                if (v76)
                  goto LABEL_79;
                v77 = v207 + 4;
                if (v207 + 4 < v204)
                {
                  v76 = *(_QWORD *)(v201 + 8 * v77);
                  if (v76)
                    goto LABEL_79;
                  v77 = v207 + 5;
                  if (v207 + 5 < v204)
                  {
                    v76 = *(_QWORD *)(v201 + 8 * v77);
                    if (v76)
                      goto LABEL_79;
                    v77 = v207 + 6;
                    if (v207 + 6 < v204)
                    {
                      v76 = *(_QWORD *)(v201 + 8 * v77);
                      if (v76)
                        goto LABEL_79;
                      v78 = v207 + 7;
                      if (v207 + 7 < v204)
                      {
                        v76 = *(_QWORD *)(v201 + 8 * v78);
                        if (!v76)
                        {
                          while (1)
                          {
                            v77 = v78 + 1;
                            if (__OFADD__(v78, 1))
                              goto LABEL_194;
                            if (v77 >= v204)
                              goto LABEL_85;
                            v76 = *(_QWORD *)(v201 + 8 * v77);
                            ++v78;
                            if (v76)
                              goto LABEL_79;
                          }
                        }
                        v77 = v207 + 7;
LABEL_79:
                        v207 = v77;
                        v210 = (v76 - 1) & v76;
                        for (j = __clz(__rbit64(v76)) + (v77 << 6); ; j = __clz(__rbit64(v65)) | (v207 << 6))
                        {
                          v79 = (void **)(*(_QWORD *)(v61 + 48) + 16 * j);
                          v81 = *v79;
                          v80 = (uint64_t)v79[1];
                          outlined init with copy of AnyHashable(*(_QWORD *)(v61 + 56) + 40 * j, (uint64_t)p_f_bfree);
                          *(_QWORD *)&v222.f_bsize = v81;
                          v222.f_blocks = v80;
                          v82 = *((_OWORD *)p_f_bfree + 1);
                          *(_OWORD *)v216 = *(_OWORD *)p_f_bfree;
                          *(_OWORD *)&v216[16] = v82;
                          v217 = p_f_bfree[4];
                          v223 = (uint64_t)v81;
                          *(_QWORD *)&v224[0] = v80;
                          swift_bridgeObjectRetain();
                          swift_dynamicCast();
                          v83 = v223;
                          v9 = *(_QWORD *)&v224[0];
                          outlined init with take of Any(v66, v67);
                          outlined init with take of Any(v67, v214);
                          outlined init with take of Any(v214, &v219);
                          v84 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v9);
                          v85 = v84;
                          if ((v86 & 1) != 0)
                          {
                            v68 = p_f_bfree;
                            v69 = v67;
                            v70 = v66;
                            v71 = v61;
                            v72 = (uint64_t *)(v62[6] + 16 * v84);
                            swift_bridgeObjectRelease();
                            *v72 = v83;
                            v72[1] = v9;
                            v61 = v71;
                            v66 = v70;
                            v67 = v69;
                            p_f_bfree = v68;
                            v73 = (_OWORD *)(v62[7] + 32 * v85);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
                            outlined init with take of Any(&v219, v73);
                            v65 = v210;
                            if (!v210)
                              goto LABEL_60;
                          }
                          else
                          {
                            if (v62[2] >= v62[3])
                            {
                              __break(1u);
LABEL_186:
                              __break(1u);
                              goto LABEL_187;
                            }
                            *(_QWORD *)((char *)v62 + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v84;
                            v87 = (uint64_t *)(v62[6] + 16 * v84);
                            *v87 = v83;
                            v87[1] = v9;
                            outlined init with take of Any(&v219, (_OWORD *)(v62[7] + 32 * v84));
                            v88 = v62[2];
                            v89 = __OFADD__(v88, 1);
                            v90 = v88 + 1;
                            if (v89)
                              goto LABEL_186;
                            v62[2] = v90;
                            v65 = v210;
                            if (!v210)
                              goto LABEL_60;
                          }
LABEL_59:
                          v210 = (v65 - 1) & v65;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_85:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v91 = objc_allocWithZone((Class)NSError);
          v92 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v93 = objc_msgSend(v91, sel_initWithDomain_code_userInfo_, v92, v196, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v94 = objc_msgSend(v93, sel_domain);
          v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          v57 = v96;

          if (v95 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v57 == v97)
            goto LABEL_137;
          v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v99 = v198;
          if ((v59 & 1) != 0)
            goto LABEL_138;
          __break(1u);
          goto LABEL_91;
        }
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
        goto LABEL_195;
      }
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v32 = v31;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v33 = (int)POSIXErrorCode.rawValue.getter();
        v34 = objc_allocWithZone((Class)NSError);
        v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, v33, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v37 = objc_msgSend(v36, sel_domain);
        v9 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v39 = v38;

        if ((id)v9 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v39 == v40)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v9 & 1) == 0)
          {
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
            goto LABEL_197;
          }
        }
        v219 = (unint64_t)v36;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v30, v32);
        v29 = 263;
        switch(v22)
        {
          case 1:
          case 13:
            v29 = 257;
            break;
          case 2:
            v29 = 260;
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
            goto LABEL_24;
          case 27:
            goto LABEL_51;
          default:
            if (v22 != 63)
              goto LABEL_24;
            v29 = 258;
            break;
        }
        goto LABEL_51;
      }
      *(_QWORD *)&v222.f_bsize = 0;
      v222.f_blocks = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v222.f_bsize = 0xD000000000000014;
      v222.f_blocks = 0x8000000182306980;
      LODWORD(v219) = v22;
LABEL_202:
      v194._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      object = (int)v194._object;
      String.append(_:)(v194);
      swift_bridgeObjectRelease();
      goto LABEL_203;
    }
    if (MEMORY[0x186DA4118]() == 21 && (v13 = opendir(a3)) != 0)
    {
      v12 = v13;
      v14 = (uint64_t *)dirfd(v13);
      if ((v14 & 0x80000000) == 0)
      {
        p_f_bfree = v14;
        goto LABEL_5;
      }
      if (MEMORY[0x186DA4118]() == 13)
      {
LABEL_10:
        result = (unint64_t)v12;
        return closedir((DIR *)result);
      }
    }
    else
    {
      result = MEMORY[0x186DA4118]();
      if ((_DWORD)result == 13)
        return result;
      v12 = 0;
    }
    v199 = v12;
    v15 = MEMORY[0x186DA4118]();
    *(_QWORD *)v216 = MEMORY[0x1E0DEE9E0];
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v18 = v17;
    v219 = a1;
    *(_QWORD *)&v220 = a2;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v16, v18);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v21 = v20;
    URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)&v219);
    if (v219)
    {
      v223 = v219;
      v224[0] = v220;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(&v222, 0, 40);
    }
    specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v19, v21);
    *(_QWORD *)&v218[0] = *(_QWORD *)v216;
    swift_bridgeObjectRetain();
    if (v15 == 102)
    {
LABEL_31:
      v41 = 256;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
        *(_QWORD *)&v222.f_bsize = 0;
        v222.f_blocks = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v222.f_bsize = 0xD000000000000014;
        v222.f_blocks = 0x8000000182306980;
        LODWORD(v219) = v15;
        goto LABEL_202;
      }
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v44 = v43;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v45 = (int)POSIXErrorCode.rawValue.getter();
      v46 = objc_allocWithZone((Class)NSError);
      v47 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v48 = objc_msgSend(v46, sel_initWithDomain_code_userInfo_, v47, v45, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v49 = objc_msgSend(v48, sel_domain);
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;

      if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v52 == v53)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0)
        {
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
      }
      v219 = (unint64_t)v48;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v222, (uint64_t)v42, v44);
      v41 = 263;
      switch(v15)
      {
        case 1:
        case 13:
          v41 = 257;
          break;
        case 2:
          v41 = 260;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_31;
        case 27:
          break;
        default:
          if (v15 != 63)
            goto LABEL_31;
          v41 = 258;
          break;
      }
    }
    v153 = *(_QWORD *)&v218[0];
    v197 = v41;
    if (*(_QWORD *)(*(_QWORD *)&v218[0] + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v154 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v154 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v206 = *(_QWORD *)&v218[0] + 64;
    v155 = -1;
    v156 = -1 << *(_BYTE *)(*(_QWORD *)&v218[0] + 32);
    if (-v156 < 64)
      v155 = ~(-1 << -(char)v156);
    v157 = v155 & *(_QWORD *)(*(_QWORD *)&v218[0] + 64);
    v158 = &v222.f_bfree;
    v159 = (_OWORD *)((char *)v224 + 8);
    v160 = (__int128 *)((char *)&v220 + 8);
    v203 = (unint64_t)(63 - v156) >> 6;
    swift_bridgeObjectRetain();
    v209 = 0;
    if (v157)
      goto LABEL_149;
LABEL_150:
    v168 = v209 + 1;
    if (__OFADD__(v209, 1))
      goto LABEL_190;
    if (v168 < v203)
    {
      v169 = *(_QWORD *)(v206 + 8 * v168);
      v170 = v209 + 1;
      if (v169)
        goto LABEL_169;
      v170 = v209 + 2;
      if (v209 + 2 < v203)
      {
        v169 = *(_QWORD *)(v206 + 8 * v170);
        if (v169)
          goto LABEL_169;
        v170 = v209 + 3;
        if (v209 + 3 < v203)
        {
          v169 = *(_QWORD *)(v206 + 8 * v170);
          if (v169)
            goto LABEL_169;
          v170 = v209 + 4;
          if (v209 + 4 < v203)
          {
            v169 = *(_QWORD *)(v206 + 8 * v170);
            if (v169)
              goto LABEL_169;
            v170 = v209 + 5;
            if (v209 + 5 < v203)
            {
              v169 = *(_QWORD *)(v206 + 8 * v170);
              if (v169)
                goto LABEL_169;
              v170 = v209 + 6;
              if (v209 + 6 < v203)
              {
                v169 = *(_QWORD *)(v206 + 8 * v170);
                if (v169)
                  goto LABEL_169;
                v171 = v209 + 7;
                if (v209 + 7 < v203)
                {
                  v169 = *(_QWORD *)(v206 + 8 * v171);
                  if (!v169)
                  {
                    while (1)
                    {
                      v170 = v171 + 1;
                      if (__OFADD__(v171, 1))
                        goto LABEL_196;
                      if (v170 >= v203)
                        goto LABEL_175;
                      v169 = *(_QWORD *)(v206 + 8 * v170);
                      ++v171;
                      if (v169)
                        goto LABEL_169;
                    }
                  }
                  v170 = v209 + 7;
LABEL_169:
                  v209 = v170;
                  v212 = (v169 - 1) & v169;
                  for (k = __clz(__rbit64(v169)) + (v170 << 6); ; k = __clz(__rbit64(v157)) | (v209 << 6))
                  {
                    v172 = (void **)(*(_QWORD *)(v153 + 48) + 16 * k);
                    v174 = *v172;
                    v173 = (uint64_t)v172[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v153 + 56) + 40 * k, (uint64_t)v158);
                    *(_QWORD *)&v222.f_bsize = v174;
                    v222.f_blocks = v173;
                    v175 = *((_OWORD *)v158 + 1);
                    *(_OWORD *)v216 = *(_OWORD *)v158;
                    *(_OWORD *)&v216[16] = v175;
                    v217 = v158[4];
                    v223 = (uint64_t)v174;
                    *(_QWORD *)&v224[0] = v173;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v176 = v223;
                    v177 = *(_QWORD *)&v224[0];
                    outlined init with take of Any(v159, v160);
                    outlined init with take of Any(v160, v214);
                    outlined init with take of Any(v214, &v219);
                    v178 = specialized __RawDictionaryStorage.find<A>(_:)(v176, v177);
                    v179 = v178;
                    if ((v180 & 1) != 0)
                    {
                      v161 = v158;
                      v162 = v160;
                      v163 = v159;
                      v164 = v153;
                      v165 = (uint64_t *)(v154[6] + 16 * v178);
                      swift_bridgeObjectRelease();
                      *v165 = v176;
                      v165[1] = v177;
                      v153 = v164;
                      v159 = v163;
                      v160 = v162;
                      v158 = v161;
                      v166 = (_OWORD *)(v154[7] + 32 * v179);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
                      outlined init with take of Any(&v219, v166);
                      v157 = v212;
                      if (!v212)
                        goto LABEL_150;
                    }
                    else
                    {
                      if (v154[2] >= v154[3])
                        goto LABEL_188;
                      *(_QWORD *)((char *)v154 + ((v178 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v178;
                      v181 = (uint64_t *)(v154[6] + 16 * v178);
                      *v181 = v176;
                      v181[1] = v177;
                      outlined init with take of Any(&v219, (_OWORD *)(v154[7] + 32 * v178));
                      v182 = v154[2];
                      v89 = __OFADD__(v182, 1);
                      v183 = v182 + 1;
                      if (v89)
                        goto LABEL_189;
                      v154[2] = v183;
                      v157 = v212;
                      if (!v212)
                        goto LABEL_150;
                    }
LABEL_149:
                    v212 = (v157 - 1) & v157;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_175:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v184 = objc_allocWithZone((Class)NSError);
    v185 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v186 = objc_msgSend(v184, sel_initWithDomain_code_userInfo_, v185, v197, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v187 = objc_msgSend(v186, sel_domain);
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
    v190 = v189;

    if (v188 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v190 != v191)
    {
      v193 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v193 & 1) != 0)
        goto LABEL_182;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_182:
    swift_willThrow();
    result = (unint64_t)v199;
    if (!v199)
      return result;
    return closedir((DIR *)result);
  }
  return result;
}

unint64_t *specialized Collection.formIndex(after:)(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  int v99;
  void (*v100)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD v119[3];
  __int128 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  __int128 *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE v154[40];
  _QWORD v155[3];
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[40];
  _BYTE v163[40];
  _OWORD v164[4];
  uint64_t v165;
  _BYTE v166[72];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD v184[4];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;

  v2 = *result;
  v3 = (_QWORD *)result[1];
  v5 = (__int128 *)result[2];
  v4 = (_QWORD *)result[3];
  v6 = *(_OWORD *)(v1 + 176);
  v191 = *(_OWORD *)(v1 + 160);
  v192 = v6;
  v7 = *(_QWORD *)(v1 + 200);
  v193 = *(_QWORD *)(v1 + 192);
  v8 = *(_OWORD *)(v1 + 112);
  v187 = *(_OWORD *)(v1 + 96);
  v188 = v8;
  v9 = *(_OWORD *)(v1 + 144);
  v189 = *(_OWORD *)(v1 + 128);
  v190 = v9;
  v10 = *(_OWORD *)(v1 + 48);
  v184[2] = *(_OWORD *)(v1 + 32);
  v184[3] = v10;
  v11 = *(_OWORD *)(v1 + 80);
  v185 = *(_OWORD *)(v1 + 64);
  v186 = v11;
  v12 = *(_OWORD *)(v1 + 16);
  v184[0] = *(_OWORD *)v1;
  v184[1] = v12;
  v183 = v7;
  if (v2 >> 10 < *((_QWORD *)&v189 + 1) >> 10 || v2 >> 10 >= *((_QWORD *)&v191 + 1) >> 10)
    goto LABEL_147;
  v13 = *(_QWORD *)(v7 + 16);
  if (!v13)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v14 = *(_QWORD *)&v184[0];
  v15 = *(_QWORD *)(*(_QWORD *)&v184[0] + 64);
  v16 = *(_QWORD *)(*(_QWORD *)&v184[0] + 80);
  v17 = v2 >> 11;
  if (v15)
    v18 = *(_QWORD *)(*(_QWORD *)&v184[0] + 80);
  else
    v18 = 0;
  if (v18 < v17)
    goto LABEL_149;
  v19 = *(_QWORD *)(*(_QWORD *)&v184[0] + 72);
  v20 = *(_QWORD *)(*(_QWORD *)&v184[0] + 88);
  v142 = *(_QWORD *)&v184[0];
  v143 = v20;
  v146 = v13;
  v126 = result;
  v127 = *((_QWORD *)&v191 + 1);
  v128 = *((_QWORD *)&v191 + 1) >> 10;
  v129 = v2 >> 10;
  v125 = v192;
  v124 = v193;
  v135 = v7;
  v149 = v4;
  v150 = v5;
  v151 = (uint64_t *)(v2 >> 11);
  v152 = v19;
  if (v15 && v17 < v16 && *(_WORD *)(v15 + 16))
  {
    v148 = v3;
    v21 = *(unsigned __int8 *)(v15 + 18);
    if (*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
      v22 = v15;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v22 + 16);
        if (!*(_WORD *)(v22 + 16))
          break;
        v26 = *(_QWORD *)(v22 + 40);
        v27 = __OFSUB__(v17, v26);
        v28 = v17 - v26;
        if (v27)
          goto LABEL_141;
        if (__OFADD__(v28, 1))
          goto LABEL_142;
        if (v28 + 1 < 1)
        {
          v25 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v25 == 1)
        {
          v17 = v28;
          break;
        }
        v29 = (uint64_t *)(v22 + 64);
        v30 = 1;
        while (1)
        {
          v31 = *v29;
          v29 += 3;
          v17 = v28 - v31;
          if (__OFSUB__(v28, v31))
            goto LABEL_138;
          if (__OFADD__(v17, 1))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if (v17 + 1 < 1)
            break;
          ++v30;
          v28 = v17;
          if (v25 == v30)
            goto LABEL_14;
        }
        v25 = v30;
        v17 = v28;
LABEL_15:
        v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
        v21 = ((-15 << v23) - 1) & v21 | (v25 << v23);
        v24 = *(_QWORD *)(v22 + 24 + 24 * v25);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v22 = v24;
        if (!*(_BYTE *)(v24 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v17)
        goto LABEL_15;
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
    v24 = v15;
LABEL_32:
    v34 = *(unsigned __int16 *)(v24 + 16);
    v33 = v24;
    if (!*(_WORD *)(v24 + 16))
      goto LABEL_45;
    v35 = *(_QWORD *)(v24 + 24);
    v27 = __OFSUB__(v17, v35);
    v36 = v17 - v35;
    if (v27)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (__OFADD__(v36, 1))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (v36 + 1 < 1)
    {
      v34 = 0;
    }
    else
    {
      if ((_DWORD)v34 == 1)
      {
        v17 = v36;
LABEL_45:
        if (v17)
        {
LABEL_162:
          __break(1u);
          return result;
        }
        goto LABEL_46;
      }
      v37 = (uint64_t *)(v24 + 48);
      v38 = 1;
      while (1)
      {
        v39 = *v37;
        v37 += 3;
        v17 = v36 - v39;
        if (__OFSUB__(v36, v39))
          goto LABEL_158;
        if (__OFADD__(v17, 1))
          goto LABEL_159;
        if (v17 + 1 < 1)
          break;
        ++v38;
        v36 = v17;
        if (v34 == v38)
          goto LABEL_45;
      }
      v34 = v38;
      v17 = v36;
    }
LABEL_46:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v32 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v34 << 8);
    v14 = v142;
    goto LABEL_30;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v184);
  v32 = specialized Rope._endPath.getter(v15);
  result = (unint64_t *)swift_unknownObjectRelease();
  v33 = 0;
  v17 = 0;
  if (v15)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v152 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v143, v32, v33, v15, v152);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v152 = 0;
LABEL_48:
  v141 = (char *)v151 - v17;
  if (__OFSUB__(v151, v17))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v40 = *(_OWORD *)(v14 + 32);
  v194 = *(_OWORD *)(v14 + 16);
  v195 = v40;
  v196 = *(_OWORD *)(v14 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0, v17))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v41 = BigString.UTF8View.index(_:offsetBy:)();
  v43 = v42;
  v45 = v44;
  v121 = v46;
  result = (unint64_t *)outlined release of Locale((uint64_t)&v182);
  v134 = *((_QWORD *)&v185 + 1);
  if (v152 >= *((uint64_t *)&v185 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  if (v143 != *(_QWORD *)(v14 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v119[1] = v45;
  v119[2] = v43;
  v123 = v41;
  v47 = *(uint64_t **)(v14 + 64);
  if (v33)
  {
    v48 = v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    v49 = *(_QWORD *)(v48 + 32);
    v50 = *(_QWORD *)(v48 + 40);
    swift_bridgeObjectRetain();
    v122 = v50;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v51 = v143;
    v52 = v143;
    v53 = v135;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v32, (uint64_t)v47);
    v49 = v54;
    v122 = v55;
    result = (unint64_t *)swift_unknownObjectRelease();
    v47 = *(uint64_t **)(v14 + 64);
    v52 = *(_QWORD *)(v14 + 88);
    v53 = v135;
    v51 = v143;
  }
  v120 = (__int128 *)(v14 + 16);
  v139 = v152 + 1;
  *(_QWORD *)&v167 = v51;
  *((_QWORD *)&v167 + 1) = v32;
  v150 = (__int128 *)&v160;
  v151 = &v170;
  *(_QWORD *)&v168 = v33;
  v133 = (uint64_t *)(v53 + 40);
  v147 = v49;
LABEL_56:
  if (v51 != v52)
    goto LABEL_143;
  v137 = v52;
  v140 = v33;
  if (v33)
  {
    v56 = *(_QWORD *)(v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v56 = specialized Rope._Node.subscript.getter(v32, (uint64_t)v47);
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v57 = &v141[v56];
  if (__OFADD__(v141, v56))
    goto LABEL_144;
  if (v47)
  {
    v58 = ((-15 << ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v47 + 18) | ((unint64_t)*((unsigned __int16 *)v47 + 8) << ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }
  else
  {
    v58 = 0;
  }
  v59 = v146;
  if (v32 >= v58)
    goto LABEL_145;
  if (v140)
  {
    v60 = (4 * *(_BYTE *)(v140 + 18) + 8) & 0x3C;
    v61 = ((v32 >> v60) & 0xF) + 1;
    if (v61 < *(unsigned __int16 *)(v140 + 16))
    {
      v138 = (v61 << v60) | ((-15 << v60) - 1) & v32;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v47 = (uint64_t *)v168;
      goto LABEL_79;
    }
  }
  v62 = *((unsigned __int8 *)v47 + 18);
  v63 = (4 * v62 + 8) & 0x3C;
  v64 = (v32 >> v63) & 0xF;
  *(_QWORD *)&v158 = v64;
  if (v62)
  {
    swift_unknownObjectRetain();
    v65 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v47 + 3), (uint64_t *)&v158, (uint64_t)&v167, (uint64_t)v47, v62);
    result = (unint64_t *)swift_unknownObjectRelease();
    v14 = v142;
    if ((v65 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v138 = *((_QWORD *)&v167 + 1);
      goto LABEL_71;
    }
  }
  else
  {
    v66 = v64 + 1;
    if (v64 + 1 < (unint64_t)*((unsigned __int16 *)v47 + 8))
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v138 = (v66 << v63) | ((-15 << v63) - 1) & v32;
      v14 = v142;
      goto LABEL_79;
    }
    v14 = v142;
  }
  if (v47)
  {
    v67 = *((unsigned __int8 *)v47 + 18);
    v68 = *((unsigned __int16 *)v47 + 8);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    v69 = (4 * v67 + 8) & 0x3C;
    v70 = ((-15 << v69) - 1) & v67;
    v71 = v68 << v69;
    v14 = v142;
    v138 = v70 | v71;
  }
  else
  {
    v138 = 0;
  }
  v47 = 0;
  *(_QWORD *)&v167 = v137;
LABEL_79:
  v72 = v147;
  if (v139 != v134)
  {
    if ((_QWORD)v167 != *(_QWORD *)(v14 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v143 = v167;
    v131 = v57;
    v132 = v32;
    v130 = (uint64_t)v47;
    if (v47)
    {
      v73 = (char *)&v47[3 * ((v138 >> ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C)) & 0xF)];
      v74 = *((_QWORD *)v73 + 4);
      v75 = *((_QWORD *)v73 + 5);
      swift_bridgeObjectRetain();
      v136 = v75;
      swift_bridgeObjectRetain();
    }
    else
    {
      v76 = *(_QWORD *)(v14 + 64);
      swift_unknownObjectRetain();
      v72 = v147;
      specialized Rope._Node.subscript.getter(v138, v76);
      v136 = v77;
      v74 = v78;
      swift_unknownObjectRelease();
    }
    result = (unint64_t *)swift_bridgeObjectRetain();
    v79 = 0;
    v80 = v133;
    v152 = v74;
    while (1)
    {
      v82 = v79 + 1;
      if (__OFADD__(v79, 1))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      v84 = *(v80 - 1);
      v83 = *v80;
      if (*(_QWORD *)(v72 + 16))
      {
        swift_bridgeObjectRetain_n();
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v83);
        if ((v86 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v72 + 56) + 72 * v85, (uint64_t)&v177);
        }
        else
        {
          v181 = 0;
          v179 = 0u;
          v180 = 0u;
          v177 = 0u;
          v178 = 0u;
        }
        swift_bridgeObjectRelease();
        v74 = v152;
        if (!*(_QWORD *)(v152 + 16))
        {
LABEL_94:
          v176 = 0;
          v174 = 0u;
          v175 = 0u;
          v172 = 0u;
          v173 = 0u;
          goto LABEL_101;
        }
      }
      else
      {
        v181 = 0;
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v74 + 16))
          goto LABEL_94;
      }
      swift_bridgeObjectRetain();
      v87 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v83);
      if ((v88 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v74 + 56) + 72 * v87, (uint64_t)&v172);
      }
      else
      {
        v176 = 0;
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v47 = (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v177, (uint64_t)&v167, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v172, (uint64_t)v151, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((_QWORD *)&v168 + 1))
      {
        if (v171)
          goto LABEL_118;
        outlined destroy of Any?((uint64_t)&v167, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v172, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?((uint64_t)&v177, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v167, (uint64_t)v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v171)
        goto LABEL_117;
      v89 = *((_OWORD *)v151 + 3);
      v164[2] = *((_OWORD *)v151 + 2);
      v164[3] = v89;
      v165 = v151[8];
      v90 = *((_OWORD *)v151 + 1);
      v164[0] = *(_OWORD *)v151;
      v164[1] = v90;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v166, (uint64_t)v163);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v164, (uint64_t)v162);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v163, (uint64_t)&v158, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v162, (uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v159)
      {
        if (!v161)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
LABEL_86:
          v81 = 0;
          goto LABEL_87;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v158, (uint64_t)v155);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v154);
        v91 = v156;
        v145 = v157;
        v144 = __swift_project_boxed_opaque_existential_1(v155, v156);
        v149 = v119;
        v92 = *(_QWORD *)(v91 - 8);
        MEMORY[0x1E0C80A78](v144);
        v94 = (char *)v119 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v154, (uint64_t)&v153);
        v95 = type metadata accessor for Optional();
        v148 = v119;
        v96 = *(_QWORD *)(v95 - 8);
        MEMORY[0x1E0C80A78](v95);
        v98 = (char *)v119 - v97;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v99 = swift_dynamicCast();
        v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
        if (v99)
        {
          v100(v98, 0, 1, v91);
          (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v94, v98, v91);
          v81 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
        }
        else
        {
          v100(v98, 1, 1, v91);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
          v81 = 0;
        }
        v59 = v146;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        v72 = v147;
      }
      else
      {
        if (v161)
        {
          outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }
        v81 = 1;
      }
LABEL_87:
      outlined destroy of Any?((uint64_t)v162, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v163, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v166);
      outlined destroy of Any?((uint64_t)&v167, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v172, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (unint64_t *)outlined destroy of Any?((uint64_t)&v177, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v81 & 1) == 0)
        goto LABEL_119;
LABEL_88:
      v80 += 2;
      ++v79;
      v74 = v152;
      if (v82 == v59)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v183);
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v14 = v142;
        v51 = v143;
        v47 = *(uint64_t **)(v142 + 64);
        v52 = *(_QWORD *)(v142 + 88);
        v141 = v131;
        *(_QWORD *)&v167 = v143;
        v32 = v138;
        *((_QWORD *)&v167 + 1) = v138;
        v33 = v130;
        *(_QWORD *)&v168 = v130;
        v27 = __OFADD__(v139++, 1);
        if (!v27)
          goto LABEL_56;
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v166);
LABEL_118:
        outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v172, v47);
        outlined destroy of Any?((uint64_t)&v177, v47);
LABEL_119:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v183);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v14 = v142;
        v32 = v132;
        goto LABEL_120;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  v101 = v123;
  if (v137 != *(_QWORD *)(v14 + 88))
    goto LABEL_154;
  if (v140)
  {
    v102 = *(_QWORD *)(v140 + 24 * ((v32 >> ((4 * *(_BYTE *)(v140 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v103 = *(_QWORD *)(v14 + 64);
    swift_unknownObjectRetain();
    v102 = specialized Rope._Node.subscript.getter(v32, v103);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v104 = &v141[v102];
  if (__OFADD__(v141, v102))
    goto LABEL_155;
  v105 = v120[1];
  v167 = *v120;
  v168 = v105;
  v169 = v120[2];
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v104, v101 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v106 = BigString.UTF8View.index(_:offsetBy:)();
  v108 = v107;
  v110 = v109;
  v112 = v111;
  outlined release of Locale((uint64_t)&v158);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v184);
  v113 = v127;
  if (v128 >= v106 >> 10)
    v113 = v106;
  if (v129 > v113 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v114 = v128 >= v106 >> 10;
  v115 = v124;
  v116 = v125;
  if (v128 >= v106 >> 10)
  {
    v115 = v112;
    v116 = v108;
  }
  v117 = v126;
  *v126 = v113;
  v117[1] = v116;
  v118 = *((_QWORD *)&v125 + 1);
  if (v114)
    v118 = v110;
  v117[2] = v118;
  v117[3] = v115;
  return result;
}

unint64_t *specialized BidirectionalCollection.formIndex(before:)(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[40];
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v145[40];
  _BYTE v146[40];
  _OWORD v147[4];
  uint64_t v148;
  _BYTE v149[72];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD v166[8];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;

  v2 = *result;
  v3 = result[1];
  v4 = result[2];
  v5 = result[3];
  v6 = *(_OWORD *)(v1 + 176);
  v169 = *(_OWORD *)(v1 + 160);
  v170 = v6;
  v7 = *(_QWORD *)(v1 + 200);
  v171 = *(_QWORD *)(v1 + 192);
  v8 = *(_OWORD *)(v1 + 112);
  v166[6] = *(_OWORD *)(v1 + 96);
  v166[7] = v8;
  v9 = *(_OWORD *)(v1 + 144);
  v167 = *(_OWORD *)(v1 + 128);
  v168 = v9;
  v10 = *(_OWORD *)(v1 + 48);
  v166[2] = *(_OWORD *)(v1 + 32);
  v166[3] = v10;
  v11 = *(_OWORD *)(v1 + 80);
  v166[4] = *(_OWORD *)(v1 + 64);
  v166[5] = v11;
  v12 = *(_OWORD *)(v1 + 16);
  v166[0] = *(_OWORD *)v1;
  v166[1] = v12;
  v125 = v7;
  v165 = v7;
  if (*((_QWORD *)&v167 + 1) >> 10 >= v2 >> 10 || *((_QWORD *)&v169 + 1) >> 10 < v2 >> 10)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v13 = *(_QWORD *)(v125 + 16);
  if (!v13)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v14 = *(_QWORD *)&v166[0];
  v15 = *(_QWORD *)(*(_QWORD *)&v166[0] + 64);
  v16 = *(_QWORD *)(*(_QWORD *)&v166[0] + 80);
  if (v15)
    v17 = *(_QWORD *)(*(_QWORD *)&v166[0] + 80);
  else
    v17 = 0;
  if (v2 < 0x800)
    goto LABEL_131;
  v18 = (v2 >> 11) - 1;
  if (v17 < v18)
    goto LABEL_131;
  v112 = v168;
  v113 = result;
  v111 = v169;
  v19 = *(_QWORD *)(*(_QWORD *)&v166[0] + 72);
  v132 = *(_QWORD *)(*(_QWORD *)&v166[0] + 88);
  v129 = v13;
  v119 = v3;
  v120 = v2;
  v117 = v5;
  v118 = v4;
  v115 = *((_QWORD *)&v167 + 1);
  v116 = *((_QWORD *)&v167 + 1) >> 10;
  v114 = v2 >> 10;
  v121 = v2 >> 11;
  v135 = v19;
  if (v15 && (uint64_t)(v2 >> 11) <= v16 && *(_WORD *)(v15 + 16))
  {
    v110 = *(_QWORD *)&v166[0];
    v20 = *(unsigned __int8 *)(v15 + 18);
    if (*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v166);
      v21 = v18;
      v22 = v15;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v22 + 16);
        if (!*(_WORD *)(v22 + 16))
          break;
        v26 = *(_QWORD *)(v22 + 40);
        v27 = __OFSUB__(v21, v26);
        v28 = v21 - v26;
        if (v27)
          goto LABEL_127;
        if (__OFADD__(v28, 1))
          goto LABEL_128;
        if (v28 + 1 < 1)
        {
          v25 = 0;
          goto LABEL_16;
        }
        if ((_DWORD)v25 == 1)
        {
          v21 = v28;
          break;
        }
        v29 = (uint64_t *)(v22 + 64);
        v30 = 1;
        while (1)
        {
          v31 = *v29;
          v29 += 3;
          v21 = v28 - v31;
          if (__OFSUB__(v28, v31))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          if (__OFADD__(v21, 1))
            goto LABEL_124;
          if (v21 + 1 < 1)
            break;
          ++v30;
          v28 = v21;
          if (v25 == v30)
            goto LABEL_15;
        }
        v25 = v30;
        v21 = v28;
LABEL_16:
        v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
        v20 = ((-15 << v23) - 1) & v20 | (v25 << v23);
        v24 = *(_QWORD *)(v22 + 24 + 24 * v25);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v22 = v24;
        if (!*(_BYTE *)(v24 + 18))
          goto LABEL_33;
      }
LABEL_15:
      if (!v21)
        goto LABEL_16;
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v166);
    v21 = v18;
    v24 = v15;
LABEL_33:
    v134 = (uint64_t *)v18;
    v35 = *(unsigned __int16 *)(v24 + 16);
    if (*(_WORD *)(v24 + 16))
    {
      v36 = *(_QWORD *)(v24 + 24);
      v27 = __OFSUB__(v21, v36);
      v37 = v21 - v36;
      v14 = v110;
      v13 = v129;
      if (v27)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      if (__OFADD__(v37, 1))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
      v33 = v24;
      if (v37 + 1 < 1)
      {
        v35 = 0;
      }
      else
      {
        if ((_DWORD)v35 == 1)
        {
          v21 = v37;
          goto LABEL_46;
        }
        v38 = (uint64_t *)(v24 + 48);
        v39 = 1;
        while (1)
        {
          v40 = *v38;
          v38 += 3;
          v21 = v37 - v40;
          if (__OFSUB__(v37, v40))
            goto LABEL_136;
          if (__OFADD__(v21, 1))
            goto LABEL_137;
          if (v21 + 1 < 1)
            break;
          ++v39;
          v37 = v21;
          if (v35 == v39)
            goto LABEL_46;
        }
        v35 = v39;
        v21 = v37;
      }
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v32 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      v18 = (uint64_t)v134;
      goto LABEL_31;
    }
    v33 = v24;
    v14 = v110;
    v13 = v129;
LABEL_46:
    if (v21)
    {
LABEL_146:
      __break(1u);
      return result;
    }
    goto LABEL_47;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v166);
  v32 = specialized Rope._endPath.getter(v15);
  result = (unint64_t *)swift_unknownObjectRelease();
  v33 = 0;
  v21 = 0;
  if (v15)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v34 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v132, v32, v33, v15, v135);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  v34 = 0;
LABEL_49:
  v124 = v18 - v21;
  if (__OFSUB__(v18, v21))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (v132 != *(_QWORD *)(v14 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v41 = v33;
  v128 = v32;
  if (v33)
  {
    v42 = v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    v44 = *(_QWORD *)(v42 + 32);
    v43 = *(_QWORD *)(v42 + 40);
    swift_bridgeObjectRetain();
    result = (unint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    v45 = *(_QWORD *)(v14 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v32, v45);
    v44 = v46;
    v43 = v47;
    result = (unint64_t *)swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v166[0] + 1) < v34)
  {
    v133 = (__int128 *)&v143;
    v134 = &v153;
    v106 = v43;
    v107 = (uint64_t *)(v125 + 40);
    v110 = v14;
    v123 = v44;
    v104 = *((_QWORD *)&v166[0] + 1);
LABEL_56:
    v122 = v34;
    v48 = *(_QWORD *)(v14 + 64);
    v49 = *(_QWORD *)(v14 + 88);
    *(_QWORD *)&v150 = v132;
    v50 = v128;
    *((_QWORD *)&v150 + 1) = v128;
    *(_QWORD *)&v151 = v41;
    if (v132 != v49)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (v48)
    {
      v51 = *(unsigned __int8 *)(v48 + 18);
      result = (unint64_t *)swift_unknownObjectRetain();
      v50 = v128;
      if (v128 <= v51)
        goto LABEL_139;
    }
    else if (!v128)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (v41)
    {
      v52 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      if (((v50 >> v52) & 0xF) != 0)
      {
        v53 = ((((v50 >> v52) & 0xF) - 1) << v52) | ((-15 << v52) - 1) & v50;
        *((_QWORD *)&v150 + 1) = v53;
LABEL_68:
        v58 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
        v128 = v53;
        v108 = v41;
        v59 = *(_QWORD *)(v41 + 24 * ((v53 >> v58) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v124, v59))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (v132 != *(_QWORD *)(v14 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v105 = v124 - v59;
        if ((v60 & 1) != 0)
        {
          v61 = *(_QWORD *)(v14 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v128, v61);
          v109 = v62;
          v64 = v63;
          swift_unknownObjectRelease();
        }
        else
        {
          v65 = v108 + 24 * ((v128 >> ((4 * *(_BYTE *)(v108 + 18) + 8) & 0x3C)) & 0xF);
          v64 = *(_QWORD *)(v65 + 32);
          v66 = *(_QWORD *)(v65 + 40);
          swift_bridgeObjectRetain();
          v109 = v66;
          swift_bridgeObjectRetain();
        }
        --v122;
        result = (unint64_t *)swift_bridgeObjectRetain();
        v67 = 0;
        v68 = v107;
        v135 = v64;
        while (1)
        {
          v70 = v67 + 1;
          if (__OFADD__(v67, 1))
            goto LABEL_125;
          v71 = *(v68 - 1);
          v72 = *v68;
          if (*(_QWORD *)(v44 + 16))
          {
            swift_bridgeObjectRetain_n();
            v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
            if ((v74 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v44 + 56) + 72 * v73, (uint64_t)&v160);
            }
            else
            {
              v164 = 0;
              v162 = 0u;
              v163 = 0u;
              v160 = 0u;
              v161 = 0u;
            }
            swift_bridgeObjectRelease();
            v64 = v135;
            if (!*(_QWORD *)(v135 + 16))
            {
LABEL_87:
              v159 = 0;
              v157 = 0u;
              v158 = 0u;
              v155 = 0u;
              v156 = 0u;
              goto LABEL_94;
            }
          }
          else
          {
            v164 = 0;
            v162 = 0u;
            v163 = 0u;
            v160 = 0u;
            v161 = 0u;
            swift_bridgeObjectRetain();
            if (!*(_QWORD *)(v64 + 16))
              goto LABEL_87;
          }
          swift_bridgeObjectRetain();
          v75 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
          if ((v76 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v64 + 56) + 72 * v75, (uint64_t)&v155);
          }
          else
          {
            v159 = 0;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v160, (uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v155, (uint64_t)v134, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((_QWORD *)&v151 + 1))
          {
            if (v154)
              goto LABEL_111;
            outlined destroy of Any?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = (unint64_t *)outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v150, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v154)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
LABEL_111:
            outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v14 = v110;
            goto LABEL_113;
          }
          v77 = *((_OWORD *)v134 + 3);
          v147[2] = *((_OWORD *)v134 + 2);
          v147[3] = v77;
          v148 = v134[8];
          v78 = *((_OWORD *)v134 + 1);
          v147[0] = *(_OWORD *)v134;
          v147[1] = v78;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v149, (uint64_t)v146);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v147, (uint64_t)v145);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v146, (uint64_t)&v141, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v145, (uint64_t)v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v142)
          {
            if (!v144)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
LABEL_79:
              v69 = 0;
              goto LABEL_80;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v141, (uint64_t)v138);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v133, (uint64_t)v137);
            v79 = v139;
            v127 = v140;
            v126 = __swift_project_boxed_opaque_existential_1(v138, v139);
            v131 = &v104;
            v80 = *(_QWORD *)(v79 - 8);
            MEMORY[0x1E0C80A78](v126);
            v82 = (char *)&v104 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v137, (uint64_t)&v136);
            v83 = type metadata accessor for Optional();
            v130 = &v104;
            v84 = *(_QWORD *)(v83 - 8);
            MEMORY[0x1E0C80A78](v83);
            v86 = (char *)&v104 - v85;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            v87 = swift_dynamicCast();
            v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
            if (v87)
            {
              v88(v86, 0, 1, v79);
              (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v82, v86, v79);
              v69 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
            }
            else
            {
              v88(v86, 1, 1, v79);
              (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v83);
              v69 = 0;
            }
            v44 = v123;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
            v13 = v129;
          }
          else
          {
            if (v144)
            {
              outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }
            v69 = 1;
          }
LABEL_80:
          outlined destroy of Any?((uint64_t)v145, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v146, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
          outlined destroy of Any?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          result = (unint64_t *)outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v69 & 1) == 0)
            goto LABEL_112;
LABEL_81:
          v68 += 2;
          ++v67;
          v64 = v135;
          if (v70 == v13)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
            swift_bridgeObjectRelease();
            result = (unint64_t *)swift_bridgeObjectRelease();
            v124 = v105;
            v34 = v122;
            v14 = v110;
            v41 = v108;
            if (v104 < v122)
              goto LABEL_56;
            v89 = v105;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v124 = v89;
            goto LABEL_113;
          }
        }
      }
    }
    v54 = *(unsigned __int8 *)(v48 + 18);
    v55 = (4 * v54 + 8) & 0x3C;
    v56 = (v50 >> v55) & 0xF;
    *(_QWORD *)&v141 = v56;
    if (v54)
    {
      swift_unknownObjectRetain();
      v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v48 + 16, v48 + 24, (uint64_t *)&v141, (uint64_t)&v150, v54);
      result = (unint64_t *)swift_unknownObjectRelease();
      if ((v57 & 1) != 0)
      {
        if ((_QWORD)v150 != v132)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v41 = v151;
        v53 = *((_QWORD *)&v150 + 1);
        v13 = v129;
        if ((_QWORD)v151)
          goto LABEL_68;
        goto LABEL_71;
      }
    }
    else if (v56)
    {
      v53 = ((v56 - 1) << v55) | ((-15 << v55) - 1) & v50;
      *((_QWORD *)&v150 + 1) = v53;
      *(_QWORD *)&v151 = v48;
      v41 = v48;
      if (v48)
        goto LABEL_68;
LABEL_71:
      swift_unknownObjectRetain();
      v128 = v53;
      v59 = specialized Rope._Node.subscript.getter(v53, v48);
      swift_unknownObjectRelease();
      v108 = 0;
      v60 = 1;
      goto LABEL_72;
    }
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  v90 = *(_OWORD *)(v14 + 32);
  v150 = *(_OWORD *)(v14 + 16);
  v151 = v90;
  v152 = *(_OWORD *)(v14 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v124, v121))
    goto LABEL_134;
  v91 = BigString.UTF8View.index(_:offsetBy:)();
  v93 = v92;
  v95 = v94;
  v97 = v96;
  outlined release of Locale((uint64_t)&v141);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v166);
  v98 = v115;
  if (v116 < v91 >> 10)
    v98 = v91;
  if (v114 < v98 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v99 = v116 >= v91 >> 10;
  v100 = v111;
  v101 = v112;
  if (v116 < v91 >> 10)
  {
    v100 = v97;
    v101 = v93;
  }
  v102 = v113;
  *v113 = v98;
  v102[1] = v101;
  v103 = *((_QWORD *)&v112 + 1);
  if (!v99)
    v103 = v95;
  v102[2] = v103;
  v102[3] = v100;
  return result;
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance _FoundationPlusScope<A>()
{
  return static AttributeScope.decodingConfiguration.getter();
}

uint64_t static AttributeScope.decodingConfiguration.getter@<X0>(Swift::UInt a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t result;

  v4 = static AttributeScope.scopeDescription.getter(a1, a2);
  result = swift_bridgeObjectRelease();
  *a3 = v4;
  return result;
}

uint64_t protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance _FoundationPlusScope<A>(uint64_t a1)
{
  return static AttributeScope.decodingConfiguration.getter(a1, &protocol witness table for _FoundationPlusScope<A>);
}

uint64_t specialized Rope.index(before:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  _QWORD v9[3];

  v9[0] = result;
  v9[1] = a2;
  v9[2] = a3;
  if (result != a7)
    goto LABEL_11;
  if (!a4)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(a4 + 18) >= a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_4:
  if (!a3 || ((a2 >> ((4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C)) & 0xF) == 0)
  {
    swift_unknownObjectRetain();
    v8 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a4);
    result = swift_unknownObjectRelease();
    if ((v8 & 1) != 0)
      return v9[0];
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes((uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter, a1);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v31 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  MEMORY[0x1E0C80A78](v5);
  v28 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  v32 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  v17 = v31;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v17)
  {
    case 11:
      v37 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      v18 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
    case 10:
      v34 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
    case 9:
      v33 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
  }
  v36 = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
  v20 = v28;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v35 = v17;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
  v21 = v30;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
}

void specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;

  v5 = BYTE4(a3);
  v12[5] = a2;
  v12[9] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v12[7] = *(_QWORD *)(v6 - 8);
  v12[8] = v6;
  MEMORY[0x1E0C80A78](v6);
  v12[6] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  v12[3] = *(_QWORD *)(v8 - 8);
  v12[4] = v8;
  MEMORY[0x1E0C80A78](v8);
  v12[2] = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v12[0] = *(_QWORD *)(v10 - 8);
  v12[1] = v10;
  MEMORY[0x1E0C80A78](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  MEMORY[0x1E0C80A78](v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v12[10] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }
}

uint64_t sub_181EB8178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 100) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  v5 = *(_QWORD *)(v4 - 112);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v0, v5);
}

void *specialized static EncodableAttributedStringKey<>.encode(_:to:)(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *result;
  id v14;
  void *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v12 = a1;
  swift_retain();
  result = (void *)_foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v14 = objc_msgSend(v12, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    swift_release();
    swift_release();

  }
  LOBYTE(v17) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16[0] = v12;
    v16[1] = a2;
    v16[2] = a3;
    URL.baseURL.getter((uint64_t *)&v17);
    v15 = v17;
    if (v17)
    {
      LOBYTE(v16[0]) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
      return outlined consume of URL?(v15);
    }
    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    }
  }
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v11[40];
  _BYTE v12[40];
  _BYTE v13[40];
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v13, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    v14 = 4;
    lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(a1 + 72, (uint64_t)v12, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    v14 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  if (a2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }
  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v14 = a2;
  v8 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 == 3
    || (LOBYTE(v17) = a1,
        v16 = 0,
        lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v4))
  {
    if (a3 == 14
      || (LOBYTE(v17) = a3,
          v16 = 1,
          lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v4))
    {
      if (BYTE1(a1) == 14
        || (LOBYTE(v17) = BYTE1(a1),
            v16 = 2,
            lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v4))
      {
        if (BYTE2(a1) == 6
          || (LOBYTE(v17) = BYTE2(a1),
              v16 = 3,
              lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
              KeyedEncodingContainer.encode<A>(_:forKey:)(),
              !v4))
        {
          if (!*(_QWORD *)(v14 + 16)
            || (v17 = v14,
                v16 = 4,
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
                lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]), KeyedEncodingContainer.encode<A>(_:forKey:)(), !v4))
          {
            if (BYTE1(a3) == 3
              || (LOBYTE(v17) = BYTE1(a3),
                  v16 = 5,
                  lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson(),
                  KeyedEncodingContainer.encode<A>(_:forKey:)(),
                  !v4))
            {
              if (BYTE2(a3) == 3
                || (LOBYTE(v17) = BYTE2(a3),
                    v16 = 6,
                    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType(),
                    KeyedEncodingContainer.encode<A>(_:forKey:)(),
                    !v4))
              {
                if ((a3 & 0xFF000000) == 0x2000000
                  || (LOBYTE(v17) = BYTE3(a3) & 1,
                      v16 = 7,
                      lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination(),
                      KeyedEncodingContainer.encode<A>(_:forKey:)(),
                      !v4))
                {
                  if ((a3 & 0xFF00000000) != 0x200000000)
                  {
                    LOBYTE(v17) = BYTE4(a3) & 1;
                    v16 = 8;
                    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
                    KeyedEncodingContainer.encode<A>(_:forKey:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, v9);
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of Encodable.encode(to:)();
}

void protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  int v11;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  int v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v20);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v22 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9 = v19;
    v22 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = v19;
    v22 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v11 = v19;
    v22 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    v22 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v18 = v11;
    if (v19)
      v13 = v19;
    else
      v13 = MEMORY[0x1E0DEE9E0];
    v22 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v17 = v19;
    v22 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v16 = v19;
    v22 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v15 = v19;
    v22 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v19;
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 1) = v18;
    *(_BYTE *)(a2 + 2) = v21;
    *(_QWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 17) = v17;
    *(_BYTE *)(a2 + 18) = v16;
    *(_BYTE *)(a2 + 19) = v15;
    *(_BYTE *)(a2 + 20) = v14;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v28 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  v24 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  v20[2] = *(_QWORD *)(v5 - 8);
  v20[3] = v5;
  MEMORY[0x1E0C80A78](v5);
  v26 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v30[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v20[0] = v8;
    v20[1] = v7;
    v29 = 0;
    v14 = v10;
    v15 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v15 + 16) == 1)
      __asm { BR              X10 }
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v18 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC450], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD v38[4];

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  v31 = v4;
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  v29 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v34 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  MEMORY[0x1E0C80A78](v7);
  v33 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v38);
  __swift_project_boxed_opaque_existential_1(v38, v38[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v25[3] = v12;
    v25[1] = v10;
    v25[2] = v9;
    v25[4] = 0;
    v26 = v14;
    v37 = v16;
    v18 = KeyedDecodingContainer.allKeys.getter();
    v19 = v13;
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v22 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    v23 = v37;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC450], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  _QWORD v28[4];
  int v29;
  char v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 2;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 3;
    v23 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = 4;
    v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = *((_QWORD *)&v25 + 1);
    v22 = v25;
    v19 = *((_QWORD *)&v26 + 1);
    v20 = v26;
    v29 = v27;
    v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v27;
    v14 = v25;
    v15 = v26;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    v16 = v23;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v16;
    v17 = v21;
    *(_QWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 40) = v17;
    v18 = v19;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v18;
    *(_BYTE *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v14;
    *(_OWORD *)(a2 + 88) = v15;
    *(_BYTE *)(a2 + 104) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

void specialized static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24[3];
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_1(v28, v29);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    goto LABEL_3;
  LOBYTE(v25) = 1;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  LOBYTE(v24[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v31 = v25;
  v24[0] = v25;
  v24[1] = v26;
  v23 = v27;
  v24[2] = v27;
  URL.init(string:relativeTo:)(v9, v11, v24, (uint64_t *)&v25);
  swift_bridgeObjectRelease();
  v12 = v25;
  if (!v25)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v17;
    v19 = v29;
    v18 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    MEMORY[0x186DA5FB4](v19, v18);
    v20 = v22;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v20, *MEMORY[0x1E0DEC458], v16);
    swift_willThrow();
    outlined consume of URL?(v31);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    return;
  }
  v14 = v26;
  v13 = v27;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v31);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  swift_release();
  swift_release();

}

void sub_181EB9E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 - 148) = 1;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  v1 = *(_QWORD *)(v0 - 192);
  v2 = *(_QWORD *)(v0 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181EB9DE0);
  }
  v3 = *(_QWORD *)(v0 - 232);
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 240) + 8))(v1, v3);
  swift_bridgeObjectRelease();
  JUMPOUT(0x181EB9FD4);
}

void sub_181EB9E78()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 - 192) = v0;
  *(_BYTE *)(v5 - 148) = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  v6 = *(_QWORD *)(v5 - 160);
  v7 = *(_QWORD *)(v5 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v7)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181EB9DE4);
  }
  KeyedDecodingContainer.decode(_:forKey:)();
  v8 = *(_QWORD *)(v5 - 248);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v4, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v2);
  v11 = *(_QWORD *)(v5 - 200);
  *(_QWORD *)v11 = v10;
  *(_QWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = v1;
  JUMPOUT(0x181EB9DE8);
}

void sub_181EB9EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 - 192) = v0;
  *(_BYTE *)(v3 - 148) = 3;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v4, v1);
    JUMPOUT(0x181EB9DE8);
  }
  type metadata accessor for NSDecimal(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
  v6 = *(_QWORD *)(v3 - 216);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v7 = *(_QWORD *)(v3 - 248);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 208) + 8))(v2, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v1);
  JUMPOUT(0x181EBA138);
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

{
  uint64_t v2;
  uint64_t Default;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[40];
  uint64_t v9;

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v8, (uint64_t)v7);
  v6 = Default;
  AttributedString.init(from:configuration:)(v7, &v6, &v9);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
    *a2 = v9;
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v11[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v11);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1)
{
  _BYTE v3[40];

  swift_getAssociatedTypeWitness();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v3);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return Int.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  result = Int.init(from:)();
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t static MarkdownDecodableAttributedStringKey<>.decodeMarkdown(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(unsigned __int16 *a1, _QWORD *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(a1, a2);
}

{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1, _QWORD *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[5];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return InflectionRule.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return Bool.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1)
{
  _QWORD v2[5];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(v2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return String.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  result = String.init(from:)();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  _BYTE v7[40];

  v5 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v7);
  a4(v5);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes((uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter, a1);
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD v4[5];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = *a1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a2, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  type metadata accessor for NSInlinePresentationIntent(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[40];
  uint64_t v7;

  type metadata accessor for NSInlinePresentationIntent(0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
  result = dispatch thunk of Decodable.init(from:)();
  if (!v2)
    *a2 = v7;
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t *a1, _QWORD *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(_OWORD *a1, _QWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  _OWORD v7[2];

  v2 = a1[5];
  v6[4] = a1[4];
  v7[0] = v2;
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 89);
  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)((uint64_t)v6, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute(unsigned __int8 *a1, _QWORD *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

void protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute(uint64_t a1, _QWORD *a2)
{
  specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute(uint64_t a1, _QWORD *a2)
{
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
  lazy protocol witness table accessor for type Date and conformance Date();
  return Range<>.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  lazy protocol witness table accessor for type Date and conformance Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  return Range<>.init(from:)();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(uint64_t a1, _QWORD *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t AttributedString.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5[2];

  v3 = *v1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttributedString.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1936618866;
  if (*v1)
    v2 = 0x7475626972747461;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xEE00656C62615465;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 1936618866;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AttributedString.AttributeKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = dispatch thunk of CustomStringConvertible.description.getter();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.AttributeKey()
{
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.AttributeKey()
{
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributedString(_QWORD *a1, uint64_t *a2)
{
  return AttributedString.encode(to:configuration:)(a1, a2);
}

unint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributedString@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return AttributedString.init(from:configuration:)(a1, a2, a3);
}

uint64_t AttributeContainer.encode(to:configuration:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50[40];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[48];
  uint64_t v57;

  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a2;
  v8 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  v44 = v6;
  v9 = (_QWORD *)v8;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v8 + 64;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v8 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  v15 = 0;
  v43 = v9;
  v42 = v7;
  v47 = v10;
  v46 = v14;
  while (1)
  {
    while (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      if (*(_QWORD *)(v7 + 16))
      {
LABEL_21:
        v21 = (uint64_t *)(v9[6] + 16 * v17);
        v23 = *v21;
        v22 = v21[1];
        swift_bridgeObjectRetain();
        v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
        if ((v25 & 1) != 0)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v24);
          v27 = swift_conformsToProtocol2();
          if (v27)
            v28 = v26;
          else
            v28 = 0;
          if (v27)
            v29 = v27;
          else
            v29 = 0;
          if (v28)
          {
            *(_QWORD *)&v51 = v23;
            *((_QWORD *)&v51 + 1) = v22;
            *(_QWORD *)&v52 = 0;
            BYTE8(v52) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            v30 = *(_QWORD *)(v29 + 8);
            AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            v49 = &v41;
            v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
            v32 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
            v34 = (char *)&v41 - v33;
            v35 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 24))(v28, v30, v32);
            if (v9[2] && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36), (v38 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue(v9[7] + 72 * v37, (uint64_t)&v51);
            }
            else
            {
              v55 = 0;
              v53 = 0u;
              v54 = 0u;
              v51 = 0u;
              v52 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v52 + 1))
              goto LABEL_47;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v51, (uint64_t)v50);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v51);
            v39 = v57;
            (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(v29 + 16))(v34, v56, v28, v29);
            v57 = v39;
            if (v39)
            {
              (*(void (**)(char *, uint64_t))(v48 + 8))(v34, AssociatedTypeWitness);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v45);
            }
            (*(void (**)(char *, uint64_t))(v48 + 8))(v34, AssociatedTypeWitness);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
            v9 = v43;
            v7 = v42;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v10 = v47;
          v14 = v46;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v15 >= v14)
      goto LABEL_42;
    v19 = *(_QWORD *)(v10 + 8 * v15);
    if (!v19)
      break;
LABEL_20:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_21;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v14)
    goto LABEL_42;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v15 + 2;
  if (v15 + 2 >= v14)
    goto LABEL_42;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v15 + 3;
  if (v15 + 3 >= v14)
    goto LABEL_42;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v15 + 4;
  if (v15 + 4 >= v14)
  {
LABEL_42:
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v45);
  }
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_19:
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v14)
      goto LABEL_42;
    v19 = *(_QWORD *)(v10 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = outlined destroy of Any?((uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  __break(1u);
  return result;
}

uint64_t AttributeContainer.init(from:configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  char *v39;
  void (*v40)(char *, __n128);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  char *v46;
  uint64_t v47;
  __n128 v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t, __n128);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[32];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v61 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
LABEL_2:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v73 = 0;
    v58 = v7;
    v84 = MEMORY[0x1E0DEE9E0];
    v85 = MEMORY[0x1E0DEE9E8];
    v64 = v6;
    v63 = v9;
    v12 = KeyedDecodingContainer.allKeys.getter();
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v57 = a1;
      v14 = (_BYTE *)(v12 + 56);
      v65 = v10;
      v60 = v12;
      while (1)
      {
        if (*(_QWORD *)(v10 + 16))
        {
          v16 = *((_QWORD *)v14 - 3);
          v15 = *((_QWORD *)v14 - 2);
          v17 = *((_QWORD *)v14 - 1);
          v18 = *v14;
          swift_bridgeObjectRetain_n();
          v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
          if ((v20 & 1) != 0)
          {
            v74 = v17;
            v21 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v19);
            swift_bridgeObjectRelease();
            v22 = swift_conformsToProtocol2();
            if (v22)
            {
              v23 = v22;
            }
            else
            {
              v21 = 0;
              v23 = 0;
            }
            if (v21)
            {
              v70 = *(_QWORD *)(v23 + 8);
              v24 = v18;
              AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              v26 = type metadata accessor for Optional();
              v72 = &v57;
              v86 = v26;
              v75 = *(_QWORD *)(v26 - 8);
              v27 = *(_QWORD *)(v75 + 64);
              MEMORY[0x1E0C80A78](v26);
              v28 = v15;
              v30 = (char *)&v57 - v29;
              *(_QWORD *)&v76 = v16;
              *((_QWORD *)&v76 + 1) = v28;
              v71 = v28;
              *(_QWORD *)&v77 = v74;
              BYTE8(v77) = v24;
              v31 = v73;
              KeyedDecodingContainer.superDecoder(forKey:)();
              if (v31)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v58 + 8))(v63, v64);
                a1 = v57;
                goto LABEL_2;
              }
              (*(void (**)(__int128 *, uint64_t, uint64_t))(v23 + 16))(&v79, v21, v23);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
              v73 = 0;
              v32 = AssociatedTypeWitness;
              v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, AssociatedTypeWitness);
              v34 = v70;
              v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 24))(v21, v70);
              v69 = v35;
              v67 = &v57;
              v36 = *(_QWORD *)(v33 + 64);
              MEMORY[0x1E0C80A78](v68);
              v62 = (char *)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
              v66 = &v57;
              v38 = MEMORY[0x1E0C80A78](v37);
              v39 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
              v40 = *(void (**)(char *, __n128))(v75 + 16);
              v74 = v41;
              v40(v39, v38);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v39, 1, v32) == 1)
              {
                v42 = v75;
                v43 = v86;
                (*(void (**)(char *, uint64_t))(v75 + 8))(v39, v86);
                v83 = 0;
                v81 = 0u;
                v82 = 0u;
                v79 = 0u;
                v80 = 0u;
                v44 = v42;
              }
              else
              {
                v45 = *(uint64_t (**)(void))(v33 + 32);
                v59 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
                v46 = v62;
                v47 = v45();
                v66 = &v57;
                v48 = MEMORY[0x1E0C80A78](v47);
                v49 = (char *)&v57 - v59;
                v50 = *(void (**)(char *, char *, uint64_t, __n128))(v33 + 16);
                v50((char *)&v57 - v59, v46, v32, v48);
                *((_QWORD *)&v77 + 1) = v32;
                *(_QWORD *)v78 = swift_getAssociatedConformanceWitness();
                boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
                ((void (*)(uint64_t *, char *, uint64_t))v50)(boxed_opaque_existential_1, v49, v32);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v34 + 32))(&v79, v21, v34);
                *(_OWORD *)&v78[8] = v79;
                v78[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 40))(v21, v34) & 1;
                v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 48))(v21, v34);
                v53 = *(void (**)(char *, uint64_t))(v33 + 8);
                v53(v49, v32);
                v83 = v52;
                v81 = *(_OWORD *)v78;
                v82 = *(_OWORD *)&v78[16];
                v79 = v76;
                v80 = v77;
                v53(v46, v32);
                v43 = v86;
                v44 = v75;
              }
              specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v79, v68, v69);
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v74, v43);
              swift_bridgeObjectRelease();
              v10 = v65;
            }
            else
            {
              swift_bridgeObjectRelease();
              v10 = v65;
            }
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }
        }
        v14 += 32;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          v54 = v84;
          v55 = v85;
          a1 = v57;
          goto LABEL_21;
        }
      }
    }
    swift_bridgeObjectRelease();
    v54 = MEMORY[0x1E0DEE9E0];
    v55 = MEMORY[0x1E0DEE9E8];
LABEL_21:
    v56 = v61;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v63, v64);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    result = swift_bridgeObjectRelease();
    *v56 = v54;
    v56[1] = v55;
  }
  return result;
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributeContainer(_QWORD *a1, uint64_t *a2)
{
  return AttributeContainer.encode(to:configuration:)(a1, a2);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributeContainer@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return AttributeContainer.init(from:configuration:)(a1, a2, a3);
}

uint64_t CodableConfiguration<>.init(wrappedValue:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
}

_WORD *specialized closure #1 in static Rope._Node.createInner(children:_:)(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = (unsigned __int16)*result;
  v9 = (_QWORD *)(a2 + 24 * (unsigned __int16)*result);
  *v9 = a3;
  v9[1] = a4;
  v9[2] = a5;
  if (v8 == 0xFFFF)
  {
    __break(1u);
  }
  else
  {
    v10 = (_QWORD *)(a2 + 24 * (v8 + 1));
    *v10 = a6;
    v10[1] = a7;
    v10[2] = a8;
    if (v8 != 65534)
    {
      *result = v8 + 2;
      swift_unknownObjectRetain();
      return (_WORD *)swift_unknownObjectRetain();
    }
  }
  __break(1u);
  return result;
}

uint64_t *specialized closure #2 in Rope._Node.append(_:)(_WORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *result;
  unint64_t v9;
  uint64_t v10;

  v4 = (unsigned __int16)*a1;
  v5 = a2 + 24 * v4;
  v7 = *(_QWORD *)(v5 - 24);
  v6 = (uint64_t *)(v5 - 24);
  result = v6 - 3;
  v9 = *(unsigned __int16 *)(v7 + 16) + (unint64_t)*(unsigned __int16 *)(*(v6 - 3) + 16);
  if (v9 <= 0xF)
  {
    v10 = v4 - 1;
    specialized static Rope._Node.redistributeChildren(_:_:to:)(result, v6, v9);
    specialized Rope._UnsafeHandle._removeChild(at:)(v10, a1, a2);
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

unint64_t specialized BidirectionalCollection._distance(from:to:)(unint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int v117;
  void (*v118)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _BYTE *v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  __int128 *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _BYTE v170[40];
  _QWORD v171[3];
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE v178[40];
  _BYTE v179[40];
  _OWORD v180[4];
  uint64_t v181;
  _BYTE v182[72];
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[24];
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _OWORD v206[4];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;

  v199 = result;
  v200 = a2;
  v201 = a3;
  v202 = a4;
  v6 = a5 >> 10;
  if (result >> 10 < a5 >> 10)
  {
    v7 = *(_QWORD *)(v5 + 200);
    v215 = *(_QWORD *)(v5 + 192);
    v8 = *(_OWORD *)(v5 + 48);
    v206[2] = *(_OWORD *)(v5 + 32);
    v206[3] = v8;
    v9 = *(_OWORD *)(v5 + 112);
    v209 = *(_OWORD *)(v5 + 96);
    v210 = v9;
    v10 = *(_OWORD *)(v5 + 80);
    v207 = *(_OWORD *)(v5 + 64);
    v208 = v10;
    v11 = *(_OWORD *)(v5 + 176);
    v213 = *(_OWORD *)(v5 + 160);
    v214 = v11;
    v12 = *(_OWORD *)(v5 + 144);
    v211 = *(_OWORD *)(v5 + 128);
    v212 = v12;
    v13 = *(_OWORD *)(v5 + 16);
    v206[0] = *(_OWORD *)v5;
    v206[1] = v13;
    v205 = v7;
    v141 = *(_QWORD *)(v7 + 16);
    if (!v141)
    {
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }
    v137 = *((_QWORD *)&v213 + 1);
    v138 = *((_QWORD *)&v211 + 1) >> 10;
    v14 = *((_QWORD *)&v213 + 1) >> 10;
    v15 = *(_QWORD **)&v206[0];
    v151 = 0;
    v152 = *((_QWORD *)&v207 + 1);
    v148 = (__int128 *)(*(_QWORD *)&v206[0] + 16);
    v134 = (_QWORD *)v214;
    v135 = a5 >> 10;
    v16 = v187;
    v166 = (__int128 *)&v176;
    v139 = (uint64_t *)(v7 + 40);
    v140 = v7;
    v132 = v215;
    v133 = *((_QWORD *)&v214 + 1);
    v136 = *((_QWORD *)&v213 + 1) >> 10;
    v159 = *(_QWORD **)&v206[0];
    v161 = v187;
    while (2)
    {
      v17 = __OFADD__(v151++, 1);
      if (v17)
        goto LABEL_203;
      if (result >> 10 < v138 || result >> 10 >= v14)
        goto LABEL_204;
      v18 = v15[8];
      v19 = v15[10];
      v20 = result >> 11;
      if (v18)
        v21 = v15[10];
      else
        v21 = 0;
      if (v21 < v20)
        goto LABEL_205;
      v22 = v15[9];
      v160 = v15[11];
      v147 = result >> 10;
      v167 = a4;
      v168 = result;
      v164 = a3;
      v165 = a2;
      v163 = v22;
      if (!v18 || v20 >= v19 || !*(_WORD *)(v18 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)v206);
        v35 = specialized Rope._endPath.getter(v18);
        result = swift_unknownObjectRelease();
        v36 = 0;
        v24 = 0;
        if (!v18)
        {
          v37 = 0;
LABEL_68:
          v158 = v20 - v24;
          if (__OFSUB__(v20, v24))
          {
LABEL_206:
            __break(1u);
            goto LABEL_207;
          }
          v45 = v148[1];
          v219 = *v148;
          v220 = v45;
          v221 = v148[2];
          result = BigString.utf8.getter();
          if (__OFSUB__(0, v24))
          {
LABEL_207:
            __break(1u);
            goto LABEL_208;
          }
          v46 = BigString.UTF8View.index(_:offsetBy:)();
          v48 = v47;
          v144 = v50;
          v145 = v49;
          result = outlined release of Locale((uint64_t)&v203);
          if (v37 >= v152)
          {
LABEL_208:
            __break(1u);
            goto LABEL_209;
          }
          if (v160 != v15[11])
          {
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
            goto LABEL_219;
          }
          v164 = v35;
          v142 = v48;
          v143 = v46;
          v51 = v15[8];
          if (v36)
          {
            v52 = v164;
            v53 = v36 + 24 * ((v164 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF);
            v54 = v15[8];
            v55 = v37;
            v56 = *(_QWORD *)(v53 + 40);
            v168 = *(_QWORD *)(v53 + 32);
            swift_bridgeObjectRetain();
            v146 = v56;
            v37 = v55;
            v57 = v54;
            v15 = v159;
            result = swift_bridgeObjectRetain();
            v58 = v160;
            v59 = v160;
          }
          else
          {
            swift_unknownObjectRetain();
            v52 = v164;
            specialized Rope._Node.subscript.getter(v164, v51);
            v168 = v60;
            v146 = v61;
            result = swift_unknownObjectRelease();
            v57 = v15[8];
            v59 = v15[11];
            v58 = v160;
          }
          v183 = v58;
          v184 = v52;
          v157 = v37 + 1;
          v185 = v36;
LABEL_76:
          if (v58 != v59)
            goto LABEL_197;
          v153 = v59;
          if (v36)
          {
            v62 = *(_QWORD *)(v36 + 24 * ((v164 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            v62 = specialized Rope._Node.subscript.getter(v164, v57);
          }
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if (__OFADD__(v158, v62))
            goto LABEL_198;
          v150 = v158 + v62;
          if (v57)
          {
            v63 = ((-15 << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v57 + 18) | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C));
            result = swift_unknownObjectRetain();
          }
          else
          {
            v63 = 0;
          }
          v64 = v164;
          if (v164 >= v63)
            goto LABEL_199;
          v155 = v36;
          if (v36)
          {
            v65 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
            v66 = ((v164 >> v65) & 0xF) + 1;
            if (v66 < *(unsigned __int16 *)(v36 + 16))
            {
              v156 = (v66 << v65) | ((-15 << v65) - 1) & v164;
              v184 = v156;
LABEL_108:
              result = swift_unknownObjectRelease_n();
              v57 = v185;
              goto LABEL_109;
            }
          }
          v67 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
          v68 = (v164 >> v67) & 0xF;
          if (*(_BYTE *)(v57 + 18))
          {
            v69 = *(_QWORD *)(v57 + 24 + 24 * ((v164 >> v67) & 0xF));
            v70 = (4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C;
            v71 = (v164 >> v70) & 0xF;
            if (*(_BYTE *)(v69 + 18))
            {
              v72 = *(_QWORD *)(v69 + 24 + 24 * ((v164 >> v70) & 0xF));
              v73 = *(unsigned __int8 *)(v72 + 18);
              v74 = (4 * v73 + 8) & 0x3C;
              *(_QWORD *)&v174 = (v164 >> v74) & 0xF;
              if (v73)
              {
                v165 = (uint64_t *)(v69 + 24);
                v167 = v57 + 24;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                v75 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v72 + 24, (uint64_t *)&v174, (uint64_t)&v183, v72, v73);
                result = swift_unknownObjectRelease();
                if ((v75 & 1) != 0)
                {
                  v156 = v184;
                  v64 = v164;
LABEL_99:
                  swift_unknownObjectRelease();
                  v15 = v159;
                  v16 = v161;
                  goto LABEL_100;
                }
              }
              else
              {
                v76 = ((v164 >> v74) & 0xF) + 1;
                if (v76 < *(unsigned __int16 *)(v72 + 16))
                {
                  v156 = (v76 << v74) | ((-15 << v74) - 1) & v164;
                  v184 = v156;
                  v185 = v72;
                  v64 = v164;
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  goto LABEL_99;
                }
                v165 = (uint64_t *)(v69 + 24);
                v167 = v57 + 24;
                swift_unknownObjectRetain();
                result = swift_unknownObjectRetain();
              }
              v77 = v71 + 1;
              if (v71 + 1 < *(unsigned __int16 *)(v69 + 16))
              {
                v78 = v165[3 * v77];
                v79 = *(unsigned __int8 *)(v78 + 18);
                v15 = v159;
                if ((((v79 + 1) >> 8) & 1) != 0)
                  goto LABEL_223;
                v80 = (v184 & ((-15 << v70) - 1) | (v77 << v70)) & ((-256 << (4 * ((v79 + 1) & 0xFu))) | 0xFF);
                v184 = v80;
                v156 = v80;
                if (v79)
                {
                  v81 = (v80 >> ((4 * v79 + 8) & 0x3C)) & 0xF;
                  swift_unknownObjectRetain();
                  v82 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v78 + 24, v81, v80);
                  swift_unknownObjectRelease();
                  v78 = v82;
                }
                v16 = v161;
                v36 = v155;
                v185 = v78;
                swift_unknownObjectRelease();
                v64 = v164;
                goto LABEL_108;
              }
              result = swift_unknownObjectRelease();
              v15 = v159;
              v64 = v164;
            }
            else
            {
              if (v71 + 1 < *(unsigned __int16 *)(v69 + 16))
              {
                v156 = ((v71 + 1) << v70) | ((-15 << v70) - 1) & v164;
                v184 = v156;
                v185 = v69;
                swift_unknownObjectRetain();
                v15 = v159;
                v16 = v161;
LABEL_100:
                v36 = v155;
                goto LABEL_108;
              }
              v167 = v57 + 24;
              result = swift_unknownObjectRetain();
              v15 = v159;
            }
            v84 = v68 + 1;
            if (v68 + 1 < *(unsigned __int16 *)(v57 + 16))
            {
              v85 = *(_QWORD *)(v167 + 24 * v84);
              v86 = *(unsigned __int8 *)(v85 + 18);
              if ((((v86 + 1) >> 8) & 1) != 0)
                goto LABEL_222;
              v87 = (v184 & ((-15 << v67) - 1) | (v84 << v67)) & ((-256 << (4 * ((v86 + 1) & 0xFu))) | 0xFF);
              v184 = v87;
              v16 = v161;
              v156 = v87;
              if (v86)
              {
                v88 = (v87 >> ((4 * v86 + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                v89 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v85 + 24, v88, v87);
                swift_unknownObjectRelease();
                v85 = v89;
              }
              v36 = v155;
              result = swift_unknownObjectRelease_n();
              v83 = v168;
              v57 = v85;
              goto LABEL_121;
            }
            result = swift_unknownObjectRelease();
          }
          else if (v68 + 1 < *(unsigned __int16 *)(v57 + 16))
          {
            result = swift_unknownObjectRelease_n();
            v156 = ((v68 + 1) << v67) | ((-15 << v67) - 1) & v64;
            v16 = v161;
            v36 = v155;
LABEL_109:
            v83 = v168;
LABEL_121:
            if (v157 == v152)
            {
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
LABEL_162:
              if (v153 != v15[11])
                goto LABEL_210;
              if (v36)
              {
                v119 = *(_QWORD *)(v36 + 24 * ((v64 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v120 = v159[8];
                swift_unknownObjectRetain();
                v119 = specialized Rope._Node.subscript.getter(v64, v120);
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v121 = v158 + v119;
              if (__OFADD__(v158, v119))
                goto LABEL_211;
              v122 = v148[1];
              v216 = *v148;
              v217 = v122;
              v218 = v148[2];
              BigString.utf8.getter();
              result = v143;
              if (__OFSUB__(v121, v143 >> 11))
                goto LABEL_212;
              v123 = BigString.UTF8View.index(_:offsetBy:)();
              v125 = v124;
              v127 = v126;
              v129 = v128;
              outlined release of Locale((uint64_t)&v204);
              outlined release of AttributedString.Runs((uint64_t)v206);
              v130 = v123 >> 10;
              v14 = v136;
              if (v136 >= v123 >> 10)
                result = v123;
              else
                result = v137;
              if (result >> 10 >= v147)
              {
                if (v136 >= v130)
                  a4 = v129;
                else
                  a4 = v132;
                if (v136 >= v130)
                  a2 = v125;
                else
                  a2 = v134;
                v199 = result;
                v200 = a2;
                if (v136 >= v130)
                  a3 = v127;
                else
                  a3 = v133;
                v201 = a3;
                v202 = a4;
                v15 = v159;
                if (result >> 10 != v135)
                  continue;
                return v151;
              }
              goto LABEL_213;
            }
            if (v183 != v15[11])
              goto LABEL_200;
            v160 = v183;
            v149 = v57;
            if (v57)
            {
              v92 = v57 + 24 * ((v156 >> ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) & 0xF);
              v93 = *(_QWORD *)(v92 + 40);
              v167 = *(_QWORD *)(v92 + 32);
              swift_bridgeObjectRetain();
              v154 = v93;
              swift_bridgeObjectRetain();
            }
            else
            {
              v94 = v15[8];
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v156, v94);
              v167 = v95;
              v154 = v96;
              v83 = v168;
              swift_unknownObjectRelease();
            }
            swift_bridgeObjectRetain();
            v97 = v139;
            v98 = v141;
            while (1)
            {
              v101 = *(v97 - 1);
              v100 = *v97;
              if (*(_QWORD *)(v83 + 16))
              {
                swift_bridgeObjectRetain_n();
                v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v100);
                if ((v103 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v83 + 56) + 72 * v102, (uint64_t)&v194);
                }
                else
                {
                  v198 = 0;
                  v196 = 0u;
                  v197 = 0u;
                  v194 = 0u;
                  v195 = 0u;
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                v198 = 0;
                v196 = 0u;
                v197 = 0u;
                v194 = 0u;
                v195 = 0u;
                swift_bridgeObjectRetain();
              }
              v104 = v167;
              if (*(_QWORD *)(v167 + 16))
              {
                swift_bridgeObjectRetain();
                v105 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v100);
                if ((v106 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v104 + 56) + 72 * v105, (uint64_t)&v189);
                }
                else
                {
                  v193 = 0;
                  v191 = 0u;
                  v192 = 0u;
                  v189 = 0u;
                  v190 = 0u;
                }
                swift_bridgeObjectRelease();
                v83 = v168;
              }
              else
              {
                v193 = 0;
                v191 = 0u;
                v192 = 0u;
                v189 = 0u;
                v190 = 0u;
              }
              swift_bridgeObjectRelease();
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v194, (uint64_t)&v183, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v189, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v186)
              {
                if (v188)
                  goto LABEL_160;
                outlined destroy of Any?((uint64_t)&v183, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_130;
              }
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v183, (uint64_t)v182, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v188)
              {
                outlined destroy of AttributedString._AttributeValue((uint64_t)v182);
LABEL_160:
                outlined destroy of Any?((uint64_t)&v183, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?((uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_161:
                outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                v15 = v159;
                v36 = v155;
                v64 = v164;
                goto LABEL_162;
              }
              v107 = *((_OWORD *)v16 + 3);
              v180[2] = *((_OWORD *)v16 + 2);
              v180[3] = v107;
              v181 = *((_QWORD *)v16 + 8);
              v108 = *((_OWORD *)v16 + 1);
              v180[0] = *(_OWORD *)v16;
              v180[1] = v108;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v182, (uint64_t)v179);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v180, (uint64_t)v178);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v179, (uint64_t)&v174, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v178, (uint64_t)v166, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (v175)
              {
                if (!v177)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
LABEL_128:
                  v99 = 0;
                  goto LABEL_129;
                }
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v174, (uint64_t)v171);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v166, (uint64_t)v170);
                v109 = v172;
                v163 = v173;
                v162 = __swift_project_boxed_opaque_existential_1(v171, v172);
                v165 = &v132;
                v110 = *(_QWORD *)(v109 - 8);
                MEMORY[0x1E0C80A78](v162);
                v112 = (char *)&v132 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v170, (uint64_t)&v169);
                v113 = type metadata accessor for Optional();
                v114 = *(_QWORD *)(v113 - 8);
                MEMORY[0x1E0C80A78](v113);
                v116 = (char *)&v132 - v115;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v117 = swift_dynamicCast();
                v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
                if (v117)
                {
                  v118(v116, 0, 1, v109);
                  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v112, v116, v109);
                  v99 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
                }
                else
                {
                  v118(v116, 1, 1, v109);
                  (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
                  v99 = 0;
                }
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
                v16 = v161;
              }
              else
              {
                if (v177)
                {
                  outlined destroy of Any?((uint64_t)v166, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_128;
                }
                v99 = 1;
              }
LABEL_129:
              outlined destroy of Any?((uint64_t)v178, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?((uint64_t)v179, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v180);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v182);
              outlined destroy of Any?((uint64_t)&v183, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              v83 = v168;
              if ((v99 & 1) == 0)
                goto LABEL_161;
LABEL_130:
              v97 += 2;
              if (!--v98)
              {
                outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                v15 = v159;
                v58 = v160;
                v57 = v159[8];
                v59 = v159[11];
                v158 = v150;
                v183 = v160;
                v184 = v156;
                v36 = v149;
                v164 = v156;
                v185 = v149;
                v17 = __OFADD__(v157++, 1);
                if (v17)
                  goto LABEL_215;
                goto LABEL_76;
              }
            }
          }
          if (v57)
          {
            v90 = *(unsigned __int8 *)(v57 + 18);
            v91 = *(unsigned __int16 *)(v57 + 16);
            result = swift_unknownObjectRelease_n();
            v156 = ((-15 << ((4 * v90 + 8) & 0x3C)) - 1) & v90 | (unint64_t)(v91 << ((4 * v90 + 8) & 0x3C));
          }
          else
          {
            v156 = 0;
          }
          v16 = v161;
          v36 = v155;
          v83 = v168;
          v57 = 0;
          v183 = v153;
          goto LABEL_121;
        }
LABEL_40:
        swift_unknownObjectRetain();
        v37 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v160, v35, v36, v18, v163);
        result = swift_unknownObjectRelease_n();
        goto LABEL_68;
      }
      break;
    }
    v23 = *(unsigned __int8 *)(v18 + 18);
    if (*(_BYTE *)(v18 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v206);
      v24 = v20;
      v25 = v18;
      while (1)
      {
        v28 = *(unsigned __int16 *)(v25 + 16);
        if (!*(_WORD *)(v25 + 16))
          break;
        v29 = *(_QWORD *)(v25 + 40);
        v30 = v24 - v29;
        if (__OFSUB__(v24, v29))
          goto LABEL_195;
        if (__OFADD__(v30, 1))
          goto LABEL_196;
        if (v30 + 1 <= 0)
        {
          v28 = 0;
          goto LABEL_18;
        }
        if ((_DWORD)v28 == 1)
        {
          v24 -= v29;
          break;
        }
        v31 = *(_QWORD *)(v25 + 64);
        v17 = __OFSUB__(v30, v31);
        v32 = v30 - v31;
        if (v17)
          goto LABEL_201;
        if (__OFADD__(v32, 1))
          goto LABEL_202;
        if (v32 + 1 < 1)
        {
          v28 = 1;
          v24 = v30;
          goto LABEL_18;
        }
        if ((_DWORD)v28 == 2)
        {
          v24 = v32;
          break;
        }
        v33 = (_QWORD *)(v25 + 88);
        v34 = 2;
        while (1)
        {
          if (v28 == v34)
          {
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
            goto LABEL_194;
          }
          v24 = v32 - *v33;
          if (__OFSUB__(v32, *v33))
            goto LABEL_192;
          if (__OFADD__(v24, 1))
            goto LABEL_193;
          if (v24 + 1 < 1)
            break;
          ++v34;
          v33 += 3;
          v32 = v24;
          if (v28 == v34)
            goto LABEL_17;
        }
        v28 = v34;
        v24 = v32;
LABEL_18:
        v26 = (4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C;
        v23 = ((-15 << v26) - 1) & v23 | (v28 << v26);
        v27 = *(_QWORD *)(v25 + 24 + 24 * v28);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v25 = v27;
        if (!*(_BYTE *)(v27 + 18))
          goto LABEL_42;
      }
LABEL_17:
      if (!v24)
        goto LABEL_18;
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v206);
    v24 = v20;
    v27 = v18;
LABEL_42:
    v38 = *(unsigned __int16 *)(v27 + 16);
    if (*(_WORD *)(v27 + 16))
    {
      v39 = *(_QWORD *)(v27 + 24);
      v40 = v24 - v39;
      if (__OFSUB__(v24, v39))
      {
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      if (__OFADD__(v40, 1))
        goto LABEL_221;
      v36 = v27;
      if (v40 + 1 <= 0)
      {
        v38 = 0;
      }
      else
      {
        if ((_DWORD)v38 == 1)
        {
          v24 -= v39;
          goto LABEL_49;
        }
        v41 = *(_QWORD *)(v27 + 48);
        v17 = __OFSUB__(v40, v41);
        v42 = v40 - v41;
        if (v17)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        if (__OFADD__(v42, 1))
        {
LABEL_226:
          __break(1u);
          return result;
        }
        if (v42 + 1 < 1)
        {
          v38 = 1;
          v24 = v40;
        }
        else
        {
          if ((_DWORD)v38 == 2)
          {
            v24 = v42;
LABEL_49:
            if (v24)
            {
LABEL_219:
              __break(1u);
              goto LABEL_220;
            }
            goto LABEL_66;
          }
          v43 = (_QWORD *)(v27 + 72);
          v44 = 2;
          while (1)
          {
            if (v38 == v44)
              goto LABEL_216;
            v24 = v42 - *v43;
            if (__OFSUB__(v42, *v43))
              goto LABEL_217;
            if (__OFADD__(v24, 1))
              goto LABEL_218;
            if (v24 + 1 < 1)
              break;
            ++v44;
            v43 += 3;
            v42 = v24;
            if (v38 == v44)
              goto LABEL_49;
          }
          v38 = v44;
          v24 = v42;
        }
      }
LABEL_66:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v35 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
      v15 = v159;
      v16 = v161;
      goto LABEL_40;
    }
    v36 = v27;
    goto LABEL_49;
  }
  if (v6 < result >> 10)
  {
    v131 = 0;
    while (1)
    {
      v17 = __OFSUB__(v131--, 1);
      if (v17)
        break;
      result = (unint64_t)specialized BidirectionalCollection.formIndex(before:)(&v199);
      if (v6 == v199 >> 10)
        return v131;
    }
    goto LABEL_214;
  }
  return 0;
}

uint64_t *specialized BidirectionalCollection._distance(from:to:)(uint64_t *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;

  v5 = *result;
  v6 = result[1];
  v7 = result[2];
  v8 = result[3];
  v9 = result[4];
  v10 = *(_QWORD *)(a2 + 32);
  v82 = a3;
  v81 = v10;
  if (v9 >= v10)
  {
    if (v10 >= v9)
      return 0;
    v49 = a5;
    v11 = 0;
    while (1)
    {
      v13 = __OFSUB__(v11--, 1);
      if (v13)
        goto LABEL_188;
      v51 = a3[8];
      if (v51)
      {
        if (v9 != a3[10])
          goto LABEL_130;
      }
      else if (v9)
      {
LABEL_130:
        v64 = a3[11];
        v85 = v5;
        v86 = v6;
        v87 = v7;
        v13 = __OFSUB__(v8--, 1);
        if (v13)
          goto LABEL_192;
        if (v5 != v64)
          goto LABEL_193;
        v80 = v5;
        if (v51)
        {
          v65 = *(unsigned __int8 *)(v51 + 18);
          result = (uint64_t *)swift_unknownObjectRetain();
        }
        else
        {
          v65 = 0;
        }
        if (v6 <= v65)
          goto LABEL_194;
        if (v7)
        {
          v66 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
          if (((v6 >> v66) & 0xF) != 0)
          {
            v6 = ((((v6 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v6;
            v86 = v6;
            goto LABEL_143;
          }
        }
        v67 = *(unsigned __int8 *)(v51 + 18);
        v68 = (4 * v67 + 8) & 0x3C;
        v69 = (v6 >> v68) & 0xF;
        v84 = v69;
        if (v67)
        {
          swift_unknownObjectRetain();
          v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v84, (uint64_t)&v85, v67);
          result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0)
            goto LABEL_199;
          if (v85 != v5)
            goto LABEL_195;
          v6 = v86;
          v7 = v87;
          if (v87)
          {
LABEL_143:
            v71 = *(_QWORD *)(v7 + 24 * ((v6 >> ((4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_147:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            result = (uint64_t *)swift_bridgeObjectRelease();
            v13 = __OFSUB__(v9, v71);
            v9 -= v71;
            if (v13)
              goto LABEL_196;
            a3 = v82;
            v49 = a5;
            v50 = v81;
            goto LABEL_100;
          }
        }
        else
        {
          if (!v69)
            goto LABEL_199;
          v6 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v6;
          v86 = v6;
          v7 = v51;
          if (v51)
            goto LABEL_143;
        }
        swift_unknownObjectRetain();
        v71 = specialized Rope._Node.subscript.getter(v6, v51);
        swift_unknownObjectRelease();
        goto LABEL_147;
      }
      if (v51)
        v52 = a3[10];
      else
        v52 = 0;
      if (v49 < 0 || v52 < v49)
        goto LABEL_197;
      v80 = a3[11];
      if (v51)
      {
        v53 = a3[9];
        v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(_BYTE *)(v51 + 18))
          {
            result = (uint64_t *)swift_unknownObjectRetain_n();
            v9 = v49;
            v55 = v51;
            while (1)
            {
              v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16))
                goto LABEL_210;
              v59 = *(_QWORD *)(v55 + 40);
              v13 = __OFSUB__(v9, v59);
              v60 = v9 - v59;
              if (v13)
                goto LABEL_183;
              if (v60 <= 0)
              {
                v56 = 0;
              }
              else
              {
                if ((_DWORD)v58 == 1)
                  goto LABEL_212;
                v61 = *(_QWORD *)(v55 + 64);
                v9 = v60 - v61;
                if (__OFSUB__(v60, v61))
                  goto LABEL_186;
                if (v9 < 1)
                {
                  v9 = v60;
                  v56 = 1;
                }
                else
                {
                  if ((_DWORD)v58 == 2)
                    goto LABEL_212;
                  v62 = (_QWORD *)(v55 + 88);
                  v56 = 2;
                  while (1)
                  {
                    if (v58 == v56)
                    {
                      __break(1u);
LABEL_171:
                      __break(1u);
                      goto LABEL_172;
                    }
                    v63 = v9 - *v62;
                    if (__OFSUB__(v9, *v62))
                      goto LABEL_171;
                    if (v63 < 1)
                      break;
                    ++v56;
                    v62 += 3;
                    v9 = v63;
                    if (v58 == v56)
                      goto LABEL_212;
                  }
                }
              }
              v57 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              v54 = ((-15 << v57) - 1) & v54 | (v56 << v57);
              v7 = *(_QWORD *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              result = (uint64_t *)swift_unknownObjectRelease();
              v55 = v7;
              if (!*(_BYTE *)(v7 + 18))
                goto LABEL_151;
            }
          }
          result = (uint64_t *)swift_unknownObjectRetain_n();
          v54 = 0;
          v9 = v49;
          v7 = v51;
LABEL_151:
          v72 = *(unsigned __int16 *)(v7 + 16);
          if (!*(_WORD *)(v7 + 16))
            goto LABEL_213;
          v73 = *(_QWORD *)(v7 + 24);
          v13 = __OFSUB__(v9, v73);
          v74 = v9 - v73;
          if (v13)
            goto LABEL_206;
          if (v74 <= 0)
          {
            v77 = 0;
          }
          else
          {
            if ((_DWORD)v72 == 1)
              goto LABEL_215;
            v75 = *(_QWORD *)(v7 + 48);
            v9 = v74 - v75;
            if (__OFSUB__(v74, v75))
              goto LABEL_207;
            if (v9 >= 1)
            {
              if ((_DWORD)v72 == 2)
                goto LABEL_215;
              v76 = (_QWORD *)(v7 + 72);
              v77 = 2;
              while (v72 != v77)
              {
                v78 = v9 - *v76;
                if (__OFSUB__(v9, *v76))
                  goto LABEL_185;
                if (v78 < 1)
                  goto LABEL_166;
                ++v77;
                v76 += 3;
                v9 = v78;
                if (v72 == v77)
                  goto LABEL_215;
              }
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }
            v9 = v74;
            v77 = 1;
          }
LABEL_166:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v6 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
        }
        else
        {
          v6 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v9 = 0;
          v7 = 0;
        }
        swift_unknownObjectRetain();
        v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v6, v7, v51, v53);
        result = (uint64_t *)swift_unknownObjectRelease_n();
        a3 = v82;
      }
      else
      {
        v9 = 0;
        v7 = 0;
        v6 = 0;
        v8 = 0;
      }
      v13 = __OFSUB__(v49, v9);
      v9 = v49 - v9;
      v50 = v81;
      if (v13)
        goto LABEL_198;
LABEL_100:
      v5 = v80;
      if (v9 == v50)
        return (uint64_t *)v11;
    }
  }
  v11 = 0;
  while (1)
  {
    v13 = __OFADD__(v11++, 1);
    if (v13)
      goto LABEL_175;
    v14 = a3[8];
    v15 = a3[11];
    v85 = v5;
    v86 = v6;
    v87 = v7;
    v13 = __OFADD__(v8++, 1);
    if (v13)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }
    if (v5 != v15)
      goto LABEL_177;
    if (v7)
    {
      v16 = *(_QWORD *)(v7 + 24 * ((v6 >> ((4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v16 = specialized Rope._Node.subscript.getter(v6, v14);
    }
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v13 = __OFADD__(v9, v16);
    v9 += v16;
    if (v13)
      goto LABEL_178;
    if (v14)
    {
      v17 = ((-15 << ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v14 + 18) | ((unint64_t)*(unsigned __int16 *)(v14 + 16) << ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C));
      result = (uint64_t *)swift_unknownObjectRetain();
    }
    else
    {
      v17 = 0;
    }
    v18 = a5;
    if (v6 >= v17)
      goto LABEL_179;
    if (v7)
    {
      v19 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
      v20 = ((v6 >> v19) & 0xF) + 1;
      if (v20 < *(unsigned __int16 *)(v7 + 16))
      {
        v6 = (v20 << v19) | ((-15 << v19) - 1) & v6;
        result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_24;
      }
    }
    v21 = *(unsigned __int8 *)(v14 + 18);
    v22 = (4 * v21 + 8) & 0x3C;
    v23 = (v6 >> v22) & 0xF;
    v84 = v23;
    if (v21)
    {
      swift_unknownObjectRetain();
      v24 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v14 + 24, &v84, (uint64_t)&v85, v14, v21);
      result = (uint64_t *)swift_unknownObjectRelease();
      if ((v24 & 1) != 0)
      {
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v5 = v85;
        v6 = v86;
        v7 = v87;
        goto LABEL_24;
      }
    }
    else
    {
      v25 = v23 + 1;
      if (v23 + 1 < (unint64_t)*(unsigned __int16 *)(v14 + 16))
      {
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v6 = (v25 << v22) | ((-15 << v22) - 1) & v6;
        v7 = v14;
LABEL_24:
        a3 = v82;
        if (v9 < a5)
          goto LABEL_3;
        goto LABEL_30;
      }
    }
    if (v14)
    {
      v26 = *(unsigned __int8 *)(v14 + 18);
      v27 = *(unsigned __int16 *)(v14 + 16);
      result = (uint64_t *)swift_unknownObjectRelease_n();
      v6 = ((-15 << ((4 * v26 + 8) & 0x3C)) - 1) & v26 | (unint64_t)(v27 << ((4 * v26 + 8) & 0x3C));
    }
    else
    {
      v6 = 0;
    }
    a3 = v82;
    v7 = 0;
    v85 = v5;
    if (v9 < a5)
    {
LABEL_3:
      v12 = v81;
      goto LABEL_4;
    }
LABEL_30:
    v28 = a3[8];
    if (a4 != a5)
    {
      v5 = a3[11];
      v12 = v81;
      if (v28)
      {
        v7 = 0;
        v8 = a3[9];
        v9 = a3[10];
        v6 = ((-15 << ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v28 + 18) | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C));
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
      }
      goto LABEL_4;
    }
    if (v28)
      v29 = a3[10];
    else
      v29 = 0;
    if (a4 < 0 || v29 < a5)
      goto LABEL_190;
    v30 = a3[11];
    if (v28)
      break;
    v9 = 0;
    v7 = 0;
    v6 = 0;
    v8 = 0;
LABEL_94:
    v13 = __OFSUB__(v18, v9);
    v9 = v18 - v9;
    if (v13)
      goto LABEL_191;
    v12 = v81;
    v5 = v30;
LABEL_4:
    if (v9 == v12)
      return (uint64_t *)v11;
  }
  v31 = a3[9];
  v32 = *(unsigned __int8 *)(v28 + 18);
  if (!*(_WORD *)(v28 + 16) || a3[10] <= a5)
  {
    v6 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * v32 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v9 = 0;
    v7 = 0;
LABEL_93:
    swift_unknownObjectRetain();
    v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v6, v7, v28, v31);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    a3 = v82;
    v18 = a5;
    goto LABEL_94;
  }
  if (*(_BYTE *)(v28 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v9 = a5;
    v33 = v28;
    while (1)
    {
      v35 = *(unsigned __int16 *)(v33 + 16);
      if (!*(_WORD *)(v33 + 16))
        goto LABEL_42;
      v36 = *(_QWORD *)(v33 + 40);
      v37 = v9 - v36;
      if (__OFSUB__(v9, v36))
        goto LABEL_181;
      if (__OFADD__(v37, 1))
        goto LABEL_182;
      if (v37 + 1 <= 0)
      {
        v35 = 0;
      }
      else
      {
        if ((_DWORD)v35 == 1)
        {
          v9 -= v36;
LABEL_42:
          if (v9)
            goto LABEL_180;
          goto LABEL_43;
        }
        v38 = *(_QWORD *)(v33 + 64);
        v13 = __OFSUB__(v37, v38);
        v39 = v37 - v38;
        if (v13)
          goto LABEL_187;
        if (__OFADD__(v39, 1))
          goto LABEL_189;
        if (v39 + 1 >= 1)
        {
          if ((_DWORD)v35 != 2)
          {
            v40 = (_QWORD *)(v33 + 88);
            v41 = 2;
            while (v35 != v41)
            {
              v9 = v39 - *v40;
              if (__OFSUB__(v39, *v40))
                goto LABEL_173;
              if (__OFADD__(v9, 1))
                goto LABEL_174;
              if (v9 + 1 < 1)
              {
                v35 = v41;
                v9 = v39;
                goto LABEL_43;
              }
              ++v41;
              v40 += 3;
              v39 = v9;
              if (v35 == v41)
                goto LABEL_42;
            }
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
          v9 = v39;
          goto LABEL_42;
        }
        v35 = 1;
        v9 = v37;
      }
LABEL_43:
      v34 = (4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C;
      v32 = ((-15 << v34) - 1) & v32 | (v35 << v34);
      v7 = *(_QWORD *)(v33 + 24 + 24 * v35);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      v33 = v7;
      if (!*(_BYTE *)(v7 + 18))
        goto LABEL_70;
    }
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v32 = 0;
  v9 = a5;
  v7 = v28;
LABEL_70:
  v42 = v31;
  v43 = *(unsigned __int16 *)(v7 + 16);
  if (!*(_WORD *)(v7 + 16))
  {
LABEL_79:
    v45 = v9;
    goto LABEL_80;
  }
  v44 = *(_QWORD *)(v7 + 24);
  v13 = __OFSUB__(v9, v44);
  v45 = v9 - v44;
  if (v13)
    goto LABEL_204;
  if (__OFADD__(v45, 1))
    goto LABEL_205;
  if (v45 + 1 <= 0)
  {
    v43 = 0;
LABEL_92:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v6 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
    v31 = v42;
    goto LABEL_93;
  }
  if ((_DWORD)v43 == 1)
  {
LABEL_80:
    if (v45)
      goto LABEL_203;
    v9 = 0;
    goto LABEL_92;
  }
  v46 = *(_QWORD *)(v7 + 48);
  v9 = v45 - v46;
  if (__OFSUB__(v45, v46))
    goto LABEL_208;
  if (__OFADD__(v9, 1))
    goto LABEL_209;
  if (v9 + 1 < 1)
  {
    v43 = 1;
    v9 = v45;
    goto LABEL_92;
  }
  if ((_DWORD)v43 == 2)
    goto LABEL_79;
  v47 = (_QWORD *)(v7 + 72);
  v48 = 2;
  while (v43 != v48)
  {
    v45 = v9 - *v47;
    if (__OFSUB__(v9, *v47))
      goto LABEL_201;
    if (__OFADD__(v45, 1))
      goto LABEL_202;
    if (v45 + 1 < 1)
    {
      v43 = v48;
      goto LABEL_92;
    }
    ++v48;
    v47 += 3;
    v9 = v45;
    if (v43 == v48)
      goto LABEL_80;
  }
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  if (!v9)
    __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  if (!v9)
    __break(1u);
LABEL_215:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection._distance(from:to:)(_QWORD *a1, void **a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  char *result;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  BOOL v20;

  v4 = a1;
  v5 = a1[3];
  result = (char *)*a1;
  v7 = (char *)*a2;
  if ((uint64_t)result >= (uint64_t)*a2)
  {
LABEL_19:
    if ((uint64_t)v7 >= (uint64_t)result)
      return 0;
    v11 = 0;
    v16 = (char *)v4[1];
    while (1)
    {
      v12 = __OFSUB__(v11--, 1);
      if (v12)
        break;
      if (result == v16)
      {
        if (v5)
        {
          v12 = __OFSUB__(v5--, 1);
          if (v12)
            goto LABEL_47;
          v17 = *(_BYTE *)(a3 + 24);
          result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v5);
          v16 = result;
          v19 = &result[v18];
          v20 = __OFADD__(result, v18);
          if ((v17 & 1) != 0)
          {
            if (v20)
              goto LABEL_51;
            if ((uint64_t)v19 < (uint64_t)result)
              goto LABEL_52;
          }
          else
          {
            if (v20)
              goto LABEL_53;
            if ((uint64_t)v19 < (uint64_t)result)
              goto LABEL_54;
          }
          result = v19 - 1;
          if (__OFSUB__(v19, 1))
          {
            __break(1u);
            return 0;
          }
        }
        else
        {
          result = v16;
        }
      }
      else
      {
        v12 = __OFSUB__(result--, 1);
        if (v12)
          goto LABEL_46;
      }
      if (result == v7)
        return (char *)v11;
    }
  }
  else
  {
    v8 = 0;
    v9 = (char *)v4[2];
    v10 = v4[4];
    while (1)
    {
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      v12 = __OFADD__(result++, 1);
      if (v12)
        goto LABEL_43;
      if (result == v9)
      {
        v13 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_44;
        result = v9;
        if (v13 != v10)
        {
          v14 = *(_BYTE *)(a3 + 24);
          result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v13);
          v9 = &result[v15];
          v4 = (_QWORD *)__OFADD__(result, v15);
          if ((v14 & 1) != 0)
          {
            if ((v4 & 1) != 0)
              goto LABEL_48;
            v5 = v13;
            if ((uint64_t)v9 < (uint64_t)result)
              goto LABEL_49;
          }
          else
          {
            if ((v4 & 1) != 0)
              goto LABEL_50;
            v5 = v13;
            if ((uint64_t)v9 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_19;
            }
          }
        }
      }
      ++v8;
      if (result == v7)
        return (char *)v11;
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v12 = a2;
  v37 = result;
  v38 = a2;
  v39 = a3;
  if (a2 < a5)
  {
    v13 = 0;
    v35 = a7 + 24;
    while (1)
    {
      v14 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if (v37 != a10)
        goto LABEL_50;
      if (!a7
        || v12 >= (((-15 << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C))))
      {
        goto LABEL_51;
      }
      if (v39
        && (v15 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C,
            v16 = ((v12 >> v15) & 0xF) + 1,
            v16 < *(unsigned __int16 *)(v39 + 16)))
      {
        v12 = (v16 << v15) | ((-15 << v15) - 1) & v12;
        v38 = v12;
      }
      else
      {
        v17 = (4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C;
        v18 = (v12 >> v17) & 0xF;
        if (*(_BYTE *)(a7 + 18))
        {
          v19 = *(_QWORD *)(v35 + 24 * ((v12 >> v17) & 0xF));
          v20 = *(unsigned __int8 *)(v19 + 18);
          v21 = (4 * v20 + 8) & 0x3C;
          v36 = (v12 >> v21) & 0xF;
          if (v20)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            v22 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v19 + 24, (uint64_t *)&v36, (uint64_t)&v37, v19, v20);
            result = swift_unknownObjectRelease();
            if ((v22 & 1) != 0)
            {
              v12 = v38;
LABEL_27:
              result = swift_unknownObjectRelease();
              goto LABEL_4;
            }
          }
          else
          {
            v23 = ((v12 >> v21) & 0xF) + 1;
            if (v23 < *(unsigned __int16 *)(v19 + 16))
            {
              v12 = (v23 << v21) | ((-15 << v21) - 1) & v12;
              v38 = v12;
              v39 = v19;
              swift_unknownObjectRetain();
              goto LABEL_27;
            }
            result = swift_unknownObjectRetain();
          }
          v24 = v18 + 1;
          if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(a7 + 16))
          {
            result = swift_unknownObjectRelease();
LABEL_29:
            v12 = ((-15 << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C));
            v37 = a10;
            v38 = v12;
            v39 = 0;
            goto LABEL_4;
          }
          v25 = *(_QWORD *)(v35 + 24 * v24);
          v26 = *(unsigned __int8 *)(v25 + 18);
          if ((((v26 + 1) >> 8) & 1) != 0)
            goto LABEL_56;
          v12 = (v38 & ((-15 << v17) - 1) | (v24 << v17)) & ((-256 << (4 * ((v26 + 1) & 0xFu))) | 0xFF);
          v38 = v12;
          if (v26)
          {
            v27 = (v12 >> ((4 * v26 + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            v28 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v25 + 24, v27, v12);
            swift_unknownObjectRelease();
            v25 = v28;
          }
          v39 = v25;
          goto LABEL_27;
        }
        if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(a7 + 16))
          goto LABEL_29;
        v12 = ((v18 + 1) << v17) | ((-15 << v17) - 1) & v12;
        v38 = v12;
        v39 = a7;
      }
LABEL_4:
      ++v13;
      if (v12 == a5)
        return v14;
    }
  }
  if (a5 >= a2)
  {
    return 0;
  }
  else
  {
    v14 = 0;
    while (1)
    {
      if (__OFSUB__(v14--, 1))
        goto LABEL_52;
      if (v37 != a10)
        break;
      if (a7)
      {
        if (v12 <= *(unsigned __int8 *)(a7 + 18))
          goto LABEL_54;
      }
      else if (!v12)
      {
        goto LABEL_54;
      }
      if (v39 && (v30 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C, ((v12 >> v30) & 0xF) != 0))
      {
        v12 = ((((v12 >> v30) & 0xF) - 1) << v30) | ((-15 << v30) - 1) & v12;
        v38 = v12;
      }
      else
      {
        v31 = *(unsigned __int8 *)(a7 + 18);
        v32 = (4 * v31 + 8) & 0x3C;
        v33 = (v12 >> v32) & 0xF;
        v36 = v33;
        if (v31)
        {
          swift_unknownObjectRetain();
          v34 = specialized closure #1 in Rope._Node.formPredecessor(of:)(a7 + 16, a7 + 24, (uint64_t *)&v36, (uint64_t)&v37, v31);
          result = swift_unknownObjectRelease();
          if ((v34 & 1) == 0)
            goto LABEL_55;
          v12 = v38;
        }
        else
        {
          if (!v33)
            goto LABEL_55;
          v12 = ((v33 - 1) << v32) | ((-15 << v32) - 1) & v12;
          v38 = v12;
          v39 = a7;
        }
      }
      if (v12 == a5)
        return v14;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  return result;
}

unint64_t specialized BidirectionalCollection._distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v6 = a5 >> 10;
  if (result >> 10 < a5 >> 10)
  {
    v7 = 0;
    v8 = *((_QWORD *)v5 + 25);
    v59 = *((_QWORD *)v5 + 24);
    v9 = v5[11];
    v57 = v5[10];
    v58 = v9;
    v10 = v5[7];
    v53 = v5[6];
    v54 = v10;
    v11 = v5[9];
    v55 = v5[8];
    v56 = v11;
    v12 = v5[3];
    v49 = v5[2];
    v50 = v12;
    v13 = v5[5];
    v51 = v5[4];
    v52 = v13;
    v14 = v5[1];
    v47 = *v5;
    v48 = v14;
    v15 = *((_QWORD *)v5 + 26);
    while (1)
    {
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      v40 = v57;
      v41 = v58;
      v42 = v59;
      v36 = v53;
      v37 = v54;
      v38 = v55;
      v39 = v56;
      v32 = v49;
      v33 = v50;
      v34 = v51;
      v35 = v52;
      v30 = v47;
      v31 = v48;
      v26 = result;
      v27 = a2;
      v28 = a3;
      v29 = a4;
      outlined retain of AttributedString.Runs((uint64_t)&v47);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v26, v8, v15, (uint64_t *)&v43);
      outlined release of AttributedString.Runs((uint64_t)&v47);
      result = v43;
      a2 = v44;
      a3 = v45;
      a4 = v46;
      ++v7;
      if (v6 == v43 >> 10)
        return v16;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (v6 < result >> 10)
  {
    v16 = 0;
    v17 = *((_QWORD *)v5 + 25);
    v59 = *((_QWORD *)v5 + 24);
    v18 = v5[11];
    v57 = v5[10];
    v58 = v18;
    v19 = v5[7];
    v53 = v5[6];
    v54 = v19;
    v20 = v5[9];
    v55 = v5[8];
    v56 = v20;
    v21 = v5[3];
    v49 = v5[2];
    v50 = v21;
    v22 = v5[5];
    v51 = v5[4];
    v52 = v22;
    v23 = v5[1];
    v47 = *v5;
    v48 = v23;
    v24 = *((_QWORD *)v5 + 26);
    while (!__OFSUB__(v16--, 1))
    {
      v40 = v57;
      v41 = v58;
      v42 = v59;
      v36 = v53;
      v37 = v54;
      v38 = v55;
      v39 = v56;
      v32 = v49;
      v33 = v50;
      v34 = v51;
      v35 = v52;
      v30 = v47;
      v31 = v48;
      v26 = result;
      v27 = a2;
      v28 = a3;
      v29 = a4;
      outlined retain of AttributedString.Runs((uint64_t)&v47);
      AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(&v26, v17, v24, &v43);
      outlined release of AttributedString.Runs((uint64_t)&v47);
      result = v43;
      a2 = v44;
      a3 = v45;
      a4 = v46;
      if (v6 == v43 >> 10)
        return v16;
    }
    goto LABEL_14;
  }
  return 0;
}

unint64_t type metadata accessor for NSKeyedUnarchiver()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSKeyedUnarchiver;
  if (!lazy cache variable for type metadata for NSKeyedUnarchiver)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  }
  return result;
}

uint64_t dispatch thunk of static EncodableAttributedStringKey.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodableAttributedStringKey.decode(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.markdownName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for AttributeScopeCodableConfiguration()
{
  return &type metadata for AttributeScopeCodableConfiguration;
}

uint64_t storeEnumTagSinglePayload for AttributedString.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181EBE8D0 + 4 * byte_18216EB31[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181EBE904 + 4 * byte_18216EB2C[v4]))();
}

uint64_t sub_181EBE904(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EBE90C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EBE914);
  return result;
}

uint64_t sub_181EBE920(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EBE928);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181EBE92C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EBE934(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute(uint64_t a1, _QWORD *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(a1, a2);
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of static DecodableAttributedStringKey.decode(from:)(a1, a2, a3);
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  UTF32Char v8;
  uint64_t v9;
  uint64_t v10;
  int IsLongCharacterMember;
  _BOOL8 v12;
  BOOL v13;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v8 = _decodeScalar(_:startingAt:)();
      }
      v10 = v9;
      IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a3 + 16), v8);
      v12 = IsLongCharacterMember != 0;
      v7 += v10;
      if (IsLongCharacterMember)
        v13 = v7 < v4;
      else
        v13 = 0;
    }
    while (v13);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 1;
  }
  swift_release();
  return v12;
}

BOOL static NSScanner.NumberRepresentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSScanner.NumberRepresentation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NSScanner.NumberRepresentation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id key path setter for NSScanner.currentIndex : NSScanner(uint64_t a1, id *a2)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  v3 = objc_msgSend(*a2, sel_string);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v2, sel__deprecated_setScanLocation_, v7, v4, v6);
}

id NSScanner.currentIndex.setter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_string);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  lazy protocol witness table accessor for type String and conformance String();
  v6 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v1, sel__deprecated_setScanLocation_, v6, v3, v5);
}

void (*NSScanner.currentIndex.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*result)(uint64_t);
  char v15;
  uint64_t v16;
  char *v17;
  BOOL v18;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[3] = v2;
  v5 = objc_msgSend(v2, sel_string);
  v6 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *v4 = v6;
  v4[1] = v8;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  v4[4] = lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol._toUTF16Index(_:)();
  v10 = v9;
  v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v11 = v6 & 0xFFFFFFFFFFFFLL;
  v12 = 4 * v11;
  if (4 * v11 != v9 >> 14)
  {
    v13 = 0;
    do
    {
      result = (void (*)(uint64_t))String.Index.samePosition(in:)();
      if ((v15 & 1) == 0)
        break;
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
      *v4 = v6;
      v4[1] = v8;
      v17 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
      v18 = __OFADD__(v17, v16);
      result = (void (*)(uint64_t))&v17[v16];
      if (v18)
        goto LABEL_11;
      v10 = StringProtocol._toUTF16Index(_:)();
      ++v13;
    }
    while (v12 != v10 >> 14);
  }
  swift_bridgeObjectRelease();
  v4[2] = v10;
  return NSScanner.currentIndex.modify;
}

void NSScanner.currentIndex.modify(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v1 = *(_QWORD **)a1;
  v2 = objc_msgSend(*(id *)(*(_QWORD *)a1 + 24), sel_string);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = (void *)v1[3];
  *v1 = v3;
  v1[1] = v5;
  v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel__deprecated_setScanLocation_, v7);
  free(v1);
}

unint64_t NSScanner.scanInt32(representation:)(char *a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v7 = 0x7FFFFFFF;
  if ((v2 & 1) != 0)
  {
    v6 = -1;
    if ((objc_msgSend(v1, sel__deprecated_scanHexInt32_, &v6) & 1) != 0)
    {
      LODWORD(v3) = v6;
      if (v6 >= 0x7FFFFFFF)
        LODWORD(v3) = 0x7FFFFFFF;
      goto LABEL_7;
    }
LABEL_8:
    v3 = 0;
    v4 = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  if (!objc_msgSend(v1, sel__deprecated_scanInt32_, &v7))
    goto LABEL_8;
  LODWORD(v3) = v7;
LABEL_7:
  v4 = 0;
  v3 = v3;
  return v3 | ((unint64_t)v4 << 32);
}

uint64_t NSScanner.scanUInt64(representation:)(char *a1)
{
  void *v1;
  char v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v4[0] = -1;
  if ((v2 & 1) != 0)
  {
    if (!objc_msgSend(v1, sel_scanHexLongLong_, v4))
      return 0;
  }
  else if ((objc_msgSend(v1, sel_scanUnsignedLongLong_, v4) & 1) == 0)
  {
    return 0;
  }
  return v4[0];
}

unint64_t NSScanner.scanFloat(representation:)(char *a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v6 = 2139095039;
  if ((v2 & 1) == 0)
  {
    if ((objc_msgSend(v1, sel__deprecated_scanFloat_, &v6) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    v3 = v6;
    return v3 | ((unint64_t)v4 << 32);
  }
  if (objc_msgSend(v1, sel_scanHexFloat_, &v6))
    goto LABEL_5;
LABEL_3:
  v3 = 0;
  v4 = 1;
  return v3 | ((unint64_t)v4 << 32);
}

uint64_t NSScanner.scanDouble(representation:)(char *a1)
{
  void *v1;
  char v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v4[0] = 0x7FEFFFFFFFFFFFFFLL;
  if ((v2 & 1) != 0)
  {
    if (!objc_msgSend(v1, sel_scanHexDouble_, v4))
      return 0;
  }
  else if ((objc_msgSend(v1, sel__deprecated_scanDouble_, v4) & 1) == 0)
  {
    return 0;
  }
  return v4[0];
}

void __swiftcall NSScanner.scanDecimal()(NSDecimal_optional *__return_ptr retstr)
{
  void *v1;
  _QWORD v2[2];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  objc_msgSend(v1, sel__deprecated_scanDecimal_, v2);
}

Swift::String_optional __swiftcall NSScanner.scanString(_:)(Swift::String a1)
{
  void *v1;
  void *v2;
  uint64_t countAndFlagsBits;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  uint64_t ObjectType;
  uint64_t (*v63)(uint64_t);
  void *v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  Swift::String_optional result;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  id object;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD v104[2];
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = objc_msgSend(v1, sel_charactersToBeSkipped);
  v101 = v1;
  v98 = countAndFlagsBits;
  if (!v4)
  {
    v27 = objc_msgSend(v1, sel_string);
    v28 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v105 = v28;
    v106 = v30;
    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v31 = StringProtocol._toUTF16Index(_:)();
    v32 = v31;
    v33 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0)
      v33 = v28 & 0xFFFFFFFFFFFFLL;
    v34 = 4 * v33;
    if (4 * v33 != v31 >> 14)
    {
      v35 = 0;
      do
      {
        v19 = (char *)String.Index.samePosition(in:)();
        if ((v20 & 1) == 0)
          break;
        v36 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v105 = v28;
        v106 = v30;
        v37 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
        v23 = __OFADD__(v37, v36);
        v19 = &v37[v36];
        if (v23)
          goto LABEL_63;
        v32 = StringProtocol._toUTF16Index(_:)();
        ++v35;
      }
      while (v34 != v32 >> 14);
    }
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v5 = v4;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = *(_QWORD *)&v104[0];
  *(_BYTE *)(v6 + 24) = 0;

  v7 = objc_msgSend(v2, sel_string);
  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_msgSend(v2, sel_string);
  v11 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v105 = v11;
  v106 = v13;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  v14 = StringProtocol._toUTF16Index(_:)();
  v15 = v14;
  v16 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v16 = v11 & 0xFFFFFFFFFFFFLL;
  v17 = 4 * v16;
  if (4 * v16 != v14 >> 14)
  {
    v18 = 0;
    do
    {
      v19 = (char *)String.Index.samePosition(in:)();
      if ((v20 & 1) == 0)
        break;
      v21 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      v105 = v11;
      v106 = v13;
      v22 = (char *)objc_msgSend(v101, sel__deprecated_scanLocation);
      v23 = __OFADD__(v22, v21);
      v19 = &v22[v21];
      if (v23)
        goto LABEL_61;
      v15 = StringProtocol._toUTF16Index(_:)();
      ++v18;
    }
    while (v17 != v15 >> 14);
  }
  swift_bridgeObjectRelease();
  v24 = specialized Collection.suffix(from:)(v15, (uint64_t)v96, v9);
  v26 = v25;
  swift_bridgeObjectRelease();
  if (v26 >> 14 != v24 >> 14)
  {
    swift_retain();
    v32 = v24;
    while (1)
    {
      v38 = Substring.subscript.getter();
      v40 = v39;
      swift_retain();
      LOBYTE(v38) = specialized Sequence.allSatisfy(_:)(v38, v40, v6);
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
        break;
      v32 = Substring.index(after:)();
      if (v26 >> 14 == v32 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_release_n();
    v2 = v101;
LABEL_32:
    v47 = v98;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  v2 = v101;
  v41 = objc_msgSend(v101, sel_string);
  v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0)
    v45 = v42;
  v46 = v45 << 16;
  v47 = v98;
  if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0)
    v32 = v46 | 7;
  else
    v32 = v46 | 0xB;
LABEL_33:
  v48 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v48);

  String.count.getter();
  v49 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v49);

  swift_bridgeObjectRelease();
  v50 = String.index(_:offsetBy:limitedBy:)();
  LOBYTE(v48) = v51;
  swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
    goto LABEL_56;
  v52 = v47;
  v53 = objc_msgSend(v2, sel_string);
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  v19 = (char *)objc_msgSend(v2, sel_caseSensitive);
  if (v50 >> 14 < v32 >> 14)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v57 = (char)v19;
  v97 = v19 ^ 1;
  if (objc_msgSend(v2, sel_locale))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v104, 0, sizeof(v104));
  }
  outlined init with take of Any?((uint64_t)v104, (uint64_t)&v105);
  if (!v107)
  {
    outlined destroy of Any?((uint64_t)&v105);
    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_45:
    v105 = v52;
    v106 = (unint64_t)object;
LABEL_46:
    *(_QWORD *)&v104[0] = v54;
    *((_QWORD *)&v104[0] + 1) = v56;
    swift_bridgeObjectRetain();
    Substring.init<A>(_:)();
    v66 = Substring.subscript.getter();
    v68 = v67;
    v70 = v69;
    v72 = v71;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v104[0] = v52;
    *((_QWORD *)&v104[0] + 1) = object;
    swift_bridgeObjectRetain();
    v73 = Substring.init<A>(_:)();
    if ((v57 & 1) != 0)
    {
      if (v70 != v75 || v72 != v76 || v66 >> 16 != v73 >> 16 || v68 >> 16 != v74 >> 16)
      {
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
        {
          LOBYTE(v95) = 1;
          v77 = _stringCompareInternal(_:_:_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v77 & 1) == 0)
            goto LABEL_58;
          goto LABEL_56;
        }
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    else if (specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v73, v74, v75, v76, 0, 0, v97, 0, 0, v66, v68, v70, v72))
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_58:
    v80 = objc_msgSend(v101, sel_string, v95);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v80);

    v81 = String.subscript.getter();
    v83 = v82;
    v85 = v84;
    v87 = v86;
    swift_bridgeObjectRelease();
    v88 = objc_msgSend(v101, sel_string);
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    v91 = v90;

    v105 = (unint64_t)v89;
    v106 = v91;
    lazy protocol witness table accessor for type String and conformance String();
    v92 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v101, sel__deprecated_setScanLocation_, v92);
    v78 = MEMORY[0x186DA4634](v81, v83, v85, v87);
    v79 = v93;
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  v105 = v52;
  v106 = (unint64_t)object;
  if (!v102)
    goto LABEL_46;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v58 = v56;
  *(_QWORD *)&v104[0] = v54;
  *((_QWORD *)&v104[0] + 1) = v56;
  StringProtocol._ephemeralString.getter();
  v100 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v59 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v104[0] = v54;
  *((_QWORD *)&v104[0] + 1) = v58;
  v19 = (char *)StringProtocol._toUTF16Offsets(_:)();
  v60 = v20 - v19;
  if (__OFSUB__(v20, v19))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v61 = v19;
  ObjectType = swift_getObjectType();
  v63 = *(uint64_t (**)(uint64_t))(v103 + 496);
  swift_unknownObjectRetain();
  v64 = (void *)v63(ObjectType);
  swift_unknownObjectRelease();
  v65 = objc_msgSend(v100, sel_compare_options_range_locale_, v59, v97, v61, v60, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (!v65)
    goto LABEL_58;
LABEL_56:
  v78 = 0;
  v79 = 0;
LABEL_59:
  v19 = (char *)v78;
  v20 = v79;
LABEL_66:
  result.value._object = v20;
  result.value._countAndFlagsBits = (uint64_t)v19;
  return result;
}

void NSScanner.scanCharacters(from:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1;
  v71 = *a1;
  v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  v69 = v1;
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v72;
    *(_BYTE *)(v5 + 24) = 0;

    v6 = objc_msgSend(v2, sel_string);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v70 = v7;

    v8 = objc_msgSend(v2, sel_string);
    v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v12 = StringProtocol._toUTF16Index(_:)();
    v13 = v12;
    v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v14 = v9 & 0xFFFFFFFFFFFFLL;
    v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      v16 = 0;
      do
      {
        String.Index.samePosition(in:)();
        if ((v17 & 1) == 0)
          break;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (__OFADD__(objc_msgSend(v69, sel__deprecated_scanLocation, v68), v16 + 1))
          goto LABEL_49;
        v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }
      while (v15 != v13 >> 14);
    }
    swift_bridgeObjectRelease();
    v18 = specialized Collection.suffix(from:)(v13, (uint64_t)v68, v70);
    v20 = v19;
    swift_bridgeObjectRelease();
    if (v20 >> 14 == v18 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      v2 = v69;
      v34 = objc_msgSend(v69, sel_string, v68);
      v35 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;
      swift_release();

      swift_bridgeObjectRelease();
      v38 = HIBYTE(v37) & 0xF;
      if ((v37 & 0x2000000000000000) == 0)
        v38 = v35;
      v39 = v38 << 16;
      if ((v37 & 0x1000000000000000) == 0 || (v35 & 0x800000000000000) != 0)
        v26 = v39 | 7;
      else
        v26 = v39 | 0xB;
    }
    else
    {
      swift_retain();
      v26 = v18;
      while (1)
      {
        v31 = Substring.subscript.getter();
        v33 = v32;
        swift_retain();
        LOBYTE(v31) = specialized Sequence.allSatisfy(_:)(v31, v33, v5);
        swift_bridgeObjectRelease();
        if ((v31 & 1) == 0)
          break;
        v26 = Substring.index(after:)();
        if (v20 >> 14 == v26 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      v2 = v69;
    }
  }
  else
  {
    v21 = objc_msgSend(v1, sel_string);
    v22 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v25 = StringProtocol._toUTF16Index(_:)();
    v26 = v25;
    v27 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v27 = v22 & 0xFFFFFFFFFFFFLL;
    v28 = 4 * v27;
    if (4 * v27 != v25 >> 14)
    {
      v29 = 0;
      do
      {
        String.Index.samePosition(in:)();
        if ((v30 & 1) == 0)
          break;
        if (__OFADD__(v29, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (__OFADD__(objc_msgSend(v2, sel__deprecated_scanLocation), v29 + 1))
          goto LABEL_51;
        v26 = StringProtocol._toUTF16Index(_:)();
        ++v29;
      }
      while (v28 != v26 >> 14);
    }
    swift_bridgeObjectRelease();
  }
  v40 = objc_msgSend(v2, sel_string, v68);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44 = specialized Collection.suffix(from:)(v26, (uint64_t)v41, v43);
  v46 = v45;
  swift_bridgeObjectRelease();
  if (v46 >> 14 == v44 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    v51 = v69;
    v52 = objc_msgSend(v69, sel_string);
    v53 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    swift_bridgeObjectRelease();
    v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000) == 0)
      v56 = v53;
    v57 = v56 << 16;
    if ((v55 & 0x1000000000000000) == 0 || (v53 & 0x800000000000000) != 0)
      v47 = v57 | 7;
    else
      v47 = v57 | 0xB;
  }
  else
  {
    swift_retain();
    v47 = v44;
    while (1)
    {
      v48 = Substring.subscript.getter();
      v50 = v49;
      swift_retain();
      LOBYTE(v48) = specialized Sequence.allSatisfy(_:)(v48, v50, v71);
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
        break;
      v47 = Substring.index(after:)();
      if (v46 >> 14 == v47 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v51 = v69;
  }
  if (v26 >> 14 != v47 >> 14)
  {
    v58 = objc_msgSend(v51, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v58);

    if (v47 >> 14 < v26 >> 14)
    {
LABEL_52:
      __break(1u);
    }
    else
    {
      v59 = String.subscript.getter();
      v61 = v60;
      v63 = v62;
      v65 = v64;
      swift_bridgeObjectRelease();
      v66 = objc_msgSend(v51, (SEL)&selRef_setShouldEnableMaterializationDuringAccessorBlock_);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v66);

      lazy protocol witness table accessor for type String and conformance String();
      v67 = StringProtocol._toUTF16Offset(_:)();
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel__deprecated_setScanLocation_, v67);
      MEMORY[0x186DA4634](v59, v61, v63, v65);
      swift_bridgeObjectRelease();
    }
  }
}

Swift::String_optional __swiftcall NSScanner.scanUpToString(_:)(Swift::String a1)
{
  void *v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  id v4;
  id v5;
  unint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t (**v60)(uint64_t, void *);
  int v61;
  void *v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  BOOL v66;
  uint64_t ObjectType;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  Swift::String_optional result;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t (**object)(uint64_t, void *);
  unint64_t v111;
  unint64_t v112;
  id v113;
  unint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t (**v117)(uint64_t, void *);
  _OWORD v118[2];
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;

  v2 = HIBYTE(a1._object) & 0xF;
  object = (uint64_t (**)(uint64_t, void *))a1._object;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v2 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
LABEL_73:
    v90 = 0;
    v91 = 0;
LABEL_76:
    v22 = (char *)v90;
    v23 = v91;
    goto LABEL_86;
  }
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = objc_msgSend(v1, sel_string);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v111 = v6;
  v112 = (unint64_t)v5;

  v7 = objc_msgSend(v1, sel_charactersToBeSkipped);
  v115 = v1;
  v109 = countAndFlagsBits;
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = *(_QWORD *)&v118[0];
    *(_BYTE *)(v9 + 24) = 0;

    v10 = objc_msgSend(v1, sel_string);
    v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;

    v13 = objc_msgSend(v1, (SEL)&selRef_setShouldEnableMaterializationDuringAccessorBlock_);
    v14 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v119 = v14;
    v120 = v16;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v17 = StringProtocol._toUTF16Index(_:)();
    v18 = v17;
    v19 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v19 = v14 & 0xFFFFFFFFFFFFLL;
    v20 = 4 * v19;
    if (4 * v19 != v17 >> 14)
    {
      v21 = 0;
      while (1)
      {
        v22 = (char *)String.Index.samePosition(in:)();
        if ((v23 & 1) == 0)
          goto LABEL_13;
        v24 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        v119 = v14;
        v120 = v16;
        v25 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        v26 = __OFADD__(v25, v24);
        v22 = &v25[v24];
        if (v26)
          goto LABEL_80;
        v18 = StringProtocol._toUTF16Index(_:)();
        ++v21;
        if (v20 == v18 >> 14)
          goto LABEL_13;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    v27 = specialized Collection.suffix(from:)(v18, (uint64_t)v113, v12);
    v29 = v28;
    swift_bridgeObjectRelease();
    if (v29 >> 14 == v27 >> 14)
    {
      swift_bridgeObjectRelease();
      v30 = v115;
      v31 = v111;
LABEL_28:
      v49 = objc_msgSend(v30, sel_string);
      v50 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;
      swift_release();

      swift_bridgeObjectRelease();
      v53 = HIBYTE(v52) & 0xF;
      if ((v52 & 0x2000000000000000) == 0)
        v53 = v50;
      v54 = v53 << 16;
      v43 = v112;
      if ((v52 & 0x1000000000000000) == 0 || (v50 & 0x800000000000000) != 0)
        v37 = v54 | 7;
      else
        v37 = v54 | 0xB;
    }
    else
    {
      swift_retain();
      v44 = v27;
      while (1)
      {
        v45 = v44;
        v46 = Substring.subscript.getter();
        v48 = v47;
        swift_retain();
        LOBYTE(v46) = specialized Sequence.allSatisfy(_:)(v46, v48, v9);
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
          break;
        v44 = Substring.index(after:)();
        if (v29 >> 14 == v44 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v31 = v111;
          v30 = v115;
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      v31 = v111;
      v43 = v112;
      v37 = v45;
      v30 = v115;
    }
  }
  else
  {
    v32 = objc_msgSend(v1, sel_string);
    v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v119 = v33;
    v120 = v35;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v36 = StringProtocol._toUTF16Index(_:)();
    v37 = v36;
    v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0)
      v38 = v33 & 0xFFFFFFFFFFFFLL;
    v39 = 4 * v38;
    if (4 * v38 != v36 >> 14)
    {
      v40 = 0;
      do
      {
        v22 = (char *)String.Index.samePosition(in:)();
        if ((v23 & 1) == 0)
          break;
        v41 = v40 + 1;
        if (__OFADD__(v40, 1))
          goto LABEL_82;
        v119 = v33;
        v120 = v35;
        v42 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        v26 = __OFADD__(v42, v41);
        v22 = &v42[v41];
        if (v26)
          goto LABEL_83;
        v37 = StringProtocol._toUTF16Index(_:)();
        ++v40;
      }
      while (v39 != v37 >> 14);
    }
    swift_bridgeObjectRelease();
    v30 = v115;
    v31 = v111;
    v43 = v112;
  }
  v55 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v55 = v43 & 0xFFFFFFFFFFFFLL;
  v56 = 7;
  if (((v31 >> 60) & ((v43 & 0x800000000000000) == 0)) != 0)
    v56 = 11;
  v114 = v56 | (v55 << 16);
  v57 = 4 * v55;
  v106 = v37;
  v108 = 4 * v55;
  while (1)
  {
    v22 = (char *)objc_msgSend(v30, sel_caseSensitive);
    if (v57 < v37 >> 14)
    {
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    v58 = (int)v22;
    if (objc_msgSend(v30, sel_locale))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v118, 0, sizeof(v118));
    }
    outlined init with take of Any?((uint64_t)v118, (uint64_t)&v119);
    if (v121)
    {
      if (swift_dynamicCast())
      {
        v59 = v116;
        v60 = v117;
        goto LABEL_50;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v119);
    }
    v59 = 0;
    v60 = 0;
LABEL_50:
    v61 = v58 ^ 1;
    v119 = v109;
    v120 = (unint64_t)object;
    *(_QWORD *)&v118[0] = v43;
    *((_QWORD *)&v118[0] + 1) = v31;
    if (!(v59 | v31 & 0x1000000000000000))
      break;
    v107 = v58 ^ 1u;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    v62 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v63 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v22 = (char *)StringProtocol._toUTF16Offsets(_:)();
    v64 = v22;
    v65 = v23 - v22;
    v66 = __OFSUB__(v23, v22);
    if (v59)
    {
      if (v66)
        goto LABEL_81;
      ObjectType = swift_getObjectType();
      v68 = (void *)v60[62](ObjectType, v60);
      v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_locale_, v63, v107, v64, v65, v68);
      v71 = v70;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

    }
    else
    {
      if (v66)
        goto LABEL_84;
      v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_, v63, v107, v22, v65);
      v71 = v86;
      swift_unknownObjectRelease();
      v22 = (char *)swift_unknownObjectRelease();
    }
    v30 = v115;
    v31 = v111;
    v43 = v112;
    if (v69 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      swift_unknownObjectRelease();
      goto LABEL_71;
    }
    v23 = &v69[v71];
    if (__OFADD__(v69, v71))
      goto LABEL_78;
    StringProtocol._toUTF16Indices(_:)();
    v37 = v87;
    swift_unknownObjectRelease();
LABEL_66:
    v88 = String.Index.samePosition(in:)();
    if ((v23 & 1) == 0)
    {
      v89 = v88;
      String.Index.samePosition(in:)();
      if ((v23 & 1) == 0)
      {
        v114 = v89;
        goto LABEL_71;
      }
    }
    v57 = v108;
    if (v108 <= v37 >> 14)
      goto LABEL_71;
  }
  swift_bridgeObjectRetain();
  v72 = String.subscript.getter();
  v74 = v73;
  v76 = v75;
  v78 = v77;
  swift_bridgeObjectRelease();
  v116 = v109;
  v117 = object;
  swift_bridgeObjectRetain();
  v79 = Substring.init<A>(_:)();
  if ((v72 ^ v74) >= 0x4000 && (v79 ^ v80) >> 14)
  {
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v79, v80, v81, v82, 0, 0, v61, 0, 0, v72, v74, v76, v78);
    v37 = v83;
    v85 = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v115;
    if ((v85 & 1) != 0)
      goto LABEL_71;
    v31 = v111;
    v43 = v112;
    goto LABEL_66;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = v115;
LABEL_71:
  v22 = (char *)v106;
  if (v106 >> 14 == v114 >> 14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  if (v114 >> 14 >= v106 >> 14)
  {
    v92 = String.subscript.getter();
    v94 = v93;
    v96 = v95;
    v98 = v97;
    swift_bridgeObjectRelease();
    v99 = objc_msgSend(v30, sel_string);
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    v102 = v101;

    v119 = (unint64_t)v100;
    v120 = v102;
    lazy protocol witness table accessor for type String and conformance String();
    v103 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel__deprecated_setScanLocation_, v103);
    v90 = MEMORY[0x186DA4634](v92, v94, v96, v98);
    v91 = v104;
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  result.value._object = v23;
  result.value._countAndFlagsBits = (uint64_t)v22;
  return result;
}

unint64_t lazy protocol witness table accessor for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation;
  if (!lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSScanner.NumberRepresentation, &type metadata for NSScanner.NumberRepresentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation);
  }
  return result;
}

uint64_t sub_181EC0F6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NSScanner.currentIndex.getter();
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NSScanner.NumberRepresentation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181EC0FE4 + 4 * byte_18216EE65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181EC1018 + 4 * byte_18216EE60[v4]))();
}

uint64_t sub_181EC1018(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EC1020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EC1028);
  return result;
}

uint64_t sub_181EC1034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EC103CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181EC1040(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EC1048(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

BOOL static PredicateExpressions.ArithmeticOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ArithmeticOperator.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7463617274627573;
  if (*v0 != 1)
    v1 = 0x796C7069746C756DLL;
  if (*v0)
    return v1;
  else
    return 6579297;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ArithmeticOperator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PredicateExpressions.ArithmeticOperator.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys, &unk_1E0F235E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys, &unk_1E0F235E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys, &unk_1E0F235E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys, &unk_1E0F235E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys, &unk_1E0F23690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys, &unk_1E0F23690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys, &unk_1E0F23690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys, &unk_1E0F236B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys, &unk_1E0F236B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys, &unk_1E0F236B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys, &unk_1E0F23670);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys, &unk_1E0F23670);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys, &unk_1E0F23670);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

Swift::Int PredicateExpressions.ArithmeticOperator.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ArithmeticOperator.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for PredicateExpressions.ArithmeticOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ArithmeticOperator@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PredicateExpressions.ArithmeticOperator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ArithmeticOperator(_QWORD *a1)
{
  return PredicateExpressions.ArithmeticOperator.encode(to:)(a1);
}

void PredicateExpressions.Arithmetic.op.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t PredicateExpressions.Arithmetic.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Arithmetic.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 64));
}

void PredicateExpressions.Arithmetic.init(lhs:rhs:op:)()
{
  type metadata accessor for PredicateExpressions.Arithmetic();
}

uint64_t sub_181EC1AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t result;

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(&v5[*(int *)(a1 + 60)], v4, v2);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(&v5[*(int *)(a1 + 64)], v3, v1);
  *v5 = v6;
  return result;
}

uint64_t PredicateExpressions.Arithmetic.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _BYTE *v20;
  void (*v21)(char *, uint64_t);
  _QWORD v22[2];
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;

  v22[1] = a3;
  v6 = a2[4];
  v7 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v22 - v14;
  v16 = *a1;
  v23 = v3;
  v25 = v16;
  v17 = v24;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v25, v7, v6, v13);
  if (!v17)
  {
    v19 = AssociatedTypeWitness;
    v20 = v23;
    v25 = v16;
    (*(void (**)(uint64_t *, _QWORD))(a2[5] + 16))(&v25, a2[3]);
    if (*v20)
    {
      if (*v20 == 1)
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      else
        dispatch thunk of static Numeric.* infix(_:_:)();
    }
    else
    {
      MEMORY[0x186DA55B8](v15, v11, v19, *(_QWORD *)(a2[6] + 8));
    }
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v11, v19);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v19);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Arithmetic<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Arithmetic.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Arithmetic<A, B>(lhs:rhs:op:)()
{
  type metadata accessor for PredicateExpressions.Arithmetic();
}

uint64_t sub_181EC1D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t result;

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(&v5[*(int *)(a1 + 60)], v4, v2);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(&v5[*(int *)(a1 + 64)], v3, v1);
  *v5 = v6;
  return result;
}

uint64_t PredicateExpressions.Arithmetic.description.getter()
{
  unsigned __int8 *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  __int128 v6;

  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42);
  v1._object = (void *)0x800000018230F4F0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x74617265706F202CLL;
  v2._object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(_QWORD *)&v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A736872202CLL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return *(_QWORD *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Arithmetic<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator, &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator, &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ArithmeticOperator, &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

void PredicateExpressions.Arithmetic<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[3] = a5;
  v14[4] = a4;
  v14[8] = a3;
  v14[6] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[5] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[7] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14[9] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.Arithmetic();
}

uint64_t sub_181EC2168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = v8;
  *(_QWORD *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v10 = *(_BYTE **)(v4 - 192);
  v11 = &v10[*(int *)(a1 + 60)];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 32);
  v13 = *(_QWORD *)(v4 - 136);
  *(_QWORD *)(v4 - 136) = v1;
  v12(v11, v13, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v14 = *(_QWORD *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 32))(&v10[*(int *)(a1 + 64)], v14, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v15 = *(_QWORD *)(v4 - 128);
  *v10 = *(_BYTE *)(v4 - 65);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(v16 + 16))(*(_QWORD *)(v4 - 184), v10, a1);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v10, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  _QWORD v13[4];

  v5 = *a3;
  v6 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Arithmetic<A, B>);
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  v13[2] = v10;
  v13[3] = v9;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>, a2, v13);
  v12[0] = v8;
  v12[1] = v7;
  v12[2] = v10;
  v12[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>, a2, v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Arithmetic<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Arithmetic<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Arithmetic<A, B>(_QWORD *a1)
{
  return PredicateExpressions.Arithmetic<>.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PredicateExpressions.ArithmeticOperator()
{
  return &type metadata for PredicateExpressions.ArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Arithmetic(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0xFD)
    v7 = 253;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 1) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFD)
      {
        v19 = (unint64_t)&a1[v8 + 1] & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *a1;
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 1) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181EC2628 + 4 * byte_18216EF00[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Arithmetic(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFD)
    v8 = 253;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ArithmeticOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181EC2954 + 4 * byte_18216EF13[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181EC2988 + 4 * byte_18216EF0E[v4]))();
}

uint64_t sub_181EC2988(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EC2990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EC2998);
  return result;
}

uint64_t sub_181EC29A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EC29ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181EC29B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EC29B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  return &unk_1E0F235E0;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  return &unk_1E0F23670;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  return &unk_1E0F236B0;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  return &unk_1E0F23690;
}

uint64_t specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6579297 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463617274627573 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796C7069746C756DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void _FileManagerImpl.url(for:in:appropriateFor:create:)(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, char a4@<W3>, Swift::String *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *countAndFlagsBits;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  void **v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  objc_class *v32;
  id v33;
  id v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t object;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  char v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSValue *v64;
  Swift::Int v65;
  unint64_t v66;
  id v67;
  NSValue *v68;
  NSValue *v69;
  Swift::String v70;
  NSFileManager v71;
  uint64_t v72;
  id v74;
  void *v75;
  NSValue *v76;
  __CFString *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  unsigned __int8 v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  Swift::String *v90;
  id v91;
  objc_class *v92;
  id v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  Swift::String v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v7 = a2;
  v102 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (!*a3)
  {
    if (a2 != 8)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (a1 == 102)
  {
    v11 = MEMORY[0x186DA9F5C](v5);
    if (v11)
    {
      v12 = (void *)v11;
      v99._countAndFlagsBits = 0;
      swift_retain();
      v13 = v10;
      swift_retain();
      v14 = objc_msgSend(v12, sel__URLForTrashingItemAtURL_create_error_, v13, a4 & 1, &v99);
      goto LABEL_5;
    }
    goto LABEL_78;
  }
  if (a2 == 8)
  {
LABEL_14:
    v7 = 1032;
    goto LABEL_15;
  }
  if (a2 == 1)
  {
    if (a1 == 99)
    {
      v19 = MEMORY[0x186DA9F5C](v5);
      if (v19)
      {
        v12 = (void *)v19;
        v99._countAndFlagsBits = 0;
        swift_retain();
        v20 = v10;
        swift_retain();
        v14 = objc_msgSend(v12, sel__URLForReplacingItemAtURL_error_, v20, &v99);
LABEL_5:
        v15 = v14;

        countAndFlagsBits = (void *)v99._countAndFlagsBits;
        if (v15)
        {
          URL.init(reference:)(v15, &v99);
          v94 = v99;
          v17 = v100;
          v18 = countAndFlagsBits;
          outlined consume of URL?(v10);

          *a5 = v94;
          a5[1]._countAndFlagsBits = v17;
          return;
        }
        goto LABEL_32;
      }
LABEL_78:
      LODWORD(v88) = 0;
      v87 = 48;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v7 = 1;
  }
LABEL_15:
  v94._countAndFlagsBits = v5;
  *(_BYTE *)(swift_allocObject() + 16) = 1;
  v21 = specialized _copySequenceToContiguousArray<A>(_:)(a1, v7 & 0xC0F, (void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:));
  swift_release();
  v22 = v21[2];
  if (v7 == 1032)
  {
    if (v22)
    {
      v23 = &v21[3 * v22];
      v24 = (void **)(v23 + 1);
      v25 = (void **)(v23 + 2);
      v26 = v23 + 3;
      goto LABEL_20;
    }
LABEL_26:
    swift_release();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v38 = objc_allocWithZone((Class)NSError);
    v39 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v40 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, 256, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v10 = objc_msgSend(v40, sel_domain);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    countAndFlagsBits = v42;

    if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
      && countAndFlagsBits == v43)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        __break(1u);
LABEL_32:
        if (countAndFlagsBits)
        {
          countAndFlagsBits;
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1)
            swift_once();
          v58 = (id)_nilObjCError;
        }
        swift_willThrow();
        outlined consume of URL?(v10);
        return;
      }
    }
    swift_willThrow();
    return;
  }
  if (!v22)
    goto LABEL_26;
  v24 = (void **)(v21 + 4);
  v25 = (void **)(v21 + 5);
  v26 = v21 + 6;
LABEL_20:
  v27 = *v26;
  v28 = *v25;
  v29 = *v24;
  swift_retain();
  v30 = v29;
  swift_retain();
  swift_release();
  if ((a4 & 1) == 0)
  {
LABEL_70:
    a5->_countAndFlagsBits = (uint64_t)v30;
    a5->_object = v28;
    a5[1]._countAndFlagsBits = v27;
    return;
  }
  v31 = MEMORY[0x186DA9F5C](v94._countAndFlagsBits);
  if (!v31)
    goto LABEL_78;
  v32 = (objc_class *)v31;
  swift_retain();
  v33 = v30;
  swift_retain();
  v93 = v33;
  v91 = v30;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v92 = v32;
    v90 = a5;
    v100 = v27;
    v34 = v33;
    swift_retain();
    swift_retain();
    v35 = URL.path(percentEncoded:)(1);
    v36 = v35._countAndFlagsBits;
    v99 = v35;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v35._object;
    }
    else
    {
      object = (unint64_t)v35._object;
      if ((specialized BidirectionalCollection.last.getter(v35._countAndFlagsBits, (unint64_t)v35._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v99._object;
        v36 = v99._countAndFlagsBits;
      }
    }
    v96 = Set.init(minimumCapacity:)();
    v59 = specialized Set._Variant.insert(_:)(&v98, 0x2FuLL);
    v60 = v96;
    v61 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v61 = v36 & 0xFFFFFFFFFFFFLL;
    if (v61)
    {
      v89 = v34;
      v96 = v36;
      v97 = object;
      MEMORY[0x1E0C80A78](v59);
      v87 = (uint64_t)&v96;
      v88 = v60;
      swift_bridgeObjectRetain();
      v62 = v95;
      v63 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v86, v36, object);
      v95 = v62;
      if (v64 == (NSValue *)1)
      {
        v65 = v96;
        v66 = v97;
        swift_bridgeObjectRetain();
        v67 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v65, v66, v60);
        v69 = v68;
        swift_bridgeObjectRelease();
      }
      else
      {
        v67 = v63;
        v69 = v64;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v89;
      if (!v69)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 = 0;
        v69 = (NSValue *)0xE000000000000000;
        goto LABEL_60;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v67 = 0;
      v69 = (NSValue *)0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_60:
    swift_release();
    swift_release();

    a5 = v90;
LABEL_61:
    v32 = v92;
    goto LABEL_62;
  }
  v46 = objc_msgSend(v33, sel__parameterString);
  if (v46)
  {
    v47 = v46;
    v92 = v32;
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v50 = v49;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v51 = objc_msgSend(v33, sel_path)) != 0)
    {
      v52 = v51;
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v55 = v54;

      v99._countAndFlagsBits = (uint64_t)v53;
      v99._object = v55;
      swift_bridgeObjectRetain();
      v56._countAndFlagsBits = 59;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v57._countAndFlagsBits = (uint64_t)v48;
      v57._object = v50;
      String.append(_:)(v57);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v99._countAndFlagsBits = 59;
      v99._object = (void *)0xE100000000000000;
      v70._countAndFlagsBits = (uint64_t)v48;
      v70._object = v50;
      String.append(_:)(v70);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v69 = (NSValue *)v99._object;
    v67 = (id)v99._countAndFlagsBits;
    goto LABEL_61;
  }
  v74 = objc_msgSend(v33, sel_path);
  if (v74)
  {
    v75 = v74;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v69 = v76;
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    swift_release();

    v67 = 0;
    v69 = (NSValue *)0xE000000000000000;
  }
LABEL_62:
  v71.super.isa = v32;
  v71._delegate = v67;
  v71._weakDelegateValue = v69;
  _LogSpecialFolderRecreation(_:_:)(v71, *(Swift::String *)&v72);

  swift_bridgeObjectRelease();
  v96 = MEMORY[0x1E0DEE9E0];
  if (v7 == 1)
  {
    v101 = MEMORY[0x1E0DEB418];
    v99._countAndFlagsBits = 448;
    v77 = CFSTR("NSFilePosixPermissions");
  }
  else
  {
    if (v7 != 1032)
      goto LABEL_67;
    v78 = MEMORY[0x1E0DEB418];
    v101 = MEMORY[0x1E0DEB418];
    v99._countAndFlagsBits = 493;
    specialized Dictionary.subscript.setter((uint64_t)&v99, CFSTR("NSFilePosixPermissions"));
    v101 = v78;
    v99._countAndFlagsBits = 0;
    specialized Dictionary.subscript.setter((uint64_t)&v99, CFSTR("NSFileOwnerAccountID"));
    v101 = v78;
    v99._countAndFlagsBits = 80;
    v77 = CFSTR("NSFileGroupOwnerAccountID");
  }
  specialized Dictionary.subscript.setter((uint64_t)&v99, v77);
LABEL_67:
  v79 = MEMORY[0x186DA9F5C](v94._countAndFlagsBits);
  if (!v79)
    goto LABEL_78;
  v80 = (void *)v79;
  type metadata accessor for NSFileAttributeKey(0);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  v81 = v93;
  v82 = _NativeDictionary.bridged()();
  v99._countAndFlagsBits = 0;
  v83 = objc_msgSend(v80, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v81, 1, v82, &v99);

  swift_unknownObjectRelease();
  if ((v83 & 1) != 0)
  {
    v84 = (id)v99._countAndFlagsBits;
    v30 = v91;
    goto LABEL_70;
  }
  if (v99._countAndFlagsBits)
  {
    (id)v99._countAndFlagsBits;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v85 = (id)_nilObjCError;
  }
  swift_willThrow();
  swift_release();
  swift_release();

}

void _FileManagerImpl.getRelationship(_:ofDirectoryAt:toItemAt:)(uint64_t *a1, id *a2, id *a3)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  id v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  char v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  char v103;
  void *v104;
  unsigned __int8 v105;
  id v106;
  uint64_t v107;
  char v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  char v113;
  void *v114;
  unsigned __int8 v115;
  uint64_t v116;
  void *v117;
  Swift::Int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  void *v154;
  uint64_t v155;
  id v156;
  char v157;
  uint64_t v158;
  void *v159;
  id v160;
  Swift::Int v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  void *v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  void *v198;
  Swift::Int v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  id v231;
  void *v232;
  uint64_t v233;
  id v234;
  void *v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  void *v240;
  id v241;
  uint64_t v242;
  char v243;
  void *v244;
  unsigned __int8 v245;
  id v246;
  id v247;
  id v248;
  void *v249;
  void *v250;
  id v251;
  uint64_t v252;
  id v253;
  id v254;
  id v255;
  uint64_t v256;
  id v257;
  id v258;
  id v259;
  _QWORD *v260;
  _QWORD *v261;
  id v262;
  id v264;
  uint64_t v265;
  id v266;
  _QWORD *v267;
  id v268;
  id v269;
  _QWORD *v270;
  _QWORD *v271;
  id v272;
  id v273;
  id v274;
  uint64_t v275;
  void *v276;
  void *v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  v259 = *a3;
  v266 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = (void *)*MEMORY[0x1E0C99948];
  v3[4] = *MEMORY[0x1E0C99948];
  v270 = v3 + 4;
  v5 = (void *)*MEMORY[0x1E0C99BC8];
  v6 = (void *)*MEMORY[0x1E0C999D0];
  v3[5] = *MEMORY[0x1E0C99BC8];
  v3[6] = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v7 = static _SetStorage.allocate(capacity:)();
  v8 = v7 + 56;
  v257 = v4;
  v253 = v5;
  v264 = v6;
  v9 = 0;
  v275 = v7;
  do
  {
    v11 = (void *)v270[v9];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    Hasher.init(_seed:)();
    v12 = v11;
    v10 = v275;
    String.hash(into:)();
    v13 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v14 = -1 << *(_BYTE *)(v275 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
    v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v275 + 48) + 8 * v15));
      v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v21 == v22)
        goto LABEL_2;
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
        goto LABEL_3;
      v14 = ~v14;
      v15 = (v15 + 1) & v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
      v18 = 1 << v15;
      v10 = v275;
      if ((v17 & (1 << v15)) != 0)
      {
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v275 + 48) + 8 * v15));
        v27 = v26;
        if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v27 == v28)
          goto LABEL_2;
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0)
          goto LABEL_3;
        v15 = (v15 + 1) & v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
        v18 = 1 << v15;
        v10 = v275;
        if ((v17 & (1 << v15)) != 0)
        {
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v275 + 48) + 8 * v15));
          v33 = v32;
          if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v33 == v34)
          {
LABEL_2:
            swift_bridgeObjectRelease_n();
          }
          else
          {
            while (1)
            {
              v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v35 & 1) != 0)
                break;
              v15 = (v15 + 1) & v14;
              v16 = v15 >> 6;
              v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
              v18 = 1 << v15;
              v10 = v275;
              if ((v17 & (1 << v15)) == 0)
                goto LABEL_28;
              v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v275 + 48) + 8 * v15));
              v38 = v37;
              if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v38 == v39)
                goto LABEL_2;
            }
          }
LABEL_3:

          v10 = v275;
          goto LABEL_4;
        }
      }
    }
LABEL_28:
    *(_QWORD *)(v8 + 8 * v16) = v18 | v17;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v15) = v12;
    v41 = *(_QWORD *)(v10 + 16);
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
    {
      __break(1u);
LABEL_232:
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v246 = (id)_nilObjCError;
LABEL_235:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      swift_release_n();

      return;
    }
    *(_QWORD *)(v10 + 16) = v43;
LABEL_4:
    ++v9;
  }
  while (v9 != 3);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v44 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v44);
  swift_release();
  *(_QWORD *)&v278 = 0;
  v45 = objc_msgSend(v266, sel_resourceValuesForKeys_error_, _ContiguousArrayBuffer._asCocoaArray()(), &v278);
  swift_unknownObjectRelease();
  v46 = (void *)v278;
  if (!v45)
  {
    if (!(_QWORD)v278)
    {
      if (one-time initialization token for _nilObjCError != -1)
        goto LABEL_246;
      goto LABEL_69;
    }
    (id)v278;
LABEL_70:
    swift_willThrow();
    swift_release();
    return;
  }
  v47 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v46;

  *(_QWORD *)&v278 = v47;
  *((_QWORD *)&v278 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = URLResourceValues._get(_:)(v264);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = 2;
    goto LABEL_92;
  }
  v265 = v47;
  v51 = (_QWORD *)swift_allocObject();
  v52 = (void *)*MEMORY[0x1E0C99910];
  v51[4] = *MEMORY[0x1E0C99910];
  v271 = v51 + 4;
  v51[5] = v257;
  v51[6] = v253;
  v53 = static _SetStorage.allocate(capacity:)();
  v54 = v53 + 56;
  v55 = v52;
  v258 = v257;
  v254 = v253;
  v56 = 0;
  v267 = (_QWORD *)(v53 + 56);
  while (2)
  {
    v57 = (void *)v271[v56];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    Hasher.init(_seed:)();
    v58 = v57;
    String.hash(into:)();
    v59 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v60 = -1 << *(_BYTE *)(v53 + 32);
    v61 = v59 & ~v60;
    v62 = v61 >> 6;
    v63 = *(_QWORD *)(v54 + 8 * (v61 >> 6));
    v64 = 1 << v61;
    if (((1 << v61) & v63) == 0)
      goto LABEL_62;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v53 + 48) + 8 * v61));
    v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v67 == v68)
      goto LABEL_36;
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v70 & 1) != 0)
      goto LABEL_37;
    v71 = ~v60;
    v61 = (v61 + 1) & v71;
    v62 = v61 >> 6;
    v54 = v53 + 56;
    v63 = v267[v61 >> 6];
    v64 = 1 << v61;
    if ((v63 & (1 << v61)) == 0)
      goto LABEL_62;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v53 + 48) + 8 * v61));
    v74 = v73;
    if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v74 == v75)
      goto LABEL_36;
    v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v77 & 1) != 0)
      goto LABEL_37;
    v61 = (v61 + 1) & v71;
    v62 = v61 >> 6;
    v54 = v53 + 56;
    v63 = v267[v61 >> 6];
    v64 = 1 << v61;
    if ((v63 & (1 << v61)) == 0)
    {
LABEL_62:
      *(_QWORD *)(v54 + 8 * v62) = v64 | v63;
      *(_QWORD *)(*(_QWORD *)(v53 + 48) + 8 * v61) = v58;
      v88 = *(_QWORD *)(v53 + 16);
      v42 = __OFADD__(v88, 1);
      v89 = v88 + 1;
      if (v42)
      {
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        swift_once();
LABEL_69:
        v99 = (id)_nilObjCError;
        goto LABEL_70;
      }
      *(_QWORD *)(v53 + 16) = v89;
      goto LABEL_38;
    }
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v53 + 48) + 8 * v61));
    v80 = v79;
    if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v80 == v81)
    {
LABEL_36:
      swift_bridgeObjectRelease_n();
      goto LABEL_37;
    }
    while (1)
    {
      v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v82 & 1) != 0)
        break;
      v61 = (v61 + 1) & v71;
      v62 = v61 >> 6;
      v54 = v53 + 56;
      v63 = v267[v61 >> 6];
      v64 = 1 << v61;
      if ((v63 & (1 << v61)) == 0)
        goto LABEL_62;
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v53 + 48) + 8 * v61));
      v85 = v84;
      if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v85 == v86)
        goto LABEL_36;
    }
LABEL_37:

    v54 = v53 + 56;
LABEL_38:
    if (++v56 != 3)
      continue;
    break;
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v90 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v90);
  swift_release();
  v91 = _ContiguousArrayBuffer._asCocoaArray()();
  *(_QWORD *)&v278 = 0;
  v92 = objc_msgSend(v259, sel_resourceValuesForKeys_error_, v91, &v278);
  swift_unknownObjectRelease();
  v93 = (void *)v278;
  if (!v92)
  {
    if ((_QWORD)v278)
    {
      (id)v278;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
LABEL_249:
        swift_once();
      v109 = (id)_nilObjCError;
    }
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v94 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v95 = v93;

  if (*(_QWORD *)(v94 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v96 = v258;
    v97 = specialized __RawDictionaryStorage.find<A>(_:)(v96);
    if ((v98 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v94 + 56) + 32 * v97, (uint64_t)&v278);
    }
    else
    {
      v278 = 0u;
      v279 = 0u;
    }

  }
  else
  {
    v278 = 0u;
    v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v100 = v276;
  }
  else
  {
    v100 = 0;
    v276 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v100)
  {
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  if (*(_QWORD *)(v265 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v101 = v258;
    v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101);
    if ((v103 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v265 + 56) + 32 * v102, (uint64_t)&v278);
    }
    else
    {
      v278 = 0u;
      v279 = 0u;
    }

  }
  else
  {
    v278 = 0u;
    v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v104 = v276;
  }
  else
  {
    v104 = 0;
    v276 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v104)
    goto LABEL_255;
  v105 = objc_msgSend(v100, sel_isEqual_, v104);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v105 & 1) == 0)
  {
    if (*(_QWORD *)(v94 + 16))
    {
      v106 = v254;
      v107 = specialized __RawDictionaryStorage.find<A>(_:)(v106);
      if ((v108 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v94 + 56) + 32 * v107, (uint64_t)&v278);
      }
      else
      {
        v278 = 0u;
        v279 = 0u;
      }

    }
    else
    {
      v278 = 0u;
      v279 = 0u;
    }
    if ((swift_dynamicCast() & 1) != 0)
    {
      v110 = v276;
    }
    else
    {
      v110 = 0;
      v276 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v110)
    {
      if (*(_QWORD *)(v265 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v111 = v254;
        v112 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
        if ((v113 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v265 + 56) + 32 * v112, (uint64_t)&v278);
        }
        else
        {
          v278 = 0u;
          v279 = 0u;
        }

      }
      else
      {
        v278 = 0u;
        v279 = 0u;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      if ((swift_dynamicCast() & 1) != 0)
        v114 = v276;
      else
        v114 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v114)
      {
        v115 = objc_msgSend(v110, sel_isEqual_, v114);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((v115 & 1) == 0)
          goto LABEL_32;
        v250 = (void *)*MEMORY[0x1E0C99A48];
        v249 = (void *)*MEMORY[0x1E0C99AA0];
        v272 = v259;
        swift_retain();
        swift_retain();
        while (1)
        {
          v260 = (_QWORD *)swift_allocObject();
          v260[4] = v250;
          v116 = static _SetStorage.allocate(capacity:)();
          v117 = (void *)v260[4];
          v273 = v272;
          swift_retain();
          swift_retain();
          v255 = v250;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
          Hasher.init(_seed:)();
          v268 = v117;
          String.hash(into:)();
          v118 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v119 = -1 << *(_BYTE *)(v116 + 32);
          v120 = v118 & ~v119;
          v121 = v120 >> 6;
          v252 = v116 + 56;
          v122 = *(_QWORD *)(v116 + 56 + 8 * (v120 >> 6));
          v123 = 1 << v120;
          if (((1 << v120) & v122) != 0)
          {
            v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v116 + 48) + 8 * v120));
            v126 = v125;
            if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v126 == v127)
            {
LABEL_146:
              swift_bridgeObjectRelease_n();
LABEL_147:

              v14 = (uint64_t)v273;
              goto LABEL_148;
            }
            v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v129 & 1) != 0)
              goto LABEL_147;
            v130 = ~v119;
            v120 = (v120 + 1) & ~v119;
            v121 = v120 >> 6;
            v131 = v116 + 56;
            v122 = *(_QWORD *)(v252 + 8 * (v120 >> 6));
            v123 = 1 << v120;
            if ((v122 & (1 << v120)) != 0)
            {
              v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v116 + 48) + 8 * v120));
              v134 = v133;
              if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v134 == v135)
                goto LABEL_146;
              v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v137 & 1) != 0)
                goto LABEL_147;
              v120 = (v120 + 1) & v130;
              v121 = v120 >> 6;
              v122 = *(_QWORD *)(v252 + 8 * (v120 >> 6));
              v123 = 1 << v120;
              if ((v122 & (1 << v120)) != 0)
              {
                v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v116 + 48)
                                                                                       + 8 * v120));
                v140 = v139;
                if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v140 == v141)
                  goto LABEL_146;
                v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v144 & 1) != 0)
                  goto LABEL_147;
                v120 = (v120 + 1) & v130;
                v121 = v120 >> 6;
                v131 = v116 + 56;
                while (1)
                {
                  v122 = *(_QWORD *)(v252 + 8 * v121);
                  v123 = 1 << v120;
                  if ((v122 & (1 << v120)) == 0)
                    break;
                  v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v116 + 48)
                                                                                         + 8 * v120));
                  v147 = v146;
                  if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v147 == v148)
                    goto LABEL_146;
                  v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v150 & 1) != 0)
                    goto LABEL_147;
                  v120 = (v120 + 1) & v130;
                  v121 = v120 >> 6;
                }
              }
            }
          }
          else
          {
            v131 = v116 + 56;
          }
          *(_QWORD *)(v131 + 8 * v121) = v123 | v122;
          v14 = (uint64_t)v273;
          *(_QWORD *)(*(_QWORD *)(v116 + 48) + 8 * v120) = v268;
          v142 = *(_QWORD *)(v116 + 16);
          v42 = __OFADD__(v142, 1);
          v143 = v142 + 1;
          if (v42)
            goto LABEL_245;
          *(_QWORD *)(v116 + 16) = v143;
LABEL_148:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v151 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v151);
          swift_release();
          v152 = _ContiguousArrayBuffer._asCocoaArray()();
          *(_QWORD *)&v278 = 0;
          v153 = objc_msgSend((id)v14, sel_resourceValuesForKeys_error_, v152, &v278);
          swift_unknownObjectRelease();
          v154 = (void *)v278;
          if (!v153)
          {
            if (!(_QWORD)v278)
              goto LABEL_232;
            (id)v278;
            goto LABEL_235;
          }
          v155 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v153);
          v156 = v154;
          swift_release();
          swift_release();

          *(_QWORD *)&v278 = v155;
          *((_QWORD *)&v278 + 1) = v116;
          v157 = URLResourceValues._get(_:)(v255);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v157 == 2)
          {
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }
          if ((v157 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 2;
            swift_release();
            swift_release();

            return;
          }
          v261 = (_QWORD *)swift_allocObject();
          v261[4] = v249;
          v158 = static _SetStorage.allocate(capacity:)();
          v159 = (void *)v261[4];
          v269 = (id)v14;
          swift_retain();
          swift_retain();
          v160 = v249;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
          Hasher.init(_seed:)();
          v274 = v159;
          String.hash(into:)();
          v161 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v162 = -1 << *(_BYTE *)(v158 + 32);
          v163 = v161 & ~v162;
          v164 = v163 >> 6;
          v165 = v158 + 56;
          v166 = *(_QWORD *)(v158 + 56 + 8 * (v163 >> 6));
          v167 = 1 << v163;
          if (((1 << v163) & v166) == 0)
          {
LABEL_172:
            *(_QWORD *)(v165 + 8 * v164) = v167 | v166;
            *(_QWORD *)(*(_QWORD *)(v158 + 48) + 8 * v163) = v274;
            v189 = *(_QWORD *)(v158 + 16);
            v42 = __OFADD__(v189, 1);
            v190 = v189 + 1;
            if (v42)
            {
              __break(1u);
LABEL_248:
              __break(1u);
              goto LABEL_249;
            }
            *(_QWORD *)(v158 + 16) = v190;
            goto LABEL_174;
          }
          v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v158 + 48) + 8 * v163));
          v170 = v169;
          if (v168 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v170 != v171)
          {
            v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v172 & 1) != 0)
              goto LABEL_156;
            v173 = ~v162;
            v163 = (v163 + 1) & ~v162;
            v164 = v163 >> 6;
            v166 = *(_QWORD *)(v165 + 8 * (v163 >> 6));
            v167 = 1 << v163;
            if ((v166 & (1 << v163)) == 0)
              goto LABEL_172;
            v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v158 + 48) + 8 * v163));
            v176 = v175;
            if (v174 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v176 != v177)
            {
              v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v178 & 1) != 0)
                goto LABEL_156;
              v163 = (v163 + 1) & v173;
              v164 = v163 >> 6;
              v166 = *(_QWORD *)(v165 + 8 * (v163 >> 6));
              v167 = 1 << v163;
              if ((v166 & (1 << v163)) == 0)
                goto LABEL_172;
              v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v158 + 48) + 8 * v163));
              v181 = v180;
              if (v179 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v181 != v182)
              {
                do
                {
                  v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v183 & 1) != 0)
                    goto LABEL_156;
                  v163 = (v163 + 1) & v173;
                  v164 = v163 >> 6;
                  v166 = *(_QWORD *)(v165 + 8 * (v163 >> 6));
                  v167 = 1 << v163;
                  if ((v166 & (1 << v163)) == 0)
                    goto LABEL_172;
                  v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v158 + 48)
                                                                                         + 8 * v163));
                  v186 = v185;
                }
                while (v184 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v186 != v187);
              }
            }
          }
          swift_bridgeObjectRelease_n();
LABEL_156:

LABEL_174:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v191 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v191);
          swift_release();
          v192 = _ContiguousArrayBuffer._asCocoaArray()();
          *(_QWORD *)&v278 = 0;
          v193 = objc_msgSend(v269, sel_resourceValuesForKeys_error_, v192, &v278);
          swift_unknownObjectRelease();
          v194 = (void *)v278;
          if (!v193)
          {
            if ((_QWORD)v278)
            {
              (id)v278;
            }
            else
            {
              if (one-time initialization token for _nilObjCError != -1)
                swift_once();
              v247 = (id)_nilObjCError;
            }
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            swift_release_n();

            return;
          }
          v195 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v193);
          v196 = v194;
          swift_release();
          swift_release();

          v277 = (void *)v195;
          URLResourceValues.parentDirectory.getter(&v278);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v272 = (id)v278;
          if (!(_QWORD)v278)
            goto LABEL_251;
          v256 = swift_allocObject();
          *(_QWORD *)(v256 + 32) = v258;
          v197 = static _SetStorage.allocate(capacity:)();
          v198 = *(void **)(v256 + 32);
          v251 = v258;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
          Hasher.init(_seed:)();
          v262 = v198;
          String.hash(into:)();
          v199 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v200 = -1 << *(_BYTE *)(v197 + 32);
          v201 = v199 & ~v200;
          v202 = v201 >> 6;
          v203 = v197 + 56;
          v204 = *(_QWORD *)(v197 + 56 + 8 * (v201 >> 6));
          v205 = 1 << v201;
          if (((1 << v201) & v204) != 0)
          {
            v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v197 + 48) + 8 * v201));
            v208 = v207;
            if (v206 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v208 == v209)
              goto LABEL_179;
            v210 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v210 & 1) != 0)
              goto LABEL_181;
            v211 = ~v200;
            v201 = (v201 + 1) & ~v200;
            v202 = v201 >> 6;
            v204 = *(_QWORD *)(v203 + 8 * (v201 >> 6));
            v205 = 1 << v201;
            if ((v204 & (1 << v201)) != 0)
            {
              v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v197 + 48) + 8 * v201));
              v214 = v213;
              if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v214 == v215)
                goto LABEL_179;
              v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v216 & 1) != 0)
                goto LABEL_181;
              v201 = (v201 + 1) & v211;
              v202 = v201 >> 6;
              v204 = *(_QWORD *)(v203 + 8 * (v201 >> 6));
              v205 = 1 << v201;
              if ((v204 & (1 << v201)) != 0)
              {
                v217 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v197 + 48)
                                                                                       + 8 * v201));
                v219 = v218;
                if (v217 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v219 == v220)
                {
LABEL_179:
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  while (1)
                  {
                    v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v221 & 1) != 0)
                      break;
                    v201 = (v201 + 1) & v211;
                    v202 = v201 >> 6;
                    v204 = *(_QWORD *)(v203 + 8 * (v201 >> 6));
                    v205 = 1 << v201;
                    if ((v204 & (1 << v201)) == 0)
                      goto LABEL_197;
                    v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v197 + 48)
                                                                                           + 8 * v201));
                    v224 = v223;
                    if (v222 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v224 == v225)
                      goto LABEL_179;
                  }
                }
LABEL_181:

                goto LABEL_199;
              }
            }
          }
LABEL_197:
          *(_QWORD *)(v203 + 8 * v202) = v205 | v204;
          *(_QWORD *)(*(_QWORD *)(v197 + 48) + 8 * v201) = v262;
          v227 = *(_QWORD *)(v197 + 16);
          v42 = __OFADD__(v227, 1);
          v228 = v227 + 1;
          if (v42)
            goto LABEL_248;
          *(_QWORD *)(v197 + 16) = v228;
LABEL_199:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v229 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v229);
          swift_release();
          v230 = _ContiguousArrayBuffer._asCocoaArray()();
          *(_QWORD *)&v278 = 0;
          v231 = objc_msgSend(v272, sel_resourceValuesForKeys_error_, v230, &v278);
          swift_unknownObjectRelease();
          v232 = (void *)v278;
          if (!v231)
          {
            if ((_QWORD)v278)
            {
              (id)v278;
            }
            else
            {
              if (one-time initialization token for _nilObjCError != -1)
                swift_once();
              v248 = (id)_nilObjCError;
            }
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            return;
          }
          v233 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v231);
          v234 = v232;

          if (*(_QWORD *)(v233 + 16))
          {
            v235 = v251;
            v236 = v251;
            v237 = specialized __RawDictionaryStorage.find<A>(_:)(v236);
            v238 = v265;
            if ((v239 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v233 + 56) + 32 * v237, (uint64_t)&v278);
            }
            else
            {
              v278 = 0u;
              v279 = 0u;
            }

          }
          else
          {
            v278 = 0u;
            v279 = 0u;
            v238 = v265;
            v235 = v251;
          }
          if ((swift_dynamicCast() & 1) != 0)
          {
            v240 = v277;
          }
          else
          {
            v240 = 0;
            v277 = 0;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v240)
            goto LABEL_252;
          if (*(_QWORD *)(v238 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v241 = v235;
            v242 = specialized __RawDictionaryStorage.find<A>(_:)(v241);
            if ((v243 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v238 + 56) + 32 * v242, (uint64_t)&v278);
            }
            else
            {
              v278 = 0u;
              v279 = 0u;
            }

          }
          else
          {
            v278 = 0u;
            v279 = 0u;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          if ((swift_dynamicCast() & 1) != 0)
            v244 = v277;
          else
            v244 = 0;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v244)
            goto LABEL_253;
          v245 = objc_msgSend(v240, sel_isEqual_, v244);
          swift_unknownObjectRelease();
          if ((v245 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 0;
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            swift_unknownObjectRelease();
            return;
          }
          swift_unknownObjectRelease();
          swift_release();
          swift_release();

        }
      }
LABEL_257:
      __break(1u);
      return;
    }
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = 1;
LABEL_92:
  *a1 = v50;
}

uint64_t _FileManagerImpl.getRelationship(_:of:in:toItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  uint64_t result;
  id v23;
  id v24[4];

  v5 = v4;
  v24[3] = *(id *)MEMORY[0x1E0C80C00];
  v9 = *a4;
  v10 = MEMORY[0x186DA9F5C](v4);
  if (!v10)
    goto LABEL_22;
  v11 = (void *)v10;
  if (a3)
    v12 = 0;
  else
    v12 = v9;
  v24[0] = 0;
  v13 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a2, a3, v12, 0, v24);

  v14 = v24[0];
  if (v13)
  {
    URL.init(reference:)(v13, v24);
    v15 = v24[0];
    v16 = v14;

    v17 = (void *)MEMORY[0x186DA9F5C](v5);
    if (v17)
    {
      v18 = v17;
      v24[0] = 0;
      v19 = objc_msgSend(v17, sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_, a1, v15, v9, v24);

      if ((v19 & 1) != 0)
      {
        v20 = v24[0];
      }
      else
      {
        if (v24[0])
        {
          v24[0];
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1)
            swift_once();
          v23 = (id)_nilObjCError;
        }
        swift_willThrow();
      }

      swift_release();
      return swift_release();
    }
LABEL_22:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v24[0])
  {
    v24[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v21 = (id)_nilObjCError;
  }
  return swift_willThrow();
}

id _FileManagerImpl.createDirectory(at:withIntermediateDirectories:attributes:)(uint64_t a1, int a2, uint64_t a3)
{
  int64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  Swift::String *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  Swift::String v12;
  unsigned __int8 v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  Swift::String v17;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _OWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t *v47;
  Swift::String *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  Swift::String v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  Swift::String v88;
  id v89;
  void *v90;
  void *v91;
  unint64_t v92;
  int64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  _QWORD *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _OWORD *v115;
  _OWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _OWORD *v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  _OWORD *v124;
  unint64_t v125;
  int64_t v126;
  unint64_t v127;
  int64_t v128;
  uint64_t *v129;
  Swift::String *v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v150;
  unsigned int v151;
  id result;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  int64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  Swift::String *v169;
  _BYTE v170[32];
  Swift::String v171;
  _QWORD v172[4];
  _OWORD v173[2];
  Swift::String v174;
  _QWORD v175[6];

  v5 = v4;
  v164 = a3;
  LODWORD(v6) = a2;
  v175[5] = *MEMORY[0x1E0C80C00];
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v10 = v7;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v174._countAndFlagsBits = (uint64_t)v10;
    v174._object = v8;
    v175[0] = v9;
    URL.scheme.getter();
    if (v11)
    {
      v163 = v3;
      v12 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
LABEL_10:
        v15 = v10;
        swift_retain();
        swift_retain();
        v162 = (uint64_t)v15;
        if (!_foundation_swift_url_feature_enabled())
          goto LABEL_53;
        LODWORD(v161) = (_DWORD)v6;
        v175[0] = v9;
        v16 = v15;
        swift_retain();
        swift_retain();
        v17 = URL.path(percentEncoded:)(1);
        countAndFlagsBits = v17._countAndFlagsBits;
        v174 = v17;
        swift_bridgeObjectRetain();
        v160 = (int64_t)v16;
        if (String.count.getter() <= 1)
        {
          object = (unint64_t)v17._object;
        }
        else
        {
          object = (unint64_t)v17._object;
          if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            countAndFlagsBits = v174._countAndFlagsBits;
            object = (unint64_t)v174._object;
          }
        }
        v171._countAndFlagsBits = Set.init(minimumCapacity:)();
        v79 = specialized Set._Variant.insert(_:)(&v168, 0x2FuLL);
        v80 = v171._countAndFlagsBits;
        v81 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0)
          v81 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v81)
        {
          v171._countAndFlagsBits = countAndFlagsBits;
          v171._object = (void *)object;
          MEMORY[0x1E0C80A78](v79);
          v155 = (uint64_t)&v171;
          v156 = v80;
          swift_bridgeObjectRetain();
          v82 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v154, countAndFlagsBits, object);
          v158 = (uint64_t)v5;
          if (v83 == 1)
          {
            v84 = v171;
            swift_bridgeObjectRetain();
            v85 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v84._countAndFlagsBits, (unint64_t)v84._object, v80);
            v87 = v86;
            swift_bridgeObjectRelease();
          }
          else
          {
            v85 = (uint64_t)v82;
            v87 = v83;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v93 = v163;
          v5 = (_OWORD *)v158;
          v94 = (void *)v160;
          if (!v87)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v85 = 0;
            v87 = 0xE000000000000000;
            goto LABEL_72;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v85 = 0;
          v87 = 0xE000000000000000;
          v93 = v163;
          v94 = (void *)v160;
        }
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_72:
        swift_release();
        swift_release();

        LOBYTE(v6) = v161;
        goto LABEL_75;
      }
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v163 = v3;
    v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  v20 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v168 = MEMORY[0x1E0DEE9E0];
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v23 = v22;
  v172[0] = v9;
  lazy protocol witness table accessor for type URL and conformance URL();
  v24 = v10;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v21, v23);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v27 = v26;
  v174._countAndFlagsBits = (uint64_t)v24;
  v174._object = v8;
  v175[0] = v9;
  v171 = URL.path(percentEncoded:)(0);
  v6 = &v174;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v25, v27);
  v28 = v168;
  if (*(_QWORD *)(v168 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v20 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v29 = *(_QWORD *)(v168 + 64);
  v161 = v168 + 64;
  v30 = -1;
  v31 = -1 << *(_BYTE *)(v168 + 32);
  v158 = ~v31;
  if (-v31 < 64)
    v30 = ~(-1 << -(char)v31);
  v32 = v30 & v29;
  v160 = (unint64_t)(63 - v31) >> 6;
  v33 = v175;
  v15 = v170;
  v5 = v172;
  v159 = v20 + 8;
  swift_bridgeObjectRetain();
  v163 = 0;
  v162 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v32)
    {
      v164 = (v32 - 1) & v32;
      v42 = __clz(__rbit64(v32)) | (v163 << 6);
      goto LABEL_43;
    }
    v43 = v163 + 1;
    if (__OFADD__(v163, 1))
      goto LABEL_132;
    if (v43 >= v160)
      break;
    v44 = *(_QWORD *)(v161 + 8 * v43);
    v45 = v163 + 1;
    if (!v44)
    {
      v45 = v163 + 2;
      if (v163 + 2 >= v160)
        break;
      v44 = *(_QWORD *)(v161 + 8 * v45);
      if (!v44)
      {
        v45 = v163 + 3;
        if (v163 + 3 >= v160)
          break;
        v44 = *(_QWORD *)(v161 + 8 * v45);
        if (!v44)
        {
          v45 = v163 + 4;
          if (v163 + 4 >= v160)
            break;
          v44 = *(_QWORD *)(v161 + 8 * v45);
          if (!v44)
          {
            v45 = v163 + 5;
            if (v163 + 5 >= v160)
              break;
            v44 = *(_QWORD *)(v161 + 8 * v45);
            if (!v44)
            {
              v45 = v163 + 6;
              if (v163 + 6 >= v160)
                break;
              v44 = *(_QWORD *)(v161 + 8 * v45);
              if (!v44)
              {
                v46 = v163 + 7;
                if (v163 + 7 >= v160)
                  break;
                v44 = *(_QWORD *)(v161 + 8 * v46);
                if (!v44)
                {
                  while (1)
                  {
                    v45 = v46 + 1;
                    if (__OFADD__(v46, 1))
                      goto LABEL_136;
                    if (v45 >= v160)
                      goto LABEL_47;
                    v44 = *(_QWORD *)(v161 + 8 * v45);
                    ++v46;
                    if (v44)
                      goto LABEL_42;
                  }
                }
                v45 = v163 + 7;
              }
            }
          }
        }
      }
    }
LABEL_42:
    v164 = (v44 - 1) & v44;
    v42 = __clz(__rbit64(v44)) + (v45 << 6);
    v163 = v45;
LABEL_43:
    v47 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v42);
    v49 = *v47;
    v48 = (Swift::String *)v47[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v28 + 56) + 40 * v42, (uint64_t)v33);
    v174._countAndFlagsBits = v49;
    v174._object = v48;
    v50 = *((_OWORD *)v33 + 1);
    v165 = *(_OWORD *)v33;
    v166 = v50;
    v167 = v33[4];
    v168 = v49;
    v169 = v48;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v6 = v48;
    outlined init with take of Any(v15, v5);
    outlined init with take of Any(v5, v173);
    outlined init with take of Any(v173, &v171);
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, (uint64_t)v48);
    v52 = v51;
    if ((v53 & 1) != 0)
    {
      v34 = v20[6];
      v35 = v33;
      v36 = v20;
      v37 = v5;
      v38 = v15;
      v39 = v28;
      v40 = (uint64_t *)(v34 + 16 * v51);
      swift_bridgeObjectRelease();
      *v40 = v49;
      v40[1] = (uint64_t)v6;
      v28 = v39;
      v15 = v38;
      v5 = v37;
      v20 = v36;
      v33 = v35;
      v41 = (_OWORD *)(v20[7] + 32 * v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      outlined init with take of Any(&v171, v41);
    }
    else
    {
      if (v20[2] >= v20[3])
      {
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      *(_QWORD *)((char *)v159 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
      v54 = (uint64_t *)(v20[6] + 16 * v51);
      *v54 = v49;
      v54[1] = (uint64_t)v6;
      outlined init with take of Any(&v171, (_OWORD *)(v20[7] + 32 * v51));
      v55 = v20[2];
      v56 = __OFADD__(v55, 1);
      v57 = v55 + 1;
      if (v56)
        goto LABEL_131;
      v20[2] = v57;
    }
    v32 = v164;
  }
LABEL_47:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v58 = objc_allocWithZone((Class)NSError);
  v59 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v58, sel_initWithDomain_code_userInfo_, v59, 518, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v61 = objc_msgSend(v60, sel_domain);
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
  v8 = v63;

  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v8 == v64)
    goto LABEL_121;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return (id)swift_willThrow();
  __break(1u);
LABEL_53:
  v66 = objc_msgSend(v15, sel__parameterString);
  if (v66)
  {
    v67 = v66;
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v70 = v69;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v71 = objc_msgSend(v15, sel_path)) != 0)
    {
      v72 = v71;
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v158 = (uint64_t)v5;
      v74 = v15;
      v76 = v75;

      v174._countAndFlagsBits = (uint64_t)v73;
      v174._object = v76;
      swift_bridgeObjectRetain();
      v77._countAndFlagsBits = 59;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v78._countAndFlagsBits = (uint64_t)v68;
      v78._object = v70;
      String.append(_:)(v78);
      swift_release();
      swift_release();

      v5 = (_OWORD *)v158;
      swift_bridgeObjectRelease();
    }
    else
    {
      v174._countAndFlagsBits = 59;
      v174._object = (void *)0xE100000000000000;
      v88._countAndFlagsBits = (uint64_t)v68;
      v88._object = v70;
      String.append(_:)(v88);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v85 = v174._countAndFlagsBits;
    v87 = (unint64_t)v174._object;
  }
  else
  {
    v89 = objc_msgSend(v15, sel_path);
    if (v89)
    {
      v90 = v89;
      v91 = v15;
      v85 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      v87 = v92;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v85 = 0;
      v87 = 0xE000000000000000;
    }
  }
  v93 = v163;
LABEL_75:
  v95 = HIBYTE(v87) & 0xF;
  if ((v87 & 0x2000000000000000) == 0)
    v95 = v85 & 0xFFFFFFFFFFFFLL;
  if (v95)
  {
    v96 = MEMORY[0x186DA9F5C](v93);
    if (!v96)
    {
      LODWORD(v156) = 0;
      v155 = 48;
      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v97 = (void *)v96;
    v98 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v164)
    {
      type metadata accessor for NSFileAttributeKey(0);
      lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
      swift_bridgeObjectRetain();
      v99 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      v99 = 0;
    }
    v174._countAndFlagsBits = 0;
    v151 = objc_msgSend(v97, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v98, v6 & 1, v99, &v174);

    swift_unknownObjectRelease();
    if (v151)
      return (id)v174._countAndFlagsBits;
    if (v174._countAndFlagsBits)
    {
      (id)v174._countAndFlagsBits;
      return (id)swift_willThrow();
    }
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_128:
      v153 = (id)_nilObjCError;
      return (id)swift_willThrow();
    }
LABEL_137:
    swift_once();
    goto LABEL_128;
  }
  v158 = (uint64_t)v5;
  swift_bridgeObjectRelease();
  v100 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v168 = MEMORY[0x1E0DEE9E0];
  v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v103 = v102;
  v104 = (void *)v162;
  v171._countAndFlagsBits = v162;
  v171._object = v8;
  v172[0] = v9;
  lazy protocol witness table accessor for type URL and conformance URL();
  v105 = v104;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v101, v103);
  v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v108 = v107;
  v174._countAndFlagsBits = (uint64_t)v105;
  v174._object = v8;
  v175[0] = v9;
  v171 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v106, v108);
  v109 = v168;
  if (*(_QWORD *)(v168 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v100 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v110 = *(_QWORD *)(v109 + 64);
  v161 = v109 + 64;
  v111 = -1;
  v112 = -1 << *(_BYTE *)(v109 + 32);
  v157 = ~v112;
  if (-v112 < 64)
    v111 = ~(-1 << -(char)v112);
  v113 = v111 & v110;
  v160 = (unint64_t)(63 - v112) >> 6;
  v114 = v175;
  v115 = v170;
  v116 = v172;
  v159 = v100 + 8;
  swift_bridgeObjectRetain();
  v163 = 0;
  v162 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    if (v113)
    {
      v164 = (v113 - 1) & v113;
      v125 = __clz(__rbit64(v113)) | (v163 << 6);
LABEL_107:
      v129 = (uint64_t *)(*(_QWORD *)(v109 + 48) + 16 * v125);
      v131 = *v129;
      v130 = (Swift::String *)v129[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v109 + 56) + 40 * v125, (uint64_t)v114);
      v174._countAndFlagsBits = v131;
      v174._object = v130;
      v132 = *((_OWORD *)v114 + 1);
      v165 = *(_OWORD *)v114;
      v166 = v132;
      v167 = v114[4];
      v168 = v131;
      v169 = v130;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v133 = v168;
      v134 = (uint64_t)v169;
      outlined init with take of Any(v115, v116);
      outlined init with take of Any(v116, v173);
      outlined init with take of Any(v173, &v171);
      v135 = specialized __RawDictionaryStorage.find<A>(_:)(v133, v134);
      v136 = v135;
      if ((v137 & 1) != 0)
      {
        v117 = v100[6];
        v118 = v114;
        v119 = v100;
        v120 = v116;
        v121 = v115;
        v122 = v109;
        v123 = (uint64_t *)(v117 + 16 * v135);
        swift_bridgeObjectRelease();
        *v123 = v133;
        v123[1] = v134;
        v109 = v122;
        v115 = v121;
        v116 = v120;
        v100 = v119;
        v114 = v118;
        v124 = (_OWORD *)(v100[7] + 32 * v136);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        outlined init with take of Any(&v171, v124);
      }
      else
      {
        if (v100[2] >= v100[3])
          goto LABEL_133;
        *(_QWORD *)((char *)v159 + ((v135 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v135;
        v138 = (uint64_t *)(v100[6] + 16 * v135);
        *v138 = v133;
        v138[1] = v134;
        outlined init with take of Any(&v171, (_OWORD *)(v100[7] + 32 * v135));
        v139 = v100[2];
        v56 = __OFADD__(v139, 1);
        v140 = v139 + 1;
        if (v56)
          goto LABEL_134;
        v100[2] = v140;
      }
      v113 = v164;
      continue;
    }
    break;
  }
  v126 = v163 + 1;
  if (__OFADD__(v163, 1))
    goto LABEL_135;
  if (v126 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v126);
  if (v127)
  {
LABEL_106:
    v164 = (v127 - 1) & v127;
    v125 = __clz(__rbit64(v127)) + (v126 << 6);
    v163 = v126;
    goto LABEL_107;
  }
  v128 = v163 + 2;
  if (v163 + 2 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
    goto LABEL_105;
  v128 = v163 + 3;
  if (v163 + 3 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
    goto LABEL_105;
  v128 = v163 + 4;
  if (v163 + 4 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
    goto LABEL_105;
  v128 = v163 + 5;
  if (v163 + 5 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
    goto LABEL_105;
  v128 = v163 + 6;
  if (v163 + 6 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
    goto LABEL_105;
  v128 = v163 + 7;
  if (v163 + 7 >= v160)
    goto LABEL_115;
  v127 = *(_QWORD *)(v161 + 8 * v128);
  if (v127)
  {
LABEL_105:
    v126 = v128;
    goto LABEL_106;
  }
  while (1)
  {
    v126 = v128 + 1;
    if (__OFADD__(v128, 1))
      __break(1u);
    if (v126 >= v160)
      break;
    v127 = *(_QWORD *)(v161 + 8 * v126);
    ++v128;
    if (v127)
      goto LABEL_106;
  }
LABEL_115:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v141 = objc_allocWithZone((Class)NSError);
  v142 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v143 = objc_msgSend(v141, sel_initWithDomain_code_userInfo_, v142, 4, _NativeDictionary.bridged()(), v157);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v144 = objc_msgSend(v143, sel_domain);
  v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
  v147 = v146;

  if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v147 == v148)
  {
LABEL_121:
    swift_bridgeObjectRelease_n();
    return (id)swift_willThrow();
  }
  v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v150 & 1) == 0)
  {
    __break(1u);
    goto LABEL_121;
  }
  return (id)swift_willThrow();
}

uint64_t _FileManagerImpl.currentDirectoryPath.getter()
{
  uint64_t v0;
  uint64_t isStackAllocationSafe;
  void *v2;
  void *v3;
  id v4;
  id v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t result;
  char v11[1048];
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  outlined init with copy of _FileManagerImpl(v0, (uint64_t)v12);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) == 0)
  {
    v6 = (char *)swift_slowAlloc();
    if (getcwd(v6, 0x402uLL))
    {
      v7 = (void *)MEMORY[0x186DA9F5C](v12);
      if (!v7)
        goto LABEL_12;
      v8 = v7;
      v9 = objc_msgSend(v7, sel_stringWithFileSystemRepresentation_length_, v6, strlen(v6));

      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    }
    else
    {
      v5 = 0;
    }
    MEMORY[0x186DA9E78](v6, -1, -1);
    goto LABEL_11;
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  if (!getcwd(v11, 0x402uLL))
  {
    v5 = 0;
    goto LABEL_11;
  }
  v2 = (void *)MEMORY[0x186DA9F5C](v12);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_stringWithFileSystemRepresentation_length_, v11, strlen(v11));

    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
LABEL_11:
    outlined destroy of _FileManagerImpl((uint64_t)v12);
    return (uint64_t)v5;
  }
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _LogSpecialFolderRecreation(_:_:)(NSFileManager a1, Swift::String a2)
{
  NSValue *weakDelegateValue;
  id delegate;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unsigned int v10;
  unsigned __int8 v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  weakDelegateValue = a1._weakDelegateValue;
  delegate = a1._delegate;
  isa = a1.super.isa;
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v10 = objc_msgSend(v9, sel_BOOLForKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if (v10)
  {
    v11 = -[objc_class fileExistsAtPath:](isa, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v11 & 1) == 0)
    {
      Logger.init()();
      swift_bridgeObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v24 = v21;
        *(_DWORD *)v14 = 136315394;
        v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
        v16 = objc_msgSend(v15, sel_bundleIdentifier);

        v22 = (uint64_t)delegate;
        if (v16)
        {
          v17 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v19 = v18;

        }
        else
        {
          v19 = 0xE600000000000000;
          v17 = 0x296C6C756E28;
        }
        v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2080;
        swift_bridgeObjectRetain();
        v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, (unint64_t)weakDelegateValue, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1817D9000, v12, v13, "*** Application: %s just recreated special folder: %s", (uint8_t *)v14, 0x16u);
        v20 = v21;
        swift_arrayDestroy();
        MEMORY[0x186DA9E78](v20, -1, -1);
        MEMORY[0x186DA9E78](v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t closure #1 in _FileManagerImpl.subpathsOfDirectory(atPath:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 v52;
  _QWORD *v53;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 *v73;
  _OWORD *v74;
  __int128 *v75;
  _QWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  _OWORD *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v106;
  uint64_t result;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 *v133;
  _OWORD *v134;
  __int128 *v135;
  _QWORD *v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  _OWORD *v140;
  unint64_t v141;
  int64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  id v158;
  id v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v165;
  Swift::String v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  int64_t i;
  int64_t j;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[5];
  __int128 v178;
  _QWORD v179[4];
  _OWORD v180[2];
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  _QWORD *v184;

  if (!a1)
  {
    v175 = MEMORY[0x1E0DEE9E0];
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v58 = v57;
    *(_QWORD *)&v178 = a2;
    *((_QWORD *)&v178 + 1) = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v181, (uint64_t)v56, v58);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v61 = v60;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v178);
    if ((_QWORD)v178)
    {
      v177[1] = v179[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v181 = 0u;
      v182 = 0u;
      v183 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v181, (uint64_t)v59, v61);
    v68 = v175;
    if (*(_QWORD *)(v175 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v69 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v69 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v170 = v175 + 64;
    v70 = -1;
    v71 = -1 << *(_BYTE *)(v175 + 32);
    if (-v71 < 64)
      v70 = ~(-1 << -(char)v71);
    v72 = v70 & *(_QWORD *)(v175 + 64);
    v73 = &v182;
    v74 = &v177[1];
    v10 = v179;
    v168 = (unint64_t)(63 - v71) >> 6;
    swift_bridgeObjectRetain();
    i = 0;
    if (v72)
      goto LABEL_50;
LABEL_51:
    v82 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v82 < v168)
    {
      v83 = *(_QWORD *)(v170 + 8 * v82);
      v84 = i + 1;
      if (v83)
        goto LABEL_70;
      v84 = i + 2;
      if (i + 2 < v168)
      {
        v83 = *(_QWORD *)(v170 + 8 * v84);
        if (v83)
          goto LABEL_70;
        v84 = i + 3;
        if (i + 3 < v168)
        {
          v83 = *(_QWORD *)(v170 + 8 * v84);
          if (v83)
            goto LABEL_70;
          v84 = i + 4;
          if (i + 4 < v168)
          {
            v83 = *(_QWORD *)(v170 + 8 * v84);
            if (v83)
              goto LABEL_70;
            v84 = i + 5;
            if (i + 5 < v168)
            {
              v83 = *(_QWORD *)(v170 + 8 * v84);
              if (v83)
                goto LABEL_70;
              v84 = i + 6;
              if (i + 6 < v168)
              {
                v83 = *(_QWORD *)(v170 + 8 * v84);
                if (v83)
                  goto LABEL_70;
                v85 = i + 7;
                if (i + 7 < v168)
                {
                  v83 = *(_QWORD *)(v170 + 8 * v85);
                  if (!v83)
                  {
                    while (1)
                    {
                      v84 = v85 + 1;
                      if (__OFADD__(v85, 1))
                        goto LABEL_151;
                      if (v84 >= v168)
                        goto LABEL_76;
                      v83 = *(_QWORD *)(v170 + 8 * v84);
                      ++v85;
                      if (v83)
                        goto LABEL_70;
                    }
                  }
                  v84 = i + 7;
LABEL_70:
                  v184 = (_QWORD *)((v83 - 1) & v83);
                  v81 = __clz(__rbit64(v83)) + (v84 << 6);
                  for (i = v84; ; v81 = __clz(__rbit64(v72)) | (i << 6))
                  {
                    v86 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v81);
                    v88 = *v86;
                    v87 = v86[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v68 + 56) + 40 * v81, (uint64_t)v73);
                    *(_QWORD *)&v181 = v88;
                    *((_QWORD *)&v181 + 1) = v87;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v89 = v88;
                    outlined init with take of Any(v74, v10);
                    outlined init with take of Any(v10, v180);
                    outlined init with take of Any(v180, &v178);
                    v90 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v87);
                    v91 = v90;
                    if ((v92 & 1) != 0)
                    {
                      v75 = v73;
                      v76 = v10;
                      v77 = v74;
                      v78 = v68;
                      v79 = (uint64_t *)(v69[6] + 16 * v90);
                      swift_bridgeObjectRelease();
                      *v79 = v89;
                      v79[1] = v87;
                      v68 = v78;
                      v74 = v77;
                      v10 = v76;
                      v73 = v75;
                      v80 = (_OWORD *)(v69[7] + 32 * v91);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
                      outlined init with take of Any(&v178, v80);
                      v72 = (unint64_t)v184;
                      if (!v184)
                        goto LABEL_51;
                    }
                    else
                    {
                      if (v69[2] >= v69[3])
                      {
                        __break(1u);
LABEL_145:
                        __break(1u);
LABEL_146:
                        __break(1u);
LABEL_147:
                        __break(1u);
                        goto LABEL_148;
                      }
                      *(_QWORD *)((char *)v69 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v90;
                      v93 = (uint64_t *)(v69[6] + 16 * v90);
                      *v93 = v89;
                      v93[1] = v87;
                      outlined init with take of Any(&v178, (_OWORD *)(v69[7] + 32 * v90));
                      v94 = v69[2];
                      v95 = __OFADD__(v94, 1);
                      v96 = v94 + 1;
                      if (v95)
                        goto LABEL_145;
                      v69[2] = v96;
                      v72 = (unint64_t)v184;
                      if (!v184)
                        goto LABEL_51;
                    }
LABEL_50:
                    v184 = (_QWORD *)((v72 - 1) & v72);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_76:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v97 = objc_allocWithZone((Class)NSError);
    v98 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v99 = objc_msgSend(v97, sel_initWithDomain_code_userInfo_, v98, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v100 = objc_msgSend(v99, sel_domain);
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    if (v101 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v103 != v104)
    {
      v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v106 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  type metadata accessor for _FTSSequence.Iterator();
  swift_allocObject();
  _FTSSequence.Iterator.init(_:_:)(a1, 28);
  v6 = _FTSSequence.Iterator.next()();
  if (v9 == 0xFF)
  {
    v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_95;
  }
  v10 = (_QWORD *)v6;
  v11 = v7;
  v12 = v9;
  v172 = a4;
  v13 = 0;
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_4:
  v15 = v13;
  v184 = v14;
  do
  {
    while (1)
    {
      if ((v12 & 1) != 0)
      {
        v67 = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      v18 = *((unsigned __int16 *)v10 + 44);
      if (v18 <= 0xD)
        break;
LABEL_5:
      outlined consume of _FTSSequence.Element?((uint64_t)v10, v11, v8, v12);
      v10 = (_QWORD *)_FTSSequence.Iterator.next()();
      v11 = v16;
      v12 = v17;
      if (v17 == 0xFF)
        goto LABEL_94;
    }
    v19 = 1 << v18;
    if ((v19 & 0x390A) == 0)
    {
      if ((v19 & 0x490) != 0)
      {
        if (!v10[6])
        {
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        v62 = v8;
        v63 = v11;
        v11 = String.init(cString:)();
        v65 = v64;
        v66 = *((_DWORD *)v10 + 14);
        outlined consume of _FTSSequence.Element?((uint64_t)v10, v63, v62, v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LODWORD(v10) = v66;
        v67 = v65;
LABEL_85:
        v176 = MEMORY[0x1E0DEE9E0];
        v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v110 = v109;
        *(_QWORD *)&v178 = v11;
        *((_QWORD *)&v178 + 1) = v67;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v181, (uint64_t)v108, v110);
        v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v113 = v112;
        URL.init(_fileManagerFailableFileURLWithPath:)(v11, v67, (uint64_t)&v178);
        if ((_QWORD)v178)
        {
          v177[1] = v179[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v181 = 0u;
          v182 = 0u;
          v183 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v181, (uint64_t)v111, v113);
        swift_bridgeObjectRetain();
        if ((_DWORD)v10 == 102)
        {
LABEL_89:
          v114 = 256;
        }
        else
        {
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
LABEL_156:
            *(_QWORD *)&v181 = 0;
            *((_QWORD *)&v181 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v181 = 0xD000000000000014;
            *((_QWORD *)&v181 + 1) = 0x8000000182306980;
            LODWORD(v178) = (_DWORD)v10;
            v166._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v166);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181EC81ACLL);
          }
          v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v117 = v116;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v118 = (int)POSIXErrorCode.rawValue.getter();
          v119 = objc_allocWithZone((Class)NSError);
          v120 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, v118, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v122 = objc_msgSend(v121, sel_domain);
          v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          v125 = v124;

          if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v125 == v126)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v127 & 1) == 0)
              goto LABEL_153;
          }
          *(_QWORD *)&v178 = v121;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v181, (uint64_t)v115, v117);
          v114 = 263;
          switch((int)v10)
          {
            case 1:
            case 13:
              v114 = 257;
              break;
            case 2:
              v114 = 260;
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
              goto LABEL_89;
            case 27:
              break;
            default:
              if ((_DWORD)v10 != 63)
                goto LABEL_89;
              v114 = 258;
              break;
          }
        }
        v167 = v114;
        v128 = v176;
        if (*(_QWORD *)(v176 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v129 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v129 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v171 = v176 + 64;
        v130 = -1;
        v131 = -1 << *(_BYTE *)(v176 + 32);
        if (-v131 < 64)
          v130 = ~(-1 << -(char)v131);
        v132 = v130 & *(_QWORD *)(v176 + 64);
        v133 = &v182;
        v134 = &v177[1];
        v10 = v179;
        v169 = (unint64_t)(63 - v131) >> 6;
        swift_bridgeObjectRetain();
        j = 0;
        if (v132)
          goto LABEL_110;
LABEL_111:
        v142 = j + 1;
        if (!__OFADD__(j, 1))
        {
          if (v142 >= v169)
            goto LABEL_136;
          v143 = *(_QWORD *)(v171 + 8 * v142);
          v144 = j + 1;
          if (!v143)
          {
            v144 = j + 2;
            if (j + 2 >= v169)
              goto LABEL_136;
            v143 = *(_QWORD *)(v171 + 8 * v144);
            if (!v143)
            {
              v144 = j + 3;
              if (j + 3 >= v169)
                goto LABEL_136;
              v143 = *(_QWORD *)(v171 + 8 * v144);
              if (!v143)
              {
                v144 = j + 4;
                if (j + 4 >= v169)
                  goto LABEL_136;
                v143 = *(_QWORD *)(v171 + 8 * v144);
                if (!v143)
                {
                  v144 = j + 5;
                  if (j + 5 >= v169)
                    goto LABEL_136;
                  v143 = *(_QWORD *)(v171 + 8 * v144);
                  if (!v143)
                  {
                    v144 = j + 6;
                    if (j + 6 >= v169)
                      goto LABEL_136;
                    v143 = *(_QWORD *)(v171 + 8 * v144);
                    if (!v143)
                    {
                      v145 = j + 7;
                      if (j + 7 < v169)
                      {
                        v143 = *(_QWORD *)(v171 + 8 * v145);
                        if (v143)
                        {
                          v144 = j + 7;
                          goto LABEL_130;
                        }
                        while (1)
                        {
                          v144 = v145 + 1;
                          if (__OFADD__(v145, 1))
                            goto LABEL_152;
                          if (v144 >= v169)
                            break;
                          v143 = *(_QWORD *)(v171 + 8 * v144);
                          ++v145;
                          if (v143)
                            goto LABEL_130;
                        }
                      }
LABEL_136:
                      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                      swift_bridgeObjectRelease();
                      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                      v156 = objc_allocWithZone((Class)NSError);
                      v157 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v158 = objc_msgSend(v156, sel_initWithDomain_code_userInfo_, v157, v167, _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      v159 = objc_msgSend(v158, sel_domain);
                      v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
                      v162 = v161;

                      if (v160 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                        || v162 != v163)
                      {
                        v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v165 & 1) != 0)
                        {
LABEL_143:
                          swift_willThrow();
                          outlined consume of SubpathElement();
                          return swift_release();
                        }
                        __break(1u);
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_143;
                    }
                  }
                }
              }
            }
          }
LABEL_130:
          v184 = (_QWORD *)((v143 - 1) & v143);
          v141 = __clz(__rbit64(v143)) + (v144 << 6);
          for (j = v144; ; v141 = __clz(__rbit64(v132)) | (j << 6))
          {
            v146 = (uint64_t *)(*(_QWORD *)(v128 + 48) + 16 * v141);
            v148 = *v146;
            v147 = v146[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v128 + 56) + 40 * v141, (uint64_t)v133);
            *(_QWORD *)&v181 = v148;
            *((_QWORD *)&v181 + 1) = v147;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v149 = v147;
            outlined init with take of Any(v134, v10);
            outlined init with take of Any(v10, v180);
            outlined init with take of Any(v180, &v178);
            v150 = specialized __RawDictionaryStorage.find<A>(_:)(v148, v147);
            v151 = v150;
            if ((v152 & 1) != 0)
            {
              v135 = v133;
              v136 = v10;
              v137 = v134;
              v138 = v128;
              v139 = (uint64_t *)(v129[6] + 16 * v150);
              swift_bridgeObjectRelease();
              *v139 = v148;
              v139[1] = v149;
              v128 = v138;
              v134 = v137;
              v10 = v136;
              v133 = v135;
              v140 = (_OWORD *)(v129[7] + 32 * v151);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
              outlined init with take of Any(&v178, v140);
              v132 = (unint64_t)v184;
              if (!v184)
                goto LABEL_111;
            }
            else
            {
              if (v129[2] >= v129[3])
                goto LABEL_146;
              *(_QWORD *)((char *)v129 + ((v150 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v150;
              v153 = (uint64_t *)(v129[6] + 16 * v150);
              *v153 = v148;
              v153[1] = v149;
              outlined init with take of Any(&v178, (_OWORD *)(v129[7] + 32 * v150));
              v154 = v129[2];
              v95 = __OFADD__(v154, 1);
              v155 = v154 + 1;
              if (v95)
                goto LABEL_147;
              v129[2] = v155;
              v132 = (unint64_t)v184;
              if (!v184)
                goto LABEL_111;
            }
LABEL_110:
            v184 = (_QWORD *)((v132 - 1) & v132);
          }
        }
        goto LABEL_149;
      }
      goto LABEL_5;
    }
    if (!v10[6])
      goto LABEL_154;
    v20 = v8;
    v21 = String.init(cString:)();
    v13 = v22;
    outlined consume of _FTSSequence.Element?((uint64_t)v10, v11, v20, v12);
    if (!v15)
    {
      v10 = (_QWORD *)_FTSSequence.Iterator.next()();
      v11 = v51;
      v12 = v52;
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v52 == 0xFF)
      {
        v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        a4 = v172;
        goto LABEL_95;
      }
      goto LABEL_4;
    }
    *(_QWORD *)&v178 = v21;
    *((_QWORD *)&v178 + 1) = v13;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    Collection<>.trimmingPrefix<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v181 + 1) >> 14 == (unint64_t)v181 >> 14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    v23 = Substring.subscript.getter();
    v25 = v24;
    swift_bridgeObjectRelease();
    if (v23 == 47 && v25 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        v42 = MEMORY[0x186DA4634](v181, *((_QWORD *)&v181 + 1), v182, *((_QWORD *)&v182 + 1));
        v44 = v43;
        swift_bridgeObjectRelease();
        v45 = v184;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v184[2] + 1, 1, v184);
        v47 = v45[2];
        v46 = v45[3];
        if (v47 >= v46 >> 1)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
        v45[2] = v47 + 1;
        v184 = v45;
        v48 = &v45[2 * v47];
        v48[4] = v42;
        v48[5] = v44;
        goto LABEL_32;
      }
    }
    v27 = Substring.index(_:offsetBy:limitedBy:)();
    if ((v28 & 1) != 0)
      v27 = *((_QWORD *)&v181 + 1);
    v10 = v184;
    if (*((_QWORD *)&v181 + 1) >> 14 < v27 >> 14)
      goto LABEL_150;
    v29 = Substring.subscript.getter();
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x186DA4634](v29, v31, v33, v35);
    v38 = v37;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v184[2] + 1, 1, v184);
    v40 = v10[2];
    v39 = v10[3];
    if (v40 >= v39 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v10);
    v10[2] = v40 + 1;
    v184 = v10;
    v41 = &v10[2 * v40];
    v41[4] = v36;
    v41[5] = v38;
LABEL_32:
    v10 = (_QWORD *)_FTSSequence.Iterator.next()();
    v11 = v49;
    v12 = v50;
  }
  while (v50 != 0xFF);
LABEL_94:
  a4 = v172;
  v53 = v184;
LABEL_95:
  swift_release();
  result = swift_bridgeObjectRelease();
  *a4 = v53;
  return result;
}

void closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)(char *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t Path;
  uint64_t v7;
  unint64_t v8;
  int v10;
  Swift::Int32 v11;
  Swift::Int32 v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 *v34;
  _OWORD *v35;
  _OWORD *v36;
  unint64_t v37;
  uint64_t *v38;
  _OWORD *v39;
  unint64_t i;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  id v69;
  void *v70;
  void *v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __int128 *v91;
  _OWORD *v92;
  _OWORD *v93;
  __int128 *v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  _OWORD *v99;
  unint64_t j;
  int64_t v101;
  unint64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v124;
  char v125;
  id v126;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  void *v130;
  unsigned __int8 v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unsigned __int8 v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  __int128 *v165;
  _OWORD *v166;
  _OWORD *v167;
  __int128 *v168;
  _OWORD *v169;
  _OWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  _OWORD *v173;
  unint64_t k;
  int64_t v175;
  unint64_t v176;
  int64_t v177;
  int64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  char v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char v282;
  char v283;
  unint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  id v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  id v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 v339;
  id v340;
  Swift::String v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char v350;
  char v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  int64_t v357;
  int64_t v358;
  int64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int64_t v364;
  unint64_t v365;
  int64_t v366;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD v377[4];
  __int128 v378;
  _QWORD v379[4];
  _OWORD v380[2];
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;

  v8 = a3;
  v384 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v372 = MEMORY[0x1E0DEE9E0];
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v15 = v14;
    *(_QWORD *)&v378 = a2;
    *((_QWORD *)&v378 + 1) = v8;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v13, v15);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v18 = v17;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, v8, (uint64_t)&v378);
    if ((_QWORD)v378)
    {
      v375 = v378;
      v377[0] = v379[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v381 = 0u;
      v382 = 0u;
      v383 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v16, v18);
    v26 = v372;
    if (*(_QWORD *)(v372 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v27 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v27 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v360 = v372 + 64;
    v28 = -1;
    v29 = -1 << *(_BYTE *)(v372 + 32);
    if (-v29 < 64)
      v28 = ~(-1 << -(char)v29);
    v30 = v28 & *(_QWORD *)(v372 + 64);
    v31 = &v382;
    v32 = v377;
    v33 = v379;
    v357 = (unint64_t)(63 - v29) >> 6;
    swift_bridgeObjectRetain();
    v365 = 0;
    v363 = MEMORY[0x1E0DEE9B8] + 8;
    if (v30)
      goto LABEL_22;
LABEL_23:
    v41 = v365;
    v42 = v365 + 1;
    if (__OFADD__(v365, 1))
    {
LABEL_209:
      __break(1u);
LABEL_210:
      if (v41 >= 0x4000)
        v207 = v342;
      else
        v207 = v26;
      swift_bridgeObjectRelease();
      goto LABEL_214;
    }
    if (v42 >= v357)
      goto LABEL_48;
    v43 = *(_QWORD *)(v360 + 8 * v42);
    v44 = v365 + 1;
    if (!v43)
    {
      v44 = v365 + 2;
      if ((uint64_t)(v365 + 2) >= v357)
        goto LABEL_48;
      v43 = *(_QWORD *)(v360 + 8 * v44);
      if (!v43)
      {
        v44 = v365 + 3;
        if ((uint64_t)(v365 + 3) >= v357)
          goto LABEL_48;
        v43 = *(_QWORD *)(v360 + 8 * v44);
        if (!v43)
        {
          v44 = v365 + 4;
          if ((uint64_t)(v365 + 4) >= v357)
            goto LABEL_48;
          v43 = *(_QWORD *)(v360 + 8 * v44);
          if (!v43)
          {
            v44 = v365 + 5;
            if ((uint64_t)(v365 + 5) >= v357)
              goto LABEL_48;
            v43 = *(_QWORD *)(v360 + 8 * v44);
            if (!v43)
            {
              v44 = v365 + 6;
              if ((uint64_t)(v365 + 6) >= v357)
                goto LABEL_48;
              v43 = *(_QWORD *)(v360 + 8 * v44);
              if (!v43)
              {
                v45 = v365 + 7;
                if ((uint64_t)(v365 + 7) < v357)
                {
                  v43 = *(_QWORD *)(v360 + 8 * v45);
                  if (v43)
                  {
                    v44 = v365 + 7;
                    goto LABEL_42;
                  }
                  while (1)
                  {
                    v44 = v45 + 1;
                    if (__OFADD__(v45, 1))
                      goto LABEL_316;
                    if (v44 >= v357)
                      break;
                    v43 = *(_QWORD *)(v360 + 8 * v44);
                    ++v45;
                    if (v43)
                      goto LABEL_42;
                  }
                }
LABEL_48:
                outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                swift_bridgeObjectRelease();
                LODWORD(Path) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                v54 = objc_allocWithZone((Class)NSError);
                v55 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v56 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, 512, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v57 = objc_msgSend(v56, sel_domain);
                v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
                v60 = v59;

                if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                  && v60 == v61)
                {
LABEL_110:
                  swift_bridgeObjectRelease_n();
                  goto LABEL_129;
                }
                v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v63 & 1) != 0)
                  goto LABEL_129;
                __break(1u);
                goto LABEL_54;
              }
            }
          }
        }
      }
    }
LABEL_42:
    v365 = v44;
    a5 = (v43 - 1) & v43;
    for (i = __clz(__rbit64(v43)) + (v44 << 6); ; i = __clz(__rbit64(v30)) | (v365 << 6))
    {
      v46 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
      v48 = *v46;
      v47 = v46[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v26 + 56) + 40 * i, (uint64_t)v31);
      *(_QWORD *)&v381 = v48;
      *((_QWORD *)&v381 + 1) = v47;
      v375 = v48;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v7 = v48;
      outlined init with take of Any(v32, v33);
      outlined init with take of Any(v33, v380);
      outlined init with take of Any(v380, &v378);
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
      a2 = v49;
      if ((v50 & 1) != 0)
      {
        v34 = v31;
        v35 = v33;
        v36 = v32;
        v37 = v26;
        v38 = (uint64_t *)(v27[6] + 16 * v49);
        swift_bridgeObjectRelease();
        *v38 = v7;
        v38[1] = v47;
        v26 = v37;
        v32 = v36;
        v33 = v35;
        v31 = v34;
        v39 = (_OWORD *)(v27[7] + 32 * a2);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        outlined init with take of Any(&v378, v39);
        v30 = a5;
        if (!a5)
          goto LABEL_23;
      }
      else
      {
        v41 = v27[2];
        if (v41 >= v27[3])
        {
          __break(1u);
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
        *(_QWORD *)((char *)v27 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v49;
        v51 = (uint64_t *)(v27[6] + 16 * v49);
        *v51 = v7;
        v51[1] = v47;
        outlined init with take of Any(&v378, (_OWORD *)(v27[7] + 32 * v49));
        v52 = v27[2];
        v53 = __OFADD__(v52, 1);
        v41 = v52 + 1;
        if (v53)
          goto LABEL_208;
        v27[2] = v41;
        v30 = a5;
        if (!a5)
          goto LABEL_23;
      }
LABEL_22:
      a5 = (v30 - 1) & v30;
    }
  }
  v7 = a6;
  if ((a4 & 1) == 0)
  {
    if (mkdir(a1, 0x1FFu))
    {
      LODWORD(Path) = MEMORY[0x186DA4118]();
      v373 = MEMORY[0x1E0DEE9E0];
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v22 = v21;
      *(_QWORD *)&v378 = a2;
      *((_QWORD *)&v378 + 1) = a3;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v20, v22);
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v25 = v24;
      URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v378);
      if ((_QWORD)v378)
      {
        v377[0] = v379[0];
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v381 = 0u;
        v382 = 0u;
        v383 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v23, v25);
      swift_bridgeObjectRetain();
      if ((_DWORD)Path == 102)
      {
LABEL_64:
        v73 = 512;
      }
      else
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_333;
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v78 = v77;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v79 = (int)POSIXErrorCode.rawValue.getter();
        v80 = objc_allocWithZone((Class)NSError);
        v81 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v82 = objc_msgSend(v80, sel_initWithDomain_code_userInfo_, v81, v79, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v83 = objc_msgSend(v82, sel_domain);
        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        v86 = v85;

        if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v86 == v87)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v125 & 1) == 0)
            goto LABEL_320;
        }
        *(_QWORD *)&v378 = v82;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v76, v78);
        v73 = 4;
        switch((int)Path)
        {
          case 1:
          case 13:
            v73 = 513;
            break;
          case 2:
            break;
          case 17:
            v73 = 516;
            break;
          case 28:
          case 69:
            v73 = 640;
            break;
          case 30:
            v73 = 642;
            break;
          case 63:
            v73 = 514;
            break;
          default:
            goto LABEL_64;
        }
      }
      v74 = v373;
      v356 = v73;
      if (*(_QWORD *)(v373 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v75 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v75 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v361 = v373 + 64;
      v88 = -1;
      v89 = -1 << *(_BYTE *)(v373 + 32);
      if (-v89 < 64)
        v88 = ~(-1 << -(char)v89);
      v90 = v88 & *(_QWORD *)(v373 + 64);
      v91 = &v382;
      v92 = v377;
      v93 = v379;
      v358 = (unint64_t)(63 - v89) >> 6;
      swift_bridgeObjectRetain();
      v364 = 0;
      if (v90)
        goto LABEL_77;
LABEL_78:
      v101 = v364 + 1;
      if (__OFADD__(v364, 1))
        goto LABEL_311;
      if (v101 < v358)
      {
        v102 = *(_QWORD *)(v361 + 8 * v101);
        v103 = v364 + 1;
        if (v102)
          goto LABEL_97;
        v103 = v364 + 2;
        if (v364 + 2 < v358)
        {
          v102 = *(_QWORD *)(v361 + 8 * v103);
          if (v102)
            goto LABEL_97;
          v103 = v364 + 3;
          if (v364 + 3 < v358)
          {
            v102 = *(_QWORD *)(v361 + 8 * v103);
            if (v102)
              goto LABEL_97;
            v103 = v364 + 4;
            if (v364 + 4 < v358)
            {
              v102 = *(_QWORD *)(v361 + 8 * v103);
              if (v102)
                goto LABEL_97;
              v103 = v364 + 5;
              if (v364 + 5 < v358)
              {
                v102 = *(_QWORD *)(v361 + 8 * v103);
                if (v102)
                  goto LABEL_97;
                v103 = v364 + 6;
                if (v364 + 6 < v358)
                {
                  v102 = *(_QWORD *)(v361 + 8 * v103);
                  if (!v102)
                  {
                    v104 = v364 + 7;
                    if (v364 + 7 < v358)
                    {
                      v102 = *(_QWORD *)(v361 + 8 * v104);
                      if (v102)
                      {
                        v103 = v364 + 7;
                        goto LABEL_97;
                      }
                      while (1)
                      {
                        v103 = v104 + 1;
                        if (__OFADD__(v104, 1))
                          goto LABEL_319;
                        if (v103 >= v358)
                          break;
                        v102 = *(_QWORD *)(v361 + 8 * v103);
                        ++v104;
                        if (v102)
                          goto LABEL_97;
                      }
                    }
                    goto LABEL_103;
                  }
LABEL_97:
                  v364 = v103;
                  v368 = (v102 - 1) & v102;
                  for (j = __clz(__rbit64(v102)) + (v103 << 6); ; j = __clz(__rbit64(v90)) | (v364 << 6))
                  {
                    v105 = (uint64_t *)(*(_QWORD *)(v74 + 48) + 16 * j);
                    v107 = *v105;
                    v106 = v105[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v74 + 56) + 40 * j, (uint64_t)v91);
                    *(_QWORD *)&v381 = v107;
                    *((_QWORD *)&v381 + 1) = v106;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v108 = v106;
                    outlined init with take of Any(v92, v93);
                    outlined init with take of Any(v93, v380);
                    outlined init with take of Any(v380, &v378);
                    v109 = specialized __RawDictionaryStorage.find<A>(_:)(v107, v106);
                    v110 = v109;
                    if ((v111 & 1) != 0)
                    {
                      v94 = v91;
                      v95 = v93;
                      v96 = v92;
                      v97 = v74;
                      v98 = (uint64_t *)(v75[6] + 16 * v109);
                      swift_bridgeObjectRelease();
                      *v98 = v107;
                      v98[1] = v108;
                      v74 = v97;
                      v92 = v96;
                      v93 = v95;
                      v91 = v94;
                      v99 = (_OWORD *)(v75[7] + 32 * v110);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
                      outlined init with take of Any(&v378, v99);
                      v90 = v368;
                      if (!v368)
                        goto LABEL_78;
                    }
                    else
                    {
                      if (v75[2] >= v75[3])
                      {
                        __break(1u);
LABEL_308:
                        __break(1u);
LABEL_309:
                        __break(1u);
LABEL_310:
                        __break(1u);
LABEL_311:
                        __break(1u);
LABEL_312:
                        __break(1u);
LABEL_313:
                        __break(1u);
LABEL_314:
                        __break(1u);
LABEL_315:
                        __break(1u);
LABEL_316:
                        __break(1u);
LABEL_317:
                        __break(1u);
LABEL_318:
                        __break(1u);
LABEL_319:
                        __break(1u);
LABEL_320:
                        __break(1u);
LABEL_321:
                        __break(1u);
LABEL_322:
                        __break(1u);
LABEL_323:
                        __break(1u);
LABEL_324:
                        __break(1u);
LABEL_325:
                        __break(1u);
LABEL_326:
                        __break(1u);
LABEL_327:
                        __break(1u);
LABEL_328:
                        __break(1u);
LABEL_329:
                        __break(1u);
LABEL_330:
                        __break(1u);
LABEL_331:
                        swift_once();
                        goto LABEL_129;
                      }
                      *(_QWORD *)((char *)v75 + ((v109 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v109;
                      v112 = (uint64_t *)(v75[6] + 16 * v109);
                      *v112 = v107;
                      v112[1] = v108;
                      outlined init with take of Any(&v378, (_OWORD *)(v75[7] + 32 * v109));
                      v113 = v75[2];
                      v53 = __OFADD__(v113, 1);
                      v114 = v113 + 1;
                      if (v53)
                        goto LABEL_308;
                      v75[2] = v114;
                      v90 = v368;
                      if (!v368)
                        goto LABEL_78;
                    }
LABEL_77:
                    v368 = (v90 - 1) & v90;
                  }
                }
              }
            }
          }
        }
      }
LABEL_103:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v115 = objc_allocWithZone((Class)NSError);
      v116 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v117 = objc_msgSend(v115, sel_initWithDomain_code_userInfo_, v116, v356, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v118 = objc_msgSend(v117, sel_domain);
      v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
      v121 = v120;

      if (v119 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v121 != v122)
      {
        v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v124 & 1) != 0)
          goto LABEL_129;
        __break(1u);
      }
      swift_bridgeObjectRelease();
      goto LABEL_110;
    }
LABEL_54:
    if (!a5)
      return;
    v64 = MEMORY[0x186DA9F5C](v7);
    if (!v64)
      goto LABEL_332;
    v65 = (void *)v64;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    swift_bridgeObjectRetain();
    v66 = _NativeDictionary.bridged()();
    v67 = String._bridgeToObjectiveCImpl()();
    *(_QWORD *)&v381 = 0;
    v68 = objc_msgSend(v65, sel_setAttributes_ofItemAtPath_error_, v66, v67, &v381);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v68 & 1) != 0)
    {
      v69 = (id)v381;
    }
    else
    {
      if (!(_QWORD)v381)
      {
        if (one-time initialization token for _nilObjCError != -1)
          goto LABEL_331;
        goto LABEL_129;
      }
      v126 = (id)v381;
      swift_willThrow();

    }
    return;
  }
  v371 = 0;
  v10 = S_IRWXU.getter();
  LODWORD(Path) = S_IRWXG.getter() | v10;
  S_IRWXO.getter();
  v11 = _mkpath_np();
  if (v11 != 20)
  {
    v12 = v11;
    if (v11 == 17)
      goto LABEL_292;
    if (!v11)
    {
      if (!a5)
        goto LABEL_292;
      swift_bridgeObjectRetain();
      v134 = a2;
      v365 = v8;
      v355 = v8;
      v135 = MEMORY[0x186DA9F5C](v7);
      if (v135)
      {
        v136 = (void *)v135;
        type metadata accessor for NSFileAttributeKey(0);
        lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
        swift_bridgeObjectRetain();
        v137 = _NativeDictionary.bridged()();
        *(_QWORD *)&v381 = 0;
        v138 = objc_msgSend(v136, sel_setAttributes_ofItemAtPath_error_, v137, String._bridgeToObjectiveCImpl()(), &v381);

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((v138 & 1) != 0)
        {
          v139 = (id)v381;
        }
        else if ((_QWORD)v381)
        {
          v140 = (id)v381;
          swift_willThrow();

        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1)
            swift_once();
          swift_willThrow();
        }
        *(_QWORD *)&v381 = 47;
        *((_QWORD *)&v381 + 1) = 0xE100000000000000;
        *(_QWORD *)&v378 = a2;
        *((_QWORD *)&v378 + 1) = v8;
        v360 = v7;
        v363 = a2;
        if ((v8 & 0x1000000000000000) != 0)
        {
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          v229 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          StringProtocol._ephemeralString.getter();
          v230 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v231 = objc_msgSend(v229, sel_componentsSeparatedByString_, v230);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v232 = specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(v231);

          goto LABEL_217;
        }
        swift_bridgeObjectRetain();
        v198 = String.subscript.getter();
        v200 = v199;
        v351 = specialized static StringProtocol.== infix<A>(_:_:)(47, 0xE100000000000000, 10, 0xE100000000000000);
        v201 = Substring.init<A>(_:)();
        v203 = v202;
        v349 = v204;
        v353 = v205;
        v375 = specialized ContiguousArray.init()();
        v206 = v200 >> 14;
        v207 = v198 >> 14;
        if (v198 >> 14 >= v200 >> 14)
        {
LABEL_215:
          if (v206 < v207)
            goto LABEL_329;
          v233 = Substring.subscript.getter();
          v234 = MEMORY[0x186DA4634](v233);
          v236 = v235;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v237 = *(_QWORD *)(v375 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v237);
          v238 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v237, v234, v236);
          destructiveProjectEnumData for PredicateCodableError(v238, v239);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v232 = v375;
          v7 = v360;
          v134 = v363;
LABEL_217:
          v240 = specialized ContiguousArray.init()();
          *(_QWORD *)&v381 = v240;
          v241 = specialized Array.count.getter(v232);
          if (v241)
          {
            v242 = v241;
            if (v241 < 1)
              goto LABEL_327;
            v243 = (uint64_t *)(v232 + 40);
            do
            {
              v244 = *(v243 - 1);
              v245 = *v243;
              v246 = HIBYTE(*v243) & 0xF;
              if ((*v243 & 0x2000000000000000) == 0)
                v246 = v244 & 0xFFFFFFFFFFFFLL;
              if (v246)
              {
                swift_bridgeObjectRetain();
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                v247 = *(_QWORD *)(v381 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v247);
                v248 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v247, v244, v245);
                destructiveProjectEnumData for PredicateCodableError(v248, v249);
              }
              v243 += 2;
              --v242;
            }
            while (v242);
            swift_bridgeObjectRelease();
            v240 = v381;
            v7 = v360;
            v134 = v363;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          *(_QWORD *)&v381 = v240;
          swift_bridgeObjectRetain();
          v250 = specialized Collection.first.getter(a2, v355);
          v252 = v251;
          swift_bridgeObjectRelease();
          if (v252)
          {
            if (v250 == 47 && v252 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v253 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v253 & 1) == 0)
                goto LABEL_233;
            }
            specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
          }
LABEL_233:
          swift_bridgeObjectRetain();
          v254 = specialized BidirectionalCollection.last.getter(a2, v355);
          v256 = v255;
          swift_bridgeObjectRelease();
          if (!v256)
            goto LABEL_240;
          if (v254 == 47 && v256 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v257 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v257 & 1) == 0)
              goto LABEL_240;
          }
          if (String.count.getter() >= 2)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v258 = *(_QWORD *)(v381 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v258);
            v259 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v258, 47, 0xE100000000000000);
            destructiveProjectEnumData for PredicateCodableError(v259, v260);
          }
LABEL_240:
          swift_bridgeObjectRelease();
          v352 = v381;
          *(_QWORD *)&v381 = 47;
          *((_QWORD *)&v381 + 1) = 0xE100000000000000;
          *(_QWORD *)&v378 = v134;
          *((_QWORD *)&v378 + 1) = v365;
          if ((v365 & 0x1000000000000000) != 0)
          {
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            v293 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            StringProtocol._ephemeralString.getter();
            v294 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v295 = objc_msgSend(v293, sel_componentsSeparatedByString_, v294);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v296 = specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(v295);

          }
          else
          {
            swift_bridgeObjectRetain();
            v261 = String.subscript.getter();
            v263 = v262;
            v350 = specialized static StringProtocol.== infix<A>(_:_:)(47, 0xE100000000000000, 10, 0xE100000000000000);
            v264 = Substring.init<A>(_:)();
            v266 = v265;
            v348 = v267;
            v354 = v268;
            v376 = specialized ContiguousArray.init()();
            v269 = v263 >> 14;
            v270 = v261 >> 14;
            if (v261 >> 14 < v263 >> 14)
            {
              v343 = v261 >> 14;
              v271 = v261 >> 14;
              v346 = v263 >> 14;
              while (1)
              {
                if (v269 < v271)
                  goto LABEL_315;
                swift_bridgeObjectRetain();
                v272 = Substring.subscript.getter();
                v274 = v273;
                v276 = v275;
                v278 = v277;
                swift_bridgeObjectRelease();
                if ((v272 ^ v274) < 0x4000 || (v264 ^ v266) < 0x4000)
                  break;
                if ((v350 & 1) != 0)
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v279 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v264, v266, v348, v354, 0, 0, 0, 0, 0, v272, v274, v276, v278);
                  v281 = v280;
                  v283 = v282;
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v279 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v264, v266, v348, v354, 0, 0, 0, 0, 0, v272, v274, v276, v278);
                  v281 = v284;
                  v283 = v285;
                }
                swift_bridgeObjectRelease();
                if ((v283 & 1) != 0 || (v270 = v281 >> 14, v279 >> 14 == v281 >> 14))
                {
                  v270 = v271;
                  goto LABEL_260;
                }
                if (v279 >> 14 < v271)
                  goto LABEL_318;
                v286 = Substring.subscript.getter();
                v287 = MEMORY[0x186DA4634](v286);
                v289 = v288;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                v290 = *(_QWORD *)(v376 + 16);
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v290);
                v291 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v290, v287, v289);
                destructiveProjectEnumData for PredicateCodableError(v291, v292);
                swift_bridgeObjectRelease();
                v271 = v281 >> 14;
                v269 = v346;
                if (v270 >= v346)
                  goto LABEL_261;
              }
              if ((v272 ^ v274) >= 0x4000)
                v270 = v343;
              else
                v270 = v271;
              swift_bridgeObjectRelease();
LABEL_260:
              v269 = v346;
            }
LABEL_261:
            if (v269 < v270)
              goto LABEL_330;
            v297 = Substring.subscript.getter();
            v298 = MEMORY[0x186DA4634](v297);
            v300 = v299;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v301 = *(_QWORD *)(v376 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v301);
            v302 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v301, v298, v300);
            destructiveProjectEnumData for PredicateCodableError(v302, v303);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v296 = v376;
            v7 = v360;
            v134 = v363;
          }
          v304 = specialized ContiguousArray.init()();
          *(_QWORD *)&v381 = v304;
          v305 = specialized Array.count.getter(v296);
          if (v305)
          {
            v306 = v305;
            if (v305 < 1)
              goto LABEL_328;
            v307 = (uint64_t *)(v296 + 40);
            do
            {
              v308 = *(v307 - 1);
              v309 = *v307;
              v310 = HIBYTE(*v307) & 0xF;
              if ((*v307 & 0x2000000000000000) == 0)
                v310 = v308 & 0xFFFFFFFFFFFFLL;
              if (v310)
              {
                swift_bridgeObjectRetain();
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                v311 = *(_QWORD *)(v381 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v311);
                v312 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v311, v308, v309);
                destructiveProjectEnumData for PredicateCodableError(v312, v313);
              }
              v307 += 2;
              --v306;
            }
            while (v306);
            swift_bridgeObjectRelease();
            v304 = v381;
            v134 = v363;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          *(_QWORD *)&v381 = v304;
          swift_bridgeObjectRetain();
          v314 = specialized Collection.first.getter(v134, v365);
          v316 = v315;
          swift_bridgeObjectRelease();
          if (v316)
          {
            if (v314 == 47 && v316 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v317 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v317 & 1) == 0)
                goto LABEL_279;
            }
            specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
          }
LABEL_279:
          swift_bridgeObjectRetain();
          v318 = specialized BidirectionalCollection.last.getter(v134, v365);
          v320 = v319;
          swift_bridgeObjectRelease();
          if (v320)
          {
            if (v318 == 47 && v320 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
              goto LABEL_284;
            }
            v321 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v321 & 1) != 0)
            {
LABEL_284:
              if (String.count.getter() >= 2)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                v322 = *(_QWORD *)(v381 + 16);
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v322);
                v323 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v322, 47, 0xE100000000000000);
                destructiveProjectEnumData for PredicateCodableError(v323, v324);
              }
            }
          }
          swift_bridgeObjectRelease();
          v325 = specialized Array.count.getter(v381);
          swift_bridgeObjectRelease();
          v326 = specialized Array.count.getter(v352);
          if (v326 < v325)
            goto LABEL_321;
          v327 = *(_QWORD *)(v352 + 16);
          if (v327 < v325)
            goto LABEL_322;
          if (v325 < 0)
            goto LABEL_323;
          v328 = v326;
          if (v327 < v326)
            goto LABEL_324;
          if (v325 == v326)
          {
LABEL_291:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_292:
            if (v371)
              MEMORY[0x186DA9E78](v371, -1, -1);
            return;
          }
          v329 = (uint64_t *)(v352 + 16 * v325 + 40);
          while (1)
          {
            if (v325 >= v328)
              goto LABEL_313;
            v331 = *(v329 - 1);
            Path = *v329;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v332 = String._appendingPathComponent(_:)(v331, Path, v363, v365);
            v334 = v333;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v335 = MEMORY[0x186DA9F5C](v7);
            if (!v335)
              goto LABEL_332;
            v336 = (void *)v335;
            swift_bridgeObjectRetain();
            v337 = _NativeDictionary.bridged()();
            v363 = v332;
            v365 = v334;
            v338 = String._bridgeToObjectiveCImpl()();
            *(_QWORD *)&v381 = 0;
            v339 = objc_msgSend(v336, sel_setAttributes_ofItemAtPath_error_, v337, v338, &v381);

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if ((v339 & 1) != 0)
            {
              v330 = (id)v381;
            }
            else
            {
              if (!(_QWORD)v381)
              {
                v7 = v360;
                if (one-time initialization token for _nilObjCError != -1)
                  swift_once();
                swift_willThrow();
                goto LABEL_298;
              }
              v340 = (id)v381;
              swift_willThrow();

            }
            v7 = v360;
LABEL_298:
            ++v325;
            v329 += 2;
            if (v328 == v325)
              goto LABEL_291;
          }
        }
        v344 = v201;
        v345 = v201 ^ v203;
        v342 = v198 >> 14;
        v26 = v198 >> 14;
        v347 = v200 >> 14;
        while (1)
        {
          if (v206 < v26)
            goto LABEL_314;
          swift_bridgeObjectRetain();
          v208 = Substring.subscript.getter();
          v210 = v209;
          v212 = v211;
          v214 = v213;
          swift_bridgeObjectRelease();
          v41 = v208 ^ v210;
          if ((v208 ^ v210) < 0x4000 || v345 < 0x4000)
            goto LABEL_210;
          if ((v351 & 1) != 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v215 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v344, v203, v349, v353, 0, 0, 0, 0, 0, v208, v210, v212, v214);
            v217 = v216;
            v219 = v218;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v215 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v344, v203, v349, v353, 0, 0, 0, 0, 0, v208, v210, v212, v214);
            v217 = v220;
            v219 = v221;
          }
          swift_bridgeObjectRelease();
          if ((v219 & 1) != 0)
            break;
          v207 = v217 >> 14;
          if (v215 >> 14 == v217 >> 14)
            break;
          if (v215 >> 14 < v26)
            goto LABEL_317;
          v222 = Substring.subscript.getter();
          v223 = MEMORY[0x186DA4634](v222);
          v225 = v224;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v226 = *(_QWORD *)(v375 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v226);
          v227 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v226, v223, v225);
          destructiveProjectEnumData for PredicateCodableError(v227, v228);
          swift_bridgeObjectRelease();
          v26 = v217 >> 14;
          v206 = v347;
          if (v207 >= v347)
            goto LABEL_215;
        }
        v207 = v26;
LABEL_214:
        v206 = v347;
        goto LABEL_215;
      }
      while (1)
      {
LABEL_332:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_333:
        *(_QWORD *)&v381 = 0;
        *((_QWORD *)&v381 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v381 = 0xD000000000000014;
        *((_QWORD *)&v381 + 1) = 0x8000000182306980;
        LODWORD(v378) = Path;
LABEL_335:
        v341._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        LODWORD(Path) = v341._object;
        String.append(_:)(v341);
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_134;
  }
  swift_bridgeObjectRetain();
  if (String.count.getter() < 2)
  {
LABEL_133:
    swift_bridgeObjectRelease();
    v12 = 20;
LABEL_134:
    swift_bridgeObjectRetain();
    goto LABEL_135;
  }
  v70 = (void *)MEMORY[0x186DA9F5C](v7);
  if (!v70)
    goto LABEL_332;
  v71 = v70;
  v72 = objc_msgSend(v70, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if ((v72 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    Path = String._deletingLastPathComponent()(a2, v8);
    v128 = v127;
    swift_bridgeObjectRelease_n();
    if (String.count.getter() >= 2)
    {
      while (1)
      {
        v129 = (void *)MEMORY[0x186DA9F5C](v7);
        if (!v129)
          goto LABEL_332;
        v130 = v129;
        v131 = objc_msgSend(v129, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        if ((v131 & 1) != 0)
          break;
        swift_bridgeObjectRetain();
        Path = String._deletingLastPathComponent()(Path, v128);
        v133 = v132;
        swift_bridgeObjectRelease_n();
        v128 = v133;
        if (String.count.getter() <= 1)
          goto LABEL_133;
      }
      v12 = 20;
      a2 = Path;
      v8 = v128;
      goto LABEL_135;
    }
    goto LABEL_133;
  }
  v12 = 17;
LABEL_135:
  v374 = MEMORY[0x1E0DEE9E0];
  v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v143 = v142;
  *(_QWORD *)&v378 = a2;
  *((_QWORD *)&v378 + 1) = v8;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v141, v143);
  v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v146 = v145;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, v8, (uint64_t)&v378);
  if ((_QWORD)v378)
  {
    v377[0] = v379[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v381 = 0u;
    v382 = 0u;
    v383 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v144, v146);
  v147 = v374;
  swift_bridgeObjectRetain();
  if (v12 != 102)
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    {
      *(_QWORD *)&v381 = 0;
      *((_QWORD *)&v381 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v381 = 0xD000000000000014;
      *((_QWORD *)&v381 + 1) = 0x8000000182306980;
      LODWORD(v378) = v12;
      goto LABEL_335;
    }
    v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v150 = v149;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v151 = (int)POSIXErrorCode.rawValue.getter();
    v152 = objc_allocWithZone((Class)NSError);
    v153 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v154 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, v151, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v155 = objc_msgSend(v154, sel_domain);
    v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
    v158 = v157;

    if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v158 == v159)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v160 & 1) == 0)
        goto LABEL_326;
    }
    *(_QWORD *)&v378 = v154;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v381, (uint64_t)v148, v150);
    v147 = v374;
  }
  CocoaError.Code.init(fileErrno:reading:)(v12, 0);
  if (*(_QWORD *)(v147 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v161 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v161 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v362 = v147 + 64;
  v162 = -1;
  v163 = -1 << *(_BYTE *)(v147 + 32);
  if (-v163 < 64)
    v162 = ~(-1 << -(char)v163);
  v164 = v162 & *(_QWORD *)(v147 + 64);
  v165 = &v382;
  v166 = v377;
  v167 = v379;
  v359 = (unint64_t)(63 - v163) >> 6;
  swift_bridgeObjectRetain();
  v366 = 0;
  if (v164)
    goto LABEL_153;
LABEL_154:
  v175 = v366 + 1;
  if (__OFADD__(v366, 1))
    goto LABEL_312;
  if (v175 < v359)
  {
    v176 = *(_QWORD *)(v362 + 8 * v175);
    v177 = v366 + 1;
    if (v176)
      goto LABEL_173;
    v177 = v366 + 2;
    if (v366 + 2 < v359)
    {
      v176 = *(_QWORD *)(v362 + 8 * v177);
      if (v176)
        goto LABEL_173;
      v177 = v366 + 3;
      if (v366 + 3 < v359)
      {
        v176 = *(_QWORD *)(v362 + 8 * v177);
        if (v176)
          goto LABEL_173;
        v177 = v366 + 4;
        if (v366 + 4 < v359)
        {
          v176 = *(_QWORD *)(v362 + 8 * v177);
          if (v176)
            goto LABEL_173;
          v177 = v366 + 5;
          if (v366 + 5 < v359)
          {
            v176 = *(_QWORD *)(v362 + 8 * v177);
            if (v176)
              goto LABEL_173;
            v177 = v366 + 6;
            if (v366 + 6 < v359)
            {
              v176 = *(_QWORD *)(v362 + 8 * v177);
              if (v176)
                goto LABEL_173;
              v178 = v366 + 7;
              if (v366 + 7 < v359)
              {
                v176 = *(_QWORD *)(v362 + 8 * v178);
                if (!v176)
                {
                  while (1)
                  {
                    v177 = v178 + 1;
                    if (__OFADD__(v178, 1))
                      goto LABEL_325;
                    if (v177 >= v359)
                      goto LABEL_179;
                    v176 = *(_QWORD *)(v362 + 8 * v177);
                    ++v178;
                    if (v176)
                      goto LABEL_173;
                  }
                }
                v177 = v366 + 7;
LABEL_173:
                v366 = v177;
                v369 = (v176 - 1) & v176;
                for (k = __clz(__rbit64(v176)) + (v177 << 6); ; k = __clz(__rbit64(v164)) | (v366 << 6))
                {
                  v179 = (uint64_t *)(*(_QWORD *)(v147 + 48) + 16 * k);
                  v181 = *v179;
                  v180 = v179[1];
                  outlined init with copy of AnyHashable(*(_QWORD *)(v147 + 56) + 40 * k, (uint64_t)v165);
                  *(_QWORD *)&v381 = v181;
                  *((_QWORD *)&v381 + 1) = v180;
                  swift_bridgeObjectRetain();
                  swift_dynamicCast();
                  outlined init with take of Any(v166, v167);
                  outlined init with take of Any(v167, v380);
                  outlined init with take of Any(v380, &v378);
                  v182 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v180);
                  v183 = v182;
                  if ((v184 & 1) != 0)
                  {
                    v168 = v165;
                    v169 = v167;
                    v170 = v166;
                    v171 = v147;
                    v172 = (uint64_t *)(v161[6] + 16 * v182);
                    swift_bridgeObjectRelease();
                    *v172 = v181;
                    v172[1] = v180;
                    v147 = v171;
                    v166 = v170;
                    v167 = v169;
                    v165 = v168;
                    v173 = (_OWORD *)(v161[7] + 32 * v183);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v173);
                    outlined init with take of Any(&v378, v173);
                    v164 = v369;
                    if (!v369)
                      goto LABEL_154;
                  }
                  else
                  {
                    if (v161[2] >= v161[3])
                      goto LABEL_309;
                    *(_QWORD *)((char *)v161 + ((v182 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v182;
                    v185 = (uint64_t *)(v161[6] + 16 * v182);
                    *v185 = v181;
                    v185[1] = v180;
                    outlined init with take of Any(&v378, (_OWORD *)(v161[7] + 32 * v182));
                    v186 = v161[2];
                    v53 = __OFADD__(v186, 1);
                    v187 = v186 + 1;
                    if (v53)
                      goto LABEL_310;
                    v161[2] = v187;
                    v164 = v369;
                    if (!v369)
                      goto LABEL_154;
                  }
LABEL_153:
                  v369 = (v164 - 1) & v164;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_179:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v188 = objc_allocWithZone((Class)NSError);
  v189 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v190 = objc_msgSend(v188, sel_initWithDomain_code_userInfo_, v189, v370, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v191 = objc_msgSend(v190, sel_domain);
  v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
  v194 = v193;

  if (v192 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v194 != v195)
  {
    v197 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v197 & 1) != 0)
      goto LABEL_129;
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_129:
  swift_willThrow();
}

const char *closure #1 in _FileManagerImpl.changeCurrentDirectoryPath(_:)@<X0>(const char *result@<X0>, BOOL *a2@<X8>)
{
  BOOL v3;

  if (result)
  {
    result = (const char *)chdir(result);
    v3 = (_DWORD)result == 0;
  }
  else
  {
    v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t outlined consume of SubpathElement()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181ECAB70()
{
  return swift_deallocObject();
}

_QWORD *specialized AttributedString.Guts.getUniformValue<A>(in:key:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  int64_t v51;
  int v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  void (*v107)(char *, uint64_t, uint64_t, uint64_t);
  char v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  __int128 *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  _BYTE v140[40];
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _BYTE v149[40];
  _BYTE v150[40];
  _OWORD v151[4];
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  v3 = (_QWORD *)v2;
  v162 = 0;
  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v4 = *result >> 11;
  v5 = *(uint64_t **)(v2 + 64);
  v6 = v3[10];
  if (v5)
    v7 = v3[10];
  else
    v7 = 0;
  if (v7 < v4)
  {
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
    goto LABEL_374;
  }
  v8 = result[4];
  v9 = v3[9];
  v10 = v3[11];
  v134 = *result >> 11;
  v127 = a2;
  v136 = v10;
  if (v5)
  {
    if (v4 < v6 && *((_WORD *)v5 + 8) != 0)
    {
      v135 = v9;
      v137 = v8;
      v9 = *((unsigned __int8 *)v5 + 18);
      if (*((_BYTE *)v5 + 18))
      {
        swift_unknownObjectRetain_n();
        result = (_QWORD *)swift_retain_n();
        v14 = v4;
        v109 = (uint64_t)v5;
        while (1)
        {
          v111 = *(unsigned __int16 *)(v109 + 16);
          if (!*(_WORD *)(v109 + 16))
            goto LABEL_249;
          v112 = *(_QWORD *)(v109 + 40);
          v17 = __OFSUB__(v14, v112);
          v113 = v14 - v112;
          if (v17)
            goto LABEL_339;
          if (__OFADD__(v113, 1))
          {
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
LABEL_343:
            __break(1u);
LABEL_344:
            __break(1u);
LABEL_345:
            __break(1u);
LABEL_346:
            __break(1u);
LABEL_347:
            __break(1u);
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
            goto LABEL_351;
          }
          if (v113 + 1 <= 0)
          {
            v111 = 0;
          }
          else
          {
            if ((_DWORD)v111 == 1)
              goto LABEL_248;
            v114 = *(_QWORD *)(v109 + 64);
            v14 = v113 - v114;
            if (__OFSUB__(v113, v114))
              goto LABEL_354;
            if (__OFADD__(v14, 1))
            {
LABEL_355:
              __break(1u);
              goto LABEL_356;
            }
            if (v14 + 1 < 1)
            {
              v111 = 1;
              v14 = v113;
            }
            else
            {
              if ((_DWORD)v111 == 2)
                goto LABEL_249;
              v115 = *(_QWORD *)(v109 + 88);
              v17 = __OFSUB__(v14, v115);
              v113 = v14 - v115;
              if (v17)
                goto LABEL_368;
              if (__OFADD__(v113, 1))
                goto LABEL_369;
              if (v113 + 1 >= 1)
              {
                if ((_DWORD)v111 != 3)
                {
                  v116 = 3;
                  if (v111 > 3)
                    v116 = *(unsigned __int16 *)(v109 + 16);
                  v117 = (_QWORD *)(v109 + 112);
                  v118 = 3;
                  while (1)
                  {
                    if (v116 == v118)
                      goto LABEL_346;
                    v14 = v113 - *v117;
                    if (__OFSUB__(v113, *v117))
                      goto LABEL_347;
                    if (__OFADD__(v14, 1))
                      goto LABEL_348;
                    if (v14 + 1 < 1)
                      break;
                    ++v118;
                    v117 += 3;
                    v113 = v14;
                    if (v111 == v118)
                      goto LABEL_249;
                  }
                  v111 = v118;
                  v14 = v113;
                  goto LABEL_250;
                }
LABEL_248:
                v14 = v113;
LABEL_249:
                if (v14)
                  goto LABEL_338;
                goto LABEL_250;
              }
              v111 = 2;
            }
          }
LABEL_250:
          v110 = (4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C;
          v9 = ((-15 << v110) - 1) & v9 | (v111 << v110);
          v13 = *(_QWORD *)(v109 + 24 + 24 * v111);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v109 = v13;
          if (!*(_BYTE *)(v13 + 18))
            goto LABEL_280;
        }
      }
      swift_unknownObjectRetain_n();
      result = (_QWORD *)swift_retain_n();
      v14 = v4;
      v13 = (uint64_t)v5;
LABEL_280:
      v119 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16))
        goto LABEL_296;
      v120 = *(_QWORD *)(v13 + 24);
      v17 = __OFSUB__(v14, v120);
      v15 = v14 - v120;
      if (v17)
      {
LABEL_375:
        __break(1u);
        goto LABEL_376;
      }
      if (__OFADD__(v15, 1))
      {
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
LABEL_378:
        __break(1u);
LABEL_379:
        __break(1u);
LABEL_380:
        __break(1u);
LABEL_381:
        __break(1u);
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
        goto LABEL_384;
      }
      if ((uint64_t)(v15 + 1) <= 0)
      {
        v119 = 0;
        goto LABEL_297;
      }
      if ((_DWORD)v119 == 1)
        goto LABEL_285;
      v122 = *(_QWORD *)(v13 + 48);
      v14 = v15 - v122;
      if (__OFSUB__(v15, v122))
      {
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }
      if (__OFADD__(v14, 1))
      {
LABEL_388:
        __break(1u);
LABEL_389:
        __break(1u);
LABEL_390:
        __break(1u);
        goto LABEL_391;
      }
      if (v14 + 1 >= 1)
      {
        if ((_DWORD)v119 == 2)
        {
LABEL_296:
          if (!v14)
            goto LABEL_297;
LABEL_374:
          __break(1u);
          goto LABEL_375;
        }
        v123 = *(_QWORD *)(v13 + 72);
        v17 = __OFSUB__(v14, v123);
        v15 = v14 - v123;
        if (v17)
        {
LABEL_391:
          __break(1u);
          goto LABEL_392;
        }
        if (__OFADD__(v15, 1))
        {
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
          return result;
        }
        if ((uint64_t)(v15 + 1) < 1)
          goto LABEL_319;
        if ((_DWORD)v119 != 3)
        {
          v16 = 3;
          if (v119 <= 3)
            v124 = 3;
          else
            v124 = *(unsigned __int16 *)(v13 + 16);
          v125 = (_QWORD *)(v13 + 96);
          while (v124 != v16)
          {
            v14 = v15 - *v125;
            if (__OFSUB__(v15, *v125))
              goto LABEL_380;
            if (__OFADD__(v14, 1))
              goto LABEL_381;
            if (v14 + 1 < 1)
              goto LABEL_333;
            ++v16;
            v125 += 3;
            v15 = v14;
            if (v119 == v16)
              goto LABEL_296;
          }
          goto LABEL_379;
        }
LABEL_285:
        v14 = v15;
        goto LABEL_296;
      }
LABEL_301:
      v119 = 1;
      v14 = v15;
      goto LABEL_297;
    }
  }
  swift_retain_n();
  v12 = swift_unknownObjectRetain_n();
  v138 = specialized Rope._endPath.getter(v12);
  swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  if (!v5)
    goto LABEL_298;
LABEL_12:
  swift_unknownObjectRetain();
  v135 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v138, v13, (uint64_t)v5, v9);
  swift_release();
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v17 = __OFSUB__(v4, v14);
  v14 = v4 - v14;
  if (v17)
  {
LABEL_300:
    __break(1u);
    goto LABEL_301;
  }
LABEL_13:
  v137 = v8 >> 11;
  v131 = v3;
  v132 = (__int128 *)((char *)&v146 + 8);
  v130 = 0x8000000182305790;
  while (1)
  {
    v9 = v3[8];
    if (v4 != v137)
    {
      if (v9)
        v25 = v3[10];
      else
        v25 = 0;
      v9 = v136;
      goto LABEL_82;
    }
    if (v9)
      v19 = v3[10];
    else
      v19 = 0;
    if (v19 < v4)
      goto LABEL_336;
    if (v9)
    {
      v20 = v3[11];
      v21 = *(unsigned __int16 *)(v9 + 16);
      v22 = *(unsigned __int8 *)(v9 + 18);
      v23 = v4 >= v3[10] || (_DWORD)v21 == 0;
      v133 = (uint64_t *)v3[9];
      v129 = v20;
      if (v23)
      {
        v5 = (uint64_t *)(((-15 << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | (unint64_t)(v21 << ((4 * v22 + 8) & 0x3C)));
        swift_unknownObjectRetain();
        v4 = 0;
        v24 = 0;
LABEL_79:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v129, (unint64_t)v5, v24, v9, (uint64_t)v133);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        goto LABEL_80;
      }
      if ((_DWORD)v22)
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v5 = (uint64_t *)v9;
        while (1)
        {
          v15 = *((unsigned __int16 *)v5 + 8);
          if (*((_WORD *)v5 + 8))
          {
            v27 = v5[5];
            v17 = __OFSUB__(v4, v27);
            v16 = v4 - v27;
            if (v17)
              goto LABEL_317;
            if (__OFADD__(v16, 1))
              goto LABEL_318;
            if (v16 + 1 <= 0)
            {
              v15 = 0;
              goto LABEL_38;
            }
            if ((_DWORD)v15 != 1)
            {
              v28 = v5[8];
              v4 = v16 - v28;
              if (__OFSUB__(v16, v28))
              {
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
                goto LABEL_340;
              }
              if (__OFADD__(v4, 1))
                goto LABEL_335;
              if (v4 + 1 < 1)
              {
                v15 = 1;
                v4 = v16;
                goto LABEL_38;
              }
              if ((_DWORD)v15 == 2)
                goto LABEL_37;
              v29 = v5[11];
              v17 = __OFSUB__(v4, v29);
              v16 = v4 - v29;
              if (v17)
                goto LABEL_349;
              if (__OFADD__(v16, 1))
                goto LABEL_350;
              if (v16 + 1 < 1)
              {
                v15 = 2;
                goto LABEL_38;
              }
              if ((_DWORD)v15 != 3)
              {
                v30 = 3;
                if (v15 > 3)
                  v30 = *((unsigned __int16 *)v5 + 8);
                v31 = v5 + 14;
                v32 = 3;
                while (1)
                {
                  if (v30 == v32)
                    goto LABEL_330;
                  v4 = v16 - *v31;
                  if (__OFSUB__(v16, *v31))
                    goto LABEL_331;
                  if (__OFADD__(v4, 1))
                    goto LABEL_332;
                  if (v4 + 1 < 1)
                    break;
                  ++v32;
                  v31 += 3;
                  v16 = v4;
                  if (v15 == v32)
                    goto LABEL_37;
                }
                v15 = v32;
                v4 = v16;
                goto LABEL_38;
              }
            }
            v4 = v16;
          }
LABEL_37:
          if (v4)
          {
            __break(1u);
LABEL_317:
            __break(1u);
LABEL_318:
            __break(1u);
LABEL_319:
            v119 = 2;
LABEL_297:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v138 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
            v4 = v134;
            v9 = v135;
            v10 = v136;
            v8 = v137;
            if (v5)
              goto LABEL_12;
LABEL_298:
            result = (_QWORD *)swift_release();
            v135 = 0;
            v17 = __OFSUB__(v4, v14);
            v14 = v4 - v14;
            if (v17)
              goto LABEL_300;
            goto LABEL_13;
          }
LABEL_38:
          v26 = (4 * *((_BYTE *)v5 + 18) + 8) & 0x3C;
          v22 = ((-15 << v26) - 1) & v22 | (v15 << v26);
          v24 = v5[3 * v15 + 3];
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v5 = (uint64_t *)v24;
          if (!*(_BYTE *)(v24 + 18))
            goto LABEL_66;
        }
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v22 = 0;
      v24 = v9;
LABEL_66:
      v33 = *(unsigned __int16 *)(v24 + 16);
      if (!*(_WORD *)(v24 + 16))
        goto LABEL_77;
      v34 = *(_QWORD *)(v24 + 24);
      v17 = __OFSUB__(v4, v34);
      v35 = v4 - v34;
      if (v17)
        goto LABEL_358;
      if (__OFADD__(v35, 1))
        goto LABEL_359;
      if (v35 + 1 <= 0)
      {
        v33 = 0;
      }
      else
      {
        if ((_DWORD)v33 == 1)
        {
LABEL_71:
          v4 = v35;
          goto LABEL_77;
        }
        v36 = *(_QWORD *)(v24 + 48);
        v4 = v35 - v36;
        if (__OFSUB__(v35, v36))
          goto LABEL_370;
        if (__OFADD__(v4, 1))
          goto LABEL_371;
        if (v4 + 1 < 1)
        {
          v33 = 1;
          v4 = v35;
        }
        else
        {
          if ((_DWORD)v33 == 2)
          {
LABEL_77:
            if (v4)
              goto LABEL_357;
            goto LABEL_78;
          }
          v87 = *(_QWORD *)(v24 + 72);
          v17 = __OFSUB__(v4, v87);
          v35 = v4 - v87;
          if (v17)
            goto LABEL_382;
          if (__OFADD__(v35, 1))
            goto LABEL_383;
          if (v35 + 1 < 1)
          {
            v33 = 2;
          }
          else
          {
            if ((_DWORD)v33 == 3)
              goto LABEL_71;
            v88 = 3;
            if (v33 > 3)
              v88 = *(unsigned __int16 *)(v24 + 16);
            v89 = (_QWORD *)(v24 + 96);
            v90 = 3;
            while (1)
            {
              if (v88 == v90)
                goto LABEL_364;
              v4 = v35 - *v89;
              if (__OFSUB__(v35, *v89))
                goto LABEL_365;
              if (__OFADD__(v4, 1))
                goto LABEL_366;
              if (v4 + 1 < 1)
                break;
              ++v90;
              v89 += 3;
              v35 = v4;
              if (v33 == v90)
                goto LABEL_77;
            }
            v33 = v90;
            v4 = v35;
          }
        }
      }
LABEL_78:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v5 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8));
      goto LABEL_79;
    }
    v4 = 0;
LABEL_80:
    v16 = v134;
    v25 = v134 - v4;
    v9 = v136;
    if (__OFSUB__(v134, v4))
      goto LABEL_337;
    v4 = v134;
LABEL_82:
    if (v14 == v25)
    {
      swift_release();
      return (_QWORD *)outlined init with take of AttributedString._AttributeValue?((uint64_t)&v158, v127);
    }
    v15 = v3[11];
    if (v9 != v15)
    {
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      v119 = v16;
      v14 = v15;
      goto LABEL_297;
    }
    if (v13)
    {
      v37 = (_QWORD *)(v13 + 24 * ((v138 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      v5 = (uint64_t *)v37[4];
      v38 = v37[5];
      v39 = v37[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v133 = (uint64_t *)v38;
    }
    else
    {
      v40 = v3[8];
      swift_unknownObjectRetain();
      v41 = v138;
      specialized Rope._Node.subscript.getter(v138, v40);
      v5 = v42;
      v133 = (uint64_t *)v43;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v9 != v3[11])
        goto LABEL_341;
      v44 = v3[8];
      swift_unknownObjectRetain();
      v39 = specialized Rope._Node.subscript.getter(v41, v44);
      v9 = v136;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v14 + v39;
    if (__OFADD__(v14, v39))
      goto LABEL_321;
    if (v137 >= v14)
      v16 = v14;
    else
      v16 = v137;
    if (v14 < v4)
      v16 = v4;
    if ((uint64_t)v15 <= v4)
      v45 = v4;
    else
      v45 = v14 + v39;
    if (v137 >= (uint64_t)v15)
      v15 = v45;
    else
      v15 = v137;
    if (v16 == v15)
      goto LABEL_322;
    v46 = v3[8];
    v15 = v3[11];
    v47 = v138;
    *(_QWORD *)&v144 = v9;
    *((_QWORD *)&v144 + 1) = v138;
    *(_QWORD *)&v145 = v13;
    v16 = v135 + 1;
    if (__OFADD__(v135, 1))
      goto LABEL_323;
    if (v9 != v15)
      goto LABEL_324;
    ++v135;
    if (v13)
    {
      v9 = *(_QWORD *)(v13 + 24 * ((v138 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      v9 = specialized Rope._Node.subscript.getter(v47, v46);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v17 = __OFADD__(v14, v9);
    v14 += v9;
    if (v17)
      goto LABEL_325;
    if (v46)
    {
      v48 = ((-15 << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v48 = 0;
    }
    v9 = (uint64_t)&v144;
    if (v138 >= v48)
      goto LABEL_326;
    if (v13)
    {
      v49 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      v50 = ((v138 >> v49) & 0xF) + 1;
      if (v50 < *(unsigned __int16 *)(v13 + 16))
      {
        v138 = (v50 << v49) | ((-15 << v49) - 1) & v138;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v4 = v134;
        v51 = v137;
        if (v14 < v137)
          goto LABEL_172;
        goto LABEL_121;
      }
    }
    v52 = *(unsigned __int8 *)(v46 + 18);
    v53 = (4 * v52 + 8) & 0x3C;
    *(_QWORD *)&v153 = (v138 >> v53) & 0xF;
    if (v52)
    {
      swift_unknownObjectRetain();
      v54 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v46 + 24, (uint64_t *)&v153, (uint64_t)&v144, v46, v52);
      result = (_QWORD *)swift_unknownObjectRelease();
      v51 = v137;
      if ((v54 & 1) != 0)
      {
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v138 = *((_QWORD *)&v144 + 1);
        goto LABEL_120;
      }
    }
    else
    {
      v55 = ((v138 >> v53) & 0xF) + 1;
      v51 = v137;
      if (v55 < *(unsigned __int16 *)(v46 + 16))
      {
        v138 = (v55 << v53) | ((-15 << v53) - 1) & v138;
        *((_QWORD *)&v144 + 1) = v138;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        *(_QWORD *)&v145 = v46;
LABEL_120:
        v4 = v134;
        if (v14 < v51)
          goto LABEL_172;
        goto LABEL_121;
      }
    }
    if (v46)
    {
      v62 = *(unsigned __int8 *)(v46 + 18);
      v63 = *(unsigned __int16 *)(v46 + 16);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      v64 = (4 * v62 + 8) & 0x3C;
      v65 = ((-15 << v64) - 1) & v62;
      v66 = v63 << v64;
      v3 = v131;
      v67 = v65 | v66;
    }
    else
    {
      v67 = 0;
    }
    v4 = v134;
    *(_QWORD *)&v144 = v136;
    *((_QWORD *)&v144 + 1) = v67;
    v138 = v67;
    *(_QWORD *)&v145 = 0;
    if (v14 < v51)
    {
LABEL_172:
      v136 = v144;
      v13 = v145;
      swift_release();
      goto LABEL_231;
    }
LABEL_121:
    v56 = v3[8];
    if (v4 != v51)
    {
      v136 = v3[11];
      if (v56)
      {
        v14 = v3[10];
        v135 = v3[9];
        v77 = *(unsigned __int8 *)(v56 + 18);
        v78 = *(unsigned __int16 *)(v56 + 16);
        swift_release();
        v13 = 0;
        v79 = (4 * v77 + 8) & 0x3C;
        v80 = ((-15 << v79) - 1) & v77;
        v4 = v134;
        v81 = v78 << v79;
        v3 = v131;
        v138 = v80 | v81;
      }
      else
      {
        swift_release();
        v138 = 0;
        v13 = 0;
        v135 = 0;
        v14 = 0;
      }
      goto LABEL_231;
    }
    v57 = v3[10];
    if (v56)
      v58 = v3[10];
    else
      v58 = 0;
    if (v58 < v4)
      goto LABEL_344;
    v136 = v3[11];
    if (!v56)
    {
      result = (_QWORD *)swift_release();
      v60 = 0;
      v13 = 0;
      v138 = 0;
      v135 = 0;
      goto LABEL_230;
    }
    v135 = v3[9];
    v59 = *(unsigned __int8 *)(v56 + 18);
    if (v4 < v57 && *(_WORD *)(v56 + 16))
    {
      if (*(_BYTE *)(v56 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v60 = v4;
        v61 = v56;
        while (1)
        {
          v15 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16))
            goto LABEL_134;
          v69 = *(_QWORD *)(v61 + 40);
          v17 = __OFSUB__(v60, v69);
          v16 = v60 - v69;
          if (v17)
            goto LABEL_328;
          if (__OFADD__(v16, 1))
            goto LABEL_329;
          if (v16 + 1 <= 0)
          {
            v15 = 0;
          }
          else
          {
            if ((_DWORD)v15 == 1)
              goto LABEL_133;
            v70 = *(_QWORD *)(v61 + 64);
            v60 = v16 - v70;
            if (__OFSUB__(v16, v70))
              goto LABEL_342;
            if (__OFADD__(v60, 1))
              goto LABEL_343;
            if (v60 + 1 < 1)
            {
              v15 = 1;
              v60 = v16;
            }
            else
            {
              if ((_DWORD)v15 == 2)
                goto LABEL_134;
              v71 = *(_QWORD *)(v61 + 88);
              v72 = v60 - v71;
              if (__OFSUB__(v60, v71))
                goto LABEL_360;
              v16 = v72 + 1;
              if (__OFADD__(v72, 1))
                goto LABEL_361;
              if (v16 < 1)
              {
                v15 = 2;
              }
              else
              {
                if ((_DWORD)v15 == 3)
                {
                  v60 = v72;
                  goto LABEL_134;
                }
                v73 = *(_QWORD *)(v61 + 112);
                v17 = __OFSUB__(v72, v73);
                v16 = v72 - v73;
                if (v17)
                  goto LABEL_372;
                if (__OFADD__(v16, 1))
                  goto LABEL_373;
                if (v16 + 1 >= 1)
                {
                  if ((_DWORD)v15 != 4)
                  {
                    v74 = 4;
                    if (v15 > 4)
                      v74 = *(unsigned __int16 *)(v61 + 16);
                    v75 = (_QWORD *)(v61 + 136);
                    v76 = 4;
                    while (v74 != v76)
                    {
                      v60 = v16 - *v75;
                      if (__OFSUB__(v16, *v75))
                        goto LABEL_352;
                      if (__OFADD__(v60, 1))
                        goto LABEL_353;
                      if (v60 + 1 < 1)
                      {
                        v15 = v76;
                        v60 = v16;
                        goto LABEL_135;
                      }
                      ++v76;
                      v75 += 3;
                      v16 = v60;
                      if (v15 == v76)
                        goto LABEL_134;
                    }
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }
LABEL_133:
                  v60 = v16;
LABEL_134:
                  if (v60)
                    goto LABEL_327;
                  goto LABEL_135;
                }
                v15 = 3;
                v60 = v72;
              }
            }
          }
LABEL_135:
          v68 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          v59 = ((-15 << v68) - 1) & v59 | (v15 << v68);
          v13 = *(_QWORD *)(v61 + 24 + 24 * v15);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v61 = v13;
          if (!*(_BYTE *)(v13 + 18))
            goto LABEL_177;
        }
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v59 = 0;
      v60 = v4;
      v13 = v56;
LABEL_177:
      v83 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16))
        goto LABEL_186;
      v84 = *(_QWORD *)(v13 + 24);
      v17 = __OFSUB__(v60, v84);
      v85 = v60 - v84;
      if (v17)
        goto LABEL_363;
      if (__OFADD__(v85, 1))
        goto LABEL_367;
      if (v85 + 1 <= 0)
      {
        v83 = 0;
      }
      else
      {
        if ((_DWORD)v83 == 1)
        {
LABEL_187:
          if (v85)
            goto LABEL_362;
          v60 = 0;
          goto LABEL_228;
        }
        v86 = *(_QWORD *)(v13 + 48);
        v60 = v85 - v86;
        if (__OFSUB__(v85, v86))
          goto LABEL_377;
        if (__OFADD__(v60, 1))
          goto LABEL_378;
        if (v60 + 1 < 1)
        {
          v83 = 1;
          v60 = v85;
        }
        else
        {
          if ((_DWORD)v83 == 2)
          {
LABEL_186:
            v85 = v60;
            goto LABEL_187;
          }
          v91 = *(_QWORD *)(v13 + 72);
          v17 = __OFSUB__(v60, v91);
          v85 = v60 - v91;
          if (v17)
            goto LABEL_389;
          if (__OFADD__(v85, 1))
            goto LABEL_390;
          if (v85 + 1 < 1)
          {
            v83 = 2;
          }
          else
          {
            if ((_DWORD)v83 == 3)
              goto LABEL_187;
            v92 = *(_QWORD *)(v13 + 96);
            v60 = v85 - v92;
            if (__OFSUB__(v85, v92))
              goto LABEL_393;
            if (__OFADD__(v60, 1))
              goto LABEL_394;
            if (v60 + 1 >= 1)
            {
              if ((_DWORD)v83 != 4)
              {
                if (v83 <= 4)
                  v93 = 4;
                else
                  v93 = *(unsigned __int16 *)(v13 + 16);
                v94 = (_QWORD *)(v13 + 120);
                v95 = 4;
                while (v93 != v95)
                {
                  v85 = v60 - *v94;
                  if (__OFSUB__(v60, *v94))
                    goto LABEL_385;
                  if (__OFADD__(v85, 1))
                    goto LABEL_386;
                  if (v85 + 1 < 1)
                  {
                    v83 = v95;
                    goto LABEL_228;
                  }
                  ++v95;
                  v94 += 3;
                  v60 = v85;
                  if (v83 == v95)
                    goto LABEL_187;
                }
LABEL_384:
                __break(1u);
LABEL_385:
                __break(1u);
LABEL_386:
                __break(1u);
                goto LABEL_387;
              }
              goto LABEL_186;
            }
            v83 = 3;
            v60 = v85;
          }
        }
      }
LABEL_228:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v82 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v83 << 8);
      v4 = v134;
      goto LABEL_229;
    }
    v82 = ((-15 << ((4 * v59 + 8) & 0x3C)) - 1) & v59 | ((unint64_t)*(unsigned __int16 *)(v56 + 16) << ((4 * v59 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v60 = 0;
    v13 = 0;
LABEL_229:
    swift_unknownObjectRetain();
    v138 = v82;
    v135 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v82, v13, v56, v135);
    swift_release();
    result = (_QWORD *)swift_unknownObjectRelease_n();
LABEL_230:
    v14 = v4 - v60;
    if (__OFSUB__(v4, v60))
      goto LABEL_345;
LABEL_231:
    if (v5[2] && (v96 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002CLL, v130), (v97 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(v5[7] + 72 * v96, (uint64_t)&v144);
    }
    else
    {
      v148 = 0;
      v146 = 0u;
      v147 = 0u;
      v145 = 0u;
      v144 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v145 + 1))
    {
      swift_release();
      outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (_QWORD *)outlined destroy of Any?((uint64_t)&v144, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_291;
    }
    v155 = v146;
    v156 = v147;
    v157 = v148;
    v153 = v144;
    v154 = v145;
    v5 = (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v158, (uint64_t)&v144, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((_QWORD *)&v145 + 1))
    {
      outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      v18 = &v144;
LABEL_15:
      result = (_QWORD *)outlined destroy of Any?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_16;
    }
    v151[2] = v146;
    v151[3] = v147;
    v152 = v148;
    v151[0] = v144;
    v151[1] = v145;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v153, (uint64_t)v150);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v151, (uint64_t)v149);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v150, (uint64_t)&v144, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v149, (uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((_QWORD *)&v145 + 1))
      break;
    if (!v148)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
      goto LABEL_289;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v144, (uint64_t)v141);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v132, (uint64_t)v140);
    v98 = v142;
    v129 = v143;
    v128 = __swift_project_boxed_opaque_existential_1(v141, v142);
    v133 = &v126;
    v99 = *(_QWORD *)(v98 - 8);
    MEMORY[0x1E0C80A78](v128);
    v101 = (char *)&v126 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v140, (uint64_t)&v139);
    v102 = type metadata accessor for Optional();
    v103 = *(_QWORD *)(v102 - 8);
    MEMORY[0x1E0C80A78](v102);
    v105 = (char *)&v126 - v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v106 = swift_dynamicCast();
    v107 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    if (v106)
    {
      v107(v105, 0, 1, v98);
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v105, v98);
      v108 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
    }
    else
    {
      v107(v105, 1, 1, v98);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
      v108 = 0;
    }
    v3 = v131;
    v4 = v134;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
    v5 = &demangling cache variable for type metadata for (Hashable & Sendable)?;
    outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
    result = (_QWORD *)outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v108 & 1) == 0)
      goto LABEL_290;
LABEL_16:
    v160 = v155;
    v161 = v156;
    v162 = v157;
    v158 = v153;
    v159 = v154;
  }
  if (!v148)
  {
    outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
    v18 = &v158;
    goto LABEL_15;
  }
  outlined destroy of Any?((uint64_t)v132, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_289:
  outlined destroy of Any?((uint64_t)v149, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v151);
  outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_290:
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v153);
  result = (_QWORD *)swift_release();
LABEL_291:
  v121 = (_OWORD *)v127;
  *(_QWORD *)(v127 + 64) = 0;
  v121[2] = 0u;
  v121[3] = 0u;
  *v121 = 0u;
  v121[1] = 0u;
  return result;
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD v14[5];
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  v16 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
  v15[0] = a1;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  v4 = *(_OWORD *)(v2 + 32);
  v26 = *(_OWORD *)(v2 + 16);
  v27 = v4;
  v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  v6 = *(_OWORD *)(v2 + 32);
  v23 = *(_OWORD *)(v2 + 16);
  v24 = v6;
  v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  v8 = v5 >> 11;
  v9 = v7 >> 11;
  v14[2] = 0xD00000000000001DLL;
  v14[3] = 0x8000000182303DF0;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v14, (_QWORD *)v2, v5 >> 11, v9);
  swift_release();
  v10 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD v14[5];
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  v3 = a1 & 1;
  v16 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  v15[0] = v3;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  v4 = *(_OWORD *)(v2 + 32);
  v26 = *(_OWORD *)(v2 + 16);
  v27 = v4;
  v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  v6 = *(_OWORD *)(v2 + 32);
  v23 = *(_OWORD *)(v2 + 16);
  v24 = v6;
  v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  v8 = v5 >> 11;
  v9 = v7 >> 11;
  v14[2] = 0xD00000000000001FLL;
  v14[3] = 0x8000000182307FA0;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v14, (_QWORD *)v2, v5 >> 11, v9);
  swift_release();
  v10 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD v14[5];
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  v16 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v15[0] = a1;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  v4 = *(_OWORD *)(v2 + 32);
  v26 = *(_OWORD *)(v2 + 16);
  v27 = v4;
  v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  v6 = *(_OWORD *)(v2 + 32);
  v23 = *(_OWORD *)(v2 + 16);
  v24 = v6;
  v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  v8 = v5 >> 11;
  v9 = v7 >> 11;
  v14[2] = 0xD000000000000021;
  v14[3] = 0x8000000182309B80;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v14, (_QWORD *)v2, v5 >> 11, v9);
  swift_release();
  v10 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  _QWORD v17[6];
  uint64_t v18;
  _QWORD v19[5];
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[10];

  v2 = v1;
  v19[3] = &type metadata for AttributedString;
  v19[4] = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  v19[0] = a1;
  v20 = xmmword_18205FD60;
  v21 = 1;
  v22 = 0;
  v4 = one-time initialization token for name;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = qword_1EDC3E4D8;
  v18 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  v6 = *(_OWORD *)(v2 + 32);
  v24[6] = *(_OWORD *)(v2 + 16);
  v24[7] = v6;
  v24[8] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v23);
  v8 = *(_OWORD *)(v2 + 32);
  v24[3] = *(_OWORD *)(v2 + 16);
  v24[4] = v8;
  v24[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v9 = BigString.UnicodeScalarView.index(roundingDown:)();
  v10 = outlined release of Locale((uint64_t)v24);
  v11 = v7 >> 11;
  v12 = v9 >> 11;
  MEMORY[0x1E0C80A78](v10);
  v17[2] = v18;
  v17[3] = v5;
  v17[4] = v19;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v17, (_QWORD *)v2, v7 >> 11, v12);
  swift_release();
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1) != 1)
  {
    v14 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 40) = v13;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v11, v12, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v19);
}

{
  _OWORD *v1;
  _QWORD *v2;
  __int128 v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD v13[5];
  _QWORD v14[5];
  __int128 v15;
  char v16;
  uint64_t v17;
  _BYTE v18[48];
  _BYTE v19[48];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v2 = v1;
  v14[4] = MEMORY[0x1E0DEB428];
  v14[3] = MEMORY[0x1E0DEB418];
  v14[0] = a1;
  v15 = xmmword_18205FD60;
  v16 = 1;
  v17 = 0;
  v3 = v1[2];
  v23 = v1[1];
  v24 = v3;
  v25 = v1[3];
  BigString.unicodeScalars.getter();
  v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v18);
  v5 = v1[2];
  v20 = v1[1];
  v21 = v5;
  v22 = v1[3];
  BigString.unicodeScalars.getter();
  v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  v7 = v4 >> 11;
  v8 = v6 >> 11;
  v13[2] = 0xD000000000000012;
  v13[3] = 0x8000000182303D10;
  v13[4] = v14;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v13, v2, v4 >> 11, v8);
  swift_release();
  v9 = *((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1) != 1)
  {
    v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v10;
    *(_QWORD *)(inited + 40) = v9;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v7, v8, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v14);
}

{
  _OWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  _QWORD v15[6];
  uint64_t v16;
  _QWORD v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];

  v2 = v1;
  v17[3] = MEMORY[0x1E0DEB418];
  v17[4] = MEMORY[0x1E0DEB428];
  v17[0] = a1;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  if (one-time initialization token for name != -1)
    swift_once();
  v3 = qword_1EDC3E478;
  v16 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
  v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  v8 = outlined release of Locale((uint64_t)v22);
  v9 = v5 >> 11;
  v10 = v7 >> 11;
  MEMORY[0x1E0C80A78](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v15, v2, v5 >> 11, v10);
  swift_release();
  v11 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

{
  _OWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  _QWORD v15[6];
  uint64_t v16;
  _QWORD v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];

  v2 = v1;
  v17[3] = MEMORY[0x1E0DEB418];
  v17[4] = MEMORY[0x1E0DEB428];
  v17[0] = a1;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  if (one-time initialization token for name != -1)
    swift_once();
  v3 = qword_1EDC3E4A8;
  v16 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
  v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  v8 = outlined release of Locale((uint64_t)v22);
  v9 = v5 >> 11;
  v10 = v7 >> 11;
  MEMORY[0x1E0C80A78](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v15, v2, v5 >> 11, v10);
  swift_release();
  v11 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

{
  _OWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  _QWORD v15[6];
  uint64_t v16;
  _QWORD v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];

  v2 = v1;
  v17[3] = MEMORY[0x1E0DEB418];
  v17[4] = MEMORY[0x1E0DEB428];
  v17[0] = a1;
  v18 = xmmword_18205FD60;
  v19 = 1;
  v20 = 0;
  if (one-time initialization token for name != -1)
    swift_once();
  v3 = qword_1EDC3E490;
  v16 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
  v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  v8 = outlined release of Locale((uint64_t)v22);
  v9 = v5 >> 11;
  v10 = v7 >> 11;
  MEMORY[0x1E0C80A78](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v15, v2, v5 >> 11, v10);
  swift_release();
  v11 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != 1)
  {
    v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  _QWORD v20[6];
  uint64_t v21;
  _QWORD v22[5];
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[10];

  v2 = v1;
  v22[3] = &type metadata for AttributedString.MarkdownSourcePosition;
  v22[4] = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition();
  v4 = (_OWORD *)swift_allocObject();
  v22[0] = v4;
  v5 = a1[5];
  v4[5] = a1[4];
  v4[6] = v5;
  *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a1 + 89);
  v6 = a1[1];
  v4[1] = *a1;
  v4[2] = v6;
  v7 = a1[3];
  v4[3] = a1[2];
  v4[4] = v7;
  v23 = xmmword_18205FD60;
  v24 = 1;
  v25 = 0;
  if (one-time initialization token for name != -1)
    swift_once();
  v8 = qword_1EDC3E500;
  v21 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  v9 = *(_OWORD *)(v2 + 32);
  v27[6] = *(_OWORD *)(v2 + 16);
  v27[7] = v9;
  v27[8] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v10 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v26);
  v11 = *(_OWORD *)(v2 + 32);
  v27[3] = *(_OWORD *)(v2 + 16);
  v27[4] = v11;
  v27[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  v12 = BigString.UnicodeScalarView.index(roundingDown:)();
  v13 = outlined release of Locale((uint64_t)v27);
  v14 = v10 >> 11;
  v15 = v12 >> 11;
  MEMORY[0x1E0C80A78](v13);
  v20[2] = v21;
  v20[3] = v8;
  v20[4] = v22;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v20, (_QWORD *)v2, v10 >> 11, v15);
  swift_release();
  v16 = *((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1) != 1)
  {
    v17 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v17;
    *(_QWORD *)(inited + 40) = v16;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v14, v15, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)()
{
  _OWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD v14[6];
  uint64_t v15;
  _QWORD v16[5];
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[10];

  v1 = v0;
  v16[3] = &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  v16[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value();
  v17 = xmmword_18205FD60;
  v18 = 1;
  v19 = 0;
  if (one-time initialization token for name != -1)
    swift_once();
  v2 = qword_1EDC3E180;
  v15 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  v3 = v0[2];
  v21[6] = v0[1];
  v21[7] = v3;
  v21[8] = v0[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v20);
  v5 = v0[2];
  v21[3] = v0[1];
  v21[4] = v5;
  v21[5] = v0[3];
  BigString.unicodeScalars.getter();
  v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  v7 = outlined release of Locale((uint64_t)v21);
  v8 = v4 >> 11;
  v9 = v6 >> 11;
  MEMORY[0x1E0C80A78](v7);
  v14[2] = v15;
  v14[3] = v2;
  v14[4] = v16;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v14, v1, v4 >> 11, v9);
  swift_release();
  v10 = *((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1) != 1)
  {
    v11 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v16);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  _QWORD v21[6];
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  char v25;
  ValueMetadata *v26;
  unint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[10];

  v4 = v3;
  v26 = &type metadata for InflectionRule;
  v27 = lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule();
  v23[0] = a1;
  v23[1] = a2;
  v25 = BYTE4(a3);
  v24 = a3;
  v28 = xmmword_18205FD60;
  v29 = 1;
  v30 = 0;
  v8 = one-time initialization token for name;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v9 = qword_1EDC3E450;
  v22 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  v10 = *(_OWORD *)(v4 + 32);
  v32[6] = *(_OWORD *)(v4 + 16);
  v32[7] = v10;
  v32[8] = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  v11 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v31);
  v12 = *(_OWORD *)(v4 + 32);
  v32[3] = *(_OWORD *)(v4 + 16);
  v32[4] = v12;
  v32[5] = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  v14 = outlined release of Locale((uint64_t)v32);
  v15 = v11 >> 11;
  v16 = v13 >> 11;
  MEMORY[0x1E0C80A78](v14);
  v21[2] = v22;
  v21[3] = v9;
  v21[4] = v23;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v21, (_QWORD *)v4, v11 >> 11, v16);
  swift_release();
  v17 = *((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1) != 1)
  {
    v18 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 40) = v17;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v23);
}

double specialized AttributedString._AttributeStorage.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  _BYTE v9[40];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (one-time initialization token for name == -1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_8:
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_8;
LABEL_3:
  v4 = qword_1EDC3E450;
  v5 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v7 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      return result;
    }
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  result = 0.0;
  *(_OWORD *)a2 = xmmword_18205FD60;
  *(_BYTE *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  _BYTE v9[40];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (one-time initialization token for name == -1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_8:
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_8;
LABEL_3:
  v4 = qword_1EDC3E500;
  v5 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v7 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      *(_BYTE *)(a2 + 105) = 0;
      return result;
    }
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  result = 0.0;
  *(_OWORD *)(a2 + 89) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 105) = 1;
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(_QWORD *a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  BOOL v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  char v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  unint64_t v115;
  __int128 *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  unint64_t *v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  _QWORD v156[3];
  __int128 *v157;
  uint64_t v158;
  unint64_t v159;
  __int128 v160;
  unint64_t v161;
  __int128 v162;
  _OWORD *v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  _QWORD *v196;
  _QWORD *v197;
  __int128 *v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  _QWORD v205[2];
  __int128 v206;
  unint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _OWORD v225[2];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE v234[48];
  _BYTE v235[48];
  __int128 v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD v241[3];
  uint64_t v242;
  uint64_t v243;
  _OWORD v244[2];
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _OWORD v256[3];
  _OWORD v257[3];
  _OWORD v258[4];

  v9 = a3;
  v166 = a1;
  v11 = v6[9];
  v12 = v6[11];
  v253 = v6[10];
  v254 = v12;
  v13 = v6[5];
  v14 = v6[7];
  v249 = v6[6];
  v250 = v14;
  v16 = v6[7];
  v15 = v6[8];
  v17 = v15;
  v252 = v6[9];
  v251 = v15;
  v18 = v6[1];
  v19 = v6[3];
  v245 = v6[2];
  v246 = v19;
  v21 = v6[3];
  v20 = v6[4];
  v22 = v20;
  v248 = v6[5];
  v247 = v20;
  v23 = *v6;
  v24 = *v6;
  v244[1] = v6[1];
  v244[0] = v23;
  v25 = v6[11];
  v230 = v253;
  v231 = v25;
  v226 = v249;
  v227 = v16;
  v228 = v17;
  v229 = v11;
  v223 = v245;
  v224 = v21;
  v225[0] = v22;
  v225[1] = v13;
  v26 = *((_QWORD *)v6 + 25);
  v255 = *((_QWORD *)v6 + 24);
  v27 = *((_QWORD *)v6 + 26);
  v232 = *((_QWORD *)v6 + 24);
  v221 = v24;
  v222 = v18;
  *(_QWORD *)&v211 = a3;
  v184 = a4;
  *(_QWORD *)&v185 = a5;
  *((_QWORD *)&v211 + 1) = a4;
  *(_QWORD *)&v212 = a5;
  *((_QWORD *)&v185 + 1) = a6;
  *((_QWORD *)&v212 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v244);
  v190 = v26;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((unint64_t)&v216, (unint64_t *)&v211, v26, v27, (uint64_t *)&v236);
  v28 = v236;
  v29 = v237;
  outlined release of AttributedString.Runs((uint64_t)v244);
  if (v9 >> 10 < *((_QWORD *)&v251 + 1) >> 10 || v9 >> 10 >= *((_QWORD *)&v253 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  v7 = *(_QWORD *)(v190 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
  v164 = v29;
  v165 = v28;
  v163 = a2;
  v29 = *(_QWORD *)(*(_QWORD *)&v244[0] + 64);
  v30 = *(_QWORD *)(*(_QWORD *)&v244[0] + 80);
  v31 = v9 >> 11;
  if (v29)
    v32 = *(_QWORD *)(*(_QWORD *)&v244[0] + 80);
  else
    v32 = 0;
  if (v32 < v31)
    goto LABEL_223;
  v161 = *((_QWORD *)&v28 + 1);
  v33 = *(_QWORD *)(*(_QWORD *)&v244[0] + 72);
  v188 = *(_QWORD *)&v244[0];
  v189 = v7;
  v34 = *(_QWORD *)(*(_QWORD *)&v244[0] + 88);
  v186 = v27;
  v180 = v9;
  v162 = v216;
  v160 = v217;
  v174 = v9 >> 10;
  v170 = *((_QWORD *)&v253 + 1) >> 10;
  v171 = *((_QWORD *)&v253 + 1);
  v168 = *((_QWORD *)&v254 + 1);
  v169 = v254;
  v167 = v255;
  v199 = v33;
  if (!v29 || v31 >= v30 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v244);
    v48 = swift_unknownObjectRetain();
    v191 = specialized Rope._endPath.getter(v48);
    swift_unknownObjectRelease();
    v8 = 0;
    v35 = 0;
    if (!v29)
    {
      v49 = 0;
LABEL_65:
      v187 = v31 - v35;
      if (__OFSUB__(v31, v35))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v57 = (_QWORD *)v188;
      v58 = *(_OWORD *)(v188 + 32);
      v258[0] = *(_OWORD *)(v188 + 16);
      v258[1] = v58;
      v258[2] = *(_OWORD *)(v188 + 48);
      v29 = (unint64_t)v258;
      BigString.utf8.getter();
      if (__OFSUB__(0, v35))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      v159 = BigString.UTF8View.index(_:offsetBy:)();
      v29 = v59;
      v61 = v60;
      v9 = v62;
      outlined release of Locale((uint64_t)&v233);
      v177 = *((_QWORD *)&v247 + 1);
      if (v49 >= *((uint64_t *)&v247 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }
      if (v34 != *(_QWORD *)(v188 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }
      v199 = v49;
      v156[0] = v9;
      v156[1] = v61;
      v156[2] = v29;
      v29 = *(_QWORD *)(v188 + 64);
      v9 = *(_QWORD *)(v188 + 80);
      if (v8)
      {
        v63 = v191;
        v64 = v8 + 24 * ((v191 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v65 = *(_QWORD *)(v64 + 40);
        v194 = *(_QWORD *)(v64 + 32);
        swift_bridgeObjectRetain();
        v158 = v65;
        swift_bridgeObjectRetain();
        v66 = v34;
      }
      else
      {
        swift_unknownObjectRetain();
        v63 = v191;
        specialized Rope._Node.subscript.getter(v191, v29);
        v194 = v67;
        v158 = v68;
        swift_unknownObjectRelease();
        v29 = *(_QWORD *)(v188 + 64);
        v9 = *(_QWORD *)(v188 + 80);
        v66 = *(_QWORD *)(v188 + 88);
      }
      v157 = (__int128 *)(v188 + 16);
      v183 = v199 + 1;
      v195 = (char *)v225 + 8;
      *(_QWORD *)&v221 = v34;
      *((_QWORD *)&v221 + 1) = v63;
      v198 = (__int128 *)&v239;
      *(_QWORD *)&v222 = v8;
      v176 = (unint64_t *)(v190 + 40);
LABEL_73:
      if (v34 != v66)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      if (v8)
      {
        v69 = v191;
        v70 = v8 + 24 * ((v191 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v71 = *(_QWORD *)(v70 + 24);
        v9 = *(_QWORD *)(v70 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v69 = v191;
        v71 = specialized Rope._Node.subscript.getter(v191, v29);
        v9 = v72;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v187, v71))
        goto LABEL_216;
      v173 = v187 + v71;
      v181 = v66;
      if (v29)
      {
        v73 = ((-15 << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        v73 = 0;
      }
      v74 = v186;
      v75 = (uint64_t)v195;
      if (v69 >= v73)
        goto LABEL_217;
      if (v8)
      {
        v76 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        v77 = ((v69 >> v76) & 0xF) + 1;
        if (v77 < *(unsigned __int16 *)(v8 + 16))
        {
          v182 = (v77 << v76) | ((-15 << v76) - 1) & v69;
          swift_unknownObjectRelease_n();
          v78 = v194;
LABEL_88:
          v29 = v222;
LABEL_96:
          if (v183 != v177)
          {
            if ((_QWORD)v221 == v57[11])
            {
              v175 = v8;
              v178 = v221;
              v172 = v29;
              if (v29)
              {
                v90 = v29 + 24 * ((v182 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                v29 = *(_QWORD *)(v90 + 32);
                v91 = *(_QWORD *)(v90 + 40);
                swift_bridgeObjectRetain();
                v179 = v91;
                swift_bridgeObjectRetain();
              }
              else
              {
                v92 = v57[8];
                v9 = v57[10];
                swift_unknownObjectRetain();
                v75 = (uint64_t)v195;
                specialized Rope._Node.subscript.getter(v182, v92);
                v179 = v93;
                v29 = v94;
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRetain();
              v95 = 0;
              v96 = v176;
              v199 = v29;
              while (1)
              {
                v97 = v95 + 1;
                if (__OFADD__(v95, 1))
                {
                  __break(1u);
                  goto LABEL_208;
                }
                v8 = *(v96 - 1);
                v9 = *v96;
                if (*(_QWORD *)(v78 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  v98 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v99 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v78 + 56) + 72 * v98, (uint64_t)&v216);
                  }
                  else
                  {
                    v220 = 0;
                    v218 = 0u;
                    v219 = 0u;
                    v216 = 0u;
                    v217 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v29 = v199;
                  if (!*(_QWORD *)(v199 + 16))
                  {
LABEL_111:
                    v215 = 0;
                    v213 = 0u;
                    v214 = 0u;
                    v211 = 0u;
                    v212 = 0u;
                    goto LABEL_118;
                  }
                }
                else
                {
                  v220 = 0;
                  v218 = 0u;
                  v219 = 0u;
                  v216 = 0u;
                  v217 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v29 + 16))
                    goto LABEL_111;
                }
                swift_bridgeObjectRetain();
                v100 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v101 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v100, (uint64_t)&v211);
                }
                else
                {
                  v215 = 0;
                  v213 = 0u;
                  v214 = 0u;
                  v211 = 0u;
                  v212 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v216, (uint64_t)&v221, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v211, v75, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((_QWORD *)&v222 + 1))
                {
                  if ((_QWORD)v226)
                    goto LABEL_135;
                  outlined destroy of Any?((uint64_t)&v221, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v211, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v221, (uint64_t)v205, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(_QWORD)v226)
                  goto LABEL_134;
                v102 = *(_OWORD *)(v75 + 48);
                v202 = *(_OWORD *)(v75 + 32);
                v203 = v102;
                v204 = *(_QWORD *)(v75 + 64);
                v103 = *(_OWORD *)(v75 + 16);
                v200 = *(_OWORD *)v75;
                v201 = v103;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v205, (uint64_t)v257);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v200, (uint64_t)v256);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v257, (uint64_t)&v236, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v256, (uint64_t)v198, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v238)
                {
                  if (!v240)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v236);
LABEL_103:
                    v8 = 0;
                    goto LABEL_104;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v236, (uint64_t)v241);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v198, (uint64_t)v235);
                  v104 = v242;
                  v193 = v243;
                  v192 = __swift_project_boxed_opaque_existential_1(v241, v242);
                  v197 = v156;
                  v105 = *(_QWORD *)(v104 - 8);
                  MEMORY[0x1E0C80A78](v192);
                  v107 = (char *)v156 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v235, (uint64_t)v234);
                  v108 = type metadata accessor for Optional();
                  v196 = v156;
                  v109 = *(_QWORD *)(v108 - 8);
                  MEMORY[0x1E0C80A78](v108);
                  v111 = (char *)v156 - v110;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v112 = swift_dynamicCast();
                  v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56);
                  if (v112)
                  {
                    v113(v111, 0, 1, v104);
                    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v107, v111, v104);
                    v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
                  }
                  else
                  {
                    v113(v111, 1, 1, v104);
                    (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
                    v8 = 0;
                  }
                  v7 = v189;
                  v78 = v194;
                  v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v235);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
                  v75 = (uint64_t)v195;
                }
                else
                {
                  if (v240)
                  {
                    outlined destroy of Any?((uint64_t)v198, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }
                  v8 = 1;
                }
LABEL_104:
                v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?((uint64_t)v256, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v257, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v200);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v205);
                outlined destroy of Any?((uint64_t)&v221, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v211, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0)
                  goto LABEL_136;
LABEL_105:
                v96 += 2;
                ++v95;
                v29 = v199;
                if (v97 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v57 = (_QWORD *)v188;
                  v29 = *(_QWORD *)(v188 + 64);
                  v9 = *(_QWORD *)(v188 + 80);
                  v66 = *(_QWORD *)(v188 + 88);
                  v187 = v173;
                  v34 = v178;
                  *(_QWORD *)&v221 = v178;
                  *((_QWORD *)&v221 + 1) = v182;
                  v8 = v172;
                  v191 = v182;
                  *(_QWORD *)&v222 = v172;
                  v44 = __OFADD__(v183++, 1);
                  if (!v44)
                    goto LABEL_73;
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v205);
LABEL_135:
                  outlined destroy of Any?((uint64_t)&v221, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v211, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v216, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v57 = (_QWORD *)v188;
                  v74 = v186;
                  v8 = v175;
                  v69 = v191;
                  goto LABEL_137;
                }
              }
            }
            goto LABEL_218;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v181 != v57[11])
            goto LABEL_228;
          if (v8)
          {
            v29 = *(_QWORD *)(v8 + 24 * ((v69 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v114 = *(_QWORD *)(v188 + 64);
            swift_unknownObjectRetain();
            v29 = specialized Rope._Node.subscript.getter(v69, v114);
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v115 = v187 + v29;
          if (__OFADD__(v187, v29))
            goto LABEL_229;
          v116 = v157;
          v117 = v157[1];
          v257[0] = *v157;
          v257[1] = v117;
          v257[2] = v157[2];
          v29 = (unint64_t)v257;
          BigString.utf8.getter();
          if (__OFSUB__(v115, v159 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }
          v29 = BigString.UTF8View.index(_:offsetBy:)();
          v119 = v118;
          v120 = v116;
          v122 = v121;
          v124 = v123;
          outlined release of Locale((uint64_t)v234);
          if (v170 >= v29 >> 10)
            v9 = v29;
          else
            v9 = v171;
          if (v170 >= v29 >> 10)
            v125 = v119;
          else
            v125 = v169;
          if (v170 >= v29 >> 10)
            v7 = v122;
          else
            v7 = v168;
          if (v170 >= v29 >> 10)
            v8 = v124;
          else
            v8 = v167;
          v126 = *v120;
          v127 = v120[2];
          v256[1] = v120[1];
          v256[2] = v127;
          v256[0] = v126;
          if (v9 >> 10 < v174)
            goto LABEL_231;
          *(_QWORD *)&v211 = v180;
          *((_QWORD *)&v211 + 1) = v184;
          v212 = v185;
          *(_QWORD *)&v213 = v9;
          *((_QWORD *)&v213 + 1) = v125;
          *(_QWORD *)&v214 = v7;
          *((_QWORD *)&v214 + 1) = v8;
          v128 = *(_QWORD *)(v74 + 16);
          if (!v128 || v174 == v9 >> 10)
          {
            v199 = v125;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v244);
LABEL_172:
            if (v165 == *(_QWORD *)(v188 + 88))
            {
              if (v164)
              {
                v29 = *(_QWORD *)(v164 + 24 * ((v161 >> ((4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v134 = *(_QWORD *)(v188 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v161, v134);
                v29 = v135;
                swift_unknownObjectRelease();
              }
              if (one-time initialization token for name == -1)
              {
                if (!*(_QWORD *)(v29 + 16))
                {
LABEL_234:
                  v220 = 0;
                  v218 = 0u;
                  v219 = 0u;
                  v216 = 0u;
                  v217 = 0u;
                  goto LABEL_235;
                }
LABEL_178:
                v136 = qword_1EDC3E4D8;
                v137 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
                swift_bridgeObjectRetain();
                v138 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v136);
                if ((v139 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v138, (uint64_t)&v216);
                }
                else
                {
                  v220 = 0;
                  v218 = 0u;
                  v219 = 0u;
                  v216 = 0u;
                  v217 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v217 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v216, (uint64_t)&v210);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v216);
LABEL_236:
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v162 >> 10)
                  {
                    v154 = v163;
                    *v163 = v162;
                    v154[1] = v160;
                    v155 = v199;
                    *((_QWORD *)v154 + 4) = v9;
                    *((_QWORD *)v154 + 5) = v155;
                    *((_QWORD *)v154 + 6) = v7;
                    *((_QWORD *)v154 + 7) = v8;
                    return result;
                  }
                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }
LABEL_235:
                outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                *v166 = 0;
                goto LABEL_236;
              }
LABEL_233:
              swift_once();
              if (!*(_QWORD *)(v29 + 16))
                goto LABEL_234;
              goto LABEL_178;
            }
LABEL_232:
            __break(1u);
            goto LABEL_233;
          }
          v129 = v125;
          outlined retain of Locale((uint64_t)v256);
          swift_bridgeObjectRetain();
          v29 = 40;
          v130 = v128;
          while (*(_QWORD *)(v74 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16;
            if (!--v130)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v235);
          v205[0] = v180;
          v205[1] = v184;
          v206 = v185;
          v207 = v180;
          v208 = v184;
          v209 = v185;
          v29 = (unint64_t)&v236;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, v205, (unint64_t *)&v221);
          result = outlined release of Locale((uint64_t)&v236);
          if (*((_QWORD *)&v224 + 1) != 2)
          {
            v9 = v223;
            if (v174 > (unint64_t)v223 >> 10)
              goto LABEL_244;
            v129 = *((_QWORD *)&v223 + 1);
            v8 = *((_QWORD *)&v224 + 1);
            v7 = v224;
          }
LABEL_166:
          v131 = 0;
          *(_QWORD *)&v200 = v180;
          *((_QWORD *)&v200 + 1) = v184;
          v201 = v185;
          *(_QWORD *)&v202 = v9;
          *((_QWORD *)&v202 + 1) = v129;
          v132 = 40;
          *(_QWORD *)&v203 = v7;
          *((_QWORD *)&v203 + 1) = v8;
          v199 = v129;
          while (1)
          {
            v133 = v131 + 1;
            if (__OFADD__(v131, 1))
              break;
            if (*(_QWORD *)(v74 + v132))
            {
              swift_bridgeObjectRetain();
              v140 = (unint64_t *)(v74 + 40);
              v141 = (char *)MEMORY[0x1E0DEE9D8];
              do
              {
                v142 = *v140;
                if (*v140)
                {
                  v143 = *(v140 - 1);
                  if ((v142 & 0x2000000000000000) != 0 ? HIBYTE(v142) & 0xF : v143 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v142 & 0x1000000000000000) != 0)
                    {
                      v145 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }
                    else
                    {
                      if ((v142 & 0x2000000000000000) != 0)
                      {
                        *(_QWORD *)&v221 = *(v140 - 1);
                        *((_QWORD *)&v221 + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        if ((v143 & 0x1000000000000000) == 0)
                          _StringObject.sharedUTF8.getter();
                        swift_bridgeObjectRetain();
                      }
                      v145 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v141 + 2) + 1, 1, v141);
                    v147 = *((_QWORD *)v141 + 2);
                    v146 = *((_QWORD *)v141 + 3);
                    if (v147 >= v146 >> 1)
                      v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v146 > 1), v147 + 1, 1, v141);
                    *((_QWORD *)v141 + 2) = v147 + 1;
                    *(_DWORD *)&v141[4 * v147 + 32] = v145;
                  }
                }
                v140 += 2;
                --v128;
              }
              while (v128);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v241);
              v148 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v141);
              v150 = v149;
              v152 = v151;
              v29 = v153;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v221);
              outlined release of Locale((uint64_t)v256);
              result = outlined release of AttributedString.Runs((uint64_t)v244);
              if (v29 != 2)
              {
                if (v174 > v148 >> 10)
                  goto LABEL_245;
                v9 = v148;
                v199 = v150;
                v7 = v152;
                v8 = v29;
              }
              goto LABEL_172;
            }
            v132 += 16;
            ++v131;
            if (v133 == v128)
            {
              outlined release of Locale((uint64_t)v256);
              goto LABEL_171;
            }
          }
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }
      v79 = *(unsigned __int8 *)(v29 + 18);
      v80 = (4 * v79 + 8) & 0x3C;
      v81 = (v69 >> v80) & 0xF;
      *(_QWORD *)&v236 = v81;
      if (v79)
      {
        v9 = v29 + 24;
        swift_unknownObjectRetain();
        v82 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v29 + 24, (uint64_t *)&v236, (uint64_t)&v221, v29, v79);
        swift_unknownObjectRelease();
        v78 = v194;
        if ((v82 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          v182 = *((_QWORD *)&v221 + 1);
          v75 = (uint64_t)v195;
          goto LABEL_88;
        }
      }
      else
      {
        v83 = v81 + 1;
        if (v81 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          v84 = v83 << v80;
          v69 = v191;
          v182 = v84 | ((-15 << v80) - 1) & v191;
          v78 = v194;
          v75 = (uint64_t)v195;
          goto LABEL_96;
        }
        v69 = v191;
        v78 = v194;
      }
      if (v29)
      {
        v85 = *(unsigned __int8 *)(v29 + 18);
        v86 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        v87 = (4 * v85 + 8) & 0x3C;
        v88 = ((-15 << v87) - 1) & v85;
        v78 = v194;
        v89 = v86 << v87;
        v69 = v191;
        v182 = v88 | v89;
      }
      else
      {
        v182 = 0;
      }
      v75 = (uint64_t)v195;
      v29 = 0;
      *(_QWORD *)&v221 = v181;
      goto LABEL_96;
    }
LABEL_37:
    swift_unknownObjectRetain();
    v49 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v34, v191, v8, v29, v199);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }
  v178 = v34;
  v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v244);
    swift_unknownObjectRetain();
    v7 = -15;
    v8 = 24;
    v35 = v31;
    v36 = v29;
    while (1)
    {
      v40 = *(unsigned __int16 *)(v36 + 16);
      if (!*(_WORD *)(v36 + 16))
        goto LABEL_14;
      v41 = *(_QWORD *)(v36 + 40);
      v42 = v35 - v41;
      if (__OFSUB__(v35, v41))
        goto LABEL_213;
      if (__OFADD__(v42, 1))
        goto LABEL_214;
      if (v42 + 1 <= 0)
      {
        v40 = 0;
      }
      else
      {
        if ((_DWORD)v40 == 1)
        {
          v35 -= v41;
          goto LABEL_14;
        }
        v43 = *(_QWORD *)(v36 + 64);
        v44 = __OFSUB__(v42, v43);
        v45 = v42 - v43;
        if (v44)
          goto LABEL_219;
        if (__OFADD__(v45, 1))
          goto LABEL_220;
        if (v45 + 1 < 1)
        {
          v40 = 1;
          v35 = v42;
        }
        else
        {
          if ((_DWORD)v40 == 2)
          {
            v35 = v45;
LABEL_14:
            if (v35)
              goto LABEL_212;
            goto LABEL_15;
          }
          v46 = (_QWORD *)(v36 + 88);
          v47 = 2;
          while (1)
          {
            if (v40 == v47)
              goto LABEL_209;
            v35 = v45 - *v46;
            if (__OFSUB__(v45, *v46))
              goto LABEL_210;
            if (__OFADD__(v35, 1))
              goto LABEL_211;
            if (v35 + 1 < 1)
              break;
            ++v47;
            v46 += 3;
            v45 = v35;
            if (v40 == v47)
              goto LABEL_14;
          }
          v40 = v47;
          v35 = v45;
        }
      }
LABEL_15:
      v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
      v9 = ((-15 << v37) - 1) & v9 | (v40 << v37);
      v38 = *(_QWORD *)(v36 + 24 + 24 * v40);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v36 = v38;
      if (!*(_BYTE *)(v38 + 18))
        goto LABEL_39;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v244);
  result = swift_unknownObjectRetain();
  v35 = v31;
  v38 = v29;
LABEL_39:
  v50 = *(unsigned __int16 *)(v38 + 16);
  v8 = v38;
  if (!*(_WORD *)(v38 + 16))
  {
    v7 = v189;
    goto LABEL_46;
  }
  v51 = *(_QWORD *)(v38 + 24);
  v52 = v35 - v51;
  v7 = v189;
  if (__OFSUB__(v35, v51))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  if (__OFADD__(v52, 1))
    goto LABEL_243;
  if (v52 + 1 <= 0)
    goto LABEL_48;
  if ((_DWORD)v50 == 1)
  {
    v35 -= v51;
LABEL_46:
    if (!v35)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v191 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v50 << 8);
      v9 = v180;
      v34 = v178;
      goto LABEL_37;
    }
    __break(1u);
LABEL_48:
    v50 = 0;
    goto LABEL_63;
  }
  v53 = *(_QWORD *)(v38 + 48);
  v44 = __OFSUB__(v52, v53);
  v54 = v52 - v53;
  if (v44)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  if (!__OFADD__(v54, 1))
  {
    if (v54 + 1 < 1)
    {
      v50 = 1;
      v35 = v52;
      goto LABEL_63;
    }
    if ((_DWORD)v50 != 2)
    {
      v55 = (_QWORD *)(v38 + 72);
      v56 = 2;
      while (1)
      {
        if (v50 == v56)
          goto LABEL_239;
        v35 = v54 - *v55;
        if (__OFSUB__(v54, *v55))
          goto LABEL_240;
        if (__OFADD__(v35, 1))
          goto LABEL_241;
        if (v35 + 1 < 1)
          break;
        ++v56;
        v55 += 3;
        v54 = v35;
        if (v50 == v56)
          goto LABEL_46;
      }
      v50 = v56;
      v35 = v54;
      goto LABEL_63;
    }
    v35 = v54;
    goto LABEL_46;
  }
LABEL_247:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(_OWORD *a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  BOOL v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  unint64_t v116;
  __int128 *v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _OWORD *v155;
  _OWORD *v156;
  unint64_t v157;
  _QWORD v158[3];
  __int128 *v159;
  unint64_t v160;
  uint64_t v161;
  __int128 v162;
  unint64_t v163;
  __int128 v164;
  _OWORD *v165;
  unint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  _QWORD *v199;
  __int128 *v200;
  unint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  _QWORD v207[2];
  __int128 v208;
  unint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _OWORD v227[2];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE v236[48];
  _BYTE v237[48];
  __int128 v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD v243[3];
  uint64_t v244;
  uint64_t v245;
  _OWORD v246[2];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  _OWORD v258[3];
  _OWORD v259[3];
  _OWORD v260[4];

  v9 = a3;
  v168 = a1;
  v11 = v6[9];
  v12 = v6[11];
  v255 = v6[10];
  v256 = v12;
  v13 = v6[5];
  v14 = v6[7];
  v251 = v6[6];
  v252 = v14;
  v16 = v6[7];
  v15 = v6[8];
  v17 = v15;
  v254 = v6[9];
  v253 = v15;
  v18 = v6[1];
  v19 = v6[3];
  v247 = v6[2];
  v248 = v19;
  v21 = v6[3];
  v20 = v6[4];
  v22 = v20;
  v250 = v6[5];
  v249 = v20;
  v23 = *v6;
  v24 = *v6;
  v246[1] = v6[1];
  v246[0] = v23;
  v25 = v6[11];
  v232 = v255;
  v233 = v25;
  v228 = v251;
  v229 = v16;
  v230 = v17;
  v231 = v11;
  v225 = v247;
  v226 = v21;
  v227[0] = v22;
  v227[1] = v13;
  v26 = *((_QWORD *)v6 + 25);
  v257 = *((_QWORD *)v6 + 24);
  v27 = *((_QWORD *)v6 + 26);
  v234 = *((_QWORD *)v6 + 24);
  v223 = v24;
  v224 = v18;
  *(_QWORD *)&v213 = a3;
  v185 = a4;
  *(_QWORD *)&v186 = a5;
  *((_QWORD *)&v213 + 1) = a4;
  *(_QWORD *)&v214 = a5;
  *((_QWORD *)&v186 + 1) = a6;
  *((_QWORD *)&v214 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v246);
  v192 = v26;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((unint64_t)&v218, (unint64_t *)&v213, v26, v27, (uint64_t *)&v238);
  v28 = v238;
  v29 = v239;
  outlined release of AttributedString.Runs((uint64_t)v246);
  if (v9 >> 10 < *((_QWORD *)&v253 + 1) >> 10 || v9 >> 10 >= *((_QWORD *)&v255 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  v7 = *(_QWORD *)(v192 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
  v166 = v29;
  v167 = v28;
  v165 = a2;
  v29 = *(_QWORD *)(*(_QWORD *)&v246[0] + 64);
  v30 = *(_QWORD *)(*(_QWORD *)&v246[0] + 80);
  v31 = v9 >> 11;
  if (v29)
    v32 = *(_QWORD *)(*(_QWORD *)&v246[0] + 80);
  else
    v32 = 0;
  if (v32 < v31)
    goto LABEL_223;
  v163 = *((_QWORD *)&v28 + 1);
  v33 = *(_QWORD *)(*(_QWORD *)&v246[0] + 72);
  v189 = *(_QWORD *)(*(_QWORD *)&v246[0] + 88);
  v190 = *(_QWORD *)&v246[0];
  v187 = v27;
  v181 = v9;
  v191 = v7;
  v164 = v218;
  v162 = v219;
  v176 = v9 >> 10;
  v172 = *((_QWORD *)&v255 + 1) >> 10;
  v173 = *((_QWORD *)&v255 + 1);
  v170 = *((_QWORD *)&v256 + 1);
  v171 = v256;
  v169 = v257;
  if (!v29 || v31 >= v30 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v246);
    v47 = swift_unknownObjectRetain();
    v193 = specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    v8 = 0;
    v34 = 0;
    if (!v29)
    {
      v48 = 0;
LABEL_65:
      v56 = (_QWORD *)v190;
      v188 = v31 - v34;
      if (__OFSUB__(v31, v34))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v57 = *(_OWORD *)(v190 + 32);
      v260[0] = *(_OWORD *)(v190 + 16);
      v260[1] = v57;
      v260[2] = *(_OWORD *)(v190 + 48);
      v29 = (unint64_t)v260;
      BigString.utf8.getter();
      if (__OFSUB__(0, v34))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      v29 = BigString.UTF8View.index(_:offsetBy:)();
      v59 = v58;
      v9 = v60;
      v62 = v61;
      outlined release of Locale((uint64_t)&v235);
      v179 = *((_QWORD *)&v249 + 1);
      if (v48 >= *((uint64_t *)&v249 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }
      v160 = v29;
      v63 = v189;
      if (v189 != *(_QWORD *)(v190 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }
      v201 = v48;
      v158[0] = v62;
      v158[1] = v9;
      v158[2] = v59;
      v29 = *(_QWORD *)(v190 + 64);
      v9 = *(_QWORD *)(v190 + 80);
      if (v8)
      {
        v64 = v193;
        v65 = v8 + 24 * ((v193 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v66 = *(_QWORD *)(v65 + 40);
        v196 = *(_QWORD *)(v65 + 32);
        swift_bridgeObjectRetain();
        v161 = v66;
        swift_bridgeObjectRetain();
        v67 = v189;
      }
      else
      {
        swift_unknownObjectRetain();
        v64 = v193;
        specialized Rope._Node.subscript.getter(v193, v29);
        v196 = v68;
        v161 = v69;
        swift_unknownObjectRelease();
        v29 = *(_QWORD *)(v190 + 64);
        v9 = *(_QWORD *)(v190 + 80);
        v67 = *(_QWORD *)(v190 + 88);
      }
      v159 = (__int128 *)(v190 + 16);
      v184 = v201 + 1;
      v197 = (char *)v227 + 8;
      *(_QWORD *)&v223 = v189;
      *((_QWORD *)&v223 + 1) = v64;
      v200 = (__int128 *)&v241;
      *(_QWORD *)&v224 = v8;
      v178 = (unint64_t *)(v192 + 40);
LABEL_73:
      if (v63 != v67)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      if (v8)
      {
        v70 = v193;
        v71 = v8 + 24 * ((v193 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v72 = *(_QWORD *)(v71 + 24);
        v9 = *(_QWORD *)(v71 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v70 = v193;
        v72 = specialized Rope._Node.subscript.getter(v193, v29);
        v9 = v73;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v188, v72))
        goto LABEL_216;
      v175 = v188 + v72;
      v182 = v67;
      if (v29)
      {
        v74 = ((-15 << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        v74 = 0;
      }
      v75 = v187;
      v76 = (uint64_t)v197;
      if (v70 >= v74)
        goto LABEL_217;
      if (v8)
      {
        v77 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        v78 = ((v70 >> v77) & 0xF) + 1;
        if (v78 < *(unsigned __int16 *)(v8 + 16))
        {
          v183 = (v78 << v77) | ((-15 << v77) - 1) & v70;
          swift_unknownObjectRelease_n();
          v79 = v196;
LABEL_88:
          v29 = v224;
LABEL_96:
          if (v184 != v179)
          {
            if ((_QWORD)v223 == v56[11])
            {
              v177 = v8;
              v189 = v223;
              v174 = v29;
              if (v29)
              {
                v91 = v29 + 24 * ((v183 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                v29 = *(_QWORD *)(v91 + 32);
                v92 = *(_QWORD *)(v91 + 40);
                swift_bridgeObjectRetain();
                v180 = v92;
                swift_bridgeObjectRetain();
              }
              else
              {
                v93 = v56[8];
                v9 = v56[10];
                swift_unknownObjectRetain();
                v76 = (uint64_t)v197;
                specialized Rope._Node.subscript.getter(v183, v93);
                v180 = v94;
                v29 = v95;
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRetain();
              v96 = 0;
              v97 = v178;
              v201 = v29;
              while (1)
              {
                v98 = v96 + 1;
                if (__OFADD__(v96, 1))
                {
                  __break(1u);
                  goto LABEL_208;
                }
                v8 = *(v97 - 1);
                v9 = *v97;
                if (*(_QWORD *)(v79 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  v99 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v100 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v79 + 56) + 72 * v99, (uint64_t)&v218);
                  }
                  else
                  {
                    v222 = 0;
                    v220 = 0u;
                    v221 = 0u;
                    v218 = 0u;
                    v219 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v29 = v201;
                  if (!*(_QWORD *)(v201 + 16))
                  {
LABEL_111:
                    v217 = 0;
                    v215 = 0u;
                    v216 = 0u;
                    v213 = 0u;
                    v214 = 0u;
                    goto LABEL_118;
                  }
                }
                else
                {
                  v222 = 0;
                  v220 = 0u;
                  v221 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v29 + 16))
                    goto LABEL_111;
                }
                swift_bridgeObjectRetain();
                v101 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v102 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v101, (uint64_t)&v213);
                }
                else
                {
                  v217 = 0;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v218, (uint64_t)&v223, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v213, v76, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((_QWORD *)&v224 + 1))
                {
                  if ((_QWORD)v228)
                    goto LABEL_135;
                  outlined destroy of Any?((uint64_t)&v223, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v223, (uint64_t)v207, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(_QWORD)v228)
                  goto LABEL_134;
                v103 = *(_OWORD *)(v76 + 48);
                v204 = *(_OWORD *)(v76 + 32);
                v205 = v103;
                v206 = *(_QWORD *)(v76 + 64);
                v104 = *(_OWORD *)(v76 + 16);
                v202 = *(_OWORD *)v76;
                v203 = v104;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v207, (uint64_t)v259);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v202, (uint64_t)v258);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v259, (uint64_t)&v238, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v258, (uint64_t)v200, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v240)
                {
                  if (!v242)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v238);
LABEL_103:
                    v8 = 0;
                    goto LABEL_104;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v238, (uint64_t)v243);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v200, (uint64_t)v237);
                  v105 = v244;
                  v195 = v245;
                  v194 = __swift_project_boxed_opaque_existential_1(v243, v244);
                  v199 = v158;
                  v106 = *(_QWORD *)(v105 - 8);
                  MEMORY[0x1E0C80A78](v194);
                  v108 = (char *)v158 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v237, (uint64_t)v236);
                  v109 = type metadata accessor for Optional();
                  v198 = v158;
                  v110 = *(_QWORD *)(v109 - 8);
                  MEMORY[0x1E0C80A78](v109);
                  v112 = (char *)v158 - v111;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v113 = swift_dynamicCast();
                  v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
                  if (v113)
                  {
                    v114(v112, 0, 1, v105);
                    (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v108, v112, v105);
                    v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
                  }
                  else
                  {
                    v114(v112, 1, 1, v105);
                    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
                    v8 = 0;
                  }
                  v7 = v191;
                  v79 = v196;
                  v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v237);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v243);
                  v76 = (uint64_t)v197;
                }
                else
                {
                  if (v242)
                  {
                    outlined destroy of Any?((uint64_t)v200, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }
                  v8 = 1;
                }
LABEL_104:
                v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?((uint64_t)v258, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v259, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v202);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v207);
                outlined destroy of Any?((uint64_t)&v223, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v213, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0)
                  goto LABEL_136;
LABEL_105:
                v97 += 2;
                ++v96;
                v29 = v201;
                if (v98 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v63 = v189;
                  v56 = (_QWORD *)v190;
                  v29 = *(_QWORD *)(v190 + 64);
                  v9 = *(_QWORD *)(v190 + 80);
                  v67 = *(_QWORD *)(v190 + 88);
                  v188 = v175;
                  *(_QWORD *)&v223 = v189;
                  *((_QWORD *)&v223 + 1) = v183;
                  v8 = v174;
                  v193 = v183;
                  *(_QWORD *)&v224 = v174;
                  v43 = __OFADD__(v184++, 1);
                  if (!v43)
                    goto LABEL_73;
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v207);
LABEL_135:
                  outlined destroy of Any?((uint64_t)&v223, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v218, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v56 = (_QWORD *)v190;
                  v75 = v187;
                  v8 = v177;
                  v70 = v193;
                  goto LABEL_137;
                }
              }
            }
            goto LABEL_218;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v182 != v56[11])
            goto LABEL_228;
          if (v8)
          {
            v29 = *(_QWORD *)(v8 + 24 * ((v70 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v115 = *(_QWORD *)(v190 + 64);
            swift_unknownObjectRetain();
            v29 = specialized Rope._Node.subscript.getter(v70, v115);
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v116 = v188 + v29;
          if (__OFADD__(v188, v29))
            goto LABEL_229;
          v117 = v159;
          v118 = v159[1];
          v259[0] = *v159;
          v259[1] = v118;
          v259[2] = v159[2];
          v29 = (unint64_t)v259;
          BigString.utf8.getter();
          if (__OFSUB__(v116, v160 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }
          v29 = BigString.UTF8View.index(_:offsetBy:)();
          v120 = v119;
          v121 = v117;
          v123 = v122;
          v125 = v124;
          outlined release of Locale((uint64_t)v236);
          if (v172 >= v29 >> 10)
            v9 = v29;
          else
            v9 = v173;
          if (v172 >= v29 >> 10)
            v126 = v120;
          else
            v126 = v171;
          if (v172 >= v29 >> 10)
            v7 = v123;
          else
            v7 = v170;
          if (v172 >= v29 >> 10)
            v8 = v125;
          else
            v8 = v169;
          v127 = *v121;
          v128 = v121[2];
          v258[1] = v121[1];
          v258[2] = v128;
          v258[0] = v127;
          if (v9 >> 10 < v176)
            goto LABEL_231;
          *(_QWORD *)&v213 = v181;
          *((_QWORD *)&v213 + 1) = v185;
          v214 = v186;
          *(_QWORD *)&v215 = v9;
          *((_QWORD *)&v215 + 1) = v126;
          *(_QWORD *)&v216 = v7;
          *((_QWORD *)&v216 + 1) = v8;
          v129 = *(_QWORD *)(v75 + 16);
          if (!v129 || v176 == v9 >> 10)
          {
            v201 = v126;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v246);
LABEL_172:
            if (v167 == *(_QWORD *)(v190 + 88))
            {
              if (v166)
              {
                v29 = *(_QWORD *)(v166 + 24 * ((v163 >> ((4 * *(_BYTE *)(v166 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v135 = *(_QWORD *)(v190 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v163, v135);
                v29 = v136;
                swift_unknownObjectRelease();
              }
              if (one-time initialization token for name == -1)
              {
                if (!*(_QWORD *)(v29 + 16))
                {
LABEL_234:
                  v222 = 0;
                  v220 = 0u;
                  v221 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                  goto LABEL_235;
                }
LABEL_178:
                v137 = qword_1EDC3E450;
                v138 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                swift_bridgeObjectRetain();
                v139 = specialized __RawDictionaryStorage.find<A>(_:)(v138, v137);
                if ((v140 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v139, (uint64_t)&v218);
                }
                else
                {
                  v222 = 0;
                  v220 = 0u;
                  v221 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v219 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v218, (uint64_t)&v212);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v218);
LABEL_236:
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v164 >> 10)
                  {
                    v156 = v165;
                    *v165 = v164;
                    v156[1] = v162;
                    v157 = v201;
                    *((_QWORD *)v156 + 4) = v9;
                    *((_QWORD *)v156 + 5) = v157;
                    *((_QWORD *)v156 + 6) = v7;
                    *((_QWORD *)v156 + 7) = v8;
                    return result;
                  }
                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }
LABEL_235:
                outlined destroy of Any?((uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v155 = v168;
                *v168 = xmmword_18205FD60;
                *((_BYTE *)v155 + 20) = 0;
                *((_DWORD *)v155 + 4) = 0;
                goto LABEL_236;
              }
LABEL_233:
              swift_once();
              if (!*(_QWORD *)(v29 + 16))
                goto LABEL_234;
              goto LABEL_178;
            }
LABEL_232:
            __break(1u);
            goto LABEL_233;
          }
          v130 = v126;
          outlined retain of Locale((uint64_t)v258);
          swift_bridgeObjectRetain();
          v29 = 40;
          v131 = v129;
          while (*(_QWORD *)(v75 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16;
            if (!--v131)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v237);
          v207[0] = v181;
          v207[1] = v185;
          v208 = v186;
          v209 = v181;
          v210 = v185;
          v211 = v186;
          v29 = (unint64_t)&v238;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, v207, (unint64_t *)&v223);
          result = outlined release of Locale((uint64_t)&v238);
          if (*((_QWORD *)&v226 + 1) != 2)
          {
            v9 = v225;
            if (v176 > (unint64_t)v225 >> 10)
              goto LABEL_244;
            v130 = *((_QWORD *)&v225 + 1);
            v8 = *((_QWORD *)&v226 + 1);
            v7 = v226;
          }
LABEL_166:
          v132 = 0;
          *(_QWORD *)&v202 = v181;
          *((_QWORD *)&v202 + 1) = v185;
          v203 = v186;
          *(_QWORD *)&v204 = v9;
          *((_QWORD *)&v204 + 1) = v130;
          v133 = 40;
          *(_QWORD *)&v205 = v7;
          *((_QWORD *)&v205 + 1) = v8;
          v201 = v130;
          while (1)
          {
            v134 = v132 + 1;
            if (__OFADD__(v132, 1))
              break;
            if (*(_QWORD *)(v75 + v133))
            {
              swift_bridgeObjectRetain();
              v141 = (unint64_t *)(v75 + 40);
              v142 = (char *)MEMORY[0x1E0DEE9D8];
              do
              {
                v143 = *v141;
                if (*v141)
                {
                  v144 = *(v141 - 1);
                  if ((v143 & 0x2000000000000000) != 0 ? HIBYTE(v143) & 0xF : v144 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v143 & 0x1000000000000000) != 0)
                    {
                      v146 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }
                    else
                    {
                      if ((v143 & 0x2000000000000000) != 0)
                      {
                        *(_QWORD *)&v223 = *(v141 - 1);
                        *((_QWORD *)&v223 + 1) = v143 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        if ((v144 & 0x1000000000000000) == 0)
                          _StringObject.sharedUTF8.getter();
                        swift_bridgeObjectRetain();
                      }
                      v146 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v142 + 2) + 1, 1, v142);
                    v148 = *((_QWORD *)v142 + 2);
                    v147 = *((_QWORD *)v142 + 3);
                    if (v148 >= v147 >> 1)
                      v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v147 > 1), v148 + 1, 1, v142);
                    *((_QWORD *)v142 + 2) = v148 + 1;
                    *(_DWORD *)&v142[4 * v148 + 32] = v146;
                  }
                }
                v141 += 2;
                --v129;
              }
              while (v129);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v243);
              v149 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v142);
              v151 = v150;
              v153 = v152;
              v29 = v154;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v223);
              outlined release of Locale((uint64_t)v258);
              result = outlined release of AttributedString.Runs((uint64_t)v246);
              if (v29 != 2)
              {
                if (v176 > v149 >> 10)
                  goto LABEL_245;
                v9 = v149;
                v201 = v151;
                v7 = v153;
                v8 = v29;
              }
              goto LABEL_172;
            }
            v133 += 16;
            ++v132;
            if (v134 == v129)
            {
              outlined release of Locale((uint64_t)v258);
              goto LABEL_171;
            }
          }
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }
      v80 = *(unsigned __int8 *)(v29 + 18);
      v81 = (4 * v80 + 8) & 0x3C;
      v82 = (v70 >> v81) & 0xF;
      *(_QWORD *)&v238 = v82;
      if (v80)
      {
        v9 = v29 + 24;
        swift_unknownObjectRetain();
        v83 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v29 + 24, (uint64_t *)&v238, (uint64_t)&v223, v29, v80);
        swift_unknownObjectRelease();
        v79 = v196;
        if ((v83 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          v183 = *((_QWORD *)&v223 + 1);
          v76 = (uint64_t)v197;
          goto LABEL_88;
        }
      }
      else
      {
        v84 = v82 + 1;
        if (v82 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          v85 = v84 << v81;
          v70 = v193;
          v183 = v85 | ((-15 << v81) - 1) & v193;
          v79 = v196;
          v76 = (uint64_t)v197;
          goto LABEL_96;
        }
        v70 = v193;
        v79 = v196;
      }
      if (v29)
      {
        v86 = *(unsigned __int8 *)(v29 + 18);
        v87 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        v88 = (4 * v86 + 8) & 0x3C;
        v89 = ((-15 << v88) - 1) & v86;
        v79 = v196;
        v90 = v87 << v88;
        v70 = v193;
        v183 = v89 | v90;
      }
      else
      {
        v183 = 0;
      }
      v76 = (uint64_t)v197;
      v29 = 0;
      *(_QWORD *)&v223 = v182;
      goto LABEL_96;
    }
LABEL_37:
    swift_unknownObjectRetain();
    v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v189, v193, v8, v29, v33);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }
  v201 = v33;
  v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v246);
    swift_unknownObjectRetain();
    v7 = -15;
    v8 = 24;
    v34 = v31;
    v35 = v29;
    while (1)
    {
      v39 = *(unsigned __int16 *)(v35 + 16);
      if (!*(_WORD *)(v35 + 16))
        goto LABEL_14;
      v40 = *(_QWORD *)(v35 + 40);
      v41 = v34 - v40;
      if (__OFSUB__(v34, v40))
        goto LABEL_213;
      if (__OFADD__(v41, 1))
        goto LABEL_214;
      if (v41 + 1 <= 0)
      {
        v39 = 0;
      }
      else
      {
        if ((_DWORD)v39 == 1)
        {
          v34 -= v40;
          goto LABEL_14;
        }
        v42 = *(_QWORD *)(v35 + 64);
        v43 = __OFSUB__(v41, v42);
        v44 = v41 - v42;
        if (v43)
          goto LABEL_219;
        if (__OFADD__(v44, 1))
          goto LABEL_220;
        if (v44 + 1 < 1)
        {
          v39 = 1;
          v34 = v41;
        }
        else
        {
          if ((_DWORD)v39 == 2)
          {
            v34 = v44;
LABEL_14:
            if (v34)
              goto LABEL_212;
            goto LABEL_15;
          }
          v45 = (_QWORD *)(v35 + 88);
          v46 = 2;
          while (1)
          {
            if (v39 == v46)
              goto LABEL_209;
            v34 = v44 - *v45;
            if (__OFSUB__(v44, *v45))
              goto LABEL_210;
            if (__OFADD__(v34, 1))
              goto LABEL_211;
            if (v34 + 1 < 1)
              break;
            ++v46;
            v45 += 3;
            v44 = v34;
            if (v39 == v46)
              goto LABEL_14;
          }
          v39 = v46;
          v34 = v44;
        }
      }
LABEL_15:
      v36 = (4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C;
      v9 = ((-15 << v36) - 1) & v9 | (v39 << v36);
      v37 = *(_QWORD *)(v35 + 24 + 24 * v39);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v35 = v37;
      if (!*(_BYTE *)(v37 + 18))
        goto LABEL_39;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v246);
  result = swift_unknownObjectRetain();
  v34 = v31;
  v37 = v29;
LABEL_39:
  v49 = *(unsigned __int16 *)(v37 + 16);
  v8 = v37;
  if (!*(_WORD *)(v37 + 16))
  {
    v7 = v191;
    goto LABEL_46;
  }
  v50 = *(_QWORD *)(v37 + 24);
  v51 = v34 - v50;
  v7 = v191;
  if (__OFSUB__(v34, v50))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  if (__OFADD__(v51, 1))
    goto LABEL_243;
  if (v51 + 1 <= 0)
    goto LABEL_48;
  if ((_DWORD)v49 == 1)
  {
    v34 -= v50;
LABEL_46:
    if (!v34)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v193 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
      v9 = v181;
      v33 = v201;
      goto LABEL_37;
    }
    __break(1u);
LABEL_48:
    v49 = 0;
    goto LABEL_63;
  }
  v52 = *(_QWORD *)(v37 + 48);
  v43 = __OFSUB__(v51, v52);
  v53 = v51 - v52;
  if (v43)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  if (!__OFADD__(v53, 1))
  {
    if (v53 + 1 < 1)
    {
      v49 = 1;
      v34 = v51;
      goto LABEL_63;
    }
    if ((_DWORD)v49 != 2)
    {
      v54 = (_QWORD *)(v37 + 72);
      v55 = 2;
      while (1)
      {
        if (v49 == v55)
          goto LABEL_239;
        v34 = v53 - *v54;
        if (__OFSUB__(v53, *v54))
          goto LABEL_240;
        if (__OFADD__(v34, 1))
          goto LABEL_241;
        if (v34 + 1 < 1)
          break;
        ++v55;
        v54 += 3;
        v53 = v34;
        if (v49 == v55)
          goto LABEL_46;
      }
      v49 = v55;
      v34 = v53;
      goto LABEL_63;
    }
    v34 = v53;
    goto LABEL_46;
  }
LABEL_247:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(uint64_t a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  char v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  BOOL v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v113;
  __int128 *v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unint64_t *v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _OWORD *v151;
  unint64_t v152;
  _QWORD v153[3];
  __int128 *v154;
  unint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  _OWORD *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  int64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  _QWORD *v193;
  _QWORD *v194;
  __int128 *v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  _QWORD v202[2];
  __int128 v203;
  unint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _OWORD v222[2];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE v231[48];
  _BYTE v232[48];
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD v238[3];
  uint64_t v239;
  uint64_t v240;
  _OWORD v241[2];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  _OWORD v253[3];
  _OWORD v254[3];
  _OWORD v255[4];

  v9 = a3;
  v12 = v6[9];
  v13 = v6[11];
  v250 = v6[10];
  v251 = v13;
  v14 = v6[5];
  v15 = v6[7];
  v246 = v6[6];
  v247 = v15;
  v17 = v6[7];
  v16 = v6[8];
  v18 = v16;
  v249 = v6[9];
  v248 = v16;
  v19 = v6[1];
  v20 = v6[3];
  v242 = v6[2];
  v243 = v20;
  v22 = v6[3];
  v21 = v6[4];
  v23 = v21;
  v245 = v6[5];
  v244 = v21;
  v24 = *v6;
  v25 = *v6;
  v241[1] = v6[1];
  v241[0] = v24;
  v26 = v6[11];
  v227 = v250;
  v228 = v26;
  v223 = v246;
  v224 = v17;
  v225 = v18;
  v226 = v12;
  v220 = v242;
  v221 = v22;
  v222[0] = v23;
  v222[1] = v14;
  v27 = *((_QWORD *)v6 + 25);
  v252 = *((_QWORD *)v6 + 24);
  v28 = *((_QWORD *)v6 + 26);
  v229 = *((_QWORD *)v6 + 24);
  v218 = v25;
  v219 = v19;
  *(_QWORD *)&v208 = a3;
  v180 = a4;
  *(_QWORD *)&v181 = a5;
  *((_QWORD *)&v208 + 1) = a4;
  *(_QWORD *)&v209 = a5;
  *((_QWORD *)&v181 + 1) = a6;
  *((_QWORD *)&v209 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v241);
  v187 = v27;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((unint64_t)&v213, (unint64_t *)&v208, v27, v28, (uint64_t *)&v233);
  v29 = *((_QWORD *)&v233 + 1);
  v162 = v233;
  v30 = v234;
  outlined release of AttributedString.Runs((uint64_t)v241);
  if (v9 >> 10 < *((_QWORD *)&v248 + 1) >> 10 || v9 >> 10 >= *((_QWORD *)&v250 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  v7 = *(_QWORD *)(v187 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
  v160 = v29;
  v161 = v30;
  v159 = a2;
  v29 = *(_QWORD *)(*(_QWORD *)&v241[0] + 64);
  v31 = *(_QWORD *)(*(_QWORD *)&v241[0] + 80);
  v32 = v9 >> 11;
  if (v29)
    v33 = *(_QWORD *)(*(_QWORD *)&v241[0] + 80);
  else
    v33 = 0;
  if (v33 < v32)
    goto LABEL_223;
  v174 = a1;
  v34 = *(_QWORD *)(*(_QWORD *)&v241[0] + 72);
  v184 = *(_QWORD *)(*(_QWORD *)&v241[0] + 88);
  v185 = *(_QWORD *)&v241[0];
  v182 = v28;
  v176 = v9;
  v186 = v7;
  v157 = v214;
  v158 = v213;
  v170 = v9 >> 10;
  v166 = *((_QWORD *)&v250 + 1) >> 10;
  v167 = *((_QWORD *)&v250 + 1);
  v164 = *((_QWORD *)&v251 + 1);
  v165 = v251;
  v163 = v252;
  if (!v29 || v32 >= v31 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v241);
    v47 = swift_unknownObjectRetain();
    v188 = specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    v8 = 0;
    v35 = 0;
    if (!v29)
    {
      v48 = 0;
LABEL_65:
      a1 = v185;
      v183 = v32 - v35;
      if (__OFSUB__(v32, v35))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v56 = *(_OWORD *)(v185 + 32);
      v255[0] = *(_OWORD *)(v185 + 16);
      v255[1] = v56;
      v255[2] = *(_OWORD *)(v185 + 48);
      v29 = (unint64_t)v255;
      BigString.utf8.getter();
      if (__OFSUB__(0, v35))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      v29 = BigString.UTF8View.index(_:offsetBy:)();
      v58 = v57;
      v9 = v59;
      v61 = v60;
      outlined release of Locale((uint64_t)&v230);
      v173 = *((_QWORD *)&v244 + 1);
      if (v48 >= *((uint64_t *)&v244 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }
      v155 = v29;
      v62 = v184;
      if (v184 != *(_QWORD *)(v185 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }
      v196 = v48;
      v153[0] = v61;
      v153[1] = v9;
      v153[2] = v58;
      v29 = *(_QWORD *)(v185 + 64);
      v9 = *(_QWORD *)(v185 + 80);
      if (v8)
      {
        v63 = v188;
        v64 = v8 + 24 * ((v188 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v65 = *(_QWORD *)(v64 + 40);
        v191 = *(_QWORD *)(v64 + 32);
        swift_bridgeObjectRetain();
        v156 = v65;
        swift_bridgeObjectRetain();
        v66 = v184;
      }
      else
      {
        swift_unknownObjectRetain();
        v63 = v188;
        specialized Rope._Node.subscript.getter(v188, v29);
        v191 = v67;
        v156 = v68;
        swift_unknownObjectRelease();
        v29 = *(_QWORD *)(v185 + 64);
        v9 = *(_QWORD *)(v185 + 80);
        v66 = *(_QWORD *)(v185 + 88);
      }
      v154 = (__int128 *)(v185 + 16);
      v179 = v196 + 1;
      v192 = (char *)v222 + 8;
      *(_QWORD *)&v218 = v184;
      *((_QWORD *)&v218 + 1) = v63;
      v195 = (__int128 *)&v236;
      *(_QWORD *)&v219 = v8;
      v172 = v187 + 40;
LABEL_73:
      if (v62 != v66)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      if (v8)
      {
        v69 = v188;
        v70 = v8 + 24 * ((v188 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        v71 = *(_QWORD *)(v70 + 24);
        v9 = *(_QWORD *)(v70 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v69 = v188;
        v71 = specialized Rope._Node.subscript.getter(v188, v29);
        v9 = v72;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v183, v71))
        goto LABEL_216;
      v169 = v183 + v71;
      v177 = v66;
      if (v29)
      {
        v73 = ((-15 << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        v73 = 0;
      }
      v74 = v182;
      v75 = (uint64_t)v192;
      if (v69 >= v73)
        goto LABEL_217;
      if (v8)
      {
        v76 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        v77 = ((v69 >> v76) & 0xF) + 1;
        if (v77 < *(unsigned __int16 *)(v8 + 16))
        {
          v178 = (v77 << v76) | ((-15 << v76) - 1) & v69;
          swift_unknownObjectRelease_n();
          v78 = v191;
LABEL_88:
          v29 = v219;
LABEL_96:
          if (v179 != v173)
          {
            if ((_QWORD)v218 == *(_QWORD *)(a1 + 88))
            {
              v171 = v8;
              v184 = v218;
              v168 = v29;
              if (v29)
              {
                v90 = v29 + 24 * ((v178 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                v29 = *(_QWORD *)(v90 + 32);
                v91 = *(_QWORD *)(v90 + 40);
                swift_bridgeObjectRetain();
                v175 = v91;
                swift_bridgeObjectRetain();
              }
              else
              {
                v92 = *(_QWORD *)(a1 + 64);
                v9 = *(_QWORD *)(a1 + 80);
                swift_unknownObjectRetain();
                v75 = (uint64_t)v192;
                specialized Rope._Node.subscript.getter(v178, v92);
                v175 = v93;
                v29 = v94;
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRetain();
              v95 = 0;
              a1 = v172;
              v196 = v29;
              while (1)
              {
                v96 = v95 + 1;
                if (__OFADD__(v95, 1))
                {
                  __break(1u);
                  goto LABEL_208;
                }
                v8 = *(_QWORD *)(a1 - 8);
                v9 = *(_QWORD *)a1;
                if (*(_QWORD *)(v78 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  v97 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v98 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v78 + 56) + 72 * v97, (uint64_t)&v213);
                  }
                  else
                  {
                    v217 = 0;
                    v215 = 0u;
                    v216 = 0u;
                    v213 = 0u;
                    v214 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v29 = v196;
                  if (!*(_QWORD *)(v196 + 16))
                  {
LABEL_111:
                    v212 = 0;
                    v210 = 0u;
                    v211 = 0u;
                    v208 = 0u;
                    v209 = 0u;
                    goto LABEL_118;
                  }
                }
                else
                {
                  v217 = 0;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v29 + 16))
                    goto LABEL_111;
                }
                swift_bridgeObjectRetain();
                v99 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v100 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v99, (uint64_t)&v208);
                }
                else
                {
                  v212 = 0;
                  v210 = 0u;
                  v211 = 0u;
                  v208 = 0u;
                  v209 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v213, (uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v208, v75, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((_QWORD *)&v219 + 1))
                {
                  if ((_QWORD)v223)
                    goto LABEL_135;
                  outlined destroy of Any?((uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v208, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v218, (uint64_t)v202, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(_QWORD)v223)
                  goto LABEL_134;
                v101 = *(_OWORD *)(v75 + 48);
                v199 = *(_OWORD *)(v75 + 32);
                v200 = v101;
                v201 = *(_QWORD *)(v75 + 64);
                v102 = *(_OWORD *)(v75 + 16);
                v197 = *(_OWORD *)v75;
                v198 = v102;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v202, (uint64_t)v254);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v197, (uint64_t)v253);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v254, (uint64_t)&v233, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v253, (uint64_t)v195, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v235)
                {
                  if (!v237)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
LABEL_103:
                    v8 = 0;
                    goto LABEL_104;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v233, (uint64_t)v238);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v195, (uint64_t)v232);
                  v103 = v239;
                  v190 = v240;
                  v189 = __swift_project_boxed_opaque_existential_1(v238, v239);
                  v194 = v153;
                  v104 = *(_QWORD *)(v103 - 8);
                  MEMORY[0x1E0C80A78](v189);
                  v106 = (char *)v153 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v232, (uint64_t)v231);
                  v107 = type metadata accessor for Optional();
                  v193 = v153;
                  v108 = *(_QWORD *)(v107 - 8);
                  MEMORY[0x1E0C80A78](v107);
                  v110 = (char *)v153 - v109;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v111 = swift_dynamicCast();
                  v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
                  if (v111)
                  {
                    v112(v110, 0, 1, v103);
                    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v106, v110, v103);
                    v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
                  }
                  else
                  {
                    v112(v110, 1, 1, v103);
                    (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v107);
                    v8 = 0;
                  }
                  v7 = v186;
                  v78 = v191;
                  v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v232);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
                  v75 = (uint64_t)v192;
                }
                else
                {
                  if (v237)
                  {
                    outlined destroy of Any?((uint64_t)v195, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }
                  v8 = 1;
                }
LABEL_104:
                v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?((uint64_t)v253, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v254, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v197);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v202);
                outlined destroy of Any?((uint64_t)&v218, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v208, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v213, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0)
                  goto LABEL_136;
LABEL_105:
                a1 += 16;
                ++v95;
                v29 = v196;
                if (v96 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v62 = v184;
                  a1 = v185;
                  v29 = *(_QWORD *)(v185 + 64);
                  v9 = *(_QWORD *)(v185 + 80);
                  v66 = *(_QWORD *)(v185 + 88);
                  v183 = v169;
                  *(_QWORD *)&v218 = v184;
                  *((_QWORD *)&v218 + 1) = v178;
                  v8 = v168;
                  v188 = v178;
                  *(_QWORD *)&v219 = v168;
                  v43 = __OFADD__(v179++, 1);
                  if (!v43)
                    goto LABEL_73;
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v202);
LABEL_135:
                  outlined destroy of Any?((uint64_t)&v218, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v208, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  a1 = v185;
                  v74 = v182;
                  v8 = v171;
                  v69 = v188;
                  goto LABEL_137;
                }
              }
            }
            goto LABEL_218;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v177 != *(_QWORD *)(a1 + 88))
            goto LABEL_228;
          if (v8)
          {
            v29 = *(_QWORD *)(v8 + 24 * ((v69 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            a1 = *(_QWORD *)(v185 + 64);
            swift_unknownObjectRetain();
            v29 = specialized Rope._Node.subscript.getter(v69, a1);
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v113 = v183 + v29;
          if (__OFADD__(v183, v29))
            goto LABEL_229;
          v114 = v154;
          v115 = v154[1];
          v254[0] = *v154;
          v254[1] = v115;
          v254[2] = v154[2];
          v29 = (unint64_t)v254;
          BigString.utf8.getter();
          if (__OFSUB__(v113, v155 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }
          v29 = BigString.UTF8View.index(_:offsetBy:)();
          v117 = v116;
          v118 = v114;
          v120 = v119;
          a1 = v121;
          outlined release of Locale((uint64_t)v231);
          if (v166 >= v29 >> 10)
            v9 = v29;
          else
            v9 = v167;
          if (v166 >= v29 >> 10)
            v122 = v117;
          else
            v122 = v165;
          if (v166 >= v29 >> 10)
            v7 = v120;
          else
            v7 = v164;
          if (v166 >= v29 >> 10)
            v8 = a1;
          else
            v8 = v163;
          v123 = *v118;
          v124 = v118[2];
          v253[1] = v118[1];
          v253[2] = v124;
          v253[0] = v123;
          if (v9 >> 10 < v170)
            goto LABEL_231;
          *(_QWORD *)&v208 = v176;
          *((_QWORD *)&v208 + 1) = v180;
          v209 = v181;
          *(_QWORD *)&v210 = v9;
          *((_QWORD *)&v210 + 1) = v122;
          *(_QWORD *)&v211 = v7;
          *((_QWORD *)&v211 + 1) = v8;
          v125 = *(_QWORD *)(v74 + 16);
          if (!v125 || v170 == v9 >> 10)
          {
            v196 = v122;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v241);
LABEL_172:
            if (v162 == *(_QWORD *)(v185 + 88))
            {
              if (v161)
              {
                v29 = *(_QWORD *)(v161 + 24 * ((v160 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v131 = *(_QWORD *)(v185 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v160, v131);
                v29 = v132;
                swift_unknownObjectRelease();
              }
              a1 = v174;
              if (one-time initialization token for name == -1)
              {
                if (!*(_QWORD *)(v29 + 16))
                {
LABEL_234:
                  v217 = 0;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                  goto LABEL_235;
                }
LABEL_178:
                v133 = qword_1EDC3E180;
                v134 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
                swift_bridgeObjectRetain();
                v135 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v133);
                if ((v136 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v29 + 56) + 72 * v135, (uint64_t)&v213);
                }
                else
                {
                  v217 = 0;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                }
                a1 = v174;
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v214 + 1))
                {
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v213, (uint64_t)&v207);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  swift_dynamicCast();
                  outlined destroy of AttributedString._AttributeValue((uint64_t)&v213);
                  v137 = 0;
LABEL_236:
                  *(_BYTE *)a1 = v137;
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  if (v9 >> 10 >= (unint64_t)v158 >> 10)
                  {
                    v151 = v159;
                    *v159 = v158;
                    v151[1] = v157;
                    v152 = v196;
                    *((_QWORD *)v151 + 4) = v9;
                    *((_QWORD *)v151 + 5) = v152;
                    *((_QWORD *)v151 + 6) = v7;
                    *((_QWORD *)v151 + 7) = v8;
                    return result;
                  }
                  __break(1u);
LABEL_239:
                  __break(1u);
LABEL_240:
                  __break(1u);
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }
LABEL_235:
                outlined destroy of Any?((uint64_t)&v213, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v137 = 1;
                goto LABEL_236;
              }
LABEL_233:
              swift_once();
              if (!*(_QWORD *)(v29 + 16))
                goto LABEL_234;
              goto LABEL_178;
            }
LABEL_232:
            __break(1u);
            goto LABEL_233;
          }
          v126 = v122;
          outlined retain of Locale((uint64_t)v253);
          swift_bridgeObjectRetain();
          v29 = 40;
          v127 = v125;
          while (*(_QWORD *)(v74 + v29))
          {
            swift_bridgeObjectRelease();
            v29 += 16;
            if (!--v127)
            {
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v232);
          v202[0] = v176;
          v202[1] = v180;
          v203 = v181;
          v204 = v176;
          v205 = v180;
          v206 = v181;
          v29 = (unint64_t)&v233;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, v202, (unint64_t *)&v218);
          result = outlined release of Locale((uint64_t)&v233);
          if (*((_QWORD *)&v221 + 1) != 2)
          {
            v9 = v220;
            if (v170 > (unint64_t)v220 >> 10)
              goto LABEL_244;
            v126 = *((_QWORD *)&v220 + 1);
            v8 = *((_QWORD *)&v221 + 1);
            v7 = v221;
          }
LABEL_166:
          v128 = 0;
          *(_QWORD *)&v197 = v176;
          *((_QWORD *)&v197 + 1) = v180;
          v198 = v181;
          *(_QWORD *)&v199 = v9;
          *((_QWORD *)&v199 + 1) = v126;
          v129 = 40;
          *(_QWORD *)&v200 = v7;
          *((_QWORD *)&v200 + 1) = v8;
          v196 = v126;
          while (1)
          {
            v130 = v128 + 1;
            if (__OFADD__(v128, 1))
              break;
            if (*(_QWORD *)(v74 + v129))
            {
              swift_bridgeObjectRetain();
              v138 = (unint64_t *)(v74 + 40);
              v139 = (char *)MEMORY[0x1E0DEE9D8];
              do
              {
                v140 = *v138;
                if (*v138)
                {
                  v141 = *(v138 - 1);
                  if ((v140 & 0x2000000000000000) != 0 ? HIBYTE(v140) & 0xF : v141 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v140 & 0x1000000000000000) != 0)
                    {
                      v143 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }
                    else
                    {
                      if ((v140 & 0x2000000000000000) != 0)
                      {
                        *(_QWORD *)&v218 = *(v138 - 1);
                        *((_QWORD *)&v218 + 1) = v140 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        if ((v141 & 0x1000000000000000) == 0)
                          _StringObject.sharedUTF8.getter();
                        swift_bridgeObjectRetain();
                      }
                      v143 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v139 + 2) + 1, 1, v139);
                    v145 = *((_QWORD *)v139 + 2);
                    v144 = *((_QWORD *)v139 + 3);
                    if (v145 >= v144 >> 1)
                      v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v144 > 1), v145 + 1, 1, v139);
                    *((_QWORD *)v139 + 2) = v145 + 1;
                    *(_DWORD *)&v139[4 * v145 + 32] = v143;
                  }
                }
                v138 += 2;
                --v125;
              }
              while (v125);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v238);
              v146 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v139);
              a1 = v147;
              v149 = v148;
              v29 = v150;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v218);
              outlined release of Locale((uint64_t)v253);
              result = outlined release of AttributedString.Runs((uint64_t)v241);
              if (v29 != 2)
              {
                if (v170 > v146 >> 10)
                  goto LABEL_245;
                v9 = v146;
                v196 = a1;
                v7 = v149;
                v8 = v29;
              }
              goto LABEL_172;
            }
            v129 += 16;
            ++v128;
            if (v130 == v125)
            {
              outlined release of Locale((uint64_t)v253);
              goto LABEL_171;
            }
          }
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
      }
      v79 = *(unsigned __int8 *)(v29 + 18);
      v80 = (4 * v79 + 8) & 0x3C;
      v81 = (v69 >> v80) & 0xF;
      *(_QWORD *)&v233 = v81;
      if (v79)
      {
        v9 = v29 + 24;
        swift_unknownObjectRetain();
        v82 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v29 + 24, (uint64_t *)&v233, (uint64_t)&v218, v29, v79);
        swift_unknownObjectRelease();
        v78 = v191;
        if ((v82 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          v178 = *((_QWORD *)&v218 + 1);
          v75 = (uint64_t)v192;
          goto LABEL_88;
        }
      }
      else
      {
        v83 = v81 + 1;
        if (v81 + 1 < (unint64_t)*(unsigned __int16 *)(v29 + 16))
        {
          swift_unknownObjectRelease_n();
          v84 = v83 << v80;
          v69 = v188;
          v178 = v84 | ((-15 << v80) - 1) & v188;
          v78 = v191;
          v75 = (uint64_t)v192;
          goto LABEL_96;
        }
        v69 = v188;
        v78 = v191;
      }
      if (v29)
      {
        v85 = *(unsigned __int8 *)(v29 + 18);
        v86 = *(unsigned __int16 *)(v29 + 16);
        swift_unknownObjectRelease_n();
        v87 = (4 * v85 + 8) & 0x3C;
        v88 = ((-15 << v87) - 1) & v85;
        v78 = v191;
        v89 = v86 << v87;
        v69 = v188;
        v178 = v88 | v89;
      }
      else
      {
        v178 = 0;
      }
      v75 = (uint64_t)v192;
      v29 = 0;
      *(_QWORD *)&v218 = v177;
      goto LABEL_96;
    }
LABEL_37:
    swift_unknownObjectRetain();
    v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v184, v188, v8, v29, v34);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }
  v196 = v34;
  v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v241);
    swift_unknownObjectRetain();
    v7 = -15;
    v8 = 24;
    v35 = v32;
    a1 = v29;
    while (1)
    {
      v39 = *(unsigned __int16 *)(a1 + 16);
      if (!*(_WORD *)(a1 + 16))
        goto LABEL_14;
      v40 = *(_QWORD *)(a1 + 40);
      v41 = v35 - v40;
      if (__OFSUB__(v35, v40))
        goto LABEL_213;
      if (__OFADD__(v41, 1))
        goto LABEL_214;
      if (v41 + 1 <= 0)
      {
        v39 = 0;
      }
      else
      {
        if ((_DWORD)v39 == 1)
        {
          v35 -= v40;
          goto LABEL_14;
        }
        v42 = *(_QWORD *)(a1 + 64);
        v43 = __OFSUB__(v41, v42);
        v44 = v41 - v42;
        if (v43)
          goto LABEL_219;
        if (__OFADD__(v44, 1))
          goto LABEL_220;
        if (v44 + 1 < 1)
        {
          v39 = 1;
          v35 = v41;
        }
        else
        {
          if ((_DWORD)v39 == 2)
          {
            v35 = v44;
LABEL_14:
            if (v35)
              goto LABEL_212;
            goto LABEL_15;
          }
          v45 = (_QWORD *)(a1 + 88);
          v46 = 2;
          while (1)
          {
            if (v39 == v46)
              goto LABEL_209;
            v35 = v44 - *v45;
            if (__OFSUB__(v44, *v45))
              goto LABEL_210;
            if (__OFADD__(v35, 1))
              goto LABEL_211;
            if (v35 + 1 < 1)
              break;
            ++v46;
            v45 += 3;
            v44 = v35;
            if (v39 == v46)
              goto LABEL_14;
          }
          v39 = v46;
          v35 = v44;
        }
      }
LABEL_15:
      v36 = (4 * *(_BYTE *)(a1 + 18) + 8) & 0x3C;
      v9 = ((-15 << v36) - 1) & v9 | (v39 << v36);
      v37 = *(_QWORD *)(a1 + 24 + 24 * v39);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      a1 = v37;
      if (!*(_BYTE *)(v37 + 18))
        goto LABEL_39;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v241);
  result = swift_unknownObjectRetain();
  v35 = v32;
  v37 = v29;
LABEL_39:
  v49 = *(unsigned __int16 *)(v37 + 16);
  v8 = v37;
  if (!*(_WORD *)(v37 + 16))
  {
    v7 = v186;
    goto LABEL_46;
  }
  v50 = *(_QWORD *)(v37 + 24);
  v51 = v35 - v50;
  v7 = v186;
  if (__OFSUB__(v35, v50))
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  if (__OFADD__(v51, 1))
    goto LABEL_243;
  if (v51 + 1 <= 0)
    goto LABEL_48;
  if ((_DWORD)v49 == 1)
  {
    v35 -= v50;
LABEL_46:
    if (!v35)
    {
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v188 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
      v9 = v176;
      v34 = v196;
      goto LABEL_37;
    }
    __break(1u);
LABEL_48:
    v49 = 0;
    goto LABEL_63;
  }
  v52 = *(_QWORD *)(v37 + 48);
  v43 = __OFSUB__(v51, v52);
  v53 = v51 - v52;
  if (v43)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  if (!__OFADD__(v53, 1))
  {
    if (v53 + 1 < 1)
    {
      v49 = 1;
      v35 = v51;
      goto LABEL_63;
    }
    if ((_DWORD)v49 != 2)
    {
      v54 = (_QWORD *)(v37 + 72);
      v55 = 2;
      while (1)
      {
        if (v49 == v55)
          goto LABEL_239;
        v35 = v53 - *v54;
        if (__OFSUB__(v53, *v54))
          goto LABEL_240;
        if (__OFADD__(v35, 1))
          goto LABEL_241;
        if (v35 + 1 < 1)
          break;
        ++v55;
        v54 += 3;
        v53 = v35;
        if (v49 == v55)
          goto LABEL_46;
      }
      v49 = v55;
      v35 = v53;
      goto LABEL_63;
    }
    v35 = v53;
    goto LABEL_46;
  }
LABEL_247:
  __break(1u);
  return result;
}

unint64_t specialized AttributedString.Runs.AttributesSlice4.index(before:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 **a5@<X8>)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  __int128 v92;
  __int128 *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  __int128 *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 **v133;
  unint64_t *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 **v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  __int128 *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  __int128 *v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[9];
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  _BYTE v205[48];
  _BYTE v206[48];
  _QWORD v207[3];
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE v214[48];
  uint64_t v215;
  uint64_t v216;
  _OWORD v217[8];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  _OWORD v223[4];

  v6 = v5[11];
  v220 = v5[10];
  v221 = v6;
  v7 = *((_QWORD *)v5 + 25);
  v222 = *((_QWORD *)v5 + 24);
  v8 = v5[7];
  v217[6] = v5[6];
  v217[7] = v8;
  v9 = v5[8];
  v219 = v5[9];
  v218 = v9;
  v10 = v5[3];
  v217[2] = v5[2];
  v217[3] = v10;
  v11 = v5[4];
  v217[5] = v5[5];
  v217[4] = v11;
  v12 = *v5;
  v217[1] = v5[1];
  v217[0] = v12;
  v215 = *((_QWORD *)v5 + 26);
  v216 = v7;
  if (*((_QWORD *)&v218 + 1) >> 10 >= result >> 10 || *((_QWORD *)&v220 + 1) >> 10 < result >> 10)
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  v177 = *(_QWORD *)(v7 + 16);
  v13 = *(_QWORD *)&v217[0];
  v14 = *(_QWORD *)(*(_QWORD *)&v217[0] + 64);
  v15 = *(_QWORD *)(*(_QWORD *)&v217[0] + 80);
  if (v14)
    v16 = *(_QWORD *)(*(_QWORD *)&v217[0] + 80);
  else
    v16 = 0;
  if (result < 0x800)
    goto LABEL_199;
  v17 = result >> 11;
  v18 = (result >> 11) - 1;
  if (v16 < v18)
    goto LABEL_199;
  v19 = *(_QWORD *)(*(_QWORD *)&v217[0] + 72);
  v179 = *(_QWORD *)(*(_QWORD *)&v217[0] + 88);
  v158 = a5;
  v159 = v220;
  v167 = a4;
  v168 = result >> 10;
  v165 = a2;
  v166 = a3;
  v163 = (__int128 *)*((_QWORD *)&v218 + 1);
  v164 = result;
  v161 = v219;
  v162 = *((_QWORD *)&v218 + 1) >> 10;
  v160 = *((_QWORD *)&v219 + 1);
  if (!v14 || v17 > v15 || !*(_WORD *)(v14 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v217);
    v180 = specialized Rope._endPath.getter(v14);
    result = swift_unknownObjectRelease();
    v21 = 0;
    v178 = 0;
    if (!v14)
    {
      v174 = 0;
      goto LABEL_66;
    }
LABEL_38:
    swift_unknownObjectRetain();
    v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v180, v178, v14, v19);
    result = swift_unknownObjectRelease_n();
LABEL_66:
    v169 = v18 - v21;
    if (__OFSUB__(v18, v21))
    {
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }
    if (v179 != *(_QWORD *)(v13 + 88))
    {
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }
    if (v178)
    {
      v40 = v178 + 24 * ((v180 >> ((4 * *(_BYTE *)(v178 + 18) + 8) & 0x3C)) & 0xF);
      v42 = *(_QWORD *)(v40 + 32);
      v41 = *(_QWORD *)(v40 + 40);
      swift_bridgeObjectRetain();
      v157 = v41;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v43 = *(_QWORD *)(v13 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v180, v43);
      v42 = v44;
      v157 = v45;
      result = swift_unknownObjectRelease();
    }
    v46 = v177;
    if (*((uint64_t *)&v217[0] + 1) < v174)
    {
      v155 = v17;
      v156 = v13;
      v172 = &v193;
      v173 = v42;
      v181 = (__int128 *)&v212;
      v152 = (uint64_t *)(v7 + 40);
      v153 = v7;
      v150 = *((_QWORD *)&v217[0] + 1);
LABEL_73:
      v47 = *(_QWORD *)(v13 + 64);
      v48 = *(_QWORD *)(v13 + 88);
      v49 = v180;
      v189 = v179;
      v190 = v180;
      v50 = v178;
      v191 = v178;
      if (v179 == v48)
      {
        if (v47)
        {
          v51 = *(unsigned __int8 *)(v47 + 18);
          result = swift_unknownObjectRetain();
          v49 = v180;
          v50 = v178;
          if (v180 <= v51)
            goto LABEL_205;
LABEL_78:
          if (v50)
          {
            v52 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
            if (((v49 >> v52) & 0xF) != 0)
            {
              v53 = ((((v49 >> v52) & 0xF) - 1) << v52) | ((-15 << v52) - 1) & v49;
              v190 = v53;
LABEL_85:
              v58 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
              v180 = v53;
              v178 = v50;
              v59 = *(_QWORD *)(v50 + 24 * ((v53 >> v58) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v60 = 0;
LABEL_89:
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (__OFSUB__(v169, v59))
              {
LABEL_206:
                __break(1u);
                goto LABEL_207;
              }
              if (v179 != *(_QWORD *)(v13 + 88))
              {
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
LABEL_212:
                __break(1u);
                goto LABEL_213;
              }
              v151 = v169 - v59;
              if ((v60 & 1) != 0)
              {
                v61 = *(_QWORD *)(v13 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v180, v61);
                v154 = v62;
                v64 = v63;
                swift_unknownObjectRelease();
              }
              else
              {
                v65 = v178 + 24 * ((v180 >> ((4 * *(_BYTE *)(v178 + 18) + 8) & 0x3C)) & 0xF);
                v64 = *(_QWORD *)(v65 + 32);
                v66 = *(_QWORD *)(v65 + 40);
                swift_bridgeObjectRetain();
                v154 = v66;
                swift_bridgeObjectRetain();
              }
              v68 = (uint64_t)v172;
              v67 = v173;
              --v174;
              result = swift_bridgeObjectRetain();
              v69 = 0;
              v70 = v152;
              v182 = v64;
              while (1)
              {
                v72 = v69 + 1;
                if (__OFADD__(v69, 1))
                {
                  __break(1u);
                  goto LABEL_188;
                }
                v74 = *(v70 - 1);
                v73 = *v70;
                if (*(_QWORD *)(v67 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v73);
                  if ((v76 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v67 + 56) + 72 * v75, (uint64_t)&v200);
                  }
                  else
                  {
                    v204 = 0;
                    v202 = 0u;
                    v203 = 0u;
                    v200 = 0u;
                    v201 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v64 = v182;
                  if (!*(_QWORD *)(v182 + 16))
                  {
LABEL_104:
                    v199 = 0;
                    v197 = 0u;
                    v198 = 0u;
                    v195 = 0u;
                    v196 = 0u;
                    goto LABEL_111;
                  }
                }
                else
                {
                  v204 = 0;
                  v202 = 0u;
                  v203 = 0u;
                  v200 = 0u;
                  v201 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v64 + 16))
                    goto LABEL_104;
                }
                swift_bridgeObjectRetain();
                v77 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v73);
                if ((v78 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v64 + 56) + 72 * v77, (uint64_t)&v195);
                }
                else
                {
                  v199 = 0;
                  v197 = 0u;
                  v198 = 0u;
                  v195 = 0u;
                  v196 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_111:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v200, (uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v195, v68, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v192)
                {
                  if (v194)
                    goto LABEL_128;
                  outlined destroy of Any?((uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v195, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  result = outlined destroy of Any?((uint64_t)&v200, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_98;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v189, (uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v194)
                {
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v188);
LABEL_128:
                  outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v195, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v200, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_129:
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v216);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v13 = v156;
LABEL_130:
                  v17 = v155;
                  goto LABEL_131;
                }
                v79 = *(_OWORD *)(v68 + 48);
                v185 = *(_OWORD *)(v68 + 32);
                v186 = v79;
                v187 = *(_QWORD *)(v68 + 64);
                v80 = *(_OWORD *)(v68 + 16);
                v183 = *(_OWORD *)v68;
                v184 = v80;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v188, (uint64_t)v223);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v183, (uint64_t)v214);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v223, (uint64_t)&v210, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v214, (uint64_t)v181, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v211)
                {
                  if (!v213)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v210);
LABEL_96:
                    v71 = 0;
                    goto LABEL_97;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v210, (uint64_t)v207);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v181, (uint64_t)v206);
                  v81 = v208;
                  v171 = v209;
                  v170 = __swift_project_boxed_opaque_existential_1(v207, v208);
                  v176 = &v149;
                  v82 = *(_QWORD *)(v81 - 8);
                  MEMORY[0x1E0C80A78](v170);
                  v84 = (char *)&v149 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v206, (uint64_t)v205);
                  v85 = type metadata accessor for Optional();
                  v175 = &v149;
                  v86 = *(_QWORD *)(v85 - 8);
                  MEMORY[0x1E0C80A78](v85);
                  v88 = (char *)&v149 - v87;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v89 = swift_dynamicCast();
                  v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
                  if (v89)
                  {
                    v90(v88, 0, 1, v81);
                    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v88, v81);
                    v71 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
                  }
                  else
                  {
                    v90(v88, 1, 1, v81);
                    (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
                    v71 = 0;
                  }
                  v46 = v177;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v206);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
                  v68 = (uint64_t)v172;
                  v67 = v173;
                }
                else
                {
                  if (v213)
                  {
                    outlined destroy of Any?((uint64_t)v181, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_96;
                  }
                  v71 = 1;
                }
LABEL_97:
                outlined destroy of Any?((uint64_t)v214, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v223, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v183);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v188);
                outlined destroy of Any?((uint64_t)&v189, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v195, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                result = outlined destroy of Any?((uint64_t)&v200, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v71 & 1) == 0)
                  goto LABEL_129;
LABEL_98:
                v70 += 2;
                ++v69;
                v64 = v182;
                if (v72 == v46)
                {
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v216);
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v91 = v151;
                  v169 = v151;
                  v13 = v156;
                  if (v150 < v174)
                    goto LABEL_73;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v169 = v91;
                  goto LABEL_130;
                }
              }
            }
          }
          v54 = *(unsigned __int8 *)(v47 + 18);
          v55 = (4 * v54 + 8) & 0x3C;
          v56 = (v49 >> v55) & 0xF;
          *(_QWORD *)&v210 = v56;
          if (v54)
          {
            swift_unknownObjectRetain();
            v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, (uint64_t *)&v210, (uint64_t)&v189, v54);
            result = swift_unknownObjectRelease();
            if ((v57 & 1) == 0)
              goto LABEL_209;
            if (v189 != v179)
              goto LABEL_208;
            v53 = v190;
            v50 = v191;
            v46 = v177;
            if (v191)
              goto LABEL_85;
          }
          else
          {
            if (!v56)
              goto LABEL_209;
            v53 = ((v56 - 1) << v55) | ((-15 << v55) - 1) & v49;
            v190 = v53;
            v191 = v47;
            v50 = v47;
            if (v47)
              goto LABEL_85;
          }
          swift_unknownObjectRetain();
          v180 = v53;
          v59 = specialized Rope._Node.subscript.getter(v53, v47);
          swift_unknownObjectRelease();
          v178 = 0;
          v60 = 1;
          goto LABEL_89;
        }
        if (v180)
          goto LABEL_78;
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_131:
    v92 = *(_OWORD *)(v13 + 32);
    v183 = *(_OWORD *)(v13 + 16);
    v184 = v92;
    v185 = *(_OWORD *)(v13 + 48);
    result = BigString.utf8.getter();
    if (__OFSUB__(v169, v17))
      goto LABEL_202;
    v93 = (__int128 *)(v13 + 16);
    v95 = v164;
    v94 = v165;
    v96 = v166;
    v97 = v167;
    v98 = BigString.UTF8View.index(_:offsetBy:)();
    v100 = v99;
    v102 = v101;
    v104 = v103;
    result = outlined release of Locale((uint64_t)v205);
    if (v162 >= v98 >> 10)
      v105 = (unint64_t)v163;
    else
      v105 = v98;
    if (v162 >= v98 >> 10)
      v106 = v161;
    else
      v106 = v100;
    if (v162 >= v98 >> 10)
      v107 = v160;
    else
      v107 = v102;
    if (v162 >= v98 >> 10)
      v108 = v159;
    else
      v108 = v104;
    v109 = *v93;
    v110 = v93[2];
    v223[1] = v93[1];
    v223[2] = v110;
    v223[0] = v109;
    if (v168 < v105 >> 10)
      goto LABEL_203;
    *(_QWORD *)&v200 = v105;
    *((_QWORD *)&v200 + 1) = v106;
    *(_QWORD *)&v201 = v107;
    *((_QWORD *)&v201 + 1) = v108;
    *(_QWORD *)&v202 = v95;
    *((_QWORD *)&v202 + 1) = v94;
    *(_QWORD *)&v203 = v96;
    *((_QWORD *)&v203 + 1) = v97;
    v111 = v215;
    v112 = *(_QWORD *)(v215 + 16);
    v180 = v106;
    v181 = (__int128 *)v105;
    v179 = v107;
    v182 = v108;
    if (!v112 || v105 >> 10 == v168)
    {
LABEL_162:
      result = outlined release of AttributedString.Runs((uint64_t)v217);
      v130 = v180;
      v129 = v181;
      v131 = v179;
      v132 = v182;
LABEL_163:
      v133 = v158;
      *v158 = v129;
      v133[1] = (__int128 *)v130;
      v133[2] = (__int128 *)v131;
      v133[3] = (__int128 *)v132;
      return result;
    }
    outlined retain of Locale((uint64_t)v223);
    outlined retain of [AttributedString.AttributeRunBoundaries]((uint64_t)&v215);
    v113 = (uint64_t *)(v111 + 40);
    v114 = v112;
    while (1)
    {
      v115 = *v113;
      v113 += 2;
      swift_bridgeObjectRelease();
      if (!v115)
        break;
      if (!--v114)
      {
        result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
LABEL_156:
        v123 = v180;
        v122 = v181;
        v124 = v179;
        v125 = v182;
        goto LABEL_157;
      }
    }
    swift_bridgeObjectRelease();
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
    result = BigString.startIndex.getter();
    if (v168 <= result >> 10)
      goto LABEL_156;
    BigString.utf8.getter();
    v116 = v97;
    v117 = BigString.UTF8View.index(before:)();
    v177 = v119;
    v178 = v118;
    v121 = v120;
    outlined release of Locale((uint64_t)v206);
    BigString.utf8.getter();
    BigString.UTF8View.subscript.getter();
    result = outlined release of Locale((uint64_t)v207);
    if (v168 < v117 >> 10)
      goto LABEL_215;
    *(_QWORD *)&v195 = v117;
    *((_QWORD *)&v195 + 1) = v178;
    *(_QWORD *)&v196 = v121;
    *((_QWORD *)&v196 + 1) = v177;
    *(_QWORD *)&v197 = v95;
    *((_QWORD *)&v197 + 1) = v94;
    *(_QWORD *)&v198 = v96;
    *((_QWORD *)&v198 + 1) = v116;
    specialized BidirectionalCollection<>._getBlock(for:in:)(1, &v195, &v189);
    result = outlined release of Locale((uint64_t)&v210);
    v97 = v116;
    v123 = v180;
    v122 = v181;
    v124 = v179;
    v125 = v182;
    if (v192 != 2)
    {
      v122 = (__int128 *)v189;
      if (v168 < v189 >> 10)
        goto LABEL_219;
      v123 = v190;
      v124 = v191;
      v125 = v192;
    }
LABEL_157:
    v126 = 0;
    v188[0] = v122;
    v188[1] = v123;
    v188[2] = v124;
    v188[3] = v125;
    v188[4] = v95;
    v188[5] = v94;
    v127 = (_QWORD *)(v111 + 40);
    v188[6] = v96;
    v188[7] = v97;
    v182 = v125;
    while (1)
    {
      v128 = v126 + 1;
      if (__OFADD__(v126, 1))
        break;
      if (*v127)
      {
        v131 = v124;
        v130 = v123;
        v129 = v122;
        swift_bridgeObjectRetain();
        v134 = (unint64_t *)(v111 + 40);
        v135 = (char *)MEMORY[0x1E0DEE9D8];
        do
        {
          v136 = *v134;
          if (*v134)
          {
            v137 = *(v134 - 1);
            if ((v136 & 0x2000000000000000) != 0 ? HIBYTE(v136) & 0xF : v137 & 0xFFFFFFFFFFFFLL)
            {
              if ((v136 & 0x1000000000000000) != 0)
              {
                v139 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else
              {
                if ((v136 & 0x2000000000000000) != 0)
                {
                  v189 = *(v134 - 1);
                  v190 = v136 & 0xFFFFFFFFFFFFFFLL;
                  swift_bridgeObjectRetain();
                }
                else
                {
                  if ((v137 & 0x1000000000000000) == 0)
                    _StringObject.sharedUTF8.getter();
                  swift_bridgeObjectRetain();
                }
                v139 = _decodeScalar(_:startingAt:)();
                swift_bridgeObjectRelease();
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v135 + 2) + 1, 1, v135);
              v141 = *((_QWORD *)v135 + 2);
              v140 = *((_QWORD *)v135 + 3);
              if (v141 >= v140 >> 1)
                v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v140 > 1), v141 + 1, 1, v135);
              *((_QWORD *)v135 + 2) = v141 + 1;
              *(_DWORD *)&v135[4 * v141 + 32] = v139;
            }
          }
          v134 += 2;
          --v112;
        }
        while (v112);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v215);
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)v214);
        v142 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v135);
        v144 = v143;
        v146 = v145;
        v148 = v147;
        swift_bridgeObjectRelease();
        outlined release of Locale((uint64_t)&v189);
        outlined release of Locale((uint64_t)v223);
        result = outlined release of AttributedString.Runs((uint64_t)v217);
        v132 = v182;
        if (v148 != 2)
        {
          if (v168 < v142 >> 10)
            goto LABEL_216;
          v129 = (__int128 *)v142;
          v130 = v144;
          v131 = v146;
          v132 = v148;
        }
        goto LABEL_163;
      }
      v127 += 2;
      ++v126;
      if (v128 == v112)
      {
        v179 = v124;
        v180 = v123;
        v181 = v122;
        outlined release of Locale((uint64_t)v223);
        goto LABEL_162;
      }
    }
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  v182 = v19;
  v153 = v7;
  v155 = result >> 11;
  v156 = *(_QWORD *)&v217[0];
  v20 = *(unsigned __int8 *)(v14 + 18);
  if (*(_BYTE *)(v14 + 18))
  {
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v217);
    v21 = v18;
    v22 = v14;
    while (1)
    {
      v25 = *(unsigned __int16 *)(v22 + 16);
      if (!*(_WORD *)(v22 + 16))
        goto LABEL_15;
      v26 = *(_QWORD *)(v22 + 40);
      v27 = v21 - v26;
      if (__OFSUB__(v21, v26))
        goto LABEL_193;
      if (__OFADD__(v27, 1))
        goto LABEL_194;
      if (v27 + 1 <= 0)
      {
        v25 = 0;
      }
      else
      {
        if ((_DWORD)v25 == 1)
        {
          v21 -= v26;
          goto LABEL_15;
        }
        v28 = *(_QWORD *)(v22 + 64);
        v29 = __OFSUB__(v27, v28);
        v30 = v27 - v28;
        if (v29)
          goto LABEL_195;
        if (__OFADD__(v30, 1))
          goto LABEL_196;
        if (v30 + 1 < 1)
        {
          v25 = 1;
          v21 = v27;
        }
        else
        {
          if ((_DWORD)v25 == 2)
          {
            v21 = v30;
LABEL_15:
            if (v21)
              goto LABEL_192;
            goto LABEL_16;
          }
          v31 = (_QWORD *)(v22 + 88);
          v32 = 2;
          while (1)
          {
            if (v25 == v32)
              goto LABEL_189;
            v21 = v30 - *v31;
            if (__OFSUB__(v30, *v31))
              goto LABEL_190;
            if (__OFADD__(v21, 1))
              goto LABEL_191;
            if (v21 + 1 < 1)
              break;
            ++v32;
            v31 += 3;
            v30 = v21;
            if (v25 == v32)
              goto LABEL_15;
          }
          v25 = v32;
          v21 = v30;
        }
      }
LABEL_16:
      v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
      v20 = ((-15 << v23) - 1) & v20 | (v25 << v23);
      v24 = *(_QWORD *)(v22 + 24 + 24 * v25);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v22 = v24;
      if (!*(_BYTE *)(v24 + 18))
        goto LABEL_40;
    }
  }
  swift_unknownObjectRetain_n();
  result = outlined retain of AttributedString.Runs((uint64_t)v217);
  v21 = v18;
  v24 = v14;
LABEL_40:
  v33 = *(unsigned __int16 *)(v24 + 16);
  if (!*(_WORD *)(v24 + 16))
  {
    v17 = v155;
    v7 = v153;
    goto LABEL_47;
  }
  v34 = *(_QWORD *)(v24 + 24);
  v35 = v21 - v34;
  v17 = v155;
  v7 = v153;
  if (__OFSUB__(v21, v34))
  {
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  if (__OFADD__(v35, 1))
    goto LABEL_214;
  if (v35 + 1 <= 0)
    goto LABEL_49;
  if ((_DWORD)v33 == 1)
  {
    v21 -= v34;
LABEL_47:
    if (!v21)
    {
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v180 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8);
      v13 = v156;
      v19 = v182;
      v178 = v24;
      goto LABEL_38;
    }
    __break(1u);
LABEL_49:
    v33 = 0;
    goto LABEL_64;
  }
  v36 = *(_QWORD *)(v24 + 48);
  v29 = __OFSUB__(v35, v36);
  v37 = v35 - v36;
  if (!v29)
  {
    if (__OFADD__(v37, 1))
      goto LABEL_218;
    if (v37 + 1 < 1)
    {
      v33 = 1;
      v21 = v35;
      goto LABEL_64;
    }
    if ((_DWORD)v33 != 2)
    {
      v38 = (_QWORD *)(v24 + 72);
      v39 = 2;
      while (1)
      {
        if (v33 == v39)
          goto LABEL_210;
        v21 = v37 - *v38;
        if (__OFSUB__(v37, *v38))
          goto LABEL_211;
        if (__OFADD__(v21, 1))
          goto LABEL_212;
        if (v21 + 1 < 1)
          break;
        ++v39;
        v38 += 3;
        v37 = v21;
        if (v33 == v39)
          goto LABEL_47;
      }
      v33 = v39;
      v21 = v37;
      goto LABEL_64;
    }
    v21 = v37;
    goto LABEL_47;
  }
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice4.subscript.getter(_OWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  char v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int v120;
  void (*v121)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 *v128;
  __int128 v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  int64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  unint64_t v224;
  char v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  int v236;
  void (*v237)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  __int128 *v243;
  __int128 v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  _OWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  _QWORD *v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char v299;
  _QWORD *v300;
  char v301;
  unint64_t *v302;
  unint64_t v303;
  _QWORD v304[2];
  _BYTE *v305;
  uint64_t v306;
  unint64_t v307;
  int64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  _OWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  __int128 *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  char *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  __int128 v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unint64_t v345;
  _QWORD *v346;
  _BYTE *v347;
  uint64_t v348;
  unint64_t v349;
  __int128 *v350;
  _QWORD *v351;
  __int128 *v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  _QWORD v359[2];
  __int128 v360;
  unint64_t v361;
  uint64_t v362;
  __int128 v363;
  _BYTE v364[40];
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _BYTE v373[24];
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  _BYTE v389[48];
  _BYTE v390[48];
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  _QWORD v396[3];
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  uint64_t v408;
  __int128 v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _OWORD v413[4];
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  unint64_t v422;
  _OWORD v423[3];
  _OWORD v424[3];
  _OWORD v425[3];
  _QWORD v426[8];
  _OWORD v427[3];
  _QWORD v428[8];
  _QWORD v429[3];
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  _OWORD v441[4];

  *(_QWORD *)&v340 = a7;
  *((_QWORD *)&v340 + 1) = a8;
  v339 = a6;
  v11 = *(_OWORD *)v8;
  v12 = *(_OWORD *)(v8 + 16);
  v13 = *(_OWORD *)(v8 + 32);
  v413[3] = *(_OWORD *)(v8 + 48);
  v413[2] = v13;
  v413[0] = v11;
  v413[1] = v12;
  v14 = *(_OWORD *)(v8 + 64);
  v15 = *(_OWORD *)(v8 + 80);
  v16 = *(_OWORD *)(v8 + 96);
  v417 = *(_OWORD *)(v8 + 112);
  v416 = v16;
  v414 = v14;
  v415 = v15;
  v17 = *(_OWORD *)(v8 + 128);
  v18 = *(_OWORD *)(v8 + 144);
  v19 = *(_OWORD *)(v8 + 160);
  v20 = *(_OWORD *)(v8 + 176);
  v422 = *(_QWORD *)(v8 + 192);
  v421 = v20;
  v420 = v19;
  v418 = v17;
  v21 = *((_QWORD *)&v17 + 1);
  v345 = a5;
  v22 = *((_QWORD *)&v17 + 1) >> 10;
  v419 = v18;
  if (a5 >> 10 < *((_QWORD *)&v17 + 1) >> 10
    || (v326 = *((_QWORD *)&v420 + 1) >> 10, *((_QWORD *)&v420 + 1) >> 10 < a5 >> 10))
  {
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }
  v334 = a5 >> 10;
  v313 = a2;
  v314 = a3;
  v25 = *(_QWORD *)(v8 + 200);
  v26 = *(_QWORD *)(v8 + 208);
  v333 = *((_QWORD *)&v419 + 1);
  v335 = (char *)v419;
  v327 = v420;
  v9 = *((_QWORD *)&v421 + 1);
  v8 = v421;
  v10 = v422;
  v342 = v25;
  v27 = ((uint64_t (*)(void))specialized Array.count.getter)();
  if (!v27)
  {
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }
  v325 = v22;
  v318 = *((_QWORD *)&v420 + 1);
  v22 = *(_QWORD *)&v413[0];
  v28 = *(_QWORD *)(*(_QWORD *)&v413[0] + 64);
  v29 = *(_QWORD *)(*(_QWORD *)&v413[0] + 80);
  v353 = v29;
  if (v28)
    v30 = v29;
  else
    v30 = 0;
  v351 = (_QWORD *)(v345 >> 11);
  if (v30 < (uint64_t)(v345 >> 11))
    goto LABEL_384;
  v311 = a4;
  v312 = a1;
  v31 = *(_QWORD *)(*(_QWORD *)&v413[0] + 72);
  v338 = *(_QWORD *)(*(_QWORD *)&v413[0] + 88);
  v348 = v26;
  v349 = v27;
  v316 = *((_QWORD *)&v421 + 1);
  v317 = v421;
  v315 = v422;
  v323 = v21;
  if (v28 && (uint64_t)v351 < v353 && *(_WORD *)(v28 + 16))
  {
    v32 = *(unsigned __int8 *)(v28 + 18);
    if (*(_BYTE *)(v28 + 18))
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v413);
      v10 = -15;
      v21 = 24;
      v9 = (unint64_t)v351;
      v8 = v28;
      while (1)
      {
        v36 = *(unsigned __int16 *)(v8 + 16);
        if (!*(_WORD *)(v8 + 16))
          goto LABEL_14;
        v37 = *(_QWORD *)(v8 + 40);
        v38 = v9 - v37;
        if (__OFSUB__(v9, v37))
          goto LABEL_370;
        if (__OFADD__(v38, 1))
          goto LABEL_371;
        if ((uint64_t)(v38 + 1) <= 0)
        {
          v36 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v36 == 1)
          break;
        v39 = *(_QWORD *)(v8 + 64);
        v40 = __OFSUB__(v38, v39);
        v41 = v38 - v39;
        if (v40)
          goto LABEL_378;
        if (__OFADD__(v41, 1))
          goto LABEL_379;
        if ((uint64_t)(v41 + 1) < 1)
        {
          v36 = 1;
          v9 = v38;
          goto LABEL_15;
        }
        if ((_DWORD)v36 == 2)
        {
          v9 = v41;
          goto LABEL_14;
        }
        v42 = (_QWORD *)(v8 + 88);
        v43 = 2;
        while (1)
        {
          if (v36 == v43)
            goto LABEL_360;
          v9 = v41 - *v42;
          if (__OFSUB__(v41, *v42))
          {
LABEL_361:
            __break(1u);
LABEL_362:
            __break(1u);
LABEL_363:
            __break(1u);
LABEL_364:
            __break(1u);
LABEL_365:
            __break(1u);
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
            goto LABEL_368;
          }
          if (__OFADD__(v9, 1))
            goto LABEL_362;
          if ((uint64_t)(v9 + 1) < 1)
            break;
          ++v43;
          v42 += 3;
          v41 = v9;
          if (v36 == v43)
            goto LABEL_14;
        }
        v36 = v43;
        v9 = v41;
LABEL_15:
        v33 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        v32 = ((-15 << v33) - 1) & v32 | (v36 << v33);
        v34 = *(_QWORD *)(v8 + 24 + 24 * v36);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v8 = v34;
        if (!*(_BYTE *)(v34 + 18))
          goto LABEL_39;
      }
      v9 -= v37;
LABEL_14:
      if (!v9)
        goto LABEL_15;
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
      goto LABEL_382;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v413);
    v9 = (unint64_t)v351;
    v34 = v28;
LABEL_39:
    v8 = *(unsigned __int16 *)(v34 + 16);
    v10 = v34;
    if (!*(_WORD *)(v34 + 16))
      goto LABEL_58;
    v45 = *(_QWORD *)(v34 + 24);
    v46 = v9 - v45;
    if (__OFSUB__(v9, v45))
    {
LABEL_449:
      __break(1u);
      goto LABEL_450;
    }
    if (__OFADD__(v46, 1))
    {
LABEL_450:
      __break(1u);
      goto LABEL_451;
    }
    if ((uint64_t)(v46 + 1) <= 0)
    {
      v8 = 0;
    }
    else
    {
      if ((_DWORD)v8 == 1)
      {
        v9 -= v45;
        goto LABEL_58;
      }
      v47 = *(_QWORD *)(v34 + 48);
      v40 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v40)
      {
LABEL_457:
        __break(1u);
        goto LABEL_458;
      }
      if (__OFADD__(v48, 1))
      {
LABEL_458:
        __break(1u);
        goto LABEL_459;
      }
      if ((uint64_t)(v48 + 1) < 1)
      {
        v8 = 1;
        v9 = v46;
      }
      else
      {
        if ((_DWORD)v8 == 2)
        {
          v9 = v48;
LABEL_58:
          if (v9)
          {
LABEL_447:
            __break(1u);
            goto LABEL_448;
          }
          goto LABEL_59;
        }
        v49 = (_QWORD *)(v34 + 72);
        v50 = 2;
        while (1)
        {
          if (v8 == v50)
            goto LABEL_439;
          v9 = v48 - *v49;
          if (__OFSUB__(v48, *v49))
            goto LABEL_440;
          if (__OFADD__(v9, 1))
            goto LABEL_441;
          if ((uint64_t)(v9 + 1) < 1)
            break;
          ++v50;
          v49 += 3;
          v48 = v9;
          if (v8 == v50)
            goto LABEL_58;
        }
        v8 = v50;
        v9 = v48;
      }
    }
LABEL_59:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v21 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v8 << 8);
    goto LABEL_37;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v413);
  v21 = specialized Rope._endPath.getter(v28);
  swift_unknownObjectRelease();
  v10 = 0;
  v9 = 0;
  if (v28)
  {
LABEL_37:
    swift_unknownObjectRetain();
    v44 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v338, v21, v10, v28, v31);
    swift_unknownObjectRelease_n();
    goto LABEL_61;
  }
  v44 = 0;
LABEL_61:
  v347 = (char *)v351 - v9;
  if (__OFSUB__(v351, v9))
  {
LABEL_385:
    __break(1u);
    goto LABEL_386;
  }
  v51 = *(_OWORD *)(v22 + 32);
  v441[0] = *(_OWORD *)(v22 + 16);
  v441[1] = v51;
  v441[2] = *(_OWORD *)(v22 + 48);
  v8 = (uint64_t)v441;
  BigString.utf8.getter();
  if (__OFSUB__(0, v9))
  {
LABEL_386:
    __break(1u);
    goto LABEL_387;
  }
  v330 = (__int128 *)(v22 + 16);
  v9 = v44;
  v52 = BigString.UTF8View.index(_:offsetBy:)();
  v321 = v53;
  v322 = v52;
  v8 = v54;
  v320 = v55;
  outlined release of Locale((uint64_t)&v387);
  v324 = v339;
  v328 = *((_QWORD *)&v340 + 1);
  v329 = v340;
  v331 = *((_QWORD *)&v414 + 1);
  v332 = v345;
  v341 = (_QWORD *)v22;
  v309 = v21;
  v310 = v10;
  if (v44 == *((_QWORD *)&v414 + 1))
    goto LABEL_64;
  v329 = v8;
  v70 = *((_QWORD *)&v413[0] + 1);
  v71 = *(_QWORD *)(v22 + 64);
  v72 = *(_QWORD *)(v22 + 72);
  v73 = *(_QWORD *)(v22 + 80);
  v74 = *(_QWORD *)(v22 + 88);
  swift_unknownObjectRetain();
  v75 = v73;
  v76 = v9;
  specialized Rope.subscript.getter(v338, v21, v10, v71, v72, v75, v74);
  v78 = v77;
  v80 = v79;
  result = swift_unknownObjectRelease();
  v308 = v70;
  if (v70 >= (uint64_t)v9)
  {
    v122 = v347;
LABEL_153:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v123 = v122;
    goto LABEL_169;
  }
  v352 = (__int128 *)v373;
  v350 = (__int128 *)&v411;
  v306 = v80;
  v307 = v342 + 40;
  v81 = v21;
  v21 = v349;
  v82 = v347;
  v343 = v78;
LABEL_97:
  v83 = *(_QWORD *)(v22 + 64);
  v84 = *(_QWORD *)(v22 + 88);
  v365 = v338;
  v366 = v81;
  v367 = v10;
  if (v338 != v84)
    goto LABEL_433;
  v347 = v82;
  v332 = v76;
  if (v83)
  {
    v85 = *(unsigned __int8 *)(v83 + 18);
    v86 = v81;
    result = swift_unknownObjectRetain();
    v81 = v86;
    if (v86 <= v85)
      goto LABEL_434;
  }
  else if (!v81)
  {
    goto LABEL_434;
  }
  if (!v10 || (v87 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C, ((v81 >> v87) & 0xF) == 0))
  {
    v89 = *(unsigned __int8 *)(v83 + 18);
    v90 = (4 * v89 + 8) & 0x3C;
    v91 = (v81 >> v90) & 0xF;
    *(_QWORD *)&v409 = v91;
    if (v89)
    {
      swift_unknownObjectRetain();
      v92 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v83 + 16, v83 + 24, (uint64_t *)&v409, (uint64_t)&v365, v89);
      result = swift_unknownObjectRelease();
      if ((v92 & 1) == 0)
        goto LABEL_446;
      v22 = (unint64_t)v341;
      if (v365 != v338)
        goto LABEL_435;
      v10 = v367;
      v88 = v366;
      v78 = v343;
      if (v367)
        goto LABEL_109;
    }
    else
    {
      if (!v91)
        goto LABEL_446;
      v88 = ((v91 - 1) << v90) | ((-15 << v90) - 1) & v81;
      v366 = v88;
      v367 = v83;
      v10 = v83;
      v78 = v343;
      if (v83)
        goto LABEL_109;
    }
    swift_unknownObjectRetain();
    v328 = v88;
    v95 = specialized Rope._Node.subscript.getter(v88, v83);
    v9 = v97;
    swift_unknownObjectRelease();
    v319 = 0;
    v96 = 1;
    goto LABEL_113;
  }
  v88 = ((((v81 >> v87) & 0xF) - 1) << v87) | ((-15 << v87) - 1) & v81;
  v366 = v88;
LABEL_109:
  v93 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
  v328 = v88;
  v319 = v10;
  v94 = v10 + 24 * ((v88 >> v93) & 0xF);
  v95 = *(_QWORD *)(v94 + 24);
  v9 = *(_QWORD *)(v94 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v96 = 0;
LABEL_113:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v347, v95))
    goto LABEL_436;
  if (v338 != *(_QWORD *)(v22 + 88))
    goto LABEL_437;
  v305 = &v347[-v95];
  if ((v96 & 1) != 0)
  {
    v98 = *(_QWORD *)(v22 + 64);
    swift_unknownObjectRetain();
    v78 = v343;
    specialized Rope._Node.subscript.getter(v328, v98);
    v324 = v99;
    v8 = v100;
    swift_unknownObjectRelease();
  }
  else
  {
    v101 = v319 + 24 * ((v328 >> ((4 * *(_BYTE *)(v319 + 18) + 8) & 0x3C)) & 0xF);
    v8 = *(_QWORD *)(v101 + 32);
    v102 = *(_QWORD *)(v101 + 40);
    swift_bridgeObjectRetain();
    v324 = v102;
    swift_bridgeObjectRetain();
  }
  --v332;
  swift_bridgeObjectRetain();
  v10 = 0;
  v103 = (uint64_t *)v307;
  v353 = v8;
  while (1)
  {
    v104 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_366;
    v9 = *(v103 - 1);
    v105 = *v103;
    if (v78[2])
    {
      swift_bridgeObjectRetain_n();
      v106 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v105);
      if ((v107 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v78[7] + 72 * v106, (uint64_t)&v403);
      }
      else
      {
        v407 = 0;
        v406 = 0u;
        v405 = 0u;
        v404 = 0u;
        v403 = 0u;
      }
      swift_bridgeObjectRelease();
      v8 = v353;
      if (!*(_QWORD *)(v353 + 16))
      {
LABEL_128:
        v395 = 0;
        v394 = 0u;
        v393 = 0u;
        v392 = 0u;
        v391 = 0u;
        goto LABEL_135;
      }
    }
    else
    {
      v407 = 0;
      v406 = 0u;
      v405 = 0u;
      v404 = 0u;
      v403 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v8 + 16))
        goto LABEL_128;
    }
    swift_bridgeObjectRetain();
    v108 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v105);
    if ((v109 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v108, (uint64_t)&v391);
    }
    else
    {
      v395 = 0;
      v394 = 0u;
      v393 = 0u;
      v392 = 0u;
      v391 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_135:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v403, (uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v391, (uint64_t)v352, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v368)
    {
      if (v374)
        goto LABEL_167;
      outlined destroy of Any?((uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v391, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v403, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_122;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v365, (uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v374)
      break;
    v110 = v352[3];
    v377 = v352[2];
    v378 = v110;
    v379 = *((_QWORD *)v352 + 8);
    v111 = v352[1];
    v375 = *v352;
    v376 = v111;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v380, (uint64_t)v359);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v375, (uint64_t)&v354);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v359, (uint64_t)&v409, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v354, (uint64_t)v350, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v410)
    {
      if (!v412)
      {
        v9 = 1;
        goto LABEL_121;
      }
      outlined destroy of Any?((uint64_t)v350, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_120:
      v9 = 0;
      goto LABEL_121;
    }
    if (!v412)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v409);
      goto LABEL_120;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v409, (uint64_t)v429);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v350, (uint64_t)v428);
    v112 = v430;
    v337 = v431;
    v336 = __swift_project_boxed_opaque_existential_1(v429, v430);
    v346 = v304;
    v113 = *(_QWORD *)(v112 - 8);
    MEMORY[0x1E0C80A78](v336);
    v115 = (char *)v304 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v428, (uint64_t)v426);
    v116 = type metadata accessor for Optional();
    v344 = v304;
    v117 = *(_QWORD *)(v116 - 8);
    MEMORY[0x1E0C80A78](v116);
    v119 = (char *)v304 - v118;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v120 = swift_dynamicCast();
    v121 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
    if (v120)
    {
      v121(v119, 0, 1, v112);
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v115, v119, v112);
      v9 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    }
    else
    {
      v121(v119, 1, 1, v112);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v116);
      v9 = 0;
    }
    v21 = v349;
    v78 = v343;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v428);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v429);
    v22 = (unint64_t)v341;
LABEL_121:
    outlined destroy of Any?((uint64_t)&v354, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v359, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v375);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
    outlined destroy of Any?((uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v391, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v403, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v9 & 1) == 0)
      goto LABEL_168;
LABEL_122:
    v103 += 2;
    ++v10;
    v8 = v353;
    if (v104 == v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v122 = v305;
      v82 = v305;
      v76 = v332;
      v81 = v328;
      v10 = v319;
      if (v308 >= (uint64_t)v332)
        goto LABEL_153;
      goto LABEL_97;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
LABEL_167:
  outlined destroy of Any?((uint64_t)&v365, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v391, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v403, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_168:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v123 = v347;
LABEL_169:
  v128 = v330;
  v129 = v330[1];
  v438 = *v330;
  v439 = v129;
  v440 = v330[2];
  BigString.utf8.getter();
  result = v322;
  v130 = v323;
  if (__OFSUB__(v123, v322 >> 11))
    goto LABEL_431;
  v131 = BigString.UTF8View.index(_:offsetBy:)();
  v133 = v132;
  v135 = v134;
  v137 = v136;
  outlined release of Locale((uint64_t)&v399);
  if (v325 >= v131 >> 10)
    v138 = v130;
  else
    v138 = v131;
  v332 = v138;
  if (v325 < v131 >> 10)
  {
    v10 = v135;
  }
  else
  {
    v133 = v335;
    v10 = v333;
  }
  if (v325 >= v131 >> 10)
    v139 = v327;
  else
    v139 = v137;
  v140 = v128[1];
  v435 = *v128;
  v436 = v140;
  v437 = v128[2];
  BigString.unicodeScalars.getter();
  v141 = BigString.UnicodeScalarView.index(after:)();
  v143 = v142;
  v9 = v144;
  v21 = v145;
  result = outlined release of Locale((uint64_t)&v400);
  v146 = *v128;
  v147 = v128[1];
  v427[2] = v128[2];
  v427[1] = v147;
  v427[0] = v146;
  v148 = v141 >> 10;
  v8 = v332 >> 10;
  if (v141 >> 10 < v332 >> 10)
  {
LABEL_432:
    __break(1u);
LABEL_433:
    __break(1u);
LABEL_434:
    __break(1u);
LABEL_435:
    __break(1u);
LABEL_436:
    __break(1u);
LABEL_437:
    __break(1u);
LABEL_438:
    __break(1u);
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
LABEL_443:
    __break(1u);
LABEL_444:
    __break(1u);
LABEL_445:
    __break(1u);
LABEL_446:
    __break(1u);
    goto LABEL_447;
  }
  v429[0] = v332;
  v324 = (uint64_t)v133;
  v429[1] = v133;
  v328 = v139;
  v329 = v10;
  v429[2] = v10;
  v430 = v139;
  v431 = v141;
  v432 = v143;
  v433 = v9;
  v434 = v21;
  v149 = specialized Array.count.getter(v348);
  if (!v149)
  {
    v22 = (unint64_t)v341;
    goto LABEL_64;
  }
  v22 = (unint64_t)v341;
  if (v8 == v148)
  {
LABEL_64:
    result = outlined release of AttributedString.Runs((uint64_t)v413);
    v56 = v334;
    goto LABEL_65;
  }
  v150 = v149;
  swift_bridgeObjectRetain();
  outlined retain of Locale((uint64_t)v427);
  v8 = 0;
  v10 = 40;
  while (1)
  {
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_367;
    if (!*(_QWORD *)(v348 + v10))
      break;
    swift_bridgeObjectRelease();
    v10 += 16;
    ++v8;
    if (v22 == v150)
    {
      swift_bridgeObjectRelease();
      goto LABEL_192;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v148 <= (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_192:
    v22 = (unint64_t)v341;
    v155 = v332;
    v157 = v328;
    v156 = v329;
LABEL_193:
    v332 = v155;
    v426[0] = v155;
    v426[1] = v324;
    v328 = v157;
    v329 = v156;
    v426[2] = v156;
    v426[3] = v157;
    v426[4] = v141;
    v426[5] = v143;
    v426[6] = v9;
    v426[7] = v21;
    v8 = v348;
    if (specialized Collection<>._containsScalarConstraint.getter(v348))
    {
      v9 = v141 >> 10;
      result = specialized static Array._allocateUninitialized(_:)(0);
      *(_QWORD *)&v409 = result;
      if (v150 < 1)
      {
LABEL_453:
        __break(1u);
LABEL_454:
        __break(1u);
LABEL_455:
        __break(1u);
        goto LABEL_456;
      }
      swift_bridgeObjectRetain();
      v158 = (unint64_t *)(v8 + 40);
      do
      {
        v163 = *v158;
        if (*v158)
        {
          v164 = *(v158 - 1);
          if ((v163 & 0x2000000000000000) != 0 ? HIBYTE(v163) & 0xF : v164 & 0xFFFFFFFFFFFFLL)
          {
            if ((v163 & 0x1000000000000000) != 0)
            {
              v159 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v163 & 0x2000000000000000) != 0)
              {
                v365 = *(v158 - 1);
                v366 = v163 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v164 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v159 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v160 = *(_QWORD *)(v409 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v160);
            v161 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v160, v159);
            destructiveProjectEnumData for PredicateCodableError(v161, v162);
          }
        }
        v158 += 2;
        --v150;
      }
      while (v150);
      swift_bridgeObjectRelease();
      v166 = v409;
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v408);
      v167 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(v166);
      v169 = v168;
      v171 = v170;
      v8 = v172;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v409);
      outlined release of Locale((uint64_t)v427);
      result = outlined release of AttributedString.Runs((uint64_t)v413);
      v56 = v334;
      if (v8 != 2)
      {
        if (v9 < v167 >> 10)
        {
LABEL_459:
          __break(1u);
          goto LABEL_460;
        }
        v332 = v167;
        v324 = v169;
        v328 = v8;
        v329 = v171;
      }
LABEL_65:
      if (v56 >= v326)
      {
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }
      v58 = *(_QWORD *)(v22 + 64);
      v57 = *(_QWORD *)(v22 + 72);
      v59 = *(_QWORD *)(v22 + 80);
      v8 = *(_QWORD *)(v22 + 88);
      v337 = v8;
      v353 = v57;
      if (v58)
      {
        v10 = v349;
        if (v59 < (uint64_t)v351)
        {
LABEL_430:
          __break(1u);
LABEL_431:
          __break(1u);
          goto LABEL_432;
        }
        if (*(_WORD *)(v58 + 16) && (uint64_t)v351 < v59)
        {
          v60 = *(unsigned __int8 *)(v58 + 18);
          if (*(_BYTE *)(v58 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v413);
            swift_unknownObjectRetain();
            v10 = -15;
            v21 = 24;
            v9 = (unint64_t)v351;
            v8 = v58;
            while (1)
            {
              v63 = *(unsigned __int16 *)(v8 + 16);
              if (!*(_WORD *)(v8 + 16))
                goto LABEL_73;
              v64 = *(_QWORD *)(v8 + 40);
              v65 = v9 - v64;
              if (__OFSUB__(v9, v64))
                goto LABEL_372;
              if (__OFADD__(v65, 1))
                goto LABEL_373;
              if ((uint64_t)(v65 + 1) <= 0)
              {
                v63 = 0;
              }
              else
              {
                if ((_DWORD)v63 == 1)
                {
                  v9 -= v64;
                  goto LABEL_73;
                }
                v66 = *(_QWORD *)(v8 + 64);
                v40 = __OFSUB__(v65, v66);
                v67 = v65 - v66;
                if (v40)
                  goto LABEL_380;
                if (__OFADD__(v67, 1))
                  goto LABEL_381;
                if ((uint64_t)(v67 + 1) < 1)
                {
                  v63 = 1;
                  v9 = v65;
                }
                else
                {
                  if ((_DWORD)v63 == 2)
                  {
                    v9 = v67;
LABEL_73:
                    if (v9)
                      goto LABEL_369;
                    goto LABEL_74;
                  }
                  v68 = (_QWORD *)(v8 + 88);
                  v69 = 2;
                  while (1)
                  {
                    if (v63 == v69)
                      goto LABEL_363;
                    v9 = v67 - *v68;
                    if (__OFSUB__(v67, *v68))
                      goto LABEL_364;
                    if (__OFADD__(v9, 1))
                      goto LABEL_365;
                    if ((uint64_t)(v9 + 1) < 1)
                      break;
                    ++v69;
                    v68 += 3;
                    v67 = v9;
                    if (v63 == v69)
                      goto LABEL_73;
                  }
                  v63 = v69;
                  v9 = v67;
                }
              }
LABEL_74:
              v61 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
              v60 = ((-15 << v61) - 1) & v60 | (v63 << v61);
              v62 = *(_QWORD *)(v8 + 24 + 24 * v63);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v8 = v62;
              if (!*(_BYTE *)(v62 + 18))
                goto LABEL_157;
            }
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v413);
          result = swift_unknownObjectRetain();
          v9 = (unint64_t)v351;
          v62 = v58;
LABEL_157:
          v8 = *(unsigned __int16 *)(v62 + 16);
          v336 = (_QWORD *)v62;
          if ((_DWORD)v8)
          {
            v126 = *(_QWORD *)(v62 + 24);
            v127 = v9 - v126;
            v10 = v349;
            if (__OFSUB__(v9, v126))
            {
LABEL_451:
              __break(1u);
              goto LABEL_452;
            }
            if (__OFADD__(v127, 1))
            {
LABEL_452:
              __break(1u);
              goto LABEL_453;
            }
            if ((uint64_t)(v127 + 1) <= 0)
            {
              v21 = v22;
              v8 = 0;
            }
            else
            {
              if ((_DWORD)v8 == 1)
              {
                v9 -= v126;
LABEL_164:
                if (v9)
                {
LABEL_448:
                  __break(1u);
                  goto LABEL_449;
                }
                v21 = v22;
                goto LABEL_232;
              }
              v173 = v336[6];
              v40 = __OFSUB__(v127, v173);
              v174 = v127 - v173;
              if (v40)
              {
LABEL_460:
                __break(1u);
                goto LABEL_461;
              }
              if (__OFADD__(v174, 1))
              {
LABEL_461:
                __break(1u);
                goto LABEL_462;
              }
              if ((uint64_t)(v174 + 1) < 1)
              {
                v21 = v22;
                v8 = 1;
                v9 = v127;
              }
              else
              {
                if ((_DWORD)v8 == 2)
                {
                  v9 = v174;
                  goto LABEL_164;
                }
                v175 = v336 + 9;
                v176 = 2;
                while (1)
                {
                  if (v8 == v176)
                    goto LABEL_442;
                  v9 = v174 - *v175;
                  if (__OFSUB__(v174, *v175))
                    goto LABEL_443;
                  if (__OFADD__(v9, 1))
                    goto LABEL_444;
                  if ((uint64_t)(v9 + 1) < 1)
                    break;
                  ++v176;
                  v175 += 3;
                  v174 = v9;
                  if (v8 == v176)
                    goto LABEL_164;
                }
                v21 = v22;
                v8 = v176;
                v9 = v174;
              }
            }
LABEL_232:
            swift_unknownObjectRelease();
            v177 = v336;
            swift_unknownObjectRelease();
            v178 = v60 & 0xFFFFFFFFFFFFF0FFLL;
            v124 = (uint64_t)v177;
            v22 = v178 | (v8 << 8);
            goto LABEL_155;
          }
          v10 = v349;
          goto LABEL_164;
        }
      }
      else
      {
        v10 = v349;
        if (v345 >= 0x800)
          goto LABEL_438;
      }
      v21 = v22;
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v413);
      swift_unknownObjectRetain();
      v22 = specialized Rope._endPath.getter(v58);
      swift_unknownObjectRelease();
      v124 = 0;
      v9 = 0;
      if (!v58)
      {
        v125 = 0;
LABEL_234:
        v335 = (char *)v351 - v9;
        if (__OFSUB__(v351, v9))
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }
        v179 = v330[1];
        v425[0] = *v330;
        v425[1] = v179;
        v425[2] = v330[2];
        v8 = (uint64_t)v425;
        BigString.utf8.getter();
        if (__OFSUB__(0, v9))
        {
LABEL_389:
          __break(1u);
          goto LABEL_390;
        }
        v8 = BigString.UTF8View.index(_:offsetBy:)();
        v181 = v180;
        v183 = v182;
        v9 = v184;
        outlined release of Locale((uint64_t)&v388);
        if (v125 >= v331)
        {
LABEL_390:
          __break(1u);
          goto LABEL_391;
        }
        v304[1] = v9;
        v305 = v183;
        v306 = v181;
        v307 = v8;
        v185 = *(_QWORD *)(v21 + 64);
        v186 = *(_QWORD *)(v21 + 72);
        v187 = *(_QWORD *)(v21 + 80);
        v188 = *(_QWORD *)(v21 + 88);
        swift_unknownObjectRetain();
        v353 = v125;
        v189 = v10;
        v190 = v337;
        v191 = v22;
        v22 = v21;
        v192 = v188;
        v9 = v191;
        specialized Rope.subscript.getter(v337, v191, v124, v185, v186, v187, v192);
        v194 = v193;
        v308 = v195;
        swift_unknownObjectRelease();
        v21 = v190;
        v10 = v189;
        v8 = *(_QWORD *)(v22 + 64);
        v333 = v353 + 1;
        v346 = v194;
        v347 = v373;
        v196 = *(_QWORD *)(v22 + 88);
        v352 = (__int128 *)((char *)&v393 + 8);
        v323 = v342 + 40;
        v197 = v196;
        v365 = v21;
        v366 = v9;
        v367 = v124;
LABEL_238:
        if (v21 != v197)
          goto LABEL_374;
        v327 = v197;
        if (v124)
        {
          v198 = *(_QWORD *)(v124 + 24 * ((v9 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v198 = specialized Rope._Node.subscript.getter(v9, v8);
        }
        v21 = (unint64_t)v347;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFADD__(v335, v198))
          goto LABEL_375;
        v321 = &v335[v198];
        if (v8)
        {
          v199 = ((-15 << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C));
          swift_unknownObjectRetain();
        }
        else
        {
          v199 = 0;
        }
        v200 = v346;
        if (v9 >= v199)
          goto LABEL_376;
        v336 = (_QWORD *)v124;
        if (v124)
        {
          v201 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C;
          v202 = ((v9 >> v201) & 0xF) + 1;
          if (v202 < *(unsigned __int16 *)(v124 + 16))
          {
            v203 = (v202 << v201) | ((-15 << v201) - 1) & v9;
            swift_unknownObjectRelease_n();
LABEL_253:
            v8 = v367;
LABEL_261:
            if (v333 == v331)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_302:
              v8 = *(_QWORD *)(v22 + 64);
              v238 = *(_QWORD *)(v22 + 72);
              v239 = *(_QWORD *)(v22 + 80);
              v240 = *(_QWORD *)(v22 + 88);
              swift_unknownObjectRetain();
              v241 = specialized Rope.subscript.getter(v327, v9, v124, v8, v238, v239, v240);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v40 = __OFADD__(v335, v241);
              v242 = &v335[v241];
              if (!v40)
              {
                v243 = v330;
                v244 = v330[1];
                v424[0] = *v330;
                v424[1] = v244;
                v424[2] = v330[2];
                v8 = (uint64_t)v424;
                BigString.utf8.getter();
                if (!__OFSUB__(v242, v307 >> 11))
                {
                  v245 = BigString.UTF8View.index(_:offsetBy:)();
                  v247 = v246;
                  v249 = v248;
                  v251 = v250;
                  outlined release of Locale((uint64_t)v389);
                  if (v326 >= v245 >> 10)
                    v9 = v245;
                  else
                    v9 = v318;
                  if (v326 >= v245 >> 10)
                    v10 = v247;
                  else
                    v10 = v317;
                  if (v326 >= v245 >> 10)
                    v21 = v249;
                  else
                    v21 = v316;
                  if (v326 >= v245 >> 10)
                    v22 = v251;
                  else
                    v22 = v315;
                  v252 = *v243;
                  v253 = v243[1];
                  v423[2] = v243[2];
                  v423[1] = v253;
                  v423[0] = v252;
                  v8 = v9 >> 10;
                  if (v9 >> 10 >= v334)
                  {
                    *(_QWORD *)&v375 = v345;
                    *((_QWORD *)&v375 + 1) = v339;
                    v376 = v340;
                    *(_QWORD *)&v377 = v9;
                    *((_QWORD *)&v377 + 1) = v10;
                    *(_QWORD *)&v378 = v21;
                    *((_QWORD *)&v378 + 1) = v22;
                    v254 = v348;
                    v255 = specialized Array.count.getter(v348);
                    if (v255 && v334 != v8)
                    {
                      v256 = v255;
                      swift_bridgeObjectRetain();
                      outlined retain of Locale((uint64_t)v423);
                      v8 = 0;
                      v257 = 40;
                      while (1)
                      {
                        v258 = v8 + 1;
                        if (__OFADD__(v8, 1))
                          goto LABEL_359;
                        if (!*(_QWORD *)(v254 + v257))
                          break;
                        swift_bridgeObjectRelease();
                        v257 += 16;
                        ++v8;
                        if (v258 == v256)
                        {
                          swift_bridgeObjectRelease();
                          goto LABEL_327;
                        }
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      BigString.utf8.getter();
                      BigString.UTF8View.subscript.getter();
                      outlined release of Locale((uint64_t)v390);
                      v359[0] = v345;
                      v359[1] = v339;
                      v360 = v340;
                      v361 = v345;
                      v362 = v339;
                      v363 = v340;
                      specialized BidirectionalCollection<>._getBlock(for:in:)(2, v359, &v365);
                      result = outlined release of Locale((uint64_t)&v391);
                      if (v372 != 2)
                      {
                        v9 = v369;
                        if (v334 > v369 >> 10)
                          goto LABEL_454;
                        v10 = v370;
                        v21 = v371;
                        v22 = v372;
                      }
LABEL_327:
                      *(_QWORD *)&v354 = v345;
                      *((_QWORD *)&v354 + 1) = v339;
                      v355 = v340;
                      *(_QWORD *)&v356 = v9;
                      *((_QWORD *)&v356 + 1) = v10;
                      *(_QWORD *)&v357 = v21;
                      *((_QWORD *)&v357 + 1) = v22;
                      if (!specialized Collection<>._containsScalarConstraint.getter(v254))
                      {
                        outlined release of Locale((uint64_t)v423);
                        goto LABEL_346;
                      }
                      result = specialized static Array._allocateUninitialized(_:)(0);
                      *(_QWORD *)&v380 = result;
                      if (v256 < 1)
                        goto LABEL_445;
                      swift_bridgeObjectRetain();
                      v259 = (unint64_t *)(v254 + 40);
                      do
                      {
                        v264 = *v259;
                        if (*v259)
                        {
                          v265 = *(v259 - 1);
                          if ((v264 & 0x2000000000000000) != 0 ? HIBYTE(v264) & 0xF : v265 & 0xFFFFFFFFFFFFLL)
                          {
                            if ((v264 & 0x1000000000000000) != 0)
                            {
                              v260 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                            }
                            else
                            {
                              if ((v264 & 0x2000000000000000) != 0)
                              {
                                v365 = *(v259 - 1);
                                v366 = v264 & 0xFFFFFFFFFFFFFFLL;
                                swift_bridgeObjectRetain();
                              }
                              else
                              {
                                if ((v265 & 0x1000000000000000) == 0)
                                  _StringObject.sharedUTF8.getter();
                                swift_bridgeObjectRetain();
                              }
                              v260 = _decodeScalar(_:startingAt:)();
                              swift_bridgeObjectRelease();
                            }
                            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                            v261 = *(_QWORD *)(v380 + 16);
                            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v261);
                            v262 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v261, v260);
                            destructiveProjectEnumData for PredicateCodableError(v262, v263);
                          }
                        }
                        v259 += 2;
                        --v256;
                      }
                      while (v256);
                      swift_bridgeObjectRelease();
                      v276 = v380;
                      BigString.unicodeScalars.getter();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)v396);
                      v277 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v276);
                      v279 = v278;
                      v281 = v280;
                      v283 = v282;
                      swift_bridgeObjectRelease();
                      outlined release of Locale((uint64_t)&v365);
                      outlined release of Locale((uint64_t)v423);
                      result = outlined release of AttributedString.Runs((uint64_t)v413);
                      if (v283 != 2)
                      {
                        if (v334 > v277 >> 10)
                          goto LABEL_455;
                        v9 = v277;
                        v10 = v279;
                        v21 = v281;
                        v22 = v283;
                      }
                      goto LABEL_347;
                    }
LABEL_346:
                    outlined release of AttributedString.Runs((uint64_t)v413);
LABEL_347:
                    v268 = v341[8];
                    v267 = v341[9];
                    v269 = v341[10];
                    v270 = v341[11];
                    swift_unknownObjectRetain();
                    specialized Rope.subscript.getter(v338, v309, v310, v268, v267, v269, v270);
                    v8 = v271;
                    swift_unknownObjectRelease();
                    if (one-time initialization token for name == -1)
                    {
                      if (!*(_QWORD *)(v8 + 16))
                      {
LABEL_395:
                        v384 = 0;
                        v382 = 0u;
                        v383 = 0u;
                        v380 = 0u;
                        v381 = 0u;
                        goto LABEL_396;
                      }
LABEL_349:
                      v272 = qword_1EDC3E450;
                      v273 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                      swift_bridgeObjectRetain();
                      v274 = specialized __RawDictionaryStorage.find<A>(_:)(v273, v272);
                      if ((v275 & 1) != 0)
                      {
                        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v274, (uint64_t)&v380);
                      }
                      else
                      {
                        v384 = 0;
                        v382 = 0u;
                        v383 = 0u;
                        v380 = 0u;
                        v381 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((_QWORD *)&v381 + 1))
                      {
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v380, (uint64_t)v364);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                        goto LABEL_397;
                      }
LABEL_396:
                      outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      v284 = v312;
                      *v312 = xmmword_18205FD60;
                      *((_BYTE *)v284 + 20) = 0;
                      *((_DWORD *)v284 + 4) = 0;
LABEL_397:
                      if (one-time initialization token for name == -1)
                      {
                        if (*(_QWORD *)(v8 + 16))
                          goto LABEL_399;
                      }
                      else
                      {
                        swift_once();
                        if (*(_QWORD *)(v8 + 16))
                        {
LABEL_399:
                          v285 = qword_1EDC3E4A8;
                          v286 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
                          swift_bridgeObjectRetain();
                          v287 = specialized __RawDictionaryStorage.find<A>(_:)(v286, v285);
                          if ((v288 & 1) != 0)
                          {
                            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v287, (uint64_t)&v380);
                          }
                          else
                          {
                            v384 = 0;
                            v382 = 0u;
                            v383 = 0u;
                            v380 = 0u;
                            v381 = 0u;
                          }
                          swift_bridgeObjectRelease();
                          if (*((_QWORD *)&v381 + 1))
                          {
                            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v380, (uint64_t)v364);
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                            swift_dynamicCast();
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                            v289 = 0;
                            goto LABEL_407;
                          }
LABEL_406:
                          outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          v385 = 0;
                          v289 = 1;
LABEL_407:
                          v386 = v289;
                          if (one-time initialization token for name == -1)
                          {
                            if (*(_QWORD *)(v8 + 16))
                              goto LABEL_409;
                          }
                          else
                          {
                            swift_once();
                            if (*(_QWORD *)(v8 + 16))
                            {
LABEL_409:
                              v290 = qword_1EDC3E490;
                              v291 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
                              swift_bridgeObjectRetain();
                              v292 = specialized __RawDictionaryStorage.find<A>(_:)(v291, v290);
                              if ((v293 & 1) != 0)
                              {
                                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v292, (uint64_t)&v380);
                              }
                              else
                              {
                                v384 = 0;
                                v382 = 0u;
                                v383 = 0u;
                                v380 = 0u;
                                v381 = 0u;
                              }
                              swift_bridgeObjectRelease();
                              if (*((_QWORD *)&v381 + 1))
                              {
                                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v380, (uint64_t)v364);
                                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                                v294 = v313;
                                swift_dynamicCast();
                                outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                                v295 = 0;
                                goto LABEL_417;
                              }
LABEL_416:
                              outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                              v294 = v313;
                              *v313 = 0;
                              v295 = 1;
LABEL_417:
                              *((_BYTE *)v294 + 8) = v295;
                              if (one-time initialization token for name == -1)
                              {
                                if (*(_QWORD *)(v8 + 16))
                                  goto LABEL_419;
                              }
                              else
                              {
                                swift_once();
                                if (*(_QWORD *)(v8 + 16))
                                {
LABEL_419:
                                  v296 = qword_1EDC3E478;
                                  v297 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
                                  swift_bridgeObjectRetain();
                                  v298 = specialized __RawDictionaryStorage.find<A>(_:)(v297, v296);
                                  if ((v299 & 1) != 0)
                                  {
                                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v298, (uint64_t)&v380);
                                  }
                                  else
                                  {
                                    v384 = 0;
                                    v382 = 0u;
                                    v383 = 0u;
                                    v380 = 0u;
                                    v381 = 0u;
                                  }
                                  swift_bridgeObjectRelease();
                                  if (*((_QWORD *)&v381 + 1))
                                  {
                                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v380, (uint64_t)v364);
                                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                                    v300 = v314;
                                    swift_dynamicCast();
                                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                                    v301 = 0;
LABEL_427:
                                    *((_BYTE *)v300 + 8) = v301;
                                    swift_bridgeObjectRelease();
                                    result = swift_bridgeObjectRelease();
                                    if (v9 >> 10 >= v332 >> 10)
                                    {
                                      v302 = v311;
                                      *v311 = v332;
                                      v303 = v329;
                                      v302[1] = v324;
                                      v302[2] = v303;
                                      v302[3] = v328;
                                      v302[4] = v9;
                                      v302[5] = v10;
                                      v302[6] = v21;
                                      v302[7] = v22;
                                      return v385;
                                    }
                                    __break(1u);
                                    goto LABEL_430;
                                  }
LABEL_426:
                                  outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                                  v300 = v314;
                                  *v314 = 0;
                                  v301 = 1;
                                  goto LABEL_427;
                                }
                              }
                              v384 = 0;
                              v382 = 0u;
                              v383 = 0u;
                              v380 = 0u;
                              v381 = 0u;
                              goto LABEL_426;
                            }
                          }
                          v384 = 0;
                          v382 = 0u;
                          v383 = 0u;
                          v380 = 0u;
                          v381 = 0u;
                          goto LABEL_416;
                        }
                      }
                      v384 = 0;
                      v382 = 0u;
                      v383 = 0u;
                      v380 = 0u;
                      v381 = 0u;
                      goto LABEL_406;
                    }
LABEL_394:
                    swift_once();
                    if (!*(_QWORD *)(v8 + 16))
                      goto LABEL_395;
                    goto LABEL_349;
                  }
LABEL_393:
                  __break(1u);
                  goto LABEL_394;
                }
LABEL_392:
                __break(1u);
                goto LABEL_393;
              }
LABEL_391:
              __break(1u);
              goto LABEL_392;
            }
            if (v365 != *(_QWORD *)(v22 + 88))
              goto LABEL_377;
            v337 = v365;
            v322 = v9;
            v319 = v8;
            v320 = v203;
            if (v8)
            {
              v214 = v8 + 24 * ((v203 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
              v8 = *(_QWORD *)(v214 + 32);
              v215 = *(_QWORD *)(v214 + 40);
              swift_bridgeObjectRetain();
              v325 = v215;
              swift_bridgeObjectRetain();
            }
            else
            {
              v216 = *(_QWORD *)(v22 + 64);
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v203, v216);
              v325 = v217;
              v8 = v218;
              swift_unknownObjectRelease();
            }
            swift_bridgeObjectRetain();
            v219 = 0;
            v22 = v323;
            v353 = v8;
            while (1)
            {
              v220 = v219 + 1;
              if (__OFADD__(v219, 1))
              {
                __break(1u);
LABEL_359:
                __break(1u);
LABEL_360:
                __break(1u);
                goto LABEL_361;
              }
              v9 = *(_QWORD *)(v22 - 8);
              v221 = *(_QWORD *)v22;
              if (v200[2])
              {
                swift_bridgeObjectRetain_n();
                v222 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v221);
                if ((v223 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(v200[7] + 72 * v222, (uint64_t)&v380);
                }
                else
                {
                  v384 = 0;
                  v382 = 0u;
                  v383 = 0u;
                  v380 = 0u;
                  v381 = 0u;
                }
                swift_bridgeObjectRelease();
                v8 = v353;
                if (!*(_QWORD *)(v353 + 16))
                {
LABEL_276:
                  v379 = 0;
                  v377 = 0u;
                  v378 = 0u;
                  v375 = 0u;
                  v376 = 0u;
                  goto LABEL_283;
                }
              }
              else
              {
                v384 = 0;
                v382 = 0u;
                v383 = 0u;
                v380 = 0u;
                v381 = 0u;
                swift_bridgeObjectRetain();
                if (!*(_QWORD *)(v8 + 16))
                  goto LABEL_276;
              }
              swift_bridgeObjectRetain();
              v224 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v221);
              if ((v225 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v8 + 56) + 72 * v224, (uint64_t)&v375);
              }
              else
              {
                v379 = 0;
                v377 = 0u;
                v378 = 0u;
                v375 = 0u;
                v376 = 0u;
              }
              swift_bridgeObjectRelease();
LABEL_283:
              swift_bridgeObjectRelease();
              v8 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v380, (uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v375, v21, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v368)
              {
                if (v374)
                  goto LABEL_300;
                outlined destroy of Any?((uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v375, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_270;
              }
              outlined init with copy of (Hashable & Sendable)?((uint64_t)&v365, (uint64_t)v359, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v374)
                goto LABEL_299;
              v226 = *(_OWORD *)(v21 + 48);
              v356 = *(_OWORD *)(v21 + 32);
              v357 = v226;
              v358 = *(_QWORD *)(v21 + 64);
              v227 = *(_OWORD *)(v21 + 16);
              v354 = *(_OWORD *)v21;
              v355 = v227;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v359, (uint64_t)v424);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v354, (uint64_t)v423);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v424, (uint64_t)&v391, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?((uint64_t)v423, (uint64_t)v352, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (*((_QWORD *)&v392 + 1))
              {
                if (!v395)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v391);
LABEL_268:
                  v9 = 0;
                  goto LABEL_269;
                }
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v391, (uint64_t)v396);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v352, (uint64_t)v390);
                v228 = v397;
                v344 = v398;
                v343 = __swift_project_boxed_opaque_existential_1(v396, v397);
                v351 = v304;
                v229 = *(_QWORD *)(v228 - 8);
                MEMORY[0x1E0C80A78](v343);
                v231 = (char *)v304 - ((v230 + 15) & 0xFFFFFFFFFFFFFFF0);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v390, (uint64_t)v389);
                v232 = type metadata accessor for Optional();
                v350 = (__int128 *)v304;
                v233 = *(_QWORD *)(v232 - 8);
                MEMORY[0x1E0C80A78](v232);
                v235 = (char *)v304 - v234;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v236 = swift_dynamicCast();
                v237 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56);
                if (v236)
                {
                  v237(v235, 0, 1, v228);
                  (*(void (**)(char *, char *, uint64_t))(v229 + 32))(v231, v235, v228);
                  v9 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v229 + 8))(v231, v228);
                }
                else
                {
                  v237(v235, 1, 1, v228);
                  (*(void (**)(char *, uint64_t))(v233 + 8))(v235, v232);
                  v9 = 0;
                }
                v200 = v346;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v390);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v396);
                v10 = v349;
                v21 = (unint64_t)v347;
              }
              else
              {
                if (v395)
                {
                  outlined destroy of Any?((uint64_t)v352, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_268;
                }
                v9 = 1;
              }
LABEL_269:
              outlined destroy of Any?((uint64_t)v423, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?((uint64_t)v424, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v354);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v359);
              outlined destroy of Any?((uint64_t)&v365, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v375, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v380, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v9 & 1) == 0)
                goto LABEL_301;
LABEL_270:
              v22 += 16;
              ++v219;
              v8 = v353;
              if (v220 == v10)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v22 = (unint64_t)v341;
                v8 = v341[8];
                v197 = v341[11];
                v9 = v320;
                v335 = v321;
                v21 = v337;
                v365 = v337;
                v366 = v320;
                v124 = v319;
                v367 = v319;
                v40 = __OFADD__(v333++, 1);
                if (!v40)
                  goto LABEL_238;
                __break(1u);
LABEL_299:
                outlined destroy of AttributedString._AttributeValue((uint64_t)v359);
LABEL_300:
                outlined destroy of Any?((uint64_t)&v365, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?((uint64_t)&v375, (uint64_t *)v8);
                outlined destroy of Any?((uint64_t)&v380, (uint64_t *)v8);
LABEL_301:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v22 = (unint64_t)v341;
                v124 = (uint64_t)v336;
                v9 = v322;
                goto LABEL_302;
              }
            }
          }
        }
        v204 = *(unsigned __int8 *)(v8 + 18);
        v205 = (4 * v204 + 8) & 0x3C;
        v206 = (v9 >> v205) & 0xF;
        *(_QWORD *)&v391 = v206;
        if (v204)
        {
          swift_unknownObjectRetain();
          v207 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v8 + 24, (uint64_t *)&v391, (uint64_t)&v365, v8, v204);
          swift_unknownObjectRelease();
          v124 = (uint64_t)v336;
          if ((v207 & 1) != 0)
          {
            swift_unknownObjectRelease_n();
            v203 = v366;
            goto LABEL_253;
          }
        }
        else
        {
          v208 = v206 + 1;
          if (v206 + 1 < (unint64_t)*(unsigned __int16 *)(v8 + 16))
          {
            swift_unknownObjectRelease_n();
            v203 = (v208 << v205) | ((-15 << v205) - 1) & v9;
            v124 = (uint64_t)v336;
            goto LABEL_261;
          }
          v124 = (uint64_t)v336;
        }
        if (v8)
        {
          v209 = *(unsigned __int8 *)(v8 + 18);
          v210 = *(unsigned __int16 *)(v8 + 16);
          swift_unknownObjectRelease_n();
          v211 = (4 * v209 + 8) & 0x3C;
          v212 = ((-15 << v211) - 1) & v209;
          v213 = v210 << v211;
          v124 = (uint64_t)v336;
          v203 = v212 | v213;
        }
        else
        {
          v203 = 0;
        }
        v8 = 0;
        v365 = v327;
        goto LABEL_261;
      }
LABEL_155:
      swift_unknownObjectRetain();
      v125 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v337, v22, v124, v58, v353);
      swift_unknownObjectRelease_n();
      goto LABEL_234;
    }
    outlined release of Locale((uint64_t)v427);
    goto LABEL_64;
  }
  BigString.utf8.getter();
  v10 = BigString.UTF8View.index(before:)();
  v352 = v152;
  v353 = v151;
  v154 = v153;
  outlined release of Locale((uint64_t)&v401);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = outlined release of Locale((uint64_t)&v402);
  if (v148 < v10 >> 10)
  {
LABEL_456:
    __break(1u);
    goto LABEL_457;
  }
  v428[0] = v10;
  v428[1] = v353;
  v428[2] = v352;
  v428[3] = v154;
  v428[4] = v141;
  v428[5] = v143;
  v428[6] = v9;
  v428[7] = v21;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, v428, &v365);
  result = outlined release of Locale((uint64_t)&v403);
  v22 = (unint64_t)v341;
  v155 = v332;
  v157 = v328;
  v156 = v329;
  if (v368 == 2)
    goto LABEL_193;
  v155 = v365;
  if (v148 >= v365 >> 10)
  {
    v324 = v366;
    v156 = v367;
    v157 = v368;
    goto LABEL_193;
  }
LABEL_462:
  __break(1u);
  return result;
}

uint64_t AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  _QWORD *v6;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  __int128 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t isEscapingClosureAtFileLocation;
  void *v26;
  const void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  uint64_t v79;
  const void *v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  _QWORD *v90;
  _OWORD *v91;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  const void *v100;
  uint64_t (**v101)(uint64_t);
  void *v102;
  unint64_t v103;
  const void *v104;
  uint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  void *v109;
  int v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  const void *v120;
  char *v121;
  __int128 aBlock;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _OWORD v134[4];

  v101 = *(uint64_t (***)(uint64_t))(a1 + 8);
  v86 = a2[1];
  v87 = *a2;
  v88 = a2[4];
  v118 = (void *)a2[3];
  v120 = (const void *)a2[5];
  v113 = a2[6];
  v116 = a2[7];
  v109 = (void *)a2[2];
  v111 = (void *)a2[8];
  v9 = (void *)a2[10];
  v107 = (id)a2[9];
  v10 = a2[11];
  v11 = a2[12];
  v12 = (_OWORD *)*v6;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v90 = v13 + 2;
  v91 = v12;
  v14 = v12[2];
  v134[0] = v12[1];
  v134[1] = v14;
  v134[2] = v12[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v134);
  MEMORY[0x186DA46F4](v134);
  v15 = objc_allocWithZone((Class)NSMutableString);
  v16 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v89 = objc_msgSend(v15, sel_initWithString_, v16);
  swift_unknownObjectRelease();
  v93 = a3;
  v94 = v13;
  if (a4)
  {
    v97 = v9;
    v17 = *(_QWORD *)(a4 + 16);
    v18 = MEMORY[0x1E0DEE9D8];
    if (v17)
    {
      v84 = v10;
      *(_QWORD *)&v128 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v19 = (_BYTE *)(a4 + 48);
      do
      {
        if (*v19 == 1)
        {
          v20 = objc_allocWithZone((Class)NSString);
          v21 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRetain();
          objc_msgSend(v20, sel_initWithString_, v21);
          swift_unknownObjectRelease();
          outlined consume of InflectionConcept();
        }
        else
        {
          swift_bridgeObjectRetain();
          _ContiguousArrayBuffer._asCocoaArray()();
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += 24;
        --v17;
      }
      while (v17);
      v18 = v128;
      swift_bridgeObjectRelease();
      a3 = v93;
      v10 = v84;
    }
    v9 = v97;
  }
  else
  {
    v18 = 0;
  }
  v22 = v116;
  v23 = (uint64_t)v120;
  ObjectType = swift_getObjectType();
  v96 = (void *)v101[62](ObjectType);
  if ((unint64_t)a3 >> 62)
  {
    v28 = a3 & 0xFFFFFFFFFFFFFF8;
    if (a3 < 0)
      v28 = a3;
    v95 = v28;
    swift_bridgeObjectRetain();
    v26 = v111;
    isEscapingClosureAtFileLocation = v113;
    if (v18)
      goto LABEL_13;
LABEL_18:
    v98 = 0;
    goto LABEL_19;
  }
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSAttributedStringReplacement);
  swift_bridgeObjectRetain();
  v95 = _ContiguousArrayBuffer._asCocoaArray()();
  v26 = v111;
  isEscapingClosureAtFileLocation = v113;
  if (!v18)
    goto LABEL_18;
LABEL_13:
  v27 = (const void *)(v18 & 0xFFFFFFFFFFFFFF8);
  if ((unint64_t)v18 >> 62)
    goto LABEL_103;
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v98 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_19:
  while (2)
  {
    v29 = 0;
    switch(v11)
    {
      case 0uLL:
        v30 = objc_msgSend((id)objc_opt_self(), sel_neutral);
        goto LABEL_26;
      case 1uLL:
        v30 = objc_msgSend((id)objc_opt_self(), sel_feminine);
        goto LABEL_26;
      case 2uLL:
        v30 = objc_msgSend((id)objc_opt_self(), sel_masculine);
        goto LABEL_26;
      case 3uLL:
        v30 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
LABEL_26:
        v29 = v30;
        goto LABEL_75;
      case 4uLL:
        goto LABEL_75;
      default:
        *(_QWORD *)&v128 = v87;
        *((_QWORD *)&v128 + 1) = v86;
        *(_QWORD *)&v129 = v109;
        *((_QWORD *)&v129 + 1) = v118;
        *(_QWORD *)&v130 = v88;
        *((_QWORD *)&v130 + 1) = v23;
        *(_QWORD *)&v131 = isEscapingClosureAtFileLocation;
        *((_QWORD *)&v131 + 1) = v22;
        *(_QWORD *)&v132 = v26;
        *((_QWORD *)&v132 + 1) = v107;
        *(_QWORD *)&v133 = v9;
        *((_QWORD *)&v133 + 1) = v10;
        if (v86)
        {
          outlined copy of TermOfAddress._TermOfAddress(v87, v86, (uint64_t)v109, (uint64_t)v118, v88, v23, isEscapingClosureAtFileLocation, v22, (uint64_t)v26, (uint64_t)v107, (uint64_t)v9, v10, v11);
          v31 = v87;
          v26 = v111;
          v32 = v86;
LABEL_29:
          v34 = v31;
          outlined copy of Locale.LanguageCode?(v31, v32);
          swift_bridgeObjectRelease();
          outlined consume of Locale.LanguageCode?(v34, v32);
          outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
          outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
          goto LABEL_30;
        }
        outlined copy of TermOfAddress?(v87, 0, (uint64_t)v109, (uint64_t)v118, v88, v23, isEscapingClosureAtFileLocation, v22, (uint64_t)v26, (uint64_t)v107, (uint64_t)v9, v10, v11);
        outlined copy of Locale.LanguageCode?(v87, 0);
        outlined copy of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined copy of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
        specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v128);
        v102 = v33;
        outlined consume of Locale.LanguageCode?(v87, 0);
        outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
        if (v102)
        {
          String.lowercased()();
          v32 = 0;
          v31 = v87;
          goto LABEL_29;
        }
        v124 = v130;
        v125 = v131;
        v126 = v132;
        v127 = v133;
        aBlock = v128;
        v123 = v129;
        Locale.Language.maximalIdentifier.getter();
        outlined consume of Locale.LanguageCode?(v87, 0);
        outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
LABEL_30:
        v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = *(char **)(v11 + 16);
        if (v36)
        {
          *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v37 = 0;
          v99 = (void *)v11;
          while (1)
          {
            v121 = v36;
            v114 = v37;
            v39 = v11 + v37;
            v40 = *(unsigned __int8 *)(v39 + 48);
            v41 = *(unsigned __int8 *)(v39 + 49);
            v42 = *(unsigned __int8 *)(v39 + 50);
            v43 = *(unsigned __int8 *)(v39 + 64);
            v108 = *(unsigned __int8 *)(v39 + 66);
            v44 = *(unsigned __int8 *)(v39 + 67);
            v110 = *(unsigned __int8 *)(v39 + 68);
            v45 = *(_QWORD *)(v39 + 80);
            v112 = *(_QWORD *)(v39 + 72);
            v103 = *(unsigned int *)(v39 + 88);
            v105 = *(unsigned __int8 *)(v39 + 92);
            v119 = String._bridgeToObjectiveCImpl()();
            v46 = objc_allocWithZone((Class)NSMorphology);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v47 = objc_msgSend(v46, sel_init);
            v48 = v47;
            if (v40 == 3)
            {
              if ((_DWORD)v42 == 6)
                goto LABEL_36;
            }
            else
            {
              objc_msgSend(v47, sel_setGrammaticalGender_, v40 + 1);
              if ((_DWORD)v42 == 6)
              {
LABEL_36:
                if ((_DWORD)v41 != 14)
                  goto LABEL_53;
                goto LABEL_37;
              }
            }
            objc_msgSend(v48, sel_setNumber_, v42 + 1);
            if ((_DWORD)v41 != 14)
            {
LABEL_53:
              objc_msgSend(v48, sel_setPartOfSpeech_, v41 + 1);
              if ((_DWORD)v43 == 14)
                goto LABEL_39;
LABEL_38:
              objc_msgSend(v48, sel_setGrammaticalCase_, v43 + 1);
              goto LABEL_39;
            }
LABEL_37:
            if ((_DWORD)v43 != 14)
              goto LABEL_38;
LABEL_39:
            v11 = (unint64_t)v99;
            if (v44 != 2)
              objc_msgSend(v48, sel_setDetermination_, (v44 & 1) + 1);
            if ((_DWORD)v108 != 3)
              objc_msgSend(v48, sel_setPronounType_, v108 + 1);
            swift_bridgeObjectRelease();
            if (v110 != 2)
            {
              if ((v110 & 1) != 0)
                v49 = 2;
              else
                v49 = 1;
              objc_msgSend(v48, sel_setDefiniteness_, v49);
            }
            if (v45)
            {
              v50 = objc_allocWithZone((Class)NSMorphology);
              swift_bridgeObjectRetain();
              v51 = objc_msgSend(v50, sel_init);
              v38 = v51;
              if (v112 == 3)
                v52 = v51;
              else
                objc_msgSend(v51, sel_setGrammaticalGender_, v112 + 1);
              if ((v112 & 0xFF0000) != 0x60000)
                objc_msgSend(v38, sel_setNumber_, BYTE2(v112) + 1);
              if ((v112 & 0xFF00) != 0xE00)
                objc_msgSend(v38, sel_setPartOfSpeech_, BYTE1(v112) + 1);
              v53 = v103 | (v105 << 32);
              if (v103 != 14)
                objc_msgSend(v38, sel_setGrammaticalCase_, v103 + 1);
              if ((v103 & 0xFF000000) != 0x2000000)
                objc_msgSend(v38, sel_setDetermination_, ((v53 >> 24) & 1) + 1);
              if (BYTE2(v103) != 3)
                objc_msgSend(v38, sel_setPronounType_, BYTE2(v103) + 1);
              if ((_DWORD)v105 == 2)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease_n();
              }
              else
              {
                if ((v53 & 0x100000000) != 0)
                  v54 = 2;
                else
                  v54 = 1;
                objc_msgSend(v38, sel_setDefiniteness_, v54);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v38 = 0;
            }
            objc_msgSend(objc_allocWithZone((Class)NSMorphologyPronoun), sel_initWithPronoun_morphology_dependentMorphology_, v119, v48, v38);

            swift_unknownObjectRelease();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v37 = v114 + 64;
            v36 = v121 - 1;
            if (v121 == (char *)1)
            {
              v55 = aBlock;
              swift_bridgeObjectRelease();
              v13 = v94;
              if (!((unint64_t)v55 >> 62))
                goto LABEL_73;
LABEL_88:
              if (v55 >= 0)
                v55 &= 0xFFFFFFFFFFFFFF8uLL;
              goto LABEL_74;
            }
          }
        }
        swift_bridgeObjectRelease();
        v55 = MEMORY[0x1E0DEE9D8];
        if (MEMORY[0x1E0DEE9D8] >> 62)
          goto LABEL_88;
LABEL_73:
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
        v55 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_74:
        v29 = objc_msgSend((id)objc_opt_self(), sel_localizedForLanguageIdentifier_withPronouns_, v35, v55);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
LABEL_75:
        v118 = v29;
        *(_QWORD *)&v124 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *((_QWORD *)&v124 + 1) = v13;
        v56 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *((_QWORD *)&v123 + 1) = &block_descriptor_123;
        v120 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        v57 = swift_allocObject();
        *(_QWORD *)(v57 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(_QWORD *)(v57 + 24) = v13;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v57;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_131_0;
        v115 = _Block_copy(&aBlock);
        swift_retain();
        v81 = (const void *)v57;
        swift_retain();
        swift_release();
        v58 = swift_allocObject();
        *(_QWORD *)(v58 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(_QWORD *)(v58 + 24) = v13;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v58;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_139_0;
        v117 = _Block_copy(&aBlock);
        swift_retain();
        v82 = (const void *)v58;
        swift_retain();
        swift_release();
        v59 = swift_allocObject();
        *(_QWORD *)(v59 + 16) = v90;
        v60 = swift_allocObject();
        *(_QWORD *)(v60 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v60 + 24) = v59;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v60;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_150;
        v111 = _Block_copy(&aBlock);
        v83 = (const void *)v60;
        swift_retain();
        swift_release();
        v61 = swift_allocObject();
        *(_QWORD *)(v61 + 16) = v90;
        v62 = swift_allocObject();
        *(_QWORD *)(v62 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v62 + 24) = v61;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v62;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_161;
        v109 = _Block_copy(&aBlock);
        v85 = (const void *)v62;
        swift_retain();
        swift_release();
        v63 = swift_allocObject();
        *(_QWORD *)(v63 + 16) = v90;
        v64 = swift_allocObject();
        *(_QWORD *)(v64 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v64 + 24) = v63;
        *(_QWORD *)&v124 = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)partial apply;
        *((_QWORD *)&v124 + 1) = v64;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
        *((_QWORD *)&v123 + 1) = &block_descriptor_172;
        v106 = _Block_copy(&aBlock);
        v86 = v64;
        swift_retain();
        swift_release();
        v65 = swift_allocObject();
        *(_QWORD *)(v65 + 16) = v90;
        v66 = swift_allocObject();
        *(_QWORD *)(v66 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v66 + 24) = v65;
        *(_QWORD *)&v124 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
        *((_QWORD *)&v124 + 1) = v66;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
        *((_QWORD *)&v123 + 1) = &block_descriptor_183;
        v9 = _Block_copy(&aBlock);
        v87 = v66;
        swift_retain();
        swift_release();
        v67 = swift_allocObject();
        *(_QWORD *)(v67 + 16) = v90;
        v68 = swift_allocObject();
        *(_QWORD *)(v68 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v68 + 24) = v67;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v68;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
        *((_QWORD *)&v123 + 1) = &block_descriptor_194;
        v13 = _Block_copy(&aBlock);
        v88 = v68;
        swift_retain();
        swift_release();
        v69 = swift_allocObject();
        *(_QWORD *)(v69 + 16) = v89;
        v70 = swift_allocObject();
        *(_QWORD *)(v70 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v70 + 24) = v69;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v70;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_205;
        v26 = _Block_copy(&aBlock);
        v71 = v89;
        v89 = (id)v70;
        swift_retain();
        swift_release();
        v72 = swift_allocObject();
        *(_QWORD *)(v72 + 16) = v90;
        *(_QWORD *)(v72 + 24) = v71;
        v73 = swift_allocObject();
        *(_QWORD *)(v73 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v73 + 24) = v72;
        *(_QWORD *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((_QWORD *)&v124 + 1) = v73;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_216;
        v100 = _Block_copy(&aBlock);
        v107 = v71;
        v90 = (_QWORD *)v73;
        swift_retain();
        swift_release();
        *(_QWORD *)&v124 = destructiveProjectEnumData for PredicateCodableError;
        *((_QWORD *)&v124 + 1) = 0;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_219;
        v74 = _Block_copy(&aBlock);
        swift_release();
        v75 = swift_allocObject();
        *(_QWORD *)(v75 + 16) = v91;
        *(_QWORD *)(v75 + 24) = v93;
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(_QWORD *)(v23 + 24) = v75;
        *(_QWORD *)&v124 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
        *((_QWORD *)&v124 + 1) = v23;
        *(_QWORD *)&aBlock = v56;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
        *((_QWORD *)&v123 + 1) = &block_descriptor_230;
        v104 = _Block_copy(&aBlock);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        v79 = (uint64_t)v74;
        v27 = v74;
        v10 = (uint64_t)v106;
        v11 = (unint64_t)v111;
        v18 = (uint64_t)v115;
        v22 = (uint64_t)v117;
        _NSInflect((uint64_t)v96, v95, (uint64_t)v98, (uint64_t)v118, (uint64_t)v120, a5 & 1, (uint64_t)v115, (uint64_t)v117, (uint64_t)v111, (uint64_t)v109, (uint64_t)v106, (uint64_t)v9, (uint64_t)v13, (uint64_t)v26, (uint64_t)v100, v79, (uint64_t)v104);

        _Block_release(v27);
        _Block_release(v100);
        _Block_release(v26);
        _Block_release(v13);
        _Block_release(v9);
        _Block_release(v106);
        _Block_release(v109);
        _Block_release(v111);
        _Block_release(v117);
        _Block_release(v115);
        _Block_release(v120);

        swift_unknownObjectRelease();
        _Block_release(v104);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
          goto LABEL_93;
        v27 = v90;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_94;
        v27 = v89;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_95;
        v27 = (const void *)v88;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_96;
        v27 = (const void *)v87;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_97;
        v27 = (const void *)v86;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_98;
        v27 = v85;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_99;
        v27 = v83;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_100;
        v27 = v82;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_101;
        v27 = v81;
        v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          if (v18 >= 0)
            v78 = (void *)v27;
          else
            v78 = (void *)v18;
          v98 = v78;
          continue;
        }
        v76 = v94[2];
        swift_retain();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        *a6 = v76;
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
    }
  }
}

uint64_t Range<>.init(_:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[48];
  char v28[48];
  _OWORD v29[6];
  __int128 v30[3];
  _BYTE v31[40];

  v5 = (_OWORD *)*a3;
  if (result != 0x7FFFFFFFFFFFFFFFLL && (result & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    v6 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }
    v7 = v5[2];
    v29[3] = v5[1];
    v29[4] = v7;
    v29[5] = v5[3];
    BigString.utf16.getter();
    v8 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v26);
    if (v8 >= v6)
    {
      v9 = v5[1];
      v10 = v5[3];
      v29[1] = v5[2];
      v29[2] = v10;
      v29[0] = v9;
      v11 = v5[1];
      v30[1] = v5[2];
      v30[2] = v10;
      v30[0] = v11;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
      outlined retain of Locale((uint64_t)v31);
      swift_release();
      BigString.utf16.getter();
      BigString.startIndex.getter();
      v12 = BigString.UTF16View.index(_:offsetBy:)();
      v14 = v13;
      v16 = v15;
      v18 = v17;
      outlined release of Locale((uint64_t)v27);
      BigString.utf16.getter();
      v19 = BigString.UTF16View.index(_:offsetBy:)();
      v21 = v20;
      v23 = v22;
      v25 = v24;
      outlined release of Locale((uint64_t)v29);
      result = outlined release of Locale((uint64_t)v28);
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      a4[4] = v19;
      a4[5] = v21;
      a4[6] = v23;
      a4[7] = v25;
      return result;
    }
  }
  result = swift_release();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 2;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t one-time initialization function for language()
{
  uint64_t result;

  result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.language = result;
  return result;
}

uint64_t AttributedString.inflected()@<X0>(_QWORD *a1@<X8>)
{
  _OWORD **v1;
  __int128 *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _OWORD *v24;
  id v25;
  const void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  __int128 v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  __int128 v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  void *v73;
  __int128 *v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  id v80;
  unint64_t v81;
  void *v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  id v96;
  uint64_t v97;
  uint64_t ObjectType;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  const void *v125;
  const void *v126;
  const void *v127;
  const void *v128;
  const void *v129;
  const void *v130;
  char isEscapingClosureAtFileLocation;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[7];
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  _OWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  _OWORD *v157;
  _QWORD *v158;
  __int128 *v159;
  uint64_t v160;
  void *v161;
  void *v162;
  void *v163;
  const void *v164;
  __int128 *v165;
  void *v166;
  void *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  _OWORD *v172;
  uint64_t v173;
  void *v174;
  id v175;
  uint64_t v176;
  unint64_t v177;
  id v178;
  __int128 *v179;
  uint64_t v180;
  void *v181;
  _QWORD *v182;
  uint64_t (*v183)();
  _QWORD *v184;
  void *v185;
  const void *v186;
  const void *v187;
  void *v188;
  const void *v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  unint64_t v193[4];
  _QWORD v194[25];
  void *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  _OWORD v201[8];
  void *v202;
  void *v203;
  void *v204;
  id v205;
  const void *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  __int128 *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  _QWORD *v222;
  _OWORD *v223;
  void *v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  _OWORD v239[7];
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _OWORD v248[11];
  _OWORD v249[8];
  _OWORD v250[3];
  unint64_t v251;
  _QWORD *v252;
  _OWORD *v253;
  uint64_t v254;
  id v255;
  unint64_t v256;
  void *v257;
  id v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  unint64_t v268;
  uint64_t v269;
  id v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276[3];
  _BYTE v277[56];

  v3 = &v229;
  v4 = *v1;
  if (one-time initialization token for cache != -1)
    goto LABEL_43;
  while (1)
  {
    v200 = static LocaleCache.cache;
    v149 = LocaleCache.current.getter();
    v6 = v5;
    v7 = v4[2];
    v3[84] = v4[1];
    v3[85] = v7;
    v3[86] = v4[3];
    v8 = BigString.startIndex.getter();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v15 = BigString.endIndex.getter();
    if (v15 >> 10 < v8 >> 10)
    {
      __break(1u);
      goto LABEL_45;
    }
    v147 = a1;
    v148 = v6;
    v237 = MEMORY[0x1E0DEE9D8];
    v19 = v4 + 1;
    v268 = v8;
    v269 = v10;
    v270 = v12;
    v271 = v14;
    v272 = v15;
    v273 = v16;
    v274 = v17;
    v275 = v18;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v238);
    outlined release of Locale((uint64_t)v239);
    swift_release();
    v249[4] = v239[3];
    v249[5] = v239[4];
    v249[6] = v239[5];
    v249[7] = v239[6];
    AttributedString.Runs.init(_:in:)((uint64_t)v4, &v212);
    v20 = MEMORY[0x1E0DEE9D8];
    v233 = v217;
    v234 = v218;
    v235 = v219;
    v236 = v220;
    v229 = v213;
    v230 = v214;
    v231 = v215;
    v232 = v216;
    v21 = (uint64_t)v212;
    v22 = (void *)v221;
    v23 = v222;
    v24 = v223;
    v25 = v224;
    v26 = (const void *)v225;
    v27 = (void *)(v221 >> 10);
    v28 = v226;
    v29 = v227;
    v14 = MEMORY[0x1E0DEE9D8];
    v30 = v228;
    v167 = (void *)(v225 >> 10);
    v153 = v4;
    if (v221 >> 10 == v225 >> 10)
      break;
    v173 = v228;
    v174 = v227;
    v159 = v4 + 1;
    v160 = v226;
    v164 = (const void *)v225;
    v165 = v212;
    v157 = v201;
    v158 = &v194[1];
    v156 = &v180;
    v150 = &v247;
    v151 = &v244;
    v152 = 0x8000000182303D10;
    v162 = v223;
    v163 = v222;
    v161 = v224;
    v166 = (void *)v221;
    v31 = v221;
    while (1)
    {
      v171 = v23;
      v172 = v24;
      v176 = (uint64_t)v25;
      v177 = v31;
      v178 = v27;
      v44 = v233;
      v43 = v234;
      v45 = v232;
      v46 = v156;
      *((_OWORD *)v156 + 4) = v233;
      *((_OWORD *)v46 + 5) = v43;
      v47 = v234;
      v49 = v235;
      v48 = v236;
      *((_OWORD *)v46 + 6) = v235;
      *((_OWORD *)v46 + 7) = v48;
      v50 = v230;
      *(_OWORD *)v46 = v229;
      *((_OWORD *)v46 + 1) = v50;
      v51 = v232;
      v53 = v229;
      v52 = v230;
      v54 = v231;
      *((_OWORD *)v46 + 2) = v231;
      *((_OWORD *)v46 + 3) = v51;
      v55 = v158;
      *((_OWORD *)v158 + 4) = v44;
      v55[5] = v47;
      v56 = v236;
      v55[6] = v49;
      v55[7] = v56;
      *v55 = v53;
      v55[1] = v52;
      v55[2] = v54;
      v55[3] = v45;
      v3 = v165;
      v57 = v166;
      v194[0] = v165;
      v194[17] = v166;
      v59 = v162;
      v58 = v163;
      v194[18] = v163;
      v194[19] = v162;
      v60 = v160;
      v61 = v161;
      v194[20] = v161;
      v62 = v164;
      v194[21] = v164;
      v194[22] = v160;
      v194[23] = v174;
      v194[24] = v173;
      v193[0] = v31;
      v193[1] = (unint64_t)v23;
      v193[2] = (unint64_t)v24;
      v193[3] = (unint64_t)v25;
      AttributedString.Runs.subscript.getter(v193, &v195);
      v170 = v196;
      v168 = (unint64_t)v195;
      v169 = v199;
      v63 = v234;
      v64 = v157;
      v157[4] = v233;
      v64[5] = v63;
      v65 = v236;
      v64[6] = v235;
      v64[7] = v65;
      v66 = v230;
      *v64 = v229;
      v64[1] = v66;
      v67 = v232;
      v64[2] = v231;
      v64[3] = v67;
      v200 = (uint64_t)v3;
      v202 = v57;
      v203 = v58;
      v204 = v59;
      v205 = v61;
      v206 = v62;
      v207 = v60;
      v208 = v174;
      v209 = v173;
      v210 = &outlined read-only object #0 of AttributedString.inflected();
      v68 = MEMORY[0x1E0DEE9D8];
      v211 = MEMORY[0x1E0DEE9D8];
      v179 = v3;
      v185 = v57;
      v186 = v58;
      v187 = v59;
      v188 = v61;
      v189 = v62;
      v190 = v60;
      v191 = v174;
      v192 = v173;
      v195 = (void *)v177;
      a1 = v171;
      v196 = v171;
      v4 = v172;
      v197 = v172;
      v198 = v176;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v200);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((unint64_t *)&v195, (uint64_t)&outlined read-only object #0 of AttributedString.inflected(), v68, v194);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v200);
      v175 = (id)v194[0];
      v38 = (void *)(v194[0] >> 10);
      if (v194[0] >> 10 < (unint64_t)v178)
        break;
      v41 = v194[1];
      v42 = (void *)v194[2];
      v178 = (id)v194[3];
      v69 = v168;
      if (*(_QWORD *)(v168 + 16)
        && (v70 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, v152), (v71 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v69 + 56) + 72 * v70, (uint64_t)v194);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v194, (uint64_t)&v179);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v194);
        v72 = 0;
        LOBYTE(v196) = 0;
        v73 = v195;
      }
      else
      {
        v73 = 0;
        v195 = 0;
        v72 = 1;
        LOBYTE(v196) = 1;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0)
      {
        v169 = v73;
        v170 = v42;
        v154 = (uint64_t)v38;
        v74 = v159;
        v75 = v159[1];
        v265 = *v159;
        v266 = v75;
        v267 = v159[2];
        BigString.startIndex.getter();
        v168 = v76;
        v155 = v77;
        BigString.endIndex.getter();
        BigString.utf16.getter();
        v276[0] = v265;
        v276[1] = v266;
        v276[2] = v267;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v276, (uint64_t)v277);
        outlined retain of Locale((uint64_t)v277);
        v78 = v177;
        v79 = a1;
        v168 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v240);
        BigString.utf16.getter();
        v80 = v175;
        v81 = v41;
        v82 = v170;
        v155 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v265);
        outlined release of Locale((uint64_t)&v241);
        v83 = v74[1];
        v262 = *v74;
        v263 = v83;
        v264 = v74[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        v251 = v78;
        v252 = v79;
        v253 = v4;
        v254 = v176;
        v255 = v80;
        v177 = v81;
        v256 = v81;
        v257 = v82;
        v258 = v178;
        BigString.unicodeScalars.getter();
        v84 = v153;
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v242);
        outlined release of Locale((uint64_t)&v243);
        swift_release();
        v85 = *((_OWORD *)v151 + 1);
        v249[0] = *(_OWORD *)v151;
        v249[1] = v85;
        v86 = *((_OWORD *)v151 + 3);
        v249[2] = *((_OWORD *)v151 + 2);
        v249[3] = v86;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v249, (uint64_t)v194);
        if (v194[3])
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v194, (uint64_t)&v179);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)v194);
        }
        else
        {
          outlined destroy of Any?((uint64_t)v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          v196 = 0;
          v195 = 0;
          LODWORD(v197) = 0;
          BYTE4(v197) = -1;
        }
        swift_release_n();
        v87 = v159;
        if (BYTE4(v197) != 255)
          __asm { BR              X9 }
        v88 = v159[1];
        v259 = *v159;
        v260 = v88;
        v261 = v159[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v245);
        outlined release of Locale((uint64_t)&v246);
        swift_release();
        v89 = *((_OWORD *)v150 + 1);
        v248[7] = *(_OWORD *)v150;
        v248[8] = v89;
        v90 = *((_OWORD *)v150 + 3);
        v248[9] = *((_OWORD *)v150 + 2);
        v248[10] = v90;
        v91 = *v87;
        v92 = v87[1];
        v250[2] = v87[2];
        v250[1] = v92;
        v250[0] = v91;
        swift_retain();
        outlined retain of Locale((uint64_t)v250);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v250);
        outlined release of Locale((uint64_t)v248);
        swift_release();
        *(_OWORD *)&v194[1] = v248[3];
        *(_OWORD *)&v194[3] = v248[4];
        *(_OWORD *)&v194[5] = v248[5];
        *(_OWORD *)&v194[7] = v248[6];
        v194[0] = v84;
        v194[9] = 0;
        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
        String.init<A>(_:)();
        v93 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v194[3] = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        v194[0] = v93;
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v194, (uint64_t)&v179, &demangling cache variable for type metadata for Any?);
        v94 = v182;
        if (v182)
        {
          v32 = __swift_project_boxed_opaque_existential_1(&v179, (uint64_t)v182);
          v33 = *(v94 - 1);
          v34 = MEMORY[0x1E0C80A78](v32);
          v36 = (char *)v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, __n128))(v33 + 16))(v36, v34);
          v37 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, _QWORD *))(v33 + 8))(v36, v94);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
        }
        else
        {
          v37 = 0;
        }
        v38 = (void *)v154;
        v39 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
        objc_msgSend(v39, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v169, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v168, v155, 0, v37);
        v40 = swift_unknownObjectRelease();
        MEMORY[0x186DA4AFC](v40);
        if (*(_QWORD *)((v237 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v237 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)v194, &demangling cache variable for type metadata for Any?);
        v41 = v177;
        v42 = v170;
      }
      v23 = (_QWORD *)v41;
      v24 = v42;
      v25 = v178;
      v31 = (unint64_t)v175;
      v27 = v38;
      if (v38 == v167)
      {
        v14 = v237;
        v20 = MEMORY[0x1E0DEE9D8];
        v4 = v153;
        v19 = v159;
        v28 = v160;
        v21 = (uint64_t)v165;
        v22 = v166;
        v23 = v163;
        v26 = v164;
        v25 = v161;
        v24 = v162;
        v30 = v173;
        v29 = v174;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_43:
    swift_once();
  }
LABEL_25:
  v201[4] = v233;
  v201[5] = v234;
  v201[6] = v235;
  v201[7] = v236;
  v201[0] = v229;
  v201[1] = v230;
  v201[2] = v231;
  v201[3] = v232;
  v200 = v21;
  v202 = v22;
  v203 = v23;
  v204 = v24;
  v205 = v25;
  v206 = v26;
  v207 = v28;
  v208 = v29;
  v209 = v30;
  v210 = &outlined read-only object #0 of AttributedString.inflected();
  v211 = v20;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v200);
  a1 = (_QWORD *)swift_allocObject();
  a1[2] = v4;
  v8 = (unint64_t)(a1 + 2);
  v95 = v19[1];
  *(_OWORD *)v194 = *v19;
  *(_OWORD *)&v194[2] = v95;
  *(_OWORD *)&v194[4] = v19[2];
  swift_retain();
  outlined retain of Locale((uint64_t)v194);
  MEMORY[0x186DA46F4](v194);
  v96 = objc_allocWithZone((Class)NSMutableString);
  v97 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v96, sel_initWithString_, v97);
  swift_unknownObjectRelease();
  ObjectType = swift_getObjectType();
  v178 = (id)(*(uint64_t (**)(uint64_t))(v148 + 496))(ObjectType);
  if (!((unint64_t)v14 >> 62))
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSAttributedStringReplacement);
    swift_bridgeObjectRetain();
    v177 = _ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_27;
  }
LABEL_45:
  v142 = v14 & 0xFFFFFFFFFFFFFF8;
  if (v14 < 0)
    v142 = v14;
  v177 = v142;
  swift_bridgeObjectRetain();
LABEL_27:
  v173 = v14;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    v176 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v176 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  v175 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
  v183 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  v184 = a1;
  v99 = (__int128 *)MEMORY[0x1E0C809B0];
  v179 = (__int128 *)MEMORY[0x1E0C809B0];
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v182 = &block_descriptor_22;
  v174 = _Block_copy(&v179);
  swift_retain();
  swift_release();
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v100 + 24) = a1;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (_QWORD *)v100;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_6_3;
  v171 = _Block_copy(&v179);
  swift_retain();
  v152 = v100;
  swift_retain();
  swift_release();
  v101 = swift_allocObject();
  *(_QWORD *)(v101 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v101 + 24) = a1;
  v183 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v184 = (_QWORD *)v101;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_12_1;
  v172 = _Block_copy(&v179);
  v151 = a1;
  swift_retain();
  v154 = v101;
  swift_retain();
  swift_release();
  v102 = swift_allocObject();
  *(_QWORD *)(v102 + 16) = v8;
  v103 = swift_allocObject();
  *(_QWORD *)(v103 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v103 + 24) = v102;
  v150 = (uint64_t *)v102;
  v183 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v184 = (_QWORD *)v103;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_21;
  v170 = _Block_copy(&v179);
  v155 = v103;
  swift_retain();
  swift_release();
  v104 = swift_allocObject();
  *(_QWORD *)(v104 + 16) = v8;
  v105 = swift_allocObject();
  *(_QWORD *)(v105 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v105 + 24) = v104;
  v148 = v104;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (_QWORD *)v105;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
  v182 = &block_descriptor_30;
  v169 = _Block_copy(&v179);
  v156 = (uint64_t *)v105;
  swift_retain();
  swift_release();
  v106 = swift_allocObject();
  *(_QWORD *)(v106 + 16) = v8;
  v107 = swift_allocObject();
  *(_QWORD *)(v107 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v107 + 24) = v106;
  v146[6] = v106;
  v183 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v184 = (_QWORD *)v107;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v182 = &block_descriptor_39;
  v168 = (unint64_t)_Block_copy(&v179);
  v157 = (_OWORD *)v107;
  swift_retain();
  swift_release();
  v108 = swift_allocObject();
  *(_QWORD *)(v108 + 16) = v8;
  v109 = swift_allocObject();
  *(_QWORD *)(v109 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v109 + 24) = v108;
  v146[5] = v108;
  v183 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v184 = (_QWORD *)v109;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v182 = &block_descriptor_48;
  v167 = _Block_copy(&v179);
  v158 = (_QWORD *)v109;
  swift_retain();
  swift_release();
  v110 = swift_allocObject();
  *(_QWORD *)(v110 + 16) = v8;
  v111 = swift_allocObject();
  *(_QWORD *)(v111 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v111 + 24) = v110;
  v146[4] = v110;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (_QWORD *)v111;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
  v182 = &block_descriptor_57;
  v166 = _Block_copy(&v179);
  v159 = (__int128 *)v111;
  swift_retain();
  swift_release();
  v112 = swift_allocObject();
  *(_QWORD *)(v112 + 16) = v12;
  v113 = swift_allocObject();
  *(_QWORD *)(v113 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v113 + 24) = v112;
  v146[3] = v112;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (_QWORD *)v113;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_66;
  v114 = _Block_copy(&v179);
  v115 = v12;
  v160 = v113;
  swift_retain();
  swift_release();
  v116 = swift_allocObject();
  *(_QWORD *)(v116 + 16) = v8;
  *(_QWORD *)(v116 + 24) = v115;
  v117 = swift_allocObject();
  *(_QWORD *)(v117 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v117 + 24) = v116;
  v146[2] = v116;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (_QWORD *)v117;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
  v182 = &block_descriptor_75;
  v118 = _Block_copy(&v179);
  v163 = v118;
  v165 = (__int128 *)v115;
  v161 = (void *)v117;
  swift_retain();
  swift_release();
  v183 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
  v184 = 0;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
  v182 = &block_descriptor_78;
  v119 = _Block_copy(&v179);
  v162 = v119;
  swift_release();
  v120 = swift_allocObject();
  v121 = v173;
  *(_QWORD *)(v120 + 16) = v153;
  *(_QWORD *)(v120 + 24) = v121;
  v122 = swift_allocObject();
  *(_QWORD *)(v122 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(_QWORD *)(v122 + 24) = v120;
  v146[1] = v120;
  v183 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v184 = (_QWORD *)v122;
  v179 = v99;
  v180 = 1107296256;
  v181 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
  v182 = &block_descriptor_87;
  v123 = _Block_copy(&v179);
  v164 = v123;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v144 = (uint64_t)v119;
  v145 = (uint64_t)v123;
  v143 = (uint64_t)v118;
  v124 = v166;
  v125 = v167;
  v126 = (const void *)v168;
  v127 = v169;
  v128 = v170;
  v130 = v171;
  v129 = v172;
  _NSInflect((uint64_t)v178, v177, v176, (uint64_t)v175, (uint64_t)v174, 0, (uint64_t)v171, (uint64_t)v172, (uint64_t)v170, (uint64_t)v169, v168, (uint64_t)v167, (uint64_t)v166, (uint64_t)v114, v143, v144, v145);

  _Block_release(v162);
  _Block_release(v163);
  _Block_release(v114);
  _Block_release(v124);
  _Block_release(v125);
  _Block_release(v126);
  _Block_release(v127);
  _Block_release(v128);
  _Block_release(v129);
  _Block_release(v130);
  _Block_release(v174);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  _Block_release(v164);
  LOBYTE(v125) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v125 & 1) != 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v132 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v132 & 1) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v133 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v133 & 1) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v134 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v134 & 1) != 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v135 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v135 & 1) != 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v136 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v136 & 1) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v137 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v137 & 1) != 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v138 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v138 & 1) != 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v139 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v139 & 1) != 0)
  {
LABEL_58:
    __break(1u);
    JUMPOUT(0x181ED849CLL);
  }
  v140 = v151[2];
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  *v147 = v140;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:)@<X0>(__int128 *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unint64_t v87;
  __int128 *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  uint64_t v131;
  char *v132;
  _OWORD *v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166[4];
  unint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  _OWORD v190[8];
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  unint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  _OWORD v228[7];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _OWORD v237[11];
  _OWORD v238[8];
  _OWORD v239[3];
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268[3];
  _BYTE v269[56];

  v124 = *a1;
  v7 = a2[1];
  v125 = *a2;
  v8 = a2[2];
  v122 = a2[3];
  v123 = v8;
  v9 = a2[4];
  v120 = a2[5];
  v121 = v9;
  v10 = a2[6];
  v118 = a2[7];
  v119 = v10;
  v11 = a2[8];
  v116 = a2[9];
  v117 = v11;
  v12 = a2[10];
  v114 = a2[11];
  v115 = v12;
  v113 = a2[12];
  v13 = *v4;
  v14 = *(_OWORD *)(*v4 + 16);
  v15 = *(_OWORD *)(*v4 + 48);
  v266 = *(_OWORD *)(*v4 + 32);
  v267 = v15;
  v265 = v14;
  v16 = BigString.startIndex.getter();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = BigString.endIndex.getter();
  if (v23 >> 10 < v16 >> 10)
    goto LABEL_26;
  v112 = v7;
  v226 = MEMORY[0x1E0DEE9D8];
  v257 = v16;
  v258 = v18;
  v259 = v20;
  v260 = v22;
  v261 = v23;
  v262 = v24;
  v263 = v25;
  v264 = v26;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v227);
  outlined release of Locale((uint64_t)v228);
  swift_release();
  v238[4] = v228[3];
  v238[5] = v228[4];
  v238[6] = v228[5];
  v238[7] = v228[6];
  AttributedString.Runs.init(_:in:)(v13, &v201);
  v27 = MEMORY[0x1E0DEE9D8];
  v222 = v206;
  v223 = v207;
  v224 = v208;
  v225 = v209;
  v218 = v202;
  v219 = v203;
  v220 = v204;
  v221 = v205;
  v28 = v201;
  v29 = v210;
  v30 = v211;
  v31 = v212;
  v32 = v213;
  v33 = v214;
  v34 = v210 >> 10;
  v35 = v215;
  v36 = v216;
  v37 = MEMORY[0x1E0DEE9D8];
  v38 = v217;
  v143 = v214 >> 10;
  v39 = v125;
  if (v210 >> 10 != v214 >> 10)
  {
    v153 = v217;
    v135 = v215;
    v136 = v216;
    v140 = v214;
    v141 = v201;
    v110 = a4;
    v111 = a3;
    v134 = &v168;
    v133 = v190;
    v132 = (char *)&v156 + 8;
    v127 = &v233;
    v128 = v13;
    v126 = &v236;
    v129 = 0x8000000182303D10;
    v130 = (__int128 *)(v13 + 16);
    v138 = v212;
    v139 = v211;
    v137 = v213;
    v142 = v210;
    while (1)
    {
      v149 = v30;
      v150 = v31;
      v151 = v29;
      v152 = v32;
      v154 = v34;
      v50 = v222;
      v51 = v223;
      v52 = v223;
      v53 = v132;
      *((_OWORD *)v132 + 4) = v222;
      v53[5] = v51;
      v54 = v224;
      v55 = v225;
      v56 = v225;
      v53[6] = v224;
      v53[7] = v55;
      v57 = v218;
      v58 = v219;
      v59 = v219;
      *v53 = v218;
      v53[1] = v58;
      v60 = v220;
      v61 = v221;
      v62 = v221;
      v53[2] = v220;
      v53[3] = v61;
      v63 = v134;
      v134[4] = v50;
      v63[5] = v52;
      v63[6] = v54;
      v63[7] = v56;
      *v63 = v57;
      v63[1] = v59;
      v63[2] = v60;
      v63[3] = v62;
      v65 = v141;
      v64 = v142;
      v167 = v141;
      v176 = v142;
      v66 = v138;
      v67 = v139;
      v177 = v139;
      v178 = v138;
      v68 = v137;
      v179 = v137;
      v69 = v140;
      v180 = v140;
      v70 = v135;
      v181 = v135;
      v182 = v136;
      v71 = v136;
      v183 = v153;
      v166[0] = v29;
      v166[1] = v30;
      v166[2] = v31;
      v166[3] = v32;
      AttributedString.Runs.subscript.getter(v166, &v184);
      v147 = v185;
      v145 = v184;
      v146 = v188;
      v72 = v223;
      v73 = v133;
      v133[4] = v222;
      v73[5] = v72;
      v74 = v225;
      v73[6] = v224;
      v73[7] = v74;
      v75 = v219;
      *v73 = v218;
      v73[1] = v75;
      v76 = v221;
      v73[2] = v220;
      v73[3] = v76;
      v189 = v65;
      v191 = v64;
      v192 = v67;
      v193 = v66;
      v194 = v68;
      v195 = v69;
      v196 = v70;
      v77 = v71;
      v197 = v71;
      v198 = v153;
      v199 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
      v78 = MEMORY[0x1E0DEE9D8];
      v200 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v156 = v65;
      v158 = v64;
      v159 = v67;
      v160 = v66;
      v161 = v68;
      v162 = v69;
      v163 = v70;
      v164 = v77;
      v165 = v153;
      v79 = v151;
      v184 = v151;
      v80 = v149;
      v185 = v149;
      v81 = v150;
      v186 = v150;
      v82 = v152;
      v187 = v152;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v189);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v184, (uint64_t)&outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:), v78, (uint64_t *)&v167);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v189);
      v155 = v167;
      v148 = v167 >> 10;
      if (v167 >> 10 < v154)
        break;
      v154 = *((_QWORD *)&v168 + 1);
      v49 = v168;
      v46 = v169;
      v83 = v145;
      if (*(_QWORD *)(v145 + 16)
        && (v84 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, v129), (v85 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v83 + 56) + 72 * v84, (uint64_t)&v167);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v167, (uint64_t)&v156);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v167);
        v86 = 0;
        LOBYTE(v185) = 0;
        v87 = v184;
      }
      else
      {
        v87 = 0;
        v184 = 0;
        v86 = 1;
        LOBYTE(v185) = 1;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v86 & 1) == 0)
      {
        v146 = v87;
        v88 = v130;
        v89 = v130[1];
        v254 = *v130;
        v255 = v89;
        v256 = v130[2];
        BigString.startIndex.getter();
        v147 = v46;
        v145 = v90;
        v131 = v91;
        BigString.endIndex.getter();
        BigString.utf16.getter();
        v268[0] = v254;
        v268[1] = v255;
        v268[2] = v256;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v268, (uint64_t)v269);
        outlined retain of Locale((uint64_t)v269);
        v144 = v49;
        v92 = v147;
        v93 = v81;
        v145 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v229);
        BigString.utf16.getter();
        v94 = v155;
        v95 = v154;
        v131 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v254);
        outlined release of Locale((uint64_t)&v230);
        v96 = v88[1];
        v251 = *v88;
        v252 = v96;
        v253 = v88[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        v240 = v79;
        v241 = v80;
        v242 = v93;
        v243 = v82;
        v244 = v94;
        v245 = v144;
        v246 = v95;
        v46 = v92;
        v247 = v92;
        BigString.unicodeScalars.getter();
        v97 = v128;
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v231);
        outlined release of Locale((uint64_t)&v232);
        swift_release();
        v98 = *((_OWORD *)v127 + 1);
        v238[0] = *(_OWORD *)v127;
        v238[1] = v98;
        v99 = *((_OWORD *)v127 + 3);
        v238[2] = *((_OWORD *)v127 + 2);
        v238[3] = v99;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v238, (uint64_t)&v167);
        if ((_QWORD)v169)
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v167, (uint64_t)&v156);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v167);
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v167, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          v185 = 0;
          v184 = 0;
          LODWORD(v186) = 0;
          BYTE4(v186) = -1;
        }
        swift_release_n();
        if (BYTE4(v186) != 255)
          __asm { BR              X9 }
        v100 = v130;
        v101 = v130[1];
        v248 = *v130;
        v249 = v101;
        v250 = v130[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v234);
        outlined release of Locale((uint64_t)&v235);
        swift_release();
        v102 = *((_OWORD *)v126 + 1);
        v237[7] = *(_OWORD *)v126;
        v237[8] = v102;
        v103 = *((_OWORD *)v126 + 3);
        v237[9] = *((_OWORD *)v126 + 2);
        v237[10] = v103;
        v104 = *v100;
        v105 = v100[1];
        v239[2] = v100[2];
        v239[1] = v105;
        v239[0] = v104;
        swift_retain();
        outlined retain of Locale((uint64_t)v239);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v239);
        outlined release of Locale((uint64_t)v237);
        swift_release();
        v168 = v237[3];
        v169 = v237[4];
        v170 = v237[5];
        v171 = v237[6];
        v167 = v97;
        v172 = 0;
        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
        String.init<A>(_:)();
        v106 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v107 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        v152 = 0;
        *(_QWORD *)&v169 = v107;
        v167 = v106;
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v167, (uint64_t)&v156, &demangling cache variable for type metadata for Any?);
        v108 = v157;
        if (v157)
        {
          v40 = __swift_project_boxed_opaque_existential_1(&v156, v157);
          v41 = *(_QWORD *)(v108 - 8);
          v42 = MEMORY[0x1E0C80A78](v40);
          v44 = (char *)&v110 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, __n128))(v41 + 16))(v44, v42);
          v45 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v108);
          v46 = v147;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
        }
        else
        {
          v45 = 0;
        }
        v47 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
        objc_msgSend(v47, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v146, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v145, v131, v152, v45);
        v48 = swift_unknownObjectRelease();
        MEMORY[0x186DA4AFC](v48);
        if (*(_QWORD *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for Any?);
        v49 = v144;
      }
      v30 = v49;
      v31 = v154;
      v29 = v155;
      v32 = v46;
      v34 = v148;
      if (v148 == v143)
      {
        v37 = v226;
        a4 = v110;
        a3 = v111;
        v39 = v125;
        v13 = v128;
        v27 = MEMORY[0x1E0DEE9D8];
        v28 = v141;
        v29 = v142;
        v30 = v139;
        v33 = v140;
        v32 = v137;
        v31 = v138;
        v35 = v135;
        v36 = v136;
        v38 = v153;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x181ED9120);
  }
LABEL_24:
  v190[4] = v222;
  v190[5] = v223;
  v190[6] = v224;
  v190[7] = v225;
  v190[0] = v218;
  v190[1] = v219;
  v190[2] = v220;
  v190[3] = v221;
  v189 = v28;
  v191 = v29;
  v192 = v30;
  v193 = v31;
  v194 = v32;
  v195 = v33;
  v196 = v35;
  v197 = v36;
  v198 = v38;
  v199 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
  v200 = v27;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v189);
  v184 = v13;
  v156 = v124;
  v167 = v39;
  *(_QWORD *)&v168 = v112;
  *((_QWORD *)&v168 + 1) = v123;
  *(_QWORD *)&v169 = v122;
  *((_QWORD *)&v169 + 1) = v121;
  *(_QWORD *)&v170 = v120;
  *((_QWORD *)&v170 + 1) = v119;
  *(_QWORD *)&v171 = v118;
  *((_QWORD *)&v171 + 1) = v117;
  v172 = v116;
  v173 = v115;
  v174 = v114;
  v175 = v113;
  AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)((uint64_t)&v156, (uint64_t *)&v167, v37, a3, 0, a4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  uint64_t v3;
  _OWORD v5[6];

  v1 = *(_OWORD **)(a1 + 16);
  v2 = v1[2];
  v5[3] = v1[1];
  v5[4] = v2;
  v5[5] = v1[3];
  BigString.utf16.getter();
  v3 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)v5);
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  uint64_t result;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  *(_QWORD *)&v31 = *(_QWORD *)(a6 + 16);
  swift_retain();
  result = Range<>.init(_:in:)(a2, a3, &v31, (uint64_t *)&v26);
  if (v28 != 2)
  {
    v31 = v26;
    v32 = v27;
    v33 = v28;
    v34 = v29;
    v35 = v30;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflect"));
    v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v15 == v16)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        if (one-time initialization token for inflectionAlternative != -1)
          swift_once();
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
        v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v21 == v22)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
            return result;
        }
        v25 = *(_OWORD **)(a6 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v25, a4, a5, a6);
LABEL_17:
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    v23 = *(_OWORD **)(a6 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v23, a4, a5, a6);
    goto LABEL_17;
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, void *a2, int a3, int a4, void *aBlock)
{
  void (*v6)(void);
  void *v7;
  id v8;

  v6 = *(void (**)(void))(a1 + 32);
  v7 = _Block_copy(aBlock);
  *(_QWORD *)(swift_allocObject() + 16) = v7;
  v8 = a2;
  v6();
  swift_release();

}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
  v9 = v18;
  if (v18)
  {
    v10 = __swift_project_boxed_opaque_existential_1(v17, v18);
    v11 = *(_QWORD *)(v9 - 8);
    v12 = MEMORY[0x1E0C80A78](v10);
    v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v11 + 16))(v14, v12);
    v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    v15 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v15, a2, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *i;
  void *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  __int128 v36;
  __int128 v37;
  char v38[9];
  _BYTE v39[32];
  _QWORD v40[4];
  _QWORD v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[12];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[48];
  _BYTE v65[48];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[48];
  _BYTE v71[48];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[3];
  _OWORD v77[13];
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v77[0] = *(_QWORD *)(a5 + 16);
  swift_retain();
  result = Range<>.init(_:in:)(a1, a2, v77, (uint64_t *)&v58);
  v9 = v60;
  if (v60 != 2)
  {
    v11 = v62;
    v10 = v63;
    v12 = v59;
    v36 = v58;
    v37 = v61;
    v13 = *(_OWORD **)(a5 + 16);
    v14 = v13[2];
    v85 = v13[1];
    v86 = v14;
    v87 = v13[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v79 = v36;
    v80 = v12;
    v81 = v9;
    v82 = v37;
    v83 = v11;
    v84 = v10;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    swift_retain();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v64);
    outlined release of Locale((uint64_t)v65);
    swift_release();
    v72 = v66;
    v73 = v67;
    v74 = v68;
    v75 = v69;
    AttributedString.Runs.init(_:in:)((uint64_t)v13, &v42);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_182065BC0;
    if (one-time initialization token for name != -1)
      swift_once();
    v16 = qword_1EDC3E450;
    *(_QWORD *)(v15 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
    *(_QWORD *)(v15 + 40) = v16;
    v17 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v17 != -1)
      swift_once();
    v18 = qword_1EDC3E4A8;
    *(_QWORD *)(v15 + 48) = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
    *(_QWORD *)(v15 + 56) = v18;
    v19 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v19 != -1)
      swift_once();
    v20 = qword_1EDC3E490;
    *(_QWORD *)(v15 + 64) = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
    *(_QWORD *)(v15 + 72) = v20;
    v21 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v21 != -1)
      swift_once();
    v22 = qword_1EDC3E478;
    *(_QWORD *)(v15 + 80) = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
    *(_QWORD *)(v15 + 88) = v22;
    v55[10] = v52;
    v55[11] = v53;
    v55[6] = v48;
    v55[7] = v49;
    v55[8] = v50;
    v55[9] = v51;
    v55[2] = v44;
    v55[3] = v45;
    v55[4] = v46;
    v55[5] = v47;
    v55[0] = v42;
    v55[1] = v43;
    *(_QWORD *)&v56 = v54;
    *((_QWORD *)&v56 + 1) = v15;
    v57 = MEMORY[0x1E0DEE9D8];
    v78 = MEMORY[0x1E0DEE9D8];
    v77[10] = v52;
    v77[11] = v53;
    v77[6] = v48;
    v77[7] = v49;
    v77[8] = v50;
    v77[9] = v51;
    v77[2] = v44;
    v77[3] = v45;
    v77[4] = v46;
    v77[5] = v47;
    v77[0] = v42;
    v77[1] = v43;
    v77[12] = v56;
    swift_bridgeObjectRetain();
    v23 = specialized Sequence.compactMap<A>(_:)((uint64_t)v77);
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v55);
    v24 = v23[2];
    if (v24)
    {
      v25 = 0;
      v26 = v24 - 1;
      for (i = v23 + 6; ; i += 9)
      {
        if ((v25 & 1) != 0)
        {
          if (!v26)
          {
            swift_release();
            goto LABEL_20;
          }
          v25 = 1;
        }
        else
        {
          v28 = (void *)i[6];
          v41[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
          v41[0] = v28;
          v40[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
          v40[0] = swift_allocObject();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v41, v40[0] + 16, &demangling cache variable for type metadata for Any?);
          v38[0] = 0;
          outlined init with copy of Any((uint64_t)v40, (uint64_t)v39);
          v29 = *(_OWORD **)(a5 + 16);
          v30 = v29[1];
          v31 = v29[3];
          v76[1] = v29[2];
          v76[2] = v31;
          v76[0] = v30;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          v35 = v28;
          outlined retain of Locale((uint64_t)v76);
          v32 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v70);
          BigString.utf16.getter();
          v33 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v76);
          outlined release of Locale((uint64_t)v71);
          a3(v39, v32, v33, v38);
          outlined destroy of Any?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
          v25 = v38[0];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);

          outlined destroy of Any?((uint64_t)v41, &demangling cache variable for type metadata for Any?);
          if (!v26)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }
        --v26;
      }
    }
    swift_release();
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1E0F4B1D0, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v11 = *a5;
  swift_retain();
  result = Range<>.init(_:in:)(a1, a2, &v11, (uint64_t *)&v12);
  if (v13 != 2)
  {
    v11 = *a5;
    swift_retain();
    swift_retain();
    specialized AttributedString.enumerateFormattableRanges(in:editor:)(&v12, &v11, a3, a4, (uint64_t)a5);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1E0F4B1A8, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t *v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t (*v56)(uint64_t);
  void (*v57)(uint64_t, unint64_t, unint64_t);
  char v58;
  _QWORD *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t *v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t *v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t *v103;
  os_unfair_lock_s *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  _QWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  _BYTE v123[48];
  uint64_t v124[3];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v117 = (_QWORD *)*a4;
  swift_retain();
  result = Range<>.init(_:in:)(a2, a3, &v117, v124);
  v9 = v125;
  if (v125 == 2)
    return result;
  v113 = v124[0];
  v114 = v124[1];
  v115 = v124[2];
  v10 = v126;
  v11 = v127;
  v12 = v128;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflect"));
  v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_16:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v29 = (_QWORD *)*a4;
      v30 = *(_OWORD *)(*a4 + 16);
      v31 = *(_OWORD *)(*a4 + 48);
      v146 = *(_OWORD *)(*a4 + 32);
      v147 = v31;
      v145 = v30;
      v32 = v29[8];
      v108 = v29[9];
      v33 = v29[10];
      v34 = v29[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v32, v108, v33, v34);
      swift_release();
    }
    v35 = *a4;
    v36 = *(_OWORD *)(*a4 + 32);
    v142 = *(_OWORD *)(*a4 + 16);
    v143 = v36;
    v144 = *(_OWORD *)(v35 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v135 = v113;
    v136 = v114;
    v137 = v115;
    v138 = v9;
    v139 = v10;
    v140 = v11;
    v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    v118 = v128;
    v119 = v129;
    v120 = v130;
    v121 = v131;
    v117 = (_QWORD *)v35;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v37 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v38 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v38);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v37, (uint64_t *)&v132);
    os_unfair_lock_unlock(v38);
    swift_release();
    v39 = v132;
    v122 = v132;
    BigString.init()();
    v116[0] = 0;
    MEMORY[0x186DA9E90](v116, 8);
    v40 = v116[0];
    type metadata accessor for AttributedString.Guts();
    v41 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v42 = v133;
      *(_OWORD *)(v41 + 16) = v132;
      *(_OWORD *)(v41 + 32) = v42;
      *(_OWORD *)(v41 + 48) = v134;
      *(_QWORD *)(v41 + 64) = 0;
      *(_QWORD *)(v41 + 72) = 0;
      *(_QWORD *)(v41 + 80) = 0;
      *(_QWORD *)(v41 + 88) = v40;
      *a4 = v41;
      swift_release();
      specialized AttributedSubstring.subscript.setter(0, 1, 0);
      goto LABEL_29;
    }
    __break(1u);
LABEL_57:
    swift_once();
LABEL_26:
    v51 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v52 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v52);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v51, (uint64_t *)&v132);
    os_unfair_lock_unlock(v52);
    swift_release();
    v39 = v132;
    v122 = v132;
    BigString.init()();
    v116[0] = 0;
    MEMORY[0x186DA9E90](v116, 8);
    v53 = v116[0];
    type metadata accessor for AttributedString.Guts();
    v54 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v55 = v133;
      *(_OWORD *)(v54 + 16) = v132;
      *(_OWORD *)(v54 + 32) = v55;
      *(_OWORD *)(v54 + 48) = v134;
      *(_QWORD *)(v54 + 64) = 0;
      *(_QWORD *)(v54 + 72) = 0;
      *(_QWORD *)(v54 + 80) = 0;
      *(_QWORD *)(v54 + 88) = v53;
      *a4 = v54;
      swift_release();
      v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
LABEL_28:
      specialized AttributedSubstring.subscript.setter(0, 1, (uint64_t (*)(uint64_t, __int128 *))v56, v57);
      goto LABEL_29;
    }
    __break(1u);
LABEL_59:
    swift_once();
LABEL_36:
    v67 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v68 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v68);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v67, (uint64_t *)&v132);
    os_unfair_lock_unlock(v68);
    swift_release();
    v39 = v132;
    v122 = v132;
    BigString.init()();
    v116[0] = 0;
    MEMORY[0x186DA9E90](v116, 8);
    v69 = v116[0];
    type metadata accessor for AttributedString.Guts();
    v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v71 = v133;
      *(_OWORD *)(v70 + 16) = v132;
      *(_OWORD *)(v70 + 32) = v71;
      *(_OWORD *)(v70 + 48) = v134;
      *(_QWORD *)(v70 + 64) = 0;
      *(_QWORD *)(v70 + 72) = 0;
      *(_QWORD *)(v70 + 80) = 0;
      *(_QWORD *)(v70 + 88) = v69;
      *a4 = v70;
      swift_release();
      v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }
    __break(1u);
LABEL_61:
    swift_once();
LABEL_45:
    v85 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v86 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v86);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v85, (uint64_t *)&v132);
    os_unfair_lock_unlock(v86);
    swift_release();
    v39 = v132;
    v122 = v132;
    BigString.init()();
    v116[0] = 0;
    MEMORY[0x186DA9E90](v116, 8);
    v87 = v116[0];
    type metadata accessor for AttributedString.Guts();
    v88 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v89 = v133;
      *(_OWORD *)(v88 + 16) = v132;
      *(_OWORD *)(v88 + 32) = v89;
      *(_OWORD *)(v88 + 48) = v134;
      *(_QWORD *)(v88 + 64) = 0;
      *(_QWORD *)(v88 + 72) = 0;
      *(_QWORD *)(v88 + 80) = 0;
      *(_QWORD *)(v88 + 88) = v87;
      *a4 = v88;
      swift_release();
      v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }
    __break(1u);
LABEL_63:
    swift_once();
LABEL_54:
    v103 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v104 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v104);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v103, (uint64_t *)&v132);
    os_unfair_lock_unlock(v104);
    swift_release();
    v39 = v132;
    v122 = v132;
    BigString.init()();
    v116[0] = 0;
    MEMORY[0x186DA9E90](v116, 8);
    v105 = v116[0];
    type metadata accessor for AttributedString.Guts();
    v106 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
    {
      __break(1u);
      goto LABEL_65;
    }
    v107 = v133;
    *(_OWORD *)(v106 + 16) = v132;
    *(_OWORD *)(v106 + 32) = v107;
    *(_OWORD *)(v106 + 48) = v134;
    *(_QWORD *)(v106 + 64) = 0;
    *(_QWORD *)(v106 + 72) = 0;
    *(_QWORD *)(v106 + 80) = 0;
    *(_QWORD *)(v106 + 88) = v105;
    *a4 = v106;
    swift_release();
    specialized AttributedSubstring.subscript.setter(1);
LABEL_29:
    if (v122 == v39)
    {
      *a4 = (uint64_t)v117;
      return swift_release();
    }
LABEL_65:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionAgreementConcept"));
  v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v43 = (_QWORD *)*a4;
      v44 = *(_OWORD *)(*a4 + 16);
      v45 = *(_OWORD *)(*a4 + 48);
      v146 = *(_OWORD *)(*a4 + 32);
      v147 = v45;
      v145 = v44;
      v46 = v43[8];
      v109 = v43[9];
      v47 = v43[10];
      v48 = v43[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v46, v109, v47, v48);
      swift_release();
    }
    v49 = *a4;
    v50 = *(_OWORD *)(*a4 + 32);
    v142 = *(_OWORD *)(*a4 + 16);
    v143 = v50;
    v144 = *(_OWORD *)(v49 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v135 = v113;
    v136 = v114;
    v137 = v115;
    v138 = v9;
    v139 = v10;
    v140 = v11;
    v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    v118 = v128;
    v119 = v129;
    v120 = v130;
    v121 = v131;
    v117 = (_QWORD *)v49;
    if (one-time initialization token for currentIdentity == -1)
      goto LABEL_26;
    goto LABEL_57;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionAgreementArgument"));
  v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) != 0)
  {
LABEL_33:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v59 = (_QWORD *)*a4;
      v60 = *(_OWORD *)(*a4 + 16);
      v61 = *(_OWORD *)(*a4 + 48);
      v146 = *(_OWORD *)(*a4 + 32);
      v147 = v61;
      v145 = v60;
      v62 = v59[8];
      v110 = v59[9];
      v63 = v59[10];
      v64 = v59[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v62, v110, v63, v64);
      swift_release();
    }
    v65 = *a4;
    v66 = *(_OWORD *)(*a4 + 32);
    v142 = *(_OWORD *)(*a4 + 16);
    v143 = v66;
    v144 = *(_OWORD *)(v65 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v135 = v113;
    v136 = v114;
    v137 = v115;
    v138 = v9;
    v139 = v10;
    v140 = v11;
    v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    v118 = v128;
    v119 = v129;
    v120 = v130;
    v121 = v131;
    v117 = (_QWORD *)v65;
    if (one-time initialization token for currentIdentity == -1)
      goto LABEL_36;
    goto LABEL_59;
  }
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionReferentConcept"));
  v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0)
  {
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v77 = (_QWORD *)*a4;
      v78 = *(_OWORD *)(*a4 + 16);
      v79 = *(_OWORD *)(*a4 + 48);
      v146 = *(_OWORD *)(*a4 + 32);
      v147 = v79;
      v145 = v78;
      v80 = v77[8];
      v111 = v77[9];
      v81 = v77[10];
      v82 = v77[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v80, v111, v81, v82);
      swift_release();
    }
    v83 = *a4;
    v84 = *(_OWORD *)(*a4 + 32);
    v142 = *(_OWORD *)(*a4 + 16);
    v143 = v84;
    v144 = *(_OWORD *)(v83 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v135 = v113;
    v136 = v114;
    v137 = v115;
    v138 = v9;
    v139 = v10;
    v140 = v11;
    v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    v118 = v128;
    v119 = v129;
    v120 = v130;
    v121 = v131;
    v117 = (_QWORD *)v83;
    if (one-time initialization token for currentIdentity == -1)
      goto LABEL_45;
    goto LABEL_61;
  }
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedNumberFormat"));
  v92 = v91;
  if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v92 == v93)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }
  v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v94 & 1) != 0)
  {
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v95 = (_QWORD *)*a4;
      v96 = *(_OWORD *)(*a4 + 16);
      v97 = *(_OWORD *)(*a4 + 48);
      v146 = *(_OWORD *)(*a4 + 32);
      v147 = v97;
      v145 = v96;
      v98 = v95[8];
      v112 = v95[9];
      v99 = v95[10];
      v100 = v95[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v98, v112, v99, v100);
      swift_release();
    }
    v101 = *a4;
    v102 = *(_OWORD *)(*a4 + 32);
    v142 = *(_OWORD *)(*a4 + 16);
    v143 = v102;
    v144 = *(_OWORD *)(v101 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v135 = v113;
    v136 = v114;
    v137 = v115;
    v138 = v9;
    v139 = v10;
    v140 = v11;
    v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    v118 = v128;
    v119 = v129;
    v120 = v130;
    v121 = v131;
    v117 = (_QWORD *)v101;
    if (one-time initialization token for currentIdentity == -1)
      goto LABEL_54;
    goto LABEL_63;
  }
  return result;
}

uint64_t specialized AttributedSubstring.subscript.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _BYTE v19[48];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(_QWORD **)v1;
    v5 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v6 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v26[1] = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v26[2] = v6;
    v26[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v26);
    swift_unknownObjectRetain();
    *(_QWORD *)v2 = AttributedString.Guts.init(string:runs:)(v26, v7, v8, v9, v10);
    swift_release();
  }
  if (a1 != 2)
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1 & 1);
  v11 = *(_OWORD **)v2;
  v12 = *(_OWORD *)(*(_QWORD *)v2 + 32);
  v20 = *(_OWORD *)(*(_QWORD *)v2 + 16);
  v21 = v12;
  v22 = v11[3];
  BigString.unicodeScalars.getter();
  v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v18);
  v14 = v11[2];
  v23 = v11[1];
  v24 = v14;
  v25 = v11[3];
  BigString.unicodeScalars.getter();
  v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  v16 = (_QWORD *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v16, v13 >> 11, v15 >> 11);
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[48];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[4];

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(_QWORD **)v1;
    v5 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v6 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v29[1] = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v29[2] = v6;
    v29[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v29);
    swift_unknownObjectRetain();
    *(_QWORD *)v2 = AttributedString.Guts.init(string:runs:)(v29, v7, v8, v9, v10);
    swift_release();
  }
  v11 = *(_OWORD **)v2;
  if ((a1 & 1) != 0)
  {
    v15 = v11[2];
    v22 = v11[1];
    v23 = v15;
    v24 = v11[3];
    BigString.unicodeScalars.getter();
    v16 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v20);
    v17 = v11[2];
    v26 = v11[1];
    v27 = v17;
    v28 = v11[3];
    BigString.unicodeScalars.getter();
    v18 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    v19 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v19, v16 >> 11, (_QWORD *)(v18 >> 11));
    return swift_release();
  }
  else
  {
    v12 = *(_OWORD *)(v2 + 24);
    v22 = *(_OWORD *)(v2 + 8);
    v23 = v12;
    v13 = *(_OWORD *)(v2 + 56);
    v24 = *(_OWORD *)(v2 + 40);
    v25 = v13;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)();
  }
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, __int128 *), void (*a4)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, unint64_t, unint64_t);
  _BYTE v27[48];
  _BYTE v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[4];

  v7 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD **)v4;
    v11 = *(_OWORD *)(*(_QWORD *)v4 + 16);
    v12 = *(_OWORD *)(*(_QWORD *)v4 + 48);
    v36[1] = *(_OWORD *)(*(_QWORD *)v4 + 32);
    v36[2] = v12;
    v36[0] = v11;
    v13 = v10[8];
    v14 = v10[9];
    v15 = v10[10];
    v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *(_QWORD *)v7 = AttributedString.Guts.init(string:runs:)(v36, v13, v14, v15, v16);
    swift_release();
  }
  v17 = *(_OWORD **)v7;
  if ((a2 & 1) != 0)
  {
    v26 = a4;
    v21 = v17[2];
    v29 = v17[1];
    v30 = v21;
    v31 = v17[3];
    BigString.unicodeScalars.getter();
    v22 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    v23 = v17[2];
    v33 = v17[1];
    v34 = v23;
    v35 = v17[3];
    BigString.unicodeScalars.getter();
    v24 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    v25 = swift_retain();
    v26(v25, v22 >> 11, v24 >> 11);
    return swift_release();
  }
  else
  {
    v18 = *(_OWORD *)(v7 + 24);
    v29 = *(_OWORD *)(v7 + 8);
    v30 = v18;
    v19 = *(_OWORD *)(v7 + 56);
    v31 = *(_OWORD *)(v7 + 40);
    v32 = v19;
    return a3(a1, &v29);
  }
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  unint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  _OWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *(*v87)(_QWORD *);
  _QWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95[48];
  char v96[48];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101[48];
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[3];
  _OWORD v115[3];
  _OWORD v116[3];
  _OWORD v117[3];
  _OWORD v118[4];
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127[3];
  _BYTE v128[48];

  v65 = (_OWORD *)*a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v65, (uint64_t *)&v89);
  v6 = v91;
  if (v91 == 2)
    return 0;
  v8 = v93;
  v7 = v94;
  v9 = v90;
  v62 = v89;
  v63 = v92;
  v10 = (_OWORD *)*a3;
  v11 = v10[2];
  v124 = v10[1];
  v125 = v11;
  v126 = v10[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v118[3] = v62;
  v119 = v9;
  v120 = v6;
  v121 = v63;
  v122 = v8;
  v123 = v7;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v95);
  outlined release of Locale((uint64_t)v96);
  v110 = v97;
  v111 = v98;
  v112 = v99;
  v113 = v100;
  v12 = v10[1];
  v13 = v10[3];
  v118[1] = v10[2];
  v118[2] = v13;
  v118[0] = v12;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v118);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v118);
  outlined release of Locale((uint64_t)v101);
  swift_release();
  v14 = v102;
  v15 = v103;
  v16 = v104;
  v17 = v105;
  v18 = v106;
  v19 = v107;
  v20 = v108;
  v21 = v109;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v10;
  v22[3] = v14;
  v22[4] = v15;
  v22[5] = v16;
  v22[6] = v17;
  v22[7] = v18;
  v51 = v19;
  v22[8] = v19;
  v22[9] = v20;
  v52 = v18;
  v53 = v22;
  v23 = v18 >> 10;
  v50 = v21;
  v22[10] = v21;
  v22[11] = 0;
  v64 = v10;
  result = swift_retain_n();
  v56 = v15;
  v57 = v14;
  v25 = v15;
  v54 = v17;
  v55 = v16;
  v26 = v17;
  v58 = v14 >> 10;
  v27 = v14;
  if (v14 >> 10 == v23)
  {
LABEL_4:
    swift_release();
    v65 = v64;
    v66 = v57;
    v67 = v56;
    v68 = v55;
    v69 = v54;
    v70 = v52;
    v71 = v51;
    v72 = v20;
    v73 = v50;
    v74 = 0;
    v75 = v57;
    v76 = v56;
    v77 = v55;
    v78 = v54;
    v79 = v52;
    v80 = v51;
    v81 = v20;
    v82 = v50;
    v83 = v27;
    v84 = v25;
    v85 = v16;
    v86 = v26;
    v87 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v88 = v53;
    outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v65);
    swift_release_n();
    return 0;
  }
  v28 = v10 + 1;
  v29 = v14 >> 10;
  while (v29 >= v58 && v23 >= v29)
  {
    v31 = v28[1];
    v117[0] = *v28;
    v117[1] = v31;
    v117[2] = v28[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v117);
    v27 = BigString.index(after:)();
    v60 = v32;
    v61 = v33;
    v35 = v34;
    outlined release of Locale((uint64_t)v117);
    result = swift_release();
    if (v29 >= v23)
      goto LABEL_26;
    v29 = v27 >> 10;
    if (v23 < v27 >> 10)
      goto LABEL_26;
    v59 = v35;
    v36 = v28[1];
    v116[0] = *v28;
    v116[1] = v36;
    v116[2] = v28[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v116);
    v37 = BigString.subscript.getter();
    v39 = v38;
    outlined release of Locale((uint64_t)v116);
    swift_release();
    if (v37 == 37 && v39 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v40 & 1) == 0)
        goto LABEL_8;
    }
    v41 = *v28;
    v42 = v28[2];
    v115[1] = v28[1];
    v115[2] = v42;
    v115[0] = v41;
    v43 = *v28;
    v127[1] = v28[1];
    v127[2] = v42;
    v127[0] = v43;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v127, (uint64_t)v128);
    outlined retain of Locale((uint64_t)v128);
    v44 = BigString.index(after:)();
    result = outlined release of Locale((uint64_t)v115);
    v45 = v44 >> 10;
    if (v23 < v44 >> 10)
      goto LABEL_27;
    if (v45 != v23)
    {
      if (v45 < v58 || v45 >= v23)
        goto LABEL_28;
      v46 = v28[1];
      v114[0] = *v28;
      v114[1] = v46;
      v114[2] = v28[2];
      swift_retain();
      outlined retain of Locale((uint64_t)v114);
      v47 = BigString.subscript.getter();
      v49 = v48;
      outlined release of Locale((uint64_t)v114);
      swift_release();
      if (v47 == 37 && v49 == 0xE100000000000000)
      {
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          swift_release();
          v65 = v64;
          v66 = v57;
          v67 = v56;
          v68 = v55;
          v69 = v54;
          v70 = v52;
          v71 = v51;
          v72 = v20;
          v73 = v50;
          v74 = 0;
          v75 = v57;
          v76 = v56;
          v77 = v55;
          v78 = v54;
          v79 = v52;
          v80 = v51;
          v81 = v20;
          v82 = v50;
          v83 = v27;
          v84 = v60;
          v85 = v61;
          v86 = v59;
          v87 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
          v88 = v53;
          outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v65);
          swift_release_n();
          return 1;
        }
      }
    }
LABEL_8:
    v26 = v59;
    v25 = v60;
    v16 = v61;
    if (v29 == v23)
      goto LABEL_4;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD v11[3];

  v2 = *result >> 10;
  if (v2 < a2[1] >> 10 || v2 >= a2[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_OWORD *)(*a2 + 16);
    v6 = *(_OWORD *)(*a2 + 48);
    v11[1] = *(_OWORD *)(*a2 + 32);
    v11[2] = v6;
    v11[0] = v5;
    outlined retain of AttributedString.Runs((uint64_t)a2);
    outlined retain of Locale((uint64_t)v11);
    v7 = BigString.subscript.getter();
    v9 = v8;
    outlined release of Locale((uint64_t)v11);
    outlined release of AttributedString.Runs((uint64_t)a2);
    if (v7 == 37 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v10 = 1;
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    return (_QWORD *)(v10 & 1);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

double closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  double result;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;

  *(_QWORD *)&v46 = *a4;
  swift_retain();
  Range<>.init(_:in:)(a2, a3, &v46, (uint64_t *)&v41);
  if (v43 == 2)
  {
    *(_QWORD *)(a5 + 24) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)a5 = 0;
    return result;
  }
  v46 = v41;
  v47 = v42;
  v48 = v43;
  v49 = v44;
  v50 = v45;
  if (one-time initialization token for language != -1)
    swift_once();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.language);
  v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    v27 = (_OWORD *)*a4;
    swift_retain();
    specialized AttributedString.firstValue<A>(of:in:)(&v46, v27, (unint64_t *)&v41);
    swift_release();
    v28 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v29 = v41;
      *(_QWORD *)(a5 + 24) = MEMORY[0x1E0DEA968];
      *(_QWORD *)a5 = v29;
      *(_QWORD *)(a5 + 8) = v28;
      return result;
    }
    goto LABEL_27;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_19;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMorphology"));
  v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
LABEL_22:
    v30 = (_OWORD *)*a4;
    swift_retain();
    v31 = &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name;
    v32 = (uint64_t *)&unk_1EDC3E430;
    v33 = &one-time initialization token for name;
    goto LABEL_23;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSAssumedFallbackInflection"));
  v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
      goto LABEL_27;
  }
  v30 = (_OWORD *)*a4;
  swift_retain();
  v31 = &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name;
  v32 = (uint64_t *)&unk_1EDC3E520;
  v33 = &one-time initialization token for name;
LABEL_23:
  specialized AttributedString.firstValue<A>(of:in:)(&v46, v30, v33, v31, v32, (uint64_t)&v41);
  swift_release();
  v34 = *((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v35 = v42;
    v36 = v41;
    v37 = (unint64_t)v41 >> 8;
    v38 = (unint64_t)v41 >> 16;
    v39 = v42 >> 8;
    *(_QWORD *)(a5 + 24) = &type metadata for Morphology;
    *(_BYTE *)a5 = v36;
    *(_BYTE *)(a5 + 1) = v37;
    *(_BYTE *)(a5 + 2) = v38;
    *(_QWORD *)(a5 + 8) = v34;
    *(_BYTE *)(a5 + 16) = v35;
    *(_BYTE *)(a5 + 17) = v39;
    *(_BYTE *)(a5 + 18) = BYTE2(v35);
    *(_BYTE *)(a5 + 19) = BYTE3(v35);
    *(_BYTE *)(a5 + 20) = BYTE4(v35);
    return result;
  }
LABEL_27:
  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48[10];
  char v49[48];
  char v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _OWORD v79[12];
  uint64_t v80;
  void *v81;
  uint64_t v82;

  v6 = a2[2];
  v63 = a2[1];
  v64 = v6;
  v65 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v7 = a1[1];
  v59 = *a1;
  v60 = v7;
  v8 = a1[3];
  v61 = a1[2];
  v62 = v8;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v49);
  outlined release of Locale((uint64_t)v50);
  swift_release();
  v55 = v51;
  v56 = v52;
  v57 = v53;
  v58 = v54;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v66);
  v79[10] = v76;
  v79[11] = v77;
  v79[7] = v73;
  v79[9] = v75;
  v79[8] = v74;
  v79[2] = v68;
  v79[3] = v69;
  v79[5] = v71;
  v79[6] = v72;
  v79[4] = v70;
  v80 = v78;
  v81 = &outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:);
  v82 = MEMORY[0x1E0DEE9D8];
  v9 = *((_QWORD *)&v74 + 1);
  v10 = *((_QWORD *)&v74 + 1) >> 10;
  v79[0] = v66;
  v79[1] = v67;
  v27 = *((_QWORD *)&v76 + 1) >> 10;
  if (*((_QWORD *)&v74 + 1) >> 10 == *((_QWORD *)&v76 + 1) >> 10)
  {
LABEL_11:
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
LABEL_12:
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    v24 = a3;
    v11 = v76;
    v12 = *((_QWORD *)&v75 + 1);
    v13 = v75;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v79);
    while (1)
    {
      v45 = v76;
      v46 = v77;
      v47 = v78;
      v41 = v72;
      v42 = v73;
      v43 = v74;
      v44 = v75;
      v37 = v68;
      v38 = v69;
      v39 = v70;
      v40 = v71;
      v35 = v66;
      v36 = v67;
      v31 = v9;
      v32 = v13;
      v33 = v12;
      v34 = v11;
      AttributedString.Runs.subscript.getter(&v31, v48);
      v14 = v48[0];
      v45 = v76;
      v46 = v77;
      v47 = v78;
      v41 = v72;
      v42 = v73;
      v43 = v74;
      v44 = v75;
      v37 = v68;
      v38 = v69;
      v39 = v70;
      v40 = v71;
      v35 = v66;
      v36 = v67;
      v15 = v11;
      v16 = v9;
      v31 = v9;
      v32 = v13;
      v25 = v13;
      v26 = v12;
      v33 = v12;
      v34 = v15;
      v17 = v15;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v79);
      outlined retain of AttributedString.Runs((uint64_t)&v66);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v31, (uint64_t)&outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:), MEMORY[0x1E0DEE9D8], v48);
      outlined release of AttributedString.Runs((uint64_t)&v66);
      result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
      v9 = v48[0];
      v19 = (unint64_t)v48[0] >> 10;
      if ((unint64_t)v48[0] >> 10 < v10)
      {
        __break(1u);
        return result;
      }
      v28 = v48[1];
      v29 = v48[2];
      v30 = v48[3];
      if (*(_QWORD *)(v14 + 16)
        && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x6175676E614C534ELL, 0xEA00000000006567),
            (v21 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v14 + 56) + 72 * v20, (uint64_t)&v35);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v35, (uint64_t)v48);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v35);
        v22 = v31;
        v23 = v32;
      }
      else
      {
        v23 = 0;
        v22 = 0;
        v31 = 0;
        v32 = 0;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23)
        break;
      v10 = v19;
      v13 = v28;
      v12 = v29;
      v11 = v30;
      if (v19 == v27)
      {
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
        a3 = v24;
        goto LABEL_11;
      }
    }
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
    a3 = v24;
    if (v23 == 1)
      goto LABEL_12;
    *v24 = v22;
    v24[1] = v23;
    v24[2] = v16;
    v24[3] = v25;
    v24[4] = v26;
    v24[5] = v17;
    v24[6] = v9;
    v24[7] = v28;
    v24[8] = v29;
    v24[9] = v30;
  }
  return result;
}

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t result;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v76;
  _BYTE v77[72];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _OWORD *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[10];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _QWORD v137[25];
  char v138[48];
  char v139[48];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[8];
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v8 = v155;
  v9 = v137;
  v10 = a2[2];
  v152 = a2[1];
  v153 = v10;
  v154 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v11 = a1[1];
  v148 = *a1;
  v149 = v11;
  v12 = a1[3];
  v150 = a1[2];
  v151 = v12;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v138);
  outlined release of Locale((uint64_t)v139);
  swift_release();
  v144 = v140;
  v145 = v141;
  v146 = v142;
  v147 = v143;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, v137);
  v13 = v137[17];
  v14 = v137[18];
  v15 = v137[19];
  v16 = v137[20];
  v17 = v137[21];
  v18 = (_BYTE *)v137[22];
  v19 = (_BYTE *)v137[23];
  v20 = v137[24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18205C850;
  v67 = v21;
  if (*a3 != -1)
  {
LABEL_22:
    swift_once();
    v21 = v67;
  }
  v22 = *a5;
  *(_QWORD *)(v21 + 32) = *a4;
  *(_QWORD *)(v21 + 40) = v22;
  v23 = v9[7];
  v155[6] = v9[6];
  v155[7] = v23;
  v24 = v9[3];
  v155[2] = v9[2];
  v155[3] = v24;
  v25 = v9[4];
  v155[5] = v9[5];
  v155[4] = v25;
  v26 = *v9;
  v155[1] = v9[1];
  v155[0] = v26;
  v156 = v137[16];
  v157 = v13;
  v158 = v14;
  v159 = v15;
  v160 = v16;
  v161 = v17;
  v162 = v18;
  v72 = v19;
  v163 = v19;
  v66 = v20;
  v164 = v20;
  v165 = v21;
  v166 = MEMORY[0x1E0DEE9D8];
  v27 = v26;
  v28 = *(_OWORD *)((char *)v8 + 88);
  v133 = *(_OWORD *)((char *)v8 + 72);
  v134 = v28;
  v29 = *(_OWORD *)((char *)v8 + 120);
  v135 = *(_OWORD *)((char *)v8 + 104);
  v136 = v29;
  v30 = *(_OWORD *)((char *)v8 + 24);
  v129 = *(_OWORD *)((char *)v8 + 8);
  v130 = v30;
  v31 = *(_OWORD *)((char *)v8 + 56);
  v71 = v17;
  v131 = *(_OWORD *)((char *)v8 + 40);
  v132 = v31;
  v64 = (_OWORD *)(v17 >> 10);
  v65 = v27;
  v32 = v16;
  v33 = v15;
  v8 = v18;
  if (v13 >> 10 == v17 >> 10)
  {
    swift_bridgeObjectRetain();
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v155);
LABEL_17:
    v113 = v133;
    v114 = v134;
    v115 = v135;
    v116 = v136;
    v109 = v129;
    v110 = v130;
    v111 = v131;
    v112 = v132;
    v108 = v65;
    v117 = v13;
    v118 = v14;
    v119 = v33;
    v120 = v32;
    v121 = v71;
    v122 = v8;
    v123 = v72;
    v124 = v66;
    v125 = v67;
    v126 = MEMORY[0x1E0DEE9D8];
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v108);
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v155);
LABEL_18:
    *(_QWORD *)(a6 + 80) = 0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)a6 = 0u;
    return result;
  }
  v34 = (_OWORD *)(v13 >> 10);
  swift_bridgeObjectRetain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v155);
  v18 = &v77[8];
  v63 = v8;
  v35 = v14;
  v36 = v33;
  v37 = v16;
  v38 = v13;
  v61 = v13;
  v62 = v16;
  v60 = v33;
  while (1)
  {
    v73 = v38;
    v74 = v37;
    v76 = v36;
    v69 = (unint64_t)v34;
    v104 = v133;
    v105 = v134;
    v106 = v135;
    v107 = v136;
    v100 = v129;
    v101 = v130;
    v102 = v131;
    v103 = v132;
    v78 = v133;
    v79 = v134;
    v80 = v135;
    v81 = v136;
    *(_OWORD *)&v77[8] = v129;
    *(_OWORD *)&v77[24] = v130;
    *(_OWORD *)&v77[40] = v131;
    *(_OWORD *)&v77[56] = v132;
    v17 = v65;
    *(_QWORD *)v77 = v65;
    v82 = v13;
    v83 = v14;
    v84 = v33;
    v85 = v32;
    v86 = v71;
    v87 = v8;
    v39 = v14;
    v40 = v33;
    v88 = v72;
    v89 = v66;
    v92 = v38;
    v93 = v35;
    v94 = v36;
    v95 = v37;
    AttributedString.Runs.subscript.getter(&v92, &v96);
    v113 = v133;
    v114 = v134;
    v115 = v135;
    v116 = v136;
    v109 = v129;
    v110 = v130;
    v111 = v131;
    v112 = v132;
    v78 = v133;
    v79 = v134;
    v80 = v135;
    v81 = v136;
    *(_OWORD *)&v77[8] = v129;
    *(_OWORD *)&v77[24] = v130;
    v20 = v96;
    v108 = v65;
    v117 = v13;
    v118 = v39;
    v119 = v40;
    v120 = v32;
    v121 = v71;
    v122 = v63;
    v123 = v72;
    v124 = v66;
    v41 = v35;
    v15 = v67;
    v125 = v67;
    v126 = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)&v77[40] = v131;
    *(_OWORD *)&v77[56] = v132;
    *(_QWORD *)v77 = v65;
    v82 = v13;
    v83 = v39;
    v13 = v39;
    v84 = v40;
    v85 = v32;
    v86 = v71;
    v87 = v63;
    v8 = v63;
    v88 = v72;
    v89 = v66;
    v92 = v73;
    v93 = v41;
    v14 = v41;
    v94 = v76;
    v95 = v74;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v108);
    swift_retain();
    v19 = v77;
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v92, v67, MEMORY[0x1E0DEE9D8], (uint64_t *)&v96);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v108);
    v16 = v96;
    v9 = (_OWORD *)(v96 >> 10);
    if (v96 >> 10 < v69)
    {
      __break(1u);
      goto LABEL_22;
    }
    v35 = v97;
    v70 = v98;
    v42 = v99;
    if (*(_QWORD *)(v20 + 16))
    {
      v68 = v97;
      v43 = v99;
      v44 = v20;
      v45 = *a5;
      v46 = *a4;
      swift_bridgeObjectRetain();
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
      if ((v48 & 1) != 0)
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v44 + 56) + 72 * v47, (uint64_t)v77);
      else
        memset(v77, 0, sizeof(v77));
      swift_bridgeObjectRelease();
      v42 = v43;
      v35 = v68;
      if (*(_QWORD *)&v77[24])
      {
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v77, (uint64_t)&v96);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v77);
        goto LABEL_14;
      }
    }
    else
    {
      memset(v77, 0, sizeof(v77));
    }
    outlined destroy of Any?((uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    memset(v128, 0, 13);
    v127 = 0;
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128[2] = v73;
    v128[3] = v14;
    v128[4] = v76;
    v128[5] = v74;
    v128[6] = v16;
    v128[7] = v35;
    v36 = v70;
    v128[8] = v70;
    v128[9] = v42;
    v49 = v128[0];
    v50 = v14;
    v14 = v13;
    if (v128[0])
      break;
    v37 = v42;
    v38 = v16;
    v34 = v9;
    v51 = v9 == v64;
    v13 = v61;
    v32 = v62;
    v33 = v60;
    if (v51)
      goto LABEL_17;
  }
  v53 = v42;
  v78 = v104;
  v79 = v105;
  v80 = v106;
  v81 = v107;
  *(_OWORD *)&v77[8] = v100;
  *(_OWORD *)&v77[24] = v101;
  *(_OWORD *)&v77[40] = v102;
  v54 = BYTE4(v128[1]);
  v55 = LODWORD(v128[1]);
  v56 = v127;
  *(_QWORD *)v77 = v65;
  *(_OWORD *)&v77[56] = v103;
  v82 = v61;
  v83 = v14;
  v84 = v60;
  v85 = v62;
  v86 = v71;
  v87 = v63;
  v88 = v72;
  v89 = v66;
  v90 = v67;
  v91 = MEMORY[0x1E0DEE9D8];
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v77);
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v155);
  if (v49 == 1)
    goto LABEL_18;
  *(_WORD *)a6 = v56;
  *(_BYTE *)(a6 + 2) = BYTE2(v56);
  *(_QWORD *)(a6 + 8) = v49;
  *(_WORD *)(a6 + 16) = v55;
  *(_BYTE *)(a6 + 18) = BYTE2(v55);
  *(_BYTE *)(a6 + 19) = BYTE3(v55);
  *(_BYTE *)(a6 + 20) = (v55 | (unint64_t)(v54 << 32)) >> 32;
  *(_QWORD *)(a6 + 24) = v73;
  *(_QWORD *)(a6 + 32) = v50;
  *(_QWORD *)(a6 + 40) = v76;
  *(_QWORD *)(a6 + 48) = v74;
  *(_QWORD *)(a6 + 56) = v16;
  *(_QWORD *)(a6 + 64) = v35;
  *(_QWORD *)(a6 + 72) = v70;
  *(_QWORD *)(a6 + 80) = v53;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v2)(_QWORD *__return_ptr);
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD v12[3];
  uint64_t v13;

  v2 = *(void (**)(_QWORD *__return_ptr))(a1 + 32);
  v3 = a2;
  v2(v12);

  v4 = v13;
  if (!v13)
    return 0;
  v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
  v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10;
}

uint64_t closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[48];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v22 = *a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v22, (uint64_t *)&v16);
  v6 = v18;
  if (v18 == 2)
    return 0;
  v9 = v20;
  v8 = v21;
  v10 = v17;
  v13 = v16;
  v14 = v19;
  v11 = *a3;
  v12 = *(_OWORD *)(*a3 + 32);
  v28 = *(_OWORD *)(*a3 + 16);
  v29 = v12;
  v30 = *(_OWORD *)(v11 + 48);
  BigString.unicodeScalars.getter();
  v22 = v13;
  v23 = v10;
  v24 = v6;
  v25 = v14;
  v26 = v9;
  v27 = v8;
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v15);
  return MEMORY[0x186DA46DC](&v16);
}

id thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  (*(void (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
  v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v3;
}

void closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v12[4] = partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  v12[5] = v10;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v12[3] = &block_descriptor_98;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a5, sel_enumerateSubstringsInRange_options_usingBlock_, a1, a2, 3, v11);
  _Block_release(v11);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1E0F4B108, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v10;
  uint64_t v11;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  v9(a2, a3, a6, v11);
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7;

  if (a2)
    a2 = String._bridgeToObjectiveCImpl()();
  v7 = (id)a2;
  (*(void (**)(uint64_t))(a6 + 16))(a6);

}

uint64_t closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, void *a5)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  uint64_t v98;
  Swift::String v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _OWORD *v112;
  unint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 *v124;
  uint64_t v125;
  _OWORD v126[3];
  _OWORD v127[3];
  _OWORD v128[3];
  _OWORD v129[3];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD v146[4];
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[40];
  _BYTE v158[56];

  v6 = (unint64_t)a4;
  v147 = *a4;
  swift_retain();
  result = Range<>.init(_:in:)(a1, a2, &v147, (uint64_t *)&v136);
  v11 = *((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1) == 2)
    return result;
  v12 = v136;
  v146[0] = v136;
  *((_QWORD *)&v117 + 1) = *((_QWORD *)&v136 + 1);
  v119 = v137;
  v146[1] = v137;
  v113 = v138;
  v146[2] = v138;
  v109 = *((_QWORD *)&v138 + 1);
  v110 = v139;
  v146[3] = v139;
  outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
  v106 = a2;
  v107 = a5;
  v108 = a1;
  v115 = v11;
  v116 = (_QWORD *)v6;
  *(_QWORD *)&v117 = v12;
  if ((swift_dynamicCast() & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(_QWORD **)v6;
      v14 = *(_OWORD *)(*(_QWORD *)v6 + 16);
      v15 = *(_OWORD *)(*(_QWORD *)v6 + 48);
      v134 = *(_OWORD *)(*(_QWORD *)v6 + 32);
      v135 = v15;
      v133 = v14;
      v16 = v13[8];
      v17 = v13[9];
      v18 = v13[10];
      v19 = v13[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v133);
      swift_unknownObjectRetain();
      *(_QWORD *)v6 = AttributedString.Guts.init(string:runs:)(&v133, v16, v17, v18, v19);
      swift_release();
    }
    v20 = *(_QWORD *)v6;
    v21 = *(_OWORD *)(*(_QWORD *)v6 + 32);
    v130 = *(_OWORD *)(*(_QWORD *)v6 + 16);
    v131 = v21;
    v132 = *(_OWORD *)(v20 + 48);
    v22 = BigString.startIndex.getter();
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v6 = BigString.endIndex.getter();
    *(_QWORD *)&v136 = v20;
    *((_QWORD *)&v136 + 1) = v22;
    *(_QWORD *)&v137 = v24;
    *((_QWORD *)&v137 + 1) = v26;
    *(_QWORD *)&v138 = v28;
    *((_QWORD *)&v138 + 1) = v6;
    *(_QWORD *)&v139 = v29;
    *((_QWORD *)&v139 + 1) = v30;
    v140 = v31;
    v32 = one-time initialization token for currentIdentity;
    swift_retain();
    if (v32 != -1)
      swift_once();
    v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v34);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v33, &v147);
    os_unfair_lock_unlock(v34);
    swift_release();
    v35 = v147;
    v141 = v147;
    BigString.init()();
    v147 = 0;
    MEMORY[0x186DA9E90](&v147, 8);
    v36 = v147;
    v100 = type metadata accessor for AttributedString.Guts();
    v37 = swift_allocObject();
    a3 = v126;
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v102 = v35;
      v38 = v126[1];
      *(_OWORD *)(v37 + 16) = v126[0];
      *(_OWORD *)(v37 + 32) = v38;
      *(_OWORD *)(v37 + 48) = v126[2];
      *(_QWORD *)(v37 + 64) = 0;
      *(_QWORD *)(v37 + 72) = 0;
      *(_QWORD *)(v37 + 80) = 0;
      *(_QWORD *)(v37 + 88) = v36;
      *v116 = v37;
      swift_release();
      if ((unint64_t)v117 >> 10 >= v22 >> 10 && v6 >> 10 >= v113 >> 10)
      {
        v39 = *(_OWORD *)(v20 + 16);
        v40 = *(_OWORD *)(v20 + 48);
        v129[1] = *(_OWORD *)(v20 + 32);
        v129[2] = v40;
        v129[0] = v39;
        v41 = *(_OWORD *)(v20 + 16);
        v155 = *(_OWORD *)(v20 + 32);
        v156 = v40;
        v154 = v41;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)v157);
        outlined retain of Locale((uint64_t)v157);
        v42 = MEMORY[0x186DA3EC0](v117, *((_QWORD *)&v117 + 1), v119, v115);
        v118 = v43;
        v120 = v42;
        v45 = v44;
        v47 = v46;
        outlined release of Locale((uint64_t)v129);
        v48 = *(_OWORD *)(v20 + 16);
        v49 = *(_OWORD *)(v20 + 48);
        v128[1] = *(_OWORD *)(v20 + 32);
        v128[2] = v49;
        v128[0] = v48;
        v50 = *(_OWORD *)(v20 + 16);
        v122 = *(_OWORD *)(v20 + 32);
        v123 = v49;
        v121 = v50;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v121, (uint64_t)v158);
        outlined retain of Locale((uint64_t)v158);
        v51 = MEMORY[0x186DA3EC0](v113, v109, v110, *((_QWORD *)&v110 + 1));
        v53 = v52;
        v55 = v54;
        v57 = v56;
        outlined release of Locale((uint64_t)v128);
        v147 = v120;
        v148 = v45;
        v149 = v118;
        v150 = v47;
        v151 = v51;
        v152 = v53;
        *(_QWORD *)&v153 = v55;
        *((_QWORD *)&v153 + 1) = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v58 = *(_OWORD *)(v20 + 32);
          v127[0] = *(_OWORD *)(v20 + 16);
          v127[1] = v58;
          v127[2] = *(_OWORD *)(v20 + 48);
          v59 = *(_QWORD *)(v20 + 64);
          v60 = *(_QWORD *)(v20 + 72);
          v61 = *(_QWORD *)(v20 + 80);
          v62 = *(_QWORD *)(v20 + 88);
          swift_allocObject();
          outlined retain of Locale((uint64_t)v127);
          swift_unknownObjectRetain();
          *(_QWORD *)&v136 = AttributedString.Guts.init(string:runs:)(v127, v59, v60, v61, v62);
          swift_release();
        }
        v63 = AttributedString.Guts.attributesToUseForTextReplacement(in:)((unint64_t *)&v147);
        v65 = v64;
        MEMORY[0x1E0C80A78](v63);
        AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(&v147, v63, v65, (void (*)(__int128 *, _QWORD *))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v141 == v102)
        {
          *v116 = v136;
          swift_release();
          v66 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          objc_msgSend(v107, sel_replaceCharactersInRange_withString_, v108, v106, v66, v100);
          return swift_unknownObjectRelease();
        }
        goto LABEL_30;
      }
      goto LABEL_26;
    }
    __break(1u);
  }
  else
  {
    outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_29:
      outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
      v147 = 0;
      v148 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v147 = 0xD00000000000001DLL;
      v148 = 0x800000018230F560;
      __swift_project_boxed_opaque_existential_1(&v136, *((uint64_t *)&v137 + 1));
      swift_getDynamicType();
      v99._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
LABEL_30:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v37 = v147;
    v147 = v12;
    v148 = *((_QWORD *)&v117 + 1);
    v149 = v119;
    v150 = v11;
    v151 = v113;
    v152 = v109;
    v153 = v110;
    swift_retain();
    v67 = AttributedString.Guts.getUniformValues(in:)(&v147);
    v69 = v68;
    swift_release();
    *(_QWORD *)&v128[0] = v67;
    *((_QWORD *)&v128[0] + 1) = v69;
    if (one-time initialization token for name == -1)
      goto LABEL_16;
  }
  swift_once();
LABEL_16:
  v70 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  v71 = qword_1EDC3E4D8;
  v140 = 0;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v136, v70, v71);
  swift_bridgeObjectRelease();
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v146, v37);
  v114 = *(_OWORD **)v6;
  v72 = *(_OWORD *)(v37 + 16);
  v73 = *(_OWORD *)(v37 + 48);
  v155 = *(_OWORD *)(v37 + 32);
  v156 = v73;
  v154 = v72;
  v104 = *(_OWORD *)(v37 + 32);
  v105 = *(_OWORD *)(v37 + 16);
  v101 = *(_QWORD *)(v37 + 56);
  v103 = *(_QWORD *)(v37 + 48);
  v74 = BigString.startIndex.getter();
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v81 = BigString.endIndex.getter();
  v136 = v105;
  v137 = v104;
  *(_QWORD *)&v138 = v103;
  *((_QWORD *)&v138 + 1) = v101;
  *(_QWORD *)&v139 = v74;
  *((_QWORD *)&v139 + 1) = v76;
  v140 = v78;
  v141 = v80;
  v142 = v81;
  v143 = v82;
  v144 = v83;
  v145 = v84;
  swift_retain();
  swift_retain();
  outlined retain of Locale((uint64_t)&v154);
  BigSubstring.distance(from:to:)();
  outlined release of Locale((uint64_t)&v154);
  v112 = (_OWORD *)v37;
  swift_release();
  v85 = v114[2];
  v133 = v114[1];
  v134 = v85;
  v135 = v114[3];
  v86 = BigString.startIndex.getter();
  a3 = &v133;
  v87 = BigString.endIndex.getter();
  v88 = (unint64_t)v117 >> 10;
  v89 = v86 >> 10;
  if ((unint64_t)v117 >> 10 < v89 || (v90 = v87 >> 10, v87 >> 10 < v88))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  outlined retain of Locale((uint64_t)&v133);
  v91 = BigString.index(_:offsetBy:)();
  v93 = v92;
  a3 = v94;
  v111 = v95;
  outlined release of Locale((uint64_t)&v133);
  swift_release_n();
  v96 = v91 >> 10;
  if (v91 >> 10 < v89 || v90 < v96)
    goto LABEL_27;
  if (v96 < v88)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v121 = v117;
  *(_QWORD *)&v122 = v119;
  *((_QWORD *)&v122 + 1) = v115;
  *(_QWORD *)&v123 = v91;
  *((_QWORD *)&v123 + 1) = v93;
  v124 = a3;
  v125 = v111;
  specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)(*(uint64_t *)&v128[0], &v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v97 = v112[2];
  v130 = v112[1];
  v131 = v97;
  v132 = v112[3];
  v122 = v97;
  v123 = v132;
  v121 = v130;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v121, (uint64_t)v129);
  outlined retain of Locale((uint64_t)v129);
  MEMORY[0x186DA46F4](&v130);
  v98 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_replaceCharactersInRange_withString_, v108, v106, v98);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, _QWORD *);
  _QWORD v9[4];

  v7 = *(void (**)(uint64_t, uint64_t, _QWORD *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a4;
  swift_unknownObjectRetain();
  v7(a2, a3, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, id, _QWORD *);
  id v10;
  _QWORD v12[4];

  v9 = *(void (**)(uint64_t, uint64_t, id, _QWORD *))(a1 + 32);
  v12[3] = swift_getObjectType();
  v12[0] = a5;
  v10 = a4;
  swift_unknownObjectRetain();
  v9(a2, a3, v10, v12);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

double closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  outlined init with copy of Any(a1, (uint64_t)v8);
  if (swift_dynamicCast())
  {
    v6 = v7;
    v7 = a2;
    *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    swift_retain();
    AttributedString.formatInflectionAlternative(_:replacements:)((uint64_t)&v6);
    swift_release();
    swift_release();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t AttributedString.formatInflectionAlternative(_:replacements:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  os_unfair_lock_s *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  BOOL v151;
  __int128 v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  id v214;
  unint64_t v215;
  unint64_t v216;
  id v217;
  void *v218;
  id v219;
  id v220;
  uint64_t v221;
  id v222;
  void *v223;
  uint64_t v224;
  id v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _OWORD *v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  os_unfair_lock_s *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  __int128 v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __int128 v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  __int128 v327;
  __int128 v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  __int128 v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  os_unfair_lock_s *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __int128 v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  __int128 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  __int128 v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t result;
  __int128 v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  __int128 v444;
  __int128 v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  char v458;
  uint64_t v459;
  unint64_t v460;
  __int128 v461;
  unint64_t v462;
  __int128 v463;
  unint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  _OWORD *v482;
  _QWORD *v483;
  unint64_t v484;
  _OWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  __int128 v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  _OWORD *v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  __int128 v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  __int128 v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  __int128 *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  _BYTE v542[120];
  __int128 v543;
  uint64_t v544;
  _BYTE v545[72];
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  _QWORD v551[10];
  uint64_t v552;
  _OWORD v553[7];
  _OWORD v554[7];
  uint64_t v555;
  _OWORD v556[6];
  uint64_t v557;
  _OWORD v558[7];
  _OWORD v559[7];
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  _OWORD v567[7];
  uint64_t v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  _OWORD v576[7];
  uint64_t v577;
  uint64_t v578[6];
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  uint64_t v584;
  uint64_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  uint64_t v591;
  _OWORD v592[6];
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  uint64_t v604;
  uint64_t v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  _OWORD v633[3];
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  _OWORD v645[3];
  unint64_t v646[8];
  _OWORD v647[3];
  _OWORD v648[2];
  __int128 v649;
  _OWORD v650[2];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  _OWORD v655[3];
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  _OWORD v665[3];
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  _OWORD v680[3];
  unint64_t v681[8];
  _OWORD v682[3];
  _OWORD v683[2];
  __int128 v684;
  _OWORD v685[2];
  __int128 v686;
  _OWORD v687[2];
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  _OWORD v692[3];
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  _OWORD v710[2];
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  _QWORD v726[8];
  _OWORD v727[7];
  _OWORD v728[3];
  _OWORD v729[2];
  __int128 v730;
  _OWORD v731[2];
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  _OWORD v736[3];
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  uint64_t v755;
  uint64_t v756;
  __int128 v757;
  __int128 v758;
  _OWORD v759[3];
  uint64_t v760;
  __int128 v761;
  __int128 v762;
  uint64_t v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  _OWORD v768[3];
  _OWORD v769[3];
  _OWORD v770[3];
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  _OWORD v779[9];
  _OWORD v780[3];
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  _OWORD v792[9];
  _OWORD v793[3];
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808[3];
  _BYTE v809[40];
  __int128 v810[3];
  _BYTE v811[40];
  __int128 v812[3];
  _BYTE v813[40];
  __int128 v814[3];
  _BYTE v815[40];
  __int128 v816[3];
  _BYTE v817[40];
  __int128 v818[3];
  _BYTE v819[40];
  __int128 v820[3];
  _BYTE v821[40];
  __int128 v822[3];
  _BYTE v823[40];
  __int128 v824[3];
  _BYTE v825[40];
  __int128 v826[3];
  _BYTE v827[40];
  __int128 v828[3];
  _BYTE v829[40];
  __int128 v830[3];
  _BYTE v831[56];

  MEMORY[0x1E0C80A78](a1);
  v483 = v3;
  v484 = v2;
  v5 = *(_OWORD **)v4;
  v485 = (_OWORD *)*v1;
  v6 = *(_OWORD *)(*(_QWORD *)v4 + 16);
  v7 = *(_OWORD *)(*(_QWORD *)v4 + 48);
  v806 = *(_OWORD *)(*(_QWORD *)v4 + 32);
  v807 = v7;
  v805 = v6;
  v8 = BigString.startIndex.getter();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = v5[2];
  v802 = v5[1];
  v803 = v15;
  v804 = v5[3];
  swift_retain();
  BigString.startIndex.getter();
  v16 = BigString.endIndex.getter();
  if (v16 >> 10 < v8 >> 10)
    goto LABEL_157;
  v20 = v5 + 1;
  v482 = v485 + 1;
  v479 = v484 + 32;
  v481 = v484 & 0xC000000000000001;
  while (1)
  {
    v794 = v8;
    v795 = v10;
    v796 = v12;
    v797 = v14;
    v798 = v16;
    v799 = v17;
    v800 = v18;
    v801 = v19;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v552);
    outlined release of Locale((uint64_t)v553);
    v626 = v553[3];
    v627 = v553[4];
    v628 = v553[5];
    v629 = v553[6];
    v21 = *v20;
    v530 = v20;
    v22 = v20[2];
    v793[1] = v20[1];
    v793[2] = v22;
    v793[0] = v21;
    swift_retain();
    outlined retain of Locale((uint64_t)v793);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v793);
    outlined release of Locale((uint64_t)v554);
    *(_OWORD *)&v545[8] = v554[3];
    *(_OWORD *)&v545[24] = v554[4];
    *(_OWORD *)&v545[40] = v554[5];
    *(_OWORD *)&v545[56] = v554[6];
    *(_QWORD *)v545 = v5;
    *(_QWORD *)&v546 = 0;
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    v23 = Substring.init<A>(_:)();
    v25 = v24;
    v27 = v26;
    v29 = v28;
    *(_QWORD *)v545 = 123;
    *(_QWORD *)&v545[8] = 0xE100000000000000;
    v30 = Substring.init<A>(_:)();
    if ((v23 ^ v25) < 0x4000 || !((v30 ^ v31) >> 14))
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_108:
      swift_bridgeObjectRelease();
      v313 = v530[1];
      v677 = *v530;
      v678 = v313;
      v679 = v530[2];
      v314 = BigString.startIndex.getter();
      v316 = v315;
      v318 = v317;
      v320 = v319;
      while (1)
      {
        v321 = v5[2];
        v674 = v5[1];
        v675 = v321;
        v676 = v5[3];
        BigString.startIndex.getter();
        v322 = BigString.endIndex.getter();
        if (v314 >> 10 > v322 >> 10)
          goto LABEL_158;
        v326 = v5 + 1;
        v666 = v314;
        v667 = v316;
        v668 = v318;
        v534 = v320;
        v669 = v320;
        v670 = v322;
        v671 = v323;
        v672 = v324;
        v673 = v325;
        BigString.unicodeScalars.getter();
        swift_retain();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v577);
        outlined release of Locale((uint64_t)v578);
        v611 = v580;
        v613 = v582;
        v612 = v581;
        v610 = v579;
        v327 = v5[1];
        v328 = v5[2];
        v665[2] = v5[3];
        v665[1] = v328;
        v665[0] = v327;
        swift_retain();
        outlined retain of Locale((uint64_t)v665);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v665);
        outlined release of Locale((uint64_t)&v583);
        v540 = v5;
        *(_QWORD *)v542 = v5;
        *(_OWORD *)&v542[8] = v587;
        *(_OWORD *)&v542[24] = v588;
        *(_OWORD *)&v542[40] = v589;
        *(_OWORD *)&v542[56] = v590;
        *(_QWORD *)&v542[72] = 0;
        v329 = Substring.init<A>(_:)();
        v331 = v330;
        v333 = v332;
        v335 = v334;
        *(_QWORD *)v542 = 32125;
        *(_QWORD *)&v542[8] = 0xE200000000000000;
        v336 = Substring.init<A>(_:)();
        v520 = v316;
        if (!((v329 ^ v331) >> 14) || !((v336 ^ v337) >> 14))
        {
          v437 = v540;
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_137;
        }
        v508 = v326;
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v336, v337, v338, v339, 0, 0, 0, 0, 0, v329, v331, v333, v335);
        v341 = v340;
        swift_bridgeObjectRelease();
        if ((v341 & 1) != 0)
          break;
        swift_bridgeObjectRetain();
        v342 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        v343 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        v344 = (unint64_t)v610 >> 11;
        if (__OFADD__((unint64_t)v610 >> 11, v342))
          goto LABEL_163;
        v345 = v326[1];
        v662 = *v326;
        v663 = v345;
        v664 = v326[2];
        BigString.utf8.getter();
        BigString.startIndex.getter();
        swift_retain();
        v346 = BigString.UTF8View.index(_:offsetBy:)();
        v528 = v347;
        v513 = v349;
        v521 = v348;
        outlined release of Locale((uint64_t)&v591);
        swift_release();
        if (__OFADD__(v344, v343))
          goto LABEL_164;
        v350 = v326[1];
        v659 = *v326;
        v660 = v350;
        v661 = v326[2];
        BigString.utf8.getter();
        BigString.startIndex.getter();
        v535 = v346;
        swift_retain();
        v351 = BigString.UTF8View.index(_:offsetBy:)();
        v353 = v352;
        v355 = v354;
        v357 = v356;
        outlined release of Locale((uint64_t)v592);
        swift_release_n();
        if (v351 >> 10 < v535 >> 10)
          goto LABEL_165;
        v493 = v351;
        v496 = v351 >> 10;
        v486 = v357;
        v489 = v355;
        v491 = v353;
        v358 = *v326;
        v657 = v326[1];
        v658 = v326[2];
        v656 = v358;
        v360 = v540[2];
        v359 = v540[3];
        v361 = v540[4];
        v362 = v540[7];
        v503 = v540[6];
        v505 = v540[5];
        v510 = v535 >> 10;
        v363 = BigString.startIndex.getter();
        v365 = v364;
        v367 = v366;
        v369 = v368;
        v370 = BigString.endIndex.getter();
        if (v370 >> 10 < v535 >> 10 || v510 < v363 >> 10 || v370 >> 10 < v363 >> 10)
          goto LABEL_166;
        *(_QWORD *)v545 = v360;
        *(_QWORD *)&v545[8] = v359;
        *(_QWORD *)&v545[16] = v361;
        *(_QWORD *)&v545[24] = v505;
        *(_QWORD *)&v545[32] = v503;
        *(_QWORD *)&v545[40] = v362;
        *(_QWORD *)&v545[48] = v363;
        *(_QWORD *)&v545[56] = v365;
        *(_QWORD *)&v545[64] = v367;
        *(_QWORD *)&v546 = v369;
        *((_QWORD *)&v546 + 1) = v370;
        *(_QWORD *)&v547 = v371;
        *((_QWORD *)&v547 + 1) = v372;
        *(_QWORD *)&v548 = v373;
        v826[0] = v656;
        v826[1] = v657;
        v826[2] = v658;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v826, (uint64_t)v827);
        outlined retain of Locale((uint64_t)v827);
        v374 = BigSubstring.distance(from:to:)();
        outlined release of Locale((uint64_t)&v656);
        v375 = v540;
        v506 = v374;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v376 = v508[1];
          v655[0] = *v508;
          v655[1] = v376;
          v655[2] = v508[2];
          v377 = v540[8];
          v378 = v540[9];
          v379 = v540[10];
          v380 = v540[11];
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)v655);
          swift_unknownObjectRetain();
          v381 = AttributedString.Guts.init(string:runs:)(v655, v377, v378, v379, v380);
          swift_release();
          v375 = (_OWORD *)v381;
        }
        v382 = v375[2];
        v652 = v375[1];
        v653 = v382;
        v654 = v375[3];
        v383 = BigString.startIndex.getter();
        v385 = v384;
        v387 = v386;
        v389 = v388;
        v390 = BigString.endIndex.getter();
        *(_QWORD *)v542 = v375;
        *(_QWORD *)&v542[8] = v383;
        *(_QWORD *)&v542[16] = v385;
        *(_QWORD *)&v542[24] = v387;
        *(_QWORD *)&v542[32] = v389;
        *(_QWORD *)&v542[40] = v390;
        *(_QWORD *)&v542[48] = v391;
        *(_QWORD *)&v542[56] = v392;
        *(_QWORD *)&v542[64] = v393;
        v394 = one-time initialization token for currentIdentity;
        swift_retain();
        if (v394 != -1)
          swift_once();
        v395 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        v396 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v396);
        closure #1 in static AttributedString._nextModifyIdentity.getter(v395, &v594);
        os_unfair_lock_unlock(v396);
        swift_release();
        v397 = v594;
        *(_QWORD *)&v542[72] = v594;
        BigString.init()();
        v594 = 0;
        MEMORY[0x186DA9E90](&v594, 8);
        v398 = v594;
        type metadata accessor for AttributedString.Guts();
        v399 = swift_allocObject();
        if ((BigString.isEmpty.getter() & 1) == 0)
          goto LABEL_167;
        v400 = v592[4];
        *(_OWORD *)(v399 + 16) = v592[3];
        *(_OWORD *)(v399 + 32) = v400;
        *(_OWORD *)(v399 + 48) = v592[5];
        *(_QWORD *)(v399 + 64) = 0;
        *(_QWORD *)(v399 + 72) = 0;
        *(_QWORD *)(v399 + 80) = 0;
        *(_QWORD *)(v399 + 88) = v398;
        swift_release();
        if (v510 < v383 >> 10 || v390 >> 10 < v496)
          goto LABEL_168;
        v541 = v397;
        v401 = *(_QWORD *)v542;
        v402 = *(_OWORD *)(*(_QWORD *)v542 + 16);
        v403 = *(_OWORD *)(*(_QWORD *)v542 + 32);
        v651 = *(_OWORD *)(*(_QWORD *)v542 + 48);
        v650[1] = v403;
        v650[0] = v402;
        v404 = *(_OWORD *)(*(_QWORD *)v542 + 16);
        v405 = *(_OWORD *)(*(_QWORD *)v542 + 32);
        v828[2] = v651;
        v828[1] = v405;
        v828[0] = v404;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v828, (uint64_t)v829);
        outlined retain of Locale((uint64_t)v829);
        v536 = MEMORY[0x186DA3EC0](v535, v528, v521, v513);
        v529 = v406;
        v408 = v407;
        v410 = v409;
        outlined release of Locale((uint64_t)v650);
        v411 = *(_OWORD *)(v401 + 16);
        v648[1] = *(_OWORD *)(v401 + 32);
        v649 = *(_OWORD *)(v401 + 48);
        v648[0] = v411;
        v412 = *(_OWORD *)(v401 + 16);
        v413 = *(_OWORD *)(v401 + 32);
        v830[2] = v649;
        v830[1] = v413;
        v830[0] = v412;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v830, (uint64_t)v831);
        outlined retain of Locale((uint64_t)v831);
        v414 = MEMORY[0x186DA3EC0](v493, v491, v489, v486);
        v416 = v415;
        v418 = v417;
        v420 = v419;
        outlined release of Locale((uint64_t)v648);
        v646[0] = v536;
        v646[1] = v529;
        v646[2] = v408;
        v646[3] = v410;
        v646[4] = v414;
        v646[5] = v416;
        v646[6] = v418;
        v646[7] = v420;
        v594 = 125;
        v595 = 0xE100000000000000;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v421 = *(_OWORD *)(v401 + 32);
          v647[0] = *(_OWORD *)(v401 + 16);
          v647[1] = v421;
          v647[2] = *(_OWORD *)(v401 + 48);
          v422 = *(_QWORD *)(v401 + 64);
          v423 = *(_QWORD *)(v401 + 72);
          v424 = *(_QWORD *)(v401 + 80);
          v425 = *(_QWORD *)(v401 + 88);
          swift_allocObject();
          outlined retain of Locale((uint64_t)v647);
          swift_unknownObjectRetain();
          *(_QWORD *)v542 = AttributedString.Guts.init(string:runs:)(v647, v422, v423, v424, v425);
          swift_release();
        }
        LOBYTE(v551[0]) = 1;
        v426 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(v646);
        v428 = v427;
        MEMORY[0x1E0C80A78](v426);
        AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(v646, v426, v428, (void (*)(__int128 *, _QWORD *))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)&v542[72] != v541)
          goto LABEL_198;
        v5 = *(_OWORD **)v542;
        swift_release();
        v429 = v5[2];
        v645[0] = v5[1];
        v645[1] = v429;
        v645[2] = v5[3];
        v430 = BigString.startIndex.getter();
        v431 = BigString.endIndex.getter();
        if (__OFADD__(v506, 1))
          goto LABEL_169;
        v432 = v430 >> 10;
        v433 = v431 >> 10;
        if (v431 >> 10 < v430 >> 10)
          goto LABEL_170;
        swift_retain();
        outlined retain of Locale((uint64_t)v645);
        v314 = BigString.index(_:offsetBy:)();
        v316 = v434;
        v318 = v435;
        v320 = v436;
        outlined release of Locale((uint64_t)v645);
        swift_release();
        if (v314 >> 10 < v432 || v433 < v314 >> 10)
          goto LABEL_171;
      }
      v437 = v540;
      swift_release();
LABEL_137:
      swift_bridgeObjectRelease();
      v439 = v326[1];
      v642 = *v326;
      v643 = v439;
      v644 = v326[2];
      BigString.startIndex.getter();
      v440 = BigString.endIndex.getter();
      if (v314 >> 10 > v440 >> 10)
        goto LABEL_185;
      v634 = v314;
      v635 = v520;
      v636 = v318;
      v637 = v534;
      v638 = v440;
      v639 = v441;
      v640 = v442;
      v641 = v443;
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v593);
      outlined release of Locale((uint64_t)&v594);
      v607 = v601;
      v609 = v603;
      v608 = v602;
      v606 = v600;
      v444 = *v326;
      v445 = v326[1];
      v633[2] = v326[2];
      v633[1] = v445;
      v633[0] = v444;
      swift_retain();
      outlined retain of Locale((uint64_t)v633);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v633);
      outlined release of Locale((uint64_t)v542);
      *(_OWORD *)&v551[1] = *(_OWORD *)&v542[48];
      *(_OWORD *)&v551[3] = *(_OWORD *)&v542[64];
      *(_OWORD *)&v551[5] = *(_OWORD *)&v542[80];
      *(_OWORD *)&v551[7] = *(_OWORD *)&v542[96];
      v551[0] = v437;
      v551[9] = 0;
      v446 = Substring.init<A>(_:)();
      v448 = v447;
      v450 = v449;
      v452 = v451;
      v551[0] = 125;
      v551[1] = 0xE100000000000000;
      v453 = Substring.init<A>(_:)();
      if ((v446 ^ v448) >= 0x4000 && (v453 ^ v454) >> 14)
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v453, v454, v455, v456, 0, 0, 0, 0, 0, v446, v448, v450, v452);
        v458 = v457;
        swift_bridgeObjectRelease();
        if ((v458 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          v459 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          v537 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          v460 = (unint64_t)v606 >> 11;
          if (__OFADD__((unint64_t)v606 >> 11, v459))
            goto LABEL_195;
          v461 = v326[1];
          *(_OWORD *)v551 = *v326;
          *(_OWORD *)&v551[2] = v461;
          *(_OWORD *)&v551[4] = v326[2];
          BigString.utf8.getter();
          BigString.startIndex.getter();
          swift_retain();
          v462 = BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)&v604);
          swift_release();
          if (__OFADD__(v460, v537))
          {
LABEL_196:
            __break(1u);
          }
          else
          {
            v463 = v326[1];
            v630 = *v326;
            v631 = v463;
            v632 = v326[2];
            BigString.utf8.getter();
            BigString.startIndex.getter();
            swift_retain();
            v464 = BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)&v605);
            swift_release_n();
            if (v464 >> 10 >= v462 >> 10)
            {
              *v483 = 0;
              return swift_release();
            }
          }
          __break(1u);
LABEL_198:
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v437 = v540;
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
      *v483 = v437;
      return result;
    }
    v538 = v5;
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v30, v31, v32, v33, 0, 0, 0, 0, 0, v23, v25, v27, v29);
    v35 = v34;
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
    {
      v5 = v538;
      swift_release();
      goto LABEL_108;
    }
    swift_bridgeObjectRetain();
    v36 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    v37 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    v38 = (unint64_t)v626 >> 11;
    if (__OFADD__((unint64_t)v626 >> 11, v36))
      goto LABEL_159;
    v39 = v530[1];
    v792[6] = *v530;
    v792[7] = v39;
    v792[8] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    v40 = BigString.UTF8View.index(_:offsetBy:)();
    v507 = v41;
    v509 = v42;
    v511 = v43;
    outlined release of Locale((uint64_t)&v555);
    swift_release();
    if (__OFADD__(v38, v37))
      goto LABEL_160;
    v44 = v530[1];
    v792[3] = *v530;
    v792[4] = v44;
    v792[5] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    v45 = BigString.UTF8View.index(_:offsetBy:)();
    v47 = v46;
    v49 = v48;
    v51 = v50;
    outlined release of Locale((uint64_t)v556);
    swift_release_n();
    v514 = v45;
    if (v45 >> 10 < v40 >> 10)
      goto LABEL_161;
    v504 = v40 >> 10;
    v52 = v530[1];
    v792[0] = *v530;
    v792[1] = v52;
    v792[2] = v530[2];
    v522 = v45 >> 10;
    v53 = (unint64_t)BigString.endIndex.getter() >> 10;
    if (v45 >> 10 == v53)
    {
      result = swift_release();
      *v483 = 0;
      return result;
    }
    v54 = BigString.startIndex.getter();
    if (v522 >= v53 || v522 < v54 >> 10)
      goto LABEL_162;
    swift_retain();
    outlined retain of Locale((uint64_t)v792);
    v55 = BigString.subscript.getter();
    v57 = v56;
    outlined release of Locale((uint64_t)v792);
    swift_release();
    v502 = v40;
    v492 = v49;
    v494 = v51;
    v490 = v47;
    if (v55 == 123 && v57 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      v59 = *v530;
      v708 = v530[1];
      v709 = v530[2];
      v707 = v59;
      v487 = *(_QWORD *)v530;
      v60 = v538[3];
      v61 = v538[4];
      v62 = v538[5];
      v63 = v538[7];
      v497 = v538[6];
      v64 = BigString.startIndex.getter();
      v66 = v65;
      v68 = v67;
      v70 = v69;
      v71 = BigString.endIndex.getter();
      if (v71 >> 10 < v504 || v504 < v64 >> 10 || v71 >> 10 < v64 >> 10)
        goto LABEL_172;
      v693 = v487;
      v694 = v60;
      v695 = v61;
      v696 = v62;
      v697 = v497;
      v698 = v63;
      v699 = v64;
      v700 = v66;
      v701 = v68;
      v702 = v70;
      v703 = v71;
      v704 = v72;
      v705 = v73;
      v706 = v74;
      v818[0] = v707;
      v818[1] = v708;
      v818[2] = v709;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v818, (uint64_t)v819);
      outlined retain of Locale((uint64_t)v819);
      v75 = BigSubstring.distance(from:to:)();
      outlined release of Locale((uint64_t)&v707);
      v76 = v538;
      v498 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v77 = v530[1];
        v692[0] = *v530;
        v692[1] = v77;
        v692[2] = v530[2];
        v78 = v538[8];
        v79 = v538[9];
        v80 = v538[10];
        v81 = v538[11];
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v692);
        swift_unknownObjectRetain();
        v82 = AttributedString.Guts.init(string:runs:)(v692, v78, v79, v80, v81);
        swift_release();
        v76 = (_OWORD *)v82;
      }
      v83 = v76[2];
      v689 = v76[1];
      v690 = v83;
      v691 = v76[3];
      v84 = BigString.startIndex.getter();
      v86 = v85;
      v88 = v87;
      v90 = v89;
      v91 = BigString.endIndex.getter();
      *(_QWORD *)v545 = v76;
      *(_QWORD *)&v545[8] = v84;
      *(_QWORD *)&v545[16] = v86;
      *(_QWORD *)&v545[24] = v88;
      *(_QWORD *)&v545[32] = v90;
      *(_QWORD *)&v545[40] = v91;
      *(_QWORD *)&v545[48] = v92;
      *(_QWORD *)&v545[56] = v93;
      *(_QWORD *)&v545[64] = v94;
      v95 = one-time initialization token for currentIdentity;
      swift_retain();
      if (v95 != -1)
        swift_once();
      v96 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      v97 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v97);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v96, (uint64_t *)v542);
      os_unfair_lock_unlock(v97);
      swift_release();
      v98 = *(_QWORD *)v542;
      *(_QWORD *)&v546 = *(_QWORD *)v542;
      BigString.init()();
      *(_QWORD *)v542 = 0;
      MEMORY[0x186DA9E90](v542, 8);
      v99 = *(_QWORD *)v542;
      type metadata accessor for AttributedString.Guts();
      v100 = swift_allocObject();
      if ((BigString.isEmpty.getter() & 1) == 0)
        goto LABEL_173;
      v539 = v98;
      v101 = v556[4];
      *(_OWORD *)(v100 + 16) = v556[3];
      *(_OWORD *)(v100 + 32) = v101;
      *(_OWORD *)(v100 + 48) = v556[5];
      *(_QWORD *)(v100 + 64) = 0;
      *(_QWORD *)(v100 + 72) = 0;
      *(_QWORD *)(v100 + 80) = 0;
      *(_QWORD *)(v100 + 88) = v99;
      swift_release();
      v102 = v84 >> 10;
      if (v522 < v84 >> 10)
        goto LABEL_174;
      v103 = v91 >> 10;
      if (v103 < v522)
        goto LABEL_174;
      v104 = v76[1];
      v687[1] = v76[2];
      v688 = v76[3];
      v687[0] = v104;
      v105 = v76[1];
      v106 = v76[2];
      v820[2] = v688;
      v820[1] = v106;
      v820[0] = v105;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v820, (uint64_t)v821);
      outlined retain of Locale((uint64_t)v821);
      v107 = BigString.index(after:)();
      v109 = v108;
      v111 = v110;
      v113 = v112;
      outlined release of Locale((uint64_t)v687);
      if (v504 < v102 || v103 < v107 >> 10)
        goto LABEL_175;
      v114 = *(_QWORD *)v545;
      v115 = *(_OWORD *)(*(_QWORD *)v545 + 16);
      v116 = *(_OWORD *)(*(_QWORD *)v545 + 32);
      v686 = *(_OWORD *)(*(_QWORD *)v545 + 48);
      v685[1] = v116;
      v685[0] = v115;
      v117 = *(_OWORD *)(*(_QWORD *)v545 + 16);
      v118 = *(_OWORD *)(*(_QWORD *)v545 + 32);
      v822[2] = v686;
      v822[1] = v118;
      v822[0] = v117;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v822, (uint64_t)v823);
      outlined retain of Locale((uint64_t)v823);
      v531 = MEMORY[0x186DA3EC0](v502, v507, v511, v509);
      v523 = v119;
      v512 = v121;
      v515 = v120;
      outlined release of Locale((uint64_t)v685);
      v122 = *(_OWORD *)(v114 + 16);
      v683[1] = *(_OWORD *)(v114 + 32);
      v684 = *(_OWORD *)(v114 + 48);
      v683[0] = v122;
      v123 = *(_OWORD *)(v114 + 16);
      v124 = *(_OWORD *)(v114 + 32);
      v824[2] = v684;
      v824[1] = v124;
      v824[0] = v123;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v824, (uint64_t)v825);
      outlined retain of Locale((uint64_t)v825);
      v125 = MEMORY[0x186DA3EC0](v107, v109, v111, v113);
      v127 = v126;
      v129 = v128;
      v131 = v130;
      outlined release of Locale((uint64_t)v683);
      v681[0] = v531;
      v681[1] = v523;
      v681[2] = v515;
      v681[3] = v512;
      v681[4] = v125;
      v681[5] = v127;
      v681[6] = v129;
      v681[7] = v131;
      *(_QWORD *)v542 = 123;
      *(_QWORD *)&v542[8] = 0xE100000000000000;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v132 = *(_OWORD *)(v114 + 32);
        v682[0] = *(_OWORD *)(v114 + 16);
        v682[1] = v132;
        v682[2] = *(_OWORD *)(v114 + 48);
        v133 = *(_QWORD *)(v114 + 64);
        v134 = *(_QWORD *)(v114 + 72);
        v135 = *(_QWORD *)(v114 + 80);
        v136 = *(_QWORD *)(v114 + 88);
        swift_allocObject();
        outlined retain of Locale((uint64_t)v682);
        swift_unknownObjectRetain();
        *(_QWORD *)v545 = AttributedString.Guts.init(string:runs:)(v682, v133, v134, v135, v136);
        swift_release();
      }
      LOBYTE(v594) = 1;
      v137 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(v681);
      v139 = v138;
      MEMORY[0x1E0C80A78](v137);
      AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(v681, v137, v139, (void (*)(__int128 *, _QWORD *))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((_QWORD)v546 != v539)
        goto LABEL_198;
      v5 = *(_OWORD **)v545;
      swift_release();
      v140 = v5[2];
      v680[0] = v5[1];
      v680[1] = v140;
      v680[2] = v5[3];
      v141 = BigString.startIndex.getter();
      v142 = BigString.endIndex.getter();
      if (__OFADD__(v498, 1))
        goto LABEL_176;
      v143 = v141 >> 10;
      v144 = v142 >> 10;
      if (v142 >> 10 < v141 >> 10)
        goto LABEL_177;
      swift_retain();
      outlined retain of Locale((uint64_t)v680);
      v145 = BigString.index(_:offsetBy:)();
      v532 = v146;
      v12 = v147;
      v14 = v148;
      outlined release of Locale((uint64_t)v680);
      swift_release();
      v149 = v145 >> 10;
      if (v145 >> 10 < v143 || v144 < v149)
        goto LABEL_178;
      v8 = v145;
      goto LABEL_36;
    }
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v58 & 1) != 0)
      goto LABEL_16;
    v152 = v530[1];
    v789 = *v530;
    v790 = v152;
    v791 = v530[2];
    BigString.startIndex.getter();
    v153 = BigString.endIndex.getter();
    if (v522 > v153 >> 10)
      goto LABEL_179;
    v781 = v514;
    v782 = v47;
    v783 = v49;
    v784 = v51;
    v785 = v153;
    v786 = v154;
    v787 = v155;
    v788 = v156;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v557);
    outlined release of Locale((uint64_t)v558);
    v622 = v558[3];
    v623 = v558[4];
    v624 = v558[5];
    v625 = v558[6];
    v157 = *v530;
    v158 = v530[2];
    v780[1] = v530[1];
    v780[2] = v158;
    v780[0] = v157;
    swift_retain();
    outlined retain of Locale((uint64_t)v780);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v780);
    outlined release of Locale((uint64_t)v559);
    *(_OWORD *)&v545[8] = v559[3];
    *(_OWORD *)&v545[24] = v559[4];
    *(_OWORD *)&v545[40] = v559[5];
    *(_OWORD *)&v545[56] = v559[6];
    *(_QWORD *)v545 = v538;
    *(_QWORD *)&v546 = 0;
    v159 = Substring.init<A>(_:)();
    v161 = v160;
    v163 = v162;
    v165 = v164;
    *(_QWORD *)v545 = 125;
    *(_QWORD *)&v545[8] = 0xE100000000000000;
    v166 = Substring.init<A>(_:)();
    if ((v159 ^ v161) < 0x4000 || !((v166 ^ v167) >> 14))
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_150:
      swift_bridgeObjectRelease();
      goto LABEL_151;
    }
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v166, v167, v168, v169, 0, 0, 0, 0, 0, v159, v161, v163, v165);
    v171 = v170;
    swift_bridgeObjectRelease();
    if ((v171 & 1) != 0)
    {
LABEL_149:
      swift_release();
      goto LABEL_150;
    }
    swift_bridgeObjectRetain();
    v172 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    v173 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    v174 = (unint64_t)v622 >> 11;
    if (__OFADD__((unint64_t)v622 >> 11, v172))
      goto LABEL_180;
    v175 = v530[1];
    v779[6] = *v530;
    v779[7] = v175;
    v779[8] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    v176 = BigString.UTF8View.index(_:offsetBy:)();
    v178 = v177;
    v180 = v179;
    v182 = v181;
    outlined release of Locale((uint64_t)&v560);
    swift_release();
    if (__OFADD__(v174, v173))
      goto LABEL_181;
    v480 = v178;
    v488 = v182;
    v499 = v180;
    v183 = v530[1];
    v779[3] = *v530;
    v779[4] = v183;
    v779[5] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    v184 = BigString.UTF8View.index(_:offsetBy:)();
    v186 = v185;
    v188 = v187;
    v190 = v189;
    outlined release of Locale((uint64_t)&v561);
    swift_release_n();
    v191 = v176 >> 10;
    if (v176 >> 10 < v522 || v184 >> 10 < v191)
      goto LABEL_182;
    v478 = v190;
    v192 = v530[1];
    v779[0] = *v530;
    v779[1] = v192;
    v779[2] = v530[2];
    v193 = BigString.startIndex.getter();
    v194 = BigString.endIndex.getter();
    if (v522 < v193 >> 10 || v194 >> 10 < v191)
      goto LABEL_183;
    v476 = v184;
    v477 = v184 >> 10;
    v474 = v188;
    v475 = v186;
    v771 = v514;
    v772 = v490;
    v773 = v492;
    v774 = v494;
    v775 = v176;
    v776 = v480;
    v777 = v499;
    v778 = v488;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v779);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v779);
    outlined release of Locale((uint64_t)&v562);
    swift_release();
    v618 = v563;
    v619 = v564;
    v620 = v565;
    v621 = v566;
    *(_OWORD *)&v545[32] = v565;
    *(_OWORD *)&v545[48] = v566;
    v546 = v563;
    v547 = v564;
    v548 = v565;
    v195 = v563;
    *(_OWORD *)v545 = v563;
    *(_OWORD *)&v545[16] = v564;
    v549 = v566;
    v196 = (unint64_t)v565 >> 10;
    v197 = (unint64_t)v563 >> 10;
    *(_QWORD *)&v545[64] = v538;
    v550 = 0;
    if ((unint64_t)v563 >> 10 != (unint64_t)v565 >> 10)
    {
      swift_retain();
      v199 = v195 >> 10;
      v524 = v196;
      v516 = v195 >> 10;
      while (v199 >= v197 && v199 < v196)
      {
        v200 = *v530;
        v201 = v530[2];
        v770[1] = v530[1];
        v770[2] = v201;
        v770[0] = v200;
        v202 = *v530;
        v808[1] = v530[1];
        v808[2] = v201;
        v808[0] = v202;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v808, (uint64_t)v809);
        outlined retain of Locale((uint64_t)v809);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v770);
        v203 = *v530;
        v204 = v530[2];
        v196 = v524;
        v769[1] = v530[1];
        v769[2] = v204;
        v769[0] = v203;
        swift_retain();
        outlined retain of Locale((uint64_t)v769);
        v205 = BigString.index(after:)();
        outlined release of Locale((uint64_t)v769);
        swift_release();
        v199 = v205 >> 10;
        if (v524 < v205 >> 10)
          goto LABEL_156;
        v206 = Character.isNumber.getter();
        swift_bridgeObjectRelease();
        if ((v206 & 1) == 0)
        {
          swift_release();
          goto LABEL_106;
        }
        v197 = v516;
        if (v199 == v524)
        {
          v198 = v538;
          swift_release();
          goto LABEL_58;
        }
      }
      goto LABEL_155;
    }
    v198 = v538;
LABEL_58:
    v207 = v530[1];
    v768[0] = *v530;
    v768[1] = v207;
    v768[2] = v530[2];
    swift_retain();
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v545);
    swift_retain();
    outlined retain of Locale((uint64_t)v768);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v768);
    outlined release of Locale((uint64_t)v567);
    swift_release_n();
    v208 = *(_QWORD *)v530;
    v209 = v198[7];
    v761 = *(_OWORD *)(v198 + 3);
    v762 = *(_OWORD *)(v198 + 5);
    v760 = v208;
    v763 = v209;
    v764 = v567[3];
    v765 = v567[4];
    v766 = v567[5];
    v767 = v567[6];
    swift_unknownObjectRetain();
    swift_release();
    v210 = MEMORY[0x186DA46E8](&v760);
    v212 = specialized FixedWidthInteger.init(_:)(v210, v211);
    if ((v213 & 1) != 0)
      goto LABEL_106;
    v214 = (id)v212;
    v215 = v212 - 1;
    if (v212 < 1)
      goto LABEL_106;
    if (v484 >> 62)
    {
      swift_bridgeObjectRetain();
      v216 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v216 & 0x8000000000000000) != 0)
        goto LABEL_184;
    }
    else
    {
      v216 = *(_QWORD *)((v484 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v215 >= v216)
    {
      if (!v216)
      {
LABEL_106:
        swift_release();
        goto LABEL_151;
      }
LABEL_70:
      swift_bridgeObjectRetain();
      v221 = 4;
      while (1)
      {
        v222 = v481 ? (id)MEMORY[0x186DA53A8](v221 - 4, v484) : *(id *)(v484 + 8 * v221);
        v223 = v222;
        v224 = v221 - 3;
        if (__OFADD__(v221 - 4, 1))
          break;
        if (objc_msgSend(v222, sel_index) == v214)
        {
          swift_bridgeObjectRelease();
          goto LABEL_81;
        }

        ++v221;
        if (v224 == v216)
          goto LABEL_149;
      }
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }
    if (v481)
    {
      v217 = (id)MEMORY[0x186DA53A8](v215, v484);
    }
    else
    {
      if (v215 >= *(_QWORD *)((v484 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_194;
      v217 = *(id *)(v479 + 8 * v215);
    }
    v218 = v217;
    v219 = objc_msgSend(v217, sel_index);

    if (v219 != v214)
      goto LABEL_70;
    v220 = v481 ? (id)MEMORY[0x186DA53A8](v215, v484) : *(id *)(v479 + 8 * v215);
    v223 = v220;
LABEL_81:
    v225 = v223;
    v226 = objc_msgSend(v225, sel_replacementRangeInResult);
    v228 = v227;
    *(_QWORD *)v542 = v485;
    swift_retain();
    Range<>.init(_:in:)((uint64_t)v226, v228, v542, (uint64_t *)&v583);
    v229 = v585;
    if (v585 == 2)
      break;
    v525 = v583;
    v230 = v584;
    v517 = v586;
    v500 = v587;
    v231 = v485[2];
    v759[0] = *v482;
    v759[1] = v231;
    v759[2] = v485[3];
    v232 = BigString.startIndex.getter();
    v233 = BigString.endIndex.getter();
    if ((unint64_t)v525 >> 10 < v232 >> 10 || v233 >> 10 < (unint64_t)v517 >> 10)
      goto LABEL_186;
    v465 = v225;
    v754 = v525;
    v755 = v230;
    v756 = v229;
    v757 = v517;
    v758 = v500;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v759);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v759);
    outlined release of Locale((uint64_t)&v568);
    swift_release();
    v614 = v569;
    v615 = v570;
    v616 = v571;
    v617 = v572;
    v495 = v571;
    v501 = v569;
    *(_OWORD *)v542 = v569;
    *(_OWORD *)&v542[16] = v570;
    *(_OWORD *)&v542[32] = v571;
    *(_OWORD *)&v542[48] = v572;
    *(_QWORD *)&v542[64] = v485;
    v470 = *((_QWORD *)&v569 + 1);
    *(_OWORD *)&v542[72] = v569;
    v471 = v569;
    v468 = *((_QWORD *)&v570 + 1);
    *(_OWORD *)&v542[88] = v570;
    v469 = v570;
    v466 = *((_QWORD *)&v571 + 1);
    *(_OWORD *)&v542[104] = v571;
    v467 = v571;
    v472 = *((_QWORD *)&v572 + 1);
    v473 = v572;
    v543 = v572;
    v544 = 0;
    v234 = *v530;
    v752 = v530[1];
    v753 = v530[2];
    v751 = v234;
    v526 = *(_QWORD *)v530;
    v235 = v198[3];
    v236 = v198[4];
    v237 = v198;
    v238 = v198[5];
    v239 = v237[7];
    v518 = v237[6];
    v240 = BigString.startIndex.getter();
    v242 = v241;
    v244 = v243;
    v246 = v245;
    v247 = BigString.endIndex.getter();
    if (v247 >> 10 < v504 || v504 < v240 >> 10 || v247 >> 10 < v240 >> 10)
      goto LABEL_187;
    v737 = v526;
    v738 = v235;
    v739 = v236;
    v740 = v238;
    v741 = v518;
    v742 = v239;
    v743 = v240;
    v744 = v242;
    v745 = v244;
    v746 = v246;
    v747 = v247;
    v748 = v248;
    v749 = v249;
    v750 = v250;
    v810[0] = v751;
    v810[1] = v752;
    v810[2] = v753;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v810, (uint64_t)v811);
    outlined retain of Locale((uint64_t)v811);
    v527 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)&v751);
    v251 = v538;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v252 = v530[1];
      v736[0] = *v530;
      v736[1] = v252;
      v736[2] = v530[2];
      v253 = v538[8];
      v254 = v538[9];
      v255 = v538[10];
      v256 = v538[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v736);
      swift_unknownObjectRetain();
      v251 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v736, v253, v254, v255, v256);
      swift_release();
    }
    v257 = v251[2];
    v733 = v251[1];
    v734 = v257;
    v735 = v251[3];
    v258 = BigString.startIndex.getter();
    v260 = v259;
    v262 = v261;
    v264 = v263;
    v265 = BigString.endIndex.getter();
    v594 = (uint64_t)v251;
    v595 = v258;
    v596 = v260;
    v597 = v262;
    v598 = v264;
    v599 = v265;
    *(_QWORD *)&v600 = v266;
    *((_QWORD *)&v600 + 1) = v267;
    *(_QWORD *)&v601 = v268;
    v269 = one-time initialization token for currentIdentity;
    swift_retain();
    if (v269 != -1)
      swift_once();
    v270 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v271 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v271);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v270, v578);
    os_unfair_lock_unlock(v271);
    swift_release();
    v272 = v578[0];
    *((_QWORD *)&v601 + 1) = v578[0];
    BigString.init()();
    v578[0] = 0;
    MEMORY[0x186DA9E90](v578, 8);
    v273 = v578[0];
    type metadata accessor for AttributedString.Guts();
    v274 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_188;
    v275 = v574;
    *(_OWORD *)(v274 + 16) = v573;
    *(_OWORD *)(v274 + 32) = v275;
    *(_OWORD *)(v274 + 48) = v575;
    *(_QWORD *)(v274 + 64) = 0;
    *(_QWORD *)(v274 + 72) = 0;
    *(_QWORD *)(v274 + 80) = 0;
    *(_QWORD *)(v274 + 88) = v273;
    swift_release();
    if (v504 < v258 >> 10 || v265 >> 10 < v477)
      goto LABEL_189;
    v276 = v251[1];
    v731[1] = v251[2];
    v732 = v251[3];
    v731[0] = v276;
    v277 = v251[1];
    v278 = v251[2];
    v812[2] = v732;
    v812[1] = v278;
    v812[0] = v277;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v812, (uint64_t)v813);
    outlined retain of Locale((uint64_t)v813);
    v519 = MEMORY[0x186DA3EC0](v502, v507, v511, v509);
    v533 = v272;
    v280 = v279;
    v282 = v281;
    v284 = v283;
    outlined release of Locale((uint64_t)v731);
    v285 = v251[1];
    v729[1] = v251[2];
    v730 = v251[3];
    v729[0] = v285;
    v286 = v251[1];
    v287 = v251[2];
    v814[2] = v730;
    v814[1] = v287;
    v814[0] = v286;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v814, (uint64_t)v815);
    outlined retain of Locale((uint64_t)v815);
    v288 = MEMORY[0x186DA3EC0](v476, v475, v474, v478);
    v290 = v289;
    v292 = v291;
    v294 = v293;
    outlined release of Locale((uint64_t)v729);
    v726[0] = v519;
    v726[1] = v280;
    v726[2] = v282;
    v726[3] = v284;
    v726[4] = v288;
    v726[5] = v290;
    v726[6] = v292;
    v726[7] = v294;
    v295 = *v482;
    v296 = v485[2];
    v728[2] = v485[3];
    v728[1] = v296;
    v728[0] = v295;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    swift_retain();
    outlined retain of Locale((uint64_t)v728);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v728);
    outlined release of Locale((uint64_t)v576);
    swift_release_n();
    v297 = v485[2];
    v727[0] = v485[1];
    v727[1] = v297;
    v727[2] = v485[3];
    v727[3] = v576[3];
    v727[4] = v576[4];
    v727[5] = v576[5];
    v727[6] = v576[6];
    swift_unknownObjectRetain();
    swift_release();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v726, (uint64_t)v727);
    swift_unknownObjectRelease();
    swift_release();
    if (*((_QWORD *)&v601 + 1) != v533)
      goto LABEL_198;
    v5 = (_OWORD *)v594;
    swift_release();
    v298 = v5[2];
    v723 = v5[1];
    v724 = v298;
    v725 = v5[3];
    v299 = BigString.startIndex.getter();
    v300 = BigString.endIndex.getter();
    if (v495 >> 10 < v501 >> 10)
      goto LABEL_190;
    v301 = v300;
    v302 = v485[2];
    v712 = v485[1];
    v713 = v302;
    v714 = v485[3];
    v715 = v471;
    v716 = v470;
    v717 = v469;
    v718 = v468;
    v719 = v467;
    v720 = v466;
    v721 = v473;
    v722 = v472;
    swift_unknownObjectRetain();
    swift_retain();
    v303 = BigSubstring.distance(from:to:)();
    swift_unknownObjectRelease();
    if (__OFADD__(v527, v303))
      goto LABEL_191;
    v304 = v299 >> 10;
    v305 = v301 >> 10;
    if (v301 >> 10 < v299 >> 10)
      goto LABEL_192;
    v306 = v5[1];
    v710[1] = v5[2];
    v711 = v5[3];
    v710[0] = v306;
    v307 = v5[1];
    v308 = v5[2];
    v816[2] = v711;
    v816[1] = v308;
    v816[0] = v307;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v816, (uint64_t)v817);
    outlined retain of Locale((uint64_t)v817);
    v309 = BigString.index(_:offsetBy:)();
    v532 = v310;
    v12 = v311;
    v14 = v312;
    outlined release of Locale((uint64_t)v710);
    swift_release();
    swift_release();
    swift_release();

    v8 = v309;
    v149 = v309 >> 10;
    if (v149 < v304 || v305 < v149)
      goto LABEL_193;
LABEL_36:
    v20 = v5 + 1;
    v150 = v5[2];
    v802 = v5[1];
    v803 = v150;
    v804 = v5[3];
    BigString.startIndex.getter();
    v16 = BigString.endIndex.getter();
    v151 = v149 > v16 >> 10;
    v10 = v532;
    if (v151)
      goto LABEL_157;
  }
  swift_release();

LABEL_151:
  *v483 = 0;
  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD v14[4];

  v3 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(a1 + 32);
  v14[3] = swift_getObjectType();
  v14[0] = a2;
  swift_unknownObjectRetain();
  v3(v12, v14);
  v4 = v13;
  if (v13)
  {
    v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    v7 = MEMORY[0x1E0C80A78](v5);
    v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
    v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

void closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v18;
  id v19;
  int8x16_t v20;
  uint64x2_t v21;
  int32x2_t v22;
  int16x8_t v23;
  NSMorphology *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64x2_t v29;
  int64x2_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned __int32 v40;
  Foundation::Morphology v41;

  v11 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  v34 = a8[1];
  v35 = *a8;
  v32 = a8[3];
  v33 = a8[2];
  if (v10)
  {
    if (v10 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, 1);
      outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      v18 = 0;
    }
    else
    {
      v20.i64[0] = 0xFFFFFFFFFFLL;
      v20.i64[1] = 0xFFFFFFFFFFLL;
      v21 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v12), v20);
      v30 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_182064D90);
      v29 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_182064D80);
      outlined copy of AttributedString.AttributeRunBoundaries?(v11, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
      v36 = v11;
      v37 = BYTE2(v11);
      v38 = v10;
      v39 = v12;
      v22 = vmovn_s64(v29);
      v23.i64[1] = v30.i64[1];
      *(int32x2_t *)v23.i8 = vmovn_s64(v30);
      v23.i16[1] = v23.i16[2];
      v23.i16[2] = v22.i16[0];
      v23.i16[3] = v22.i16[2];
      v40 = vmovn_s16(v23).u32[0];
      swift_bridgeObjectRetain();
      *(_QWORD *)&v41.grammaticalGender.value = &v36;
      NSMorphology.init(_:)(v24, v41);
      v18 = v25;
    }
    if ((a3 & 1) != 0)
      v26 = 0;
    else
      v26 = a2;
    if ((a5 & 1) != 0)
      a4 = 0;
    if ((a7 & 1) != 0)
      v27 = 0;
    else
      v27 = a6;
    v19 = objc_msgSend(objc_allocWithZone((Class)_NSInflectionRuleExplicit), sel_initWithMorphology_agreeWithArgument_agreeWithConcept_referentConcept_, v18, v26, a4, v27);

    if (v19)
      goto LABEL_16;
LABEL_5:
    *(_QWORD *)(a9 + 64) = 0;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    return;
  }
  swift_bridgeObjectRelease_n();
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0);
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0);
  v19 = objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  if (!v19)
    goto LABEL_5;
LABEL_16:
  v28 = v19;
  *(_OWORD *)a9 = v35;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v32;
  *(_QWORD *)(a9 + 64) = v28;

}

uint64_t sub_181EE06CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181EE06F0()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0700()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0710()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0720()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0730()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0740()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0750()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0760()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0770()
{
  return swift_deallocObject();
}

uint64_t sub_181EE0780()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181EE07B0()
{
  return swift_deallocObject();
}

uint64_t sub_181EE07C0()
{
  return swift_deallocObject();
}

uint64_t sub_181EE07D0()
{
  return swift_deallocObject();
}

uint64_t sub_181EE07E0()
{
  return swift_deallocObject();
}

uint64_t sub_181EE07F4()
{
  return swift_deallocObject();
}

uint64_t specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  if (*a3 == 1)
  {
    swift_bridgeObjectRetain();
    return BigSubstring.replaceSubrange<A>(_:with:)();
  }
  return result;
}

uint64_t specialized AttributedString.Runs.Run.subscript.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE v9[40];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v1 = (uint64_t)v0;
  v2 = *v0;
  outlined retain of AttributedString.Runs.Run(v1);
  if (one-time initialization token for name == -1)
  {
    if (*(_QWORD *)(v2 + 16))
      goto LABEL_3;
LABEL_8:
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_8;
LABEL_3:
  v3 = qword_1EDC3E588;
  v4 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v6 & 1) == 0)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v2 + 56) + 72 * v5, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v7 = 0;
    v15 = 0;
    v16 = 1;
    goto LABEL_10;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  type metadata accessor for NSInlinePresentationIntent(0);
  swift_dynamicCast();
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
  v16 = 0;
  v7 = v15;
LABEL_10:
  outlined release of AttributedString.Runs.Run(v1);
  return v7;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _BYTE v7[40];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for name == -1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_8:
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_8;
LABEL_3:
  v2 = qword_1EDC3E588;
  v3 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  if ((v5 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v4, (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v9 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v8, (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      type metadata accessor for NSInlinePresentationIntent(0);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v8);
      return v13;
    }
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  return 0;
}

uint64_t specialized AttributedString.enumerate<A>(_:in:editor:)(__int128 *a1, _OWORD *a2, void (*a3)(_QWORD *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  int v30;
  char v31;
  ValueMetadata *v32;
  _BYTE v33[48];
  _BYTE v34[48];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[48];
  _BYTE v40[48];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];
  _OWORD v46[13];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[12];
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = a2[2];
  v52 = a2[1];
  v53 = v7;
  v54 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v8 = a1[1];
  v48 = *a1;
  v49 = v8;
  v9 = a1[3];
  v50 = a1[2];
  v51 = v9;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v33);
  outlined release of Locale((uint64_t)v34);
  swift_release();
  v41 = v35;
  v42 = v36;
  v43 = v37;
  v44 = v38;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v55);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18205C850;
  if (one-time initialization token for name != -1)
    swift_once();
  v11 = qword_1EDC3E450;
  *(_QWORD *)(v10 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  *(_QWORD *)(v10 + 40) = v11;
  v68[10] = v65;
  v68[11] = v66;
  v68[6] = v61;
  v68[7] = v62;
  v68[8] = v63;
  v68[9] = v64;
  v68[2] = v57;
  v68[3] = v58;
  v68[4] = v59;
  v68[5] = v60;
  v68[0] = v55;
  v68[1] = v56;
  *(_QWORD *)&v69 = v67;
  *((_QWORD *)&v69 + 1) = v10;
  v70 = MEMORY[0x1E0DEE9D8];
  v47 = MEMORY[0x1E0DEE9D8];
  v46[10] = v65;
  v46[11] = v66;
  v46[6] = v61;
  v46[7] = v62;
  v46[8] = v63;
  v46[9] = v64;
  v46[2] = v57;
  v46[3] = v58;
  v46[4] = v59;
  v46[5] = v60;
  v46[0] = v55;
  v46[1] = v56;
  v46[12] = v69;
  swift_bridgeObjectRetain();
  v12 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v46);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v68);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = v13 - 1;
    for (i = v12 + 56; ; i += 88)
    {
      if ((v14 & 1) != 0)
      {
        if (!v15)
          return swift_release();
        v14 = 1;
      }
      else
      {
        v17 = *(_QWORD *)(i - 24);
        v18 = *(_QWORD *)(i - 16);
        v19 = *(unsigned int *)(i - 8) | ((unint64_t)*(unsigned __int8 *)(i - 4) << 32);
        if (v18 == 1)
        {
          outlined copy of AttributedString.AttributeRunBoundaries?(*(_QWORD *)(i - 24), 1);
          if (!v15)
            return swift_release();
          v14 = 0;
        }
        else
        {
          v32 = &type metadata for InflectionRule;
          v31 = BYTE4(v19);
          v30 = v19;
          v20 = *(_OWORD **)(a5 + 16);
          v21 = v20[1];
          v22 = v20[3];
          v45[1] = v20[2];
          v45[2] = v22;
          v28 = 0;
          v29[0] = v17;
          v29[1] = v18;
          v45[0] = v21;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined retain of Locale((uint64_t)v45);
          v27 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v39);
          BigString.utf16.getter();
          v23 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v45);
          outlined release of Locale((uint64_t)v40);
          a3(v29, v27, v23, &v28);
          outlined destroy of Any?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
          outlined consume of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined consume of AttributedString.AttributeRunBoundaries?(v17, v18);
          if (!v15)
            return swift_release();
          v14 = v28;
        }
      }
      --v15;
    }
  }
  return swift_release();
}

{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v26;
  _QWORD v27[4];
  _BYTE v28[48];
  _BYTE v29[48];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[48];
  _BYTE v35[48];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  _OWORD v41[13];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[12];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v7 = a2[2];
  v47 = a2[1];
  v48 = v7;
  v49 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v8 = a1[1];
  v43 = *a1;
  v44 = v8;
  v9 = a1[3];
  v45 = a1[2];
  v46 = v9;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v28);
  outlined release of Locale((uint64_t)v29);
  swift_release();
  v36 = v30;
  v37 = v31;
  v38 = v32;
  v39 = v33;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18205C850;
  if (one-time initialization token for name != -1)
    swift_once();
  v11 = qword_1EDC3E4D8;
  *(_QWORD *)(v10 + 32) = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  *(_QWORD *)(v10 + 40) = v11;
  v63[10] = v60;
  v63[11] = v61;
  v63[6] = v56;
  v63[7] = v57;
  v63[8] = v58;
  v63[9] = v59;
  v63[2] = v52;
  v63[3] = v53;
  v63[4] = v54;
  v63[5] = v55;
  v63[0] = v50;
  v63[1] = v51;
  *(_QWORD *)&v64 = v62;
  *((_QWORD *)&v64 + 1) = v10;
  v65 = MEMORY[0x1E0DEE9D8];
  v42 = MEMORY[0x1E0DEE9D8];
  v41[10] = v60;
  v41[11] = v61;
  v41[6] = v56;
  v41[7] = v57;
  v41[8] = v58;
  v41[9] = v59;
  v41[2] = v52;
  v41[3] = v53;
  v41[4] = v54;
  v41[5] = v55;
  v41[0] = v50;
  v41[1] = v51;
  v41[12] = v64;
  swift_bridgeObjectRetain();
  v12 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v41);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v63);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = v13 - 1;
    for (i = v12 + 48; ; i += 72)
    {
      if ((v14 & 1) != 0)
      {
        if (!v15)
          return swift_release();
        v14 = 1;
      }
      else
      {
        v17 = *(_QWORD *)(i - 16);
        if (v17)
        {
          v26 = 0;
          v27[3] = &type metadata for AttributedString;
          v27[0] = v17;
          v18 = *(_OWORD **)(a5 + 16);
          v19 = v18[1];
          v20 = v18[3];
          v40[1] = v18[2];
          v40[2] = v20;
          v40[0] = v19;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          swift_retain_n();
          outlined retain of Locale((uint64_t)v40);
          v21 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v34);
          BigString.utf16.getter();
          v22 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v40);
          outlined release of Locale((uint64_t)v35);
          a3(v27, v21, v22, &v26);
          outlined destroy of Any?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
          swift_release_n();
          if (!v15)
            return swift_release();
          v14 = v26;
        }
        else
        {
          if (!v15)
            return swift_release();
          v14 = 0;
        }
      }
      --v15;
    }
  }
  return swift_release();
}

uint64_t specialized AttributedString.enumerateFormattableRanges(in:editor:)(__int128 *a1, uint64_t *a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *i;
  void *v16;
  __int128 v17;
  __int128 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28[9];
  _BYTE v29[48];
  _BYTE v30[48];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[48];
  _BYTE v36[48];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[3];
  _OWORD v42[13];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD v65[12];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v26 = a1[1];
  v27 = *a1;
  v25 = a1[2];
  v5 = *((_QWORD *)a1 + 6);
  v6 = *((_QWORD *)a1 + 7);
  v7 = *a2;
  v8 = *(_OWORD *)(*a2 + 32);
  v49 = *(_OWORD *)(*a2 + 16);
  v50 = v8;
  v51 = *(_OWORD *)(v7 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v44 = v27;
  v45 = v26;
  v46 = v25;
  v47 = v5;
  v48 = v6;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v29);
  outlined release of Locale((uint64_t)v30);
  swift_release();
  v37 = v31;
  v38 = v32;
  v39 = v33;
  v40 = v34;
  AttributedString.Runs.init(_:in:)(v7, &v52);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18205C850;
  outlined retain of AttributedString.Runs((uint64_t)&v52);
  if (one-time initialization token for name != -1)
    swift_once();
  v10 = qword_1EDC3E180;
  *(_QWORD *)(v9 + 32) = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  *(_QWORD *)(v9 + 40) = v10;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)&v52);
  v65[10] = v62;
  v65[11] = v63;
  v65[6] = v58;
  v65[7] = v59;
  v65[8] = v60;
  v65[9] = v61;
  v65[2] = v54;
  v65[3] = v55;
  v65[4] = v56;
  v65[5] = v57;
  v65[0] = v52;
  v65[1] = v53;
  *(_QWORD *)&v66 = v64;
  *((_QWORD *)&v66 + 1) = v9;
  v67 = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v42[10] = v62;
  v42[11] = v63;
  v42[6] = v58;
  v42[7] = v59;
  v42[8] = v60;
  v42[9] = v61;
  v42[2] = v54;
  v42[3] = v55;
  v42[4] = v56;
  v42[5] = v57;
  v42[0] = v52;
  v42[1] = v53;
  v42[12] = v66;
  v11 = specialized Sequence.compactMap<A>(_:)((uint64_t)v42);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v65);
  v12 = v11[2];
  if (v12)
  {
    v13 = 0;
    v14 = v12 - 1;
    for (i = v11 + 6; ; i += 9)
    {
      if ((v13 & 1) != 0)
      {
        if (!v14)
          return swift_bridgeObjectRelease();
        v13 = 1;
      }
      else
      {
        v16 = (void *)i[6];
        v28[0] = 0;
        v17 = *(_OWORD *)(*(_QWORD *)a5 + 16);
        v18 = *(_OWORD *)(*(_QWORD *)a5 + 48);
        v41[1] = *(_OWORD *)(*(_QWORD *)a5 + 32);
        v41[2] = v18;
        v41[0] = v17;
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.utf16.getter();
        v19 = v16;
        outlined retain of Locale((uint64_t)v41);
        v20 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v35);
        BigString.utf16.getter();
        v21 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v41);
        outlined release of Locale((uint64_t)v36);
        a3(v19, v20, v21, v28);

        if (!v14)
          return swift_bridgeObjectRelease();
        v13 = v28[0];
      }
      --v14;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)(uint64_t result, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t *v101;
  os_unfair_lock_s *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  _QWORD *v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175[8];
  __int128 v176;
  __int128 v177;
  _OWORD v178[2];
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  char v190[48];
  char v191[48];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  char v196[48];
  char v197;
  char v198;
  char v199[48];
  char v200[48];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  _OWORD v216[3];
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _OWORD v228[3];
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;

  if (!*(_QWORD *)(result + 16))
    return result;
  v4 = *((_QWORD *)a2 + 6);
  v3 = *((_QWORD *)a2 + 7);
  v163 = a2[1];
  v165 = a2[2];
  v160 = *a2;
  v129 = result;
  v132 = specialized AttributedString._AttributeStorage.subscript.getter(result);
  v131 = v5;
  v6 = *v2;
  v7 = *(_OWORD *)(*v2 + 32);
  v254 = *(_OWORD *)(*v2 + 16);
  v255 = v7;
  v256 = *(_OWORD *)(v6 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v249 = v160;
  v250 = v163;
  v251 = v165;
  v252 = v4;
  v253 = v3;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v190);
  outlined release of Locale((uint64_t)v191);
  v208 = v192;
  v209 = v193;
  v210 = v194;
  v211 = v195;
  result = AttributedString.Runs.init(_:in:)(v6, &v176);
  v164 = (_QWORD *)v176;
  v130 = v180;
  v8 = v180;
  v133 = *((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1) == (_QWORD)v180)
    return swift_release();
  v151 = v184;
  v127 = v188;
  v115 = (unint64_t)v188 >> 11;
  v116 = v184 >> 10;
  v147 = (__int128 *)(v176 + 16);
  v9 = v177;
  v10 = *(_QWORD *)&v178[0];
  v11 = v132;
  if ((v131 & 1) != 0)
    v11 = 0;
  v114 = v11;
  v119 = v182;
  v120 = v181;
  v117 = v189;
  v118 = v183;
  v125 = *((_QWORD *)&v177 + 1);
  v156 = *((_QWORD *)&v177 + 1);
  v126 = v177;
  v123 = *((_QWORD *)&v178[0] + 1);
  v12 = *((_QWORD *)&v178[0] + 1);
  v124 = *(_QWORD *)&v178[0];
  v149 = v186;
  v150 = v185;
  v121 = *((_QWORD *)&v178[1] + 1);
  v152 = *((_QWORD *)&v178[1] + 1);
  v122 = *(_QWORD *)&v178[1];
  v153 = *(_QWORD *)&v178[1];
  v148 = v187;
  v128 = v179;
  v159 = v179;
  v13 = *((_QWORD *)&v176 + 1);
  v134 = v2;
  v113 = v180;
  while (1)
  {
    if (v13 >= v8)
    {
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    *(_QWORD *)&v176 = v164;
    *((_QWORD *)&v176 + 1) = v133;
    *(_QWORD *)&v177 = v126;
    *((_QWORD *)&v177 + 1) = v125;
    *(_QWORD *)&v178[0] = v124;
    *((_QWORD *)&v178[0] + 1) = v123;
    *(_QWORD *)&v178[1] = v122;
    *((_QWORD *)&v178[1] + 1) = v121;
    v180 = v130;
    v181 = v120;
    v182 = v119;
    v183 = v118;
    v179 = v128;
    v184 = v151;
    v185 = v150;
    v186 = v149;
    v187 = v148;
    v188 = v127;
    v189 = v117;
    v175[0] = v13;
    v166 = v9;
    v175[1] = v9;
    v175[2] = v156;
    v175[3] = v10;
    v175[4] = v12;
    v175[5] = v153;
    v175[6] = v152;
    v175[7] = v159;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(v175, &v168);
    if (v168 != v164[11])
      goto LABEL_140;
    v157 = v12;
    v161 = v13;
    v14 = v169;
    v15 = v171;
    v16 = v172;
    v17 = v173;
    v18 = v174;
    if (v170)
    {
      v19 = (_QWORD *)(v170 + 24 * ((v169 >> ((4 * *(_BYTE *)(v170 + 18) + 8) & 0x3C)) & 0xF));
      v21 = v19[3];
      v20 = v19[4];
      v22 = v19[5];
      swift_retain();
      v155 = v20;
      swift_bridgeObjectRetain();
      v154 = v22;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v23 = v164[8];
      swift_retain();
      swift_unknownObjectRetain();
      v21 = specialized Rope._Node.subscript.getter(v14, v23);
      v154 = v25;
      v155 = v24;
      result = swift_unknownObjectRelease();
    }
    if (v116 >= v15 >> 10)
      v26 = v151;
    else
      v26 = v15;
    if (v116 >= v15 >> 10)
    {
      v16 = v150;
      v17 = v149;
      v18 = v148;
    }
    v27 = v156;
    if (__OFADD__(v21, v15 >> 11))
      goto LABEL_141;
    if (v115 >= (uint64_t)(v21 + (v15 >> 11)))
      v28 = v21 + (v15 >> 11);
    else
      v28 = v115;
    v29 = v147[1];
    v246 = *v147;
    v247 = v29;
    v248 = v147[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v28, v26 >> 11))
      goto LABEL_142;
    v30 = v18;
    v31 = BigString.UTF8View.index(_:offsetBy:)();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    result = outlined release of Locale((uint64_t)v196);
    if (v31 >> 10 < v26 >> 10)
      goto LABEL_143;
    v136 = v26;
    v137 = v37;
    v217 = v26;
    v143 = v16;
    v218 = v16;
    v219 = v17;
    v138 = v35;
    v139 = v30;
    v220 = v30;
    v221 = v31;
    v222 = v33;
    v223 = v35;
    v224 = v37;
    v38 = v164;
    v39 = v164[8];
    v40 = v164[9];
    v41 = v164[11];
    v145 = v164[10];
    v141 = v17;
    v135 = v31;
    if (v10 == 1 || v166 != v41)
      break;
    v42 = v161;
    if (v159 == 2)
    {
      if (v39)
      {
        swift_retain();
        swift_unknownObjectRetain();
        v43 = v40;
        v44 = v40;
        v45 = v145;
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v166, v156, v10, v39, v44, v145);
        v46 = result;
        v47 = v166;
        v38 = v164;
        goto LABEL_111;
      }
      result = swift_retain();
      v46 = 0;
    }
    else
    {
      v46 = v157 >> 11;
      swift_unknownObjectRetain();
      result = swift_retain();
    }
    v47 = v166;
    v43 = v40;
    v45 = v145;
LABEL_111:
    *(_QWORD *)&v176 = v47;
    *((_QWORD *)&v176 + 1) = v27;
    *(_QWORD *)&v177 = v10;
    v55 = __OFADD__(v42, 1);
    v68 = v42 + 1;
    if (v55)
      goto LABEL_144;
    if (v47 != v41)
      goto LABEL_145;
    v162 = v68;
    if (v10)
    {
      v69 = *(_QWORD *)(v10 + 24 * ((v27 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v69 = specialized Rope._Node.subscript.getter(v27, v39);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v55 = __OFADD__(v46, v69);
    v70 = v46 + v69;
    if (v55)
      goto LABEL_146;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v176, v39, v43, v45, v41);
    swift_unknownObjectRelease_n();
    v167 = v176;
    v10 = v177;
    v156 = *((_QWORD *)&v176 + 1);
    if (v159 == 2)
    {
      v71 = v147[1];
      v243 = *v147;
      v244 = v71;
      v245 = v147[2];
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v72 = BigString.UTF8View.index(_:offsetBy:)();
      v152 = v74;
      v153 = v73;
      v159 = v75;
      v76 = &v198;
    }
    else
    {
      v77 = v147[1];
      v240 = *v147;
      v241 = v77;
      v242 = v147[2];
      BigString.utf8.getter();
      result = v157;
      if (__OFSUB__(v70, v157 >> 11))
        goto LABEL_154;
      v72 = BigString.UTF8View.index(_:offsetBy:)();
      v152 = v79;
      v153 = v78;
      v159 = v80;
      v76 = &v197;
    }
    outlined release of Locale((uint64_t)v76);
    swift_release();
    v229 = v155;
    v230 = v154;
    v231 = v136;
    v232 = v143;
    v233 = v141;
    v234 = v139;
    v235 = v135;
    v236 = v33;
    v237 = v138;
    v238 = v137;
    v239 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v81 = specialized AttributedString.Runs.Run.subscript.getter();
    v83 = v82;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v83 & 1) != 0)
      v84 = v132;
    else
      v84 = v81 | v114;
    v168 = v155;
    v169 = v154;
    LOBYTE(v176) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v129, (char *)&v176);
    v85 = v134;
    if (one-time initialization token for name != -1)
      swift_once();
    v86 = v83 & v131;
    v88 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
    v87 = qword_1EDC3E588;
    if ((v86 & 1) != 0)
    {
      memset(v178, 0, sizeof(v178));
      v176 = 0u;
      v177 = 0u;
    }
    else
    {
      type metadata accessor for NSInlinePresentationIntent(0);
      *((_QWORD *)&v177 + 1) = v89;
      *(_QWORD *)&v178[0] = lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent();
      *(_QWORD *)&v176 = v84;
      *(_OWORD *)((char *)v178 + 8) = xmmword_18205FD60;
      BYTE8(v178[1]) = 1;
    }
    v158 = v72;
    v179 = 0;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v176, v88, v87);
    swift_bridgeObjectRelease();
    v90 = v168;
    v91 = v169;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v92 = (_QWORD *)*v134;
      v93 = *(_OWORD *)(*v134 + 16);
      v94 = *(_OWORD *)(*v134 + 32);
      v228[2] = *(_OWORD *)(*v134 + 48);
      v228[1] = v94;
      v228[0] = v93;
      v95 = v92[8];
      v96 = v92[9];
      v97 = v92[10];
      v98 = v92[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v228);
      swift_unknownObjectRetain();
      *v134 = AttributedString.Guts.init(string:runs:)(v228, v95, v96, v97, v98);
      swift_release();
    }
    v99 = *v134;
    v100 = *(_OWORD *)(*v134 + 32);
    v225 = *(_OWORD *)(*v134 + 16);
    v226 = v100;
    v227 = *(_OWORD *)(v99 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v199);
    outlined release of Locale((uint64_t)v200);
    v144 = v202;
    v146 = v201;
    v140 = v204;
    v142 = v203;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v101 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v102 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v102);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v101, (uint64_t *)&v176);
    os_unfair_lock_unlock(v102);
    swift_release();
    BigString.init()();
    *(_QWORD *)&v176 = 0;
    MEMORY[0x186DA9E90](&v176, 8);
    v103 = v176;
    type metadata accessor for AttributedString.Guts();
    v104 = swift_allocObject();
    result = BigString.isEmpty.getter();
    if ((result & 1) == 0)
      goto LABEL_147;
    v105 = v206;
    *(_OWORD *)(v104 + 16) = v205;
    *(_OWORD *)(v104 + 32) = v105;
    *(_OWORD *)(v104 + 48) = v207;
    *(_QWORD *)(v104 + 64) = 0;
    *(_QWORD *)(v104 + 72) = 0;
    *(_QWORD *)(v104 + 80) = 0;
    *(_QWORD *)(v104 + 88) = v103;
    *v134 = v104;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v106 = *(_OWORD *)(v99 + 32);
      v216[0] = *(_OWORD *)(v99 + 16);
      v216[1] = v106;
      v216[2] = *(_OWORD *)(v99 + 48);
      v107 = *(_QWORD *)(v99 + 64);
      v108 = *(_QWORD *)(v99 + 72);
      v109 = *(_QWORD *)(v99 + 80);
      v110 = *(_QWORD *)(v99 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)v216);
      swift_unknownObjectRetain();
      v111 = v110;
      v85 = v134;
      v112 = AttributedString.Guts.init(string:runs:)(v216, v107, v108, v109, v111);
      swift_release();
      v99 = v112;
    }
    v8 = v113;
    v12 = v158;
    v212 = v146;
    v213 = v144;
    v214 = v142;
    v215 = v140;
    AttributedString.Guts.setAttributes(_:in:)(v90, v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v85 = v99;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    v13 = v162;
    v9 = v167;
    if (v162 == v113)
      return swift_release();
  }
  if (v39)
    v48 = v164[9];
  else
    v48 = 0;
  v42 = v161;
  if (v161 < 0 || v48 < v161)
    goto LABEL_153;
  if (!v39 || v161 >= v40 || !*(_WORD *)(v39 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v43 = v40;
    v45 = v145;
    v27 = specialized Rope._endPath.getter(v39);
    result = swift_unknownObjectRelease();
    v10 = 0;
    if (!v39)
    {
      v46 = 0;
      goto LABEL_110;
    }
LABEL_70:
    swift_unknownObjectRetain();
    v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v41, v27, v10, v39, v43, v45);
    result = swift_unknownObjectRelease_n();
LABEL_110:
    v47 = v41;
    goto LABEL_111;
  }
  v49 = *(unsigned __int8 *)(v39 + 18);
  if (*(_BYTE *)(v39 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v50 = v161;
    v51 = v39;
    while (1)
    {
      v53 = *(unsigned __int16 *)(v51 + 16);
      if (*(_WORD *)(v51 + 16))
      {
        v54 = *(_QWORD *)(v51 + 32);
        v55 = __OFSUB__(v50, v54);
        v56 = v50 - v54;
        if (v55)
          goto LABEL_137;
        if (__OFADD__(v56, 1))
          goto LABEL_138;
        if (v56 + 1 <= 0)
        {
          v53 = 0;
          goto LABEL_42;
        }
        if ((_DWORD)v53 != 1)
        {
          v57 = *(_QWORD *)(v51 + 56);
          v50 = v56 - v57;
          if (__OFSUB__(v56, v57))
            goto LABEL_151;
          if (__OFADD__(v50, 1))
            goto LABEL_152;
          if (v50 + 1 < 1)
          {
            v53 = 1;
            v50 = v56;
            goto LABEL_42;
          }
          if ((_DWORD)v53 == 2)
            goto LABEL_41;
          v58 = *(_QWORD *)(v51 + 80);
          v55 = __OFSUB__(v50, v58);
          v56 = v50 - v58;
          if (v55)
            goto LABEL_155;
          if (__OFADD__(v56, 1))
            goto LABEL_156;
          if (v56 + 1 < 1)
          {
            v53 = 2;
            goto LABEL_42;
          }
          if ((_DWORD)v53 != 3)
          {
            v59 = 3;
            if (v53 > 3)
              v59 = *(unsigned __int16 *)(v51 + 16);
            v60 = (_QWORD *)(v51 + 104);
            v61 = 3;
            while (v59 != v61)
            {
              v50 = v56 - *v60;
              if (__OFSUB__(v56, *v60))
                goto LABEL_149;
              if (__OFADD__(v50, 1))
                goto LABEL_150;
              if (v50 + 1 < 1)
              {
                v53 = v61;
                v50 = v56;
                goto LABEL_42;
              }
              ++v61;
              v60 += 3;
              v56 = v50;
              if (v53 == v61)
                goto LABEL_41;
            }
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
        }
        v50 = v56;
      }
LABEL_41:
      if (v50)
      {
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
LABEL_42:
      v52 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
      v49 = ((-15 << v52) - 1) & v49 | (v53 << v52);
      v10 = *(_QWORD *)(v51 + 24 + 24 * v53);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v51 = v10;
      if (!*(_BYTE *)(v10 + 18))
        goto LABEL_75;
    }
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v50 = v161;
  v10 = v39;
LABEL_75:
  v62 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16))
    goto LABEL_89;
  v63 = v50 - 1;
  if (__OFSUB__(v50, 1))
    goto LABEL_158;
  if (!__OFADD__(v63, 1))
  {
    if (v50 <= 0)
    {
      v62 = 0;
    }
    else
    {
      if ((_DWORD)v62 == 1)
        goto LABEL_88;
      v55 = __OFSUB__(v63, 1);
      v63 = v50 - 2;
      if (v55)
        goto LABEL_162;
      if (__OFADD__(v63, 1))
        goto LABEL_163;
      if (v50 - 1 < 1)
      {
        v62 = 1;
        goto LABEL_108;
      }
      if ((_DWORD)v62 == 2)
      {
LABEL_88:
        v50 = v63;
LABEL_89:
        if (v50)
          goto LABEL_157;
        goto LABEL_108;
      }
      v55 = __OFSUB__(v63, 1);
      v63 = v50 - 3;
      if (v55)
        goto LABEL_164;
      if (__OFADD__(v63, 1))
        goto LABEL_165;
      if (v50 - 2 >= 1)
      {
        if ((_DWORD)v62 != 3)
        {
          v64 = 0;
          v65 = 3;
          if (v62 > 3)
            v65 = *(unsigned __int16 *)(v10 + 16);
          v66 = v65 - 3;
          if (v63 >= v62 - 4)
            v67 = v62 - 4;
          else
            v67 = v50 - 3;
          if (v67 >= v50 + 0x7FFFFFFFFFFFFFFDLL)
            v67 = v50 + 0x7FFFFFFFFFFFFFFDLL;
          while (v66 > v67)
          {
            if (v50 + 0x7FFFFFFFFFFFFFFDLL == v64)
              goto LABEL_161;
            if (v63 == v64)
            {
              v62 = v50;
              goto LABEL_108;
            }
            if (v62 - 3 == ++v64)
            {
              if (v63 == v64)
                goto LABEL_108;
              goto LABEL_157;
            }
          }
          goto LABEL_160;
        }
        goto LABEL_88;
      }
      v62 = 2;
    }
LABEL_108:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v27 = v49 & 0xFFFFFFFFFFFFF0FFLL | (v62 << 8);
    v42 = v161;
    v43 = v40;
    v45 = v145;
    goto LABEL_70;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent;
  if (!lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent)
  {
    type metadata accessor for NSInlinePresentationIntent(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSInlinePresentationIntent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent);
  }
  return result;
}

uint64_t outlined retain of AttributedString.Runs.Run(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of AttributedString.Runs.Run(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t sub_181EE2660()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, a3, a4, a7);
}

uint64_t sub_181EE26A8()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, (_QWORD *)(v1 + 16));
}

uint64_t outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_181EE2708()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_181EE2750()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined retain of [AttributedString.AttributeRunBoundaries](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_181EE27A4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE27B4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE27C4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE27D4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE27E4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE27F4()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2804()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2814()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2824()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2834()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2844()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2854()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2864()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_181EE2888()
{
  return swift_deallocObject();
}

uint64_t sub_181EE2898()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_181EE28BC()
{
  return swift_deallocObject();
}

uint64_t sub_181EE28D0()
{
  return swift_deallocObject();
}

uint64_t outlined copy of TermOfAddress?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4)
    return outlined copy of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_181EE2908()
{
  return swift_deallocObject();
}

uint64_t String.Encoding.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static String.Encoding.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t String.Encoding.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*String.Encoding.rawValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void static String.Encoding.nextstep.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static String.Encoding.japaneseEUC.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void static String.Encoding.isoLatin1.getter(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

void static String.Encoding.symbol.getter(_QWORD *a1@<X8>)
{
  *a1 = 6;
}

void static String.Encoding.nonLossyASCII.getter(_QWORD *a1@<X8>)
{
  *a1 = 7;
}

void static String.Encoding.shiftJIS.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static String.Encoding.isoLatin2.getter(_QWORD *a1@<X8>)
{
  *a1 = 9;
}

void static String.Encoding.windowsCP1251.getter(_QWORD *a1@<X8>)
{
  *a1 = 11;
}

void static String.Encoding.windowsCP1252.getter(_QWORD *a1@<X8>)
{
  *a1 = 12;
}

void static String.Encoding.windowsCP1253.getter(_QWORD *a1@<X8>)
{
  *a1 = 13;
}

void static String.Encoding.windowsCP1254.getter(_QWORD *a1@<X8>)
{
  *a1 = 14;
}

void static String.Encoding.windowsCP1250.getter(_QWORD *a1@<X8>)
{
  *a1 = 15;
}

void static String.Encoding.iso2022JP.getter(_QWORD *a1@<X8>)
{
  *a1 = 21;
}

void static String.Encoding.macOSRoman.getter(_QWORD *a1@<X8>)
{
  *a1 = 30;
}

void static String.Encoding.utf16.getter(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

void static String.Encoding.utf16BigEndian.getter(_QWORD *a1@<X8>)
{
  *a1 = 2415919360;
}

void static String.Encoding.utf16LittleEndian.getter(_QWORD *a1@<X8>)
{
  *a1 = 2483028224;
}

void static String.Encoding.utf32.getter(_QWORD *a1@<X8>)
{
  *a1 = 2348810496;
}

void static String.Encoding.utf32BigEndian.getter(_QWORD *a1@<X8>)
{
  *a1 = 2550137088;
}

void static String.Encoding.utf32LittleEndian.getter(_QWORD *a1@<X8>)
{
  *a1 = 2617245952;
}

void String.Encoding.hashValue.getter()
{
  JUMPOUT(0x186DA5060);
}

void protocol witness for Hashable.hashValue.getter in conformance String.Encoding()
{
  JUMPOUT(0x186DA5060);
}

id String.Encoding.description.getter()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *v0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding;
  if (!lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.Encoding, &type metadata for String.Encoding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding);
  }
  return result;
}

id protocol witness for CustomStringConvertible.description.getter in conformance String.Encoding()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *v0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t Unicode.Scalar._stripDiacritics()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  unsigned int v5;

  v1 = a1;
  v2 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a1), 2);
  v3 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v1, v2, 0x700030002);
  if (v3)
  {
    MEMORY[0x1E0C80A78](v3);
    if (CFUniCharDecomposeCharacter() >= 1)
    {
      if (v5 >= 0x510)
        return v1;
      else
        return v5;
    }
  }
  return v1;
}

void PersonNameComponents.FormatStyle.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PersonNameComponents.FormatStyle.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.style.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.init(style:locale:)@<Q0>(_BYTE *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_BYTE *)a3 = *a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

uint64_t PersonNameComponents.FormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;

  *(_BYTE *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

id PersonNameComponents.FormatStyle.format(_:)(uint64_t *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  id v9;
  void *v11;

  v2 = *a1;
  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v5, sel_setStyle_, v3 + 1);
  ObjectType = swift_getObjectType();
  v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 496))(ObjectType, v4);
  objc_msgSend(v5, sel_setLocale_, v7);

  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  v8 = objc_msgSend(v5, sel_stringFromPersonNameComponents_, v11);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

uint64_t PersonNameComponents.FormatStyle.Style.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

unint64_t PersonNameComponents.FormatStyle.Style.init(rawValue:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x302010004uLL >> (8 * result);
  if (result >= 5)
    LOBYTE(v2) = 4;
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PersonNameComponents.FormatStyle.Style@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return PersonNameComponents.FormatStyle.Style.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle.Style()
{
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle.Style()
{
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
  return RawRepresentable<>.encode(to:)();
}

uint64_t static PersonNameComponents.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C61636F6CLL;
  else
    return 0x656C797473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(_QWORD *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys, a2);
}

id protocol witness for FormatStyle.format(_:) in conformance PersonNameComponents.FormatStyle@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = PersonNameComponents.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance PersonNameComponents.FormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;

  *(_BYTE *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle(_QWORD *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents.FormatStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t (*PersonNameComponents.AttributedStyle.style.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*PersonNameComponents.AttributedStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void PersonNameComponents.AttributedStyle.format(_:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t ObjectType;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];

  v4 = *a1;
  v5 = *v2;
  v6 = *((_QWORD *)v2 + 2);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v7, sel_setStyle_, v5 + 1);
  ObjectType = swift_getObjectType();
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 496))(ObjectType, v6);
  objc_msgSend(v7, sel_setLocale_, v9);

  objc_msgSend(*(id *)(v4 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  v10 = objc_msgSend(v7, sel_annotatedStringFromPersonNameComponents_, v13);

  specialized static AttributeScope.scopeDescription.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(v10, v12, 0, v14);

  *a2 = v14[0];
}

uint64_t PersonNameComponents.FormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  void (*v7)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  _BYTE v40[144];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[18];
  _BYTE v60[144];
  _BYTE v61[152];

  v3 = *((_QWORD *)v1 + 2);
  Hasher._combine(_:)(*v1 + 1);
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v5(ObjectType, v3) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v7 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v7(v59, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
    Hasher._combine(_:)(1u);
    if (v41[0] == 2)
    {
      v8 = 0;
    }
    else
    {
      v8 = v41[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v8);
    v9 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v9 + 16));
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v11 = v9 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v11 += 16;
          --v10;
        }
        while (v10);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v44)
            goto LABEL_14;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          v12 = v45;
          if (!v45)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 = v45;
        if (!v45)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v13 = v46;
          if (!v46)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }
LABEL_23:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v13);
          swift_bridgeObjectRelease();
LABEL_24:
          v16 = v47;
          v15 = v48;
          v18 = v49;
          v17 = v50;
          v19 = v51;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v20 = v15;
            v21 = v18;
            v22 = v17;
            v23 = v19;
            v24 = v16;
            _CFObject.hash(into:)();
            if (v15)
              goto LABEL_26;
          }
          else
          {
            Hasher._combine(_:)(0);
            v29 = v19;
            v30 = v15;
            v31 = v18;
            v32 = v17;
            if (v15)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v25 = v15;
              _CFObject.hash(into:)();

              if (v18)
                goto LABEL_27;
              goto LABEL_32;
            }
          }
          Hasher._combine(_:)(0);
          if (v18)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v26 = v18;
            _CFObject.hash(into:)();

            if (v17)
              goto LABEL_28;
            goto LABEL_33;
          }
LABEL_32:
          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }
LABEL_34:
            Hasher._combine(_:)(0);
            v28 = 0;
LABEL_35:

            v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v33);
              swift_bridgeObjectRelease();
              v34 = v53;
              if (v53)
                goto LABEL_37;
            }
            else
            {
              Hasher._combine(_:)(0);
              v34 = v53;
              if (v53)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }
                  if (v57 == 2)
                  {
                    v37 = 0;
                  }
                  else
                  {
                    v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    v38 = 0;
                  }
                  else
                  {
                    v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    v38 = v39;
                  }
                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_41:
                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }
            Hasher._combine(_:)(0);
            if (v54)
              goto LABEL_38;
            goto LABEL_41;
          }
LABEL_33:
          Hasher._combine(_:)(0);
          if (v19)
            goto LABEL_29;
          goto LABEL_34;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v12);
        swift_bridgeObjectRelease();
        v13 = v46;
        if (!v46)
          goto LABEL_16;
        goto LABEL_23;
      }
      outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
      v14 = v40;
    }
    else
    {
      Hasher._combine(_:)(0);
      v14 = v41;
    }
    outlined retain of LocalePreferences(v14);
    if (!v43)
      goto LABEL_13;
    goto LABEL_20;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

uint64_t static PersonNameComponents.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.AttributedStyle.encode(to:)(_QWORD *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  v12 = *(_OWORD *)(v3 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v9;
  v16 = 0;
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
  v10 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    v15 = v12;
    v16 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, v6);
}

Swift::Int PersonNameComponents.FormatStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  _BYTE v40[144];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v59, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
  Hasher._combine(_:)(1u);
  if (v41[0] == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v41[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
    v13 = v41;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
    v13 = v40;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v43)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v44)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v45;
    if (!v45)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v11);
    swift_bridgeObjectRelease();
    v12 = v46;
    if (!v46)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v45;
  if (v45)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v46;
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  v15 = v47;
  v14 = v48;
  v17 = v49;
  v16 = v50;
  v18 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v14;
    v20 = v17;
    v21 = v16;
    v22 = v18;
    v23 = v15;
    _CFObject.hash(into:)();
    if (v14)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v18;
    v29 = v14;
    v30 = v17;
    v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v24 = v14;
      _CFObject.hash(into:)();

      if (v17)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v17;
    _CFObject.hash(into:)();

    if (v16)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v27 = 0;
LABEL_36:

  v32 = v52;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v32);
    swift_bridgeObjectRelease();
    v33 = v53;
    if (v53)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v54)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v33 = v53;
  if (!v53)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
  swift_bridgeObjectRelease();
  if (!v54)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v57 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v57 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v58 == 2)
  {
    v37 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t PersonNameComponents.AttributedStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys, a2);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;

  v16 = a4;
  v17 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v10 = v7;
    v11 = v16;
    v19 = 0;
    lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
    v12 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v18;
    v19 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v12);
    v14 = v18;
    *(_BYTE *)v11 = v13;
    *(_OWORD *)(v11 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.AttributedStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.AttributedStyle(_QWORD *a1)
{
  return PersonNameComponents.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents.FormatStyle()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  _QWORD v57[18];
  _BYTE v58[144];
  _BYTE v59[144];
  _BYTE v60[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v57, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)&v39);
  Hasher._combine(_:)(1u);
  if (v39 == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v39 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v39);
    if (!v41)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v43;
    if (!v43)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v11);
    swift_bridgeObjectRelease();
    v12 = v44;
    if (!v44)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v43;
  if (v43)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  v14 = v45;
  v13 = v46;
  v16 = v47;
  v15 = v48;
  v17 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v18 = v13;
    v19 = v16;
    v20 = v15;
    v21 = v17;
    v22 = v14;
    _CFObject.hash(into:)();
    if (v13)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v27 = v17;
    v28 = v13;
    v29 = v16;
    v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v23 = v13;
      _CFObject.hash(into:)();

      if (v16)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v16;
    _CFObject.hash(into:)();

    if (v15)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v15)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v26 = 0;
LABEL_35:

  v31 = v50;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
    swift_bridgeObjectRelease();
    v32 = v51;
    if (v51)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v52)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v32 = v51;
  if (!v51)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v32);
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v33 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v55 == 2)
  {
    v35 = 0;
  }
  else
  {
    v35 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v56 == 2)
  {
    v36 = 0;
  }
  else
  {
    v37 = v56 & 1;
    Hasher._combine(_:)(1u);
    v36 = v37;
  }
  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

void PersonNameComponents.ParseStrategy.parse(_:)(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v5;

    *a1 = v4;
  }
  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();

  }
}

uint64_t static PersonNameComponents.ParseStrategy.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.ParseStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int PersonNameComponents.ParseStrategy.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t PersonNameComponents.ParseStrategy.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void protocol witness for ParseStrategy.parse(_:) in conformance PersonNameComponents.ParseStrategy(uint64_t *a1@<X8>)
{
  PersonNameComponents.ParseStrategy.parse(_:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.ParseStrategy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t PersonNameComponents.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall PersonNameComponents.formatted()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String result;
  uint64_t v12;
  uint64_t v13[4];

  v1 = *v0;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v13);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v13[0];
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  LOBYTE(v13[0]) = 1;
  v13[1] = v4;
  v13[2] = v5;
  v12 = v1;
  v6 = PersonNameComponents.FormatStyle.format(_:)(&v12);
  v8 = v7;
  swift_release();
  v9 = (uint64_t)v6;
  v10 = v8;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t PersonNameComponents.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5)
    *a5 = v12;
  return result;
}

void PersonNameComponents.init(_:)(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v5;
    swift_bridgeObjectRelease();

    *a1 = v4;
  }
  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();

  }
}

uint64_t static FormatStyle<>.name(style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static LocaleCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v8);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  v6 = v8;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys, &unk_1E0F22598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys, &unk_1E0F22598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys, &unk_1E0F22598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys, &unk_1E0F22598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.Style, &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.Style, &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.Style, &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle.Style, &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }
  return result;
}

uint64_t specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int128 v2;
  char v3;
  __int128 v5;
  __int128 v6;

  if (*a1 == *a2)
  {
    v2 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = v2;
    v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v6, (uint64_t)&v5);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys, &unk_1E0F22708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys, &unk_1E0F22708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys, &unk_1E0F22708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys, &unk_1E0F22708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy.ParseError, &type metadata for PersonNameComponents.ParseStrategy.ParseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys, &unk_1E0F226C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys, &unk_1E0F226C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys, &unk_1E0F226C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle, &type metadata for PersonNameComponents.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle, &type metadata for PersonNameComponents.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle, &type metadata for PersonNameComponents.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle, &type metadata for PersonNameComponents.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.FormatStyle, &type metadata for PersonNameComponents.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.AttributedStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle, &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle, &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle, &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.AttributedStyle, &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.ParseStrategy(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy, (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy, &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy, &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy, &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy, &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.ParseStrategy, &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithTake for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle()
{
  return &type metadata for PersonNameComponents.FormatStyle;
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.FormatStyle.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181EE5BC4 + 4 * byte_18216F58D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181EE5BF8 + 4 * asc_18216F588[v4]))();
}

uint64_t sub_181EE5BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EE5C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EE5C08);
  return result;
}

uint64_t sub_181EE5C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EE5C1CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181EE5C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EE5C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle.Style()
{
  return &type metadata for PersonNameComponents.FormatStyle.Style;
}

uint64_t assignWithCopy for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v3;
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.AttributedStyle()
{
  return &type metadata for PersonNameComponents.AttributedStyle;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy()
{
  return &type metadata for PersonNameComponents.ParseStrategy;
}

void *type metadata accessor for PersonNameComponents.ParseStrategy.CodingKeys()
{
  return &unk_1E0F226C8;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy.ParseError()
{
  return &type metadata for PersonNameComponents.ParseStrategy.ParseError;
}

void *type metadata accessor for PersonNameComponents.AttributedStyle.CodingKeys()
{
  return &unk_1E0F22708;
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.AttributedStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181EE5D30 + 4 * byte_18216F597[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181EE5D64 + 4 * byte_18216F592[v4]))();
}

uint64_t sub_181EE5D64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EE5D6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EE5D74);
  return result;
}

uint64_t sub_181EE5D80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EE5D88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181EE5D8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EE5D94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PersonNameComponents.FormatStyle.CodingKeys()
{
  return &unk_1E0F22598;
}

uint64_t specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t _KeyValueCodingAndObservingSequence<>.changes<A>(for:options:)(_QWORD *a1, uint64_t a2)
{
  void *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = (uint64_t *)(*a1 + *MEMORY[0x1E0DEE2A8]);
  v5 = *v4;
  v6 = v4[1];
  type metadata accessor for KeyPath();
  v7 = v2;
  swift_retain();
  swift_dynamicCast();
  type metadata accessor for NSObject.KeyValueObservedChanges(0, v5, v6, v8);
  v9 = swift_allocObject();
  NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v7, v12, a2, v10);
  return v9;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges);
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return swift_task_switch();
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[3];
  v2 = v0[4];
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  v4 = *(_QWORD *)(v1 + 16);
  v3[2] = v4;
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v5;
  v3[4] = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[6] = v6;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  v7 = (_QWORD *)swift_task_alloc();
  v0[7] = v7;
  type metadata accessor for NSKeyValueObservedChange(255, v5, v8, v9);
  type metadata accessor for Optional();
  *v7 = v0;
  v7[1] = NSObject.KeyValueObservedChanges.Iterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = closure #1 in NSObject.KeyValueObservedChanges.Iterator.next();
  v6 = *(_OWORD *)(v0 + 96);
  v2 = swift_continuation_init();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = (uint64_t *)swift_task_alloc();
  *((_OWORD *)v4 + 1) = v6;
  v4[4] = v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 40));
  closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()((_QWORD *)(v3 + 16), v4[4], v4[2], v4[3]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 40));
  swift_task_dealloc();
  return swift_continuation_await();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 8))();
}

uint64_t closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next(), (uint64_t)v10);
  swift_release();
  return outlined destroy of TaskPriority?((uint64_t)v8);
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v0;

  NSObject.KeyValueObservedChanges.teardown()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v8);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSObject.KeyValueObservedChanges<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = *v2;
  return swift_task_switch();
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t *NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for NSObject.KeyValueObservedChanges.State(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer();
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 40) = 0;
  v9 = (os_unfair_lock_s *)(v8 + 40);
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
  v11 = v8 + 16;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v10;
  v4[2] = v8;
  swift_retain();
  os_unfair_lock_lock(v9);
  closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v11, a1, a2, a3, v4);
  os_unfair_lock_unlock(v9);
  swift_release();

  swift_release();
  return v4;
}

uint64_t partial apply for closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_OWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = v4;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t *v0;

  return closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(v0[4], v0[2], v0[3]);
}

void closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  _QWORD *v15;
  objc_class *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  objc_super v23;
  void *v24;
  void *v25;

  v8 = *a5;
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = (_QWORD *)swift_allocObject();
  v11 = *(_QWORD *)(v8 + 80);
  v10[2] = v11;
  v12 = *(_QWORD *)(v8 + 88);
  v10[3] = v12;
  v10[4] = v9;
  v25 = a2;
  type metadata accessor for NSObject();
  v13 = a2;
  swift_dynamicCast();
  v14 = v24;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = &protocol witness table for NSObject;
  v15[5] = partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:);
  v15[6] = v10;
  v16 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  v17 = objc_allocWithZone(v16);
  swift_unknownObjectWeakInit();
  v23.receiver = v17;
  v23.super_class = v16;
  swift_retain();
  v18 = objc_msgSendSuper2(&v23, sel_init);
  v19 = (void *)MEMORY[0x186DA82AC]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  v20 = v14;
  swift_retain();
  v21 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v20, a3, a4, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v15);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v19);
  swift_release();
  swift_release();

  *(_QWORD *)(a1 + 8) = v18;
}

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KeyValueObservedChanges.send(_:)(a2, v4, v5, v6);
    return swift_release();
  }
  return result;
}

uint64_t NSObject.KeyValueObservedChanges.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  uint64_t (*v26)(uint64_t *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  v5 = *v4;
  v41 = *(_QWORD *)(*v4 + 88);
  v42 = a1;
  v6 = type metadata accessor for NSKeyValueObservedChange(255, v41, a3, a4);
  v7 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)&v37 - v8;
  v38 = v9;
  type metadata accessor for UnsafeContinuation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v37 = (_QWORD **)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v43 = (char *)&v37 - v14;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19);
  v21 = (_QWORD **)((char *)&v37 - v20);
  v22 = (os_unfair_lock_s *)v4[2];
  v23 = *(_QWORD *)(v5 + 80);
  v24 = v22 + 4;
  v25 = v22 + 10;
  os_unfair_lock_lock(v22 + 10);
  closure #1 in NSObject.KeyValueObservedChanges.send(_:)(v24, v42, v23, v41, v21);
  os_unfair_lock_unlock(v25);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v18, v21, v15);
  v42 = v11;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v18, 1, TupleTypeMetadata2) == 1)
  {
    v26 = *(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8);
    v26(v21, v15);
    return v26(v18, v15);
  }
  else
  {
    v28 = *(int *)(TupleTypeMetadata2 + 48);
    v29 = v43;
    v30 = &v43[v28];
    v31 = (char *)v18 + v28;
    v32 = *v18;
    *(_QWORD *)v43 = v32;
    v33 = *(_QWORD *)(v6 - 8);
    v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v34(&v29[v28], v31, v6);
    v35 = (char *)v37 + *(int *)(TupleTypeMetadata2 + 48);
    *v37 = v32;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v35, v30, v6);
    v36 = v39;
    v34(v39, v35, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v6);
    (*(void (**)(_QWORD, char *, uint64_t))(v40 + 32))(*(_QWORD *)(*(_QWORD *)(v32 + 64) + 40), v36, v38);
    swift_continuation_resume();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, TupleTypeMetadata2);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v21, v15);
  }
}

uint64_t NSObject.KeyValueObservedChanges.deinit()
{
  uint64_t v0;

  NSObject.KeyValueObservedChanges.teardown()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall NSObject.KeyValueObservedChanges.teardown()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for NSKeyValueObservedChange(255, *(_QWORD *)(*v2 + 88), v0, v1);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - v6;
  v8 = v2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
  v10 = *(char **)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 32);
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v11;
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 40));
  if (v10)
  {
    v12 = (void *)MEMORY[0x186DA9F5C](&v10[OBJC_IVAR____NSKeyValueObservation_helper]);
    v13 = v10;
    if (v12)
    {
      NSKeyValueObservation.Helper.invalidate()();

    }
    swift_unknownObjectWeakAssign();

  }
  v14 = type metadata accessor for UnsafeContinuation();
  v15 = swift_bridgeObjectRetain();
  v16 = MEMORY[0x186DA4B68](v15, v14);
  if (!v16)
    goto LABEL_9;
  v17 = v16;
  if (v16 >= 1)
  {
    v18 = 0;
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    do
    {
      v20 = *(_QWORD *)(v9 + 8 * v18++ + 32);
      v19(v7, 1, 1, v3);
      (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v20 + 64) + 40), v7, v4);
      swift_continuation_resume();
    }
    while (v17 != v18);
LABEL_9:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t NSObject.KeyValueObservedChanges.__deallocating_deinit()
{
  NSObject.KeyValueObservedChanges.teardown()();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.send(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t TupleTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a2;
  v8 = type metadata accessor for NSKeyValueObservedChange(0, a4, a3, a4);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v42 - v9;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v42 - v17;
  if (!a1[1])
  {
    type metadata accessor for UnsafeContinuation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a5, 1, 1, TupleTypeMetadata2);
  }
  v43 = a5;
  v19 = *a1;
  if (MEMORY[0x186DA4B5C](*a1, v8, v16) < 1)
  {
    v32 = a1[2];
    v33 = type metadata accessor for UnsafeContinuation();
    if (!MEMORY[0x186DA4B5C](v32, v33))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, v44, v8);
      type metadata accessor for Array();
      Array._makeUniqueAndReserveCapacityIfNotUnique()();
      Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*a1 + 16));
      Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v41 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v43, 1, 1, v41);
    }
    result = MEMORY[0x186DA4B68](v32, v33);
    if (result)
    {
      v34 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v34);
      result = Collection.first.getter();
      v35 = v46;
      if (v46)
      {
        MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v34);
        RangeReplaceableCollection.removeFirst(_:)(1);
        v36 = swift_getTupleTypeMetadata2();
        v38 = v43;
        v37 = v44;
        v39 = (char *)v43 + *(int *)(v36 + 48);
        *v43 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v39, v37, v8);
        return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v38, 0, 1, v36);
      }
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  result = MEMORY[0x186DA4B5C](v19, v8);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  v42 = v5;
  if (result + 1 < 8)
  {
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, v44, v8);
    v22 = type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*a1 + 16));
    Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    v23 = *a1;
    v24 = a1[2];
    v25 = type metadata accessor for UnsafeContinuation();
    if (MEMORY[0x186DA4B5C](v24, v25) < 1)
    {
      v40 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v43, 1, 1, v40);
    }
    result = MEMORY[0x186DA4B68](v24, v25);
    if (result)
    {
      v26 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v26);
      result = Collection.first.getter();
      v27 = v46;
      if (!v46)
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v26);
      RangeReplaceableCollection.removeFirst(_:)(1);
      *v43 = v27;
      result = MEMORY[0x186DA4B68](v23, v8);
      if (result)
      {
        MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v22);
        Collection.first.getter();
        v28 = v45;
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v14, 1, v8);
        if ((_DWORD)result != 1)
        {
          v29 = swift_getTupleTypeMetadata2();
          v30 = v43;
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)v43 + *(int *)(v29 + 48), v14, v8);
          MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v22);
          RangeReplaceableCollection.removeFirst(_:)(1);
          return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v30, 0, 1, v29);
        }
        goto LABEL_27;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = MEMORY[0x186DA4B68](v19, v8);
  if (!result)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v21);
  Collection.first.getter();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v18, 1, v8);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v21);
    RangeReplaceableCollection.removeFirst(_:)(1);
    goto LABEL_8;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v7 = type metadata accessor for NSKeyValueObservedChange(255, a4, a3, a4);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v20 - v14;
  v16 = *a1;
  if (MEMORY[0x186DA4B5C](*a1, v7, v13) < 1)
  {
    v20[3] = a2;
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a1[2] + 16));
    return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  }
  else
  {
    result = MEMORY[0x186DA4B68](v16, v7);
    if (result)
    {
      v20[0] = a2;
      v20[1] = v4;
      v18 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v18);
      Collection.first.getter();
      v19 = *(_QWORD *)(v7 - 8);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v7);
      if ((_DWORD)result != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v11, v7);
        MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v18);
        RangeReplaceableCollection.removeFirst(_:)(1);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v7);
        (*(void (**)(_QWORD, char *, uint64_t))(v9 + 32))(*(_QWORD *)(*(_QWORD *)(v20[0] + 64) + 40), v15, v8);
        return swift_continuation_resume();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t NSObject.KeyValueObservedChanges.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in NSObject.KeyValueObservedChanges<A, B>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSObject.KeyValueObservedChanges<A, B>@<X0>(_QWORD *a1@<X8>)
{
  NSObject.KeyValueObservedChanges.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t type metadata completion function for NSObject.KeyValueObservedChanges()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for NSObject.KeyValueObservedChanges()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges.Iterator);
}

uint64_t destroy for NSObject.KeyValueObservedChanges.State(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservedChanges.State(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NSObject.KeyValueObservedChanges.State(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservedChanges.State(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges.State);
}

uint64_t sub_181EE7AA8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t sub_181EE7C20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t sub_181EE7CB4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_181EE7CD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(a1, a2);
}

uint64_t sub_181EE7D08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRun(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*a1 == *a2 && (v2 = a2[2], v3 = a1[2], (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0))
    return specialized static Set.== infix(_:_:)(v3, v2);
  else
    return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._InternalRun()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._InternalRun(uint64_t a1)
{
  Swift::UInt *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v4 = v1[2];
  Hasher._combine(_:)(*v1);
  specialized Dictionary<>.hash(into:)(a1, v3);
  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._InternalRun()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for RopeElement.summary.getter in conformance AttributedString._InternalRun(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = 1;
  a1[1] = v2;
}

void protocol witness for RopeElement.rebalance(nextNeighbor:) in conformance AttributedString._InternalRun()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for RopeElement.rebalance(prevNeighbor:) in conformance AttributedString._InternalRun()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t *protocol witness for RopeElement.split(at:) in conformance AttributedString._InternalRun@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  if (*result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *v2 - v3;
    if (*v2 >= v3)
    {
      v5 = v2[1];
      v6 = v2[2];
      *v2 = v3;
      *a2 = v4;
      a2[1] = v5;
      a2[2] = v6;
      swift_bridgeObjectRetain();
      return (uint64_t *)swift_bridgeObjectRetain();
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static RopeSummary.maxNodeSize.getter in conformance AttributedString._InternalRun.Summary()
{
  return 15;
}

BOOL protocol witness for RopeSummary.isZero.getter in conformance AttributedString._InternalRun.Summary()
{
  _OWORD *v0;

  return *v0 == 0;
}

_QWORD *protocol witness for RopeSummary.add(_:) in conformance AttributedString._InternalRun.Summary(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (__OFADD__(*v1, *result))
  {
    __break(1u);
  }
  else
  {
    v2 = result[1];
    *v1 += *result;
    v3 = v1[1];
    v4 = __OFADD__(v3, v2);
    v5 = v3 + v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for RopeSummary.subtract(_:) in conformance AttributedString._InternalRun.Summary(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (__OFSUB__(*v1, *result))
  {
    __break(1u);
  }
  else
  {
    v2 = result[1];
    *v1 -= *result;
    v3 = v1[1];
    v4 = __OFSUB__(v3, v2);
    v5 = v3 - v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedString._InternalRun.Summary(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRun.Summary, &type metadata for AttributedString._InternalRun.Summary);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRun.Summary, &type metadata for AttributedString._InternalRun.Summary);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun and conformance AttributedString._InternalRun()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRun, &type metadata for AttributedString._InternalRun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun);
  }
  return result;
}

void one-time initialization function for recognizedEnglishPronouns()
{
  recognizedEnglishPronouns._rawValue = &outlined read-only object #0 of one-time initialization function for recognizedEnglishPronouns;
}

double one-time initialization function for recognizedNominativePronouns()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1820FEEE0;
  v1 = String.lowercased()();
  *(_QWORD *)(v0 + 32) = 29541;
  *(_QWORD *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 64) = 1634495589;
  *(_QWORD *)(v0 + 72) = 0xE400000000000000;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_QWORD *)(v0 + 176) = 1;
  v2 = String.lowercased()();
  *(_QWORD *)(v0 + 184) = 29541;
  *(_QWORD *)(v0 + 192) = 0xE200000000000000;
  *(Swift::String *)(v0 + 200) = v2;
  *(_QWORD *)(v0 + 216) = 7121347;
  *(_QWORD *)(v0 + 224) = 0xA300000000000000;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_QWORD *)(v0 + 328) = 2;
  v3 = String.lowercased()();
  *(_QWORD *)(v0 + 336) = 29286;
  *(_QWORD *)(v0 + 344) = 0xE200000000000000;
  *(Swift::String *)(v0 + 352) = v3;
  *(_QWORD *)(v0 + 368) = 1701604453;
  *(_QWORD *)(v0 + 376) = 0xE400000000000000;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_QWORD *)(v0 + 480) = 1;
  v4 = String.lowercased()();
  *(_QWORD *)(v0 + 488) = 29286;
  *(_QWORD *)(v0 + 496) = 0xE200000000000000;
  *(Swift::String *)(v0 + 504) = v4;
  *(_QWORD *)(v0 + 520) = 27753;
  *(_QWORD *)(v0 + 528) = 0xE200000000000000;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 584) = 0u;
  *(_OWORD *)(v0 + 600) = 0u;
  *(_OWORD *)(v0 + 616) = 0u;
  *(_QWORD *)(v0 + 632) = 2;
  v5 = String.lowercased()();
  *(_QWORD *)(v0 + 640) = 29801;
  *(_QWORD *)(v0 + 648) = 0xE200000000000000;
  *(Swift::String *)(v0 + 656) = v5;
  *(_QWORD *)(v0 + 672) = 6907244;
  *(_QWORD *)(v0 + 680) = 0xE300000000000000;
  *(_OWORD *)(v0 + 688) = 0u;
  *(_OWORD *)(v0 + 704) = 0u;
  *(_OWORD *)(v0 + 720) = 0u;
  *(_OWORD *)(v0 + 736) = 0u;
  *(_OWORD *)(v0 + 752) = 0u;
  *(_OWORD *)(v0 + 768) = 0u;
  *(_QWORD *)(v0 + 784) = 1;
  v6 = String.lowercased()();
  *(_QWORD *)(v0 + 792) = 29801;
  *(_QWORD *)(v0 + 800) = 0xE200000000000000;
  *(Swift::String *)(v0 + 808) = v6;
  *(_QWORD *)(v0 + 824) = 6911340;
  *(_QWORD *)(v0 + 832) = 0xE300000000000000;
  *(_OWORD *)(v0 + 840) = 0u;
  *(_OWORD *)(v0 + 856) = 0u;
  *(_OWORD *)(v0 + 872) = 0u;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(_QWORD *)(v0 + 936) = 2;
  v7 = String.lowercased()();
  *(_QWORD *)(v0 + 944) = 29808;
  *(_QWORD *)(v0 + 952) = 0xE200000000000000;
  *(Swift::String *)(v0 + 960) = v7;
  *(_QWORD *)(v0 + 976) = 6384741;
  *(_QWORD *)(v0 + 984) = 0xE300000000000000;
  *(_OWORD *)(v0 + 992) = 0u;
  *(_OWORD *)(v0 + 1008) = 0u;
  *(_OWORD *)(v0 + 1024) = 0u;
  *(_OWORD *)(v0 + 1040) = 0u;
  *(_OWORD *)(v0 + 1056) = 0u;
  *(_OWORD *)(v0 + 1072) = 0u;
  *(_QWORD *)(v0 + 1088) = 1;
  v8 = String.lowercased()();
  *(_QWORD *)(v0 + 1096) = 29808;
  *(_QWORD *)(v0 + 1104) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1112) = v8;
  *(_QWORD *)(v0 + 1128) = 6646885;
  *(_QWORD *)(v0 + 1136) = 0xE300000000000000;
  *(_OWORD *)(v0 + 1144) = 0u;
  *(_OWORD *)(v0 + 1160) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1208) = 0u;
  *(_OWORD *)(v0 + 1224) = 0u;
  *(_QWORD *)(v0 + 1240) = 2;
  v9 = String.lowercased()();
  *(_QWORD *)(v0 + 1248) = 29281;
  *(_QWORD *)(v0 + 1256) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1264) = v9;
  *(_QWORD *)(v0 + 1280) = 2329511897;
  *(_QWORD *)(v0 + 1288) = 0xA400000000000000;
  *(_OWORD *)(v0 + 1296) = 0u;
  *(_OWORD *)(v0 + 1312) = 0u;
  *(_OWORD *)(v0 + 1328) = 0u;
  *(_OWORD *)(v0 + 1344) = 0u;
  *(_OWORD *)(v0 + 1360) = 0u;
  *(_OWORD *)(v0 + 1376) = 0u;
  *(_QWORD *)(v0 + 1392) = 1;
  v10 = String.lowercased()();
  *(_QWORD *)(v0 + 1400) = 29281;
  *(_QWORD *)(v0 + 1408) = 0xE200000000000000;
  *(Swift::String *)(v0 + 1416) = v10;
  *(_QWORD *)(v0 + 1432) = 2295957465;
  *(_QWORD *)(v0 + 1440) = 0xA400000000000000;
  result = 0.0;
  *(_OWORD *)(v0 + 1448) = 0u;
  *(_OWORD *)(v0 + 1464) = 0u;
  *(_OWORD *)(v0 + 1480) = 0u;
  *(_OWORD *)(v0 + 1496) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(_OWORD *)(v0 + 1528) = 0u;
  *(_QWORD *)(v0 + 1544) = 2;
  recognizedNominativePronouns._rawValue = (void *)v0;
  return result;
}

