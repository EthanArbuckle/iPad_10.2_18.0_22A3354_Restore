void sub_19B734AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B734B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B734CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B734E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F0C4015DEEB49);
  _Unwind_Resume(a1);
}

void AVAudioPlayerCpp::AVAudioPlayerCpp(AVAudioPlayerCpp *this)
{
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 130) = 0;
  *(_QWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((_BYTE *)this + 444) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 120) = 0;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_OWORD *)this + 33) = 0u;
  AudioSessionCreatePrimarySession_Priv();
}

void sub_19B734F4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 536);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

_BYTE *tryToSetPlayerSessionListener(AVAudioPlayer *a1)
{
  _BYTE *result;
  _BYTE *v3;
  void *v4;

  result = -[AVAudioPlayer impl](a1, "impl");
  if (!result[72])
  {
    v3 = result;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    result = (_BYTE *)objc_msgSend(v4, "addObserver:selector:name:object:", a1, sel_handleInterruption_, *MEMORY[0x1E0CFF000], *((_QWORD *)v3 + 8));
    v3[72] = 1;
  }
  return result;
}

void populatePlayerSettings(AudioPlayerImpl *a1)
{
  double *localPlayer;
  double v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  id v12;
  unsigned int v13;
  id *v14;
  size_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSDictionary *actualSettings;
  AVAudioFormat *format;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[32];
  _QWORD v26[33];

  v26[32] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  localPlayer = (double *)a1->_localPlayer;
  v3 = localPlayer[4];
  v4 = *((unsigned int *)localPlayer + 10);
  v5 = *((unsigned int *)localPlayer + 11);
  v7 = *((unsigned int *)localPlayer + 15);
  v6 = *((unsigned int *)localPlayer + 16);
  if (AudioPlayerImpl_GetProperty<unsigned int>((AVAudioPlayerCpp *)localPlayer, 1651663220, (_DWORD *)&v24 + 1))
  {
    v26[0] = CFSTR("AVFormatIDKey");
    v25[0] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", v4);
    v26[1] = CFSTR("AVSampleRateKey");
    v25[1] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", v3);
    v26[2] = CFSTR("AVNumberOfChannelsKey");
    v25[2] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", v7);
    if ((_DWORD)v4 == 1819304813)
    {
      v26[3] = CFSTR("AVLinearPCMBitDepthKey");
      v25[3] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", v6);
      v26[4] = CFSTR("AVLinearPCMIsFloatKey");
      v25[4] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", v5 & 1);
      v26[5] = CFSTR("AVLinearPCMIsBigEndianKey");
      v25[5] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", (v5 >> 1) & 1);
      v26[6] = CFSTR("AVLinearPCMIsNonInterleaved");
      v25[6] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", (v5 >> 5) & 1);
      v8 = 7;
    }
    else
    {
      v8 = 3;
    }
    v9 = AudioPlayerImpl_GetProperty<unsigned int>((AVAudioPlayerCpp *)a1->_localPlayer, 1718909296, &v24);
    v10 = v24;
    if ((_DWORD)v24)
      v11 = v9;
    else
      v11 = 0;
    if (v11 == 1)
    {
      v26[v8] = CFSTR("AVAudioFileTypeKey");
      v25[v8++] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", v10);
    }
    v26[v8] = CFSTR("AVEncoderBitRateKey");
    v12 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v25[v8] = objc_msgSend(v12, "initWithUnsignedInteger:", HIDWORD(v24));
    v13 = v8 + 1;
    v14 = (id *)a1->_localPlayer;
    v15 = objc_msgSend(v14[64], "layoutSize");
    v16 = objc_msgSend(v14[64], "layout");
    if (v16)
    {
      if (v15)
      {
        v17 = (const void *)v16;
        v18 = malloc_type_malloc(v15, 0xBF659F05uLL);
        if (v18)
        {
          v19 = v18;
          memcpy(v18, v17, v15);
          v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v15);
          memcpy((void *)objc_msgSend(v20, "mutableBytes"), v19, v15);
          free(v19);
          v26[v13] = CFSTR("AVChannelLayoutKey");
          v25[v13] = v20;
          v13 = v8 + 2;
        }
      }
    }
    actualSettings = a1->_actualSettings;
    if (actualSettings)

    a1->_actualSettings = (NSDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:count:", v25, v26, v13);
    format = a1->_format;
    if (format)

    v23 = 0;
    a1->_format = -[AVAudioFormat initWithSettings:]([AVAudioFormat alloc], "initWithSettings:", a1->_actualSettings);
    do

    while (v13 != v23);
  }
}

uint64_t AudioPlayerImpl_GetProperty<unsigned int>(AVAudioPlayerCpp *a1, int a2, _DWORD *a3)
{
  BOOL v4;
  uint64_t result;
  unint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  if (AVAudioPlayerCpp::GetProperty(a1, a2, &v6, (const void **)&v7))
    v4 = 0;
  else
    v4 = v6 == 4;
  result = v4;
  if (v4)
    *a3 = *(_DWORD *)v7;
  return result;
}

uint64_t AVAudioPlayerCpp::GetProperty(AVAudioPlayerCpp *this, int a2, unint64_t *a3, const void **a4)
{
  uint64_t result;
  char *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  OpaqueAudioFileID *v14;
  uint64_t v15;
  double v16;
  UInt32 ioDataSize;
  uint64_t outPropertyData;

  result = 561017456;
  if (a2 <= 1701735795)
  {
    if (a2 <= 1667788402)
    {
      switch(a2)
      {
        case 1634951780:
          *a3 = 40;
          v8 = (char *)this + 32;
          break;
        case 1651663220:
          *a3 = 4;
          v8 = (char *)this + 504;
          break;
        case 1667787887:
          *a3 = objc_msgSend(*((id *)this + 64), "layoutSize");
          v8 = (char *)objc_msgSend(*((id *)this + 64), "layout");
          break;
        default:
          return result;
      }
      goto LABEL_50;
    }
    if (a2 > 1685350764)
    {
      if (a2 != 1685350765)
      {
        if (a2 != 1685418593)
          return result;
        outPropertyData = 0;
        v14 = (OpaqueAudioFileID *)*((_QWORD *)this + 20);
        if (v14 && !*((_QWORD *)this + 33))
        {
          ioDataSize = 8;
          AudioFileGetProperty(v14, 0x65647572u, &ioDataSize, &outPropertyData);
          *((_QWORD *)this + 31) = outPropertyData;
        }
        *a3 = 8;
        v8 = (char *)this + 248;
        goto LABEL_50;
      }
      v15 = mach_absolute_time();
      v8 = (char *)this + 360;
      *((double *)this + 45) = (double)v15 * 0.0000000416666667;
    }
    else
    {
      if (a2 == 1667788403)
      {
        *a3 = 4;
        v8 = (char *)this + 60;
        goto LABEL_50;
      }
      if (a2 != 1668573549)
        return result;
      v9 = 0.0;
      if (!*((_BYTE *)this + 313))
      {
        pthread_mutex_lock(&avap_mutex);
        v10 = *((double *)this + 4);
        AVAudioPlayerCpp::getQueueTime(this, 1);
        v11 = *((double *)this + 41);
        if (*((_BYTE *)this + 463))
        {
          v12 = *((_QWORD *)this + 58);
          v13 = (double)v12;
          if (*((_DWORD *)this + 74))
          {
            v11 = fmod(*((long double *)this + 41), v13);
          }
          else
          {
            if (v11 <= v13)
              v16 = *((double *)this + 41);
            else
              v16 = (double)v12;
            v11 = fmax(v16, 0.0);
          }
        }
        pthread_mutex_unlock(&avap_mutex);
        v9 = v11 / v10;
      }
      v8 = (char *)this + 352;
      *((double *)this + 44) = v9;
    }
    *a3 = 8;
    goto LABEL_50;
  }
  if (a2 > 1885433375)
  {
    if (a2 > 1918989412)
    {
      if (a2 == 1918989413)
      {
        *a3 = 8;
        v8 = (char *)this + 224;
      }
      else
      {
        if (a2 != 1987013749)
          return result;
        *a3 = 8;
        v8 = (char *)this + 208;
      }
    }
    else if (a2 == 1885433376)
    {
      *a3 = 8;
      v8 = (char *)this + 232;
    }
    else
    {
      if (a2 != 1886157119)
        return result;
      *a3 = 4;
      v8 = (char *)this + 308;
    }
  }
  else if (a2 > 1718909295)
  {
    if (a2 == 1718909296)
    {
      *a3 = 4;
      v8 = (char *)this + 168;
    }
    else
    {
      if (a2 != 1819242352)
        return result;
      *a3 = 4;
      v8 = (char *)this + 296;
    }
  }
  else if (a2 == 1701735796)
  {
    *a3 = 4;
    v8 = (char *)this + 376;
  }
  else
  {
    if (a2 != 1701737076)
      return result;
    *a3 = 4;
    v8 = (char *)this + 240;
  }
LABEL_50:
  result = 0;
  *a4 = v8;
  return result;
}

void sub_19B7356EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::setupAudioFile(AVAudioPlayerCpp *this)
{
  _OWORD *v2;
  uint64_t Property;
  __int128 v4;
  size_t v5;
  void *v6;
  size_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  void *v17;
  double v19[2];
  UInt32 ioPropertyDataSize;
  UInt32 isWritable;
  UInt32 ioDataSize;

  ioDataSize = 40;
  v2 = (_OWORD *)((char *)this + 72);
  Property = AudioFileGetProperty(*((AudioFileID *)this + 20), 0x64666D74u, &ioDataSize, (char *)this + 72);
  if (!(_DWORD)Property)
  {
    v4 = *(_OWORD *)((char *)this + 88);
    *((_OWORD *)this + 2) = *v2;
    *((_OWORD *)this + 3) = v4;
    *((_QWORD *)this + 8) = *((_QWORD *)this + 13);
    isWritable = 0;
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x6D676963u, &ioDataSize, &isWritable))
    {
      v5 = ioDataSize;
      if (ioDataSize)
      {
        *((_QWORD *)this + 15) = ioDataSize;
        v6 = malloc_type_malloc(v5, 0x2DA6F18CuLL);
        *((_QWORD *)this + 16) = v6;
        if (v6)
          AudioFileGetProperty(*((AudioFileID *)this + 20), 0x6D676963u, &ioDataSize, v6);
        else
          *((_QWORD *)this + 15) = 0;
      }
    }
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x666C7374u, &ioDataSize, &isWritable)
      && ioDataSize >= 0x60)
    {
      v7 = ioDataSize / 0x30uLL;
      *((_DWORD *)this + 34) = v7;
      v8 = malloc_type_calloc(v7, 0x30uLL, 0x100004064842E6AuLL);
      *((_QWORD *)this + 18) = v8;
      if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x666C7374u, &ioDataSize, v8))
      {
        LODWORD(v19[0]) = 0;
        ioPropertyDataSize = 4;
        if (!AudioFormatGetProperty(0x6670666Cu, ioDataSize, *((const void **)this + 18), &ioPropertyDataSize, v19))
        {
          v9 = LODWORD(v19[0]);
          *((_DWORD *)this + 38) = LODWORD(v19[0]);
          v10 = *((_QWORD *)this + 18) + 48 * v9;
          v11 = *(_QWORD *)(v10 + 32);
          v12 = *(_OWORD *)(v10 + 16);
          *((_OWORD *)this + 2) = *(_OWORD *)v10;
          *((_OWORD *)this + 3) = v12;
          *((_QWORD *)this + 8) = v11;
          v13 = *(unsigned int *)(v10 + 40);
          if (v13 <= 0xFFFEFFFF && (v13 & 0xFFFEFFFF) != 0)
            *((_QWORD *)this + 64) = -[AVAudioChannelLayout initWithLayoutTag:]([AVAudioChannelLayout alloc], "initWithLayoutTag:", v13);
        }
      }
    }
    ioDataSize = 4;
    AudioFormatGetProperty(0x66646570u, 0x28u, (char *)this + 32, &ioDataSize, (char *)this + 112);
    ioDataSize = 16;
    if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706E666Fu, &ioDataSize, v19))
    {
      *(_OWORD *)((char *)this + 264) = *(_OWORD *)v19;
      if (*((int *)this + 69) >= 1)
      {
        ioDataSize = 8;
        *((_QWORD *)this + 25) = 0;
        AudioFileGetProperty(*((AudioFileID *)this + 20), 0x70636E74u, &ioDataSize, (char *)this + 200);
      }
    }
    v14 = *((_QWORD *)this + 33);
    if (v14)
    {
      v15 = *((double *)this + 9);
      v16 = (double)v14 / v15;
      *((_WORD *)this + 231) = 257;
      *((_QWORD *)this + 58) = vcvtmd_s64_f64((double)v14 * (*((double *)this + 4) / v15) + 0.5);
    }
    else
    {
      v19[0] = 0.0;
      ioDataSize = 8;
      AudioFileGetProperty(*((AudioFileID *)this + 20), 0x65647572u, &ioDataSize, v19);
      v16 = v19[0];
    }
    *((double *)this + 31) = v16;
    if (!*((_QWORD *)this + 64)
      && !AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x636D6170u, &ioDataSize, &isWritable)
      && ioDataSize)
    {
      v17 = malloc_type_calloc(1uLL, ioDataSize, 0x59E107AFuLL);
      if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x636D6170u, &ioDataSize, v17))
        *((_QWORD *)this + 64) = -[AVAudioChannelLayout initWithLayout:]([AVAudioChannelLayout alloc], "initWithLayout:", v17);
      free(v17);
    }
    ioDataSize = 8;
    if (AudioFileGetProperty(*((AudioFileID *)this + 20), 0x6C6F7564u, &ioDataSize, (char *)this + 16))
      *((_QWORD *)this + 2) = 0;
    ioDataSize = 4;
    AudioFileGetProperty(*((AudioFileID *)this + 20), 0x66666D74u, &ioDataSize, (char *)this + 168);
  }
  return Property;
}

uint64_t CAStreamBasicDescription::IdentifyCommonPCMFormat(_DWORD *a1, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v8;
  BOOL v9;

  if (a1[2] != 1819304813)
    return 0;
  if (a1[5] != 1)
    return 0;
  v2 = a1[6];
  if (v2 != a1[4])
    return 0;
  v3 = a1[8];
  if (v2 < v3 >> 3)
    return 0;
  v4 = a1[7];
  if (!v4)
    return 0;
  v5 = a1[3];
  if ((v5 & 0x20) == 0)
  {
    v9 = v2 == v2 / v4 * v4;
    v2 /= v4;
    if (!v9)
      return 0;
  }
  v6 = 0;
  if ((v5 & 2) == 0 && 8 * v2 == v3)
  {
    if ((v5 & 1) != 0)
    {
      if ((v5 & 0x1F84) != 0)
        return 0;
      if (v2 == 4)
        v6 = 1;
      else
        v6 = 4 * (v2 == 8);
    }
    else if ((v5 & 4) != 0)
    {
      v8 = (v5 >> 7) & 0x3F;
      if (v8 == 24 && v2 == 4)
      {
        v6 = 3;
      }
      else if (v8 || v2 != 4)
      {
        v9 = v2 == 2 && v8 == 0;
        if (v9)
          v6 = 2;
        else
          v6 = 0;
      }
      else
      {
        v6 = 5;
      }
    }
    else
    {
      v6 = 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t UTItoFileType(NSString *a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  v2 = 1095321155;
  if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeAIFF"))) == NSOrderedSame)
    return 1095321158;
  if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeAIFC"))))
  {
    if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeWAVE"))))
    {
      if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeMPEG4"))))
      {
        if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeAppleM4A"))))
        {
          if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeCoreAudioFormat"))))
          {
            if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeMPEGLayer3"))))
            {
              if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeAC3"))))
              {
                if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileTypeSunAU"))))
                {
                  if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileType3GPP"))))
                  {
                    if (-[NSString compare:](a1, "compare:", FileTypeConstant(CFSTR("AVFileType3GPP2"))))
                      return 0;
                    else
                      return 862416946;
                  }
                  else
                  {
                    return 862417008;
                  }
                }
                else
                {
                  return 1315264596;
                }
              }
              else
              {
                return 1633889587;
              }
            }
            else
            {
              return 1297106739;
            }
          }
          else
          {
            return 1667327590;
          }
        }
        else
        {
          return 1832149350;
        }
      }
      else
      {
        return 1836069990;
      }
    }
    else
    {
      return 1463899717;
    }
  }
  return v2;
}

void sub_19B736540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CAStreamBasicDescription::CAStreamBasicDescription(uint64_t result, int a2, int a3, int a4, double a5)
{
  BOOL v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a3)
  {
    case 1:
      v5 = a4 == 0;
      v6 = 41;
      v7 = 9;
      goto LABEL_18;
    case 2:
      if (a4)
        v6 = 12;
      else
        v6 = 44;
      v11 = 2 * a2;
      if (!a4)
        v11 = 2;
      v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_24;
    case 3:
      v5 = a4 == 0;
      v6 = 3116;
      v7 = 3084;
      goto LABEL_18;
    case 4:
      if (a4)
        v6 = 9;
      else
        v6 = 41;
      v12 = 8 * a2;
      if (!a4)
        v12 = 8;
      v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_24;
    case 5:
      v5 = a4 == 0;
      v6 = 44;
      v7 = 12;
LABEL_18:
      if (!v5)
        v6 = v7;
      v13 = 4 * a2;
      if (v5)
        v13 = 4;
      v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_24:
      LODWORD(v10) = a2;
      v8 = 1819304813;
      break;
    default:
      v8 = 0;
      v6 = 0;
      v9 = 0;
      a5 = 0.0;
      v10 = 0;
      break;
  }
  *(double *)result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(_QWORD *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void CAException::~CAException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1AC5BD4);
}

const char *CAException::what(CAException *this)
{
  return "CAException";
}

void sub_19B736A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19B736AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B736B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B736BAC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B736C30(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7375C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B737684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B737790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1A1AC5BD4](v9, 0x10B1C4016FEDC95);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7379B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x1A1AC5BD4](v3, 0x10B1C40D9523570);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  if (*(_BYTE *)(a1 + 8))
    std::recursive_mutex::unlock(*(std::recursive_mutex **)a1);
  return a1;
}

void AVAudioGenericIONodeImpl::AVAudioGenericIONodeImpl(AVAudioGenericIONodeImpl *this, uint64_t a2, AVAudioEngineManualRenderingMode a3)
{
  uint64_t v5;
  AudioComponentDescription v6;

  *(_OWORD *)&v6.componentType = xmmword_19B85A180;
  v6.componentFlagsMask = 0;
  v5 = AVAudioNodeImpl::AVAudioNodeImpl((uint64_t)this, 0, &v6, 0);
  *(_QWORD *)v5 = &off_1E3BE8D68;
  *(_BYTE *)(v5 + 72) = 1;
  *(_QWORD *)(v5 + 80) = a2;
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v5 + 176) + 184))(*(_QWORD *)(v5 + 176), a2 == 0);
  *((_BYTE *)this + 49) = a2 == 0;
}

void sub_19B737AB4(_Unwind_Exception *a1)
{
  id *v1;

  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  _Unwind_Resume(a1);
}

void AVAudioUnitImpl::~AVAudioUnitImpl(id *this)
{
  *this = &off_1E3BE6C98;

  this[2] = 0;
  AVAudioNodeImpl::~AVAudioNodeImpl(this);
}

{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AVAudioNodeImpl::AVAE_CheckNodeHasEngine(uint64_t this)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(this + 168) && !*(_QWORD *)(this + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v1 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v3 = "AVAEInternal.h";
      v4 = 1024;
      v5 = 71;
      v6 = 2080;
      v7 = "AVAudioNodeImpl.h";
      v8 = 1024;
      v9 = 303;
      v10 = 2080;
      v11 = "AVAE_CheckNodeHasEngine";
      v12 = 2080;
      v13 = "_engine != nil";
      _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_engine != nil");
  }
  return this;
}

uint64_t AVAudioNodeImpl::AUI(AVAudioNodeImpl *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t AVAudioNodeImpl::NumberInputs(AVAudioNodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
}

uint64_t AVAudioNodeImpl::NumberOutputs(AVAudioNodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
}

uint64_t AVAudioNodeImpl::SetNumberInputs(AVAudioNodeImpl *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, a2);
}

uint64_t AVAudioNodeImpl::SetNumberOutputs(AVAudioNodeImpl *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
}

uint64_t AVAudioNodeImplBase::AddRenderObserver(AVAudioNodeImplBase *this, const AURenderCallbackStruct *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, const AURenderCallbackStruct *))(*(_QWORD *)v3 + 192))(v3, a2);
}

uint64_t AVAudioNodeImplBase::RemoveRenderObserver(AVAudioNodeImplBase *this, const AURenderCallbackStruct *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, const AURenderCallbackStruct *))(*(_QWORD *)v3 + 200))(v3, a2);
}

uint64_t AVAudioNodeImplBase::AddRenderCallback(AVAudioNodeImplBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, const AURenderCallbackStruct *))(*(_QWORD *)v5 + 208))(v5, a2, a3);
}

uint64_t AVAudioNodeImplBase::RemoveRenderCallback(AVAudioNodeImplBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, const AURenderCallbackStruct *))(*(_QWORD *)v5 + 216))(v5, a2, a3);
}

double AVAudioNodeImpl::GetDeviceLatency(AVAudioNodeImpl *this)
{
  return 0.0;
}

uint64_t AVAudioNodeImpl::GetAudioUnitV2(AVAudioNodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 272))(v1);
}

uint64_t AVAudioNodeImpl::GetAudioUnitV3(AVAudioNodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1);
}

uint64_t AVAudioNodeImpl::ElementForBus(AVAudioNodeImpl *this, uint64_t a2)
{
  return a2;
}

uint64_t AVAudioNodeImpl::BusForElement(AVAudioNodeImpl *this, unsigned int a2)
{
  return a2;
}

uint64_t AVAudioNodeImpl::GetComponentDescription(AVAudioNodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t AVAudioNodeImplBase::SetManualRenderingMode(AVAudioNodeImplBase *this, unsigned int a2, AVAudioEngineManualRenderingMode a3)
{
  AVAudioEngineManualRenderingMode v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  *((_BYTE *)this + 72) = a2;
  if (a2)
    v4 = a3;
  else
    v4 = AVAudioEngineManualRenderingModeRealtime;
  *((_QWORD *)this + 10) = v4;
  if (a3)
    v5 = 0;
  else
    v5 = a2;
  v6 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, v5);
  *((_BYTE *)this + 49) = v5;
  return result;
}

uint64_t AVAudioNodeImplBase::IsPlaying(AVAudioNodeImplBase *this)
{
  return (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 432))(this);
}

void AVAudioNodeImplBase::Start(AVAudioNodeImplBase *this, AVAudioTime *a2)
{
  uint64_t v3;

  (*(void (**)(AVAudioNodeImplBase *, AVAudioTime *))(*(_QWORD *)this + 440))(this, a2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    AVAudioEngineImpl::NodeRenderingStateChanged(*(AVAudioEngineImpl **)(v3 + 8), this);
}

void AVAudioNodeImplBase::Pause(AVAudioNodeImplBase *this)
{
  uint64_t v2;

  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 448))(this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    AVAudioEngineImpl::NodeRenderingStateChanged(*(AVAudioEngineImpl **)(v2 + 8), this);
}

void AVAudioNodeImplBase::Stop(AVAudioNodeImplBase *this)
{
  uint64_t v2;

  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 456))(this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    AVAudioEngineImpl::NodeRenderingStateChanged(*(AVAudioEngineImpl **)(v2 + 8), this);
}

uint64_t AVAudioNodeImplBase::Clock(AVAudioNodeImplBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    result = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 424))(this);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

double AVAudioNodeImplBase::GetProcessingLatency(AVAudioNodeImplBase *this)
{
  return *((double *)this + 11);
}

AVAudioNodeImplBase *AVAudioNodeImplBase::SetOutputRenderPipelineLatency(AVAudioNodeImplBase *this, double a2)
{
  atomic_store(*(unint64_t *)&a2, (unint64_t *)this + 12);
  return this;
}

uint64_t AVAudioNodeImplBase::IsAVAudioSourceNode(AVAudioNodeImplBase *this)
{
  return 0;
}

uint64_t AVAudioNodeImplBase::IsSinkNode(AVAudioNodeImplBase *this)
{
  return 0;
}

BOOL AVAudioNodeImplBase::IsPlayingImpl(AVAudioNodeImplBase *this)
{
  return *((_QWORD *)this + 1) && *((_BYTE *)this + 48) != 0;
}

void AVAudioGenericIONodeImpl::~AVAudioGenericIONodeImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

BOOL std::lock[abi:ne180100]<std::recursive_mutex,std::recursive_mutex>(std::recursive_mutex *this, std::recursive_mutex *a2)
{
  _BOOL8 result;

  while (1)
  {
    std::recursive_mutex::lock(this);
    result = std::recursive_mutex::try_lock(a2);
    if (result)
      break;
    std::recursive_mutex::unlock(this);
    sched_yield();
    std::recursive_mutex::lock(a2);
    result = std::recursive_mutex::try_lock(this);
    if (result)
      break;
    std::recursive_mutex::unlock(a2);
    sched_yield();
  }
  return result;
}

void sub_19B7382E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B73849C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B73865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B73875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B73880C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7388AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B738DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t supportsCarPlayMixableStream(void)
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (isAVSystemControllerAvailable(void)::onceToken != -1)
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_159);
  if (!isAVSystemControllerAvailable(void)::isAvailable)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        return 0;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "AVVCCarplayRuntimeAvailability.mm";
      v8 = 1024;
      v9 = 21;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CarPlay API not available", (uint8_t *)&v6, 0x12u);
    }

    return 0;
  }
  objc_msgSend(MEMORY[0x1E0D48558], "sharedAVSystemController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "attributeForKey:", *MEMORY[0x1E0D47F38]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_19B738F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t supportsCarPlayAuxStream(void)
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (isAVSystemControllerAvailable(void)::onceToken != -1)
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_159);
  if (!isAVSystemControllerAvailable(void)::isAvailable)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        return 0;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "AVVCCarplayRuntimeAvailability.mm";
      v8 = 1024;
      v9 = 31;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CarPlay API not available", (uint8_t *)&v6, 0x12u);
    }

    return 0;
  }
  objc_msgSend(MEMORY[0x1E0D48558], "sharedAVSystemController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "attributeForKey:", *MEMORY[0x1E0D47F10]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_19B7390C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___Z26isAVOutputContextAvailablev_block_invoke()
{
  uint64_t result;

  getAVOutputContextClass();
  result = objc_opt_class();
  isAVOutputContextAvailable(void)::wirelessSplitterModeAPIAvailable = result != 0;
  return result;
}

id getAVOutputContextClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVOutputContextClass(void)::softClass;
  v7 = getAVOutputContextClass(void)::softClass;
  if (!getAVOutputContextClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL23getAVOutputContextClassv_block_invoke;
    v3[3] = &unk_1E3BECFE0;
    v3[4] = &v4;
    ___ZL23getAVOutputContextClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19B7391AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL23getAVOutputContextClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
    AVFoundationLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFoundationLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AVVCCarplayRuntimeAvailability.mm"), 50, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AVOutputContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVOutputContextClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AVVCCarplayRuntimeAvailability.mm"), 51, CFSTR("Unable to find class %s"), "AVOutputContext");

LABEL_8:
    __break(1u);
  }
  getAVOutputContextClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19B739364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void XPC_Dictionary::~XPC_Dictionary(XPC_Dictionary *this)
{
  XPC_Object::~XPC_Object(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t GetObjectMap(void)
{
  uint64_t result;
  _QWORD *v1;

  result = sObjectMap;
  if (!sObjectMap)
  {
    pthread_mutex_lock(&sObjectMapCreationLock);
    if (!sObjectMap)
    {
      v1 = (_QWORD *)operator new();
      v1[2] = 0;
      v1[1] = 0;
      *v1 = v1 + 1;
      sObjectMap = (uint64_t)v1;
    }
    pthread_mutex_unlock(&sObjectMapCreationLock);
    return sObjectMap;
  }
  return result;
}

BOOL ObjectExists(AVVoiceController *a1)
{
  AVVoiceController *v1;
  uint64_t ObjectMap;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v1 = a1;
  pthread_mutex_lock(&MapLocker::sMapLock);
  ObjectMap = GetObjectMap();
  v4 = ObjectMap + 8;
  v3 = *(_QWORD **)(ObjectMap + 8);
  if (!v3)
    goto LABEL_12;
  v5 = ObjectMap + 8;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)v1;
    if (v6 >= (unint64_t)v1)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (uint64_t)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v4 || *(_QWORD *)(v5 + 32) > (unint64_t)v1)
LABEL_12:
    v5 = ObjectMap + 8;
  pthread_mutex_unlock(&MapLocker::sMapLock);

  return v5 != v4;
}

void sub_19B739660(_Unwind_Exception *a1)
{
  void *v1;

  pthread_mutex_unlock(&MapLocker::sMapLock);

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t getUInt32ForKey(NSDictionary *a1, NSString *a2, unsigned int *a3, int *a4)
{
  NSDictionary *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;

  v7 = a1;
  v8 = a2;
  *a4 = 0;
  -[NSDictionary objectForKey:](v7, "objectForKey:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      *a3 = objc_msgSend(v9, "unsignedIntegerValue");
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *a4 = -66675;
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

{
  uint64_t result;
  void *v7;

  *a3 = 0;
  result = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("AVLinearPCMIsBigEndianKey"), a4);
  if (result)
  {
    v7 = (void *)result;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      *(_DWORD *)a2 = objc_msgSend(v7, "unsignedIntegerValue");
      return 1;
    }
    else
    {
      result = 0;
      *a3 = -50;
    }
  }
  return result;
}

void sub_19B739C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t getFloat64ForKey(NSDictionary *a1, NSString *a2, double *a3, int *a4)
{
  NSDictionary *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v6 = a1;
  v7 = CFSTR("AVSampleRateKey");
  *(_DWORD *)a3 = 0;
  -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("AVSampleRateKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v8, "doubleValue");
      *a2 = v9;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_DWORD *)a3 = -66675;
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_19B739D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t asbdFromSettings(NSDictionary *a1, AudioStreamBasicDescription *a2, void *a3, double a4, objc_object *a5)
{
  NSDictionary *v7;
  id v8;
  id v9;
  int *v10;
  AudioFormatID v11;
  uint64_t v12;
  AudioFormatID *p_mFormatID;
  double v14;
  UInt32 v15;
  unsigned int v16;
  AudioFormatID mFormatID;
  int UInt32ForKey;
  int v19;
  AudioFormatFlags mFormatFlags;
  int v21;
  int v22;
  AudioFormatFlags v23;
  UInt32 v24;
  UInt32 v25;
  double v27;
  unsigned int v28;
  int v29[2];

  v7 = a1;
  v8 = a3;
  v29[0] = 0;
  *(_OWORD *)&a2->mSampleRate = 0u;
  *(_OWORD *)&a2->mBytesPerPacket = 0u;
  *(_QWORD *)&a2->mBitsPerChannel = 0;
  v9 = v8;
  v28 = 0;
  if ((getUInt32ForKey(v7, CFSTR("AVFormatIDKey"), &v28, v29) & 1) != 0)
  {
    v11 = v28;
    if (!v28)
      v11 = 1936745848;
  }
  else
  {
    v12 = v29[0];
    if (v29[0])
      goto LABEL_57;
    v11 = 1819304813;
  }
  a2->mFormatID = v11;
  p_mFormatID = &a2->mFormatID;
  v27 = 0.0;
  if (getFloat64ForKey(v7, (NSString *)&v27, (double *)v29, v10))
  {
    if (v27 != 0.0)
    {
      v14 = 8000.0;
      if (v27 >= 8000.0)
      {
        v14 = v27;
        if (v27 > 192000.0)
          v14 = 192000.0;
      }
      goto LABEL_15;
    }
LABEL_14:
    v14 = 16000.0;
    goto LABEL_15;
  }
  v12 = v29[0];
  if (v29[0])
    goto LABEL_57;
  if (*p_mFormatID == 1936745848)
    goto LABEL_14;
  objc_msgSend(v9, "speechDetectionDeviceSampleRate");
  if (v14 == 0.0)
    v14 = 44100.0;
LABEL_15:
  a2->mSampleRate = v14;
  if (getUInt32ForKey(v7, CFSTR("AVNumberOfChannelsKey"), &v28, v29))
  {
    v15 = v28;
    if (v28)
    {
      if (v28 > 0x40)
      {
LABEL_18:
        v12 = 1718449215;
        goto LABEL_57;
      }
    }
    else
    {
      v15 = 1;
      v28 = 1;
    }
  }
  else
  {
    v12 = v29[0];
    if (v29[0])
      goto LABEL_57;
    if (*p_mFormatID == 1936745848)
    {
      a2->mChannelsPerFrame = 1;
LABEL_43:
      v12 = 0;
      a2->mFramesPerPacket = 0;
      goto LABEL_57;
    }
    v16 = objc_msgSend(v9, "inputNumberOfChannels");
    if (v16 <= 1)
      v15 = 1;
    else
      v15 = v16;
  }
  a2->mChannelsPerFrame = v15;
  mFormatID = a2->mFormatID;
  if (mFormatID == 1936745848)
    goto LABEL_43;
  if (mFormatID != 1819304813)
  {
    v12 = 0;
    goto LABEL_57;
  }
  UInt32ForKey = getUInt32ForKey(v7, CFSTR("AVLinearPCMIsNonInterleaved"), &v28, v29);
  if (v28)
    v19 = UInt32ForKey;
  else
    v19 = 0;
  mFormatFlags = a2->mFormatFlags;
  if (v19 == 1)
  {
    mFormatFlags |= 0x20u;
    a2->mFormatFlags = mFormatFlags;
  }
  a2->mFormatFlags = mFormatFlags | 8;
  v21 = getUInt32ForKey(v7, CFSTR("AVLinearPCMIsFloatKey"), &v28, v29);
  if (v28)
    v22 = v21;
  else
    v22 = 0;
  v23 = a2->mFormatFlags;
  if (v22 == 1)
  {
    a2->mFormatFlags = v23 | 1;
    if (getUInt32ForKey(v7, CFSTR("AVLinearPCMBitDepthKey"), &v28, v29))
    {
      v24 = (v28 + 7) & 0xFFFFFFF8;
      a2->mBitsPerChannel = v24;
      if (v24 - 65 < 0xFFFFFFC0)
        goto LABEL_18;
      goto LABEL_53;
    }
    v12 = v29[0];
    if (v29[0])
      goto LABEL_57;
    v24 = 32;
  }
  else
  {
    a2->mFormatFlags = v23 | 4;
    if (getUInt32ForKey(v7, CFSTR("AVLinearPCMBitDepthKey"), &v28, v29))
    {
      v24 = (v28 + 7) & 0xFFFFFFF8;
      a2->mBitsPerChannel = v24;
      if (v24 - 33 < 0xFFFFFFE0)
        goto LABEL_18;
      goto LABEL_53;
    }
    v12 = v29[0];
    if (v29[0])
      goto LABEL_57;
    v24 = 16;
  }
  a2->mBitsPerChannel = v24;
LABEL_53:
  a2->mFramesPerPacket = 1;
  v12 = 0;
  if ((a2->mFormatFlags & 0x20) != 0)
    v25 = v24 >> 3;
  else
    v25 = (v24 >> 3) * a2->mChannelsPerFrame;
  a2->mBytesPerPacket = v25;
  a2->mBytesPerFrame = v25;
LABEL_57:

  return v12;
}

void sub_19B73A0A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *GetModelPathComponent(void)
{
  uint64_t v0;
  __CFString *v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!MGIsQuestionValid())
  {
    LODWORD(v0) = 0;
LABEL_5:
    if (kAVVCScope)
    {
      v2 = *(id *)kAVVCScope;
      if (!v2)
        goto LABEL_12;
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "AVVCUtils.mm";
      v11 = 1024;
      v12 = 547;
      v13 = 1024;
      v14 = v0;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Acoustic ID returned %d. Lets try the older method to load DSP graph", buf, 0x18u);
    }

LABEL_12:
    v4 = MGGetProductType();
    v5 = v4;
    if (v4 <= 1492264614)
    {
      if (v4 > 648163783)
      {
        if (v4 > 1064539871)
        {
          if (v4 == 1064539872)
            return CFSTR("J152f");
          if (v4 == 1102220960)
            return CFSTR("J680");
        }
        else
        {
          if (v4 == 648163784)
            return CFSTR("J223");
          if (v4 == 995309656)
            return CFSTR("J230k");
        }
      }
      else if (v4 > 463077441)
      {
        if (v4 == 463077442)
          return CFSTR("J137");
        if (v4 == 647612397)
          return CFSTR("J215");
      }
      else
      {
        if (v4 == 95249044)
          return CFSTR("J132");
        if (v4 == 376943508)
          return CFSTR("J327");
      }
      goto LABEL_50;
    }
    if (v4 > 2799443389)
    {
      if (v4 > 3273904383)
      {
        if (v4 == 3273904384)
          return CFSTR("J780");
        if (v4 == 3457645855)
          return CFSTR("J140K");
LABEL_50:
        if (kAVVCScope)
        {
          v7 = *(id *)kAVVCScope;
          if (!v7)
          {
LABEL_57:
            v1 = CFSTR("???");
            return v1;
          }
        }
        else
        {
          v7 = MEMORY[0x1E0C81028];
          v8 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v10 = "AVVCUtils.mm";
          v11 = 1024;
          v12 = 646;
          v13 = 1024;
          v14 = v5;
          _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpected product 0x%x will not load DSP graph", buf, 0x18u);
        }

        goto LABEL_57;
      }
      if (v4 == 2799443390)
        return CFSTR("J140a");
      if (v4 != 3019628807)
        goto LABEL_50;
    }
    else
    {
      if (v4 > 2325660397)
      {
        if (v4 == 2325660398)
          return CFSTR("J214k");
        if (v4 == 2440616150)
          return CFSTR("J213");
        goto LABEL_50;
      }
      if (v4 != 1492264615)
      {
        if (v4 == 1568600092)
          return CFSTR("J214");
        goto LABEL_50;
      }
    }
    return CFSTR("J185");
  }
  v0 = MGGetSInt32Answer();
  if ((int)v0 < 1)
    goto LABEL_5;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%d"), CFSTR("AID"), v0);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  return v1;
}

id GetLowercaseModelName(void)
{
  void *v0;
  void *v1;

  GetModelPathComponent();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_19B73A500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z17isDarwinOSProductv_block_invoke()
{
  uint64_t result;

  result = os_variant_is_darwinos();
  isDarwinOSProduct(void)::isDarwinOS = result;
  return result;
}

void UpdateWithHardwareDeviceNumInputChannels(unsigned int *a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    v2 = MGGetProductType();
    if (v2 == 376943508)
    {
      *a1 = 10;
      return;
    }
    v3 = v2;
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        return;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = *a1;
      v7 = 136315906;
      v8 = "AVVCUtils.mm";
      v9 = 1024;
      v10 = 836;
      v11 = 1024;
      v12 = v3;
      v13 = 1024;
      v14 = v6;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Product 0x%x, numChannels unchanged at: %u", (uint8_t *)&v7, 0x1Eu);
    }

  }
}

__CFString *ExtractProcessNameFromString(NSString *a1)
{
  NSString *v1;
  void *v2;
  id v3;
  void *v4;
  __CFString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v12;

  v1 = a1;
  if (v1)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("(?<=,)(.*)(?=\\()"), 0, &v12);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v12;
    objc_msgSend(v2, "firstMatchInString:options:range:", v1, 0, 0, -[NSString length](v1, "length"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = &stru_1E3BED4C0;
    v6 = v4;
    if (v4)
    {
      v7 = objc_msgSend(v4, "range");
      -[NSString substringWithRange:](v1, "substringWithRange:", v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringByTrimmingCharactersInSet:", v10);
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v5 = &stru_1E3BED4C0;
  }

  return v5;
}

void sub_19B73A7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id Get4CCFromInt(int a1)
{
  _BYTE v2[5];

  v2[4] = 0;
  v2[2] = BYTE1(a1);
  v2[3] = a1;
  v2[1] = BYTE2(a1);
  v2[0] = HIBYTE(a1);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v2, 4);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t IsPluginActivationContext(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  if (a1 > 1919771247)
  {
    if (a1 != 1919771248 && a1 != 1936750196)
    {
      v3 = 1919776372;
LABEL_8:
      if (a1 != v3)
        return result;
    }
  }
  else if (a1 != 1651795060 && a1 != 1668314723)
  {
    v3 = 1751414371;
    goto LABEL_8;
  }
  return 1;
}

uint64_t ___Z23isAudioSessionAvailablev_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  isAudioSessionAvailable(void)::audioSessionAvailable = result != 0;
  return result;
}

void extractFirstInputPortTypeFromRouteDescription(void *a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a1;
  objc_msgSend(v9, "inputs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && objc_msgSend(v3, "count"))
  {
    objc_msgSend(v4, "objectAtIndex:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "portType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "copy");
    v8 = *a2;
    *a2 = (void *)v7;

  }
}

void sub_19B73A97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

__CFString *_logRouteDesc(AVAudioSessionRouteDescription *a1)
{
  AVAudioSessionRouteDescription *v1;
  AVAudioSessionRouteDescription *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    -[AVAudioSessionRouteDescription inputs](v1, "inputs");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    _logPortDesc(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(&stru_1E3BED4C0, "stringByAppendingFormat:", CFSTR("{ inputs: %@, "), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[AVAudioSessionRouteDescription outputs](v2, "outputs");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    _logPortDesc(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingFormat:", CFSTR("outputs: %@ }"), v7);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = CFSTR("null");
  }

  return v8;
}

void sub_19B73AA90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19B73AADC()
{
  JUMPOUT(0x19B73AACCLL);
}

__CFString *_logPortDesc(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v14 = v1;
  if (v1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v16;
      v5 = CFSTR("[ ");
      do
      {
        v6 = 0;
        v7 = v5;
        do
        {
          if (*(_QWORD *)v16 != v4)
            objc_enumerationMutation(v2);
          v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
          objc_msgSend(v8, "portType");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "portName");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "UID");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString stringByAppendingFormat:](v7, "stringByAppendingFormat:", CFSTR("(type=%@, name=%@, UID=%@); "),
            v9,
            v10,
            v11,
            v14,
            (_QWORD)v15);
          v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

          ++v6;
          v7 = v5;
        }
        while (v3 != v6);
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v3);
    }
    else
    {
      v5 = CFSTR("[ ");
    }

    -[__CFString stringByAppendingString:](v5, "stringByAppendingString:", CFSTR("]"));
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = CFSTR("null");
  }

  return v12;
}

void sub_19B73AC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___Z22IsSerializationEnabledv_block_invoke()
{
  void *v0;
  void *v1;
  NSObject *v2;
  id v3;
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.avfoundation.avvc"));
  objc_msgSend(v0, "objectForKey:", CFSTR("enable_serialization"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
    IsSerializationEnabled(void)::enable = objc_msgSend(v0, "BOOLForKey:", CFSTR("enable_serialization"));
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "";
    v6 = "AVVCUtils.mm";
    v5 = 136315650;
    if (!IsSerializationEnabled(void)::enable)
      v4 = " NOT";
    v7 = 1024;
    v8 = 1187;
    v9 = 2080;
    v10 = v4;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC_SERIALIZATION_POLICY_LOCK is%s enabled", (uint8_t *)&v5, 0x1Cu);
  }

LABEL_12:
}

void sub_19B73AE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ProfileMetrics(NSString *a1)
{
  void *v1;
  void *v2;
  NSString *v3;

  v3 = a1;
  v1 = (void *)MEMORY[0x1A1AC6084]();
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "logProfileMetrics:", v3);

  objc_autoreleasePoolPop(v1);
}

void sub_19B73AED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL ExecuteBlockOnRunLoop(__CFRunLoop *a1, dispatch_time_t a2, void *a3)
{
  id v5;
  dispatch_semaphore_t v6;
  const void *v7;
  id v8;
  NSObject *v9;
  intptr_t v10;
  NSObject *v11;
  id v12;
  _QWORD block[4];
  NSObject *v15;
  id v16;
  int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = dispatch_semaphore_create(0);
  v7 = (const void *)*MEMORY[0x1E0C9B280];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___Z21ExecuteBlockOnRunLoopP11__CFRunLoop18AVVCBlockingPolicyyU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E3BEC1D0;
  v8 = v5;
  v16 = v8;
  v17 = 1;
  v9 = v6;
  v15 = v9;
  CFRunLoopPerformBlock(a1, v7, block);
  CFRunLoopWakeUp(a1);
  v10 = dispatch_semaphore_wait(v9, a2);
  if (v10)
  {
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_9;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "AVVCUtils.mm";
      v20 = 1024;
      v21 = 1247;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d runloop block timeout!", buf, 0x12u);
    }

  }
LABEL_9:

  return v10 != 0;
}

void sub_19B73B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

intptr_t ___Z21ExecuteBlockOnRunLoopP11__CFRunLoop18AVVCBlockingPolicyyU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  intptr_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(void))(result + 16))();
  if (*(_DWORD *)(a1 + 48) == 1)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  return result;
}

void CallbackBarrier(__CFRunLoop *a1)
{
  NSObject *v2;
  id v3;
  dispatch_time_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v9 = 136315394;
    v10 = "AVVCUtils.mm";
    v11 = 1024;
    v12 = 1258;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d waiting for any in-flight AudioQueue property change message on run loop...", (uint8_t *)&v9, 0x12u);
  }

LABEL_8:
  v4 = dispatch_time(0, 9000000000);
  if (!ExecuteBlockOnRunLoop(a1, v4, 0))
    goto LABEL_16;
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9 = 136315394;
    v10 = "AVVCUtils.mm";
    v11 = 1024;
    v12 = 1263;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d CallbackBarrier: 9 second timeout!", (uint8_t *)&v9, 0x12u);
  }

LABEL_16:
  if (kAVVCScope)
  {
    v7 = *(id *)kAVVCScope;
    if (!v7)
      return;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v9 = 136315394;
    v10 = "AVVCUtils.mm";
    v11 = 1024;
    v12 = 1265;
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d received all AudioQueue property change messages on run loop.", (uint8_t *)&v9, 0x12u);
  }

}

void makeSynchronous(void *a1)
{
  void (**v1)(id, _QWORD);

  v1 = a1;
  if (v1)
    v1[2](v1, 0);

}

void sub_19B73B378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___Z20IsMetricsOwnedByAVVCv_block_invoke()
{
  void *v0;
  void *v1;
  NSObject *v2;
  id v3;
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.avfoundation.avvc"));
  objc_msgSend(v0, "objectForKey:", CFSTR("avvc_owned_metrics"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
    IsMetricsOwnedByAVVC(void)::owned = objc_msgSend(v0, "BOOLForKey:", CFSTR("avvc_owned_metrics"));
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "";
    v6 = "AVVCUtils.mm";
    v5 = 136315650;
    if (!IsMetricsOwnedByAVVC(void)::owned)
      v4 = " NOT";
    v7 = 1024;
    v8 = 1310;
    v9 = 2080;
    v10 = v4;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Metrics is%s owned by AVVC", (uint8_t *)&v5, 0x1Cu);
  }

LABEL_12:
}

void sub_19B73B4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

OpaqueAudioQueue *QueueIsRunning(OpaqueAudioQueue *result)
{
  OSStatus Property;
  OSStatus v2;
  NSObject *v3;
  id v4;
  const char *v5;
  id v6;
  UInt32 ioDataSize;
  int outData;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  OSStatus v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  outData = 0;
  if (result)
  {
    ioDataSize = 4;
    Property = AudioQueueGetProperty(result, 0x6171726Eu, &outData, &ioDataSize);
    if (!Property)
      return (OpaqueAudioQueue *)(outData == 1);
    v2 = Property;
    if ((Property + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        v3 = *(id *)kAVVCScope;
        if (!v3)
          return (OpaqueAudioQueue *)(outData == 1);
      }
      else
      {
        v3 = MEMORY[0x1E0C81028];
        v6 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      *(_DWORD *)buf = 136315650;
      v10 = "AVVCUtils.mm";
      v11 = 1024;
      v12 = 1322;
      v13 = 1024;
      v14 = v2;
      v5 = "%25s:%-5d ERROR: QueueIsRunning: AudioQueueGetProperty(kAudioQueueProperty_IsRunning) (ignored) err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v3 = *(id *)kAVVCScope;
        if (!v3)
          return (OpaqueAudioQueue *)(outData == 1);
      }
      else
      {
        v3 = MEMORY[0x1E0C81028];
        v4 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      *(_DWORD *)buf = 136315650;
      v10 = "AVVCUtils.mm";
      v11 = 1024;
      v12 = 1322;
      v13 = 1024;
      v14 = v2;
      v5 = "%25s:%-5d ERROR: QueueIsRunning: AudioQueueGetProperty(kAudioQueueProperty_IsRunning) (ignored) err %d";
    }
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, v5, buf, 0x18u);
LABEL_17:

    return (OpaqueAudioQueue *)(outData == 1);
  }
  return result;
}

uint64_t isHACProduct(void)
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (!MGGetBoolAnswer() || !_os_feature_enabled_impl())
    return 0;
  v0 = (void *)MGCopyAnswer();
  v1 = v0;
  if (v0)
  {
    if (objc_msgSend(v0, "isEqualToString:", CFSTR("t8132")))
      v2 = _os_feature_enabled_impl();
    else
      v2 = 0;
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("t8140")))
      v2 = _os_feature_enabled_impl();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_19B73B778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetTrailingSilenceFromBuffer(__int16 *a1, uint64_t a2, float a3)
{
  __int16 v5;
  __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  int v18;
  NSObject *v19;
  id v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[160];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  ElapsedTime::ElapsedTime((ElapsedTime *)v34, "GetTrailingSilenceFromBuffer", 0, 0);
  if (a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a1;
    v7 = a2;
    do
    {
      v9 = *v6++;
      v8 = v9;
      if (v9 < 0)
        v8 = -v8;
      if ((__int16)v8 > v5)
        v5 = v8;
      --v7;
    }
    while (v7);
  }
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.avfoundation.avvc"));
  objc_msgSend(v10, "objectForKey:", CFSTR("beep_silence_threshold"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11 == 0;

  if (v12)
  {
    v14 = 0.0;
  }
  else
  {
    objc_msgSend(v10, "floatForKey:", CFSTR("beep_silence_threshold"));
    v14 = v13;
  }
  if (a2 < 1)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = &a1[a2 - 1];
    while (1)
    {
      v18 = *v16--;
      v17 = v18;
      if (v18 < 0)
        v17 = -v17;
      if (v17 > (int)(float)(v14 * (float)v5))
        break;
      if (a2 == ++v15)
      {
        v15 = a2;
        break;
      }
    }
  }
  if (kAVVCScope)
  {
    v19 = *(id *)kAVVCScope;
    if (!v19)
      goto LABEL_28;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
    v20 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 136316418;
    v23 = "AVVCUtils.mm";
    v24 = 1024;
    v25 = 1380;
    v26 = 1024;
    v27 = (unsigned __int16)v5;
    v28 = 1024;
    v29 = (int)(float)(v14 * (float)v5);
    v30 = 2048;
    v31 = v14;
    v32 = 2048;
    v33 = v15;
    _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d max: %hd, threshold %hd threshold: %f silenceFrames: %lld", (uint8_t *)&v22, 0x32u);
  }

LABEL_28:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v34);
  return v15;
}

void sub_19B73B9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void ElapsedTime::ElapsedTime(ElapsedTime *this, const char *a2, const char *a3, char a4)
{
  CFAbsoluteTime Current;
  char *v7;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  mach_absolute_time();
  *((_QWORD *)this + 2) = __udivti3();
  *((_BYTE *)this + 152) = a4;
  Current = CFAbsoluteTimeGetCurrent();
  CFTimeBase::TimeAsString((ElapsedTime *)((char *)this + 24), Current, v7);
}

void ElapsedTime::~ElapsedTime(ElapsedTime *this)
{
  uint64_t v2;
  CFAbsoluteTime Current;
  char *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  char *v8;
  double v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  uint64_t v14;
  double v15;
  id v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint32_t v20;
  id v21;
  uint64_t v22;
  double v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mach_absolute_time();
  v2 = __udivti3();
  Current = CFAbsoluteTimeGetCurrent();
  CFTimeBase::TimeAsString((ElapsedTime *)((char *)this + 88), Current, v4);
  if (*((_QWORD *)this + 1))
  {
    if (*((_BYTE *)this + 152))
    {
      if (kAVVCScope)
      {
        v5 = *(id *)kAVVCScope;
        if (!v5)
          return;
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
        v6 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)this;
        v8 = (char *)*((_QWORD *)this + 1);
        v9 = (double)(unint64_t)(v2 - *((_QWORD *)this + 2));
        v24 = 136316674;
        v25 = "AVVC_Log.h";
        v26 = 1024;
        v27 = 109;
        v28 = 2080;
        v29 = v7;
        v30 = 2080;
        v31 = v8;
        v32 = 2080;
        v33 = (char *)this + 24;
        v34 = 2080;
        *(_QWORD *)&v35 = (char *)this + 88;
        v36 = 2048;
        v37 = v9 / 1000000.0;
        v10 = "%25s:%-5d %s : %s : start: %s end: %s duration %.2f ms";
        v11 = v5;
        v12 = OS_LOG_TYPE_DEBUG;
LABEL_25:
        v20 = 68;
LABEL_30:
        _os_log_impl(&dword_19B733000, v11, v12, v10, (uint8_t *)&v24, v20);
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        return;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)this;
      v18 = (char *)*((_QWORD *)this + 1);
      v19 = (double)(unint64_t)(v2 - *((_QWORD *)this + 2));
      v24 = 136316674;
      v25 = "AVVC_Log.h";
      v26 = 1024;
      v27 = 113;
      v28 = 2080;
      v29 = v17;
      v30 = 2080;
      v31 = v18;
      v32 = 2080;
      v33 = (char *)this + 24;
      v34 = 2080;
      *(_QWORD *)&v35 = (char *)this + 88;
      v36 = 2048;
      v37 = v19 / 1000000.0;
      v10 = "%25s:%-5d %s : %s : start: %s end: %s duration %.2f ms";
      v11 = v5;
      v12 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_25;
    }
LABEL_31:

    return;
  }
  if (*((_BYTE *)this + 152))
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        return;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v13 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      goto LABEL_31;
    v14 = *(_QWORD *)this;
    v15 = (double)(unint64_t)(v2 - *((_QWORD *)this + 2));
    v24 = 136316418;
    v25 = "AVVC_Log.h";
    v26 = 1024;
    v27 = 119;
    v28 = 2080;
    v29 = v14;
    v30 = 2080;
    v31 = (char *)this + 24;
    v32 = 2080;
    v33 = (char *)this + 88;
    v34 = 2048;
    v35 = v15 / 1000000.0;
    v10 = "%25s:%-5d %s : start: %s end: %s duration %.2f ms";
    v11 = v5;
    v12 = OS_LOG_TYPE_DEBUG;
LABEL_29:
    v20 = 58;
    goto LABEL_30;
  }
  if (!kAVVCScope)
  {
    v5 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
    goto LABEL_27;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_27:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    v22 = *(_QWORD *)this;
    v23 = (double)(unint64_t)(v2 - *((_QWORD *)this + 2));
    v24 = 136316418;
    v25 = "AVVC_Log.h";
    v26 = 1024;
    v27 = 123;
    v28 = 2080;
    v29 = v22;
    v30 = 2080;
    v31 = (char *)this + 24;
    v32 = 2080;
    v33 = (char *)this + 88;
    v34 = 2048;
    v35 = v23 / 1000000.0;
    v10 = "%25s:%-5d %s : start: %s end: %s duration %.2f ms";
    v11 = v5;
    v12 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_29;
  }
}

void sub_19B73BE24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___Z29isAVSystemControllerAvailablev_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  isAVSystemControllerAvailable(void)::isAvailable = result != 0;
  return result;
}

id GetRecordingAppsList(void)
{
  void *v0;
  void *v1;
  NSObject *v2;
  id v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (isAVSystemControllerAvailable(void)::onceToken != -1)
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_159);
  if (!isAVSystemControllerAvailable(void)::isAvailable)
  {
    if (kAVVCScope)
    {
      v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_12:
        v1 = 0;
        return v1;
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315394;
      v6 = "AVVCUtils.mm";
      v7 = 1024;
      v8 = 1402;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVSystemController API not available", (uint8_t *)&v5, 0x12u);
    }

    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x1E0D48558], "sharedAVSystemController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "attributeForKey:", *MEMORY[0x1E0D48088]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_19B73BFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL IsAnyAppRecording(void)
{
  void *v0;
  NSObject *v1;
  id v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  GetRecordingAppsList();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      goto LABEL_8;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315650;
    v5 = "AVVCUtils.mm";
    v6 = 1024;
    v7 = 1413;
    v8 = 2112;
    v9 = v0;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Apps currently recording: %@", (uint8_t *)&v4, 0x1Cu);
  }

LABEL_8:
  return v0 != 0;
}

uint64_t areNSStringsEqual(NSString *a1, NSString *a2)
{
  unint64_t v3;
  NSString *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 | (unint64_t)v4)
  {
    v6 = 0;
    if (v3 && v4)
      v6 = objc_msgSend((id)v3, "isEqualToString:", v4);
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_19B73C12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFTimeBase *CFTimeBase::TimeAsString(CFTimeBase *this, CFAbsoluteTime a2, char *a3)
{
  unsigned __int8 v5;
  CFGregorianDate GregorianDate;
  int v7;
  signed int v8;

  if ((v5 & 1) == 0
  {
    CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz = (uint64_t)CFTimeZoneCopySystem();
  }
  GregorianDate = CFAbsoluteTimeGetGregorianDate(a2, (CFTimeZoneRef)CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz);
  v7 = snprintf((char *)this, 0x40uLL, "%04d-%02d-%02d ", GregorianDate.year, (int)(*(_QWORD *)&GregorianDate.year >> 8) >> 24, (int)(*(_QWORD *)&GregorianDate.year >> 16) >> 24);
  v8 = llround(GregorianDate.second * 1000000.0);
  snprintf((char *)this + v7, 64 - v7, "%02d:%02d:%02d.%06d", (int)(*(_QWORD *)&GregorianDate.year >> 24) >> 24, *(int *)&GregorianDate.month >> 24, v8 / 1000000, v8 % 1000000);
  return this;
}

void sub_19B73C25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1AC5BD4);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_19B73C330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void AVVCPluginRecordingEngine::~AVVCPluginRecordingEngine(id *this)
{
  AVVCPluginRecordingEngine::~AVVCPluginRecordingEngine(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *this = &off_1E3BE8F68;
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315394;
    v5 = "AVVCPluginRecordingEngine.mm";
    v6 = 1024;
    v7 = 53;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ~AVVCPluginRecordingEngine()", (uint8_t *)&v4, 0x12u);
  }

LABEL_8:
  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

uint64_t AVVCPluginRecordingEngine::asbdForClientSettings(AVVCPluginRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  NSDictionary *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_10:
        v7 = 2;
        goto LABEL_11;
      }
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315650;
      v12 = "AVVCPluginRecordingEngine.mm";
      v13 = 1024;
      v14 = 360;
      v15 = 1024;
      v16 = 2;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::createRecordQueue : no matching device found, error : %d", (uint8_t *)&v11, 0x18u);
    }

    goto LABEL_10;
  }
  v7 = (*(uint64_t (**)(AVVCPluginRecordingEngine *, void *, NSDictionary *, CAStreamBasicDescription *))(*(_QWORD *)this + 384))(this, v6, v5, a3);
LABEL_11:

  return v7;
}

void sub_19B73C4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::createRecordQueue(AVVCPluginRecordingEngine *this, NSDictionary *a2)
{
  NSDictionary *v3;
  id v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  AVAudioFormat *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  NSObject *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD v40[4];
  id v41[2];
  std::__shared_weak_count *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  char v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[18];
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  uint8_t buf[32];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v47 = 4102;
  v48 = 1;
  v49 = 0u;
  v50 = 0u;
  kdebug_trace();
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v4 = *(id *)kAVVCScope;
      if (v4)
      {
        v5 = v4;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v51, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 416;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = *(_QWORD *)v51;
          _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine(%p)::createRecordQueue -->", buf, 0x1Cu);
          v6 = *(std::__shared_weak_count **)&v51[8];
          if (*(_QWORD *)&v51[8])
          {
            v7 = (unint64_t *)(*(_QWORD *)&v51[8] + 8);
            do
              v8 = __ldaxr(v7);
            while (__stlxr(v8 - 1, v7));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }

      }
    }
  }
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
      {
LABEL_30:
        v13 = 2;
        goto LABEL_76;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 423;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 2;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::createRecordQueue : no matching device found, error : %d", buf, 0x18u);
    }

    goto LABEL_30;
  }
  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_22;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 427;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v9;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue : using device %p", buf, 0x1Cu);
  }

LABEL_22:
  v57 = 0;
  memset(buf, 0, sizeof(buf));
  v13 = (*(uint64_t (**)(AVVCPluginRecordingEngine *, void *, NSDictionary *, uint8_t *))(*(_QWORD *)this
                                                                                                  + 384))(this, v9, v3, buf);
  if ((_DWORD)v13)
    goto LABEL_76;
  v14 = -[AVAudioFormat initWithStreamDescription:]([AVAudioFormat alloc], "initWithStreamDescription:", buf);
  objc_msgSend(v9, "setFormat:", v14);
  if (kAVVCScope)
  {
    v15 = *(id *)kAVVCScope;
    if (!v15)
      goto LABEL_35;
  }
  else
  {
    v15 = (id)MEMORY[0x1E0C81028];
    v17 = MEMORY[0x1E0C81028];
  }
  v18 = v15;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v9, "format");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "debugDescription");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = 439;
    v52 = 2048;
    v53 = v9;
    v54 = 2112;
    v55 = v20;
    _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue : setting format on active device(%p), format:%@", v51, 0x26u);

  }
LABEL_35:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v45, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  objc_msgSend(v9, "audioInputBlock");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21 == 0;

  if (v22)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v51, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v24 = *(void **)v51;
    v13 = *(_QWORD *)&v51[8];
    if (*(_QWORD *)&v51[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&v51[8] + 16);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = (unint64_t *)(v13 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }
    v29 = MEMORY[0x1E0C809B0];
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 3321888768;
    v43[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke;
    v43[3] = &__block_descriptor_56_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e56_v32__0__AVAudioBuffer_8__AVAudioTime_16__NSDictionary_24l;
    v43[4] = this;
    v43[5] = v24;
    v44 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v30 = (unint64_t *)(v13 + 16);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    objc_msgSend(v9, "setAudioInputBlock:", v43);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_initWeak((id *)v51, v9);
      v40[0] = v29;
      v40[1] = 3321888768;
      v40[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_93;
      v40[3] = &unk_1E3BEA388;
      v41[1] = v24;
      v42 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v32 = (unint64_t *)(v13 + 16);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      objc_copyWeak(v41, (id *)v51);
      objc_msgSend(v9, "setStatusChangeBlock:", v40);
      objc_destroyWeak(v41);
      if (v42)
        std::__shared_weak_count::__release_weak(v42);
      objc_destroyWeak((id *)v51);
    }
    *((_DWORD *)this + 64) = (*((double *)this + 3) / 320.0);
    v34 = *((_QWORD *)this + 16);
    if (v34)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v34 + 16))(v34, *((_QWORD *)this + 34), *(unsigned int *)&buf[8]);
    AVVCRecordingEngine::populateRecordSettings((AVVCRecordingEngine *)this);
    AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
    if (!v13)
      goto LABEL_70;
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    goto LABEL_64;
  }
  if (*((uint64_t *)this + 28) > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 136))(v45);
LABEL_64:
    v13 = 0;
    goto LABEL_70;
  }
  if (!kAVVCScope)
  {
    v23 = MEMORY[0x1E0C81028];
    v35 = MEMORY[0x1E0C81028];
    goto LABEL_66;
  }
  v23 = *(id *)kAVVCScope;
  if (v23)
  {
LABEL_66:
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v51 = 136315394;
      *(_QWORD *)&v51[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&v51[12] = 1024;
      *(_DWORD *)&v51[14] = 448;
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Record queue state does not match queue (previously assertion failure)", v51, 0x12u);
    }

  }
  v13 = 4294955515;
LABEL_70:
  v36 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

LABEL_76:
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v47);

  return v13;
}

void sub_19B73CBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  void *v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  id *v35;

  objc_destroyWeak(v35);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  objc_destroyWeak(&location);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

  TraceWrapper::~TraceWrapper((TraceWrapper *)&a26);
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::Initialize(AVVCPluginRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

void AVVCPluginRecordingEngine::setHWSampleRate(AVVCPluginRecordingEngine *this, double a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *((double *)this + 40) = a2;
  *((_BYTE *)this + 328) = 0;
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      return;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 34);
    v6 = *((_QWORD *)this + 40);
    v7 = *((unsigned __int8 *)this + 328);
    v8 = 136316162;
    v9 = "AVVCPluginRecordingEngine.mm";
    v10 = 1024;
    v11 = 93;
    v12 = 2048;
    v13 = v5;
    v14 = 2048;
    v15 = v6;
    v16 = 1024;
    v17 = v7;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHWSampleRate() streamID(%lu) sr(%.2f) upSamp(%d)", (uint8_t *)&v8, 0x2Cu);
  }

}

double AVVCRecordingEngine::getHWSampleRate(AVVCRecordingEngine *this)
{
  return *((double *)this + 40);
}

uint64_t AVVCPluginRecordingEngine::prepareRecording(AVVCRecordingEngine *this, NSDictionary *a2)
{
  NSDictionary *v3;
  uint64_t Recorder;
  _BYTE v6[8];

  v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v6, "prepareRecording");
  Recorder = AVVCRecordingEngine::setupASBDAndCreateRecorder(this, v3);
  if (!(_DWORD)Recorder)
    AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  TraceMethod::~TraceMethod((TraceMethod *)v6);

  return Recorder;
}

void sub_19B73CE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);

  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::startRecording(AVVCPluginRecordingEngine *this)
{
  id v2;
  id v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __CFString *v36;
  uint64_t v37;
  id v38;
  uint64_t *v39;
  NSObject *v40;
  id v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  id v46;
  id v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  __CFString *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  int v63;
  int v64;
  uint64_t v65;
  void *v67;
  uint64_t aBlock;
  uint64_t v69;
  void (*v70)(uint64_t, void *);
  void *v71;
  __CFString *v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  const char *v88;
  std::__shared_weak_count *v89;
  char v90[8];
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  _BYTE buf[18];
  __int16 v96;
  const char *v97;
  __int16 v98;
  __CFString *v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  const char *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v92 = &v91;
  v93 = 0x2020000000;
  v94 = 0;
  TraceMethod::TraceMethod((TraceMethod *)v90, "AVVCPluginRecordingEngine::startRecording");
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
LABEL_5:
    v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
LABEL_63:

      goto LABEL_64;
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v88, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v5 = v88;
    if (v88)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v86, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 64))(v86, 0);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v67, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v6 = "Inactive";
          break;
        case 2u:
          v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v6 = "Deactivating";
          break;
        case 5u:
          v6 = "Prewarming";
          break;
        case 6u:
          v6 = "Activating";
          break;
        case 7u:
          v6 = "Active";
          break;
        default:
          v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v84, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v84)
    {
      v7 = (uint64_t)v85;
      if (v85)
        v7 = v85->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v84, *(unsigned int *)(v84 + 272), v7);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = CFSTR("(0x0) use_count:0");
    }
    v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v82, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v10 = v82;
    if (v82)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v80, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 320))(v80);
      if (v11 > 4)
        v12 = "ILLEGAL";
      else
        v12 = off_1E3BEC7A8[v11];
    }
    else
    {
      v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v78, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v78)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v76, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v13 = *(_QWORD *)(v76 + 224);
      if (v13 > 6)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC7D0[v13];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      v96 = 2080;
      v97 = v6;
      v98 = 2112;
      v99 = v9;
      v100 = 2080;
      v101 = v12;
      v102 = 2080;
      v103 = v14;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v15 = v77;
      if (v77)
      {
        p_shared_owners = (unint64_t *)&v77->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      v96 = 2080;
      v97 = v6;
      v98 = 2112;
      v99 = v9;
      v100 = 2080;
      v101 = v12;
      v102 = 2080;
      v103 = "unconfigured";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v18 = v79;
    if (v79)
    {
      v19 = (unint64_t *)&v79->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v10)
    {
      v21 = v81;
      if (v81)
      {
        v22 = (unint64_t *)&v81->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v24 = v83;
    if (v83)
    {
      v25 = (unint64_t *)&v83->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    v27 = v85;
    if (!v85)
      goto LABEL_50;
    v28 = (unint64_t *)&v85->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v5)
        goto LABEL_51;
    }
    else
    {
LABEL_50:
      if (v5)
      {
LABEL_51:

        v30 = v87;
        if (v87)
        {
          v31 = (unint64_t *)&v87->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
    v33 = v89;
    if (v89)
    {
      v34 = (unint64_t *)&v89->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    goto LABEL_63;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
    goto LABEL_5;
LABEL_64:
  *((_QWORD *)this + 77) = 0;
  *((_DWORD *)this + 156) = 0;
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v36)
  {
    v37 = *((_QWORD *)this + 30);
    if (kAVVCScope)
    {
      v38 = *(id *)kAVVCScope;
      if (!v38)
        goto LABEL_79;
    }
    else
    {
      v38 = (id)MEMORY[0x1E0C81028];
      v41 = MEMORY[0x1E0C81028];
    }
    v42 = v38;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v88, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 128;
      v96 = 2048;
      v97 = v88;
      v98 = 2048;
      v99 = v36;
      _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)startRecord : using activeDevice: %p", buf, 0x26u);
      v43 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }

LABEL_79:
    if (kAVVCScope)
    {
      v46 = *(id *)kAVVCScope;
      if (!v46)
      {
LABEL_86:
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v50 = *(_QWORD *)buf;
        v49 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v51 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          v53 = (unint64_t *)&v49->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          aBlock = MEMORY[0x1E0C809B0];
          v69 = 3321888768;
          v70 = ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke;
          v71 = &unk_1E3BEA678;
          v74 = v50;
          v75 = v49;
          do
            v55 = __ldxr(v51);
          while (__stxr(v55 + 1, v51));
        }
        else
        {
          aBlock = MEMORY[0x1E0C809B0];
          v69 = 3321888768;
          v70 = ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke;
          v71 = &unk_1E3BEA678;
          v74 = *(_QWORD *)buf;
          v75 = 0;
        }
        v73 = &v91;
        v56 = v36;
        v72 = v56;
        v57 = _Block_copy(&aBlock);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v58 = (void *)MEMORY[0x1E0C99D80];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v37);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *((unsigned int *)this + 62));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", v59, CFSTR("StartTime"), v60, CFSTR("StartAnchorPoint"), 0);
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          -[__CFString startRecordingWithSettings:withCompletionBlock:](v56, "startRecordingWithSettings:withCompletionBlock:", v61, v57);
        }
        else
        {
          -[__CFString startRecordingWithCompletionBlock:](v56, "startRecordingWithCompletionBlock:", v57);
        }

        if (v75)
          std::__shared_weak_count::__release_weak(v75);
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        goto LABEL_108;
      }
    }
    else
    {
      v46 = (id)MEMORY[0x1E0C81028];
      v47 = MEMORY[0x1E0C81028];
    }
    v48 = v46;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 132;
      v96 = 2048;
      v97 = (const char *)v36;
      _os_log_impl(&dword_19B733000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### calling startRecordingWithCompletionBlock on device (%p) ####", buf, 0x1Cu);
    }

    goto LABEL_86;
  }
  v39 = v92;
  *((_DWORD *)v92 + 6) = 2;
  if (kAVVCScope)
  {
    v40 = *(id *)kAVVCScope;
    if (!v40)
      goto LABEL_108;
  }
  else
  {
    v40 = MEMORY[0x1E0C81028];
    v62 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    v63 = *((_DWORD *)v39 + 6);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 200;
    v96 = 1024;
    LODWORD(v97) = v63;
    _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordQueue:  No device found, err : %d", buf, 0x18u);
  }

LABEL_108:
  v64 = *((_DWORD *)v92 + 6);
  if (v64)
  {
    AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v64, "startRecording");
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
    v65 = *((unsigned int *)v92 + 6);
  }
  else
  {
    v65 = 0;
  }

  TraceMethod::~TraceMethod((TraceMethod *)v90);
  _Block_object_dispose(&v91, 8);
  return v65;
}

void sub_19B73D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  uint64_t v38;

  TraceMethod::~TraceMethod((TraceMethod *)&a36);
  _Block_object_dispose((const void *)(v38 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::stopRecording(AVVCPluginRecordingEngine *this)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  AVVCRecordingEngine *v10;
  unsigned int v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *p_shared_weak_owners;
  unint64_t v50;
  id v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v57;
  _QWORD v58[7];
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  AVVCRecordingEngine *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _BYTE v72[8];
  _BYTE v73[18];
  __int16 v74;
  int v75;
  _BYTE buf[28];
  __int16 v77;
  __CFString *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v72, "AVVCPluginRecordingEngine::stopRecording");
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
LABEL_5:
    v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
LABEL_63:

      goto LABEL_64;
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v73, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v5 = *(_QWORD *)v73;
    if (*(_QWORD *)v73)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v70, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 64))(v70, 0);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v57, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v6 = "Inactive";
          break;
        case 2u:
          v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v6 = "Deactivating";
          break;
        case 5u:
          v6 = "Prewarming";
          break;
        case 6u:
          v6 = "Activating";
          break;
        case 7u:
          v6 = "Active";
          break;
        default:
          v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v68, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v68)
    {
      v7 = (uint64_t)v69;
      if (v69)
        v7 = v69->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v68, *(unsigned int *)(v68 + 272), v7);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = CFSTR("(0x0) use_count:0");
    }
    v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v66, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v10 = v66;
    if (v66)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v64, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 320))(v64);
      if (v11 > 4)
        v12 = "ILLEGAL";
      else
        v12 = off_1E3BEC7A8[v11];
    }
    else
    {
      v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v62, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v62)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v60, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v13 = *(_QWORD *)(v60 + 224);
      if (v13 > 6)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC7D0[v13];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v6;
      v77 = 2112;
      v78 = v9;
      v79 = 2080;
      v80 = v12;
      v81 = 2080;
      v82 = v14;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v15 = v61;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v6;
      v77 = 2112;
      v78 = v9;
      v79 = 2080;
      v80 = v12;
      v81 = 2080;
      v82 = "unconfigured";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v18 = v63;
    if (v63)
    {
      v19 = (unint64_t *)&v63->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v10)
    {
      v21 = v65;
      if (v65)
      {
        v22 = (unint64_t *)&v65->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v24 = v67;
    if (v67)
    {
      v25 = (unint64_t *)&v67->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    v27 = v69;
    if (!v69)
      goto LABEL_50;
    v28 = (unint64_t *)&v69->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v5)
        goto LABEL_51;
    }
    else
    {
LABEL_50:
      if (v5)
      {
LABEL_51:

        v30 = v71;
        if (v71)
        {
          v31 = (unint64_t *)&v71->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
    v33 = *(std::__shared_weak_count **)&v73[8];
    if (*(_QWORD *)&v73[8])
    {
      v34 = (unint64_t *)(*(_QWORD *)&v73[8] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    goto LABEL_63;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
    goto LABEL_5;
LABEL_64:
  if (*((uint64_t *)this + 28) < 4)
  {
    v36 = 0;
    goto LABEL_102;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  *(_DWORD *)&buf[24] = 0;
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v66, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (v37)
  {
    AVVCRecordingEngine::setStreamState((uint64_t)this, 6);
    if (kAVVCScope)
    {
      v38 = *(id *)kAVVCScope;
      if (!v38)
      {
LABEL_77:
        *((_BYTE *)this + 252) = 1;
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v73, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v44 = *(_QWORD *)v73;
        v43 = *(std::__shared_weak_count **)&v73[8];
        if (*(_QWORD *)&v73[8])
        {
          v45 = (unint64_t *)(*(_QWORD *)&v73[8] + 16);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
          v47 = (unint64_t *)&v43->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3321888768;
        v58[2] = ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke;
        v58[3] = &unk_1E3BEA598;
        v58[5] = this;
        v58[6] = v44;
        v59 = v43;
        if (v43)
        {
          p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
          do
            v50 = __ldxr(p_shared_weak_owners);
          while (__stxr(v50 + 1, p_shared_weak_owners));
        }
        v58[4] = buf;
        objc_msgSend(v37, "stopRecordingWithCompletionBlock:", v58);
        if (v59)
          std::__shared_weak_count::__release_weak(v59);
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        goto LABEL_96;
      }
    }
    else
    {
      v38 = (id)MEMORY[0x1E0C81028];
      v41 = MEMORY[0x1E0C81028];
    }
    v42 = v38;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v73 = 136315394;
      *(_QWORD *)&v73[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&v73[12] = 1024;
      *(_DWORD *)&v73[14] = 235;
      _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::stopRecording: mRecordIsStopping set to true", v73, 0x12u);
    }

    goto LABEL_77;
  }
  v39 = *(_QWORD *)&buf[8];
  *(_DWORD *)(*(_QWORD *)&buf[8] + 24) = 2;
  if (!kAVVCScope)
  {
    v40 = MEMORY[0x1E0C81028];
    v51 = MEMORY[0x1E0C81028];
    goto LABEL_92;
  }
  v40 = *(id *)kAVVCScope;
  if (v40)
  {
LABEL_92:
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v52 = *(_DWORD *)(v39 + 24);
      *(_DWORD *)v73 = 136315650;
      *(_QWORD *)&v73[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&v73[12] = 1024;
      *(_DWORD *)&v73[14] = 266;
      v74 = 1024;
      v75 = v52;
      _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecording:  No device found error :%d", v73, 0x18u);
    }

    v39 = *(_QWORD *)&buf[8];
  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, *(_DWORD *)(v39 + 24), "stopRecording");
  AVVCRecordingEngine::doneRecording(v66);
LABEL_96:
  v36 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
  v53 = v67;
  if (v67)
  {
    v54 = (unint64_t *)&v67->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  _Block_object_dispose(buf, 8);

LABEL_102:
  TraceMethod::~TraceMethod((TraceMethod *)v72);
  return v36;
}

void sub_19B73E17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (v41)
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a28);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v40)
  {

    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a36);

  TraceMethod::~TraceMethod((TraceMethod *)&a34);
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::destroyRecordEngine(AVVCPluginRecordingEngine *this, int a2)
{
  id v4;
  id v5;
  NSObject *v6;
  AVVCRecordingEngine *v7;
  const char *v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  AVVCRecordingEngine *v12;
  unsigned int v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  id v52;
  id v53;
  NSObject *v54;
  id v55;
  id v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v65;
  AVVCRecordingEngine *v66;
  _QWORD v67[4];
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  AVVCRecordingEngine *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  AVVCRecordingEngine *v81;
  std::__shared_weak_count *v82;
  char v83[8];
  uint8_t buf[4];
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  AVVCRecordingEngine *v89;
  __int16 v90;
  __CFString *v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  const char *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v83, "AVVCPluginRecordingEngine::destroyRecordEngine");
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_64;
  }
  else
  {
    v4 = (id)MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  v6 = v4;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v7 = v81;
    if (v81)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v79, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 64))(v79, 0);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v65, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v8 = "Inactive";
          break;
        case 2u:
          v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v8 = "Deactivating";
          break;
        case 5u:
          v8 = "Prewarming";
          break;
        case 6u:
          v8 = "Activating";
          break;
        case 7u:
          v8 = "Active";
          break;
        default:
          v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v8 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v77, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v66 = v7;
    if (v77)
    {
      v9 = (uint64_t)v78;
      if (v78)
        v9 = v78->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v77, *(unsigned int *)(v77 + 272), v9);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = CFSTR("(0x0) use_count:0");
    }
    v11 = v10;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v75, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v12 = v75;
    if (v75)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v73, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 320))(v73);
      if (v13 > 4)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC7A8[v13];
    }
    else
    {
      v14 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v71, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v71)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v69, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v15 = *(_QWORD *)(v69 + 224);
      if (v15 > 6)
        v16 = "ILLEGAL";
      else
        v16 = off_1E3BEC7D0[v15];
      *(_DWORD *)buf = 136316418;
      v85 = "AVVCPluginRecordingEngine.mm";
      v86 = 1024;
      v87 = 282;
      v88 = 2080;
      v89 = (AVVCRecordingEngine *)v8;
      v90 = 2112;
      v91 = v11;
      v92 = 2080;
      v93 = v14;
      v94 = 2080;
      v95 = v16;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v17 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      v85 = "AVVCPluginRecordingEngine.mm";
      v86 = 1024;
      v87 = 282;
      v88 = 2080;
      v89 = (AVVCRecordingEngine *)v8;
      v90 = 2112;
      v91 = v11;
      v92 = 2080;
      v93 = v14;
      v94 = 2080;
      v95 = "unconfigured";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v20 = v72;
    if (v72)
    {
      v21 = (unint64_t *)&v72->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v12)
    {
      v23 = v74;
      if (v74)
      {
        v24 = (unint64_t *)&v74->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v26 = v76;
    if (v76)
    {
      v27 = (unint64_t *)&v76->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    v29 = v78;
    if (v78)
    {
      v30 = (unint64_t *)&v78->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v66)
    {

      v32 = v80;
      if (v80)
      {
        v33 = (unint64_t *)&v80->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    v35 = v82;
    if (v82)
    {
      v36 = (unint64_t *)&v82->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }

  }
LABEL_64:
  if (kAVVCScope)
  {
    v38 = *(id *)kAVVCScope;
    if (!v38)
      goto LABEL_75;
  }
  else
  {
    v38 = (id)MEMORY[0x1E0C81028];
    v39 = MEMORY[0x1E0C81028];
  }
  v40 = v38;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    *(_DWORD *)buf = 136315650;
    v85 = "AVVCPluginRecordingEngine.mm";
    v86 = 1024;
    v87 = 283;
    v88 = 2048;
    v89 = v81;
    _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)AVVCPluginRecordingEngine::destroyRecordEngine: Entering --->", buf, 0x1Cu);
    v41 = v82;
    if (v82)
    {
      v42 = (unint64_t *)&v82->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }

LABEL_75:
  *((_BYTE *)this + 252) = 1;
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (!v44)
  {
    if (kAVVCScope)
    {
      v46 = *(id *)kAVVCScope;
      if (!v46)
      {
LABEL_88:
        v49 = 2;
        goto LABEL_97;
      }
    }
    else
    {
      v46 = (id)MEMORY[0x1E0C81028];
      v47 = MEMORY[0x1E0C81028];
    }
    v48 = v46;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v85 = "AVVCPluginRecordingEngine.mm";
      v86 = 1024;
      v87 = 317;
      v88 = 1024;
      LODWORD(v89) = 2;
      _os_log_impl(&dword_19B733000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d destroyRecordEngine: device found, err : %d", buf, 0x18u);
    }

    goto LABEL_88;
  }
  if (!a2 || *((_DWORD *)this + 58) == -11785)
    goto LABEL_94;
  if (!kAVVCScope)
  {
    v45 = (id)MEMORY[0x1E0C81028];
    v50 = MEMORY[0x1E0C81028];
    goto LABEL_90;
  }
  v45 = *(id *)kAVVCScope;
  if (v45)
  {
LABEL_90:
    v51 = v45;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v85 = "AVVCPluginRecordingEngine.mm";
      v86 = 1024;
      v87 = 295;
      _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine: about to call stopRecordingCompletionBlock - previous stop completion block didn't happen", buf, 0x12u);
    }

  }
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 3221225472;
  v67[2] = ___ZN25AVVCPluginRecordingEngine19destroyRecordEngineEb_block_invoke;
  v67[3] = &__block_descriptor_36_e17_v16__0__NSError_8l;
  v68 = 0;
  objc_msgSend(v44, "stopRecordingWithCompletionBlock:", v67);
LABEL_94:
  objc_msgSend(v44, "setAudioInputBlock:", 0);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v44, "setStatusChangeBlock:", 0);
  v49 = 0;
LABEL_97:
  if (kAVVCScope)
  {
    v52 = *(id *)kAVVCScope;
    if (!v52)
      goto LABEL_104;
  }
  else
  {
    v52 = (id)MEMORY[0x1E0C81028];
    v53 = MEMORY[0x1E0C81028];
  }
  v54 = v52;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v85 = "AVVCPluginRecordingEngine.mm";
    v86 = 1024;
    v87 = 321;
    _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine: Calling doneRecording explicitly", buf, 0x12u);
  }

LABEL_104:
  AVVCRecordingEngine::doneRecording(v81);
  AVVCRecordingEngine::setStreamState((uint64_t)this, 1);
  *((_BYTE *)this + 252) = 0;
  if (kAVVCScope)
  {
    v55 = *(id *)kAVVCScope;
    if (!v55)
      goto LABEL_115;
  }
  else
  {
    v55 = (id)MEMORY[0x1E0C81028];
    v56 = MEMORY[0x1E0C81028];
  }
  v57 = v55;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v75, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    *(_DWORD *)buf = 136315650;
    v85 = "AVVCPluginRecordingEngine.mm";
    v86 = 1024;
    v87 = 326;
    v88 = 2048;
    v89 = v75;
    _os_log_impl(&dword_19B733000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)AVVCPluginRecordingEngine::destroyRecordEngine: Exiting <---", buf, 0x1Cu);
    v58 = v76;
    if (v76)
    {
      v59 = (unint64_t *)&v76->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }

LABEL_115:
  v61 = v82;
  if (v82)
  {
    v62 = (unint64_t *)&v82->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }

  TraceMethod::~TraceMethod((TraceMethod *)v83);
  return v49;
}

void sub_19B73EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (v34)
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a14)
  {

    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a32);

  TraceMethod::~TraceMethod((TraceMethod *)(v35 - 184));
  _Unwind_Resume(a1);
}

__n128 AVVCPluginRecordingEngine::getRecordQueueFormat@<Q0>(AVVCPluginRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 24);
  v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 7);
  return result;
}

uint64_t AVVCRecordingEngine::getNumberOfChannels(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCPluginRecordingEngine::enableSiriListeningMode(AVVCPluginRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCPluginRecordingEngine::enableMetering(AVVCPluginRecordingEngine *this, char a2)
{
  *((_BYTE *)this + 296) = a2;
  return 0;
}

uint64_t AVVCPluginRecordingEngine::updateMeterLevels(AVVCPluginRecordingEngine *this)
{
  size_t v2;
  float32x2_t *v3;
  BOOL v4;
  const float *v5;
  float32x2_t v6;

  v2 = *((unsigned int *)this + 13);
  v3 = (float32x2_t *)*((_QWORD *)this + 38);
  if (!v3)
  {
    v3 = (float32x2_t *)malloc_type_calloc(v2, 8uLL, 0x100004000313F17uLL);
    *((_QWORD *)this + 38) = v3;
  }
  if (v3)
    v4 = (_DWORD)v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = (const float *)((char *)this + 628);
    v6 = vld1_dup_f32(v5);
    do
    {
      *v3++ = v6;
      --v2;
    }
    while (v2);
  }
  return 0;
}

void AVVCPluginRecordingEngine::updateStreamStoppedState(AVVCPluginRecordingEngine *this)
{
  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
}

uint64_t AVVCPluginRecordingEngine::resetAudioEngine(AVVCPluginRecordingEngine *this)
{
  return 0;
}

double AVVCRecordingEngine::getElapsedRecordTime(AVVCRecordingEngine *this, double a2)
{
  return 0.0;
}

uint64_t AVVCRecordingEngine::getQueueUInt32PropertyValue(AVVCRecordingEngine *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueueFloat64PropertyValue(AVVCRecordingEngine *this, unsigned int a2, double *a3)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::setQueueUInt32PropertyValue(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::setQueueFloat64PropertyValue(AVVCRecordingEngine *this, double a2)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueuePropertyValueSize(AVVCRecordingEngine *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueuePtrPropertyValue(AVVCRecordingEngine *this, unsigned int a2, void *a3, unsigned int *a4)
{
  return 4294967292;
}

void AVVCPluginRecordingEngine::handleRecordInput(AVVCPluginRecordingEngine *this, AVAudioBuffer *a2, int a3, float *a4, const AudioTimeStamp *a5)
{
  AVAudioBuffer *v9;
  __objc2_class_ro **p_info;
  NSObject *v11;
  id v12;
  UInt64 mHostTime;
  Float64 mSampleTime;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  void *v18;
  int v19;
  AVAudioBuffer *v20;
  void *v21;
  int v22;
  int v23;
  UInt64 v24;
  AVAudioBuffer *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  AVVCAudioBuffer *v29;
  size_t v30;
  id v31;
  id v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  AVAudioBuffer *v36;
  NSObject *v37;
  AVAudioBuffer *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  id v42;
  id v43;
  unint64_t v44;
  const char *v45;
  id v46;
  uint32_t v47;
  id v48;
  int v49;
  void *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  NSObject *v61;
  id v62;
  id v63;
  double v64;
  int v65;
  int v66;
  int v67;
  id v68;
  double v69;
  int v70;
  int v71;
  int v72;
  id *v73;
  id v74;
  int v75;
  int v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  _BYTE v81[26];
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  p_info = &OBJC_METACLASS___AVSpeechUtterance.info;
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_8;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    mSampleTime = a5->mSampleTime;
    mHostTime = a5->mHostTime;
    v76 = 136316162;
    v77 = "AVVCPluginRecordingEngine.mm";
    v78 = 1024;
    v79 = 583;
    v80 = 1024;
    *(_DWORD *)v81 = a3;
    *(_WORD *)&v81[4] = 2048;
    *(_QWORD *)&v81[6] = mHostTime;
    *(_WORD *)&v81[14] = 2048;
    *(Float64 *)&v81[16] = mSampleTime;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d In AVVCPluginRecordingEngine::handleRecordInput: %u frames, hostTime : %lld, sampletime : %f", (uint8_t *)&v76, 0x2Cu);
  }

LABEL_8:
  v15 = *((_QWORD *)this + 28);
  v16 = v15 == 6 || v15 <= 3;
  if (v16 && !*((_BYTE *)this + 253))
  {
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
        goto LABEL_87;
    }
    else
    {
      v31 = (id)MEMORY[0x1E0C81028];
      v43 = MEMORY[0x1E0C81028];
    }
    v17 = v31;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v44 = *((_QWORD *)this + 28);
      if (v44 > 6)
        v45 = "ILLEGAL";
      else
        v45 = off_1E3BEC7D0[v44];
      v75 = *((unsigned __int8 *)this + 253);
      v76 = 136315906;
      v77 = "AVVCPluginRecordingEngine.mm";
      v78 = 1024;
      v79 = 587;
      v80 = 2080;
      *(_QWORD *)v81 = v45;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v75;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput: record internally stopped, so throwing away buffer. StreamState(%s). RecordCancelled(%d)", (uint8_t *)&v76, 0x22u);
    }

    goto LABEL_86;
  }
  if (v9 || v15 != 5)
  {
    -[AVAudioBuffer format](v9, "format");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = *(_DWORD *)(objc_msgSend(v18, "streamDescription") + 8);

    if (v19 != 1936745848)
    {
      if (v19 != 1869641075)
      {
        if (v19 != 1819304813)
        {
          if (kAVVCScope)
          {
            v17 = *(id *)kAVVCScope;
            if (!v17)
              goto LABEL_87;
          }
          else
          {
            v17 = MEMORY[0x1E0C81028];
            v46 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            goto LABEL_86;
          v76 = 136315650;
          v77 = "AVVCPluginRecordingEngine.mm";
          v78 = 1024;
          v79 = 685;
          v80 = 1024;
          *(_DWORD *)v81 = v19;
          v33 = "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput - Unsupported formatID: %u";
          v34 = v17;
          v35 = OS_LOG_TYPE_ERROR;
          v47 = 24;
          goto LABEL_82;
        }
        v20 = v9;
        -[AVAudioBuffer format](v20, "format");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(_DWORD *)(objc_msgSend(v21, "streamDescription") + 24);
        v23 = -[AVAudioBuffer frameLength](v20, "frameLength");

        v24 = a5->mHostTime;
        v25 = v20;
        v26 = operator new();
        *(_DWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_DWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_DWORD *)(v26 + 32) = 0;
        *(_QWORD *)(v26 + 40) = 0;
        *(_DWORD *)(v26 + 48) = 0;
        *(_OWORD *)(v26 + 56) = 0u;
        *(_OWORD *)(v26 + 72) = 0u;
        *(_OWORD *)(v26 + 83) = 0u;
        v27 = -[AVAudioBuffer audioBufferList](v25, "audioBufferList");
        *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 16);
        *(_DWORD *)(v26 + 16) = *(_DWORD *)(v27 + 12);
        *(_BYTE *)(v26 + 99) = *((_BYTE *)this + 328);
        *(_QWORD *)(v26 + 88) = *((_QWORD *)this + 7);
        v28 = *(_OWORD *)((char *)this + 40);
        *(_OWORD *)(v26 + 56) = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)(v26 + 72) = v28;
        v29 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", v26, *(unsigned int *)(v27 + 8), v24);
        AVVCRecordingEngine::avvcAudioBufferReceived((AVVCRecordingEngine *)this, v29, 1, 1);
        p_info = (__objc2_class_ro **)(&OBJC_METACLASS___AVSpeechUtterance + 32);
        *(_QWORD *)(v26 + 8) = 0;

        v30 = (v23 * v22);
        goto LABEL_75;
      }
      v38 = v9;
      v39 = -[AVAudioBuffer packetDescriptions](v38, "packetDescriptions");
      v40 = -[AVAudioBuffer packetCount](v38, "packetCount") - 1;
      v41 = (_DWORD *)(v39 + 16 * v40);
      v30 = (v41[3] + *v41);
      if (kAVVCScope)
      {
        v42 = *(id *)kAVVCScope;
        if (!v42)
        {
LABEL_56:
          p_info = &OBJC_METACLASS___AVSpeechUtterance.info;
          v52 = operator new();
          MyAudioQueueBuffer::MyAudioQueueBuffer((MyAudioQueueBuffer *)v52, v30, -[AVAudioBuffer packetCount](v38, "packetCount"));
          *(_DWORD *)(v52 + 16) = v30;
          *(_DWORD *)(v52 + 48) = -[AVAudioBuffer packetCount](v38, "packetCount");
          *(_BYTE *)(v52 + 98) = *((_BYTE *)this + 636);
          *(_BYTE *)(v52 + 97) = *((_BYTE *)this + 637);
          *(_BYTE *)(v52 + 96) = *((_BYTE *)this + 638);
          memcpy(*(void **)(v52 + 40), (const void *)-[AVAudioBuffer packetDescriptions](v38, "packetDescriptions"), 16 * -[AVAudioBuffer packetCount](v38, "packetCount"));
          memcpy(*(void **)(v52 + 8), (const void *)-[AVAudioBuffer data](v38, "data"), v30);
          *(_OWORD *)(v52 + 56) = *(_OWORD *)((char *)this + 24);
          *(_OWORD *)(v52 + 72) = *(_OWORD *)((char *)this + 40);
          *(_QWORD *)(v52 + 88) = *((_QWORD *)this + 7);
          *((_DWORD *)this + 154) += -[AVAudioBuffer packetCount](v38, "packetCount");
          if (kAVVCScope)
          {
            v61 = *(id *)kAVVCScope;
            if (!v61)
              goto LABEL_74;
          }
          else
          {
            v61 = MEMORY[0x1E0C81028];
            v68 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          {
            v69 = *((float *)this + 157);
            v70 = *(_DWORD *)(v52 + 16);
            v71 = *(_DWORD *)(v52 + 48);
            v72 = *((_DWORD *)this + 154);
            v76 = 136316418;
            v77 = "AVVCPluginRecordingEngine.mm";
            v78 = 1024;
            v79 = 638;
            v80 = 2048;
            *(double *)v81 = v69;
            *(_WORD *)&v81[8] = 1024;
            *(_DWORD *)&v81[10] = v70;
            *(_WORD *)&v81[14] = 1024;
            *(_DWORD *)&v81[16] = v71;
            *(_WORD *)&v81[20] = 1024;
            *(_DWORD *)&v81[22] = v72;
            _os_log_impl(&dword_19B733000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput (opus): max frame gain: %.2f dB.  sending %u bytes of encoded data to client with %u packet descs, max packet count %d", (uint8_t *)&v76, 0x2Eu);
          }
LABEL_73:

LABEL_74:
          AVVCRecordingEngine::myAudioQueueBufferReceived((AVVCRecordingEngine *)this, (MyAudioQueueBuffer *)v52, a5->mHostTime);
LABEL_75:

          (*(void (**)(AVVCPluginRecordingEngine *, _QWORD, AVAudioBuffer *, size_t))(*(_QWORD *)this + 272))(this, *((_QWORD *)this + 9), v9, v30);
          v73 = (id *)p_info[498];
          if (v73)
          {
            v17 = *v73;
            if (!v17)
              goto LABEL_87;
          }
          else
          {
            v17 = MEMORY[0x1E0C81028];
            v74 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            goto LABEL_86;
          v76 = 136315394;
          v77 = "AVVCPluginRecordingEngine.mm";
          v78 = 1024;
          v79 = 693;
          v33 = "%25s:%-5d Exiting AVVCPluginRecordingEngine::handleRecordInput";
          v34 = v17;
          v35 = OS_LOG_TYPE_DEBUG;
          goto LABEL_81;
        }
      }
      else
      {
        v42 = (id)MEMORY[0x1E0C81028];
        v55 = MEMORY[0x1E0C81028];
      }
      v56 = v42;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v57 = -[AVAudioBuffer packetCount](v38, "packetCount");
        v58 = *(_QWORD *)v41;
        v59 = *(_DWORD *)(v39 + 16 * v40 + 8);
        v60 = v41[3];
        v76 = 136316674;
        v77 = "AVVCPluginRecordingEngine.mm";
        v78 = 1024;
        v79 = 621;
        v80 = 1024;
        *(_DWORD *)v81 = v30;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = v57;
        *(_WORD *)&v81[10] = 2048;
        *(_QWORD *)&v81[12] = v58;
        *(_WORD *)&v81[20] = 1024;
        *(_DWORD *)&v81[22] = v59;
        v82 = 1024;
        v83 = v60;
        _os_log_impl(&dword_19B733000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput (opus). bufferLength : %d, packetCount : %d, packetDesc.startOffset %lld, packetDesc.mVariableFramesInPacket %u, packetDesc.DataByteSize = %u", (uint8_t *)&v76, 0x34u);
      }

      goto LABEL_56;
    }
    v36 = v9;
    AVVCRecordingEngine::checkForEndpoint((AVVCRecordingEngine *)this, 0, a4);
    if (kAVVCScope)
    {
      v37 = *(id *)kAVVCScope;
      if (!v37)
        goto LABEL_49;
    }
    else
    {
      v37 = MEMORY[0x1E0C81028];
      v48 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      v76 = 136315394;
      v77 = "AVVCPluginRecordingEngine.mm";
      v78 = 1024;
      v79 = 655;
      _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up client buffer", (uint8_t *)&v76, 0x12u);
    }

LABEL_49:
    v49 = -[AVAudioBuffer packetCount](v36, "packetCount");
    -[AVAudioBuffer format](v36, "format");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = *(_DWORD *)(objc_msgSend(v50, "streamDescription") + 16);

    v52 = operator new();
    v30 = (v51 * v49);
    MyAudioQueueBuffer::MyAudioQueueBuffer((MyAudioQueueBuffer *)v52, v30, 1u);
    *(_DWORD *)(v52 + 16) = v30;
    *(_DWORD *)(v52 + 48) = 1;
    v53 = *(_QWORD *)(v52 + 40);
    *(_QWORD *)v53 = 0;
    *(_DWORD *)(v53 + 8) = 0;
    *(_DWORD *)(v53 + 12) = v30;
    if (kAVVCScope)
    {
      v54 = *(id *)kAVVCScope;
      if (!v54)
      {
LABEL_63:
        memcpy(*(void **)(v52 + 8), (const void *)-[AVAudioBuffer data](v36, "data"), v30);
        *(_OWORD *)(v52 + 56) = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)(v52 + 72) = *(_OWORD *)((char *)this + 40);
        *(_QWORD *)(v52 + 88) = *((_QWORD *)this + 7);
        *((_DWORD *)this + 154) += -[AVAudioBuffer packetCount](v36, "packetCount");
        if (kAVVCScope)
        {
          v61 = *(id *)kAVVCScope;
          if (!v61)
            goto LABEL_74;
        }
        else
        {
          v61 = MEMORY[0x1E0C81028];
          v63 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          v64 = *((float *)this + 157);
          v65 = *(_DWORD *)(v52 + 16);
          v66 = *(_DWORD *)(v52 + 48);
          v67 = *((_DWORD *)this + 154);
          v76 = 136316418;
          v77 = "AVVCPluginRecordingEngine.mm";
          v78 = 1024;
          v79 = 674;
          v80 = 2048;
          *(double *)v81 = v64;
          *(_WORD *)&v81[8] = 1024;
          *(_DWORD *)&v81[10] = v65;
          *(_WORD *)&v81[14] = 1024;
          *(_DWORD *)&v81[16] = v66;
          *(_WORD *)&v81[20] = 1024;
          *(_DWORD *)&v81[22] = v67;
          _os_log_impl(&dword_19B733000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput (speex): max frame gain: %.2f dB.  sending %u bytes of encoded data to client with %u packet descs, max packet count %d", (uint8_t *)&v76, 0x2Eu);
        }
        goto LABEL_73;
      }
    }
    else
    {
      v54 = MEMORY[0x1E0C81028];
      v62 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      v76 = 136315650;
      v77 = "AVVCPluginRecordingEngine.mm";
      v78 = 1024;
      v79 = 665;
      v80 = 1024;
      *(_DWORD *)v81 = v30;
      _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Copying BT audio buffer, size %u", (uint8_t *)&v76, 0x18u);
    }

    goto LABEL_63;
  }
  if (kAVVCScope)
  {
    v17 = *(id *)kAVVCScope;
    if (!v17)
      goto LABEL_87;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
    v32 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v76 = 136315394;
    v77 = "AVVCPluginRecordingEngine.mm";
    v78 = 1024;
    v79 = 594;
    v33 = "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput - recordState is active, but getting nil buffer";
    v34 = v17;
    v35 = OS_LOG_TYPE_ERROR;
LABEL_81:
    v47 = 18;
LABEL_82:
    _os_log_impl(&dword_19B733000, v34, v35, v33, (uint8_t *)&v76, v47);
  }
LABEL_86:

LABEL_87:
}

void sub_19B73F8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::setupAudioCaptures(AVVCPluginRecordingEngine *this)
{
  __int128 v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)((char *)this + 40);
  v7[0] = *(_OWORD *)((char *)this + 24);
  v7[1] = v2;
  v8 = *((_QWORD *)this + 7);
  std::string::basic_string[abi:ne180100]<0>(__p, "Capture");
  v3 = NewAVVCAudioCapturer((uint64_t)__p);
  *((_QWORD *)this + 9) = v3;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    v3 = *((_QWORD *)this + 9);
  }
  if (v3)
    (*(void (**)(uint64_t, _QWORD, _OWORD *, _QWORD))(*(_QWORD *)v3 + 16))(v3, *((_QWORD *)this + 34), v7, 0);
  return 0;
}

void sub_19B73FA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AVVCPluginRecordingEngine::logAudioCaptures(AVVCPluginRecordingEngine *this, AVVCAudioCapturer *a2, AVAudioBuffer *a3, uint64_t a4)
{
  AVAudioBuffer *v6;

  v6 = a3;
  if (a2)
    (*(void (**)(AVVCAudioCapturer *, AVAudioBuffer *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v6, a4);

  return 0;
}

void sub_19B73FAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::disposeAudioCaptures(AVVCPluginRecordingEngine *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v3 = *((_QWORD *)this + 9);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 9) = 0;
  }
  return 0;
}

uint64_t AVVCPluginRecordingEngine::setSessionIsRecordingFlag(AVVCPluginRecordingEngine *this)
{
  char isSessionRecording;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[5];
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3032000000;
  v26[3] = __Block_byref_object_copy_;
  v26[4] = __Block_byref_object_dispose_;
  v27 = 0;
  isSessionRecording = AVVCRecordingEngine::isSessionRecording((AVVCRecordingEngine *)this);
  (*(void (**)(AVVCPluginRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v24, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v5 = v24;
  v4 = v25;
  if (v25)
  {
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3321888768;
    v16 = ___ZN25AVVCPluginRecordingEngine25setSessionIsRecordingFlagEv_block_invoke;
    v17 = &unk_1E3BEAAD8;
    v21 = v5;
    v22 = v4;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  else
  {
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3321888768;
    v16 = ___ZN25AVVCPluginRecordingEngine25setSessionIsRecordingFlagEv_block_invoke;
    v17 = &unk_1E3BEAAD8;
    v21 = v24;
    v22 = 0;
  }
  v11 = v3;
  v23 = isSessionRecording;
  v18 = v11;
  v19 = v26;
  v20 = &v28;
  (*(void (**)(AVVCPluginRecordingEngine *, uint64_t *, const char *))(*(_QWORD *)this + 368))(this, &v14, "setSessionIsRecordingFlag");
  v12 = *((unsigned int *)v29 + 6);

  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(&v28, 8);
  return v12;
}

void sub_19B73FCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::getPastDataFramesAvailable(AVVCRecordingEngine *this, unsigned int *a2)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::setupAudioQueueRecordDeviceAndUpdate(AVVCRecordingEngine *this, NSString *a2)
{
  return 4294967292;
}

uint64_t AVVCPluginRecordingEngine::getEngineType(AVVCPluginRecordingEngine *this)
{
  return 1;
}

uint64_t AVVCPluginRecordingEngine::getRecordRoute(uint64_t *a1, void **a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  int v7;
  void *v8;
  uint64_t v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  NSObject *v15;
  id v16;
  __CFString *v17;
  uint64_t v18;
  id v19;
  int v20;
  __CFString **v21;
  uint64_t v22;
  __CFString *v23;
  uint64_t v24;
  void *v25;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext((AVVCPluginRecordingEngine *)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = a1[47];
  v6 = v4;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)(v5 + 56));
  if (v6)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "remoteInputDeviceName");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "copy");
      v10 = *(__CFString **)v5;
      *(_QWORD *)v5 = v9;

      goto LABEL_23;
    }
    v14 = *(__CFString **)v5;
    *(_QWORD *)v5 = CFSTR("Error! No RemoteInputDeviceName property");

    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
        goto LABEL_23;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 136315394;
      v28 = "AVVCRouteManager.mm";
      v29 = 1024;
      v30 = 79;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d active device doesn't support remoteInputDeviceName property", (uint8_t *)&v27, 0x12u);
    }

LABEL_23:
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v20 = objc_msgSend(v6, "deviceCategory");
      *(_DWORD *)(v5 + 8) = v20;
      if (v20 <= 1919512179)
      {
        if (v20 != 1919510644)
        {
          if (v20 == 1919511158)
          {
            v21 = (__CFString **)&AVVoiceControllerRemoteInputJarvisRoute;
LABEL_36:
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", *v21);
            v22 = objc_claimAutoreleasedReturnValue();
            goto LABEL_37;
          }
LABEL_35:
          v21 = AVVoiceControllerNoRecordRoute;
          goto LABEL_36;
        }
LABEL_30:
        v21 = (__CFString **)&AVVoiceControllerBluetoothDoAPRoute;
        goto LABEL_36;
      }
      if (v20 == 1919512180)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", CFSTR("AVVCTestDevice"));
        v22 = objc_claimAutoreleasedReturnValue();
LABEL_37:
        v17 = (__CFString *)v22;
        if (v22)
        {
          v18 = 0;
        }
        else
        {
          v17 = CFSTR("No Record Route");
          v23 = CFSTR("No Record Route");
          v18 = 4294955512;
        }
        v24 = -[__CFString copy](v17, "copy");
        v25 = *(void **)(v5 + 32);
        *(_QWORD *)(v5 + 32) = v24;

        goto LABEL_41;
      }
      if (v20 != 1919513718)
        goto LABEL_35;
    }
    else if (MGGetSInt32Answer() != 4 || MGGetBoolAnswer())
    {
      goto LABEL_30;
    }
    v21 = (__CFString **)&AVVoiceControllerATVRemoteInputRoute;
    goto LABEL_36;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", CFSTR("No Record Route"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(void **)(v5 + 32);
  *(_QWORD *)(v5 + 32) = v11;

  if (!kAVVCScope)
  {
    v13 = MEMORY[0x1E0C81028];
    v16 = MEMORY[0x1E0C81028];
    goto LABEL_15;
  }
  v13 = *(id *)kAVVCScope;
  if (v13)
  {
LABEL_15:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315650;
      v28 = "AVVCRouteManager.mm";
      v29 = 1024;
      v30 = 71;
      v31 = 1024;
      v32 = 2;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::getRecordRoute : no matching device found, error : %d", (uint8_t *)&v27, 0x18u);
    }

  }
  v17 = *(__CFString **)v5;
  *(_QWORD *)v5 = CFSTR("Error! No Remote Device Found");
  v18 = 2;
LABEL_41:

  if (!v7)
    std::mutex::unlock((std::mutex *)(v5 + 56));

  AVVCRouteManager::getRecordRoute(a1[47], a2);
  return v18;
}

void sub_19B74016C(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;
  int v4;

  if (!v4)
    std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setDeviceIOBufferSizeFrames(AVVCRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCPluginRecordingEngine::_asbdForClientSettings(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  id v5;
  unint64_t v6;
  void *v7;
  void *v8;
  BOOL v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  int *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSDictionary *v43;
  NSString v44;
  double v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _BYTE v50[18];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v43 = a3;
  v6 = 0;
  LODWORD(v45) = 0;
  v7 = (void *)MEMORY[0x1E0C81028];
  while (1)
  {
    objc_msgSend(v5, "supportedFormats");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count") > v6;

    if (!v9)
      break;
    if (kAVVCScope)
    {
      v10 = *(id *)kAVVCScope;
      if (!v10)
        goto LABEL_10;
    }
    else
    {
      v11 = v7;
      v10 = v7;
    }
    v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v5, "supportedFormats");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectAtIndexedSubscript:", v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "debugDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HIDWORD(v45) = 136315906;
      v46 = "AVVCPluginRecordingEngine.mm";
      v47 = 1024;
      v48 = 372;
      v49 = 1024;
      *(_DWORD *)v50 = v6;
      *(_WORD *)&v50[4] = 2112;
      *(_QWORD *)&v50[6] = v15;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d supported Formats[%d] : %@ ", (uint8_t *)&v45 + 4, 0x22u);

    }
LABEL_10:
    ++v6;
  }
  objc_msgSend(v5, "supportedFormats");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "objectAtIndexedSubscript:", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    v18 = *(id *)kAVVCScope;
    if (!v18)
      goto LABEL_18;
  }
  else
  {
    v18 = (id)MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  v20 = v18;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v17, "debugDescription");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    HIDWORD(v45) = 136315650;
    v46 = "AVVCPluginRecordingEngine.mm";
    v47 = 1024;
    v48 = 378;
    v49 = 2112;
    *(_QWORD *)v50 = v21;
    _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using Format[0] : %@ ", (uint8_t *)&v45 + 4, 0x1Cu);

  }
LABEL_18:
  if (v17)
  {
    if (*(_DWORD *)(objc_msgSend(v17, "streamDescription") + 8) == 1869641075)
      goto LABEL_20;
    if (*(_DWORD *)(objc_msgSend(v17, "streamDescription") + 8) == 1936745848)
    {
      v26 = objc_msgSend(v17, "streamDescription");
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      a4[4] = *(_QWORD *)(v26 + 32);
      *(_OWORD *)a4 = v27;
      *((_OWORD *)a4 + 1) = v28;
      a4[2] = 0x14000000046;
      goto LABEL_32;
    }
    if (*(_DWORD *)(objc_msgSend(v17, "streamDescription") + 8) == 1819304813)
    {
LABEL_20:
      v22 = objc_msgSend(v17, "streamDescription");
      v24 = *(_OWORD *)v22;
      v25 = *(_OWORD *)(v22 + 16);
      a4[4] = *(_QWORD *)(v22 + 32);
      *(_OWORD *)a4 = v24;
      *((_OWORD *)a4 + 1) = v25;
      goto LABEL_32;
    }
  }
  if (!kAVVCScope)
  {
    v29 = MEMORY[0x1E0C81028];
    v30 = MEMORY[0x1E0C81028];
    goto LABEL_28;
  }
  v29 = *(id *)kAVVCScope;
  if (v29)
  {
LABEL_28:
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v45) = 136315394;
      v46 = "AVVCPluginRecordingEngine.mm";
      v47 = 1024;
      v48 = 393;
      _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d No Format specified.. Error", (uint8_t *)&v45 + 4, 0x12u);
    }

  }
  LODWORD(v45) = 5;
LABEL_32:
  v44 = 0;
  if (getFloat64ForKey(v43, &v44, &v45, v23))
  {
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
        goto LABEL_47;
    }
    else
    {
      v31 = MEMORY[0x1E0C81028];
      v32 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *a4;
      HIDWORD(v45) = 136315906;
      v46 = "AVVCPluginRecordingEngine.mm";
      v47 = 1024;
      v48 = 399;
      v49 = 2048;
      *(_QWORD *)v50 = v44;
      *(_WORD *)&v50[8] = 2048;
      *(_QWORD *)&v50[10] = v33;
      v34 = "%25s:%-5d clientRequestedSR was:%.2f, setting to %.2f";
      v35 = v31;
      v36 = 38;
      goto LABEL_45;
    }
  }
  else
  {
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
        goto LABEL_47;
    }
    else
    {
      v31 = MEMORY[0x1E0C81028];
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *a4;
      HIDWORD(v45) = 136315650;
      v46 = "AVVCPluginRecordingEngine.mm";
      v47 = 1024;
      v48 = 402;
      v49 = 2048;
      *(_QWORD *)v50 = v38;
      v34 = "%25s:%-5d clientRequestedSR was not specified, setting to %.2f";
      v35 = v31;
      v36 = 28;
LABEL_45:
      _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v45 + 4, v36);
    }
  }

LABEL_47:
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 40))(a1, *(double *)a4);
  v39 = LODWORD(v45);

  return v39;
}

void sub_19B740704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(AVVCPluginRecordingEngine *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _DWORD v17[7];

  *(_QWORD *)&v17[5] = *MEMORY[0x1E0C80C00];
  AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  if (*((_QWORD *)this + 35) == 1936750196)
  {
    objc_msgSend(*((id *)this + 76), "findFirstBluetoothDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_25;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)this + 35);
      v12 = 136315906;
      v13 = "AVVCPluginRecordingEngine.mm";
      v14 = 1024;
      v15 = 64;
      v16 = 1024;
      v17[0] = v8;
      LOWORD(v17[1]) = 2048;
      *(_QWORD *)((char *)&v17[1] + 2) = v4;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d finding the first device for activation mode (%{audio:4CC}d)  : %p", (uint8_t *)&v12, 0x22u);
    }
    goto LABEL_24;
  }
  if (v2)
  {
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_19:
        objc_msgSend(*((id *)this + 76), "findDeviceWithIdentifier:", v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_25;
      }
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v12 = 136315650;
      v13 = "AVVCPluginRecordingEngine.mm";
      v14 = 1024;
      v15 = 72;
      v16 = 2112;
      *(_QWORD *)v17 = v3;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d device identifier : %@", (uint8_t *)&v12, 0x1Cu);
    }

    goto LABEL_19;
  }
  if (!kAVVCScope)
  {
    v5 = MEMORY[0x1E0C81028];
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_21;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_21:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "AVVCPluginRecordingEngine.mm";
      v14 = 1024;
      v15 = 69;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d device identifier shouldn't be NULL... ", (uint8_t *)&v12, 0x12u);
    }
    v4 = 0;
LABEL_24:

    goto LABEL_25;
  }
  v4 = 0;
LABEL_25:

  return v4;
}

void sub_19B740A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

_QWORD *std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *this)
{
  std::__shared_weak_count *v4;

  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void ___ZN25AVVCPluginRecordingEngine25setSessionIsRecordingFlagEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id obj[3];

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    obj[2] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(void **)(a1 + 56);
      obj[1] = v5;
      if (v5)
      {
        v6 = *(unsigned __int8 *)(a1 + 72);
        v7 = *(void **)(a1 + 32);
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        obj[0] = *(id *)(v8 + 40);
        objc_msgSend(v7, "setRecordingFromRemoteInput:error:", v6, obj);
        objc_storeStrong((id *)(v8 + 40), obj[0]);
        v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        if (v9)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v9, "code");
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        {
          if (*(_BYTE *)(a1 + 72))
            v10 = 1;
          else
            v10 = 2;
          AVVCRecordingEngine::setRecordMode((uint64_t)v5, v10);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19B740B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_56c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void TraceMethod::TraceMethod(TraceMethod *this, const char *a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      return;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)this;
    v6 = 136315650;
    v7 = "AVVC_Log.h";
    v8 = 1024;
    v9 = 89;
    v10 = 2080;
    v11 = v5;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d >> %s", (uint8_t *)&v6, 0x1Cu);
  }

}

void ___ZN25AVVCPluginRecordingEngine19destroyRecordEngineEb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  int v7;
  void *v8;
  id v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_16;
    }
    else
    {
      v4 = (id)MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_DWORD *)(a1 + 32);
      objc_msgSend(v3, "debugDescription");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 136315906;
      v11 = "AVVCPluginRecordingEngine.mm";
      v12 = 1024;
      v13 = 304;
      v14 = 1024;
      v15 = v7;
      v16 = 2112;
      v17 = v8;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine - stopRecordingWithCompletionBlock: returned error(%d) : %@ ", (uint8_t *)&v10, 0x22u);

    }
  }
  else
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_16;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v10 = 136315394;
      v11 = "AVVCPluginRecordingEngine.mm";
      v12 = 1024;
      v13 = 301;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine -- stopRecordingWithCompletionBlock: STOPPED", (uint8_t *)&v10, 0x12u);
    }
  }

LABEL_16:
}

void sub_19B740F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TraceMethod::~TraceMethod(TraceMethod *this)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      return;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)this;
    v5 = 136315650;
    v6 = "AVVC_Log.h";
    v7 = 1024;
    v8 = 90;
    v9 = 2080;
    v10 = v4;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d << %s", (uint8_t *)&v5, 0x1Cu);
  }

}

void ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[4];
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[5];
  v23 = 0;
  v24 = 0;
  v5 = (std::__shared_weak_count *)a1[7];
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    v24 = v6;
    if (v6)
    {
      v7 = a1[6];
      v23 = v7;
      if (v7)
      {
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3321888768;
        v17[2] = ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke_85;
        v17[3] = &unk_1E3BEA988;
        v20 = v4;
        v18 = v3;
        v21 = v7;
        v22 = v6;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v19 = a1[4];
        (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v7 + 368))(v7, v17, "stopRecording_block_invoke");
        v10 = v22;
        if (v22)
        {
          v11 = (unint64_t *)&v22->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = v18;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  if (!kAVVCScope)
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
LABEL_18:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v26 = "AVVCPluginRecordingEngine.mm";
      v27 = 1024;
      v28 = 243;
      v29 = 2048;
      v30 = 0;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecording: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
    }
LABEL_20:

    v6 = v24;
    if (!v24)
      goto LABEL_25;
    goto LABEL_21;
  }
  v13 = *(id *)kAVVCScope;
  if (v13)
    goto LABEL_18;
  if (!v6)
    goto LABEL_25;
LABEL_21:
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_25:

}

void sub_19B7412D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v12);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_48c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke_85(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;
  AVVCRecordingEngine **v10;
  AVVCRecordingEngine *v11;
  id v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "code");
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        v11 = *(AVVCRecordingEngine **)(a1 + 56);
        v10 = (AVVCRecordingEngine **)(a1 + 56);
        AVVCRecordingEngine::setRecordErrorStatus(v11, *(_DWORD *)(*((_QWORD *)*(v10 - 2) + 1) + 24), "stopRecording_block_invoke");
        AVVCRecordingEngine::doneRecording(*v10);
        return;
      }
    }
    else
    {
      v3 = (id)MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    v7 = v3;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      objc_msgSend(*(id *)(a1 + 32), "debugDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 136315906;
      v15 = "AVVCPluginRecordingEngine.mm";
      v16 = 1024;
      v17 = 256;
      v18 = 1024;
      v19 = v8;
      v20 = 2112;
      v21 = v9;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::stopRecordingWithCompletionBlock: returned error(%d) : %@ ", (uint8_t *)&v14, 0x22u);

    }
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (!kAVVCScope)
  {
    v5 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_14;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_14:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v14 = 136315394;
      v15 = "AVVCPluginRecordingEngine.mm";
      v16 = 1024;
      v17 = 248;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::stopRecordingWithCompletionBlock: STOPPED", (uint8_t *)&v14, 0x12u);
    }

  }
  v13 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v13 + 224) == 6)
    AVVCRecordingEngine::doneRecording((AVVCRecordingEngine *)v13);
  *(_DWORD *)(v4 + 628) = -1024458752;
}

void sub_19B741544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 56);
}

void ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD v18[4];
  NSObject *v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v23 = 0;
  v24 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v24 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 48);
      v23 = v6;
      if (v6)
      {
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 3321888768;
        v18[2] = ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke_76;
        v18[3] = &unk_1E3BEA9C0;
        v19 = v3;
        v21 = v6;
        v22 = v5;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v17 = *(_OWORD *)(a1 + 32);
        v9 = (id)v17;
        v20 = v17;
        (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v6 + 368))(v6, v18, "startRecording_block_invoke");

        v10 = v22;
        if (v22)
        {
          v11 = (unint64_t *)&v22->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = v19;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  if (!kAVVCScope)
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
LABEL_18:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v26 = "AVVCPluginRecordingEngine.mm";
      v27 = 1024;
      v28 = 140;
      v29 = 2048;
      v30 = 0;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d startedRecording: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
    }
LABEL_20:

    v5 = v24;
    if (!v24)
      goto LABEL_25;
    goto LABEL_21;
  }
  v13 = *(id *)kAVVCScope;
  if (v13)
    goto LABEL_18;
  if (!v5)
    goto LABEL_25;
LABEL_21:
  v15 = (unint64_t *)&v5->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_25:

}

void sub_19B7417CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke_76(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *p_info;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  __CFString *v29;
  uint64_t v30;
  unsigned int v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  _BYTE v42[18];
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    p_info = &OBJC_METACLASS___AVSpeechUtterance.info;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 224) == 4)
    {
      if (kAVVCScope)
      {
        v5 = *(id *)kAVVCScope;
        if (!v5)
        {
LABEL_32:
          AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 56));
          return;
        }
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v38 = "AVVCPluginRecordingEngine.mm";
        v39 = 1024;
        v40 = 148;
        _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: RUNNING", buf, 0x12u);
      }

      goto LABEL_32;
    }
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_37;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v38 = "AVVCPluginRecordingEngine.mm";
      v39 = 1024;
      v40 = 152;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: RUNNING-PAUSED", buf, 0x12u);
    }

LABEL_37:
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
        return;
    }
    else
    {
      v16 = (id)MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    v18 = v16;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      goto LABEL_72;
    v19 = *(_QWORD *)(a1 + 56);
    if (v19)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v19 + 64))(*(_QWORD *)(a1 + 56), 0);
      p_info = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(p_info, "sessionState"))
      {
        case 0u:
          goto LABEL_45;
        case 1u:
          v20 = "Inactive";
          break;
        case 2u:
          v20 = "InteruptedWhileRecording";
          break;
        case 3u:
          v20 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v20 = "Deactivating";
          break;
        case 5u:
          v20 = "Prewarming";
          break;
        case 6u:
          v20 = "Activating";
          break;
        case 7u:
          v20 = "Active";
          break;
        default:
          v20 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_45:
      v20 = "NotConfigured";
    }
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(std::__shared_weak_count **)(a1 + 64);
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      if (v21)
      {
        v25 = (void *)MEMORY[0x1E0CB3940];
        v26 = *(_QWORD *)(v21 + 272);
        v27 = *p_shared_owners + 1;
LABEL_53:
        objc_msgSend(v25, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v21, v26, v27);
        v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_55:
        v29 = v28;
        v30 = *(_QWORD *)(a1 + 56);
        if (v30)
        {
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 320))(v30);
          if (v31 > 4)
            v32 = "ILLEGAL";
          else
            v32 = off_1E3BEC7A8[v31];
          v34 = *(_QWORD *)(a1 + 56);
          if (v34)
          {
            switch(*(_QWORD *)(v34 + 224))
            {
              case 0:
                v33 = "Invalid";
                break;
              case 1:
                v33 = "Uninitialized";
                break;
              case 2:
                v33 = "Prepared";
                break;
              case 3:
                v33 = "Stopped";
                break;
              case 4:
                v33 = "Starting";
                break;
              case 5:
                v33 = "Running";
                break;
              case 6:
                v33 = "Stopping";
                break;
              default:
                v33 = "ILLEGAL";
                break;
            }
          }
          else
          {
            v33 = "unconfigured";
          }
        }
        else
        {
          v32 = "unconfigured";
          v33 = "unconfigured";
        }
        *(_DWORD *)buf = 136316418;
        v38 = "AVVCPluginRecordingEngine.mm";
        v39 = 1024;
        v40 = 153;
        v41 = 2080;
        *(_QWORD *)v42 = v20;
        *(_WORD *)&v42[8] = 2112;
        *(_QWORD *)&v42[10] = v29;
        v43 = 2080;
        v44 = v32;
        v45 = 2080;
        v46 = v33;
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v22)
        {
          v35 = (unint64_t *)&v22->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v19)

LABEL_72:
        return;
      }
    }
    else if (v21)
    {
      v27 = 0;
      v25 = (void *)MEMORY[0x1E0CB3940];
      v26 = *(_QWORD *)(v21 + 272);
      goto LABEL_53;
    }
    v28 = CFSTR("(0x0) use_count:0");
    goto LABEL_55;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "code");
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 1919115630)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_20:
        AVVCRecordingEngine::setStreamState(*(_QWORD *)(a1 + 56), 6);
        v9 = *(_QWORD *)(a1 + 56);
        *(_BYTE *)(v9 + 252) = 1;
        AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v9, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), "startRecording_block_invoke");
        AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 56));
        goto LABEL_26;
      }
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v38 = "AVVCPluginRecordingEngine.mm";
      v39 = 1024;
      v40 = 160;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordingWithCompletionBlock: Recording cancelled by plugin device. Calling didStop recording and setting audioInputBlock to nil.", buf, 0x12u);
    }

    goto LABEL_20;
  }
  if (!kAVVCScope)
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_22;
  }
  v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_22:
    v11 = v6;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      objc_msgSend(*(id *)(a1 + 32), "debugDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315906;
      v38 = "AVVCPluginRecordingEngine.mm";
      v39 = 1024;
      v40 = 169;
      v41 = 1024;
      *(_DWORD *)v42 = v12;
      *(_WORD *)&v42[4] = 2112;
      *(_QWORD *)&v42[6] = v13;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: returned error(%d) : %@. Setting the audioInputBlock to nil.", buf, 0x22u);

    }
  }
  AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), "startRecording_block_invoke");
  AVVCRecordingEngine::setStreamState(*(_QWORD *)(a1 + 56), 3);
  AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 56));
LABEL_26:
  objc_msgSend(*(id *)(a1 + 40), "setAudioInputBlock:", 0);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 40), "setStatusChangeBlock:", 0);
}

void sub_19B741ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v7)

  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  id v17;
  NSObject *v18;
  id v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  id v23;
  id v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint32_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  double v39;
  float v40;
  NSObject *v41;
  NSObject *v42;
  float v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  id v47;
  void *v48;
  void *v49;
  double v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint8_t v56[4];
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  double v61;
  uint8_t buf[32];
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a1[4];
  v54 = 0;
  v55 = 0;
  v11 = (std::__shared_weak_count *)a1[6];
  if (!v11)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v12 = std::__shared_weak_count::lock(v11);
  v55 = v12;
  if (!v12 || (v13 = a1[5], (v54 = v13) == 0))
  {
LABEL_12:
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
        goto LABEL_19;
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 464;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 0;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d audioInputBlock: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
    }

LABEL_19:
    if (!v12)
      goto LABEL_92;
    goto LABEL_20;
  }
  if (!v7)
  {
    if (kAVVCScope)
    {
      v22 = *(id *)kAVVCScope;
      if (!v22)
        goto LABEL_49;
    }
    else
    {
      v22 = MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
LABEL_48:

      goto LABEL_49;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 480;
    v25 = "%25s:%-5d audioInputBlock called";
    v26 = v22;
    v27 = OS_LOG_TYPE_DEBUG;
    v28 = 18;
LABEL_47:
    _os_log_impl(&dword_19B733000, v26, v27, v25, buf, v28);
    goto LABEL_48;
  }
  objc_msgSend(v7, "format");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "streamDescription");

  v16 = *(_DWORD *)(v15 + 8);
  if (v16 == 1936745848 || v16 == 1869641075)
  {
    if (kAVVCScope)
    {
      v23 = *(id *)kAVVCScope;
      if (!v23)
        goto LABEL_49;
    }
    else
    {
      v23 = (id)MEMORY[0x1E0C81028];
      v29 = MEMORY[0x1E0C81028];
    }
    v22 = v23;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 473;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = objc_msgSend(v7, "packetCount");
      _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioInputBlock (opus / speex) called with packetcount : %d", buf, 0x18u);
    }
LABEL_39:

    goto LABEL_48;
  }
  if (v16 == 1819304813)
  {
    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
        goto LABEL_49;
    }
    else
    {
      v17 = (id)MEMORY[0x1E0C81028];
      v30 = MEMORY[0x1E0C81028];
    }
    v22 = v17;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 471;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = objc_msgSend(v7, "frameLength");
      _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioInputBlock (lpcm) called with frameLength : %d", buf, 0x18u);
    }
    goto LABEL_39;
  }
  if (!kAVVCScope)
  {
    v22 = MEMORY[0x1E0C81028];
    v31 = MEMORY[0x1E0C81028];
    goto LABEL_45;
  }
  v22 = *(id *)kAVVCScope;
  if (v22)
  {
LABEL_45:
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    v32 = *(unsigned int *)(v15 + 8);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 475;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v32;
    v25 = "%25s:%-5d audioInputBlock called with an unsupported audio format ID (%lu).";
    v26 = v22;
    v27 = OS_LOG_TYPE_ERROR;
    v28 = 28;
    goto LABEL_47;
  }
LABEL_49:
  v63 = 0u;
  v64 = 0u;
  memset(buf, 0, sizeof(buf));
  if (v8)
    objc_msgSend(v8, "audioTimeStamp");
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
    {
      v33 = *(id *)kAVVCScope;
      if (v33)
      {
        v34 = v33;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v56 = 136315650;
          v57 = "AVVCPluginRecordingEngine.mm";
          v58 = 1024;
          v59 = 485;
          v60 = 2048;
          v61 = *(double *)buf;
          _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: timeStamp : %f", v56, 0x1Cu);
        }

      }
    }
  }
  objc_msgSend(v9, "objectForKey:", CFSTR("Gain"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_87;
    v38 = v35;
    if (v38)
    {
      objc_msgSend(v38, "doubleValue");
      v40 = v39;
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
        {
          v41 = *(id *)kAVVCScope;
          if (v41)
          {
            v42 = v41;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v56 = 136315650;
              v57 = "AVVCPluginRecordingEngine.mm";
              v58 = 1024;
              v59 = 510;
              v60 = 2048;
              v61 = v40;
              _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: inGain : %f", v56, 0x1Cu);
            }

          }
        }
      }
      if (v40 <= 0.0)
        v43 = -120.0;
      else
        v43 = log10f(v40) * 20.0;
    }
    else
    {
      v43 = 0.0;
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
        {
          v45 = *(id *)kAVVCScope;
          if (v45)
          {
            v46 = v45;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v56 = 136315394;
              v57 = "AVVCPluginRecordingEngine.mm";
              v58 = 1024;
              v59 = 513;
              _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: No Gain Value", v56, 0x12u);
            }

          }
        }
      }
    }
    *(float *)(v13 + 628) = v43;
    goto LABEL_85;
  }
  v36 = v35;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v44 = *(id *)kAVVCScope;
      if (!v44)
      {
LABEL_85:
        *(_BYTE *)(v13 + 638) = 0;
        goto LABEL_86;
      }
    }
    else
    {
      v44 = MEMORY[0x1E0C81028];
      v47 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v56 = 136315394;
      v57 = "AVVCPluginRecordingEngine.mm";
      v58 = 1024;
      v59 = 501;
      _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: Nil VoiceActivity NSData", v56, 0x12u);
    }

    goto LABEL_85;
  }
  v37 = v36;
  objc_msgSend(v36, "getBytes:range:", v13 + 636, 0, 1);
  objc_msgSend(v37, "getBytes:range:", v13 + 637, 1, 1);
  *(_BYTE *)(v13 + 638) = 1;
  *(float *)(v13 + 628) = (float)*(char *)(v10 + 637);
LABEL_86:

LABEL_87:
  v53 = 0;
  if (*(_DWORD *)(v13 + 32) == 1936745848)
  {
    objc_msgSend(v9, "objectForKey:", CFSTR("Frame Qualities"));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = v48;
    if (v48)
    {
      objc_msgSend(v48, "doubleValue");
      *(float *)&v50 = v50;
      v53 = LODWORD(v50);
    }
    else if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
      {
        v51 = *(id *)kAVVCScope;
        if (v51)
        {
          v52 = v51;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v56 = 136315394;
            v57 = "AVVCPluginRecordingEngine.mm";
            v58 = 1024;
            v59 = 528;
            _os_log_impl(&dword_19B733000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: No frame qualities.", v56, 0x12u);
          }

        }
      }
    }

  }
  (*(void (**)(uint64_t, id, uint64_t, int *, uint8_t *))(*(_QWORD *)v13 + 256))(v13, v7, 1, &v53, buf);

  v12 = v55;
  if (v55)
  {
LABEL_20:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_92:

}

void sub_19B742790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_93(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  id v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[4];
  id v17[2];
  std::__shared_weak_count *v18;
  int v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2 != 1919115630)
    return;
  v20 = 0;
  v21 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v21 = v4;
    if (v4)
    {
      v5 = *(void **)(a1 + 40);
      v20 = v5;
      if (v5)
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3321888768;
        v16[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_94;
        v16[3] = &unk_1E3BE5FC8;
        v17[1] = v5;
        v18 = v4;
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v19 = 1919115630;
        objc_copyWeak(v17, (id *)(a1 + 32));
        (*(void (**)(void *, _QWORD *, const char *))(*(_QWORD *)v5 + 368))(v5, v16, "createRecordQueue_block_invoke");
        objc_destroyWeak(v17);
        v8 = v18;
        if (v18)
        {
          v9 = (unint64_t *)&v18->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        goto LABEL_19;
      }
    }
  }
  if (!kAVVCScope)
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_16;
  }
  v11 = *(id *)kAVVCScope;
  if (v11)
  {
LABEL_16:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v23 = "AVVCPluginRecordingEngine.mm";
      v24 = 1024;
      v25 = 543;
      v26 = 2048;
      v27 = 0;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d statusChangeBlock: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
    }

  }
LABEL_19:
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19B742A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  id *v18;

  objc_destroyWeak(v18);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void TraceWrapper::~TraceWrapper(TraceWrapper *this)
{
  if (*((_BYTE *)this + 4))
    kdebug_trace();
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_94(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v7 = 136315650;
    v8 = "AVVCPluginRecordingEngine.mm";
    v9 = 1024;
    v10 = 548;
    v11 = 2048;
    v12 = v4;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d statusChangeBlock: Recording cancelled by plugin device. Calling didStop recording and setting audioInputBlock to nil. strong_this(%p)", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_8:
  AVVCRecordingEngine::setStreamState(*(_QWORD *)(a1 + 40), 6);
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v5 + 252) = 1;
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v5, *(_DWORD *)(a1 + 56), "createRecordQueue_block_invoke");
  AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 40));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setAudioInputBlock:", 0);
  objc_msgSend(WeakRetained, "setStatusChangeBlock:", 0);

}

void sub_19B742C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t AVVCPluginRecordingEngine::AVVCPluginRecordingEngine(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  AVVCRecordingEngine::AVVCRecordingEngine(a1, a2);
  *(_QWORD *)a1 = &off_1E3BE8F68;
  v6 = v5;
  *(_QWORD *)(a1 + 608) = v6;
  *(_DWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 624) = 0;
  *(_WORD *)(a1 + 636) = 0;
  *(_BYTE *)(a1 + 638) = 0;
  if (kAVVCScope)
  {
    v7 = *(id *)kAVVCScope;
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315394;
    v11 = "AVVCPluginRecordingEngine.mm";
    v12 = 1024;
    v13 = 46;
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine()", (uint8_t *)&v10, 0x12u);
  }

LABEL_8:
  AVVCRecordingEngine::setStreamState(a1, 0);

  return a1;
}

void sub_19B742E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B743448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19B7436D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  TraceMethod::~TraceMethod((TraceMethod *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_19B74395C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19B743BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19B743D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_19B743F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v7 - 48);
  _Unwind_Resume(a1);
}

void sub_19B744644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v22 = v21;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a19);
  TraceMethod::~TraceMethod((TraceMethod *)&a12);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a14);
  a9.super_class = (Class)AVVoiceController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B74497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B744ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B744DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B745038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  uint64_t v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_19B74526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v10);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7454F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  uint64_t v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_19B7457C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19B745A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B745CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B745F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7461EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B746438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B746668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7468B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B746AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B746DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7471C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  objc_sync_exit(v22);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_19B7478F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B747CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19B747FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B748338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a24);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19B7486C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a24);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19B7489AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B748D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19B749054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v22 = va_arg(va2, _QWORD);
  v23 = va_arg(va2, _QWORD);
  v24 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B74939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a10);

  _Unwind_Resume(a1);
}

void sub_19B749768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a21);

  _Unwind_Resume(a1);
}

void sub_19B749A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B749DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74A024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19B74A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a16);
  _Unwind_Resume(a1);
}

void sub_19B74A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74A89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a16);
  _Unwind_Resume(a1);
}

void sub_19B74AB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74AEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74B15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74B428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74B6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74BA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74BD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19B74C078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74C3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74C718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74CD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19B74D228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a18);
  _Unwind_Resume(a1);
}

void sub_19B74D528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74DE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74E0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  _Unwind_Resume(a1);
}

void sub_19B74E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a18);

  _Unwind_Resume(a1);
}

void sub_19B74E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, id a12)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  _Unwind_Resume(a1);
}

void sub_19B74EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a18);

  _Unwind_Resume(a1);
}

void sub_19B74ED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a18);

  _Unwind_Resume(a1);
}

void sub_19B74F02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);

  _Unwind_Resume(a1);
}

void sub_19B74F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v28);
  _Block_object_dispose(&a21, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a28);
  _Unwind_Resume(a1);
}

void sub_19B74F4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B74F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v24 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a10)
  {
    v27 = (unint64_t *)&a10->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Block_object_dispose(&a11, 8);
  v29 = a16;
  if (a16)
  {
    v30 = (unint64_t *)&a16->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_19B74FC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 48);
}

void std::__shared_ptr_emplace<ControllerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ControllerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t std::__shared_ptr_emplace<ControllerImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id GetAVVCSingleInstanceSemaphore(void)
{
  if (GetAVVCSingleInstanceSemaphore(void)::once != -1)
    dispatch_once(&GetAVVCSingleInstanceSemaphore(void)::once, &__block_literal_global_181);
  return (id)gsAVVCSingleInstanceSemaphore;
}

void ___ZL30GetAVVCSingleInstanceSemaphorev_block_invoke()
{
  dispatch_semaphore_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = dispatch_semaphore_create(1);
  v1 = (void *)gsAVVCSingleInstanceSemaphore;
  gsAVVCSingleInstanceSemaphore = (uint64_t)v0;

  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      return;
  }
  else
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend((id)gsAVVCSingleInstanceSemaphore, "debugDescription");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 136315650;
    v7 = "AVVoiceController.mm";
    v8 = 1024;
    v9 = 117;
    v10 = 2112;
    v11 = v5;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d [enforce 1 avvc] created gsAVVCSingleInstanceSemaphore %@", (uint8_t *)&v6, 0x1Cu);

  }
}

void sub_19B74FF94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__183(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__184(uint64_t a1)
{

}

void sub_19B750020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7500FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 32);
}

_BYTE *AlertLock::AlertLock(_BYTE *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  VCLocker::VCLocker(a1, a2, 0);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void sub_19B7501D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::getAlertQueueFromImplQueue(ControllerImpl *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v7, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v2 = *((_QWORD *)this + 77);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void VCLocker::~VCLocker(VCLocker *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x80) != 0)
    {
      v2 = *(id *)kAVVCScope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          v4 = *(_QWORD *)(*(_QWORD *)this + 8);
          v5 = 136315650;
          v6 = "ControllerImpl.h";
          v7 = 1024;
          v8 = 760;
          v9 = 2080;
          v10 = v4;
          _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d about to unlock %s", (uint8_t *)&v5, 0x1Cu);
        }

      }
    }
  }
  if (*((_BYTE *)this + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
}

void sub_19B75035C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_BYTE *VCLocker::VCLocker(_BYTE *a1, uint64_t a2, unsigned int a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8 * a3 + 536);
  a1[8] = 0;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (!IsSerializationEnabled(void)::enable)
  {
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 12) & 0x80) != 0)
      {
        v4 = *(id *)kAVVCScope;
        if (v4)
        {
          v5 = v4;
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            v8 = 136315650;
            v9 = "ControllerImpl.h";
            v10 = 1024;
            v11 = 755;
            v12 = 2080;
            v13 = v6;
            _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d about to lock %s", (uint8_t *)&v8, 0x1Cu);
          }

        }
      }
    }
    a1[8] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1);
  }
  return a1;
}

void sub_19B750584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19B7505F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7506F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19B75076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B75086C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19B7508E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7509E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19B750A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B750BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void sub_19B750CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  VCLocker::~VCLocker((VCLocker *)va);
  _Unwind_Resume(a1);
}

_BYTE *SessionLock::SessionLock(_BYTE *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  VCLocker::VCLocker(a1, a2, 3u);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void sub_19B750D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ControllerImpl>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_19B751348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  VCLocker::~VCLocker((VCLocker *)&a27);
  _Unwind_Resume(a1);
}

void sub_19B7514D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 56);
}

void sub_19B751594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_19B75164C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7516DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7517D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B751AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B751CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7520F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id *v2;
  id *v3;
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_19B752144()
{
  void *v0;

  JUMPOUT(0x19B75212CLL);
}

void sub_19B752150()
{
  JUMPOUT(0x19B75212CLL);
}

void sub_19B752230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7523C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B752548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B752790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B752A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19B752D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B752FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);

  _Unwind_Resume(a1);
}

void sub_19B75327C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);

  _Unwind_Resume(a1);
}

void sub_19B7534E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  void *v20;
  id *v21;
  void *v22;
  id *v23;
  void *v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19B753694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19B7538DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19B753D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B754130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B754438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B754798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B754B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B754DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7550F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B755604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B755B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B755CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B755EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  v5 = MEMORY[0x1E0C80978];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL))
      goto LABEL_17;
LABEL_13:
    v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
        goto LABEL_17;
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(_BYTE *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0)
    goto LABEL_13;
LABEL_17:
  if (a2 + 199999 > 0x61A7E)
    snprintf((char *)this, 0x10uLL, "0x%x");
  else
    snprintf((char *)this, 0x10uLL, "%d");
}

void sub_19B756194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B756238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B7562B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B7563C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);

  _Unwind_Resume(a1);
}

void sub_19B7564A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7565B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);

  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_19B7567D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_19B756C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B756E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B756EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B756F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL AVVCTestPropertyIsSet()
{
  void *v0;
  void *v1;

  if (_createTestPropertyArrayIfNeeded(void)::onceToken != -1)
    dispatch_once(&_createTestPropertyArrayIfNeeded(void)::onceToken, &__block_literal_global_652);
  objc_msgSend((id)sTestProperties, "objectAtIndex:", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v0 != v1;
}

void sub_19B756F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL32_createTestPropertyArrayIfNeededv_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)sTestProperties;
  sTestProperties = v0;

  v2 = (void *)sTestProperties;
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:");

}

void sub_19B757018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

NSObject *AVVCTestPropertyGetError()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (_createTestPropertyArrayIfNeeded(void)::onceToken != -1)
    dispatch_once(&_createTestPropertyArrayIfNeeded(void)::onceToken, &__block_literal_global_652);
  objc_msgSend((id)sTestProperties, "objectAtIndex:", 0);
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v1 = objc_claimAutoreleasedReturnValue();

  if (v1 == v0)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      v4 = v0;
      if (!v3)
        goto LABEL_21;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "AVVoiceController.mm";
      v12 = 1024;
      v13 = 2089;
      v14 = 1024;
      LODWORD(v15) = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Test value is NSNull at index: %d", (uint8_t *)&v10, 0x18u);
    }
    v4 = v0;
LABEL_20:

LABEL_21:
LABEL_22:

    v2 = 0;
    goto LABEL_23;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_22;
    }
    else
    {
      v5 = (id)MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    v3 = v5;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315906;
      v11 = "AVVoiceController.mm";
      v12 = 1024;
      v13 = 2128;
      v14 = 2112;
      v15 = (id)objc_opt_class();
      v16 = 1024;
      v17 = 0;
      v8 = v15;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Expecting property of type NSError but got type %@ at index: %d", (uint8_t *)&v10, 0x22u);

    }
    v4 = v3;
    goto LABEL_20;
  }

  v2 = v0;
LABEL_23:

  return v2;
}

void sub_19B757284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AVAudioUnitComponentImpl::~AVAudioUnitComponentImpl(AVAudioUnitComponentImpl *this)
{
  AVAudioUnitComponentImpl::~AVAudioUnitComponentImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *(_QWORD *)this = &off_1E3BE8F48;
  v2 = (const void *)*((_QWORD *)this + 13);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 13) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 12);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 12) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 6);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 6) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 7);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 7) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 5);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 5) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 10);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 10) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 11);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 11) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 19);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 19) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 17);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 17) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 8);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 8) = 0;
  }
  dispatch_release(*((dispatch_object_t *)this + 14));
}

void sub_19B757448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10E1C406879E566);
  _Unwind_Resume(a1);
}

void sub_19B7574FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10E1C406879E566);
  _Unwind_Resume(a1);
}

void sub_19B757A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

const __CFDictionary *AVAudioUnitComponentImpl::FetchConfigurationDictionary(AudioComponent *this)
{
  CFDictionaryRef *v2;
  const __CFDictionary *result;
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;

  v2 = this + 17;
  result = (const __CFDictionary *)AudioComponentCopyConfigurationInfo(this[1], this + 17);
  if (!(_DWORD)result)
  {
    result = *v2;
    if (*v2)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(result, CFSTR("HasCustomView"));
      if (Value)
      {
        v5 = Value;
        v6 = CFGetTypeID(Value);
        if (v6 == CFBooleanGetTypeID())
          *((_BYTE *)this + 144) = CFBooleanGetValue(v5) != 0;
      }
      result = (const __CFDictionary *)CFDictionaryGetValue(*v2, CFSTR("IconURL"));
      if (result)
      {
        result = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)result, kCFURLPOSIXPathStyle, 0);
        this[19] = result;
      }
    }
  }
  *((_BYTE *)this + 132) = 1;
  return result;
}

void AVAudioUnitComponentImpl::FetchLocalizedStandardTags(id *this)
{
  objc_msgSend(this[10], "removeAllObjects");
  if (!this[10])
    this[10] = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  AudioComponentCopyTagsInfo();
}

void AVAudioUnitComponentImpl::AVAudioUnitComponentImpl(AVAudioUnitComponentImpl *this, AudioComponentDescription *a2, AVAudioUnitComponentManagerImpl *a3)
{
  __int128 v4;
  UInt32 componentFlagsMask;
  UInt32 *v6;
  OpaqueAudioComponent *Next;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  CFStringRef outName;

  *(_QWORD *)this = &off_1E3BE8F48;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_OWORD *)&a2->componentType;
  componentFlagsMask = a2->componentFlagsMask;
  *(_OWORD *)((char *)this + 36) = 0u;
  v6 = (UInt32 *)((char *)this + 36);
  *((_DWORD *)this + 8) = componentFlagsMask;
  *((_OWORD *)this + 1) = v4;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_QWORD *)((char *)this + 65) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 15) = a3;
  *((_DWORD *)this + 32) = 0;
  *((_BYTE *)this + 132) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 14) = dispatch_queue_create("AVAudioUnitComponentImplementation", 0);
  if (__PAIR64__(*((_DWORD *)this + 5), *(v6 - 5)) || *((_DWORD *)this + 6) || *((_DWORD *)this + 7))
  {
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)v6 - 1);
    *((_QWORD *)this + 1) = Next;
    if (Next)
    {
      AudioComponentGetDescription(Next, (AudioComponentDescription *)v6 - 1);
      if ((*((_BYTE *)this + 28) & 2) != 0)
        *((_BYTE *)this + 72) = 1;
      outName = 0;
      AudioComponentCopyName(*((AudioComponent *)this + 1), &outName);
      v8 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", outName);
      v9 = objc_msgSend(v8, "rangeOfString:", CFSTR(":"));
      if (v10)
      {
        v11 = v9;
        v12 = (void *)objc_msgSend(v8, "substringToIndex:", v9);
        *((_QWORD *)this + 7) = objc_msgSend((id)objc_msgSend(v12, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet")), "copy");
        v13 = (void *)objc_msgSend(v8, "substringFromIndex:", v11 + 1);
        v8 = (void *)objc_msgSend(v13, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet"));
      }
      else
      {
        *((_QWORD *)this + 7) = objc_msgSend(&stru_1E3BED4C0, "copy");
      }
      *((_QWORD *)this + 6) = objc_msgSend(v8, "copy");
      CFRelease(outName);
      if (!AudioComponentGetVersion(*((AudioComponent *)this + 1), v6))
        *((_QWORD *)this + 5) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d.%d.%d"), (*((int *)this + 9) >> 16), BYTE1(*((_DWORD *)this + 9)), *((_DWORD *)this + 9));
      AVAudioUnitComponentImpl::FetchLocalizedStandardTags((id *)this);
    }
  }
}

uint64_t QualityDetectorCreate(int a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t i;
  _QWORD *v12;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = operator new[]();
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = 0xA00000028;
  *(_DWORD *)(v8 + 16) = 40;
  *(_DWORD *)(v8 + 20) = a1;
  *(_QWORD *)(v8 + 24) = 0x400000005;
  *(_DWORD *)(v8 + 32) = a2;
  *(_DWORD *)(v8 + 36) = a3;
  *(_DWORD *)(v8 + 40) = a4;
  if (kAVVCScope)
  {
    v10 = *(NSObject **)kAVVCScope;
    if (!*(_QWORD *)kAVVCScope)
      goto LABEL_7;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v14 = 136316418;
    v15 = "QualityDetector.cpp";
    v16 = 1024;
    v17 = 74;
    v18 = 1024;
    v19 = 5;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = 4;
    v24 = 1024;
    v25 = a4;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d QualityDetector: Start thresh: %u Start Timeout: %u End thresh: %u  End Timeout: %u", (uint8_t *)&v14, 0x2Au);
  }
LABEL_7:
  for (i = 0; i != 160; i += 16)
  {
    v12 = (_QWORD *)(v9 + i);
    *v12 = 0;
    v12[1] = 0;
  }
  *(_QWORD *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 44) = 0;
  return v8;
}

void sub_19B758560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x1010C4079E387C8);
  _Unwind_Resume(a1);
}

void QualityDetectorDestroy(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1)
    MEMORY[0x1A1AC5BBC](v1, 0x1000C8052888210);
  JUMPOUT(0x1A1AC5BD4);
}

void `anonymous namespace'::QualityDetector::getSummedFrameQuality(_anonymous_namespace_::QualityDetector *this, unsigned int a2)
{
  unsigned int v2;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint8_t v7[16];

  v2 = *((_DWORD *)this + 2);
  if (v2 < a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: inPastFrameCount <= mFrameHistoryLength", v7, 2u);
    }
    __break(1u);
  }
  else if (a2)
  {
    v4 = 0;
    v5 = *((_DWORD *)this + 11);
    v6 = *(_QWORD *)this;
    do
    {
      v4 += *(_DWORD *)(v6 + 4 * v5);
      if (!v5)
        v5 = v2;
      --v5;
      --a2;
    }
    while (a2);
  }
}

uint64_t CAIsDebuggerAttached(void)
{
  size_t v1;
  _BYTE v2[32];
  unsigned int v3;
  int v4[2];
  int v5;
  pid_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = 0xE00000001;
  v5 = 1;
  v6 = getpid();
  v1 = 648;
  v3 = 0;
  sysctl(v4, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

void sub_19B7588B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x1080C40ABE71A98);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::fsort(_anonymous_namespace_ *this, float *a2, const void *a3)
{
  if (*(float *)this < *a2)
    return 0xFFFFFFFFLL;
  else
    return *(float *)this > *a2;
}

char *CAStringForOSType(unsigned int a1, char *__dst, int16x8_t a3)
{
  int32x4_t v4;
  uint32x4_t v5;
  char __source[8];
  char v8;

  a3.i32[0] = bswap32(a1);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  v8 = 4;
  *(_DWORD *)__source = vmovn_s16(a3).u32[0];
  __source[4] = 0;
  strlcpy(__dst, __source, 0x18uLL);
  if (v8 < 0)
    operator delete(*(void **)__source);
  return __dst;
}

void sub_19B759F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  int v4;
  int32x4_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  AudioFormatFlags mFormatFlags;
  AudioFormatFlags v22;
  unsigned int v23;
  UInt32 mBytesPerFrame;
  UInt32 mChannelsPerFrame;
  UInt32 v26;
  UInt32 mBitsPerChannel;
  int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;

  if ((a4 & 1) != 0)
  {
    v4 = *((_DWORD *)this + 3);
    v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((_QWORD *)this + 1);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) != 0)
      return 1;
  }
  else
  {
    v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813)
    return v4 == a2->mFormatFlags;
  v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0)
    v7 = v4;
  if ((_DWORD)a3)
    v8 = v7;
  else
    v8 = v7 & 0xFFFFFFBF;
  v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0)
      v11 = 1;
    else
      v11 = *((_DWORD *)this + 7);
    if (v11)
    {
      v9 = 8 * (v9 / v11);
      v12 = *((_DWORD *)this + 8);
      v13 = v8 | 8;
      v14 = v9 == v12;
      goto LABEL_21;
    }
    v9 = 0;
    v12 = *((_DWORD *)this + 8);
    v13 = v8 | 8;
  }
  else
  {
    v13 = v8 | 8;
    v10 = *((_DWORD *)this + 7);
    v12 = *((_DWORD *)this + 8);
  }
  v14 = v12 == 0;
LABEL_21:
  if (v14)
    v8 = v13;
  v16 = (v12 & 7) == 0 && v9 == v12;
  v17 = v8 & 0xFFFFFFEF;
  if (!v16)
    v17 = v8;
  if ((v17 & 1) != 0)
    v17 &= ~4u;
  v18 = (v17 & 8) == 0 || v12 > 8;
  v19 = v17 & 2;
  if (v18)
    v19 = v17;
  if (v10 == 1)
    v20 = v19 & 0xFFFFFFDF;
  else
    v20 = v19;
  if (!v20)
    v20 = 0x80000000;
  mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813)
    return v20 == mFormatFlags;
  v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0)
    v22 = a2->mFormatFlags;
  if ((_DWORD)a3)
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFBF;
  mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    v28 = v23 | 8;
    mChannelsPerFrame = a2->mChannelsPerFrame;
    mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0)
    v26 = 1;
  else
    v26 = a2->mChannelsPerFrame;
  if (!v26)
  {
    mBytesPerFrame = 0;
    mBitsPerChannel = a2->mBitsPerChannel;
    v28 = v23 | 8;
    goto LABEL_54;
  }
  mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  mBitsPerChannel = a2->mBitsPerChannel;
  v28 = v23 | 8;
  v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29)
    v23 = v28;
  v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  v31 = v23 & 0xFFFFFFEF;
  if (!v30)
    v31 = v23;
  if ((v31 & 1) != 0)
    v31 &= ~4u;
  v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  v33 = v31 & 2;
  if (v32)
    v33 = v31;
  if (mChannelsPerFrame == 1)
    v34 = v33 & 0xFFFFFFDF;
  else
    v34 = v33;
  if (v34)
    mFormatFlags = v34;
  else
    mFormatFlags = 0x80000000;
  return v20 == mFormatFlags;
}

void sub_19B75A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B75A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void XPC_Object::~XPC_Object(XPC_Object *this)
{
  XPC_Object::~XPC_Object(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  unsigned __int8 v1;

  *(_QWORD *)this = &off_1E3BE6238;
  if (*((_QWORD *)this + 1))
  {
    v1 = atomic_load((unsigned __int8 *)this + 16);
    if ((v1 & 1) != 0)
      xpc_release(*((xpc_object_t *)this + 1));
  }
}

void AVAudioUnitComponentManagerImpl::~AVAudioUnitComponentManagerImpl(AVAudioUnitComponentManagerImpl *this)
{
  AVAudioUnitComponentManagerImpl::~AVAudioUnitComponentManagerImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *(_QWORD *)this = &off_1E3BE9708;
  std::mutex::~mutex((std::mutex *)((char *)this + 32));

}

uint64_t AVAudioUnitComponentManagerInitOnce(void)
{
  return +[AVAudioUnitComponentManager privateAllocInitSingleton](AVAudioUnitComponentManager, "privateAllocInitSingleton");
}

void sub_19B75A82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B75A9F0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B75AD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  std::mutex *v15;

  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_19B75AF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B75B008(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

void sub_19B75B1B4(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;
  void *v4;
  void *v5;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19B75B384(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B75B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75B858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CADeprecated::AVVCGenericRunLoopThread::~AVVCGenericRunLoopThread(CADeprecated::AVVCGenericRunLoopThread *this)
{
  CADeprecated::AVVCGenericRunLoopThread::~AVVCGenericRunLoopThread(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E3BE99E8;
  v1 = (const void *)*((_QWORD *)this + 17);
  if (v1)
    CFRelease(v1);
}

void CADeprecated::AVVCGenericRunLoopThread::Start(CADeprecated::AVVCGenericRunLoopThread *this)
{
  *((_QWORD *)this + 20) = dispatch_semaphore_create(0);
  CADeprecated::CAPThread::Start((uint64_t)this);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 20), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*((dispatch_object_t *)this + 20));
  *((_QWORD *)this + 20) = 0;
}

void sub_19B75BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B75BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
  *(_QWORD *)this = &off_1E3BE9A80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

{
  *(_QWORD *)this = &off_1E3BE9A80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  JUMPOUT(0x1A1AC5BD4);
}

BOOL CADeprecated::CAMutex::Lock(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  int v5;
  int v7;
  _DWORD *exception;
  uint8_t v9[16];

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  v4 = pthread_equal(v2, v3);
  if (!v4)
  {
    v5 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
    if (v5)
    {
      v7 = v5;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAMutex::Lock: Could not lock the mutex", v9, 2u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E3BE6270;
      exception[2] = v7;
    }
    atomic_store((unint64_t)v2, (unint64_t *)this + 2);
  }
  return v4 == 0;
}

void CADeprecated::CAMutex::Unlock(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  int v5;
  _DWORD *exception;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (pthread_equal(v2, v3))
  {
    atomic_store(0, (unint64_t *)this + 2);
    v4 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
    if (v4)
    {
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAMutex::Unlock: Could not unlock the mutex", buf, 2u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E3BE6270;
      exception[2] = v5;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, " CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own", v7, 2u);
  }
}

uint64_t CADeprecated::CAMutex::Try(CADeprecated::CAMutex *this, BOOL *a2)
{
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  BOOL v6;
  int v7;
  uint64_t result;
  int v9;
  _DWORD *exception;
  _BYTE v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v4 = pthread_self();
  v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (pthread_equal(v4, v5))
  {
    v6 = 0;
  }
  else
  {
    v7 = pthread_mutex_trylock((pthread_mutex_t *)((char *)this + 24));
    if (v7 == 16)
    {
      v6 = 0;
      result = 0;
      goto LABEL_7;
    }
    if (v7)
    {
      v11[0] = HIBYTE(v7);
      v11[1] = BYTE2(v7);
      v11[2] = BYTE1(v7);
      v9 = v7;
      v11[3] = v7;
      v11[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        v13 = v9;
        v14 = 2080;
        v15 = v11;
        _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E3BE6270;
      exception[2] = v9;
    }
    atomic_store((unint64_t)v4, (unint64_t *)this + 2);
    v6 = 1;
  }
  result = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL CADeprecated::CAMutex::IsFree(CADeprecated::CAMutex *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 2);
  return v1 == 0;
}

BOOL CADeprecated::CAMutex::IsOwnedByCurrentThread(CADeprecated::CAMutex *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  return pthread_equal(v2, v3) != 0;
}

CADeprecated::CAMutex *CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  int v3;
  int v5;
  _DWORD *exception;
  uint8_t v7[16];

  *(_QWORD *)this = &off_1E3BE9A80;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  if (v3)
  {
    v5 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAMutex::CAMutex: Could not init the mutex", v7, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = v5;
  }
  return this;
}

void CADeprecated::CAPThread::~CAPThread(CADeprecated::CAPThread *this)
{
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t CADeprecated::CAPThread::Start(uint64_t this)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD *exception;
  __int16 v12;
  pthread_t v13;
  sched_param v14;
  pthread_attr_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (atomic_load((unint64_t *)(this + 8)))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15.__sig) = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAPThread::Start: can't start because the thread is already running", (uint8_t *)&v15, 2u);
    }
    __break(1u);
  }
  if (!atomic_load((unint64_t *)(this + 8)))
  {
    v3 = this;
    v4 = pthread_attr_init(&v15);
    if (v4)
    {
      v7 = v4;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      LOWORD(v14.sched_priority) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = " CAPThread::Start: Thread attributes could not be created.";
    }
    else
    {
      v5 = pthread_attr_setdetachstate(&v15, 2);
      if (!v5)
      {
        pthread_attr_getschedparam(&v15, &v14);
        v14.sched_priority = *(_DWORD *)(v3 + 104);
        pthread_attr_setschedparam(&v15, &v14);
        if (*(_BYTE *)(v3 + 122))
          pthread_attr_setschedpolicy(&v15, 4);
        v13 = 0;
        v6 = pthread_create(&v13, &v15, (void *(__cdecl *)(void *))CADeprecated::CAPThread::Entry, (void *)v3);
        if (!v6 && v13)
        {
          atomic_store((unint64_t)v13, (unint64_t *)(v3 + 8));
          return pthread_attr_destroy(&v15);
        }
        v7 = v6;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_22:
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E3BE6270;
          exception[2] = v7;
        }
        v12 = 0;
        v8 = MEMORY[0x1E0C81028];
        v9 = " CAPThread::Start: Could not create a thread.";
        v10 = (uint8_t *)&v12;
LABEL_21:
        _os_log_error_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, v9, v10, 2u);
        goto LABEL_22;
      }
      v7 = v5;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      LOWORD(v14.sched_priority) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = " CAPThread::Start: A thread could not be created in the detached state.";
    }
    v10 = (uint8_t *)&v14;
    goto LABEL_21;
  }
  return this;
}

uint64_t CADeprecated::CAPThread::Entry(CADeprecated::CAPThread *this, CADeprecated::CAPThread *a2)
{
  int v4;
  _opaque_pthread_t *v5;
  thread_act_t v6;
  kern_return_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  kern_return_t v10;
  _BYTE v12[5];
  integer_t policy_info[2];
  int v14;
  int v15;
  uint8_t buf[4];
  kern_return_t v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 1);
  if (*((_BYTE *)this + 40))
    pthread_setname_np((const char *)this + 40);
  if (*((_BYTE *)this + 121))
  {
    *((_BYTE *)this + 121) = 1;
    if (atomic_load((unint64_t *)this + 1))
    {
      *(_QWORD *)policy_info = *(_QWORD *)((char *)this + 108);
      v4 = *((unsigned __int8 *)this + 120);
      v14 = *((_DWORD *)this + 29);
      v15 = v4;
      v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 1);
      v6 = pthread_mach_thread_np(v5);
      v7 = thread_policy_set(v6, 2u, policy_info, 4u);
      if (v7)
      {
        v12[0] = HIBYTE(v7);
        v12[1] = BYTE2(v7);
        v12[2] = BYTE1(v7);
        v10 = v7;
        v12[3] = v7;
        v12[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          v17 = v10;
          v18 = 2080;
          v19 = v12;
          _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)", buf, 0x12u);
        }
        __break(1u);
        JUMPOUT(0x19B75C324);
      }
    }
  }
  v8 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 3);
  if (v8)
    v9 = v8(*((_QWORD *)this + 4));
  else
    v9 = 0;
  atomic_store(0, (unint64_t *)this + 1);
  if (*((_BYTE *)this + 123))
    (*(void (**)(CADeprecated::CAPThread *))(*(_QWORD *)this + 8))(this);
  return v9;
}

_opaque_pthread_t *CADeprecated::CAPThread::getScheduledPriority(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  _opaque_pthread_t *v2;
  thread_inspect_t v3;
  thread_inspect_t v4;
  thread_inspect_t v5;
  thread_inspect_t v6;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t v8[5];
  integer_t v9[5];
  integer_t v10[4];
  integer_t thread_info_out[5];
  int v12;

  if (this)
  {
    v2 = this;
    thread_info_outCnt = 10;
    v3 = pthread_mach_thread_np(this);
    thread_info(v3, 3u, thread_info_out, &thread_info_outCnt);
    switch(v12)
    {
      case 4:
        thread_info_outCnt = 4;
        v5 = pthread_mach_thread_np(v2);
        thread_info(v5, 0xCu, v10, &thread_info_outCnt);
        return (_opaque_pthread_t *)v10[1];
      case 2:
        thread_info_outCnt = 5;
        v6 = pthread_mach_thread_np(v2);
        thread_info(v6, 0xBu, v9, &thread_info_outCnt);
        return (_opaque_pthread_t *)v9[1];
      case 1:
        thread_info_outCnt = 5;
        v4 = pthread_mach_thread_np(v2);
        thread_info(v4, 0xAu, v8, &thread_info_outCnt);
        return (_opaque_pthread_t *)v8[1];
      default:
        return 0;
    }
  }
  return this;
}

uint64_t AVVCRecordingEngine::createRecordQueue(AVVCRecordingEngine *this, NSDictionary *a2)
{
  return 4294967292;
}

id AVVCRecordingEngine::audioSession(uint64_t a1, _QWORD *a2)
{
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__714;
  v11 = __Block_byref_object_dispose__715;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN19AVVCRecordingEngine12audioSessionEPU15__autoreleasingP7NSError_block_invoke;
  v6[3] = &unk_1E3BEC9E8;
  v6[4] = &v7;
  v6[5] = a1;
  if (*(_QWORD *)(a1 + 344) != -1)
  {
    dispatch_once((dispatch_once_t *)(a1 + 344), v6);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a2)
LABEL_3:
    *a2 = objc_retainAutorelease((id)v8[5]);
LABEL_4:
  v4 = *(id *)(a1 + 352);
  _Block_object_dispose(&v7, 8);

  return v4;
}

id AVVCRecordingEngine::sessionManager(uint64_t a1, _QWORD *a2)
{
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__714;
  v11 = __Block_byref_object_dispose__715;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN19AVVCRecordingEngine14sessionManagerEPU15__autoreleasingP7NSError_block_invoke;
  v6[3] = &unk_1E3BEC9E8;
  v6[4] = &v7;
  v6[5] = a1;
  if (*(_QWORD *)(a1 + 360) != -1)
  {
    dispatch_once((dispatch_once_t *)(a1 + 360), v6);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a2)
LABEL_3:
    *a2 = objc_retainAutorelease((id)v8[5]);
LABEL_4:
  v4 = *(id *)(a1 + 368);
  _Block_object_dispose(&v7, 8);

  return v4;
}

uint64_t AVVCRecordingEngine::updateRecordAndPlaybackRoutes(AVVCRecordingEngine *this)
{
  NSObject *v2;
  __CFString *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  int v8;
  void *v9;
  NSObject *v10;
  __CFString *v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  __CFString *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  id v24;
  int v25;
  void *v26;
  NSObject *v27;
  __CFString *v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  int v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::mutex *v45;
  std::mutex *v46;
  id location;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v48, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  location = 0;
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (!isDarwinOSProduct(void)::isDarwinOS)
  {
    (*(void (**)(_QWORD *, _QWORD))(*v48 + 64))(v48, 0);
    v2 = objc_claimAutoreleasedReturnValue();
    -[NSObject currentRoute](v2, "currentRoute");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = v48[47];
      if ((*(unsigned int (**)(_QWORD *))(*v48 + 320))(v48) != 2)
      {
        v4 = (*(uint64_t (**)(_QWORD *, id *))(*v48 + 328))(v48, &location);
        goto LABEL_52;
      }
      v7 = v5;
      if (IsSerializationEnabled(void)::onceToken != -1)
        dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
      v8 = IsSerializationEnabled(void)::enable;
      v45 = (std::mutex *)(v6 + 56);
      if (!IsSerializationEnabled(void)::enable)
        std::mutex::lock(v45);
      objc_msgSend(v7, "inputs", v45);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v9, "count"))
      {
        if (kAVVCScope)
        {
          v10 = *(id *)kAVVCScope;
          if (!v10)
          {
            v4 = 4294955501;
LABEL_48:
            v11 = CFSTR("No Record Route");
            v18 = CFSTR("No Record Route");
            goto LABEL_49;
          }
        }
        else
        {
          v10 = MEMORY[0x1E0C81028];
          v16 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v51 = "AVVCRouteManager.mm";
          v52 = 1024;
          v53 = 159;
          _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d No input routes. AQ engine couldnt find routes since VSPD is not present!", buf, 0x12u);
        }
        v4 = 4294955501;
LABEL_47:

        goto LABEL_48;
      }
      objc_msgSend(v9, "objectAtIndex:", 0);
      v10 = objc_claimAutoreleasedReturnValue();
      -[NSObject portType](v10, "portType");
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v11)
      {

        v4 = 0;
LABEL_49:
        v19 = -[__CFString copy](v11, "copy");
        v20 = *(void **)(v6 + 32);
        *(_QWORD *)(v6 + 32) = v19;

        if (!v8)
          std::mutex::unlock(v46);

        (*(void (**)(_QWORD *, id *))(*v48 + 328))(v48, &location);
LABEL_52:
        if (kAVVCScope)
        {
          v21 = *(id *)kAVVCScope;
          if (!v21)
            goto LABEL_59;
        }
        else
        {
          v21 = MEMORY[0x1E0C81028];
          v22 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v51 = "AVVCRecordingEngine.mm";
          v52 = 1024;
          v53 = 1244;
          v54 = 2112;
          v55 = location;
          _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New Record Route  : %@", buf, 0x1Cu);
        }

LABEL_59:
        if ((_DWORD)v4 != -11795)
        {
          if ((_DWORD)v4)
          {
            v23 = *((_QWORD *)this + 21);
            if (v23)
              (*(void (**)(uint64_t, _QWORD))(v23 + 16))(v23, *((_QWORD *)this + 34));
          }
        }
        v24 = v5;
        if (IsSerializationEnabled(void)::onceToken != -1)
          dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
        v25 = IsSerializationEnabled(void)::enable;
        if (!IsSerializationEnabled(void)::enable)
          std::mutex::lock((std::mutex *)(v6 + 56));
        objc_msgSend(v24, "outputs");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v26, "count"))
        {
          objc_msgSend(v26, "objectAtIndex:", 0);
          v27 = objc_claimAutoreleasedReturnValue();
          -[NSObject portType](v27, "portType");
          v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (!v28)
          {
            if (kAVVCScope)
            {
              v29 = *(id *)kAVVCScope;
              if (!v29)
              {
LABEL_83:
                v28 = CFSTR("Unknown Playback Route");
                goto LABEL_84;
              }
            }
            else
            {
              v29 = MEMORY[0x1E0C81028];
              v31 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v51 = "AVVCRouteManager.mm";
              v52 = 1024;
              v53 = 182;
              _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil output port!", buf, 0x12u);
            }

            goto LABEL_83;
          }
        }
        else
        {
          if (kAVVCScope)
          {
            v27 = *(id *)kAVVCScope;
            if (!v27)
            {
              v28 = CFSTR("No Playback Route");
              goto LABEL_85;
            }
          }
          else
          {
            v27 = MEMORY[0x1E0C81028];
            v30 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v51 = "AVVCRouteManager.mm";
            v52 = 1024;
            v53 = 187;
            _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d No output routes returned!", buf, 0x12u);
          }
          v28 = CFSTR("No Playback Route");
        }
LABEL_84:

LABEL_85:
        v32 = -[__CFString copy](v28, "copy");
        v33 = *(void **)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v32;

        if (!v25)
          std::mutex::unlock((std::mutex *)(v6 + 56));

        if (IsSerializationEnabled(void)::onceToken != -1)
          dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
        v34 = IsSerializationEnabled(void)::enable;
        if (!IsSerializationEnabled(void)::enable)
          std::mutex::lock((std::mutex *)(v6 + 56));
        v3 = (__CFString *)objc_msgSend(*(id *)(v6 + 40), "copy");
        if (!v34)
          std::mutex::unlock((std::mutex *)(v6 + 56));
        if (kAVVCScope)
        {
          v35 = *(id *)kAVVCScope;
          if (!v35)
          {
LABEL_100:
            v37 = (void *)-[__CFString copy](v3, "copy");
            (*(void (**)(_QWORD *, _QWORD))(*v48 + 64))(v48, 0);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "setPlaybackRoute:", v37);

            v39 = (void *)MEMORY[0x1A1AC6084]();
            +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "logRecordRoute:andPlaybackRoute:reporterID:", location, v3, -[NSObject reporterID](v2, "reporterID"));

            objc_autoreleasePoolPop(v39);
LABEL_101:

LABEL_102:
            goto LABEL_103;
          }
        }
        else
        {
          v35 = MEMORY[0x1E0C81028];
          v36 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v51 = "AVVCRecordingEngine.mm";
          v52 = 1024;
          v53 = 1257;
          v54 = 2112;
          v55 = v3;
          _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New Playback Route: %@", buf, 0x1Cu);
        }

        goto LABEL_100;
      }
      if (kAVVCScope)
      {
        v15 = *(id *)kAVVCScope;
        if (!v15)
        {
LABEL_46:
          v4 = 4294955512;
          goto LABEL_47;
        }
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
        v17 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "AVVCRouteManager.mm";
        v52 = 1024;
        v53 = 155;
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil port type!", buf, 0x12u);
      }

      goto LABEL_46;
    }
    if (kAVVCScope)
    {
      v13 = *(id *)kAVVCScope;
      if (!v13)
      {
LABEL_28:
        if ((*(unsigned int (**)(_QWORD *))(*v48 + 320))(v48) == 4)
          (*(void (**)(_QWORD *, id *))(*v48 + 328))(v48, &location);
        else
          objc_storeStrong(&location, CFSTR("No Record Route"));
        v4 = 4294955512;
        v3 = CFSTR("Unknown Playback Route");
        goto LABEL_101;
      }
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "AVVCRecordingEngine.mm";
      v52 = 1024;
      v53 = 1217;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d updateRecordAndPlaybackRoutes: Nil currentRoute!", buf, 0x12u);
    }

    goto LABEL_28;
  }
  if (!kAVVCScope)
  {
    v2 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_17;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
  {
LABEL_17:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "AVVCRecordingEngine.mm";
      v52 = 1024;
      v53 = 1209;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d updateRecordAndPlaybackRoutes: built in route !", buf, 0x12u);
    }
    v3 = 0;
    v4 = 0;
    goto LABEL_102;
  }
  v3 = 0;
  v4 = 0;
LABEL_103:

  v41 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v4;
}

void sub_19B75CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, void *a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::reconfigure(AVVCRecordingEngine *this)
{
  int v2;
  int v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(AVVCRecordingEngine *, BOOL))(*(_QWORD *)this + 112))(this, *((_QWORD *)this + 28) > 3);
  if (v2)
  {
    v3 = v2;
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = *((_QWORD *)this + 34);
      v12 = 136315906;
      v13 = "AVVCRecordingEngine.mm";
      v14 = 1024;
      v15 = 134;
      v16 = 2048;
      v17 = v6;
      v18 = 1024;
      v19 = v3;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigure for streamID(%lu) failed to destroy engine (%d)", (uint8_t *)&v12, 0x22u);
    }

  }
LABEL_9:
  v7 = (*(uint64_t (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 88))(this, *((_QWORD *)this + 8));
  if ((_DWORD)v7)
  {
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
        return v7;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = *((_QWORD *)this + 34);
      v12 = 136315906;
      v13 = "AVVCRecordingEngine.mm";
      v14 = 1024;
      v15 = 139;
      v16 = 2048;
      v17 = v10;
      v18 = 1024;
      v19 = v7;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigure for streamID(%lu) failed to prepareRecording (%d)", (uint8_t *)&v12, 0x22u);
    }

  }
  return v7;
}

uint64_t AVVCRecordingEngine::enableSiriListeningMode(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::resetAudioEngine(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getRecordRoute()
{
  return 4294967292;
}

void AVVCRecordingEngine::cacheRecordRoute(AVVCRecordingEngine *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = -[NSString copy](v3, "copy");
  v5 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((_QWORD *)this + 39);
    v9 = 136315650;
    v10 = "AVVCRecordingEngine.mm";
    v11 = 1024;
    v12 = 550;
    v13 = 2112;
    v14 = v8;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine::cacheRecordRoute : %@", (uint8_t *)&v9, 0x1Cu);
  }

LABEL_8:
}

void sub_19B75D378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::safeWork(uint64_t a1, void *a2, uint64_t a3)
{
  void (**v5)(_QWORD);
  std::recursive_mutex *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v6 = (std::recursive_mutex *)(a1 + 536);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 536));
      if (*(_BYTE *)(a1 + 520))
      {
        v7 = *(NSObject **)kAVVCScope;
        CALog::Scope::oslog(*(id *)kAVVCScope);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          v9 = 136315138;
          v10 = a3;
          _os_log_fault_impl(&dword_19B733000, v7, OS_LOG_TYPE_FAULT, "Warning: Tyring to do safeWork on engine work queue while in tearDown. Caller: %s", (uint8_t *)&v9, 0xCu);
        }

      }
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      v5[2](v5);
    }
  }

}

void sub_19B75D4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::dispatchAndSafeWork(uint64_t a1, void *a2, uint64_t a3)
{
  void (**v5)(_QWORD);
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[4];
  void (**v17)(_QWORD);
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      v6 = v21;
      v7 = v22;
      if (v22)
      {
        p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
      }
      v10 = *(NSObject **)(v6 + 528);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3321888768;
      v16[2] = ___ZN19AVVCRecordingEngine19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke;
      v16[3] = &unk_1E3BE5110;
      v18 = v6;
      v19 = v7;
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v20 = a3;
      v17 = v5;
      dispatch_async(v10, v16);

      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      v13 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v5[2](v5);
    }
  }

}

void sub_19B75D65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::safeWorkSync(uint64_t a1, void *a2)
{
  void (**v3)(void);
  std::recursive_mutex *v4;
  void (**v5)(void);

  v3 = a2;
  if (v3)
  {
    v5 = v3;
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v4 = (std::recursive_mutex *)(a1 + 536);
      std::recursive_mutex::lock(v4);
      v5[2]();
      std::recursive_mutex::unlock(v4);
    }
    else
    {
      v5[2]();
    }
    v3 = v5;
  }

}

void sub_19B75D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN19AVVCRecordingEngine19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::recursive_mutex *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = a1[5]) == 0)
  {
LABEL_10:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_17;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "AVVCRecordingEngine.mm";
      v16 = 1024;
      v17 = 1106;
      v18 = 2048;
      v19 = 0;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", buf, 0x1Cu);
    }

LABEL_17:
    if (!v3)
      return;
    goto LABEL_18;
  }
  v5 = (std::recursive_mutex *)(v4 + 536);
  std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 536));
  if (*(_BYTE *)(v4 + 520))
  {
    v7 = *(NSObject **)kAVVCScope;
    CALog::Scope::oslog(*(id *)kAVVCScope);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v13 = (const char *)a1[7];
      *(_DWORD *)buf = 136315138;
      v15 = v13;
      _os_log_fault_impl(&dword_19B733000, v7, OS_LOG_TYPE_FAULT, "Warning: Trying to do safeWork on engine work queue while in tearDown. Caller: %s", buf, 0xCu);
    }

  }
  (*(void (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], v6);
  std::recursive_mutex::unlock(v5);
LABEL_18:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B75D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  std::recursive_mutex::unlock(v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__714(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__715(uint64_t a1)
{

}

void ___ZN19AVVCRecordingEngine14sessionManagerEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  AVVCContextSettings *v3;
  uint64_t v4;
  void *v5;
  AVVCContextSettings *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id obj;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = [AVVCContextSettings alloc];
  v4 = *(_QWORD *)(v2 + 280);
  AVVCRouteManager::getRecordDeviceUID(*(id **)(v2 + 376));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[AVVCContextSettings initWithMode:deviceUID:](v3, "initWithMode:deviceUID:", v4, v5);

  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(v2 + 512);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v9 + 40);
  objc_msgSend(v7, "sessionManagerForContext:clientType:error:", v6, v8, &obj);
  v10 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v9 + 40), obj);
  v11 = *(void **)(v2 + 368);
  *(_QWORD *)(v2 + 368) = v10;

  if (kAVVCScope)
  {
    v12 = *(id *)kAVVCScope;
    if (!v12)
      goto LABEL_8;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(v2 + 368);
    v15 = *(_QWORD *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    v18 = "AVVCRecordingEngine.mm";
    v19 = 1024;
    v20 = 222;
    v21 = 2048;
    v22 = v14;
    v23 = 1024;
    v24 = v15;
    v25 = 2048;
    v26 = v2;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cached session manager pointer (%p) for engine(%d, %p)", buf, 0x2Cu);
  }

LABEL_8:
}

void sub_19B75DB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN19AVVCRecordingEngine12audioSessionEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  AVVCContextSettings *v3;
  uint64_t v4;
  void *v5;
  AVVCContextSettings *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id obj;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = [AVVCContextSettings alloc];
  v4 = *(_QWORD *)(v2 + 280);
  AVVCRouteManager::getRecordDeviceUID(*(id **)(v2 + 376));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[AVVCContextSettings initWithMode:deviceUID:](v3, "initWithMode:deviceUID:", v4, v5);

  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(v2 + 512);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v9 + 40);
  objc_msgSend(v7, "sessionForContext:clientType:error:", v6, v8, &obj);
  v10 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v9 + 40), obj);
  v11 = *(void **)(v2 + 352);
  *(_QWORD *)(v2 + 352) = v10;

  if (kAVVCScope)
  {
    v12 = *(id *)kAVVCScope;
    if (!v12)
      goto LABEL_8;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(v2 + 352);
    v15 = *(_QWORD *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    v18 = "AVVCRecordingEngine.mm";
    v19 = 1024;
    v20 = 207;
    v21 = 2048;
    v22 = v14;
    v23 = 1024;
    v24 = v15;
    v25 = 2048;
    v26 = v2;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cached session pointer (%p) for engine(%d, %p)", buf, 0x2Cu);
  }

LABEL_8:
}

void sub_19B75DCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::AVVCRecordingEngine(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  dispatch_queue_t v23;
  void *v24;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E3BE80A0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 384) = 850045863;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 850045863;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  MEMORY[0x1A1AC5AE4](a1 + 536);
  *(_DWORD *)(a1 + 600) = 512;
  *(_QWORD *)(a1 + 264) = 0x3FC999999999999ALL;
  v4 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;

  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;

  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;

  v7 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;

  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;

  v9 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;

  v10 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;

  v11 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;

  v12 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;

  v13 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;

  v14 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;

  v15 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;

  v16 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;

  v17 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;

  v18 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;

  v19 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;

  *(_WORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  v20 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 512) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = 16;
  *(_QWORD *)(a1 + 48) = 0x100000002;
  *(_OWORD *)(a1 + 32) = xmmword_19B85A1C0;
  v21 = operator new();
  *(_QWORD *)(v21 + 56) = 850045863;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_QWORD *)(v21 + 112) = 0;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = 0;
  *(_DWORD *)(v21 + 48) = 1065353216;
  *(_QWORD *)(a1 + 376) = v21;
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = dispatch_queue_create("AVVCRecordingEngine Work Queue", v22);
  v24 = *(void **)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v23;

  return a1;
}

void sub_19B75DF9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::mutex *v3;
  std::recursive_mutex *v4;
  std::__shared_weak_count *v6;

  std::recursive_mutex::~recursive_mutex(v4);

  std::mutex::~mutex(v3);
  std::mutex::~mutex(v2);

  v6 = *(std::__shared_weak_count **)(v1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::~AVVCRecordingEngine(AVVCRecordingEngine *this)
{
  AVVCContextSettings *v2;
  uint64_t v3;
  void *v4;
  AVVCContextSettings *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  id v34;
  std::__shared_weak_count *v35;
  _BYTE v36[16];
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  _BYTE *v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E3BE80A0;
  v2 = [AVVCContextSettings alloc];
  v3 = *((_QWORD *)this + 35);
  AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[AVVCContextSettings initWithMode:deviceUID:](v2, "initWithMode:deviceUID:", v3, v4);

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v36, -[AVVCContextSettings activationMode](v5, "activationMode"));
    -[AVVCContextSettings activationDeviceUID](v5, "activationDeviceUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    v38 = "AVVCRecordingEngine.mm";
    v39 = 1024;
    v40 = 93;
    v41 = 2080;
    v42 = v36;
    v43 = 2112;
    v44 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Trigger clean up of context(%s, %@)", buf, 0x26u);

  }
LABEL_8:
  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "cleanupContext:", v5);

  v11 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;

  free(*((void **)this + 38));
  v12 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;

  v13 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;

  v14 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;

  v15 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;

  v16 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;

  v17 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;

  v18 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;

  v19 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;

  v20 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;

  v21 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  v22 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;

  v23 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;

  v24 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;

  v25 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;

  v26 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;

  v27 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;

  v28 = *((_QWORD *)this + 47);
  if (v28)
  {
    v29 = *(id *)v28;
    *(_QWORD *)v28 = 0;

    v30 = *(void **)(v28 + 16);
    *(_QWORD *)(v28 + 16) = 0;

    v31 = *(void **)(v28 + 32);
    *(_QWORD *)(v28 + 32) = 0;

    v32 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = 0;

    std::mutex::~mutex((std::mutex *)(v28 + 56));
    MEMORY[0x1A1AC5BD4](v28, 0x1080C40D98F9877);
  }
  *((_QWORD *)this + 47) = 0;
  if (kAVVCScope)
  {
    v33 = *(id *)kAVVCScope;
    if (!v33)
      goto LABEL_17;
  }
  else
  {
    v33 = MEMORY[0x1E0C81028];
    v34 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v38 = "AVVCRecordingEngine.mm";
    v39 = 1024;
    v40 = 122;
    _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine():~AVVCRecordingEngine() called", buf, 0x12u);
  }

LABEL_17:
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 536));

  std::mutex::~mutex((std::mutex *)this + 7);
  std::mutex::~mutex((std::mutex *)this + 6);

  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
}

void sub_19B75E4CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setupASBDAndCreateRecorder(AVVCRecordingEngine *this, NSDictionary *a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  double v12;
  int16x8_t v13;
  id v14;
  id v15;
  NSObject *v16;
  double v17;
  int16x8_t v18;
  __int128 v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  double v26;
  int16x8_t v27;
  NSObject *v28;
  id v29;
  const char *v30;
  id v31;
  id v32;
  const char *v33;
  id v34;
  id v36;
  int v37;
  void *v38;
  void *v39;
  int v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint8_t *v45;
  CAStreamBasicDescription v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_SetupRecordQueueStart"));
  if (!v3)
  {
    v4 = (*(uint64_t (**)(AVVCRecordingEngine *, _QWORD, char *))(*(_QWORD *)this + 16))(this, 0, (char *)this + 24);
    if ((_DWORD)v4)
      goto LABEL_81;
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_49;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v22 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 155;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Settings are nil, rebuilding queue", buf, 0x12u);
    }

LABEL_49:
    if (kAVVCScope)
    {
      v23 = *(id *)kAVVCScope;
      if (!v23)
        goto LABEL_56;
    }
    else
    {
      v23 = (id)MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    v25 = v23;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v26, v27);
      LODWORD(v46.var0) = 136315650;
      *(_QWORD *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 157;
      HIWORD(v46.var3) = 2080;
      *(_QWORD *)&v46.var4 = buf;
      _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: NEW FORMAT: %s", (uint8_t *)&v46, 0x1Cu);
    }

LABEL_56:
    LODWORD(v46.var0) = 4102;
    BYTE4(v46.var0) = 1;
    memset(&v46.var1, 0, 32);
    kdebug_trace();
    v4 = (*(uint64_t (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 24))(this, 0);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v46);
    if (!(_DWORD)v4)
      goto LABEL_80;
    if ((v4 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_80;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v34 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_79;
      LODWORD(v46.var0) = 136315650;
      *(_QWORD *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 163;
      HIWORD(v46.var3) = 1024;
      v46.var4 = v4;
      v33 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_80;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v32 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_79;
      LODWORD(v46.var0) = 136315650;
      *(_QWORD *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 163;
      HIWORD(v46.var3) = 1024;
      v46.var4 = v4;
      v33 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %d";
    }
    _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v46, 0x18u);
LABEL_79:

    goto LABEL_80;
  }
  memset(&v46, 0, sizeof(v46));
  v4 = (*(uint64_t (**)(AVVCRecordingEngine *, NSDictionary *, CAStreamBasicDescription *))(*(_QWORD *)this + 16))(this, v3, &v46);
  if (!(_DWORD)v4)
  {
    if (*((double *)this + 3) == v46.var0
      && *((_DWORD *)this + 8) == v46.var1
      && *((_DWORD *)this + 9) == v46.var2
      && *((_DWORD *)this + 13) == v46.var6)
    {
      if (!*((_DWORD *)this + 58))
        goto LABEL_37;
      if (kAVVCScope)
      {
        v5 = *(id *)kAVVCScope;
        if (!v5)
        {
LABEL_86:
          +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 58));
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "logSessionMetric:value:category:type:reporterID:", CFSTR("avvcDestroyRecordQueueOnError"), v39, 2, 5, AVVCRecordingEngine::getReporterID(this));

          AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this + 18));
LABEL_37:
          v20 = (*(uint64_t (**)(AVVCRecordingEngine *, NSDictionary *))(*(_QWORD *)this + 24))(this, v3);
          v4 = v20;
          if ((_DWORD)v20)
          {
            if ((v20 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                v21 = *(id *)kAVVCScope;
                if (!v21)
                  goto LABEL_80;
              }
              else
              {
                v21 = MEMORY[0x1E0C81028];
                v31 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                goto LABEL_71;
              *(_DWORD *)buf = 136315650;
              v48 = "AVVCRecordingEngine.mm";
              v49 = 1024;
              v50 = 193;
              v51 = 1024;
              v52 = v4;
              v30 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                v21 = *(id *)kAVVCScope;
                if (!v21)
                  goto LABEL_80;
              }
              else
              {
                v21 = MEMORY[0x1E0C81028];
                v29 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                goto LABEL_71;
              *(_DWORD *)buf = 136315650;
              v48 = "AVVCRecordingEngine.mm";
              v49 = 1024;
              v50 = 193;
              v51 = 1024;
              v52 = v4;
              v30 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %d";
            }
            _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_ERROR, v30, buf, 0x18u);
LABEL_71:

          }
LABEL_80:
          ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_SetupRecordQueueEnd"));
          goto LABEL_81;
        }
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v37 = *((_DWORD *)this + 58);
        *(_DWORD *)buf = 136315650;
        v48 = "AVVCRecordingEngine.mm";
        v49 = 1024;
        v50 = 185;
        v51 = 1024;
        v52 = v37;
        _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroying engine because of record error: %d", buf, 0x18u);
      }

      goto LABEL_86;
    }
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_22;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 173;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Formats differ, rebuilding queue", buf, 0x12u);
    }

LABEL_22:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_29;
    }
    else
    {
      v9 = (id)MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v12, v13);
      v40 = 136315650;
      v41 = "AVVCRecordingEngine.mm";
      v42 = 1024;
      v43 = 175;
      v44 = 2080;
      v45 = buf;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: CURRENT FORMAT: %s", (uint8_t *)&v40, 0x1Cu);
    }

LABEL_29:
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
      {
LABEL_36:
        AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this + 18));
        v19 = *(_OWORD *)&v46.var3;
        *(_OWORD *)((char *)this + 24) = *(_OWORD *)&v46.var0;
        *(_OWORD *)((char *)this + 40) = v19;
        *((_QWORD *)this + 7) = *(_QWORD *)&v46.var7;
        goto LABEL_37;
      }
    }
    else
    {
      v14 = (id)MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString(&v46, (char *)buf, 0x100uLL, v17, v18);
      v40 = 136315650;
      v41 = "AVVCRecordingEngine.mm";
      v42 = 1024;
      v43 = 176;
      v44 = 2080;
      v45 = buf;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: NEW FORMAT: %s", (uint8_t *)&v40, 0x1Cu);
    }

    goto LABEL_36;
  }
LABEL_81:

  return v4;
}

void sub_19B75ED00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, size_t a3, double a4, int16x8_t a5)
{
  unsigned int var1;
  unsigned int var5;
  unsigned int var7;
  uint64_t var6;
  unsigned int var2;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double var0;
  BOOL v17;
  int32x4_t v18;
  uint32x4_t v19;
  signed int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  const char *v24;
  unsigned int v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  void *v36;
  void **v37;
  int v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  unsigned int v45;
  unsigned int v46;
  const char *v47;
  unsigned int v48;
  unsigned int v49;
  const char *v50;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  _BOOL4 v56;
  const char *v57;
  void *__p[2];
  int64_t v59;
  std::string v60;
  std::string v61;
  char __str[20];
  std::string v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  var1 = this->var1;
  if (var1 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)__p, this->var6, *(_QWORD *)&this->var0);
    goto LABEL_69;
  }
  if (var1 == 1819304813 && this->var4 == 1)
  {
    var5 = this->var5;
    if (var5 == this->var3)
    {
      var7 = this->var7;
      if (var5 >= var7 >> 3)
      {
        var6 = this->var6;
        if ((_DWORD)var6)
        {
          var2 = this->var2;
          if ((var2 & 0x20) != 0
            || (v17 = var5 == var5 / var6 * (_DWORD)var6, var5 /= var6, v17))
          {
            if ((var2 & 2) == 0 && 8 * var5 == var7)
            {
              if ((var2 & 1) != 0)
              {
                if ((var2 & 0x1F84) == 0)
                {
                  if (var5 == 4)
                  {
                    v14 = 1;
                    goto LABEL_168;
                  }
                  v17 = var5 == 8;
                  v56 = var5 == 8;
                  if (v17)
                  {
                    v14 = 4 * v56;
                    goto LABEL_168;
                  }
                }
              }
              else if ((var2 & 4) != 0)
              {
                v13 = (var2 >> 7) & 0x3F;
                if (v13 == 24 && var5 == 4)
                {
                  v14 = 3;
LABEL_168:
                  if ((var2 & 0x20) != 0)
                    v57 = ", deinterleaved";
                  else
                    v57 = ", interleaved";
                  if (var6 <= 1)
                    v57 = "";
                  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)__p, var6, *(_QWORD *)&this->var0, *((_QWORD *)&off_1E3BEB560 + v14), v57);
                  goto LABEL_69;
                }
                if (!v13 && var5 == 4)
                {
                  v14 = 5;
                  goto LABEL_168;
                }
                if (!v13 && var5 == 2)
                {
                  v14 = 2;
                  goto LABEL_168;
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = this->var6;
  var0 = this->var0;
  if ((_DWORD)v15)
    v17 = 0;
  else
    v17 = var1 == 0;
  if (v17 && var0 == 0.0)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)__p, 0, *(_QWORD *)&this->var0);
    goto LABEL_69;
  }
  a5.i32[0] = bswap32(var1);
  *(int8x8_t *)a5.i8 = vzip1_s8(*(int8x8_t *)a5.i8, *(int8x8_t *)&var0);
  v18.i64[0] = 0x1F0000001FLL;
  v18.i64[1] = 0x1F0000001FLL;
  v19.i64[0] = 0x5F0000005FLL;
  v19.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v19, (uint32x4_t)vsraq_n_s32(v18, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a5.i8, (int8x8_t)0x2E002E002E002ELL);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 4;
  LODWORD(v63.__r_.__value_.__l.__data_) = vmovn_s16(a5).u32[0];
  v63.__r_.__value_.__s.__data_[4] = 0;
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v61, v15, *(_QWORD *)&var0, &v63, this->var2);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  v20 = this->var1;
  if (v20 <= 1819304812)
  {
    if (v20 != 1634492771 && v20 != 1634497332 && v20 != 1718378851)
    {
LABEL_75:
      caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v63, this->var7, this->var3, this->var4, this->var5);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v61;
      else
        v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
LABEL_62:
      v34 = std::string::insert(&v63, 0, (const std::string::value_type *)v32, size);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v59 = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      v36 = (void *)v63.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_45:
    v29 = this->var2;
    if ((v29 - 1) < 4 || !(_DWORD)v29 && (v20 == 1634497332 || v20 == 1936487278 || v20 == 1936487267))
    {
      caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v63, CA::StreamDescription::AsString(void)const::kSourceBits[v29]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v63;
      else
        v30 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        v31 = v63.__r_.__value_.__l.__size_;
      std::string::append(&v61, (const std::string::value_type *)v30, v31);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append(&v61, "from UNKNOWN source bit depth, ", 0x1FuLL);
    }
    caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v63, this->var4);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v61;
    else
      v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    goto LABEL_62;
  }
  if (v20 == 1936487278 || v20 == 1936487267)
    goto LABEL_45;
  if (v20 != 1819304813)
    goto LABEL_75;
  v21 = this->var2;
  v22 = this->var5;
  v23 = v21 & 0x20;
  v24 = "";
  if (!v22)
    goto LABEL_37;
  if ((v21 & 0x20) != 0)
  {
    v25 = 1;
  }
  else
  {
    v25 = this->var6;
    if (!v25)
    {
      v23 = 0;
LABEL_37:
      v26 = " signed";
      if ((v21 & 4) == 0)
        v26 = " unsigned";
      if ((v21 & 1) != 0)
        v27 = "float";
      else
        v27 = "integer";
      if ((v21 & 1) != 0)
        v28 = "";
      else
        v28 = v26;
LABEL_107:
      v63.__r_.__value_.__s.__data_[0] = 0;
      if (v23)
        v43 = ", deinterleaved";
      else
        v43 = "";
      v40 = "";
      v44 = "";
      goto LABEL_111;
    }
  }
  v39 = v22 / v25;
  if (v22 / v25 < 2)
  {
    v42 = " signed";
    if ((v21 & 4) == 0)
      v42 = " unsigned";
    if ((v21 & 1) != 0)
      v27 = "float";
    else
      v27 = "integer";
    if ((v21 & 1) != 0)
      v28 = "";
    else
      v28 = v42;
    if (v25 > v22)
      goto LABEL_107;
    v39 = 1;
    v40 = "";
  }
  else
  {
    if ((v21 & 2) != 0)
      v40 = " big-endian";
    else
      v40 = " little-endian";
    v41 = " unsigned";
    if ((v21 & 4) != 0)
      v41 = " signed";
    if ((v21 & 1) != 0)
      v27 = "float";
    else
      v27 = "integer";
    if ((v21 & 1) != 0)
      v28 = "";
    else
      v28 = v41;
  }
  v45 = this->var6;
  if ((v21 & 0x20) != 0)
    v46 = 1;
  else
    v46 = this->var6;
  if (v46)
    v46 = 8 * (v22 / v46);
  if (v46 == this->var7)
  {
    v63.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if ((v21 & 8) != 0)
      v47 = "";
    else
      v47 = "un";
    snprintf((char *)&v63, 0x20uLL, "%spacked in %u bytes", v47, v39);
    v22 = this->var5;
    v21 = this->var2;
    if (!v22)
    {
      v48 = 0;
      v23 = this->var2 & 0x20;
      goto LABEL_133;
    }
    v45 = this->var6;
    v23 = this->var2 & 0x20;
  }
  if (v23)
    v48 = 1;
  else
    v48 = v45;
  if (v48)
    v48 = 8 * (v22 / v48);
LABEL_133:
  v49 = this->var7;
  v50 = " high-aligned";
  if ((v21 & 0x10) == 0)
    v50 = " low-aligned";
  if ((v49 & 7) == 0 && v48 == v49)
    v44 = "";
  else
    v44 = v50;
  if (v23)
    v43 = ", deinterleaved";
  else
    v43 = "";
  if (v63.__r_.__value_.__s.__data_[0])
  {
    v24 = ", ";
    goto LABEL_146;
  }
LABEL_111:
  if (*v44)
    v24 = ", ";
LABEL_146:
  if (((v21 >> 7) & 0x3F) != 0)
    snprintf(__str, 0x14uLL, "%u.%u");
  else
    snprintf(__str, 0x14uLL, "%u");
  caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v60, __str, v40, v28, v27, v24, &v63, v44, v43);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v61;
  else
    v52 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    v53 = v61.__r_.__value_.__l.__size_;
  v54 = std::string::insert(&v60, 0, (const std::string::value_type *)v52, v53);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v59 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v36);
  }
LABEL_65:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_69:
  if (v59 >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  strlcpy(a2, (const char *)v37, a3);
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_19B75F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AVVCRecordingEngine::destroyRecordEngineWithRecordLock(AVVCRecordingEngine *this)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    (*((void (**)(AVVCRecordingEngine *, _QWORD))this + 2))(this, 0);
    return;
  }
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "AVVCRecordingEngine.mm";
    v5 = 1024;
    v6 = 1068;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d destroyRecordEngineWithRecordLockBlock is nil !", (uint8_t *)&v3, 0x12u);
  }

}

uint64_t AVVCRecordingEngine::getReporterID(AVVCRecordingEngine *this)
{
  void *v2;
  uint64_t v3;

  if (IsMetricsOwnedByAVVC(void)::onceToken != -1)
    dispatch_once(&IsMetricsOwnedByAVVC(void)::onceToken, &__block_literal_global_141);
  if (IsMetricsOwnedByAVVC(void)::owned)
    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  else
    (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "reporterID");

  return v3;
}

void sub_19B75F6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_19B75F7B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void AVVCRecordingEngine::setRecordDeviceUID(AVVCRecordingEngine *this, NSString *a2)
{
  int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSString *v7;

  v7 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)((char *)this + 56));
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  v5 = -[NSString copy](v7, "copy");
  v6 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;

  if (!v3)
    std::mutex::unlock((std::mutex *)((char *)this + 56));

}

void sub_19B75F88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::populateRecordSettings(AVVCRecordingEngine *this)
{
  __CFString *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  int v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  int v30;
  unsigned int v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  id v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t i;
  uint64_t j;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[8];
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  const __CFString *v72;
  __int128 v73;
  __int128 v74;
  id v75[28];

  v75[27] = *(id *)MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v49, "populateRecordSettings");
  memset(v75, 0, 216);
  v74 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v2 = CFSTR("AVFormatIDKey");
  v72 = CFSTR("AVFormatIDKey");
  v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)this + 8));
  v4 = (void *)v56;
  *(_QWORD *)&v56 = v3;

  objc_storeStrong((id *)&v73, CFSTR("AVSampleRateKey"));
  v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *((double *)this + 3));
  v6 = (void *)*((_QWORD *)&v56 + 1);
  *((_QWORD *)&v56 + 1) = v5;

  objc_storeStrong((id *)&v73 + 1, CFSTR("AVNumberOfChannelsKey"));
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)this + 13));
  v8 = (void *)v57;
  *(_QWORD *)&v57 = v7;

  if (*((_DWORD *)this + 8) == 1819304813)
  {
    objc_storeStrong((id *)&v74, CFSTR("AVLinearPCMBitDepthKey"));
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)this + 14));
    v10 = (void *)*((_QWORD *)&v57 + 1);
    *((_QWORD *)&v57 + 1) = v9;

    objc_storeStrong((id *)&v74 + 1, CFSTR("AVLinearPCMIsFloatKey"));
    v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((_DWORD *)this + 9) & 1);
    v12 = (void *)v58;
    *(_QWORD *)&v58 = v11;

    objc_storeStrong(v75, CFSTR("AVLinearPCMIsBigEndianKey"));
    v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", ((unint64_t)*((unsigned int *)this + 9) >> 1) & 1);
    v14 = (void *)*((_QWORD *)&v58 + 1);
    *((_QWORD *)&v58 + 1) = v13;

    objc_storeStrong(&v75[1], CFSTR("AVLinearPCMIsNonInterleaved"));
    v15 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", ((unint64_t)*((unsigned int *)this + 9) >> 5) & 1);
    v16 = (void *)v59;
    *(_QWORD *)&v59 = v15;

    v17 = 7;
  }
  else
  {
    v17 = 3;
  }
  v48 = 0;
  v18 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(_QWORD *)this + 192))(this, 1936876401, &v48);
  if (!v18)
  {
    objc_storeStrong((id *)&v72 + v17, CFSTR("AVSampleRateConverterQualityKey"));
    v20 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v21 = objc_msgSend(v20, "initWithUnsignedInteger:", v48);
    v22 = (void *)*((_QWORD *)&v56 + v17);
    *((_QWORD *)&v56 + v17) = v21;

    ++v17;
    goto LABEL_13;
  }
  if (kAVVCScope)
  {
    v19 = *(id *)kAVVCScope;
    if (!v19)
      goto LABEL_13;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v51 = "AVVCRecordingEngine.mm";
    v52 = 1024;
    v53 = 307;
    v54 = 1024;
    LODWORD(v55) = v18;
    _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioConverterSampleRateConverterQuality failed: %d", buf, 0x18u);
  }

LABEL_13:
  v24 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(_QWORD *)this + 192))(this, 1633903204, &v48);
  if (v24)
  {
    if (kAVVCScope)
    {
      v25 = *(id *)kAVVCScope;
      if (!v25)
        goto LABEL_22;
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
      v29 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "AVVCRecordingEngine.mm";
      v52 = 1024;
      v53 = 317;
      v54 = 1024;
      LODWORD(v55) = v24;
      _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioConverterPropertyBitDepthHint failed: %d", buf, 0x18u);
    }

  }
  else
  {
    objc_storeStrong((id *)&v72 + v17, CFSTR("AVEncoderBitDepthHintKey"));
    v26 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v27 = objc_msgSend(v26, "initWithUnsignedInteger:", v48);
    v28 = (void *)*((_QWORD *)&v56 + v17);
    *((_QWORD *)&v56 + v17) = v27;

    ++v17;
  }
LABEL_22:
  v47 = 0;
  v30 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(_QWORD *)this + 224))(this, 1634820972, &v47);
  if (!v30)
  {
    v31 = v47;
    if (v47)
    {
      if (kAVVCScope)
      {
        v32 = *(id *)kAVVCScope;
        if (!v32)
          goto LABEL_34;
      }
      else
      {
        v32 = MEMORY[0x1E0C81028];
        v34 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v51 = "AVVCRecordingEngine.mm";
        v52 = 1024;
        v53 = 329;
        v54 = 1024;
        LODWORD(v55) = v31;
        _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty returned %d for kAudioQueueProperty_ChannelLayout property size", buf, 0x18u);
      }

LABEL_34:
      v35 = objc_alloc(MEMORY[0x1E0C99DF0]);
      v33 = objc_retainAutorelease((id)objc_msgSend(v35, "initWithCapacity:", v47));
      v36 = -[NSObject mutableBytes](v33, "mutableBytes");
      v37 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)this + 232))(this, 1634820972, v36, &v47);
      if (v37)
      {
        if (kAVVCScope)
        {
          v38 = *(id *)kAVVCScope;
          if (!v38)
            goto LABEL_54;
        }
        else
        {
          v38 = MEMORY[0x1E0C81028];
          v41 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v51 = "AVVCRecordingEngine.mm";
          v52 = 1024;
          v53 = 337;
          v54 = 1024;
          LODWORD(v55) = v37;
          _os_log_impl(&dword_19B733000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioQueueProperty_ChannelLayout failed: %d", buf, 0x18u);
        }

        goto LABEL_54;
      }
      if (kAVVCScope)
      {
        v40 = *(id *)kAVVCScope;
        if (!v40)
        {
LABEL_52:
          if (v33)
          {
            objc_storeStrong((id *)&v72 + v17, CFSTR("AVChannelLayoutKey"));
            objc_storeStrong((id *)&v56 + v17++, v33);
          }
          goto LABEL_54;
        }
      }
      else
      {
        v40 = MEMORY[0x1E0C81028];
        v42 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v51 = "AVVCRecordingEngine.mm";
        v52 = 1024;
        v53 = 340;
        v54 = 2048;
        v55 = v36;
        _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty returned (%p) for kAudioQueueProperty_ChannelLayout bytes", buf, 0x1Cu);
      }

      goto LABEL_52;
    }
  }
  if (kAVVCScope)
  {
    v33 = *(id *)kAVVCScope;
    if (!v33)
      goto LABEL_55;
  }
  else
  {
    v33 = MEMORY[0x1E0C81028];
    v39 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v51 = "AVVCRecordingEngine.mm";
    v52 = 1024;
    v53 = 325;
    v54 = 1024;
    LODWORD(v55) = v30;
    _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty property size of kAudioQueueProperty_ChannelLayout failed: %d OR property size is 0", buf, 0x18u);
  }
LABEL_54:

LABEL_55:
  v43 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:count:", &v56, &v72, v17);
  v44 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v43;

  for (i = 248; i != -8; i -= 8)
  for (j = 248; j != -8; j -= 8)

  TraceMethod::~TraceMethod((TraceMethod *)v49);
}

void sub_19B760054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  uint64_t i;
  uint64_t j;

  for (i = 248; i != -8; i -= 8)
  for (j = 248; j != -8; j -= 8)

  TraceMethod::~TraceMethod((TraceMethod *)&a10);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStreamState(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  unint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 224);
    if (v6 > 6)
      v7 = "ILLEGAL";
    else
      v7 = off_1E3BEC7D0[v6];
    v8 = off_1E3BEC7D0[a2];
    v9 = 136315906;
    v10 = "AVVCRecordingEngine.mm";
    v11 = 1024;
    v12 = 367;
    v13 = 2080;
    v14 = v7;
    v15 = 2080;
    v16 = v8;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStreamState (%s => %s)", (uint8_t *)&v9, 0x26u);
  }

LABEL_11:
  *(_QWORD *)(a1 + 224) = a2;
}

void AVVCRecordingEngine::setRecordErrorStatus(AVVCRecordingEngine *this, int a2, const char *a3)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  int v11;
  __CFString *v12;
  id v13;
  int v14;
  __CFString *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  __CFString *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_25;
    }
    else
    {
      v6 = (id)MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    v9 = v6;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Get4CCFromInt(a2);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v11 = *((_DWORD *)this + 58);
      if (v11)
      {
        Get4CCFromInt(*((_DWORD *)this + 58));
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12 = CFSTR("noErr");
      }
      v16 = 136316162;
      v17 = "AVVCRecordingEngine.mm";
      v18 = 1024;
      v19 = 379;
      v20 = 2112;
      v21 = v10;
      v22 = 2112;
      v23 = v12;
      v24 = 2080;
      v25 = a3;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d setRecordErrorStatus: '%@' Previous: '%@' Caller: %s", (uint8_t *)&v16, 0x30u);
      if (v11)

    }
    goto LABEL_24;
  }
  if (*((_DWORD *)this + 58))
  {
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_25;
    }
    else
    {
      v7 = (id)MEMORY[0x1E0C81028];
      v13 = MEMORY[0x1E0C81028];
    }
    v9 = v7;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((_DWORD *)this + 58);
      if (v14)
      {
        Get4CCFromInt(*((_DWORD *)this + 58));
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = CFSTR("noErr");
      }
      v16 = 136316162;
      v17 = "AVVCRecordingEngine.mm";
      v18 = 1024;
      v19 = 382;
      v20 = 2112;
      v21 = CFSTR("noErr");
      v22 = 2112;
      v23 = v15;
      v24 = 2080;
      v25 = a3;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setRecordErrorStatus: '%@' Previous: '%@' Caller: %s", (uint8_t *)&v16, 0x30u);
      if (v14)

    }
LABEL_24:

  }
LABEL_25:
  *((_DWORD *)this + 58) = a2;
}

void sub_19B760440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setRecordBufferDuration(AVVCRecordingEngine *this, double a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  unint64_t v8;
  const char *v9;
  id v10;
  id v11;
  const char *v12;
  char v14[8];
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v14, "setRecordBufferDuration");
  if (*((uint64_t *)this + 28) < 4)
  {
    if (*((double *)this + 33) == a2)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_30;
    }
    if (a2 >= 0.01)
    {
LABEL_22:
      *((double *)this + 33) = a2;
      if (kAVVCScope)
      {
        v4 = *(id *)kAVVCScope;
        if (!v4)
          goto LABEL_24;
      }
      else
      {
        v4 = MEMORY[0x1E0C81028];
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v12 = (const char *)*((_QWORD *)this + 33);
        *(_DWORD *)buf = 136315650;
        v16 = "AVVCRecordingEngine.mm";
        v17 = 1024;
        v18 = 442;
        v19 = 2048;
        v20 = v12;
        _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setRecordBufferDuration: duration now %.3f", buf, 0x1Cu);
      }
      v5 = 0;
      goto LABEL_29;
    }
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_21:
        a2 = 0.01;
        goto LABEL_22;
      }
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "AVVCRecordingEngine.mm";
      v17 = 1024;
      v18 = 424;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d setRecordBufferDuration: specified buffer duration too small -- setting to minimum allowed", buf, 0x12u);
    }

    goto LABEL_21;
  }
  if (!kAVVCScope)
  {
    v4 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
    goto LABEL_11;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_11:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_QWORD *)this + 28);
      if (v8 > 6)
        v9 = "ILLEGAL";
      else
        v9 = off_1E3BEC7D0[v8];
      *(_DWORD *)buf = 136315650;
      v16 = "AVVCRecordingEngine.mm";
      v17 = 1024;
      v18 = 416;
      v19 = 2080;
      v20 = v9;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d setRecordBufferDuration: Attempting to setRecordBufferDuration while record is active. Stream State(%s)", buf, 0x1Cu);
    }
    v5 = 4294955516;
LABEL_29:

    goto LABEL_30;
  }
  v5 = 4294955516;
LABEL_30:
  TraceMethod::~TraceMethod((TraceMethod *)v14);
  return v5;
}

void AVVCRecordingEngine::setActivationContextSettings(AVVCRecordingEngine *this, AVVCContextSettings *a2)
{
  int v3;
  AVVCContextSettings *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  AVVCContextSettings *v9;

  v9 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)this + 6);
  v4 = [AVVCContextSettings alloc];
  v5 = -[AVVCContextSettings activationMode](v9, "activationMode");
  -[AVVCContextSettings activationDeviceUID](v9, "activationDeviceUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[AVVCContextSettings initWithMode:deviceUID:](v4, "initWithMode:deviceUID:", v5, v6);
  v8 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = v7;

  objc_msgSend(*((id *)this + 36), "setAnnounceCallsEnabled:", -[AVVCContextSettings announceCallsEnabled](v9, "announceCallsEnabled"));
  if (!v3)
    std::mutex::unlock((std::mutex *)this + 6);

}

void sub_19B7607FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id AVVCRecordingEngine::getActivationContextSettings(AVVCRecordingEngine *this)
{
  std::mutex *v2;
  int v3;
  void *v4;

  v2 = (std::mutex *)((char *)this + 384);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock(v2);
  v4 = (void *)objc_msgSend(*((id *)this + 36), "copy");
  if (!v3)
    std::mutex::unlock(v2);
  return v4;
}

void sub_19B7608B0(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (!v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

void AVVCRecordingEngine::setRecordMode(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  id v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_14;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 336);
    if (v6 > 2)
      v7 = "ILLEGAL";
    else
      v7 = off_1E3BEB590[v6];
    if (a2 > 2)
      v8 = "ILLEGAL";
    else
      v8 = off_1E3BEB590[a2];
    v9 = 136315906;
    v10 = "AVVCRecordingEngine.mm";
    v11 = 1024;
    v12 = 573;
    v13 = 2080;
    v14 = v7;
    v15 = 2080;
    v16 = v8;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set mRecordMode %s > %s", (uint8_t *)&v9, 0x26u);
  }

LABEL_14:
  *(_QWORD *)(a1 + 336) = a2;
}

uint64_t AVVCRecordingEngine::isSessionRecording(AVVCRecordingEngine *this)
{
  void *v2;
  unsigned int v3;
  void *v4;
  int v5;
  unsigned int v6;

  (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "clientRequestsRecording");

  (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "sessionState");

  if (v5 == 7)
    v6 = v3;
  else
    v6 = 0;
  if (*((_QWORD *)this + 28) == 5)
    return v6;
  else
    return 0;
}

void sub_19B760A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "copy");
  v8 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v7;

  v9 = objc_msgSend(v6, "copy");
  v10 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v9;

  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_8;
  }
  else
  {
    v11 = (id)MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = _Block_copy(*(const void **)(a1 + 88));
    v15 = _Block_copy(*(const void **)(a1 + 104));
    v16 = 136315906;
    v17 = "AVVCRecordingEngine.mm";
    v18 = 1024;
    v19 = 617;
    v20 = 2048;
    v21 = v14;
    v22 = 2048;
    v23 = v15;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStartRecordCompletionAndAudioCallbackBlocks: startCompletionBlock(%p). audioCallbackBlock(%p)", (uint8_t *)&v16, 0x26u);

  }
LABEL_8:

}

void sub_19B760C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStopRecordCompletionBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 96));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 623;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStopRecordCompletionBlock: stopCompletionBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B760D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setDidStopDelegateCompletionBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 112));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 629;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDidStopDelegateCompletionBlock: didStopCompletionBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B760E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setEncoderErrorBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 120));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 635;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setEncoderErrorBlock: encoderErrorBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B760FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setSetupEndpointerBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 128));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 641;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSetupEndpointerBlock: setupEndpointerBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B761100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setCheckForEndpointBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 136));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 647;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setCheckForEndpointBlock: checkForEndpointBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B76123C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStopRecordWithRecordLockBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 152));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 653;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStopRecordWithRecordLockBlock: stopRecordWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B761378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 144));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 659;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDestroyRecordEngineWithRecordLockBlock: destroyRecordEngineWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B7614B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setReconfigureWithRecordLockBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 160));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 665;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setReconfigureWithRecordLockBlock: reconfigureWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B7615F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStreamInvalidatedBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 168));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 671;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStreamInvalidatedBlock: streamInvalidatedBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B76172C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setHardwareConfigChangedBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 176));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 677;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHardwareConfigChangedBlock: hardwareConfigChangedBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B761868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setBeginSessionActivateBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 184));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 683;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setBeginSessionActivateBlock: beginSessionActivateBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B7619A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setEndSessionActivateBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v4;

  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = (id)MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = _Block_copy(*(const void **)(a1 + 192));
    v10 = 136315650;
    v11 = "AVVCRecordingEngine.mm";
    v12 = 1024;
    v13 = 689;
    v14 = 2048;
    v15 = v9;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setEndSessionActivateBlock: endSessionActivateBlock(%p).", (uint8_t *)&v10, 0x1Cu);

  }
LABEL_8:

}

void sub_19B761AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::resetCompletionBlocks(AVVCRecordingEngine *this, std::__shared_weak_count *a2)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v18, (uint64_t)this, a2);
  AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks(v18, 0, 0);
  AVVCRecordingEngine::setStopRecordCompletionBlock(v18, 0);
  AVVCRecordingEngine::setEncoderErrorBlock(v18, 0);
  AVVCRecordingEngine::setSetupEndpointerBlock(v18, 0);
  AVVCRecordingEngine::setCheckForEndpointBlock(v18, 0);
  AVVCRecordingEngine::setStopRecordWithRecordLockBlock(v18, 0);
  AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock(v18, 0);
  AVVCRecordingEngine::setReconfigureWithRecordLockBlock(v18, 0);
  AVVCRecordingEngine::setStreamInvalidatedBlock(v18, 0);
  AVVCRecordingEngine::setHardwareConfigChangedBlock(v18, 0);
  AVVCRecordingEngine::setBeginSessionActivateBlock(v18, 0);
  AVVCRecordingEngine::setEndSessionActivateBlock(v18, 0);
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
LABEL_5:
    v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_21:

      goto LABEL_22;
    }
    v5 = v18;
    v6 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      if (v5)
      {
        v9 = (void *)MEMORY[0x1E0CB3940];
        v10 = *(_QWORD *)(v5 + 272);
        v11 = *p_shared_owners + 1;
LABEL_13:
        objc_msgSend(v9, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v5, v10, v11);
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_15;
      }
    }
    else if (v18)
    {
      v11 = 0;
      v9 = (void *)MEMORY[0x1E0CB3940];
      v10 = *(_QWORD *)(v18 + 272);
      goto LABEL_13;
    }
    v12 = CFSTR("(0x0) use_count:0");
LABEL_15:
    *(_DWORD *)buf = 136315650;
    v21 = "AVVCRecordingEngine.mm";
    v22 = 1024;
    v23 = 707;
    v24 = 2112;
    v25 = v12;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reset completion blocks to nil for engine[%@]", buf, 0x1Cu);
    if (v6)
    {
      v13 = (unint64_t *)&v6->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    goto LABEL_21;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
    goto LABEL_5;
LABEL_22:
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19B761D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::avvcAudioBufferReceived(AVVCRecordingEngine *this, AVVCAudioBuffer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  AVVCAudioBuffer *v8;

  v8 = a2;
  v7 = *((_QWORD *)this + 13);
  if (v7)
    (*(void (**)(uint64_t, _QWORD, AVVCAudioBuffer *, uint64_t, uint64_t))(v7 + 16))(v7, *((_QWORD *)this + 34), v8, a3, a4);

}

void sub_19B761E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::audioQueueBufferReceived(AVVCRecordingEngine *this, AudioQueueBuffer *a2, uint64_t a3)
{
  uint64_t v6;
  AVVCAudioBuffer *v7;

  v6 = operator new();
  *(_DWORD *)v6 = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 8) = a2->mAudioData;
  *(_DWORD *)(v6 + 16) = a2->mAudioDataByteSize;
  *(_BYTE *)(v6 + 99) = *((_BYTE *)this + 328);
  *(_WORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 98) = 0;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)this + 40);
  *(_QWORD *)(v6 + 88) = *((_QWORD *)this + 7);
  v7 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", v6, *((unsigned int *)this + 13), a3);
  AVVCRecordingEngine::avvcAudioBufferReceived(this, v7, 1, 1);
  *(_QWORD *)(v6 + 8) = 0;

}

void sub_19B761EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::audioBufferListReceived(AVVCRecordingEngine *this, AudioBufferList *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *mData;
  UInt32 v10;
  NSObject *v11;
  NSObject *v12;
  AVVCAudioBuffer *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  UInt32 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  mData = a2->mBuffers[0].mData;
  *(_QWORD *)(v8 + 8) = mData;
  v10 = a2->mNumberBuffers * a2->mBuffers[0].mDataByteSize;
  *(_DWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 99) = *((_BYTE *)this + 328);
  *(_WORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 98) = 0;
  *(_QWORD *)(v8 + 88) = *((_QWORD *)this + 7);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)((char *)this + 24);
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v11 = *(id *)kAVVCScope;
      if (v11)
      {
        v12 = v11;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v14 = 136315906;
          v15 = "AVVCRecordingEngine.mm";
          v16 = 1024;
          v17 = 798;
          v18 = 2048;
          v19 = mData;
          v20 = 1024;
          v21 = v10;
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d myBuffer->mAudioData : %p, myBuffer->mAudioDataByteSize : %d", (uint8_t *)&v14, 0x22u);
        }

      }
    }
  }
  v13 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", v8, a3, a4);
  AVVCRecordingEngine::avvcAudioBufferReceived(this, v13, 1, 1);
  *(_QWORD *)(v8 + 8) = 0;

}

void sub_19B7620C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::myAudioQueueBufferReceived(AVVCRecordingEngine *this, MyAudioQueueBuffer *a2, uint64_t a3)
{
  AVVCAudioBuffer *v4;

  a2->var11 = *((_BYTE *)this + 328);
  v4 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", a2, *((unsigned int *)this + 13), a3);
  AVVCRecordingEngine::avvcAudioBufferReceived(this, v4, 0, 1);

}

void sub_19B76214C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::lpcmAudioQueueBufferReceivedForNonLPCMClientFormat(AVVCRecordingEngine *this, AudioQueueBuffer *a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  uint64_t v8;
  __int128 v9;
  AVVCAudioBuffer *v10;

  v8 = operator new();
  v9 = *(_OWORD *)&a4->mBytesPerPacket;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)&a4->mSampleRate;
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 8) = a2->mAudioData;
  *(_DWORD *)(v8 + 16) = a2->mAudioDataByteSize;
  *(_BYTE *)(v8 + 99) = *((_BYTE *)this + 328);
  *(_WORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 98) = 0;
  *(_OWORD *)(v8 + 72) = v9;
  *(_QWORD *)(v8 + 88) = *(_QWORD *)&a4->mBitsPerChannel;
  v10 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", v8, a4->mChannelsPerFrame, a3);
  AVVCRecordingEngine::avvcAudioBufferReceived(this, v10, 1, 0);
  *(_QWORD *)(v8 + 8) = 0;

}

void sub_19B762240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN19AVVCRecordingEngine34serializedUpdateStreamStoppedStateEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
}

BOOL AVVCRecordingEngine::if_running_then(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  int v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  unint64_t v8;
  const char *v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v4 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)(a1 + 448));
  v5 = *(_QWORD *)(a1 + 224);
  if (v5 >= 4)
  {
    v3[2](v3);
    goto LABEL_17;
  }
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 224);
    if (v8 > 6)
      v9 = "ILLEGAL";
    else
      v9 = off_1E3BEC7D0[v8];
    v11 = 136315650;
    v12 = "AVVCRecordingEngine.mm";
    v13 = 1024;
    v14 = 856;
    v15 = 2080;
    v16 = v9;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring action, since streamState is already %s", (uint8_t *)&v11, 0x1Cu);
  }

LABEL_17:
  if (!v4)
    std::mutex::unlock((std::mutex *)(a1 + 448));

  return v5 > 3;
}

void sub_19B762400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSObject *AVVCRecordingEngine::stopRecord(AVVCRecordingEngine *this, char a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  unint64_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;
  unint64_t v13;
  const char *v14;
  id v15;
  id v16;
  int v17;
  NSObject *v18;
  id v19;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  switch(*((_QWORD *)this + 28))
  {
    case 0:
    case 1:
      if (kAVVCScope)
      {
        v5 = *(id *)kAVVCScope;
        if (!v5)
          return 4294955515;
      }
      else
      {
        v5 = MEMORY[0x1E0C81028];
        v12 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v13 = *((_QWORD *)this + 28);
        if (v13 > 6)
          v14 = "ILLEGAL";
        else
          v14 = off_1E3BEC7D0[v13];
        v21 = 136315650;
        v22 = "AVVCRecordingEngine.mm";
        v23 = 1024;
        v24 = 872;
        v25 = 2080;
        v26 = v14;
        _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Attempt to stop on an %s stream.", (uint8_t *)&v21, 0x1Cu);
      }

      return 4294955515;
    case 2:
    case 3:
    case 6:
      if (kAVVCScope)
      {
        v4 = *(id *)kAVVCScope;
        if (!v4)
          return v4;
      }
      else
      {
        v4 = MEMORY[0x1E0C81028];
        v6 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_QWORD *)this + 28);
        if (v7 > 6)
          v8 = "ILLEGAL";
        else
          v8 = off_1E3BEC7D0[v7];
        v21 = 136315650;
        v22 = "AVVCRecordingEngine.mm";
        v23 = 1024;
        v24 = 879;
        v25 = 2080;
        v26 = v8;
        _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is already %s. No-op.", (uint8_t *)&v21, 0x1Cu);
      }

      return 0;
    case 4:
      if (kAVVCScope)
      {
        v9 = *(id *)kAVVCScope;
        if (!v9)
          goto LABEL_36;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
        v15 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v21 = 136315394;
        v22 = "AVVCRecordingEngine.mm";
        v23 = 1024;
        v24 = 893;
        _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is about to start. NotifyStartBeforeStop", (uint8_t *)&v21, 0x12u);
      }

LABEL_36:
      v11 = 1;
      *((_BYTE *)this + 80) = 1;
      goto LABEL_42;
    case 5:
      if (!*((_DWORD *)this + 58))
        goto LABEL_19;
      if (kAVVCScope)
      {
        v10 = *(id *)kAVVCScope;
        if (!v10)
          goto LABEL_41;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
        v16 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)this + 58);
        v21 = 136315650;
        v22 = "AVVCRecordingEngine.mm";
        v23 = 1024;
        v24 = 886;
        v25 = 1024;
        LODWORD(v26) = v17;
        _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: an error : %d  occurred while recording and we need to synthesize doneRecording", (uint8_t *)&v21, 0x18u);
      }

LABEL_41:
      v11 = 1;
LABEL_42:
      *((_BYTE *)this + 253) = a2;
      v4 = (*(uint64_t (**)(AVVCRecordingEngine *))(*(_QWORD *)this + 104))(this);
      if ((_DWORD)v4)
      {
        if (kAVVCScope)
        {
          v18 = *(id *)kAVVCScope;
          if (!v18)
          {
LABEL_52:
            AVVCRecordingEngine::setRecordErrorStatus(this, (int)v4, "stopRecord");
            goto LABEL_53;
          }
        }
        else
        {
          v18 = MEMORY[0x1E0C81028];
          v19 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v21 = 136315650;
          v22 = "AVVCRecordingEngine.mm";
          v23 = 1024;
          v24 = 908;
          v25 = 1024;
          LODWORD(v26) = (_DWORD)v4;
          _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Error stopping record engine: %d", (uint8_t *)&v21, 0x18u);
        }

        goto LABEL_52;
      }
      if (!v11)
        return 0;
LABEL_53:
      AVVCRecordingEngine::doneRecording(this);
      return v4;
    default:
LABEL_19:
      v11 = 0;
      goto LABEL_42;
  }
}

void AVVCRecordingEngine::doneRecording(AVVCRecordingEngine *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[8];
  _BYTE buf[40];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v25, "doneRecording");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v23, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN19AVVCRecordingEngine34serializedUpdateStreamStoppedStateEv_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_40_e5_v8__0l;
  *(_QWORD *)&buf[32] = v23;
  if (!AVVCRecordingEngine::if_running_then(v23, buf))
    goto LABEL_36;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 280))(v23);
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v2 = *(id *)kAVVCScope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AVVCRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 981;
          _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d doneRecording: resetting mRecordIsStopping and mRecordIsPrimed", buf, 0x12u);
        }

      }
    }
  }
  v4 = v23;
  *(_BYTE *)(v23 + 252) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = v23;
  v6 = *(_DWORD *)(v23 + 232);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(v23 + 232), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v23;
  }
  else
  {
    v7 = 0;
  }
  if (*(_BYTE *)(v5 + 80))
  {
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_19:
        v12 = *(_QWORD *)(v5 + 88);
        if (v12)
        {
          (*(void (**)(uint64_t, _QWORD, BOOL, _QWORD, void *))(v12 + 16))(v12, *(_QWORD *)(v5 + 272), v6 == 0, *(_QWORD *)(v5 + 224), v7);
          v5 = v23;
        }
        *(_BYTE *)(v5 + 80) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v8 = (id)MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    v10 = v8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = _Block_copy(*((const void **)this + 11));
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AVVCRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 993;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v11;
      *(_WORD *)&buf[28] = 2112;
      *(_QWORD *)&buf[30] = v7;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d doneRecording: calling mStartRecordCompletionBlock(%p) (notify start before stop). Error: %@", buf, 0x26u);

    }
    v5 = v23;
    goto LABEL_19;
  }
LABEL_22:
  if (!kAVVCScope)
  {
    v13 = (id)MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
    goto LABEL_26;
  }
  v13 = *(id *)kAVVCScope;
  if (v13)
  {
LABEL_26:
    v15 = v13;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = _Block_copy(*((const void **)this + 12));
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1000;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v16;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calling mStopRecordCompletionBlock(%p)", buf, 0x1Cu);

    }
    v5 = v23;
  }
  v17 = *(_QWORD *)(v5 + 96);
  if (v17)
  {
    (*(void (**)(uint64_t, _QWORD, BOOL, _QWORD, void *))(v17 + 16))(v17, *(_QWORD *)(v5 + 272), v6 == 0, *(_QWORD *)(v5 + 224), v7);
    v5 = v23;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 288))(v5);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 320))(v23) == 2)
  {
    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "resetAudioIssueDetector");

  }
  v19 = *(_QWORD *)(v23 + 112);
  if (v19)
  {
    (*(void (**)(void))(v19 + 16))();
    AVVCRecordingEngine::setDidStopDelegateCompletionBlock(v23, 0);
  }

LABEL_36:
  v20 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v25);
}

void sub_19B762C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceMethod::~TraceMethod((TraceMethod *)va1);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::startedRecording(AVVCRecordingEngine *this)
{
  int v2;
  void *v3;
  _QWORD *v4;
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[8];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v15, "startedRecording");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v13, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v2 = *(_DWORD *)(v13 + 232);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(v13 + 232), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    AVVCRecordingEngine::setStreamState(v13, 5);
    v3 = 0;
  }
  v4 = (_QWORD *)v13;
  *(_BYTE *)(v13 + 80) = 0;
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v5 = (id)MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = _Block_copy(*((const void **)this + 11));
    *(_DWORD *)buf = 136315650;
    v17 = "AVVCRecordingEngine.mm";
    v18 = 1024;
    v19 = 946;
    v20 = 2048;
    v21 = v8;
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calling completion block(%p)", buf, 0x1Cu);

  }
  v4 = (_QWORD *)v13;
LABEL_11:
  v9 = v4[11];
  if (v9)
  {
    (*(void (**)(uint64_t, _QWORD, BOOL, _QWORD, void *))(v9 + 16))(v9, v4[34], v2 == 0, v4[28], v3);
    v4 = (_QWORD *)v13;
  }
  (*(void (**)(_QWORD *))(*v4 + 288))(v4);

  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v15);
}

void sub_19B762EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceMethod::~TraceMethod((TraceMethod *)va1);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::checkForEndpoint(AVVCRecordingEngine *this, AudioQueueBuffer *a2, float *a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *((_QWORD *)this + 28);
  v5 = v4 == 6 || v4 <= 3;
  if (!v5 || *((_BYTE *)this + 253))
  {
    if (*((_QWORD *)this + 17))
    {
      (*(void (**)(AVVCRecordingEngine *, double))(*(_QWORD *)this + 184))(this, *((double *)this + 3));
      if ((*(unsigned int (**)(void))(*((_QWORD *)this + 17) + 16))())
      {
        AVVCRecordingEngine::setRecordErrorStatus(this, -11789, "checkForEndpoint");
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v17, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 3321888768;
        v15[2] = ___ZN19AVVCRecordingEngine16checkForEndpointEP16AudioQueueBufferPfj_block_invoke;
        v15[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
        v6 = v17;
        v15[4] = v17;
        v16 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v6 + 360))(v6, v15, "checkForEndpoint");
        v9 = v16;
        if (v16)
        {
          v10 = (unint64_t *)&v16->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v12 = v18;
        if (v18)
        {
          v13 = (unint64_t *)&v18->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
}

void sub_19B763060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN19AVVCRecordingEngine16checkForEndpointEP16AudioQueueBufferPfj_block_invoke(uint64_t a1)
{
  AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(*(_QWORD *)(a1 + 32) + 152));
}

uint64_t __copy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 32);
}

void AVVCRecordingEngine::stopRecordWithRecordLock(AVVCRecordingEngine *this)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    (*((void (**)(void))this + 2))();
    return;
  }
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "AVVCRecordingEngine.mm";
    v5 = 1024;
    v6 = 1056;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordWithRecordLockBlock is nil !", (uint8_t *)&v3, 0x12u);
  }

}

uint64_t AVVCRecordingEngine::reconfigureWithRecordLock(AVVCRecordingEngine *this)
{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (this)
    return (*((uint64_t (**)(AVVCRecordingEngine *, _QWORD))this + 2))(this, 0);
  if (!kAVVCScope)
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
    goto LABEL_7;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
  {
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "AVVCRecordingEngine.mm";
      v6 = 1024;
      v7 = 1080;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigureWithRecordLockBlock is nil !", (uint8_t *)&v4, 0x12u);
    }

  }
  return 0;
}

uint64_t AVVCRecordingEngine::getSessionProperties(AVVCRecordingEngine *this)
{
  void *v2;
  double v3;
  float v4;
  NSObject *v5;
  id v6;
  double v7;
  double v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  id v12;
  double v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _BOOL4 v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  double v28;
  AVVCRecordingEngine *v29;
  id v30;
  id v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  id v36;
  NSObject *v37;
  double v38;
  AVVCRecordingEngine *v39;
  AVVCRecordingEngine *v40;
  std::__shared_weak_count *v41;
  char v42[8];
  int v43;
  char v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  _BYTE v55[160];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v43 = 4100;
  v44 = 1;
  v45 = 0u;
  v46 = 0u;
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)v55, "getSessionProperties", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v42, "getSessionProperties");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v40, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)v40 + 64))(v40, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_GetPropertiesStart"));
  objc_msgSend(v2, "outputLatency");
  v4 = v3;
  if (v4 == 0.0)
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_9;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 1295;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: unexpected 0.0 value for output latency", buf, 0x12u);
    }

  }
LABEL_9:
  v7 = 0.0;
  if (MGGetSInt32Answer() == 4
    || (objc_msgSend(v2, "inputLatency"), *(float *)&v8 = v8, v7 = *(float *)&v8, *(float *)&v8 == 0.0))
  {
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_18;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 1300;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: working around bad input latency value for now", buf, 0x12u);
    }

  }
LABEL_18:
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_25;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v48 = "AVVCRecordingEngine.mm";
    v49 = 1024;
    v50 = 1302;
    v51 = 2048;
    v52 = v7;
    v53 = 2048;
    v54 = v4;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: input HW latency: %g output HW latency: %g", buf, 0x26u);
  }

LABEL_25:
  if (MGGetSInt32Answer() == 4)
  {
    v13 = 16000.0;
    if (MGGetSInt32Answer() != 4 || !MGGetBoolAnswer())
      goto LABEL_50;
  }
  if ((*(unsigned int (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 320))(v40) == 2)
  {
    objc_msgSend(v2, "speechDetectionDeviceSampleRate");
    v13 = v14;
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
        goto LABEL_42;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 1310;
      v51 = 2048;
      v52 = v13;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: input HW sampling rate %lf", buf, 0x1Cu);
    }

LABEL_42:
    if (v13 == 0.0)
      goto LABEL_43;
    goto LABEL_50;
  }
  if ((*(unsigned int (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 320))(v40) != 1
    && (*(unsigned int (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 320))(v40) != 3
    && (*(unsigned int (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 320))(v40) != 4)
  {
LABEL_43:
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_61:
        v20 = 4294955511;
        goto LABEL_80;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 1324;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d getSessionProperties: Error getting input hardware sample rate", buf, 0x12u);
    }

    goto LABEL_61;
  }
  v13 = 16000.0;
  (*(void (**)(AVVCRecordingEngine *, double))(*(_QWORD *)v40 + 40))(v40, 16000.0);
  if (kAVVCScope)
  {
    v16 = *(id *)kAVVCScope;
    if (!v16)
      goto LABEL_50;
  }
  else
  {
    v16 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v48 = "AVVCRecordingEngine.mm";
    v49 = 1024;
    v50 = 1321;
    v51 = 2048;
    v52 = 16000.0;
    _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: plugin mode - resetting to default HW sampling rate %lf", buf, 0x1Cu);
  }

LABEL_50:
  v20 = (*(uint64_t (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 72))(v40);
  if (!(_DWORD)v20)
  {
    v21 = (*(double (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 48))(v40);
    v22 = *(_QWORD *)v40;
    if (v21 == 0.0)
    {
      (*(void (**)(double))(v22 + 40))(v13);
      v20 = 0;
      v23 = (*(double (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 48))(v40) > 8000.0;
      *((_QWORD *)v40 + 3) = qword_19B85A1D0[v23];
LABEL_79:
      ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_GetPropertiesEnd"));
      goto LABEL_80;
    }
    if (v13 == (*(double (**)(void))(v22 + 48))())
    {
      if (kAVVCScope)
      {
        v20 = (uint64_t)*(id *)kAVVCScope;
        if (!v20)
          goto LABEL_79;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
        v31 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v48 = "AVVCRecordingEngine.mm";
        v49 = 1024;
        v50 = 1369;
        _os_log_impl(&dword_19B733000, (os_log_t)v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties: no change to HW rate or route -- nothing to do here", buf, 0x12u);
      }

      goto LABEL_78;
    }
    if (kAVVCScope)
    {
      v24 = *(id *)kAVVCScope;
      if (!v24)
        goto LABEL_69;
    }
    else
    {
      v24 = (id)MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    v27 = v24;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v28 = (*(double (**)(AVVCRecordingEngine *))(*(_QWORD *)v40 + 48))(v40);
      *(_DWORD *)buf = 136315906;
      v48 = "AVVCRecordingEngine.mm";
      v49 = 1024;
      v50 = 1350;
      v51 = 2048;
      v52 = v28;
      v53 = 2048;
      v54 = v13;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: Input sample rate changed from %f to %f", buf, 0x26u);
    }

LABEL_69:
    (*(void (**)(AVVCRecordingEngine *, double))(*(_QWORD *)v40 + 40))(v40, v13);
    v29 = v40;
    if ((*((_QWORD *)v40 + 28) & 0xFFFFFFFFFFFFFFFELL) == 4 && *((_QWORD *)v40 + 42) != 2)
    {
      if (kAVVCScope)
      {
        v30 = *(id *)kAVVCScope;
        if (!v30)
        {
LABEL_90:
          AVVCRecordingEngine::setRecordErrorStatus(v29, -11787, "getSessionProperties");
          AVVCRecordingEngine::stopRecordWithRecordLock(*((AVVCRecordingEngine **)v40 + 19));
          v39 = v40;
          *((_QWORD *)v40 + 3) = qword_19B85A1D0[v13 > 8000.0];
          v20 = AVVCRecordingEngine::reconfigureWithRecordLock(*((AVVCRecordingEngine **)v39 + 20));
          goto LABEL_79;
        }
      }
      else
      {
        v30 = (id)MEMORY[0x1E0C81028];
        v36 = MEMORY[0x1E0C81028];
      }
      v37 = v30;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = (*(double (**)(AVVCRecordingEngine *))(*(_QWORD *)v29 + 48))(v29);
        *(_DWORD *)buf = 136315906;
        v48 = "AVVCRecordingEngine.mm";
        v49 = 1024;
        v50 = 1359;
        v51 = 2048;
        v52 = v38;
        v53 = 2048;
        v54 = v13;
        _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: sample rate changed from %f to %f - while record is active -- stopping and reconfiguring audio", buf, 0x26u);
      }

      v29 = v40;
      goto LABEL_90;
    }
LABEL_78:
    v20 = 0;
    goto LABEL_79;
  }
LABEL_80:

  v32 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v42);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v55);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v43);
  return v20;
}

void sub_19B763BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  TraceMethod::~TraceMethod((TraceMethod *)&a11);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a23);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setSessionActive(AVVCRecordingEngine *this, uint64_t a2, BOOL *a3)
{
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t SessionProperties;
  id v11;
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  char v16;
  NSObject *v17;
  id v18;
  unsigned int v19;
  const char *v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  NSObject *v43;
  char *v44;
  void *v45;
  id v46;
  AVVCRecordingEngine *v47;
  std::__shared_weak_count *v48;
  char v49[8];
  int v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  const char *v59;
  _BYTE v60[160];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v50 = 4099;
  v51 = 1;
  v52 = 0u;
  v53 = 0u;
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)v60, "setSessionActive", "setSessionActive", 0);
  TraceMethod::TraceMethod((TraceMethod *)v49, "setSessionActive");
  *a3 = 0;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v47, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)v47 + 64))(v47, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "sessionState");
  if (!v7)
  {
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
      {
        SessionProperties = 4294955515;
        goto LABEL_78;
      }
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v55 = "AVVCRecordingEngine.mm";
      v56 = 1024;
      v57 = 1465;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive: Error! Attemtping to activate a session that is not configured", buf, 0x12u);
    }
    SessionProperties = 4294955515;
LABEL_50:

    v9 = 0;
    goto LABEL_78;
  }
  if (v7 > 4)
  {
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
      {
        v9 = 0;
        SessionProperties = 0;
        goto LABEL_78;
      }
    }
    else
    {
      v11 = (id)MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    v9 = v11;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = objc_msgSend(v6, "sessionState");
      if (v19 > 7)
        v20 = "ILLEGAL";
      else
        v20 = off_1E3BEC8F0[v19];
      *(_DWORD *)buf = 136315650;
      v55 = "AVVCRecordingEngine.mm";
      v56 = 1024;
      v57 = 1547;
      v58 = 2080;
      v59 = v20;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSessionActive(true): session state already %s -- no-op", buf, 0x1Cu);
    }

    SessionProperties = 0;
    goto LABEL_50;
  }
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_22;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "Activating";
    v55 = "AVVCRecordingEngine.mm";
    *(_DWORD *)buf = 136315650;
    if ((_DWORD)a2)
      v14 = "Prewarming";
    v56 = 1024;
    v57 = 1471;
    v58 = 2080;
    v59 = v14;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s session ####", buf, 0x1Cu);
  }

LABEL_22:
  v15 = *((_QWORD *)this + 23);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v15, 1);
  v46 = 0;
  v16 = objc_msgSend(v6, "activateAudioSessionWithPrewarm:error:", a2, &v46);
  v9 = v46;
  SessionProperties = -[NSObject code](v9, "code");
  *a3 = v16 ^ 1;
  if (kAVVCScope)
  {
    v17 = *(id *)kAVVCScope;
    if (!v17)
      goto LABEL_35;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v55 = "AVVCRecordingEngine.mm";
    v56 = 1024;
    v57 = 1481;
    _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSessionActive(true): AVAudioSession:setActive has returned", buf, 0x12u);
  }

LABEL_35:
  if ((_DWORD)SessionProperties)
    goto LABEL_63;
  if (objc_msgSend(v6, "forceGetSessionProperties"))
  {
    objc_msgSend(v6, "setForceGetSessionProperties:", 0);
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
      {
        v22 = *(id *)kAVVCScope;
        if (v22)
        {
          v23 = v22;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v55 = "AVVCRecordingEngine.mm";
            v56 = 1024;
            v57 = 1493;
            _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d setSessionActive(true): force of getSessionProperties requested", buf, 0x12u);
          }

        }
      }
    }
    SessionProperties = AVVCRecordingEngine::getSessionProperties(v47);
    if (!(_DWORD)SessionProperties)
      goto LABEL_76;
    if (kAVVCScope)
    {
      v24 = *(id *)kAVVCScope;
      if (!v24)
        goto LABEL_63;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v55 = "AVVCRecordingEngine.mm";
      v56 = 1024;
      v57 = 1495;
      v58 = 1024;
      LODWORD(v59) = SessionProperties;
      _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive(true): force of getSessionProperties requested - returned error : %d", buf, 0x18u);
    }

  }
  else
  {
    v25 = *((_QWORD *)v47 + 47);
    v45 = 0;
    AVVCRouteManager::getRecordRoute(v25, &v45);
    SessionProperties = (*(uint64_t (**)(AVVCRecordingEngine *))(*(_QWORD *)v47 + 72))(v47);
    v44 = 0;
    AVVCRouteManager::getRecordRoute(v25, (void **)&v44);
    v27 = v44;
    v26 = v45;
    if (!(_DWORD)SessionProperties)
    {
      if ((objc_msgSend(v44, "isEqualToString:", v45) & 1) != 0)
      {
        SessionProperties = 0;
      }
      else
      {
        CALog::LogObjIfEnabled(5, kAVVCScope);
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = v29;
        if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          v55 = "AVVCRecordingEngine.mm";
          v56 = 1024;
          v57 = 1514;
          v58 = 2112;
          v59 = v27;
          _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d setSessionActive(true): Route change when we went active: %@ -- getting properties", buf, 0x1Cu);
        }

        SessionProperties = AVVCRecordingEngine::getSessionProperties(v47);
      }
    }

  }
LABEL_63:
  if ((_DWORD)SessionProperties != -11795)
  {
    if ((_DWORD)SessionProperties == 561017449)
    {
      v31 = (void *)MEMORY[0x1A1AC6084]();
      objc_msgSend(v6, "getActiveSessionDisplayIDsAsString");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "logSessionMetric:value:category:type:reporterID:", CFSTR("avvcActiveHigherPriorityProcessName"), v32, 1, 6, objc_msgSend(v6, "reporterID"));

      objc_autoreleasePoolPop(v31);
      SessionProperties = 561017449;
    }
    goto LABEL_76;
  }
  if (!(_DWORD)a2)
  {
    SessionProperties = 4294955501;
    goto LABEL_76;
  }
  if (!kAVVCScope)
  {
    v34 = MEMORY[0x1E0C81028];
    v35 = MEMORY[0x1E0C81028];
    goto LABEL_72;
  }
  v34 = *(id *)kAVVCScope;
  if (v34)
  {
LABEL_72:
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v55 = "AVVCRecordingEngine.mm";
      v56 = 1024;
      v57 = 1532;
      v58 = 1024;
      LODWORD(v59) = -11795;
      _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive(false): Deactivating session due to error: %d", buf, 0x18u);
    }

  }
  v43 = v9;
  objc_msgSend(v6, "deactivateAudioSessionWithOptions:error:", 0x2000, &v43);
  v36 = v43;

  SessionProperties = 4294955501;
  v9 = v36;
LABEL_76:
  v37 = objc_msgSend(v6, "sessionState");
  v38 = *((_QWORD *)this + 24);
  if (v38)
    (*(void (**)(uint64_t, BOOL))(v38 + 16))(v38, v37 == 7);
LABEL_78:

  v39 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  TraceMethod::~TraceMethod((TraceMethod *)v49);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v60);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v50);
  return SessionProperties;
}

void sub_19B76444C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  TraceMethod::~TraceMethod((TraceMethod *)&a15);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a17);
  _Unwind_Resume(a1);
}

id CALog::LogObjIfEnabled(int a1, uint64_t a2)
{
  id v2;
  id v3;

  if (a1 >= 6)
  {
    if (!a2 || (*(_BYTE *)(a2 + 8) & 1) == 0)
    {
      v2 = 0;
      return v2;
    }
LABEL_7:
    v2 = *(id *)a2;
    return v2;
  }
  if (a2)
    goto LABEL_7;
  v2 = (id)MEMORY[0x1E0C81028];
  v3 = MEMORY[0x1E0C81028];
  return v2;
}

NSObject *AVVCRecordingEngine::canStartKeepAliveQueue(AVVCRecordingEngine *this)
{
  NSObject *result;
  NSObject *v3;
  void *v4;
  int v5;
  uint64_t v6;
  id v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    if (kAVVCScope)
    {
      result = *(id *)kAVVCScope;
      v3 = result;
      if (!result)
        return result;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315394;
      v10 = "AVVCRecordingEngine.mm";
      v11 = 1024;
      v12 = 1561;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d canStartKeepAliveQueue: KeepAliveQueue not available on darwinos", (uint8_t *)&v9, 0x12u);
    }

    return 0;
  }
  else
  {
    (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "sessionState");

    v6 = *((_QWORD *)this + 28);
    LODWORD(result) = AVVCRouteManager::isOutputHandsFree(*((id **)this + 47));
    if (v5 == 7 && v6 == 5)
      return result;
    else
      return 0;
  }
}

void sub_19B7646B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7647B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B764844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7648C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7649A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B764A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B764AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B764B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B764BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B764C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CADeprecated::XMachPortServicer::DispatchImpl::~DispatchImpl(CADeprecated::XMachPortServicer::DispatchImpl *this)
{
  CADeprecated::XMachPortServicer::DispatchImpl::~DispatchImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[5];

  *(_QWORD *)this = &off_1E3BE99C8;
  v2 = *((_QWORD *)this + 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN12CADeprecated17XMachPortServicer12DispatchImplD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  block[4] = this;
  dispatch_sync(v2, block);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    dispatch_release(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    dispatch_release(v4);
}

void ___ZN12CADeprecated17XMachPortServicer12DispatchImplD2Ev_block_invoke(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 16));
}

unsigned int *CADeprecated::XMachReceivePort::SetMachPort(unsigned int *this)
{
  mach_port_name_t v1;
  ipc_space_t *v2;

  do
    v1 = __ldaxr(this);
  while (__stlxr(0, this));
  if (v1)
  {
    v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v1, 1u, -1);
    return (unsigned int *)mach_port_deallocate(*v2, v1);
  }
  return this;
}

void CADeprecated::XMachReceivePort::~XMachReceivePort(CADeprecated::XMachReceivePort *this)
{
  atomic_load((unsigned int *)this);
  CADeprecated::XMachReceivePort::SetMachPort((unsigned int *)this);
}

void AVAudioMixingImpl::~AVAudioMixingImpl(AVAudioMixingImpl *this)
{
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AVAudioMixingImpl::IsConnectedToMixer(AVAudioMixingImpl *this, AVAudioNode *a2)
{
  return 0;
}

uint64_t AVAudioMixingImpl::GetMixerConnectionPoint(AVAudioMixingImpl *this)
{
  return 0;
}

BOOL AVAudioMixingImpl::SetGain(AVAudioMixingImpl *this, float a2)
{
  float var2;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = 0.0;
  var2 = this->var2;
  if (var2 != a2)
  {
    v3 = 100000.0;
    if (a2 < 100000.0)
      v3 = a2;
    if (a2 <= 0.0)
      v3 = 0.0;
    this->var2 = v3;
  }
  return var2 != a2;
}

BOOL AVAudioMixingImpl::SetPan(AVAudioMixingImpl *this, float a2)
{
  float var3;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = -1.0;
  var3 = this->var3;
  if (var3 != a2)
  {
    v3 = 1.0;
    if (a2 < 1.0)
      v3 = a2;
    if (a2 <= -1.0)
      v3 = -1.0;
    this->var3 = v3;
  }
  return var3 != a2;
}

uint64_t AVAudioMixingImpl::SetRenderingAlgorithm(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 >= 8 || this->var4 == a2;
  v3 = !v2;
  if (!v2)
    this->var4 = a2;
  return v3;
}

uint64_t AVAudioMixingImpl::SetSourceMode(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 >= 4 || this->var5 == a2;
  v3 = !v2;
  if (!v2)
    this->var5 = a2;
  return v3;
}

uint64_t AVAudioMixingImpl::SetPointSourceInHeadMode(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 >= 2 || this->var6 == a2;
  v3 = !v2;
  if (!v2)
    this->var6 = a2;
  return v3;
}

BOOL AVAudioMixingImpl::SetRate(AVAudioMixingImpl *this, float a2)
{
  float var7;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = 0.5;
  var7 = this->var7;
  if (var7 != a2)
  {
    v3 = 2.0;
    if (a2 < 2.0)
      v3 = a2;
    if (a2 <= 0.5)
      v3 = 0.5;
    this->var7 = v3;
  }
  return var7 != a2;
}

BOOL AVAudioMixingImpl::SetReverbBlend(AVAudioMixingImpl *this, float a2)
{
  float var8;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = 0.0;
  var8 = this->var8;
  if (var8 != a2)
  {
    v3 = 1.0;
    if (a2 < 1.0)
      v3 = a2;
    if (a2 <= 0.0)
      v3 = 0.0;
    this->var8 = v3;
  }
  return var8 != a2;
}

uint64_t AVAudioMixingImpl::SetPosition(AVAudioMixingImpl *this, AVAudio3DPoint a2)
{
  if (this->var9.x == a2.x && this->var9.y == a2.y && this->var9.z == a2.z)
    return 0;
  this->var9 = a2;
  return 1;
}

BOOL AVAudioMixingImpl::SetObstruction(AVAudioMixingImpl *this, float a2)
{
  float var10;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = -100.0;
  var10 = this->var10;
  if (var10 != a2)
  {
    v3 = 0.0;
    if (a2 < 0.0)
      v3 = a2;
    if (a2 <= -100.0)
      v3 = -100.0;
    this->var10 = v3;
  }
  return var10 != a2;
}

BOOL AVAudioMixingImpl::SetOcclusion(AVAudioMixingImpl *this, float a2)
{
  float var11;
  float v3;

  if (fabsf(a2) == INFINITY)
    a2 = -100.0;
  var11 = this->var11;
  if (var11 != a2)
  {
    v3 = 0.0;
    if (a2 < 0.0)
      v3 = a2;
    if (a2 <= -100.0)
      v3 = -100.0;
    this->var11 = v3;
  }
  return var11 != a2;
}

void sub_19B765420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F0C4015DEEB49);
  _Unwind_Resume(a1);
}

void sub_19B765478(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19B765470);
}

void sub_19B7654BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19B7654B4);
}

void sub_19B76550C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19B765500);
}

void sub_19B765548(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_19B765580(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_19B7655CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19B7655B4);
}

void sub_19B765DE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19B765F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

double AudioPlayerImpl_GetProperty<double>(AVAudioPlayerCpp *a1, int a2, _QWORD *a3)
{
  double result;
  unint64_t v5;
  void *v6;

  v5 = 0;
  v6 = 0;
  if (!AVAudioPlayerCpp::GetProperty(a1, a2, &v5, (const void **)&v6) && v5 == 8)
  {
    result = *(double *)v6;
    *a3 = *(_QWORD *)v6;
  }
  return result;
}

void LocalPlayerHandleCallback(AVAudioPlayer *a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  id v12;

  if (a2 > 1685024356)
  {
    if (a2 != 1685024357)
    {
      if (a2 != 1701408372)
      {
        if (a2 == 1953723244)
          tryToSetPlayerSessionListener(a1);
        return;
      }
      v9 = (void *)MEMORY[0x1A1AC6084]();
      if (-[AVAudioPlayer delegate](a1, "delegate"))
      {
        if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
        {
          if (a3 == 8)
          {
            v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)a4);
            -[AVAudioPlayer performSelectorOnMainThread:withObject:waitUntilDone:](a1, "performSelectorOnMainThread:withObject:waitUntilDone:", sel_endInterruptionWithFlags_, v10, 0);

          }
          goto LABEL_22;
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v11 = sel_endInterruption;
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
    if (a3 != 1)
      return;
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", *(_BYTE *)a4 & 1);
    v12 = (id)v7;
    v8 = sel_finishedPlaying_;
LABEL_12:
    -[AVAudioPlayer performSelectorOnMainThread:withObject:waitUntilDone:](a1, "performSelectorOnMainThread:withObject:waitUntilDone:", v8, v7, 0);

    return;
  }
  if (a2 == 1651076724)
  {
    v9 = (void *)MEMORY[0x1A1AC6084]();
    -[AVAudioPlayer delegate](a1, "delegate");
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v11 = sel_beginInterruption;
LABEL_21:
      -[AVAudioPlayer performSelectorOnMainThread:withObject:waitUntilDone:](a1, "performSelectorOnMainThread:withObject:waitUntilDone:", v11, 0, 0);
    }
LABEL_22:
    objc_autoreleasePoolPop(v9);
    return;
  }
  if (a2 == 1684370034 && a3 == 4)
  {
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", *a4);
    v12 = (id)v7;
    v8 = sel_decodeError_;
    goto LABEL_12;
  }
}

uint64_t FileTypeConstant(NSString *a1)
{
  id v2;
  uint64_t v3;
  uint64_t *v4;

  if (gAVFDylib)
  {
    v2 = (id)gFileTypeNames;
  }
  else
  {
    gAVFDylib = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 1);
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    gFileTypeNames = (uint64_t)v2;
  }
  v3 = objc_msgSend(v2, "objectForKey:", a1);
  if (!v3)
  {
    v4 = (uint64_t *)dlsym((void *)gAVFDylib, -[NSString UTF8String](a1, "UTF8String"));
    v3 = *v4;
    objc_msgSend((id)gFileTypeNames, "setObject:forKey:", *v4, a1);
  }
  return v3;
}

void sub_19B7665EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

void sub_19B766950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7669E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B766ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B767144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B767450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B767898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B76803C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1241(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1242(uint64_t a1)
{

}

void sub_19B7680C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B768634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL contextIsRemora(AVVCContextSettings *a1)
{
  AVVCContextSettings *v1;
  AVVCContextSettings *v2;
  _BOOL8 v3;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = -[AVVCContextSettings activationMode](v1, "activationMode") == 1919776372
      || -[AVVCContextSettings activationMode](v2, "activationMode") == 1919771248;
  else
    v3 = 0;

  return v3;
}

void sub_19B768750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B768858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B768964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B768AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B768E70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B768F20(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B76927C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7692E4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B76937C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7693F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769494(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7694F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769584(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769648(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7696DC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769758(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B7697B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769880(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769970(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769CD8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769DC8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769E48(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B769F10(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B76A0E8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t closeFile(uint64_t result, AudioRecorderImpl *a2)
{
  uint64_t v2;
  void *v3;
  UInt32 outDataSize;

  if (*(_QWORD *)(result + 104))
  {
    v2 = result;
    outDataSize = 0;
    if (!AudioQueueGetPropertySize(*(AudioQueueRef *)(result + 112), 0x61716D63u, &outDataSize))
    {
      v3 = malloc_type_malloc(outDataSize, 0x49E54769uLL);
      if (!AudioQueueGetProperty(*(AudioQueueRef *)(v2 + 112), 0x61716D63u, v3, &outDataSize))
        AudioFileSetProperty(*(AudioFileID *)(v2 + 104), 0x6D676963u, outDataSize, v3);
      free(v3);
    }
    result = AudioFileClose(*(AudioFileID *)(v2 + 104));
    *(_QWORD *)(v2 + 104) = 0;
  }
  return result;
}

uint64_t stopAndDisposeRecordQueue(AVAudioRecorder *a1, AudioRecorderImpl *a2)
{
  uint64_t result;
  int v4;
  AudioRecorderImpl *v5;

  if (!a1[7].super.isa || BYTE3(a1[11]._impl))
    return 0;
  v4 = (int)a2;
  BYTE3(a1[11]._impl) = 1;
  __dmb(0xBu);
  AudioQueueStop(a1[7].super.isa, 1u);
  if (v4)
    closeFile((uint64_t)a1, v5);
  AudioQueueDispose(a1[7].super.isa, 0);
  a1[7].super.isa = 0;
  a1[9].super.isa = 0;
  a1[9]._impl = 0;
  LODWORD(a1[11]._impl) = 0;
  result = 1;
  __dmb(0xBu);
  return result;
}

uint64_t tryToSetRecorderSessionListener(uint64_t result, AudioRecorderImpl *a2)
{
  uint64_t v3;
  void *v4;

  if (!a2->var30)
  {
    v3 = result;
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      result = objc_msgSend(v4, "addObserver:selector:name:object:", v3, sel_handleInterruption_, *MEMORY[0x1E0CFF000], a2->var33);
      a2->var30 = 1;
    }
  }
  return result;
}

void makeChannelAssignments(AudioRecorderImpl *a1)
{
  id var6;
  uint64_t v3;
  uint64_t v4;
  UInt32 v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;

  if (a1->var10)
  {
    var6 = a1->var6;
    if (var6)
    {
      v3 = objc_msgSend(var6, "count");
      if (v3)
      {
        v4 = v3;
        v5 = 16 * v3;
        v6 = malloc_type_malloc(16 * v3, 0x7A73535BuLL);
        v7 = 0;
        v8 = v6 + 2;
        do
        {
          v9 = (void *)objc_msgSend(a1->var6, "objectAtIndex:", v7);
          *((_QWORD *)v8 - 1) = objc_msgSend(v9, "owningPortUID");
          *v8 = objc_msgSend(v9, "channelNumber");
          v8 += 4;
          ++v7;
        }
        while (v4 != v7);
        AudioQueueSetProperty(a1->var10, 0x61716361u, v6, v5);
        free(v6);
      }
    }
  }
}

uint64_t recordQueue(AVAudioRecorder *a1, AudioFileID *a2, double a3, const AudioTimeStamp *a4)
{
  uint64_t result;
  double v8;
  int64_t v9;
  UInt32 v10;
  UInt32 v11;
  uint64_t v12;
  AudioQueueBuffer **v13;
  UInt32 ioDataSize;
  unsigned int outData;

  if (*((_BYTE *)a2 + 186))
    return 0;
  result = prepareToRecordQueue(a1, a2);
  if (!(_DWORD)result)
  {
    *(_WORD *)((char *)a2 + 185) = 257;
    if (a3 <= 0.0)
    {
      v9 = 0;
    }
    else
    {
      LODWORD(v8) = *((_DWORD *)a2 + 21);
      v8 = (double)*(unint64_t *)&v8;
      v9 = vcvtpd_s64_f64(*((double *)a2 + 8) / v8 * a3);
    }
    a2[17] = (AudioFileID)v9;
    v10 = *((_DWORD *)a2 + 20);
    if (v10)
    {
      LODWORD(v8) = *((_DWORD *)a2 + 21);
      v11 = v10 * vcvtpd_u64_f64(*((double *)a2 + 8) / (double)*(unint64_t *)&v8 * 0.333);
    }
    else
    {
      ioDataSize = 4;
      outData = 0;
      if (AudioQueueGetProperty(a2[14], 0x786F7073u, &outData, &ioDataSize))
      {
        v11 = 0x10000;
      }
      else if (outData > 0x10000)
      {
        v11 = (outData + 63) & 0xFFFFFFC0;
      }
      else
      {
        v11 = 0x10000;
      }
    }
    v12 = 0;
    v13 = (AudioQueueBuffer **)(a2 + 25);
    while (1)
    {
      result = AudioQueueAllocateBuffer(a2[14], v11, &v13[v12]);
      if ((_DWORD)result)
        break;
      AudioQueueEnqueueBuffer(a2[14], v13[v12++], 0, 0);
      if (v12 == 4)
      {
        result = AudioQueueStart(a2[14], a4);
        if ((_DWORD)result)
          *(_WORD *)((char *)a2 + 185) = 0;
        return result;
      }
    }
  }
  return result;
}

uint64_t prepareToRecordQueue(AVAudioRecorder *a1, AudioFileID *outAudioFile)
{
  uint64_t Property;
  AudioQueueRef *v5;
  NSDictionary *v6;
  uint64_t v7;
  void *v8;
  int v9;
  OpaqueAudioQueue *v10;
  id v11;
  OpaqueAudioQueue *v12;
  int v13;
  void *v15;
  void *v16;
  NSString *v17;
  OpaqueAudioQueue *v18;
  uint64_t v19;
  void *v20;
  int v21;
  OpaqueAudioQueue *v22;
  int v23;
  OpaqueAudioQueue *v24;
  uint64_t v25;
  void *v26;
  int v27;
  OpaqueAudioQueue *v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  int v32;
  OpaqueAudioQueue *v33;
  unsigned int v34;
  OpaqueAudioQueue *v35;
  id v36;
  OpaqueAudioQueue *v37;
  id v38;
  OpaqueAudioQueue *v39;
  id v40;
  OpaqueAudioQueue *v41;
  id v42;
  id v43;
  void *v44;
  AudioFileID v45;
  unint64_t v46;
  uint64_t v47;
  AudioFileID v48;
  unsigned int v49;
  UInt32 outDataSize;
  UInt32 ioDataSize[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString *inData[33];

  inData[32] = *(NSString **)MEMORY[0x1E0C80C00];
  if (*((_BYTE *)outAudioFile + 184))
    return 0;
  v5 = outAudioFile + 14;
  if (!outAudioFile[14])
  {
    inData[0] = 0;
    if ((-[OpaqueAudioFileID setActive:error:](outAudioFile[31], "setActive:error:", 1, inData) & 1) != 0)
    {
      Property = asbdFromSettingsAndFileType2((NSDictionary *)outAudioFile[2], (NSArray *)outAudioFile[6], *((_DWORD *)outAudioFile + 14), (AudioStreamBasicDescription *)(outAudioFile + 8));
      if ((_DWORD)Property)
        return Property;
      -[OpaqueAudioFileID opaqueSessionID](outAudioFile[31], "opaqueSessionID");
      Property = AudioQueueNewInputWithAudioSession();
      if ((_DWORD)Property)
        return Property;
      if (*((_DWORD *)outAudioFile + 61))
        AudioQueueSetProperty(*v5, 0x71747070u, (char *)outAudioFile + 244, 4u);
      makeChannelAssignments((AudioRecorderImpl *)outAudioFile);
      ioDataSize[0] = 40;
      Property = AudioQueueGetProperty(outAudioFile[14], 0x61716674u, outAudioFile + 8, ioDataSize);
      if (*((_BYTE *)outAudioFile + 190))
      {
        outDataSize = 1;
        AudioQueueSetProperty(*v5, 0x61716D65u, &outDataSize, 4u);
      }
      if (*((_BYTE *)outAudioFile + 191))
      {
        outDataSize = 1;
        AudioQueueSetProperty(*v5, 0x71696E6Du, &outDataSize, 4u);
      }
      v15 = (void *)-[OpaqueAudioFileID objectForKey:](outAudioFile[2], "objectForKey:", CFSTR("AVChannelLayoutKey"));
      if (v15)
        AudioQueueSetProperty(*v5, 0x6171636Cu, (const void *)objc_msgSend(v15, "bytes"), objc_msgSend(v15, "length"));
      tryToSetRecorderSessionListener((uint64_t)a1, (AudioRecorderImpl *)outAudioFile);
    }
    else
    {
      Property = -[NSString code](inData[0], "code");
    }
    if ((_DWORD)Property)
      return Property;
  }
  if (!outAudioFile[13])
  {
    Property = AudioFileCreateWithURL(outAudioFile[5], *((_DWORD *)outAudioFile + 14), (const AudioStreamBasicDescription *)(outAudioFile + 8), 1u, outAudioFile + 13);
    if ((_DWORD)Property)
      return Property;
    *((_BYTE *)outAudioFile + 189) = 1;
    v16 = (void *)-[OpaqueAudioFileID objectForKey:](outAudioFile[2], "objectForKey:", CFSTR("AVChannelLayoutKey"));
    if (v16)
    {
      Property = AudioFileSetProperty(outAudioFile[13], 0x636D6170u, objc_msgSend(v16, "length"), (const void *)objc_msgSend(v16, "bytes"));
      if ((_DWORD)Property)
        return Property;
    }
  }
  v6 = (NSDictionary *)outAudioFile[2];
  if (v6 && *v5)
  {
    v7 = -[OpaqueAudioFileID objectForKey:](outAudioFile[2], "objectForKey:", CFSTR("AVSampleRateConverterQualityKey"));
    if (v7)
    {
      v8 = (void *)v7;
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v9 = objc_msgSend(v8, "unsignedIntegerValue");
        v10 = *v5;
        LODWORD(inData[0]) = v9;
        AudioQueueSetProperty(v10, 0x73726371u, inData, 4u);
      }
    }
    *(_QWORD *)ioDataSize = 0;
    if (getStringForKey(v6, CFSTR("AVSampleRateConverterAlgorithmKey"), (NSString **)ioDataSize, (int *)&outDataSize))
    {
      v11 = *(id *)ioDataSize;
      if (objc_msgSend(*(id *)ioDataSize, "compare:", CFSTR("AVSampleRateConverterAlgorithm_Mastering")))
      {
        if (objc_msgSend(v11, "compare:", CFSTR("AVSampleRateConverterAlgorithm_Normal")))
        {
          if (objc_msgSend(v11, "compare:", CFSTR("AVSampleRateConverterAlgorithm_MinimumPhase")))
            goto LABEL_38;
          v12 = *v5;
          v13 = 1835626096;
        }
        else
        {
          v12 = *v5;
          v13 = 1852797549;
        }
      }
      else
      {
        v12 = *v5;
        v13 = 1650553971;
      }
      LODWORD(inData[0]) = v13;
      AudioQueueSetProperty(v12, 0x73726361u, inData, 4u);
    }
LABEL_38:
    inData[0] = 0;
    if (!getStringForKey(v6, CFSTR("AVEncoderBitRateStrategyKey"), inData, (int *)&outDataSize))
      goto LABEL_50;
    v17 = inData[0];
    if (-[NSString compare:](inData[0], "compare:", CFSTR("AVAudioBitRateStrategy_Constant")))
    {
      if (-[NSString compare:](v17, "compare:", CFSTR("AVAudioBitRateStrategy_LongTermAverage")))
      {
        if (-[NSString compare:](v17, "compare:", CFSTR("AVAudioBitRateStrategy_VariableConstrained")))
        {
          if (-[NSString compare:](v17, "compare:", CFSTR("AVAudioBitRateStrategy_Variable")) == NSOrderedSame)
          {
            v18 = *v5;
            LODWORD(inData[0]) = 3;
            AudioQueueSetProperty(v18, 0x61636266u, inData, 4u);
            v19 = -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("AVEncoderQualityForVBRKey"));
            if (v19)
            {
              v20 = (void *)v19;
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                v21 = objc_msgSend(v20, "unsignedIntegerValue");
                v22 = *v5;
                LODWORD(inData[0]) = v21;
                AudioQueueSetProperty(v22, 0x76627271u, inData, 4u);
              }
            }
LABEL_51:
            Property = 4294900621;
            v25 = -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("AVEncoderQualityKey"));
            if (v25)
            {
              v26 = (void *)v25;
              if ((objc_opt_respondsToSelector() & 1) == 0)
                return Property;
              v27 = objc_msgSend(v26, "unsignedIntegerValue");
              v28 = *v5;
              LODWORD(inData[0]) = v27;
              AudioQueueSetProperty(v28, 0x63647175u, inData, 4u);
            }
            v29 = -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("AVEncoderBitDepthHintKey"));
            if (v29)
            {
              v30 = (void *)v29;
              if ((objc_opt_respondsToSelector() & 1) == 0)
                return Property;
              v31 = objc_msgSend(v30, "unsignedIntegerValue");
              if (v31 >= 0x40)
                v32 = 64;
              else
                v32 = v31;
              v33 = *v5;
              LODWORD(inData[0]) = v32;
              AudioQueueSetProperty(v33, 0x61636264u, inData, 4u);
            }
            goto LABEL_60;
          }
LABEL_50:
          Property = setBitRate((AudioRecorderImpl *)outAudioFile);
          if ((_DWORD)Property)
            return Property;
          goto LABEL_51;
        }
        v23 = 2;
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = outAudioFile[14];
    LODWORD(inData[0]) = v23;
    AudioQueueSetProperty(v24, 0x61636266u, inData, 4u);
    goto LABEL_50;
  }
LABEL_60:
  outAudioFile[15] = 0;
  outAudioFile[16] = 0;
  outAudioFile[17] = 0;
  *((_BYTE *)outAudioFile + 184) = 1;
  *((_BYTE *)outAudioFile + 188) = 1;
  inData[0] = (NSString *)CFSTR("AVFormatIDKey");
  *(_QWORD *)ioDataSize = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)outAudioFile + 18));
  inData[1] = (NSString *)CFSTR("AVSampleRateKey");
  v52 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *((double *)outAudioFile + 8));
  inData[2] = (NSString *)CFSTR("AVNumberOfChannelsKey");
  v53 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)outAudioFile + 23));
  if (*((_DWORD *)outAudioFile + 18) == 1819304813)
  {
    inData[3] = (NSString *)CFSTR("AVLinearPCMBitDepthKey");
    v54 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)outAudioFile + 24));
    inData[4] = (NSString *)CFSTR("AVLinearPCMIsFloatKey");
    v55 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((_DWORD *)outAudioFile + 19) & 1);
    inData[5] = (NSString *)CFSTR("AVLinearPCMIsBigEndianKey");
    v56 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", ((unint64_t)*((unsigned int *)outAudioFile + 19) >> 1) & 1);
    inData[6] = (NSString *)CFSTR("AVLinearPCMIsNonInterleaved");
    v57 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", ((unint64_t)*((unsigned int *)outAudioFile + 19) >> 5) & 1);
    v34 = 7;
  }
  else
  {
    v34 = 3;
  }
  if (*((_DWORD *)outAudioFile + 14))
  {
    inData[v34] = (NSString *)CFSTR("AVAudioFileTypeKey");
    *(_QWORD *)&ioDataSize[2 * v34++] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInteger:", *((unsigned int *)outAudioFile + 14));
  }
  v35 = *v5;
  if (*v5)
  {
    v49 = 0;
    outDataSize = 4;
    if (!AudioQueueGetProperty(v35, 0x73726371u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)CFSTR("AVSampleRateConverterQualityKey");
      v36 = objc_alloc(MEMORY[0x1E0CB37E8]);
      *(_QWORD *)&ioDataSize[2 * v34++] = objc_msgSend(v36, "initWithUnsignedInteger:", v49);
    }
    v37 = *v5;
    outDataSize = 4;
    if (!AudioQueueGetProperty(v37, 0x62726174u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)CFSTR("AVEncoderBitRateKey");
      v38 = objc_alloc(MEMORY[0x1E0CB37E8]);
      *(_QWORD *)&ioDataSize[2 * v34++] = objc_msgSend(v38, "initWithUnsignedInteger:", v49);
    }
    v39 = *v5;
    outDataSize = 4;
    if (!AudioQueueGetProperty(v39, 0x61636264u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)CFSTR("AVEncoderBitDepthHintKey");
      v40 = objc_alloc(MEMORY[0x1E0CB37E8]);
      *(_QWORD *)&ioDataSize[2 * v34++] = objc_msgSend(v40, "initWithUnsignedInteger:", v49);
    }
    v41 = *v5;
    outDataSize = 4;
    if (!AudioQueueGetProperty(v41, 0x63647175u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)CFSTR("AVEncoderQualityKey");
      v42 = objc_alloc(MEMORY[0x1E0CB37E8]);
      *(_QWORD *)&ioDataSize[2 * v34++] = objc_msgSend(v42, "initWithUnsignedInteger:", v49);
    }
    outDataSize = 0;
    if (!AudioQueueGetPropertySize(*v5, 0x6171636Cu, &outDataSize))
    {
      v43 = objc_alloc(MEMORY[0x1E0C99DF0]);
      v44 = (void *)objc_msgSend(v43, "initWithLength:", outDataSize);
      if (AudioQueueGetProperty(*v5, 0x6171636Cu, (void *)objc_msgSend(v44, "mutableBytes"), &outDataSize))
      {

      }
      else
      {
        inData[v34] = (NSString *)CFSTR("AVChannelLayoutKey");
        *(_QWORD *)&ioDataSize[2 * v34++] = v44;
      }
    }
  }
  v45 = outAudioFile[3];
  if (v45)

  v46 = 0;
  outAudioFile[3] = (AudioFileID)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:count:", ioDataSize, inData, v34);
  v47 = 8 * v34;
  do
  {

    v46 += 8;
  }
  while (v47 != v46);
  v48 = outAudioFile[4];
  if (v48)

  Property = 0;
  outAudioFile[4] = (AudioFileID)-[AVAudioFormat initWithSettings:]([AVAudioFormat alloc], "initWithSettings:", outAudioFile[3]);
  return Property;
}

void AudioRecorderAQInputCallback(id *a1, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, const AudioTimeStamp *a4, UInt32 a5, const AudioStreamPacketDescription *a6)
{
  void *v11;
  id Weak;
  void *v13;
  uint64_t v14;
  OpaqueAudioFileID *v15;
  UInt32 mAudioDataByteSize;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  UInt32 ioNumPackets;

  v11 = (void *)MEMORY[0x1A1AC6084](a1, a2, a3, a4);
  Weak = objc_loadWeak(a1);
  if (Weak)
  {
    v13 = Weak;
    v14 = objc_msgSend(Weak, "impl");
    v15 = *(OpaqueAudioFileID **)(v14 + 104);
    if (!v15)
    {
LABEL_14:
      objc_msgSend(v13, "performSelectorOnMainThread:withObject:waitUntilDone:", sel_stop, 0, 0);
      goto LABEL_17;
    }
    mAudioDataByteSize = a3->mAudioDataByteSize;
    v17 = *(_DWORD *)(v14 + 80);
    if (v17)
      a5 = mAudioDataByteSize / v17;
    ioNumPackets = a5;
    v18 = *(_QWORD *)(v14 + 136);
    if (v18)
    {
      v19 = v18 - *(_QWORD *)(v14 + 120);
      if (v19 < a5)
      {
        ioNumPackets = v19;
        a5 = v19;
      }
    }
    if (a5)
    {
      if (AudioFileWritePackets(v15, 0, mAudioDataByteSize, a6, *(_QWORD *)(v14 + 120), &ioNumPackets, a3->mAudioData))
      {
        *(_BYTE *)(v14 + 188) = 0;
        goto LABEL_14;
      }
      v20 = *(_QWORD *)(v14 + 120) + ioNumPackets;
      *(_QWORD *)(v14 + 120) = v20;
      v21 = *(_QWORD *)(v14 + 136);
      if (v21 && v21 <= v20)
      {
        *(_BYTE *)(v14 + 188) = 1;
        goto LABEL_14;
      }
    }
    if (!*(_BYTE *)(v14 + 187))
      AudioQueueEnqueueBuffer(a2, a3, 0, 0);
  }
LABEL_17:
  objc_autoreleasePoolPop(v11);
}

uint64_t getStringForKey(NSDictionary *a1, NSString *a2, NSString **a3, int *a4)
{
  uint64_t result;

  *a4 = 0;
  result = -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  *a3 = (NSString *)result;
  if (result)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      return 1;
    }
    else
    {
      result = 0;
      *a3 = 0;
      *a4 = -66675;
    }
  }
  return result;
}

uint64_t setBitRate(AudioRecorderImpl *a1)
{
  id var2;
  uint64_t v3;
  void *v4;
  int v5;
  OpaqueAudioQueue *var10;
  uint64_t result;
  void *v10;
  int v11;
  OpaqueAudioQueue *v12;
  int inData;
  UInt32 v14;

  var2 = a1->var2;
  v3 = objc_msgSend(var2, "objectForKey:", CFSTR("AVEncoderBitRateKey"));
  if (v3)
  {
    v4 = (void *)v3;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v5 = objc_msgSend(v4, "unsignedIntegerValue");
      var10 = a1->var10;
      inData = v5;
      LODWORD(result) = AudioQueueSetProperty(var10, 0x62726174u, &inData, 4u);
      if ((_DWORD)result == -66684 || (_DWORD)result == 2003332927 || (_DWORD)result == 1886547824)
        return 0;
      else
        return result;
    }
    return 4294900621;
  }
  result = objc_msgSend(var2, "objectForKey:", CFSTR("AVEncoderBitRatePerChannelKey"));
  if (!result)
    return result;
  v10 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 4294900621;
  v11 = objc_msgSend(v10, "unsignedIntegerValue");
  v12 = a1->var10;
  v14 = a1->var8.mChannelsPerFrame * v11;
  result = AudioQueueSetProperty(v12, 0x62726174u, &v14, 4u);
  if ((_DWORD)result == -66684 || (_DWORD)result == 2003332927 || (_DWORD)result == 1886547824)
    return 0;
  return result;
}

void CallbackMessenger::CallbackMessenger(CallbackMessenger *this)
{
  _QWORD *v2;
  std::__shared_weak_count *size;
  unint64_t *v4;
  unint64_t v5;
  std::string __p;
  std::string v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CallbackMessenger Worker Thread");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v8 = 1;
    v9 = 25;
    v10 = 0;
    v11 = 1;
    v12 = 0;
    v13 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = __p;
    v8 = 1;
    v9 = 25;
    v10 = 0;
    v11 = 1;
    v12 = 0;
    v13 = 0;
  }
  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E3BE9E00;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1A1AC5958](v2 + 3, 0, &v7);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v2;
  std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v4 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v8)
  {
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_19B76B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

CallbackMessenger *std::unique_ptr<CallbackMessenger>::reset[abi:ne180100](CallbackMessenger **a1)
{
  CallbackMessenger *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    CallbackMessenger::~CallbackMessenger(result);
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

BOOL _AVAE_CheckNoErr(char *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  NSObject *v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = objc_retainAutorelease(*(id *)AVAudioEngineLogCategory(void)::category);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        v13 = strrchr(a1, 47);
        if (v13)
          v14 = v13 + 1;
        else
          v14 = a1;
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)buf = 136316674;
      v21 = "AVAEInternal.h";
      v22 = 1024;
      v23 = 104;
      v24 = 2080;
      v25 = v14;
      v26 = 1024;
      v27 = a2;
      v28 = 2080;
      v29 = a3;
      v30 = 2080;
      v31 = a4;
      v32 = 1024;
      v33 = a5;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    if (a6)
    {
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v16 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "dictionaryWithObjectsAndKeys:", v17, CFSTR("failed call"), 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.avfaudio"), (int)a5, v18);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), a5);
    }
  }
  return (_DWORD)a5 == 0;
}

void sub_19B76B4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CallbackMessenger::~CallbackMessenger(CallbackMessenger *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v5 = 0uLL;
  std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]((uint64_t)this, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

os_log_t ___ZL11initLoggingv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.avfaudio", "avas");
  *v0 = result;
  kAVASScope = (uint64_t)v0;
  return result;
}

void std::__shared_ptr_pointer<CallbackMessenger  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

CallbackMessenger *std::__shared_ptr_pointer<CallbackMessenger  *>::__on_zero_shared(uint64_t a1)
{
  CallbackMessenger *result;

  result = *(CallbackMessenger **)(a1 + 24);
  if (result)
  {
    CallbackMessenger::~CallbackMessenger(result);
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::__on_zero_shared()
{
  JUMPOUT(0x1A1AC5964);
}

uint64_t *applesauce::dispatch::v1::async<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::concurrent::messenger ***a1)
{
  caulk::concurrent::messenger ***v2;

  v2 = a1;
  caulk::concurrent::messenger::drain(**a1);
  return std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_19B76B76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1A1AC5BD4](v3, 0x20C40A4A59CD2);
  }
  return a1;
}

void AVAudioSequencerImpl::~AVAudioSequencerImpl(AVAudioSequencerImpl *this)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  OpaqueMusicSequence *v11;
  NSObject *v12;
  id v13;
  _BYTE v14[12];
  __int16 v15;
  int v16;
  __int16 v17;
  AVAudioSequencerImpl *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (kAVASScope)
  {
    v2 = *(id *)kAVASScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v14 = 136315650;
    *(_QWORD *)&v14[4] = "AVAudioSequencerImpl.mm";
    v15 = 1024;
    v16 = 92;
    v17 = 2048;
    v18 = this;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---> this = %p", v14, 0x1Cu);
  }

LABEL_8:
  dispatch_get_global_queue(0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = v4;
  v10 = (_QWORD *)operator new();
  *v10 = v5;
  v10[1] = v6;
  *(_QWORD *)v14 = 0;
  dispatch_async_f(v9, v10, (dispatch_function_t)applesauce::dispatch::v1::async<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0 &&)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)v14);

  objc_msgSend(*((id *)this + 8), "setMusicSequence:", 0);
  if (*(_QWORD *)this)
    DisposeMusicPlayer(*(MusicPlayer *)this);
  v11 = (OpaqueMusicSequence *)*((_QWORD *)this + 1);
  if (v11)
    DisposeMusicSequence(v11);
  if (kAVASScope)
  {
    v12 = *(id *)kAVASScope;
    if (!v12)
      goto LABEL_22;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v14 = 136315394;
    *(_QWORD *)&v14[4] = "AVAudioSequencerImpl.mm";
    v15 = 1024;
    v16 = 101;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d <---", v14, 0x12u);
  }

LABEL_22:
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);

}

void sub_19B76BA20(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

MusicTimeStamp AVAudioSequencerImpl::CurrentPosition(AVAudioSequencerImpl *this)
{
  uint64_t Time;
  MusicTimeStamp outTime;

  outTime = 0.0;
  Time = MusicPlayerGetTime(this, &outTime);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 109, (uint64_t)"CurrentPosition", (uint64_t)"MusicPlayerGetTime(mPlayer, &theTime)", Time, 0);
  return outTime;
}

uint64_t *applesauce::dispatch::v1::async<AVAudioSequencerImpl::Stop(void)::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,AVAudioSequencerImpl::Stop(void)::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::concurrent::messenger ***a1)
{
  caulk::concurrent::messenger ***v2;

  v2 = a1;
  caulk::concurrent::messenger::drain(**a1);
  return std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_19B76BABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

MusicTrack AVAudioSequencerImpl::GetTempoTrack(AVAudioSequencerImpl *this)
{
  uint64_t TempoTrack;
  MusicTrack outTrack;

  outTrack = 0;
  TempoTrack = MusicSequenceGetTempoTrack(this, &outTrack);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 249, (uint64_t)"GetTempoTrack", (uint64_t)"MusicSequenceGetTempoTrack(mSequence, &tempoTrack)", TempoTrack, 0);
  return outTrack;
}

Float64 AVAudioSequencerImpl::GetSecondsForBeats(AVAudioSequencerImpl *this, float a2)
{
  uint64_t SecondsForBeats;
  Float64 outSeconds;

  outSeconds = 0.0;
  SecondsForBeats = MusicSequenceGetSecondsForBeats(this, a2, &outSeconds);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 261, (uint64_t)"GetSecondsForBeats", (uint64_t)"MusicSequenceGetSecondsForBeats(mSequence, inBeats, &theSeconds)", SecondsForBeats, 0);
  return outSeconds;
}

float AVAudioSequencerImpl::GetBeatsForSeconds(AVAudioSequencerImpl *this, Float64 a2)
{
  uint64_t BeatsForSeconds;
  MusicTimeStamp outBeats;

  outBeats = 0.0;
  BeatsForSeconds = MusicSequenceGetBeatsForSeconds(this, a2, &outBeats);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 268, (uint64_t)"GetBeatsForSeconds", (uint64_t)"MusicSequenceGetBeatsForSeconds(mSequence, inSeconds, &theBeats)", BeatsForSeconds, 0);
  return outBeats;
}

void AVAudioSequencerImpl::UserCallback(id *this, void *a2, MusicTrack inTrack, OpaqueMusicTrack *a4, double a5, const MusicEventUserData *a6, double a7, double a8)
{
  unint64_t v12;
  void *v13;
  void *v14;
  caulk::concurrent::messenger **v15;
  id v16;
  id v17;
  caulk::concurrent::messenger *v18;
  uint64_t v19;
  id v20;
  id v21;
  UInt32 outTrackIndex;
  MusicSequence outSequence;

  if (this[4])
  {
    outSequence = 0;
    outTrackIndex = 0;
    MusicTrackGetSequence(inTrack, &outSequence);
    if (outSequence)
    {
      if (!MusicSequenceGetTrackIndex(outSequence, inTrack, &outTrackIndex))
      {
        v12 = outTrackIndex;
        if (objc_msgSend(this[2], "count") > v12)
        {
          objc_msgSend(this[2], "objectAtIndexedSubscript:", outTrackIndex);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", (char *)a4 + 4, *(unsigned int *)a4);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = (caulk::concurrent::messenger **)this[5];
          v16 = v13;
          v17 = v14;
          v18 = *v15;
          v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
          *(_DWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = &off_1E3BE53D8;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 24) = this;
          v20 = v16;
          *(_QWORD *)(v19 + 32) = v20;
          v21 = v17;
          *(_QWORD *)(v19 + 40) = v21;
          *(double *)(v19 + 48) = a5;
          *(_QWORD *)v19 = &off_1E3BE5400;
          caulk::concurrent::messenger::enqueue(v18, (caulk::concurrent::message *)v19);

        }
      }
    }
  }
}

void sub_19B76BD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::~rt_message_call(id *a1)
{

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x1A1AC5BD4);
}

id **caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::perform(uint64_t a1)
{
  id *v2;

  v2 = (id *)a1;
  (*(void (**)(_QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
  return caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_19B76BE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup((id **)va);
  _Unwind_Resume(a1);
}

id **caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup(id **a1)
{
  id *v2;

  v2 = *a1;

  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(_QWORD, id *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::~message_call(id *a1)
{

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t caulk::concurrent::details::message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::perform(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
}

void MusicTrackImpl::MusicTrackImpl(MusicTrackImpl *this, MusicTrack inTrack)
{
  uint64_t Property;
  unsigned int v4;
  BOOL v5;
  UInt32 ioLength;
  _BYTE outData[16];
  unsigned int v8;

  this->var0 = inTrack;
  this->var1 = 0;
  ioLength = 24;
  Property = MusicTrackGetProperty(inTrack, 7u, outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 320, (uint64_t)"MusicTrackImpl", (uint64_t)"MusicTrackGetProperty(inTrack, kSequenceTrackProperty_LoopRegion, &region, &pLen)", Property, 0);
  v4 = v8;
  v5 = v8 == -1;
  this->var2 = v8 != -1;
  if (v5)
    v4 = 0;
  this->var3 = v4;
}

void sub_19B76BF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void MusicTrackImpl::~MusicTrackImpl(MusicTrackImpl *this)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  NSObject *v10;
  id v11;
  MusicSequence outSequence;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  MusicTrackImpl *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (kAVASScope)
  {
    v2 = *(id *)kAVASScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AVAudioSequencerImpl.mm";
    v15 = 1024;
    v16 = 327;
    v17 = 2048;
    v18 = this;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---> this = %p", buf, 0x1Cu);
  }

LABEL_8:
  outSequence = 0;
  if (!MusicTrackIsValid())
  {
    if (kAVASScope)
    {
      v4 = *(id *)kAVASScope;
      if (!v4)
        goto LABEL_25;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "AVAudioSequencerImpl.mm";
      v15 = 1024;
      v16 = 339;
      v6 = "%25s:%-5d Underlying track already destroyed";
      v7 = v4;
      v8 = OS_LOG_TYPE_DEBUG;
LABEL_23:
      _os_log_impl(&dword_19B733000, v7, v8, v6, buf, 0x12u);
    }
LABEL_24:

    goto LABEL_25;
  }
  MusicTrackGetSequence(this->var0, &outSequence);
  if (outSequence)
  {
    MusicSequenceDisposeTrack(outSequence, this->var0);
    goto LABEL_25;
  }
  if (!kAVASScope)
  {
    v4 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
LABEL_21:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "AVAudioSequencerImpl.mm";
      v15 = 1024;
      v16 = 335;
      v6 = "%25s:%-5d Track's sequence was NULL";
      v7 = v4;
      v8 = OS_LOG_TYPE_INFO;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v4 = *(id *)kAVASScope;
  if (v4)
    goto LABEL_21;
LABEL_25:
  if (kAVASScope)
  {
    v10 = *(id *)kAVASScope;
    if (!v10)
      goto LABEL_32;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v14 = "AVAudioSequencerImpl.mm";
    v15 = 1024;
    v16 = 341;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <---", buf, 0x12u);
  }

LABEL_32:
}

void sub_19B76C264(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL MusicTrackImpl::DoSetLengthInBeats(MusicTrackImpl *this, double a2)
{
  uint64_t v2;
  double inData;

  inData = a2;
  v2 = MusicTrackSetProperty((MusicTrack)this, 5u, &inData, 8u);
  return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 376, (uint64_t)"DoSetLengthInBeats", (uint64_t)"MusicTrackSetProperty(mTrack, kSequenceTrackProperty_TrackLength, &inLength, sizeof(inLength))", v2, 0);
}

double MusicTrackImpl::DoGetLengthInBeats(MusicTrackImpl *this)
{
  uint64_t Property;
  UInt32 ioLength;
  double outData;

  outData = 0.0;
  ioLength = 8;
  Property = MusicTrackGetProperty((MusicTrack)this, 5u, &outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 383, (uint64_t)"DoGetLengthInBeats", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_TrackLength, &length, &pLen)", Property, 0);
  return outData;
}

double MusicTrackImpl::GetLoopStart(MusicTrackImpl *this)
{
  uint64_t Property;
  UInt32 ioLength;
  double outData[3];

  ioLength = 24;
  Property = MusicTrackGetProperty((MusicTrack)this, 7u, outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 482, (uint64_t)"GetLoopStart", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_LoopRegion, &region, &pLen)", Property, 0);
  return outData[0];
}

BOOL MusicTrackImpl::UseAutomatedParams(MusicTrackImpl *this, int a2)
{
  uint64_t v2;
  int inData;

  inData = a2;
  v2 = MusicTrackSetProperty((MusicTrack)this, 4u, &inData, 4u);
  return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 564, (uint64_t)"UseAutomatedParams", (uint64_t)"MusicTrackSetProperty(mTrack, kSequenceTrackProperty_AutomatedParameters, &useAuto, pLen)", v2, 0);
}

BOOL MusicTrackImpl::UsesAutomatedParams(MusicTrackImpl *this)
{
  uint64_t Property;
  UInt32 ioLength;
  int outData;

  outData = 0;
  ioLength = 4;
  Property = MusicTrackGetProperty((MusicTrack)this, 4u, &outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 571, (uint64_t)"UsesAutomatedParams", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_AutomatedParameters, &useAuto, &pLen)", Property, 0);
  return outData != 0;
}

char *_AVAE_Check(char *result, int a2, const char *a3, const char *a4, char a5)
{
  char *v8;
  NSObject *v9;
  char *v10;
  char *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) == 0)
  {
    v8 = result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = objc_retainAutorelease(*(id *)AVAudioEngineLogCategory(void)::category);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v8)
      {
        v10 = strrchr(v8, 47);
        if (v10)
          v11 = v10 + 1;
        else
          v11 = v8;
      }
      else
      {
        v11 = 0;
      }
      *(_DWORD *)buf = 136316418;
      v13 = "AVAEInternal.h";
      v14 = 1024;
      v15 = 71;
      v16 = 2080;
      v17 = v11;
      v18 = 1024;
      v19 = a2;
      v20 = 2080;
      v21 = a3;
      v22 = 2080;
      v23 = a4;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return (char *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), a4);
  }
  return result;
}

BOOL MusicTrackEventIteratorImpl::HasCurrentEvent(MusicTrackEventIteratorImpl *this)
{
  uint64_t HasCurrentEvent;
  Boolean outHasCurEvent;

  outHasCurEvent = 0;
  HasCurrentEvent = MusicEventIteratorHasCurrentEvent((MusicEventIterator)this, &outHasCurEvent);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 768, (uint64_t)"HasCurrentEvent", (uint64_t)"MusicEventIteratorHasCurrentEvent(mIter, &has)", HasCurrentEvent, 0);
  return outHasCurEvent != 0;
}

uint64_t CADeprecated::RealtimeMessenger::RealtimeMessenger(uint64_t a1, dispatch_queue_t *a2)
{
  ipc_space_t *v4;
  kern_return_t v5;
  kern_return_t inserted;
  NSObject *v7;
  NSObject *v8;
  uintptr_t v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *global_queue;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[5];
  mach_port_name_t name;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  kern_return_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 8;
  *(_BYTE *)(a1 + 64) = 0;
  MEMORY[0x1A1AC5AE4](a1 + 72);
  CADeprecated::XMachReceivePort::SetMachPort((unsigned int *)a1);
  name = 0;
  v4 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v5 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v21 = "ret = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &port)";
      v22 = 1024;
      v23 = v5;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ca_verify_noerr: [%s, %d]", buf, 0x12u);
    }
  }
  else
  {
    inserted = mach_port_insert_right(*v4, name, name, 0x14u);
    if (inserted)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v21 = "ret = mach_port_insert_right(mach_task_self(), port, port, MACH_MSG_TYPE_MAKE_SEND)";
        v22 = 1024;
        v23 = inserted;
        _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ca_verify_noerr: [%s, %d]", buf, 0x12u);
      }
      mach_port_mod_refs(*v4, name, 1u, -1);
    }
    else
    {
      atomic_store(name, (unsigned int *)a1);
    }
  }
  if (!*a2)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    if (global_queue)
    {
      v16 = global_queue;
      dispatch_retain(global_queue);
      v17 = *a2;
      *a2 = v16;
      if (v17)
        dispatch_release(v17);
    }
    else
    {
      *a2 = 0;
    }
  }
  v7 = dispatch_queue_create("RealtimeMessenger.mServiceQueue", 0);
  v8 = *(NSObject **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
  {
    dispatch_release(v8);
    v7 = *(NSObject **)(a1 + 16);
  }
  dispatch_set_target_queue(v7, *a2);
  v9 = atomic_load((unsigned int *)a1);
  v10 = dispatch_source_create(MEMORY[0x1E0C80D98], v9, 0, *(dispatch_queue_t *)(a1 + 16));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZN12CADeprecated17RealtimeMessengerC2EN10applesauce8dispatch2v15queueE_block_invoke;
  v18[3] = &__block_descriptor_tmp_1447;
  v18[4] = a1;
  dispatch_source_set_event_handler(v10, v18);
  v11 = (_QWORD *)operator new();
  v12 = *(NSObject **)(a1 + 16);
  *v11 = &off_1E3BE99C8;
  v11[1] = v12;
  if (v12)
    dispatch_retain(v12);
  v11[2] = v10;
  if (v10)
    dispatch_retain(v10);
  dispatch_set_target_queue(v10, *(dispatch_queue_t *)(a1 + 16));
  dispatch_resume(v10);
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v10)
    dispatch_release(v10);
  return a1;
}

void sub_19B76C904(_Unwind_Exception *a1)
{
  CADeprecated::XMachReceivePort *v1;
  std::recursive_mutex *v2;
  NSObject *v3;
  uint64_t *v4;
  NSObject *v6;
  uint64_t v7;

  if (v3)
    dispatch_release(v3);
  std::recursive_mutex::~recursive_mutex(v2);
  v6 = *((_QWORD *)v1 + 2);
  if (v6)
    dispatch_release(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  CADeprecated::XMachReceivePort::~XMachReceivePort(v1);
  _Unwind_Resume(a1);
}

void ___ZN12CADeprecated17RealtimeMessengerC2EN10applesauce8dispatch2v15queueE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  mach_port_t v2;
  mach_port_name_t v3;
  mach_msg_header_t msg;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  msg.msgh_bits = 0;
  v2 = atomic_load((unsigned int *)v1);
  msg.msgh_remote_port = 0;
  msg.msgh_local_port = v2;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 0;
  v3 = atomic_load((unsigned int *)v1);
  mach_msg(&msg, 2, 0, 0x2Cu, v3, 0, 0);
  atomic_store(0, (unsigned __int8 *)(v1 + 64));
  CADeprecated::RealtimeMessenger::_PerformPendingMessages((CADeprecated::RealtimeMessenger *)v1);
}

void CADeprecated::RealtimeMessenger::_PerformPendingMessages(CADeprecated::RealtimeMessenger *this)
{
  std::recursive_mutex *v2;
  _BYTE *v3;

  v2 = (std::recursive_mutex *)((char *)this + 72);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 72));
  while (1)
  {
    v3 = OSAtomicDequeue((OSQueueHead *)this + 2, *((_QWORD *)this + 6));
    if (!v3)
      break;
    v3[16] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 16))(v3);
  }
  std::recursive_mutex::unlock(v2);
}

void sub_19B76CA4C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void CADeprecated::RealtimeMessenger::PerformAsync(uint64_t a1, _BYTE *__new)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned int v6;
  _BYTE v7[12];
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (__new[16])
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v7 = 136315650;
      *(_QWORD *)&v7[4] = "RealtimeMessenger.cpp";
      v8 = 0x800000000490400;
      v9 = __new;
      _os_log_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d RealtimeMessenger: trying to enqueue duplicate invocation on message %p", v7, 0x1Cu);
    }
  }
  else
  {
    __new[16] = 1;
    OSAtomicEnqueue((OSQueueHead *)(a1 + 32), __new, *(_QWORD *)(a1 + 48));
    v4 = (unsigned __int8 *)(a1 + 64);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(1u, v4));
    if ((v5 & 1) == 0)
    {
      *(_QWORD *)v7 = 0x1C00000013;
      v6 = atomic_load((unsigned int *)a1);
      *(_DWORD *)&v7[8] = v6;
      v9 = 0;
      v8 = 0;
      mach_msg((mach_msg_header_t *)v7, 1, 0x1Cu, 0, 0, 0, 0);
    }
  }
}

void XPC_Connection::~XPC_Connection(XPC_Connection *this)
{
  XPC_Connection::~XPC_Connection(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E3BE6628;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    _Block_release(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
  {
    _Block_release(v3);
    *((_QWORD *)this + 5) = 0;
  }
  XPC_Object::~XPC_Object(this);
}

uint64_t XPC_Connection::ProcessMessage(XPC_Connection *this, void *a2)
{
  uint64_t result;

  if (MEMORY[0x1A1AC6654](a2) != MEMORY[0x1E0C81310])
  {
    result = *((_QWORD *)this + 3);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, a2);
  }
  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, a2);
  return result;
}

uint64_t ___ZN14XPC_Connection10InitializeEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_19B76CC94(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t XPC_Connection::Finalize(uint64_t this, XPC_Connection *a2)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

void AVAudioSinkNodeImpl::~AVAudioSinkNodeImpl(AVAudioSinkNodeImpl *this)
{
  AVAudioSinkNodeImpl::~AVAudioSinkNodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E3BE7EC0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 64))(*((_QWORD *)this + 22), 0, 0, 0);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 23, 0);
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

uint64_t AVAudioSinkNodeImpl::SetOutputFormat(AVAudioSinkNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  caulk::pooled_semaphore_mutex *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (AVAudioSinkNodeImpl *)((char *)this + 224);
  caulk::pooled_semaphore_mutex::_lock((AVAudioSinkNodeImpl *)((char *)this + 224));
  if (!a3)
    a3 = (AVAudioFormat *)(*(uint64_t (**)(AVAudioSinkNodeImpl *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  *((_DWORD *)this + 48) = -[AVAudioFormat channelCount](a3, "channelCount");
  *((_DWORD *)this + 49) = (_DWORD)-[AVAudioFormat streamDescription](a3, "streamDescription")[24];
  v6 = AVAEInputCallbackClient::SetRenderABL((AVAudioSinkNodeImpl *)((char *)this + 200), *((_DWORD *)this + 48));
  v7 = (*(uint64_t (**)(AVAudioSinkNodeImpl *, double))(*(_QWORD *)this + 40))(this, v6);
  v8 = (*(uint64_t (**)(AVAudioSinkNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v7 + 48))(v7, 0, v8, a3);
  caulk::pooled_semaphore_mutex::_unlock(v5);
  return v9;
}

void sub_19B76CDB0(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioSinkNodeImpl::SetInputFormat(AVAudioSinkNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  caulk::pooled_semaphore_mutex *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (AVAudioSinkNodeImpl *)((char *)this + 224);
  caulk::pooled_semaphore_mutex::_lock((AVAudioSinkNodeImpl *)((char *)this + 224));
  *((_DWORD *)this + 48) = -[AVAudioFormat channelCount](a3, "channelCount");
  *((_DWORD *)this + 49) = (_DWORD)-[AVAudioFormat streamDescription](a3, "streamDescription")[24];
  v6 = AVAEInputCallbackClient::SetRenderABL((AVAudioSinkNodeImpl *)((char *)this + 200), *((_DWORD *)this + 48));
  v7 = (*(uint64_t (**)(AVAudioSinkNodeImpl *, double))(*(_QWORD *)this + 40))(this, v6);
  v8 = (*(uint64_t (**)(AVAudioSinkNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0);
  if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v7 + 48))(v7, 0, v8, a3) & 1) != 0)
  {
    v9 = (*(uint64_t (**)(AVAudioSinkNodeImpl *))(*(_QWORD *)this + 40))(this);
    v10 = (*(uint64_t (**)(AVAudioSinkNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v9 + 48))(v9, 1, v10, a3);
  }
  else
  {
    v11 = 0;
  }
  caulk::pooled_semaphore_mutex::_unlock(v5);
  return v11;
}

void sub_19B76CED0(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioSinkNodeImpl::NumberOutputs(AVAudioSinkNodeImpl *this)
{
  return 0;
}

uint64_t AVAudioSinkNodeImpl::IsSinkNode(AVAudioSinkNodeImpl *this)
{
  return 1;
}

double AVAEInputCallbackClient::SetRenderABL(AVAEInputCallbackClient *this, unsigned int a2)
{
  std::vector<char>::pointer begin;
  void *v5;
  double result;
  std::vector<char> v7;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&v7, (16 * a2) | 8, &__x);
  begin = v7.__begin_;
  *(_DWORD *)v7.__begin_ = a2;
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
    begin = v7.__begin_;
  }
  *(_QWORD *)this = begin;
  result = *(double *)&v7.__end_;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v7.__end_;
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v4;
  char *v6;
  char *v7;
  std::vector<char>::value_type v8;

  v4 = __n;
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v6 = (char *)operator new(__n);
  this->__begin_ = v6;
  this->__end_ = v6;
  v7 = &v6[v4];
  this->__end_cap_.__value_ = &v6[v4];
  v8 = *__x;
  do
  {
    *v6++ = v8;
    --v4;
  }
  while (v4);
  this->__end_ = v7;
  return this;
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void sub_19B76D2F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void ***v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 208) = v5;
    operator delete(v5);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](v2, 0);
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)v1);
  MEMORY[0x1A1AC5BD4](v1, 0x10B1C40239C0A1DLL);
  _Unwind_Resume(a1);
}

void AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(const void **a1, void *aBlock)
{
  void *v3;

  v3 = (void *)*a1;
  if (v3 != aBlock)
  {
    if (v3)
    {
      _Block_release(v3);
      *a1 = 0;
    }
    if (aBlock)
      *a1 = _Block_copy(aBlock);
  }
}

void AVAudioNodeTap::TapMessage::~TapMessage(AVAudioNodeTap::TapMessage *this)
{
  JUMPOUT(0x1A1AC5BD4);
}

void AVAudioNodeTap::TapMessage::RealtimeMessenger_Perform(AVAudioNodeTap::TapMessage *this)
{
  id v2;
  uint64_t v3;
  void *v4;
  CADeprecated::AudioRingBuffer *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  AVAudioFrameCount v11;
  int v12;
  void *v13;
  unint64_t v14;
  AVAudioPCMBuffer *v15;
  AVAudioFrameCount v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  const void **v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  CADeprecated::AudioRingBuffer *v29;
  uint64_t v30;
  void **v31;
  unsigned int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  int v55;
  unint64_t v56;
  double v57;
  double v58;
  int v59;
  int v62;
  CADeprecated::AudioRingBuffer *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  _BYTE buf[28];
  __int16 v69;
  int v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v3 = *((_QWORD *)this + 3);
  if (!*(_BYTE *)(v3 + 54))
  {
    if (!*(_BYTE *)(v3 + 52))
      goto LABEL_5;
    v5 = (CADeprecated::AudioRingBuffer *)(v3 + 72);
    v6 = v3 + 208;
    while (1)
    {
      v7 = *(_DWORD *)(v3 + 976);
      v8 = v6 + 24 * (v7 & 0x1F);
      v9 = 8;
      while (*(_DWORD *)(v8 + 16) != v7)
      {
        if (!--v9)
          goto LABEL_5;
      }
      v10 = atomic_load((unint64_t *)(v3 + 64));
      v11 = *(_QWORD *)(v8 + 8) - v10;
      v12 = *(_DWORD *)(v3 + 56);
      if (v12 == 1)
      {
        *(_DWORD *)(v3 + 56) = 2;
        if (!v11)
          goto LABEL_5;
      }
      else if (v12 || *(_DWORD *)(v3 + 1064) > v11)
      {
        goto LABEL_5;
      }
      v67 = v2;
      v13 = *(void **)(v3 + 1056);
      if (v13)
      {
        v14 = objc_msgSend(v13, "retainCount");
        v15 = *(AVAudioPCMBuffer **)(v3 + 1056);
        if (v14 < 2)
        {
          if (v15)
            goto LABEL_22;
        }
        else
        {

          *(_QWORD *)(v3 + 1056) = 0;
        }
      }
      v15 = -[AVAudioPCMBuffer initWithPCMFormat:frameCapacity:]([AVAudioPCMBuffer alloc], "initWithPCMFormat:frameCapacity:", *(_QWORD *)(v3 + 40), *(unsigned int *)(v3 + 1064));
      *(_QWORD *)(v3 + 1056) = v15;
LABEL_22:
      v16 = -[AVAudioPCMBuffer frameCapacity](v15, "frameCapacity");
      if (v16 >= v11)
        v17 = v11;
      else
        v17 = v16;
      objc_msgSend(*(id *)(v3 + 1056), "setFrameLength:", v17);
      v18 = (_DWORD *)objc_msgSend(*(id *)(v3 + 1056), "mutableAudioBufferList");
      v19 = objc_msgSend(*(id *)(v3 + 1056), "frameLength");
      v20 = v10 + v19;
      v65 = v10;
      v21 = CADeprecated::AudioRingBuffer::CheckTimeBounds(v5, v10, v20);
      if (v21)
      {
LABEL_26:
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AVAudioNodeTap.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 268;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v3;
          v69 = 1024;
          v70 = v21;
          _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Error fetching from ring buffer, this = %p, err = %d", buf, 0x22u);
        }
        goto LABEL_67;
      }
      v64 = v6;
      if (v19)
      {
        v23 = *(const void ***)(v3 + 176);
        v24 = *(_DWORD *)(v3 + 188);
        v25 = *(int *)(v3 + 192);
        v26 = ((v25 & ((int)(v10 % v25) >> 31)) + v10 % v25) * v24;
        v27 = ((v25 & ((int)(v20 % v25) >> 31)) + v20 % v25) * v24;
        v28 = v27 - v26;
        if (v27 <= v26)
        {
          v63 = v5;
          v36 = *(_DWORD *)(v3 + 196) - v26;
          if ((int)*v18 >= 1)
          {
            v37 = v26;
            v62 = *(_DWORD *)(v3 + 196) - v26;
            v38 = v36;
            v39 = *v18 + 1;
            v40 = 4;
            v41 = *(uint64_t **)(v3 + 176);
            do
            {
              v42 = *v41++;
              memcpy(*(void **)&v18[v40], (const void *)(v42 + v37), v38);
              v40 += 4;
              --v39;
            }
            while (v39 > 1);
            v36 = v62;
            if ((int)*v18 >= 1)
            {
              v43 = (uint64_t *)(v18 + 4);
              v44 = *v18 + 1;
              do
              {
                v45 = *v43;
                v43 += 2;
                v46 = (void *)(v45 + v38);
                v47 = *v23++;
                memcpy(v46, v47, v27);
                --v44;
              }
              while (v44 > 1);
            }
          }
          v28 = v36 + v27;
          v5 = v63;
        }
        else
        {
          if ((int)*v18 < 1)
            goto LABEL_47;
          v29 = v5;
          v30 = v26;
          v31 = (void **)(v18 + 4);
          v32 = *v18 + 1;
          do
          {
            v34 = *v31;
            v31 += 2;
            v33 = v34;
            v35 = (uint64_t)*v23++;
            memcpy(v33, (const void *)(v35 + v30), v28);
            --v32;
          }
          while (v32 > 1);
          v5 = v29;
        }
      }
      else
      {
        v28 = 0;
      }
      if ((int)*v18 >= 1)
      {
        v48 = v18 + 3;
        v49 = *v18 + 1;
        do
        {
          *v48 = v28;
          v48 += 4;
          --v49;
        }
        while (v49 > 1);
      }
LABEL_47:
      v21 = CADeprecated::AudioRingBuffer::CheckTimeBounds(v5, v65, v20);
      v6 = v64;
      if (v21)
        goto LABEL_26;
      v50 = 0;
      while (1)
      {
        v51 = atomic_load((unint64_t *)(v3 + 984));
        if ((v51 & 1) == 0)
        {
          v52 = *(double *)(v3 + 992);
          v53 = *(_QWORD *)(v3 + 1000);
          v54 = *(double *)(v3 + 1008);
          v55 = *(_DWORD *)(v3 + 1048);
          v56 = atomic_load((unint64_t *)(v3 + 984));
          if (v51 == v56)
            break;
        }
        if (++v50 == 5)
        {
          sched_yield();
          v50 = 0;
        }
      }
      v71 = 1;
      *(double *)buf = (double)v65;
      objc_msgSend(*(id *)(v3 + 40), "sampleRate");
      v59 = v71;
      if ((~v71 & 7) != 0 && (~v55 & 3) == 0 && (v71 & 3) != 0)
      {
        if ((v71 & 4) != 0)
        {
          v58 = *(double *)&buf[16];
          if ((v71 & 2) == 0)
            goto LABEL_72;
        }
        else
        {
          v58 = 1.0;
          if ((v55 & 4) == 0)
          {
            if ((v71 & 2) != 0)
              goto LABEL_63;
LABEL_72:
            *(_QWORD *)&buf[8] = (unint64_t)((double)v53 + (*(double *)buf - v52) * (v58 * 24000000.0 / v57));
            if ((v59 & 1) != 0)
            {
LABEL_65:
              v71 = v59 | 3;
              goto LABEL_66;
            }
LABEL_64:
            v58 = v52 + round(v57 / (v58 * 24000000.0) * (double)(*(_QWORD *)&buf[8] - v53));
            *(double *)buf = v58;
            goto LABEL_65;
          }
          v59 = v71 | 4;
          *(double *)&buf[16] = v54;
          v58 = v54;
          if ((v71 & 2) == 0)
            goto LABEL_72;
        }
LABEL_63:
        if ((v59 & 1) != 0)
          goto LABEL_65;
        goto LABEL_64;
      }
LABEL_66:
      +[AVAudioTime timeWithAudioTimeStamp:sampleRate:](AVAudioTime, "timeWithAudioTimeStamp:sampleRate:", buf, v57, v58);
      (*(void (**)(void))(*(_QWORD *)(v3 + 16) + 16))();
LABEL_67:
      atomic_store(v65 + objc_msgSend(*(id *)(v3 + 1056), "frameLength"), (unint64_t *)(v3 + 64));
      v2 = v67;
      if (!*(_BYTE *)(v3 + 52))
        goto LABEL_5;
    }
  }
  v66 = v2;
  _Block_release(*(const void **)(v3 + 16));

  v4 = *(void **)(v3 + 1200);
  if (v4)
  {
    *(_QWORD *)(v3 + 1208) = v4;
    operator delete(v4);
  }
  CADeprecated::AudioRingBuffer::~AudioRingBuffer((CADeprecated::AudioRingBuffer *)(v3 + 72));
  MEMORY[0x1A1AC5BD4](v3, 0x10F0C402021B9A6);
  v2 = v66;
LABEL_5:

}

void sub_19B76D9E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioNodeTap::AVAudioNodeTap(uint64_t a1, uint64_t a2, int a3, int a4, void *aBlock)
{
  std::vector<char>::value_type __x;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 36));
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 256;
  *(_BYTE *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 56) = 2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &off_1E3BE99A8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  bzero((void *)(a1 + 192), 0x314uLL);
  *(_WORD *)(a1 + 980) = 1;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_DWORD *)(a1 + 1064) = a4;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1144) = 1;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1168) = &off_1E3BE9AF0;
  *(_QWORD *)(a1 + 1192) = a1;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 1200), 8uLL, &__x);
  **(_DWORD **)(a1 + 1200) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 1224));
  return a1;
}

void sub_19B76DB04(_Unwind_Exception *a1)
{
  uint64_t v1;
  CADeprecated::AudioRingBuffer *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 1208) = v5;
    operator delete(v5);
  }
  CADeprecated::AudioRingBuffer::~AudioRingBuffer(v2);
  _Unwind_Resume(a1);
}

uint64_t AVAudioNodeTap::Uninitialize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  caulk::pooled_semaphore_mutex *v3;
  uint64_t v4;
  char v5;

  if (*(_BYTE *)(this + 52))
  {
    v1 = this;
    v2 = this + 24;
    v3 = (caulk::pooled_semaphore_mutex *)(this + 1224);
    while (1)
    {
      v4 = v2;
      v5 = 1;
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v2);
      if ((caulk::pooled_semaphore_mutex::try_lock(v3) & 1) != 0)
      {
        v4 = 0;
        v5 = 0;
        std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
        goto LABEL_8;
      }
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
      sched_yield();
      v4 = (uint64_t)v3;
      v5 = 1;
      caulk::pooled_semaphore_mutex::_lock(v3);
      if ((caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(v2) & 1) != 0)
        break;
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
      sched_yield();
    }
    v4 = 0;
    v5 = 0;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
LABEL_8:
    CADeprecated::RealtimeMessenger::_PerformPendingMessages((CADeprecated::RealtimeMessenger *)AVAudioEngineImpl::sMessenger);
    *(_DWORD *)(v1 + 56) = 1;
    AVAEInputCallbackClient::SetRenderABL((AVAEInputCallbackClient *)(v1 + 1200), 0);
    CADeprecated::AudioRingBuffer::Deallocate((CADeprecated::AudioRingBuffer *)(v1 + 72));

    *(_QWORD *)(v1 + 1056) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    *(_BYTE *)(v1 + 52) = 0;
    caulk::pooled_semaphore_mutex::_unlock(v3);
    return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  }
  return this;
}

void sub_19B76DC44(_Unwind_Exception *a1)
{
  uint64_t v1;
  caulk::pooled_semaphore_mutex *v2;

  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  BOOL v4;
  int v5;
  int v6;

  result = (uint64_t)pthread_self();
  v3 = atomic_load((unint64_t *)a1);
  if (result)
  {
    if (v3)
      v4 = result == v3;
    else
      v4 = 0;
    if (!v4)
      goto LABEL_11;
  }
  else if (v3)
  {
LABEL_11:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= 0)
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    *(_DWORD *)(a1 + 8) = v6;
    if (!v6)
    {
LABEL_12:
      atomic_store(0, (unint64_t *)a1);
      return caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 12));
    }
  }
  return result;
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;

  result = (uint64_t)pthread_self();
  v3 = result;
  v4 = atomic_load((unint64_t *)a1);
  if (result)
  {
    if (v4)
      v5 = result == v4;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_9;
  }
  else if (v4)
  {
LABEL_9:
    result = caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
    atomic_store(v3, (unint64_t *)a1);
    v6 = 1;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(a1 + 8) + 1;
LABEL_10:
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

uint64_t std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(_QWORD *)a1);
  return a1;
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(uint64_t a1)
{
  pthread_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  v2 = pthread_self();
  v3 = (unint64_t)v2;
  v4 = atomic_load((unint64_t *)a1);
  if (v2)
  {
    if (v4)
      v5 = v2 == (pthread_t)v4;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_7:
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  if (!v4)
    goto LABEL_7;
LABEL_9:
  result = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  if ((_DWORD)result)
  {
    atomic_store(v3, (unint64_t *)a1);
    result = 1;
    *(_DWORD *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

uint64_t AVAudioNodeTap::Initialize(uint64_t this)
{
  _QWORD *v1;
  caulk::pooled_semaphore_mutex *v2;
  void *v3;
  NSObject *v4;
  id v5;
  double v6;
  double *v7;
  unsigned int v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t i;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  std::bad_alloc *exception;
  std::bad_alloc *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 52))
  {
    v1 = (_QWORD *)this;
    v2 = (caulk::pooled_semaphore_mutex *)(this + 1224);
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 1224));
    v3 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, 0, *((unsigned int *)v1 + 2));
    v1[5] = v3;
    if (!v3)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v29 = "AVAEInternal.h";
        v30 = 1024;
        v31 = 71;
        v32 = 2080;
        v33 = "AVAudioNodeTap.mm";
        v34 = 1024;
        v35 = 58;
        v36 = 2080;
        v37 = "Initialize";
        v38 = 2080;
        v39 = "nil != _format";
        _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != _format");
      v3 = (void *)v1[5];
    }
    *((_DWORD *)v1 + 12) = objc_msgSend(v3, "channelCount");
    v5 = (id)v1[5];
    v6 = *(double *)objc_msgSend((id)v1[5], "streamDescription");
    v7 = (double *)objc_msgSend((id)v1[5], "streamDescription");
    v8 = (v6 * 0.1);
    v9 = *v7 * 0.4;
    v10 = v9;
    v11 = *((_DWORD *)v1 + 266);
    if (v11 < v8 || (v8 = v9, v11 > v10))
      *((_DWORD *)v1 + 266) = v8;
    if ((objc_msgSend((id)v1[5], "isInterleaved") & 1) != 0)
      v12 = 1;
    else
      v12 = objc_msgSend((id)v1[5], "channelCount");
    v13 = *(_DWORD *)(objc_msgSend((id)v1[5], "streamDescription") + 24);
    CADeprecated::AudioRingBuffer::Deallocate((CADeprecated::AudioRingBuffer *)(v1 + 9));
    *((_DWORD *)v1 + 46) = v12;
    *((_DWORD *)v1 + 47) = v13;
    v14 = 4 * v10 * v13;
    *((_DWORD *)v1 + 48) = 4 * v10;
    *((_DWORD *)v1 + 49) = v14;
    v15 = ((v14 + 8) * v12);
    v16 = (char *)malloc_type_malloc(v15, 0x7C51E058uLL);
    v17 = v16;
    if ((_DWORD)v15)
      v18 = v16 == 0;
    else
      v18 = 0;
    if (v18)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v27 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v16, v15);
    v1[22] = v17;
    if (v12 > 0)
    {
      v19 = 0;
      v20 = *((unsigned int *)v1 + 49);
      v21 = &v17[8 * v12];
      do
      {
        *(_QWORD *)(v1[22] + 8 * v19) = v21;
        v21 += v20;
        ++v19;
      }
      while (v12 != v19);
    }
    for (i = 0; i != 96; i += 3)
    {
      v23 = &v1[i];
      v23[26] = 0;
      v23[27] = 0;
      *((_DWORD *)v23 + 56) = 0;
    }
    v24 = 0;
    *((_DWORD *)v1 + 244) = 0;
    *((_BYTE *)v1 + 980) = 1;
    do
    {
      v25 = &v1[v24];
      v25[26] = 0;
      v25[27] = 0;
      *((_DWORD *)v25 + 56) = 0;
      v24 += 3;
    }
    while (v24 != 96);
    *((_DWORD *)v1 + 244) = 0;
    *((_BYTE *)v1 + 980) = 1;
    v1[132] = 0;
    *((_DWORD *)v1 + 14) = 0;
    *((_WORD *)v1 + 26) = 257;
    *((_BYTE *)v1 + 1144) = 1;
    *((_DWORD *)v1 + 282) = 0;
    v1[144] = 0;
    v1[142] = *(_QWORD *)objc_msgSend((id)v1[5], "streamDescription");
    AVAEInputCallbackClient::SetRenderABL((AVAEInputCallbackClient *)(v1 + 150), objc_msgSend((id)v1[5], "channelCount"));
    return caulk::pooled_semaphore_mutex::_unlock(v2);
  }
  return this;
}

void sub_19B76E1B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AVAudioNodeTap::RenderCallback(AVAudioNodeTap *this, _DWORD *a2, unsigned int *a3, const AudioTimeStamp *a4, UInt32 a5, const AudioBufferList *a6, AudioBufferList *a7)
{
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  int v13;
  unsigned int v17;
  int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  int64_t *v24;
  char *v25;
  unsigned int v26;
  char v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  char *v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  size_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  unsigned int v52;
  char *v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  size_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  void **v62;
  void *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  UInt32 v68;
  int v69;
  char *v70;
  unsigned int v71;
  char v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t v76;
  int v77;
  char *v78;
  int64_t v79;
  int64_t *v80;
  int64_t *v81;
  _DWORD *v82;
  int v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  BOOL v87;
  UInt32 v89;
  uint64_t v90;
  size_t v91;
  const void **v92;
  unsigned int v93;
  uint64_t v94;
  void *v95;
  const void *v96;
  size_t v97;
  unsigned int v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  UInt32 mNumberBuffers;
  void **p_mData;
  unsigned int v104;
  void *v105;
  void *v106;
  char *v107;
  int v108;
  char *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char *v116;
  char v117;
  __int128 v118;
  __int128 v119;

  v13 = (int)a4;
  if (a3)
  {
    v17 = a3[14];
    v7 = v17 & 6;
    v8 = *((_QWORD *)a3 + 1);
    v9 = *((double *)a3 + 2);
    if (*((_BYTE *)this + 1144))
    {
      *((_QWORD *)this + 144) = 0;
      *((_BYTE *)this + 1144) = 0;
LABEL_4:
      v10 = *(double *)a3 + *((double *)this + 144);
      v7 |= 1u;
LABEL_5:
      *((double *)this + 134) = v10;
      *((_QWORD *)this + 135) = v8;
      *((double *)this + 136) = v9;
      *((_DWORD *)this + 282) = v7;
      *((_DWORD *)this + 290) = a5;
      goto LABEL_6;
    }
    v28 = *((_DWORD *)this + 282);
    if (!v28)
      goto LABEL_4;
    v29 = *((double *)this + 134);
    v30 = vabdd_f64(*(double *)a3 + *((double *)this + 144), v29 + (double)*((int *)this + 290));
    v31 = 2.22044605e-16;
    if (v30 >= 1.0)
      v31 = v30 * 2.22044605e-16;
    if (v30 <= v31)
      goto LABEL_4;
    if ((v17 & 2) == 0 || (*((_DWORD *)this + 282) & 3) != 3)
    {
      if (CAIsDebuggerAttached())
        __asm { SVC             0 }
LABEL_36:
      *((double *)this + 144) = v10 - *(double *)a3;
      if ((v7 & 1) != 0)
        goto LABEL_5;
      goto LABEL_4;
    }
    if ((v17 & 4) == 0)
    {
      v32 = 1.0;
      if ((v28 & 4) == 0)
      {
LABEL_33:
        v10 = v29 + round(*((double *)this + 142) / (v32 * 24000000.0) * (double)(v8 - *((_QWORD *)this + 135)));
        v7 |= 3u;
        goto LABEL_36;
      }
      v7 = v17 & 2 | 4;
      v9 = *((double *)this + 136);
    }
    v32 = v9;
    goto LABEL_33;
  }
LABEL_6:
  v116 = (char *)this + 24;
  v18 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 24);
  v117 = v18;
  if (!v18
    || (*((_DWORD *)this + 14) - 1) < 2
    || (*a2 & 0x108) != 8
    || *((_DWORD *)this + 2) != v13
    || !*((_BYTE *)this + 52))
  {
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v116);
  }
  v19 = (uint64_t)v10;
  if (*((_BYTE *)this + 53))
  {
    atomic_store(v19, (unint64_t *)this + 8);
    *((_BYTE *)this + 53) = 0;
    if (*((_DWORD *)this + 266) <= a5)
      *((_DWORD *)this + 266) = 2 * a5;
  }
  if (a5)
  {
    v20 = *((unsigned int *)this + 48);
    if (v20 >= a5)
    {
      v21 = v19 + a5;
      v22 = *((_DWORD *)this + 244);
      v23 = (unsigned int *)((char *)this + 976);
      v24 = (int64_t *)((char *)this + 24 * (v22 & 0x1F) + 216);
      if (*v24 > v19 || *((_BYTE *)this + 980) && *((_BYTE *)this + 981))
      {
        v25 = (char *)this + 24 * ((v22 + 1) & 0x1F);
        *((_QWORD *)v25 + 26) = v19;
        *((_QWORD *)v25 + 27) = v19;
        *((_DWORD *)v25 + 56) = v22 + 1;
        while (1)
        {
          v26 = __ldaxr(v23);
          if (v26 != v22)
            break;
          if (!__stlxr(v22 + 1, v23))
          {
            v27 = 1;
            goto LABEL_39;
          }
        }
        v27 = 0;
        __clrex();
LABEL_39:
        if ((v27 & 1) == 0)
          *v23 = v26;
        *((_BYTE *)this + 980) = 0;
      }
      else if (v21 - *((_QWORD *)this + 3 * (v22 & 0x1F) + 26) > v20)
      {
        v50 = v21 - v20;
        v51 = *v24;
        v87 = v50 <= *v24;
        v52 = v22 + 1;
        v53 = (char *)this + 24 * ((v22 + 1) & 0x1F);
        *((_QWORD *)v53 + 26) = v50;
        if (v87)
          v50 = v51;
        *((_QWORD *)v53 + 27) = v50;
        *((_DWORD *)v53 + 56) = v52;
        while (1)
        {
          v54 = __ldaxr(v23);
          if (v54 != v22)
            break;
          if (!__stlxr(v52, v23))
          {
            v55 = 1;
            goto LABEL_107;
          }
        }
        v55 = 0;
        __clrex();
LABEL_107:
        if ((v55 & 1) == 0)
          *v23 = v54;
      }
      v37 = (char *)this + 72;
      v38 = (void **)*((_QWORD *)this + 22);
      v39 = *((_QWORD *)this + 3 * (*((_DWORD *)this + 244) & 0x1F) + 27);
      v40 = *((int *)this + 48);
      v42 = *((_DWORD *)this + 46);
      v41 = *((_DWORD *)this + 47);
      if (v39 >= v19)
      {
        v44 = ((v40 & ((int)(v19 % v40) >> 31)) + v19 % v40) * v41;
        goto LABEL_65;
      }
      v112 = v19 + a5;
      v43 = ((v40 & ((int)(v39 % v40) >> 31)) + v39 % v40) * v41;
      v44 = ((v40 & ((int)(v19 % v40) >> 31)) + v19 % v40) * v41;
      if (v44 <= v43)
      {
        if (v42 >= 1)
        {
          v114 = ((v40 & ((int)(v19 % v40) >> 31)) + v19 % v40) * v41;
          v109 = (char *)this + 72;
          v110 = (uint64_t)v10;
          v56 = v43;
          v57 = *((_DWORD *)this + 49) - v43;
          v108 = *((_DWORD *)this + 46);
          v58 = v42 + 1;
          v59 = (uint64_t *)*((_QWORD *)this + 22);
          do
          {
            v60 = *v59++;
            bzero((void *)(v60 + v56), v57);
            --v58;
          }
          while (v58 > 1);
          v21 = v112;
          v61 = v108 + 1;
          v62 = v38;
          do
          {
            v63 = *v62++;
            bzero(v63, v114);
            --v61;
          }
          while (v61 > 1);
          v23 = (unsigned int *)((char *)this + 976);
          goto LABEL_63;
        }
      }
      else if (v42 >= 1)
      {
        v114 = ((v40 & ((int)(v19 % v40) >> 31)) + v19 % v40) * v41;
        v109 = (char *)this + 72;
        v110 = (uint64_t)v10;
        v45 = v43;
        v46 = v44 - v43;
        v47 = v42 + 1;
        v48 = (uint64_t *)*((_QWORD *)this + 22);
        do
        {
          v49 = *v48++;
          bzero((void *)(v49 + v45), v46);
          --v47;
        }
        while (v47 > 1);
        v23 = (unsigned int *)((char *)this + 976);
        v21 = v112;
LABEL_63:
        v37 = v109;
        v19 = v110;
        v44 = v114;
        goto LABEL_65;
      }
      v21 = v19 + a5;
LABEL_65:
      v64 = *((int *)this + 48);
      v65 = ((v64 & ((int)(v21 % v64) >> 31)) + v21 % v64) * *((_DWORD *)this + 47);
      v66 = *((_QWORD *)this + 25);
      if (v65 <= v44)
      {
        if (v66)
        {
          v68 = v64 - v19 % v64 - (v64 & ((int)(v19 % v64) >> 31));
          CADeprecated::AudioRingBuffer::ConvertAndStore((uint64_t)v37, v44, a6, 0, v68);
          v44 = 0;
          v67 = v68 * *((_DWORD *)this + 36);
          a5 = (*((_DWORD *)this + 48) & ((int)(v21 % *((int *)this + 48)) >> 31)) + v21 % *((int *)this + 48);
          goto LABEL_70;
        }
        if ((int)a6->mNumberBuffers >= 1)
        {
          v111 = ((v64 & ((int)(v21 % v64) >> 31)) + v21 % v64) * *((_DWORD *)this + 47);
          v113 = v21;
          v115 = v44;
          v97 = *((_DWORD *)this + 49) - v44;
          v98 = a6->mNumberBuffers + 1;
          v99 = 16;
          v100 = v38;
          do
          {
            v101 = (uint64_t)*v100++;
            memcpy((void *)(v101 + v115), *(const void **)((char *)&a6->mNumberBuffers + v99), v97);
            v99 += 16;
            --v98;
          }
          while (v98 > 1);
          mNumberBuffers = a6->mNumberBuffers;
          v21 = v113;
          if ((int)a6->mNumberBuffers >= 1)
          {
            p_mData = &a6->mBuffers[0].mData;
            v104 = mNumberBuffers + 1;
            do
            {
              v106 = *v38++;
              v105 = v106;
              v107 = (char *)*p_mData;
              p_mData += 2;
              memcpy(v105, &v107[v97], v111);
              --v104;
            }
            while (v104 > 1);
          }
        }
      }
      else
      {
        if (v66)
        {
          v67 = 0;
LABEL_70:
          CADeprecated::AudioRingBuffer::ConvertAndStore((uint64_t)v37, v44, a6, v67, a5);
          goto LABEL_71;
        }
        v89 = a6->mNumberBuffers;
        if ((int)a6->mNumberBuffers >= 1)
        {
          v90 = v44;
          v91 = v65 - v44;
          v92 = (const void **)&a6->mBuffers[0].mData;
          v93 = v89 + 1;
          do
          {
            v94 = (uint64_t)*v38++;
            v95 = (void *)(v94 + v90);
            v96 = *v92;
            v92 += 2;
            memcpy(v95, v96, v91);
            --v93;
          }
          while (v93 > 1);
        }
      }
LABEL_71:
      v69 = *((_DWORD *)this + 244);
      v70 = (char *)this + 24 * ((v69 + 1) & 0x1F) + 208;
      *(_QWORD *)v70 = *((_QWORD *)this + 3 * (v69 & 0x1F) + 26);
      *((_QWORD *)v70 + 1) = v21;
      *((_DWORD *)v70 + 4) = v69 + 1;
      while (1)
      {
        v71 = __ldaxr(v23);
        if (v71 != v69)
          break;
        if (!__stlxr(v69 + 1, v23))
        {
          v72 = 1;
          goto LABEL_76;
        }
      }
      v72 = 0;
      __clrex();
LABEL_76:
      if ((v72 & 1) == 0)
        *v23 = v71;
    }
  }
  v73 = (unint64_t *)((char *)this + 984);
  do
    v74 = __ldaxr(v73);
  while (__stxr(v74 + 1, v73));
  *((double *)this + 124) = v10;
  *((_QWORD *)this + 125) = v8;
  *((double *)this + 126) = v9;
  v75 = v119;
  *(_OWORD *)((char *)this + 1016) = v118;
  *(_OWORD *)((char *)this + 1032) = v75;
  *((_DWORD *)this + 262) = v7;
  do
    v76 = __ldxr(v73);
  while (__stlxr(v76 + 1, v73));
  v77 = *((_DWORD *)this + 244);
  v78 = (char *)this + 24 * (v77 & 0x1F);
  v79 = *((unsigned int *)this + 266);
  v80 = (int64_t *)(v78 + 208);
  v81 = (int64_t *)(v78 + 216);
  v82 = v78 + 224;
  v83 = 8;
  while (1)
  {
    v84 = *v80;
    v85 = *v81;
    if (*v82 == v77)
      break;
    if (!--v83)
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v116);
  }
  v86 = atomic_load((unint64_t *)this + 8);
  v87 = v86 + v79 >= v84 && v86 <= v85;
  if (!v87)
  {
    atomic_store(v84, (unint64_t *)this + 8);
    v86 = v84;
  }
  if (v85 - v86 >= v79 && !*((_BYTE *)this + 1184))
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (_BYTE *)this + 1168);
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v116);
}

void sub_19B76E8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetAudioFormatGetPropertyProc(void)
{
  void *result;
  void *v1;

  result = (void *)GetAudioFormatGetPropertyProc(void)::proc;
  if (!GetAudioFormatGetPropertyProc(void)::proc)
  {
    v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 1);
    if (v1)
    {
      result = dlsym(v1, "AudioFormatGetProperty");
      GetAudioFormatGetPropertyProc(void)::proc = (uint64_t)result;
    }
    else
    {
      return (void *)GetAudioFormatGetPropertyProc(void)::proc;
    }
  }
  return result;
}

void AVVCExternalDeviceRecordingEngine::~AVVCExternalDeviceRecordingEngine(AVVCRecordingEngine *this)
{
  AVVCExternalDeviceRecordingEngine::~AVVCExternalDeviceRecordingEngine(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  _BYTE v2[8];

  *(_QWORD *)this = &off_1E3BE9728;
  TraceMethod::TraceMethod((TraceMethod *)v2, "~AVVCExternalDeviceRecordingEngine");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  AVVCRecordingEngine::~AVVCRecordingEngine(this);
}

uint64_t AVVCExternalDeviceRecordingEngine::asbdForClientSettings(AVVCExternalDeviceRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::Initialize(AVVCExternalDeviceRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::prepareRecording(AVVCExternalDeviceRecordingEngine *this, NSDictionary *a2)
{
  _BYTE v4[8];

  TraceMethod::TraceMethod((TraceMethod *)v4, "prepareRecoding");
  AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  TraceMethod::~TraceMethod((TraceMethod *)v4);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::startRecording(AVVCExternalDeviceRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "startRecording");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::stopRecording(AVVCExternalDeviceRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "stopRecording");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::destroyRecordEngine(AVVCExternalDeviceRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "destroyRecordingEngine");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

__n128 AVVCExternalDeviceRecordingEngine::getRecordQueueFormat@<Q0>(AVVCExternalDeviceRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 24);
  v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 7);
  return result;
}

uint64_t AVVCExternalDeviceRecordingEngine::enableSiriListeningMode(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::enableMetering(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::updateMeterLevels(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

void AVVCExternalDeviceRecordingEngine::updateStreamStoppedState(AVVCExternalDeviceRecordingEngine *this)
{
  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
}

uint64_t AVVCExternalDeviceRecordingEngine::setupAudioCaptures(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::logAudioCaptures()
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::disposeAudioCaptures(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::setSessionIsRecordingFlag(AVVCExternalDeviceRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "setSessionIsRecordingFlag");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::getEngineType(AVVCExternalDeviceRecordingEngine *this)
{
  return 3;
}

uint64_t AVVCExternalDeviceRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a1 + 376);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)(v4 + 56));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", CFSTR("ExternalDeviceInput"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v6;

  if (!v5)
    std::mutex::unlock((std::mutex *)(v4 + 56));
  AVVCRouteManager::getRecordRoute(*(_QWORD *)(a1 + 376), a2);
  return 0;
}

void sub_19B76EF10(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (!v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AVVCExternalDeviceRecordingEngine::AVVCExternalDeviceRecordingEngine(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];

  *(_QWORD *)AVVCRecordingEngine::AVVCRecordingEngine(a1, a2) = &off_1E3BE9728;
  TraceMethod::TraceMethod((TraceMethod *)v4, "AVVCExternalDeviceRecordingEngine");
  AVVCRecordingEngine::setStreamState(a1, 1);
  TraceMethod::~TraceMethod((TraceMethod *)v4);
  return a1;
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(a1[1]);
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void AVVCRecordingEngineMap::AVVCRecordingEngineMap(AVVCRecordingEngineMap *this)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  MEMORY[0x1A1AC5AE4]((char *)this + 24);
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "AVVCRecordingEngineMap.mm";
    v5 = 1024;
    v6 = 14;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngineMap::AVVCRecordingEngineMap() Created new Engine Map", (uint8_t *)&v3, 0x12u);
  }

}

void sub_19B76F108(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void AVVCRecordingEngineMap::~AVVCRecordingEngineMap(AVVCRecordingEngineMap *this)
{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AVVCRecordingEngineMap.mm";
    v6 = 1024;
    v7 = 19;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngineMap::~AVVCRecordingEngineMap() Destroyed Engine Map", (uint8_t *)&v4, 0x12u);
  }

LABEL_8:
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24));
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*((_QWORD **)this + 1));
}

void AVVCRecordingEngineMap::findEngine(AVVCRecordingEngineMap *this, uint64_t a2, unint64_t a3)
{
  std::recursive_mutex *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (std::recursive_mutex *)(a2 + 24);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::recursive_mutex::lock(v6);
  v10 = *(_QWORD **)(a2 + 8);
  v9 = (_QWORD *)(a2 + 8);
  v8 = v10;
  if (!v10)
    goto LABEL_16;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a3;
    if (v12 >= a3)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a3)
  {
LABEL_16:
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_23:
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 136315650;
      v22 = "AVVCRecordingEngineMap.mm";
      v23 = 1024;
      v24 = 39;
      v25 = 2048;
      v26 = a3;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No recording engine found for stream(%lu)", (uint8_t *)&v21, 0x1Cu);
    }

    goto LABEL_23;
  }
  v18 = v11[5];
  v17 = v11[6];
  *(_QWORD *)this = v18;
  *((_QWORD *)this + 1) = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
LABEL_24:
  if (!v7)
    std::recursive_mutex::unlock(v6);
}

void AVVCRecordingEngineMap::findEngine(AVVCRecordingEngineMap *this, NSString *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  _QWORD *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  __CFString *v22;
  id v23;
  unsigned int v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  int v29;
  NSString *v30;
  NSString *v31;
  BOOL v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  id v38;
  id v39;
  id v40;
  NSObject *v41;
  unsigned int v42;
  const char *v43;
  id v44;
  __CFString *v45;
  void *v46;
  const char *v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  std::recursive_mutex *v51;
  AVVCRecordingEngineMap *v52;
  int v53;
  uint8_t buf[4];
  _BYTE v55[14];
  __int16 v56;
  const char *v57;
  __int16 v58;
  __CFString *v59;
  __int16 v60;
  id v61;
  __int16 v62;
  const char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v51 = (std::recursive_mutex *)(a2 + 3);
  v53 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::recursive_mutex::lock(v51);
  if (v5 && objc_msgSend(v5, "length"))
  {
    v8 = (NSString *)*a2;
    v6 = a2 + 1;
    v7 = v8;
    if (v8 != v6)
    {
      v52 = this;
      while (kAVVCScope)
      {
        v9 = *(id *)kAVVCScope;
        if (v9)
          goto LABEL_13;
LABEL_32:
        AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v5, "isEqualToString:", v28);

        if (v29)
        {
          if (kAVVCScope)
          {
            v38 = *(id *)kAVVCScope;
            if (!v38)
              goto LABEL_71;
          }
          else
          {
            v38 = (id)MEMORY[0x1E0C81028];
            v40 = MEMORY[0x1E0C81028];
          }
          v41 = v38;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            v42 = (*(uint64_t (**)(NSString))(*(_QWORD *)v7[5] + 320))(v7[5]);
            if (v42 > 4)
              v43 = "ILLEGAL";
            else
              v43 = off_1E3BEC7A8[v42];
            Get4CCFromInt(*((_DWORD *)v7[5] + 70));
            v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
            AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = (const char *)v7[4];
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)v55 = "AVVCRecordingEngineMap.mm";
            *(_WORD *)&v55[8] = 1024;
            *(_DWORD *)&v55[10] = 64;
            v56 = 2080;
            v57 = v43;
            v58 = 2112;
            v59 = v45;
            v60 = 2112;
            v61 = v46;
            v62 = 2048;
            v63 = v47;
            _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found matching engine of type(%s) for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x3Au);

            this = v52;
          }

LABEL_71:
          *(_QWORD *)this = v7[5];
          v48 = (char *)v7[6];
          *((_QWORD *)this + 1) = v48;
          if (v48)
          {
            v49 = (unint64_t *)(v48 + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          goto LABEL_74;
        }
        v30 = (NSString *)v7[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (NSString *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (NSString *)v7[2];
            v32 = *v31 == v7;
            v7 = v31;
          }
          while (!v32);
        }
        v7 = v31;
        if (v31 == v6)
          goto LABEL_39;
      }
      v10 = (void *)MEMORY[0x1E0C81028];
      v11 = MEMORY[0x1E0C81028];
      v9 = v10;
LABEL_13:
      v12 = v9;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
LABEL_31:

        goto LABEL_32;
      }
      v14 = (const char *)v7[4];
      v13 = v7[5];
      v15 = (std::__shared_weak_count *)v7[6];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        if (v13)
        {
          v18 = (void *)MEMORY[0x1E0CB3940];
          v19 = v13[34];
          v20 = *p_shared_owners + 1;
LABEL_21:
          objc_msgSend(v18, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v13, v19, v20);
          v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_23:
          v22 = v21;
          AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
          v23 = (id)objc_claimAutoreleasedReturnValue();
          v24 = (*(uint64_t (**)(NSString))(*(_QWORD *)v7[5] + 320))(v7[5]);
          v25 = "ILLEGAL";
          if (v24 <= 4)
            v25 = off_1E3BEC7A8[v24];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)v55 = "AVVCRecordingEngineMap.mm";
          *(_WORD *)&v55[8] = 1024;
          *(_DWORD *)&v55[10] = 62;
          v56 = 2048;
          v57 = v14;
          v58 = 2112;
          v59 = v22;
          v60 = 2112;
          v61 = v23;
          v62 = 2080;
          v63 = v25;
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Iterating through EngineMap. AVVCStreamHandle(%lu). AVVCRecordEngine[%@]. DeviceUID(%@). EngineType(%s)", buf, 0x3Au);

          this = v52;
          if (v15)
          {
            v26 = (unint64_t *)&v15->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }

          goto LABEL_31;
        }
      }
      else if (v13)
      {
        v20 = 0;
        v18 = (void *)MEMORY[0x1E0CB3940];
        v19 = v13[34];
        goto LABEL_21;
      }
      v21 = CFSTR("(0x0) use_count:0");
      goto LABEL_23;
    }
LABEL_39:
    if (kAVVCScope)
    {
      v33 = *(id *)kAVVCScope;
      if (!v33)
      {
LABEL_59:
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        goto LABEL_74;
      }
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v55 = "AVVCRecordingEngineMap.mm";
      *(_WORD *)&v55[8] = 1024;
      *(_DWORD *)&v55[10] = 68;
      v56 = 2112;
      v57 = (const char *)v5;
      _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching plugin engine found for deviceUUID: %@", buf, 0x1Cu);
    }

    goto LABEL_59;
  }
  AVVCRecordingEngineMap::findEngine(this, (uint64_t)a2, 1uLL);
  if (!*(_QWORD *)this)
  {
    AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, (uint64_t)a2, 2uLL);
    std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)buf);
    v34 = *(std::__shared_weak_count **)&v55[4];
    if (*(_QWORD *)&v55[4])
    {
      v35 = (unint64_t *)(*(_QWORD *)&v55[4] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (!*(_QWORD *)this)
    {
      if (kAVVCScope)
      {
        v37 = *(id *)kAVVCScope;
        if (!v37)
          goto LABEL_74;
      }
      else
      {
        v37 = MEMORY[0x1E0C81028];
        v44 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v55 = "AVVCRecordingEngineMap.mm";
        *(_WORD *)&v55[8] = 1024;
        *(_DWORD *)&v55[10] = 55;
        _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching engine found for nil deviceUUID", buf, 0x12u);
      }

    }
  }
LABEL_74:
  if (!v53)
    std::recursive_mutex::unlock(v51);

}

void sub_19B76F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  if (!a17)
    std::recursive_mutex::unlock(a12);

  _Unwind_Resume(a1);
}

void AVVCRecordingEngineMap::insertEngine(_QWORD **a1, unint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  id v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __CFString *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  __CFString *v52;
  _BYTE buf[28];
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (std::recursive_mutex *)(a1 + 3);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::recursive_mutex::lock(v6);
  v9 = (uint64_t *)(a1 + 1);
  v8 = a1[1];
  if (v8)
  {
    v10 = (uint64_t *)(a1 + 1);
    do
    {
      v11 = v8[4];
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = v8;
      else
        v13 = v8 + 1;
      if (v12)
        v10 = v8;
      v8 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != v9 && v10[4] <= a2)
    {
      if (kAVVCScope)
      {
        v14 = *(id *)kAVVCScope;
        if (!v14)
          goto LABEL_37;
      }
      else
      {
        v14 = (id)MEMORY[0x1E0C81028];
        v15 = MEMORY[0x1E0C81028];
      }
      v16 = v14;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_36:

LABEL_37:
        std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::__remove_node_pointer(a1, v10);
        std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(v10 + 5));
        operator delete(v10);
        goto LABEL_38;
      }
      v17 = v10[5];
      v18 = (std::__shared_weak_count *)v10[6];
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        if (v17)
        {
          v21 = (void *)MEMORY[0x1E0CB3940];
          v22 = *(_QWORD *)(v17 + 272);
          v23 = *p_shared_owners + 1;
LABEL_28:
          objc_msgSend(v21, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v17, v22, v23);
          v24 = (const __CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_30;
        }
      }
      else if (v17)
      {
        v23 = 0;
        v21 = (void *)MEMORY[0x1E0CB3940];
        v22 = *(_QWORD *)(v17 + 272);
        goto LABEL_28;
      }
      v24 = CFSTR("(0x0) use_count:0");
LABEL_30:
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AVVCRecordingEngineMap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 77;
      *(_WORD *)&buf[18] = 2112;
      v52 = (__CFString *)v24;
      *(_QWORD *)&buf[20] = v24;
      v54 = 2048;
      v55 = a2;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing engine[%@] for stream(%llu) from the map", buf, 0x26u);
      if (v18)
      {
        v25 = (unint64_t *)&v18->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      goto LABEL_36;
    }
  }
LABEL_38:
  v27 = *a3;
  v28 = (std::__shared_weak_count *)a3[1];
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = v27;
  *(_QWORD *)&buf[16] = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (uint64_t *)*v9;
  v32 = (uint64_t *)(a1 + 1);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v32 = v31;
        v33 = v31[4];
        if (v33 <= a2)
          break;
        v31 = (uint64_t *)*v32;
        v9 = v32;
        if (!*v32)
          goto LABEL_48;
      }
      if (v33 >= a2)
        break;
      v31 = (uint64_t *)v32[1];
      if (!v31)
      {
        v9 = v32 + 1;
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v34 = (char *)operator new(0x38uLL);
    *((_QWORD *)v34 + 4) = a2;
    *(_OWORD *)(v34 + 40) = *(_OWORD *)&buf[8];
    *(_OWORD *)&buf[8] = 0uLL;
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = v32;
    *v9 = (uint64_t)v34;
    v35 = (_QWORD *)**a1;
    if (v35)
    {
      *a1 = v35;
      v34 = (char *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v34);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
    v28 = *(std::__shared_weak_count **)&buf[16];
  }
  if (v28)
  {
    v36 = (unint64_t *)&v28->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!kAVVCScope)
  {
    v38 = (id)MEMORY[0x1E0C81028];
    v39 = MEMORY[0x1E0C81028];
LABEL_60:
    v40 = v38;
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
LABEL_76:

      goto LABEL_77;
    }
    v41 = *a3;
    v42 = (std::__shared_weak_count *)a3[1];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      if (v41)
      {
        v45 = (void *)MEMORY[0x1E0CB3940];
        v46 = *(_QWORD *)(v41 + 272);
        v47 = *v43 + 1;
LABEL_68:
        objc_msgSend(v45, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v41, v46, v47);
        v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_70;
      }
    }
    else if (v41)
    {
      v47 = 0;
      v45 = (void *)MEMORY[0x1E0CB3940];
      v46 = *(_QWORD *)(v41 + 272);
      goto LABEL_68;
    }
    v48 = CFSTR("(0x0) use_count:0");
LABEL_70:
    v49 = a1[2];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AVVCRecordingEngineMap.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 81;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v48;
    v54 = 2048;
    v55 = a2;
    v56 = 2048;
    v57 = v49;
    _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Added engine[%@] for stream(%llu) to the map of size %ld", buf, 0x30u);
    if (v42)
    {
      v50 = (unint64_t *)&v42->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    goto LABEL_76;
  }
  v38 = *(id *)kAVVCScope;
  if (v38)
    goto LABEL_60;
LABEL_77:
  if (!v7)
    std::recursive_mutex::unlock(v6);
}

void sub_19B76FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::recursive_mutex *v7;
  void *v8;
  int v9;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  if (!v9)
    std::recursive_mutex::unlock(v7);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

void AVVCRecordingEngineMap::removeEngine(AVVCRecordingEngineMap *this, unint64_t a2)
{
  std::recursive_mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  __CFString *v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)((char *)this + 24);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::recursive_mutex::lock(v4);
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7 = (uint64_t *)((char *)this + 8);
    do
    {
      v8 = v6[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != (uint64_t *)((char *)this + 8) && v7[4] <= a2)
    {
      v14 = v7[5];
      v13 = (std::__shared_weak_count *)v7[6];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      if (kAVVCScope)
      {
        v17 = *(id *)kAVVCScope;
        if (!v17)
          goto LABEL_50;
      }
      else
      {
        v17 = (id)MEMORY[0x1E0C81028];
        v18 = MEMORY[0x1E0C81028];
      }
      v19 = v17;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
LABEL_49:

LABEL_50:
        std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::__remove_node_pointer((uint64_t **)this, v7);
        std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(v7 + 5));
        operator delete(v7);
        if (v13)
        {
          v28 = (unint64_t *)&v13->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        goto LABEL_23;
      }
      if (v13)
      {
        v20 = (unint64_t *)&v13->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        if (v14)
        {
          v22 = (void *)MEMORY[0x1E0CB3940];
          v23 = *(_QWORD *)(v14 + 272);
          v24 = *v20 + 1;
LABEL_41:
          objc_msgSend(v22, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v14, v23, v24);
          v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_43;
        }
      }
      else if (v14)
      {
        v24 = 0;
        v22 = (void *)MEMORY[0x1E0CB3940];
        v23 = *(_QWORD *)(v14 + 272);
        goto LABEL_41;
      }
      v25 = CFSTR("(0x0) use_count:0");
LABEL_43:
      *(_DWORD *)buf = 136315906;
      v31 = "AVVCRecordingEngineMap.mm";
      v32 = 1024;
      v33 = 91;
      v34 = 2112;
      v35 = v25;
      v36 = 2048;
      v37 = a2;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing engine[%@] for stream(%llu) from the map", buf, 0x26u);
      if (v13)
      {
        v26 = (unint64_t *)&v13->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      goto LABEL_49;
    }
  }
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_23;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v31 = "AVVCRecordingEngineMap.mm";
    v32 = 1024;
    v33 = 95;
    v34 = 2048;
    v35 = (__CFString *)a2;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine for streamID(%llu) not found", buf, 0x1Cu);
  }

LABEL_23:
  if (!v5)
    std::recursive_mutex::unlock(v4);
}

void sub_19B770378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::recursive_mutex *v5;
  void *v6;
  int v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (!v7)
    std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngineMap::for_each_engine(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v5;
  int v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  NSObject *v28;
  NSObject *v29;
  int v31;
  _BYTE buf[18];
  __int16 v33;
  uint64_t v34;
  _QWORD v35[4];
  NSObject *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = (std::recursive_mutex *)(a1 + 3);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v6 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
  {
    std::recursive_mutex::lock(v5);
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  }
  v7 = IsSerializationEnabled(void)::enable;
  v31 = v6;
  if (IsSerializationEnabled(void)::enable)
    v8 = dispatch_group_create();
  else
    v8 = 0;
  v11 = (_QWORD *)*a1;
  v10 = a1 + 1;
  v9 = v11;
  if (v11 != v10)
  {
    do
    {
      v12 = v9[5];
      v13 = (std::__shared_weak_count *)v9[6];
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (v7)
        dispatch_group_enter(v8);
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3321888768;
      v35[2] = ___ZN22AVVCRecordingEngineMap15for_each_engineENSt3__18functionIFvNS0_10shared_ptrI19AVVCRecordingEngineEEEEEPKc_block_invoke;
      v35[3] = &unk_1E3BEB050;
      std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100]((uint64_t)v37, a2);
      v39 = v12;
      v40 = v13;
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v41 = v7;
      v36 = v8;
      (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v12 + 360))(v12, v35, "for_each_engine");

      v18 = v40;
      if (v40)
      {
        v19 = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v38;
      if (v38 == v37)
      {
        v21 = v37;
        v22 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_28;
        v22 = 5;
      }
      (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_28:
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      v25 = (_QWORD *)v9[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v9[2];
          v27 = *v26 == (_QWORD)v9;
          v9 = v26;
        }
        while (!v27);
      }
      v9 = v26;
    }
    while (v26 != v10);
  }
  if (v7 && dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL))
  {
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = v28;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCRecordingEngineMap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 132;
      v33 = 2080;
      v34 = a3;
      _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC_TIMEOUT occurred : for_each_engine : EngineDispatchGroup timed out! Caller: %s", buf, 0x1Cu);
    }

    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: AVVC_TIMEOUT occurred : for_each_engine timed out! Caller: %s", buf, 0xCu);
    }
    __break(1u);
  }
  else
  {

    if (!v31)
      std::recursive_mutex::unlock(v5);
  }
}

void sub_19B770770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  void *v26;
  _QWORD *v27;
  uint64_t v29;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a9);
  if (a26 == v27)
  {
    v29 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
    v27 = a26;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v29))(v27);
LABEL_6:
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a14);

  if (!a13)
    std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void ___ZN22AVVCRecordingEngineMap15for_each_engineENSt3__18functionIFvNS0_10shared_ptrI19AVVCRecordingEngineEEEEEPKc_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*(_BYTE *)(a1 + 88))
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_19B77089C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_40c65_ZTSNSt3__18functionIFvNS_10shared_ptrI19AVVCRecordingEngineEEEEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

_QWORD *__destroy_helper_block_ea8_40c65_ZTSNSt3__18functionIFvNS_10shared_ptrI19AVVCRecordingEngineEEEEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 40);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 72);
  result = *(_QWORD **)(a1 + 64);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void AVVCRecordingEngineMap::listEngines(AVVCRecordingEngineMap *this)
{
  char *v2;
  char *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  BOOL v26;
  NSObject *v27;
  id v28;
  std::recursive_mutex *v29;
  int v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  __CFString *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v29 = (std::recursive_mutex *)((char *)this + 24);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v30 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::recursive_mutex::lock(v29);
  if (*((_QWORD *)this + 2))
  {
    v4 = *(char **)this;
    v2 = (char *)this + 8;
    v3 = v4;
    if (v4 != v2)
    {
      while (1)
      {
        if (kAVVCScope)
        {
          v5 = *(id *)kAVVCScope;
          if (!v5)
            goto LABEL_30;
        }
        else
        {
          v6 = (void *)MEMORY[0x1E0C81028];
          v7 = MEMORY[0x1E0C81028];
          v5 = v6;
        }
        v8 = v5;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          break;
LABEL_29:

LABEL_30:
        v24 = (char *)*((_QWORD *)v3 + 1);
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = *(char **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (char *)*((_QWORD *)v3 + 2);
            v26 = *(_QWORD *)v25 == (_QWORD)v3;
            v3 = v25;
          }
          while (!v26);
        }
        v3 = v25;
        if (v25 == v2)
          goto LABEL_44;
      }
      v9 = *((_QWORD *)v3 + 5);
      v10 = (std::__shared_weak_count *)*((_QWORD *)v3 + 6);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        if (v9)
        {
          v13 = (void *)MEMORY[0x1E0CB3940];
          v14 = *(_QWORD *)(v9 + 272);
          v15 = *p_shared_owners + 1;
LABEL_19:
          objc_msgSend(v13, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v9, v14, v15);
          v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_21:
          v17 = v16;
          v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 5) + 320))(*((_QWORD *)v3 + 5));
          v19 = "ILLEGAL";
          if (v18 <= 4)
            v19 = off_1E3BEC7A8[v18];
          v20 = *((_QWORD *)v3 + 4);
          AVVCRouteManager::getRecordDeviceUID(*(id **)(*((_QWORD *)v3 + 5) + 376));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136316418;
          v32 = "AVVCRecordingEngineMap.mm";
          v33 = 1024;
          v34 = 147;
          v35 = 2112;
          v36 = v17;
          v37 = 2080;
          v38 = v19;
          v39 = 2048;
          v40 = v20;
          v41 = 2112;
          v42 = v21;
          _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine[%@] type(%s) stream(%llu) deviceUID(%@)", buf, 0x3Au);

          if (v10)
          {
            v22 = (unint64_t *)&v10->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }

          goto LABEL_29;
        }
      }
      else if (v9)
      {
        v15 = 0;
        v13 = (void *)MEMORY[0x1E0CB3940];
        v14 = *(_QWORD *)(v9 + 272);
        goto LABEL_19;
      }
      v16 = CFSTR("(0x0) use_count:0");
      goto LABEL_21;
    }
  }
  else
  {
    if (kAVVCScope)
    {
      v27 = *(id *)kAVVCScope;
      if (!v27)
        goto LABEL_44;
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v32 = "AVVCRecordingEngineMap.mm";
      v33 = 1024;
      v34 = 142;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Empty Engine Map", buf, 0x12u);
    }

  }
LABEL_44:
  if (!v30)
    std::recursive_mutex::unlock(v29);
}

void sub_19B770D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, int a14, int a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  if (!a15)
    std::recursive_mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t AUGraphParser::TraverseGraphNodes(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = a4;
  v6 = *(_QWORD *)(a5 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v6 + 48))(v6, a3, buf);
  if (!(_DWORD)result)
  {
    v11 = a3 + 9;
    v12 = a3 + 10;
    if ((_DWORD)a1 == 1)
      v12 = a3 + 7;
    v13 = *v12;
    if ((_DWORD)a1 == 1)
      v11 = a3 + 6;
    v14 = (unint64_t)(v13 - *v11) >> 3;
    if ((int)v14 < 1)
    {
      return 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 24))(a3, a1, v15);
        if (v17)
        {
          v21 = 0;
          v22 = -1;
          v23 = 0;
          v24 = -1;
          if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*a3 + 32))(a3, a1, v15, &v21) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              v26 = 1024;
              v27 = 71;
              v28 = 2080;
              v29 = "AVAudioEngineGraph.mm";
              v30 = 1024;
              v31 = 89;
              v32 = 2080;
              v33 = "TraverseGraphNodes";
              v34 = 2080;
              v35 = "inCurrNode.GetConnection(inDirection, bus, conn)";
              _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inCurrNode.GetConnection(inDirection, bus, conn)");
          }
          if (a2)
          {
            v19 = AUGraphParser::TraverseGraphNodes(a1, 1, v17, &v21, a5);
          }
          else
          {
            *(_QWORD *)buf = &v21;
            v20 = *(_QWORD *)(a5 + 24);
            if (!v20)
              std::__throw_bad_function_call[abi:ne180100]();
            v19 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v20 + 48))(v20, v17, buf);
          }
          if (v19 == 1)
            break;
        }
        v15 = (v15 + 1);
        v16 = (int)v15 < (int)v14;
      }
      while ((_DWORD)v14 != (_DWORD)v15);
    }
    return v16;
  }
  return result;
}

uint64_t AUGraphParser::TraverseGraphNodesBFS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t *i;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE buf[12];
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = a3;
  v5 = *(_QWORD *)(a4 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, a2, buf);
  if (!(_DWORD)v8)
  {
    v30 = (uint64_t)&v30;
    v31 = &v30;
    v32 = 0;
    AUGraphNodeBase::GetValidConnections(a2, a1, &v30);
    if (v32 == 1)
    {
      v9 = v31;
      v10 = 4;
      if ((_DWORD)a1 == 1)
        v10 = 2;
      v11 = v31[v10];
      if (!v11)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v34 = 1024;
          v35 = 71;
          v36 = 2080;
          v37 = "AVAudioEngineGraph.mm";
          v38 = 1024;
          v39 = 123;
          v40 = 2080;
          v41 = "TraverseGraphNodesBFS";
          v42 = 2080;
          v43 = "connNode";
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "connNode");
        v9 = v31;
      }
      v8 = AUGraphParser::TraverseGraphNodesBFS(a1, v11, v9 + 2, a4);
    }
    else
    {
      v13 = v31;
      if (v31 == &v30)
      {
LABEL_51:
        v8 = 0;
      }
      else
      {
        do
        {
          if ((_DWORD)a1 == 1)
            v14 = 2;
          else
            v14 = 4;
          v15 = v13[v14];
          if (!v15)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              v34 = 1024;
              v35 = 71;
              v36 = 2080;
              v37 = "AVAudioEngineGraph.mm";
              v38 = 1024;
              v39 = 131;
              v40 = 2080;
              v41 = "TraverseGraphNodesBFS";
              v42 = 2080;
              v43 = "connNode";
              _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "connNode");
          }
          *(_QWORD *)buf = v13 + 2;
          v17 = *(_QWORD *)(a4 + 24);
          if (!v17)
            std::__throw_bad_function_call[abi:ne180100]();
          if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v15, buf) == 1)
          {
LABEL_53:
            v8 = 1;
            goto LABEL_54;
          }
          v13 = (uint64_t *)v13[1];
        }
        while (v13 != &v30);
        v18 = v31;
        if (v31 == &v30)
          goto LABEL_51;
        while (2)
        {
          if ((_DWORD)a1 == 1)
            v19 = 2;
          else
            v19 = 4;
          v20 = v18[v19];
          if (!v20)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v21 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              v34 = 1024;
              v35 = 71;
              v36 = 2080;
              v37 = "AVAudioEngineGraph.mm";
              v38 = 1024;
              v39 = 144;
              v40 = 2080;
              v41 = "TraverseGraphNodesBFS";
              v42 = 2080;
              v43 = "connNodeFirst";
              _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "connNodeFirst");
          }
          v27 = (uint64_t)&v27;
          v28 = &v27;
          v29 = 0;
          AUGraphNodeBase::GetValidConnections(v20, a1, &v27);
          for (i = v28; i != &v27; i = (uint64_t *)i[1])
          {
            if ((_DWORD)a1 == 1)
              v23 = 2;
            else
              v23 = 4;
            v24 = i[v23];
            if (!v24)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                v34 = 1024;
                v35 = 71;
                v36 = 2080;
                v37 = "AVAudioEngineGraph.mm";
                v38 = 1024;
                v39 = 151;
                v40 = 2080;
                v41 = "TraverseGraphNodesBFS";
                v42 = 2080;
                v43 = "connNodeSecond";
                _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
              }
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "connNodeSecond");
            }
            if (AUGraphParser::TraverseGraphNodesBFS(a1, v24, i + 2, a4) == 1)
            {
              std::__list_imp<AUGraphConnection>::clear(&v27);
              goto LABEL_53;
            }
          }
          std::__list_imp<AUGraphConnection>::clear(&v27);
          v8 = 0;
          v18 = (uint64_t *)v18[1];
          if (v18 != &v30)
            continue;
          break;
        }
      }
    }
LABEL_54:
    std::__list_imp<AUGraphConnection>::clear(&v30);
  }
  return v8;
}

void sub_19B771634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<AUGraphConnection>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t AUGraphParser::TraverseMIDIGraphNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 256))(*(_QWORD *)(a1 + 24)) != 1635085673)
    goto LABEL_4;
  v7 = 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a1, &v7);
  if (!(_DWORD)result)
  {
LABEL_4:
    v6 = *(_QWORD *)(a1 + 112);
    if (!v6)
      return 0;
    result = AUGraphParser::TraverseMIDIGraphNodes(v6, a2);
    if ((_DWORD)result != 1)
      return 0;
  }
  return result;
}

void std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *AUGraphParser::GetNodeConnectionsToMixer(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  int v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v10 = a3;
  std::__list_imp<AUGraphConnection>::clear(a2);
  if (a3)
    *a3 = 0;
  v9 = 0;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E3BE9C30;
  v6[1] = &v11;
  v6[2] = a1;
  v6[3] = &v9;
  v6[4] = a2;
  v6[5] = &v10;
  v13 = v6;
  AUGraphParser::TraverseGraphNodes(0, 1, a1, 0, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_19B771868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3BE9C30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3BE9C30;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v5;
  uint64_t v6;
  _BYTE **v7;
  uint64_t *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;

  v5 = *a3;
  if (*a3)
  {
    v6 = *(_QWORD *)&v5[**(_DWORD **)(a1 + 8) != 0];
    if (v6 && (v6 == *(_QWORD *)(a1 + 16) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6)))
      **(_BYTE **)(a1 + 24) = 0;
    v7 = (_BYTE **)(a1 + 24);
    if (**(_BYTE **)(a1 + 24))
      return 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2))
    {
      v8 = *(uint64_t **)(a1 + 32);
      v9 = operator new(0x30uLL);
      v10 = v5[1];
      v9[1] = *v5;
      v9[2] = v10;
      v11 = *v8;
      *(_QWORD *)v9 = *v8;
      *((_QWORD *)v9 + 1) = v8;
      *(_QWORD *)(v11 + 8) = v9;
      *v8 = (uint64_t)v9;
      ++v8[2];
      result = 2;
LABEL_13:
      **v7 = 1;
      return result;
    }
  }
  else if (**(_BYTE **)(a1 + 24))
  {
    return 0;
  }
  if (**(_QWORD **)(a1 + 40))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
    if (!(_DWORD)result)
      return result;
    result = 0;
    v7 = *(_BYTE ***)(a1 + 40);
    goto LABEL_13;
  }
  return 0;
}

void AUGraphParser::InformNodesAboutMixerConnection(_QWORD *a1, uint64_t a2, NSError **a3)
{
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12[2];
  int v13;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = 1;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  else
    v7 = 0;
  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 345, "InformNodesAboutMixerConnection", "inMixerConn.destNode && inMixerConn.destNode->IsMixerNode()", v7, 4294967246, a3))
  {
    v14 = *(_QWORD *)(a2 + 16);
    v13 = *(_DWORD *)(a2 + 24);
    v12[0] = 0;
    v12[1] = 0;
    v11 = v12;
    v8 = operator new(0x28uLL);
    *v8 = &off_1E3BE5620;
    v8[1] = &v14;
    v8[2] = &v13;
    v8[3] = &v15;
    v8[4] = &v11;
    v17 = v8;
    AUGraphParser::TraverseGraphNodes(1, 1, a1, 0, (uint64_t)v16);
    v9 = v17;
    if (v17 == v16)
    {
      v10 = 4;
      v9 = v16;
    }
    else
    {
      if (!v17)
      {
LABEL_10:
        std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(v12[0]);
        return;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_10;
  }
}

void sub_19B771B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t _AVAE_CheckAndReturnErr(char *a1, int a2, const char *a3, const char *a4, char a5, uint64_t a6, NSError **a7)
{
  uint64_t v7;
  NSObject *v13;
  char *v14;
  char *v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) != 0)
    return 0;
  v7 = a6;
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    if (a1)
    {
      v14 = strrchr(a1, 47);
      if (v14)
        v15 = v14 + 1;
      else
        v15 = a1;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)buf = 136316418;
    v18 = "AVAEInternal.h";
    v19 = 1024;
    v20 = 83;
    v21 = 2080;
    v22 = v15;
    v23 = 1024;
    v24 = a2;
    v25 = 2080;
    v26 = a3;
    v27 = 2080;
    v28 = a4;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  if (a7)
    *a7 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.avfaudio"), (int)v7, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4), CFSTR("false condition"), 0));
  else
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), a4);
  return v7;
}

void std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3BE5620;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5620;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;

  v5 = *a3;
  if (*a3)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6))
      {
        **(_QWORD **)(a1 + 8) = *(_QWORD *)(v5 + 16);
        v7 = (_DWORD *)(v5 + 24);
LABEL_5:
        **(_DWORD **)(a1 + 16) = *v7;
        goto LABEL_18;
      }
      if (**(_DWORD **)(a1 + 24) == 1)
      {
        v8 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD **)(v8 + 8);
        v9 = (_QWORD *)(v8 + 8);
        v10 = v11;
        if (v11)
        {
          v12 = *(_QWORD *)(v5 + 16);
          v13 = v9;
          do
          {
            v14 = v10[4];
            v15 = v14 >= v12;
            if (v14 >= v12)
              v16 = v10;
            else
              v16 = v10 + 1;
            if (v15)
              v13 = v10;
            v10 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 != v9 && v12 >= v13[4])
          {
            **(_QWORD **)(a1 + 8) = v13[5];
            v7 = v13 + 6;
            goto LABEL_5;
          }
        }
      }
    }
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 24) == 1 && (int)((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3) >= 2)
  {
    v17 = *(uint64_t ***)(a1 + 32);
    v18 = **(_QWORD **)(a1 + 8);
    v19 = **(_DWORD **)(a1 + 16);
    v21 = v17 + 1;
    v20 = v17[1];
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v22 = (uint64_t **)v20;
          v23 = v20[4];
          if (v23 <= a2)
            break;
          v20 = *v22;
          v21 = v22;
          if (!*v22)
            goto LABEL_28;
        }
        if (v23 >= a2)
          break;
        v20 = v22[1];
        if (!v20)
        {
          v21 = v22 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
      v22 = v17 + 1;
LABEL_28:
      v24 = operator new(0x38uLL);
      v24[4] = a2;
      v24[5] = v18;
      *((_DWORD *)v24 + 12) = v19;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v22;
      *v21 = v24;
      v25 = (uint64_t *)**v17;
      if (v25)
      {
        *v17 = v25;
        v26 = *v21;
      }
      else
      {
        v26 = v24;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v17[1], v26);
      v17[2] = (uint64_t *)((char *)v17[2] + 1);
    }
  }
  v27 = **(_QWORD **)(a1 + 8);
  if (v27 && **(_DWORD **)(a1 + 16) != -1)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 368))(*(_QWORD *)(a2 + 24), *(_QWORD *)(v27 + 16));
  return 0;
}

_QWORD *AUGraphParser::InformNodesAboutMixerDisconnection(_QWORD *a1, uint64_t a2, NSError **a3)
{
  uint64_t v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  else
    v7 = 0;
  result = (_QWORD *)_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 391, "InformNodesAboutMixerDisconnection", "inMixerConn.destNode && inMixerConn.destNode->IsMixerNode()", v7, 4294967246, a3);
  if (!(_DWORD)result)
  {
    v10[0] = &off_1E3BE5740;
    v10[1] = a2;
    v11 = v10;
    AUGraphParser::TraverseGraphNodes(1, 1, a1, 0, (uint64_t)v10);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19B772150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5740;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5740;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, _QWORD **a2)
{
  (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*a2[3] + 376))(a2[3], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 16), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24), 0);
  if (!((unsigned int (*)(_QWORD **))(*a2)[15])(a2) || *(_QWORD ***)(*(_QWORD *)(a1 + 8) + 16) == a2)
    return 0;
  else
    return 2;
}

BOOL AUGraphParser::IsNodeConnectedToTarget(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a3 == a3[1])
    return 0;
  v6 = 0;
  v7[0] = &off_1E3BE5590;
  v7[1] = a3;
  v7[2] = &v6;
  v8 = v7;
  AUGraphParser::TraverseGraphNodes(a1, 1, a2, 0, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_7;
  }
  if (v8)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v6 != 0;
}

void sub_19B772330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t result;

  v3 = **(_QWORD ***)(a1 + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  while (v3 != v2)
  {
    if (*v3 == a2)
      goto LABEL_6;
    ++v3;
  }
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
LABEL_6:
  if (v2 == v3)
    return 0;
  v4 = *(_BYTE **)(a1 + 16);
  result = 1;
  *v4 = 1;
  return result;
}

uint64_t AUGraphParser::InitializeNode(AUGraphParser *this, const AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3, int a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = (int)a3;
  v9[0] = this;
  v9[1] = &v10;
  if (a4)
  {
    v11[0] = &off_1E3BE5428;
    v11[1] = v9;
    v12 = v11;
    AUGraphParser::TraverseMIDIGraphNodes((uint64_t)a2, (uint64_t)v11);
    v6 = v12;
    if (v12 == v11)
    {
      v7 = 4;
      v6 = v11;
      goto LABEL_6;
    }
    if (v12)
    {
      v7 = 5;
LABEL_6:
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 8 * v7))(v6, v5);
    }
  }
  return AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()((uint64_t)v9, (uint64_t)a2);
}

void sub_19B7724E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 48))
    goto LABEL_2;
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        v10 = "AVAEInternal.h";
        v11 = 1024;
        v12 = 104;
        v13 = 2080;
        v14 = "AVAudioEngineGraph.mm";
        v15 = 1024;
        v16 = 438;
        v17 = 2080;
        v18 = "operator()";
        v19 = 2080;
        v20 = "inGraph.PerformCommand(theNode, AVAudioEngineGraph::kAUSetPropertyMaximumFramesPerSlice, &maxFrames, sizeof(maxFrames))";
        v21 = 1024;
        v22 = -10849;
        _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), 4294956447);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 248))(a2, v7);
    }
  }
  result = AVAudioEngineGraph::PerformCommand(*(_QWORD *)a1, (_QWORD *)a2, 3, 0, 0);
  if (!(_DWORD)result)
  {
LABEL_2:
    v4 = **(_DWORD **)(a1 + 8);
    result = 0;
    if ((v4 & 0x3F) != 0)
    {
      if ((v4 & 0x20) != 0)
        v6 = **(_DWORD **)(a1 + 8) & 0x1F;
      else
        v6 = *(_DWORD *)(a2 + 32) | **(_DWORD **)(a1 + 8) & 0x3F;
      *(_DWORD *)(a2 + 32) = v6;
    }
    else
    {
      *(_DWORD *)(a2 + 32) = 0;
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::PerformCommand(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  AudioComponentDescription *v11;
  AUGraphSequencerInterface *v12;
  char v13;
  uint64_t v14;
  AudioComponentDescription *v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  AUGraphSequencerInterface *v19;
  uint64_t (*v21)(_QWORD *);
  AUGraphSequencerInterface *v22;
  void *__p[2];
  char v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 3:
      if (*(_BYTE *)(a2[3] + 48))
        return 0;
      v14 = (*(uint64_t (**)(_QWORD *))(*a2 + 184))(a2);
      if ((_DWORD)v14)
      {
        v8 = v14;
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
        {
          v17 = a2[2];
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, a2[3]);
          if (v24 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVAudioEngineGraph.mm";
          v26 = 1024;
          v27 = 3314;
          v28 = 2048;
          v29 = a1;
          v30 = 2048;
          v31 = v17;
          v32 = 2080;
          v33 = v18;
          v34 = 1024;
          v35 = v8;
          _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: couldn't initialize node@%p {%s}, error %d", buf, 0x36u);
          if (v24 < 0)
            operator delete(__p[0]);
        }
        return v8;
      }
      v22 = *(AUGraphSequencerInterface **)(a1 + 80);
      if (v22)
        AUGraphSequencerInterface::NodeStateChanged(v22, (_QWORD **)a2, 1u, v15);
      return 0;
    case 4:
      if (*(_BYTE *)(a2[3] + 48)
        && (!*(_BYTE *)(a1 + 185) || ((*(uint64_t (**)(_QWORD *))(*a2 + 128))(a2) & 1) == 0))
      {
        v19 = *(AUGraphSequencerInterface **)(a1 + 80);
        if (v19)
          AUGraphSequencerInterface::NodeStateChanged(v19, (_QWORD **)a2, 2u, (AudioComponentDescription *)a4);
        (*(void (**)(_QWORD *))(*a2 + 192))(a2);
      }
      return 0;
    case 5:
      (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 88))(a2[3]);
      return 0;
    case 6:
      if (!(*(unsigned int (**)(_QWORD *))(*a2 + 128))(a2))
        return 4294967246;
      v21 = *(uint64_t (**)(_QWORD *))(*a2 + 224);
      return v21(a2);
    case 7:
      if ((*(unsigned int (**)(_QWORD *))(*a2 + 128))(a2))
      {
        v21 = *(uint64_t (**)(_QWORD *))(*a2 + 232);
        return v21(a2);
      }
      else
      {
        return 4294967246;
      }
    case 8:
    case 9:
      v8 = 4294967246;
      if (!a4 || a5 != 32)
        return v8;
      v9 = a3 == 8;
      v10 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)buf = *(_QWORD *)a4;
      *(_DWORD *)&buf[8] = v10;
      (*(void (**)(_QWORD, _BOOL8, _QWORD, _BYTE *))(**(_QWORD **)(a4 + 16) + 256))(*(_QWORD *)(a4 + 16), v9, *(unsigned int *)(a4 + 24), buf);
      v12 = *(AUGraphSequencerInterface **)(a1 + 80);
      v13 = !v9;
      if (!v12)
        v13 = 1;
      if ((v13 & 1) == 0)
        AUGraphSequencerInterface::NodeStateChanged(v12, *(_QWORD ***)(a4 + 16), 0x8001u, v11);
      return 0;
    default:
      return 0;
  }
}

void AUGraphSequencerInterface::NodeStateChanged(AUGraphSequencerInterface *this, _QWORD **a2, unsigned int a3, AudioComponentDescription *a4)
{
  _QWORD **v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t NodeFromMap;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 3))
    return;
  v7 = (_QWORD **)*((_QWORD *)this + 4);
  if (v7)
  {
    if (v7 != a2)
      return;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (a3 != 4)
    {
      v18 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 185))
      {
        NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(*(AVAudioEngineGraph **)this, *(AVAudioNodeImplBase **)(v18 + 24));
        if (a3 != 32769
          || !NodeFromMap
          || *(_BYTE *)(v18 + 184) && !((unsigned int (*)(_QWORD **))(*a2)[15])(a2))
        {
          return;
        }
      }
      else
      {
        if (a3 != 1)
          return;
        v20 = *(_DWORD *)(*(uint64_t (**)(_QWORD *))(*a2[3] + 256))(a2[3]);
        v21 = v20 == 1635086953 || v20 == 1635085685;
        if (!v21 || !*((_BYTE *)a2[3] + 48))
          return;
      }
    }
    v28 = 0;
    if (AUGraphSequencerInterface::GetDefaultMusicDevice((AVAudioNodeImplBase ***)this, (unint64_t)&v28, 0, a4)|| !v28)
    {
      return;
    }
    if (!*((_QWORD *)this + 4))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v30 = "AVAEInternal.h";
        v31 = 1024;
        v32 = 71;
        v33 = 2080;
        v34 = "AVAudioEngineGraph.mm";
        v35 = 1024;
        v36 = 4543;
        v37 = 2080;
        v38 = "NodeStateChanged";
        v39 = 2080;
        v40 = "GetMusicDeviceNode()";
        _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetMusicDeviceNode()");
    }
    v8 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(1uLL);
    *v8 = 4;
    v9 = v8 + 1;
    v10 = (char *)&v8[v13];
    v11 = v28;
  }
  if (!(a3 >> 15) && *((_QWORD ***)this + 4) == a2)
  {
    if (v9 >= (unsigned int *)v10)
    {
      v22 = v9 - v8;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v24 = v10 - (char *)v8;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(v25);
      v26 = (unsigned int *)(v25 + 4 * v22);
      *v26 = a3;
      v14 = v26 + 1;
      while (v9 != v8)
      {
        v27 = *--v9;
        *--v26 = v27;
      }
      if (v8)
        operator delete(v8);
      v8 = v26;
      goto LABEL_20;
    }
    *v9++ = a3;
  }
  v14 = v9;
LABEL_20:
  if (v8 == v14)
  {
    v8 = v14;
  }
  else
  {
    if (!v11)
    {
      v15 = *((_QWORD *)this + 4);
      if (!v15)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v30 = "AVAEInternal.h";
          v31 = 1024;
          v32 = 71;
          v33 = 2080;
          v34 = "AVAudioEngineGraph.mm";
          v35 = 1024;
          v36 = 4564;
          v37 = 2080;
          v38 = "NodeStateChanged";
          v39 = 2080;
          v40 = "GetMusicDeviceNode()";
          _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetMusicDeviceNode()");
        v15 = *((_QWORD *)this + 4);
      }
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 24) + 224))(*(_QWORD *)(v15 + 24));
    }
    if (**((_QWORD **)this + 3))
    {
      v17 = v8;
      do
        (**((void (***)(_QWORD, uint64_t, _QWORD))this + 3))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), v11, *v17++);
      while (v17 != v14);
    }
    if (a3 == 3 && *((_QWORD ***)this + 4) == a2)
      *((_QWORD *)this + 4) = 0;
  }
  if (v8)
    operator delete(v8);
}

void sub_19B772ECC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t AVAudioEngineGraph::GetNodeFromMap(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;

  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v7 = *(_QWORD **)(v4 + 8);
  v5 = (_QWORD *)(v4 + 8);
  v6 = v7;
  if (!v7)
    goto LABEL_13;
  v8 = v5;
  do
  {
    v9 = v6[4];
    v10 = v9 >= (unint64_t)a2;
    if (v9 >= (unint64_t)a2)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v5 || v8[4] > (unint64_t)a2)
LABEL_13:
    v8 = v5;
  return v8[5];
}

uint64_t AUGraphSequencerInterface::GetDefaultMusicDevice(AVAudioNodeImplBase ***this, unint64_t a2, unint64_t a3, AudioComponentDescription *a4)
{
  NSObject *v7;
  AVAudioNodeImplBase **v8;
  std::recursive_mutex *v9;
  _QWORD *NodeFromMap;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  _BYTE buf[18];
  __int16 v21;
  _BYTE v22[14];
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 | a3)
  {
    if (a2)
      *(_QWORD *)a2 = 0;
    if (a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      v21 = 2080;
      *(_QWORD *)v22 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = 4645;
      v23 = 2080;
      v24 = "GetDefaultMusicDevice";
      v25 = 2080;
      v26 = "outUnit || outDesc";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outUnit || outDesc");
  }
  v8 = *this;
  v9 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v9);
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, v8[3]);
  if (NodeFromMap)
  {
    v19 = 0;
    *(_QWORD *)buf = &off_1E3BE5B30;
    *(_QWORD *)&buf[8] = &v19;
    *(_QWORD *)&v22[4] = buf;
    AUGraphParser::TraverseGraphNodes(1, 1, NodeFromMap, 0, (uint64_t)buf);
    v11 = *(_QWORD **)&v22[4];
    if (*(_BYTE **)&v22[4] == buf)
    {
      v12 = 4;
      v11 = buf;
    }
    else
    {
      if (!*(_QWORD *)&v22[4])
      {
LABEL_22:
        v15 = v19;
        this[4] = (AVAudioNodeImplBase **)v19;
        if (v15)
        {
          if (a2)
            *(_QWORD *)a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 24) + 224))(*(_QWORD *)(v15 + 24));
          if (a3)
          {
            v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 24) + 256))(*(_QWORD *)(v19 + 24));
            v17 = *(_OWORD *)v16;
            *(_DWORD *)(a3 + 16) = *(_DWORD *)(v16 + 16);
            *(_OWORD *)a3 = v17;
          }
        }
        v14 = 0;
        goto LABEL_28;
      }
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
    goto LABEL_22;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AVAudioEngineGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4660;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Can't retrieve source node to play sequence because there is no output node!", buf, 0x12u);
  }
  v14 = 4294956420;
LABEL_28:
  std::recursive_mutex::unlock(v9);
  return v14;
}

void sub_19B773260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex *v14;

  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5B30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5B30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 256))(*(_QWORD *)(a2 + 24));
  if (v4 != 1635086953 && v4 != 1635085685)
    return 0;
  **(_QWORD **)(a1 + 8) = a2;
  return 1;
}

BOOL AVAudioEngineGraph::IsNodeInGraph(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  if (!a2)
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (_QWORD *)(v2 + 8);
  v4 = v5;
  if (!v5)
    goto LABEL_14;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > (unint64_t)a2)
LABEL_14:
    v6 = v3;
  return v6 != v3;
}

void std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5428;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5428;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  return AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()(*(_QWORD *)(a1 + 8), a2) != 0;
}

_QWORD *AUGraphParser::UninitializeNode(AUGraphParser *this, const AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3)
{
  int v3;
  _QWORD *result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _BYTE buf[34];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v3 = (int)a3;
  v18 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  result = (_QWORD *)AVAudioEngineGraph::PerformCommand((uint64_t)this, a2, 4, 0, 0);
  if ((_DWORD)result)
  {
    v7 = (uint64_t)result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 467;
      v12 = 2080;
      v13 = "UninitializeNode";
      v14 = 2080;
      v15 = "inGraph.PerformCommand(node, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
      v16 = 1024;
      v17 = v7;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    result = (_QWORD *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v7);
  }
  *((_DWORD *)a2 + 8) = 0;
  if (v3)
  {
    *(_QWORD *)buf = &off_1E3BE5470;
    *(_QWORD *)&buf[8] = this;
    *(_QWORD *)&buf[16] = &v10;
    *(_QWORD *)&buf[24] = buf;
    AUGraphParser::TraverseMIDIGraphNodes((uint64_t)a2, (uint64_t)buf);
    result = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v9 = 4;
      result = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19B773680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t result;
  int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  for (i = *(_QWORD *)(a2 + 128); i != *(_QWORD *)(a2 + 136); i += 8)
  {
    if (*(_QWORD *)i && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)i + 24) + 48))
      return 1;
  }
  v5 = AVAudioEngineGraph::PerformCommand(*(_QWORD *)(a1 + 8), (_QWORD *)a2, 4, 0, 0);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v12 = "AVAEInternal.h";
      v13 = 1024;
      v14 = 104;
      v15 = 2080;
      v16 = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 477;
      v19 = 2080;
      v20 = "operator()";
      v21 = 2080;
      v22 = "inGraph.PerformCommand(midiNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
      v23 = 1024;
      v24 = v6;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v6);
  }
  v8 = **(_DWORD **)(a1 + 16);
  result = 0;
  if ((v8 & 0x3F) != 0)
  {
    if ((v8 & 0x20) != 0)
      v10 = **(_DWORD **)(a1 + 16) & 0x1F;
    else
      v10 = *(_DWORD *)(a2 + 32) | **(_DWORD **)(a1 + 16) & 0x3F;
    *(_DWORD *)(a2 + 32) = v10;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t AUGraphParser::InitializeNodeChain(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = a4;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E3BE54B8;
  v7[1] = &v12;
  v7[2] = a1;
  v7[3] = &v11;
  v14 = v7;
  AUGraphParser::TraverseGraphNodes(a2, 1, a3, 0, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v11;
}

void sub_19B7739DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3BE54B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE54B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AVAudioEngineGraph *a2)
{
  uint64_t NodeFromMap;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (**(_DWORD **)(a1 + 8) != 1)
    goto LABEL_15;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_15;
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(*(AVAudioEngineGraph **)(a1 + 16), *(AVAudioNodeImplBase **)(*(_QWORD *)(a1 + 16) + 16));
  if (!NodeFromMap)
    goto LABEL_15;
  v5 = NodeFromMap;
  v6 = *((_QWORD *)a2 + 1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)NodeFromMap + 136))(NodeFromMap) & 1) != 0
    || !v6
    || (v7 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 24) + 72))(*(_QWORD *)(v5 + 24), 0), v8 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 48))(*((_QWORD *)a2 + 3), *(unsigned int *)(v6 + 8)), v7)&& (objc_msgSend(v7, "sampleRate"), v9 > 0.0)&& objc_msgSend(v7, "channelCount")&& (objc_msgSend(v8, "sampleRate"), v11 = v10, objc_msgSend(v7, "sampleRate"), v11 == v12))
  {
LABEL_15:
    v15 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)**(unsigned int **)(a1 + 8), **(_DWORD **)(a1 + 8) == 2);
    **(_DWORD **)(a1 + 24) = v15;
    return v15 != 0;
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      v16 = 136315906;
      v17 = "AVAudioEngineGraph.mm";
      v18 = 1024;
      v19 = 504;
      v20 = 2080;
      v21 = objc_msgSend((id)objc_msgSend(v7, "description"), "UTF8String");
      v22 = 2080;
      v23 = objc_msgSend((id)objc_msgSend(v8, "description"), "UTF8String");
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error, formats don't match! Input HW format: %s, tap format: %s", (uint8_t *)&v16, 0x26u);
    }
    **(_DWORD **)(a1 + 24) = -10868;
    return 1;
  }
}

_QWORD *AUGraphParser::UninitializeNodeChain(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6[0] = &off_1E3BE5500;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  AUGraphParser::TraverseGraphNodes(a2, 1, a3, 0, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_19B773D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2, uint64_t *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a3;
  if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)a2 + 112))(a2)
    && (v5 ? (v6 = **(_DWORD **)(a1 + 8) == 1) : (v6 = 0),
        v6 && (int)((*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3) >= 1))
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(const AVAudioEngineGraph *, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, v7);
      if (v8)
      {
        if (v8 != *(_QWORD *)(v5 + 16) && (*(_BYTE *)(v8 + 32) & 2) != 0)
          return 2;
      }
      v7 = (v7 + 1);
      if ((int)v7 >= (int)((*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3))
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    AUGraphParser::UninitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)1);
    return 0;
  }
}

uint64_t AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph *a1, AVAudioNodeImplBase **a2, _BYTE *a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  unsigned int v25;
  NSError **v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *i;
  uint64_t Disconnection;
  NSObject *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t *v40;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  void *__p;
  uint64_t *v58;
  AVAudioNodeImplBase **v59;
  void **p_p;
  _BYTE buf[12];
  __int16 v62;
  int v63;
  __int16 v64;
  _BYTE v65[14];
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  *a3 = 0;
  if (!AVAudioEngineGraph::IsNodeInGraph(a1, a2[3]))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v62 = 1024;
      v63 = 71;
      v64 = 2080;
      *(_QWORD *)v65 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v65[8] = 1024;
      *(_DWORD *)&v65[10] = 554;
      v66 = 2080;
      v67 = "InitializeActiveNodesInOutputChain";
      v68 = 2080;
      v69 = "inGraph.IsNodeInGraph(inNode.NodeImpl())";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inGraph.IsNodeInGraph(inNode.NodeImpl())");
  }
  v49 = (uint64_t)&v49;
  v50 = &v49;
  v51 = 0;
  AUGraphNodeBase::GetValidConnections((uint64_t)a2, 0, &v49);
  __p = &off_1E3BE5788;
  v58 = &v49;
  v59 = a2;
  p_p = &__p;
  *(_QWORD *)buf = 0;
  if (!std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()((uint64_t)&__p, a2, (uint64_t **)buf))
  {
    v8 = (unint64_t)(a2[7] - a2[6]) >> 3;
    if ((int)v8 < 1)
    {
LABEL_69:
      v34 = (unint64_t)(a2[10] - a2[9]) >> 3;
      if ((int)v34 >= 1)
      {
        v35 = 0;
        do
        {
          v36 = (_QWORD *)(*((uint64_t (**)(AVAudioNodeImplBase **, _QWORD, uint64_t))*a2 + 3))(a2, 0, v35);
          if (v36)
          {
            v53 = 0;
            LODWORD(v54) = -1;
            v55 = 0;
            v56 = -1;
            if (((*((uint64_t (**)(AVAudioNodeImplBase **, _QWORD, uint64_t, void **))*a2 + 4))(a2, 0, v35, &v53) & 1) == 0)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                v62 = 1024;
                v63 = 71;
                v64 = 2080;
                *(_QWORD *)v65 = "AVAudioEngineGraph.mm";
                *(_WORD *)&v65[8] = 1024;
                *(_DWORD *)&v65[10] = 215;
                v66 = 2080;
                v67 = "TraverseGraphNodesWithLookback";
                v68 = 2080;
                v69 = "inCurrNode.GetConnection(otherDirection, bus, conn)";
                _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
              }
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inCurrNode.GetConnection(otherDirection, bus, conn)");
            }
            if (AUGraphParser::TraverseGraphNodes(0, 1, v36, (uint64_t)&v53, (uint64_t)&__p) == 1)
              break;
          }
          v35 = (v35 + 1);
        }
        while ((_DWORD)v34 != (_DWORD)v35);
      }
    }
    else
    {
      v9 = 0;
      while (1)
      {
        v10 = (_QWORD *)(*((uint64_t (**)(AVAudioNodeImplBase **, uint64_t, uint64_t))*a2 + 3))(a2, 1, v9);
        if (v10)
        {
          v53 = 0;
          LODWORD(v54) = -1;
          v55 = 0;
          v56 = -1;
          if (((*((uint64_t (**)(AVAudioNodeImplBase **, uint64_t, uint64_t, void **))*a2 + 4))(a2, 1, v9, &v53) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              v62 = 1024;
              v63 = 71;
              v64 = 2080;
              *(_QWORD *)v65 = "AVAudioEngineGraph.mm";
              *(_WORD *)&v65[8] = 1024;
              *(_DWORD *)&v65[10] = 183;
              v66 = 2080;
              v67 = "TraverseGraphNodesWithLookback";
              v68 = 2080;
              v69 = "inCurrNode.GetConnection(inDirection, bus, conn)";
              _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inCurrNode.GetConnection(inDirection, bus, conn)");
          }
          if (AUGraphParser::TraverseGraphNodes(1, 1, v10, (uint64_t)&v53, (uint64_t)&__p) == 1)
            break;
        }
        v9 = (v9 + 1);
        if ((_DWORD)v8 == (_DWORD)v9)
          goto LABEL_69;
      }
    }
  }
  v6 = p_p;
  if (p_p == &__p)
  {
    v7 = 4;
    v6 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_25;
    v7 = 5;
  }
  (*((void (**)(void))*v6 + v7))();
LABEL_25:
  std::__list_imp<AUGraphConnection>::clear(&v49);
  v48 = 0;
  v49 = (uint64_t)&v49;
  v47 = -1;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  __p = 0;
  v58 = 0;
  v59 = 0;
  v50 = &v49;
  v51 = 0;
  AUGraphParser::GetNodeConnectionsToMixer(a2, &v49, 0);
  v12 = operator new(0x40uLL);
  *v12 = &off_1E3BE57D0;
  v12[1] = &v48;
  v12[2] = &v47;
  v12[3] = &v49;
  v12[4] = a2;
  v12[5] = a1;
  v12[6] = &v53;
  v12[7] = &__p;
  *(_QWORD *)&v65[4] = v12;
  AUGraphParser::TraverseGraphNodes(1, 1, a2, 0, (uint64_t)buf);
  v13 = *(_QWORD **)&v65[4];
  if (*(_BYTE **)&v65[4] == buf)
  {
    v14 = 4;
    v13 = buf;
    goto LABEL_29;
  }
  if (*(_QWORD *)&v65[4])
  {
    v14 = 5;
LABEL_29:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v16 = (uint64_t *)v53;
  v15 = v54;
  if (v53 != v54)
  {
    while (1)
    {
      v17 = (_QWORD *)*v16;
      if ((AVAudioEngineGraph::IsValidSourceNode((uint64_t)a1, *v16) & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v62 = 1024;
          v63 = 71;
          v64 = 2080;
          *(_QWORD *)v65 = "AVAudioEngineGraph.mm";
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = 662;
          v66 = 2080;
          v67 = "InitializeActiveNodesInOutputChain";
          v68 = 2080;
          v69 = "inGraph.IsValidSourceNode(*startNode)";
          _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inGraph.IsValidSourceNode(*startNode)");
      }
      LODWORD(v43) = 2;
      v19 = *((_QWORD *)a1 + 2);
      if (v19 && v17[3] == v19)
        LODWORD(v43) = 3;
      v20 = operator new(0x20uLL);
      *v20 = &off_1E3BE5818;
      v20[1] = &v52;
      v20[2] = a1;
      v20[3] = &v43;
      *(_QWORD *)&v65[4] = v20;
      AUGraphParser::TraverseGraphNodes(0, 1, v17, 0, (uint64_t)buf);
      v21 = *(_QWORD **)&v65[4];
      if (*(_BYTE **)&v65[4] == buf)
        break;
      if (*(_QWORD *)&v65[4])
      {
        v22 = 5;
LABEL_44:
        (*(void (**)(void))(*v21 + 8 * v22))();
      }
      if (v52)
        goto LABEL_82;
      *a3 = 1;
      if (++v16 == v15)
        goto LABEL_47;
    }
    v21 = buf;
    v22 = 4;
    goto LABEL_44;
  }
LABEL_47:
  v23 = (_QWORD **)__p;
  v40 = v58;
  if (__p == v58)
    goto LABEL_82;
  while (1)
  {
    v24 = *v23;
    v46 = 1;
    v43 = (uint64_t)&v43;
    v44 = &v43;
    v45 = 0;
    v42 = 0;
    AUGraphParser::GetNodeConnectionsToMixer(v24, &v43, &v42);
    if (v42)
    {
      v46 = 0;
    }
    else
    {
      for (i = v44; i != &v43; i = (uint64_t *)i[1])
      {
        AUGraphParser::PrepareForDisconnection(a1, (const AVAudioEngineGraph *)i[4], 0, v25, v26);
        Disconnection = AVAudioEngineGraph::MakeDisconnection(a1, *(AVAudioNodeImplBase **)(i[4] + 24), *((unsigned int *)i + 10), 0);
        if ((_DWORD)Disconnection)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v32 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            v62 = 1024;
            v63 = 104;
            v64 = 2080;
            *(_QWORD *)v65 = "AVAudioEngineGraph.mm";
            *(_WORD *)&v65[8] = 1024;
            *(_DWORD *)&v65[10] = 719;
            v66 = 2080;
            v67 = "InitializeActiveNodesInOutputChain";
            v68 = 2080;
            v69 = "inGraph.MakeDisconnection(mixerConn.destNode->NodeImpl(), mixerConn.destBus)";
            v70 = 1024;
            v71 = Disconnection;
            _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
        }
        else
        {
          AVAudioEngineGraph::AddPendingConnection((uint64_t)a1, 0, (uint64_t)(i + 2), 0);
          v33 = (_QWORD *)i[4];
          if (!*(_BYTE *)(v33[3] + 48))
          {
            v52 = AUGraphParser::InitializeNodeChain((uint64_t)a1, 0, v33, 2);
            if (v52)
              goto LABEL_81;
          }
        }
      }
    }
    v27 = operator new(0x20uLL);
    *v27 = &off_1E3BE5860;
    v27[1] = &v46;
    v27[2] = a1;
    v27[3] = &v52;
    *(_QWORD *)&v65[4] = v27;
    AUGraphParser::TraverseGraphNodes(0, 1, v24, 0, (uint64_t)buf);
    v28 = *(_QWORD **)&v65[4];
    if (*(_BYTE **)&v65[4] == buf)
    {
      v28 = buf;
      v29 = 4;
    }
    else
    {
      if (!*(_QWORD *)&v65[4])
        goto LABEL_66;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
    if (v52)
      break;
    std::__list_imp<AUGraphConnection>::clear(&v43);
    if (++v23 == (_QWORD **)v40)
      goto LABEL_82;
  }
LABEL_81:
  std::__list_imp<AUGraphConnection>::clear(&v43);
LABEL_82:
  v38 = v52;
  std::__list_imp<AUGraphConnection>::clear(&v49);
  if (__p)
  {
    v58 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = (uint64_t *)v53;
    operator delete(v53);
  }
  return v38;
}

void sub_19B774920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  _Unwind_Resume(exception_object);
}

uint64_t AVAudioEngineGraph::IsValidSourceNode(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 256))(*(_QWORD *)(a2 + 24));
  if (v4 == 1635084142 || v4 == 1635086951)
    return 1;
  v6 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 256))(*(_QWORD *)(a2 + 24));
  if (v6 == 1635085685 || v6 == 1635086953)
    return 1;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  if (v9 && v10 == v9)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 408))(v10);
}

uint64_t AUGraphParser::PrepareForDisconnection(AUGraphParser *this, const AVAudioEngineGraph *a2, NSError **a3, unsigned int a4, NSError **a5)
{
  char IsNodeInGraph;
  uint64_t result;
  uint64_t v10;

  IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph((uint64_t)this, (uint64_t)a2);
  result = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1128, "PrepareForDisconnection", "inGraph.IsNodeInGraph(&inDestNode)", IsNodeInGraph, 4294967246, a3);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(const AVAudioEngineGraph *))(*(_QWORD *)a2 + 120))(a2);
    if ((result & 1) == 0)
    {
      v10 = AVAudioEngineGraph::PerformCommand((uint64_t)this, a2, 4, 0, 0);
      return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1134, "PrepareForDisconnection", "inGraph.PerformCommand(inDestNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)", v10, a3);
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::MakeDisconnection(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, uint64_t a3, NSError **a4)
{
  char IsNodeInGraph;
  uint64_t v9;
  const AVAudioEngineGraph *NodeFromMap;
  char v12;
  unsigned int v13;
  NSError **v14;
  uint64_t *i;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, a2);
  v9 = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3955, "MakeDisconnection", "IsNodeInGraph(inDestImpl)", IsNodeInGraph, 4294967246, a4);
  if (!(_DWORD)v9)
  {
    NodeFromMap = (const AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
    v9 = (*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, uint64_t))(*(_QWORD *)NodeFromMap + 24))(NodeFromMap, 1, a3);
    if (v9)
    {
      if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)NodeFromMap + 120))(NodeFromMap))
      {
        v16 = 0;
        LODWORD(v17) = -1;
        v18 = 0;
        v19 = -1;
        v12 = (*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)NodeFromMap
                                                                                                 + 32))(NodeFromMap, 1, a3, &v16);
        _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3970, "MakeDisconnection", "true == graphNodeDest->GetConnection(kUpstream, inDestBus, mixerConn)", v12, 4294967246, a4);
        AUGraphParser::InformNodesAboutMixerDisconnection((_QWORD *)v9, (uint64_t)&v16, a4);
      }
      else
      {
        v16 = (uint64_t)&v16;
        v17 = &v16;
        v18 = 0;
        AUGraphParser::GetNodeConnectionsToMixer(NodeFromMap, &v16, 0);
        for (i = v17; i != &v16; i = (uint64_t *)i[1])
          AUGraphParser::InformNodesAboutMixerDisconnection((_QWORD *)v9, (uint64_t)(i + 2), a4);
        std::__list_imp<AUGraphConnection>::clear(&v16);
      }
      v9 = *(unsigned __int8 *)(*((_QWORD *)NodeFromMap + 3) + 48);
      AUGraphParser::PrepareForDisconnection(this, NodeFromMap, a4, v13, v14);
      v16 = 0;
      LODWORD(v17) = -1;
      v18 = 0;
      v19 = -1;
      (*(void (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)NodeFromMap + 32))(NodeFromMap, 1, a3, &v16);
      v20 = v16;
      v21 = (int)v17;
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v18 + 256))(v18, 0, v19, &v20);
      if ((_DWORD)v9)
      {
        v9 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 3, 0, 0);
        _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3992, "MakeDisconnection", "err = PerformCommand(*graphNodeDest, kAUInitialize, NULL, 0)", v9, a4);
      }
    }
  }
  return v9;
}

void sub_19B774E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<AUGraphConnection>::clear(&a9);
  _Unwind_Resume(a1);
}

__n128 AVAudioEngineGraph::AddPendingConnection(uint64_t a1, int a2, uint64_t a3, NSError **a4)
{
  BOOL v7;
  char v9;
  __n128 result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;

  if (*(_QWORD *)a3)
    v7 = *(_DWORD *)(a3 + 8) == -1;
  else
    v7 = 1;
  v9 = !v7 && *(_QWORD *)(a3 + 16) != 0 && *(_DWORD *)(a3 + 24) != -1;
  if (_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3720, "AddPendingConnection", "inConn.IsSrcAndDestValid()", v9, 4294967246, a4))return result;
  if (a2)
    v11 = 160;
  else
    v11 = 136;
  if (a2)
    v12 = (uint64_t *)(a1 + 160);
  else
    v12 = (uint64_t *)(a1 + 136);
  v13 = (uint64_t *)v12[1];
  if (v13 == v12)
  {
LABEL_33:
    v18 = operator new(0x30uLL);
    result = *(__n128 *)a3;
    v19 = *(_OWORD *)(a3 + 16);
    v18[1] = *(_OWORD *)a3;
    v18[2] = v19;
    v20 = *(_QWORD *)(a1 + v11);
    *(_QWORD *)v18 = v20;
    *((_QWORD *)v18 + 1) = v12;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(a1 + v11) = v18;
    ++v12[2];
    return result;
  }
  v14 = 0;
  do
  {
    if (*(_QWORD *)a3 == v13[2])
    {
      v15 = *(_QWORD *)(a3 + 16);
      if (*(_DWORD *)(a3 + 8) == *((_DWORD *)v13 + 6))
      {
        if (v15 == v13[4] && *(_DWORD *)(a3 + 24) == *((_DWORD *)v13 + 10))
          return result;
        goto LABEL_27;
      }
    }
    else
    {
      v15 = *(_QWORD *)(a3 + 16);
    }
    if (v13[4] != v15 || *((_DWORD *)v13 + 10) != *(_DWORD *)(a3 + 24))
    {
      v13 = (uint64_t *)v13[1];
      continue;
    }
LABEL_27:
    if ((v14 & 1) != 0)
    {
      v16 = *v13;
      v17 = (uint64_t *)v13[1];
      *(_QWORD *)(v16 + 8) = v17;
      *(_QWORD *)v13[1] = v16;
      --v12[2];
      operator delete(v13);
      v14 = 1;
      v13 = v17;
    }
    else
    {
      result = *(__n128 *)a3;
      *(_OWORD *)((char *)v13 + 28) = *(_OWORD *)(a3 + 12);
      *((__n128 *)v13 + 1) = result;
      v13 = (uint64_t *)v13[1];
      v14 = 1;
    }
  }
  while (v13 != v12);
  if ((v14 & 1) == 0)
    goto LABEL_33;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3BE5860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5860;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  uint64_t v3;
  int v4;

  if (**(_BYTE **)(a1 + 8))
  {
    AUGraphParser::UninitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)1);
  }
  else
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 48))
      return 2;
    v3 = 1;
    v4 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)2, 1);
    **(_DWORD **)(a1 + 24) = v4;
    if (v4)
      return v3;
  }
  return 0;
}

BOOL _AVAE_CheckNoErr(char *a1, int a2, const char *a3, const char *a4, uint64_t a5, NSError **a6)
{
  NSObject *v12;
  char *v13;
  char *v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        v13 = strrchr(a1, 47);
        if (v13)
          v14 = v13 + 1;
        else
          v14 = a1;
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)buf = 136316674;
      v17 = "AVAEInternal.h";
      v18 = 1024;
      v19 = 104;
      v20 = 2080;
      v21 = v14;
      v22 = 1024;
      v23 = a2;
      v24 = 2080;
      v25 = a3;
      v26 = 2080;
      v27 = a4;
      v28 = 1024;
      v29 = a5;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    if (a6)
      *a6 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.avfaudio"), (int)a5, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4), CFSTR("failed call"), 0));
    else
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), a5);
  }
  return (_DWORD)a5 == 0;
}

BOOL AVAudioEngineGraph::IsNodeInGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (_QWORD *)(v2 + 8);
  v4 = v5;
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v3 || v6 < v7[4])
LABEL_14:
    v7 = v3;
  return v7 != v3;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3BE5818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5818;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  int v4;

  if ((*((_BYTE *)a2 + 32) & 4) == 0)
    return 2;
  v4 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)**(unsigned int **)(a1 + 24), 1);
  **(_DWORD **)(a1 + 8) = v4;
  return v4 != 0;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E3BE57D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E3BE57D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  int IsValidSourceNode;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v25;
  NSObject *v26;
  void **v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v50;
  _BYTE buf[18];
  __int16 v53;
  _BYTE v54[14];
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v50 = *a3;
  if (!*a3)
    goto LABEL_8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6))
  {
    **(_QWORD **)(a1 + 8) = *(_QWORD *)(v5 + 16);
    **(_DWORD **)(a1 + 16) = *(_DWORD *)(v5 + 24);
  }
  v7 = **(_QWORD **)(a1 + 8);
  if (v7 && **(_DWORD **)(a1 + 16) != -1)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 368))(*(_QWORD *)(a2 + 24), *(_QWORD *)(v7 + 16));
  }
  else
  {
LABEL_8:
    v8 = *(_QWORD *)(a1 + 24);
    for (i = *(_QWORD *)(v8 + 8); i != v8; i = *(_QWORD *)(i + 8))
    {
      v10 = *(_QWORD *)(i + 32);
      if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10) & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 71;
          v53 = 2080;
          *(_QWORD *)v54 = "AVAudioEngineGraph.mm";
          *(_WORD *)&v54[8] = 1024;
          *(_DWORD *)&v54[10] = 613;
          v55 = 2080;
          v56 = "operator()";
          v57 = 2080;
          v58 = "conn.destNode && conn.destNode->IsMixerNode()";
          _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "conn.destNode && conn.destNode->IsMixerNode()");
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 368))(*(_QWORD *)(a2 + 24), *(_QWORD *)(*(_QWORD *)(i + 32) + 16), *(unsigned int *)(i + 40));
    }
  }
  *(_DWORD *)(a2 + 32) |= 4u;
  v12 = a1;
  if (v50)
    v13 = *(_QWORD *)(a1 + 32) == a2;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v50 + 16);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 36);
      v16 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v14 + 24) + 48))(*(_QWORD *)(v14 + 24), 0);
      if (v16)
        objc_msgSend(v16, "sampleRate");
      else
        v17 = -1.0;
      AUGraphNodeBase::CalculateMaxFrames((AUGraphNodeBase *)a2, v15, v17);
      v12 = a1;
    }
  }
  *(_QWORD *)buf = &off_1E3BE5D28;
  *(_QWORD *)&buf[8] = a2;
  *(_QWORD *)&v54[4] = buf;
  AUGraphParser::TraverseMIDIGraphNodes(a2, (uint64_t)buf);
  v18 = *(_QWORD **)&v54[4];
  if (*(_BYTE **)&v54[4] == buf)
  {
    v19 = 4;
    v18 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v54[4])
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  IsValidSourceNode = AVAudioEngineGraph::IsValidSourceNode(*(_QWORD *)(v12 + 40), a2);
  v21 = *(_QWORD **)(a2 + 48);
  v22 = *(_QWORD **)(a2 + 56);
  if (v21 == v22)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      if (*v21++)
        ++v23;
    }
    while (v21 != v22);
  }
  v25 = a1;
  if (IsValidSourceNode)
  {
    if (v23)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v26 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        v53 = 2080;
        *(_QWORD *)v54 = "AVAudioEngineGraph.mm";
        *(_WORD *)&v54[8] = 1024;
        *(_DWORD *)&v54[10] = 646;
        v55 = 2080;
        v56 = "operator()";
        v57 = 2080;
        v58 = "0 == inCurrNode.NumberOfValidConnections(kUpstream)";
        _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "0 == inCurrNode.NumberOfValidConnections(kUpstream)");
      v25 = a1;
    }
    v27 = *(void ***)(v25 + 48);
    v29 = (uint64_t *)v27[1];
    v28 = (unint64_t)v27[2];
    if ((unint64_t)v29 >= v28)
    {
      v30 = ((char *)v29 - (_BYTE *)*v27) >> 3;
      if ((unint64_t)(v30 + 1) >> 61)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v31 = v28 - (_QWORD)*v27;
      v32 = v31 >> 2;
      if (v31 >> 2 <= (unint64_t)(v30 + 1))
        v32 = v30 + 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v33);
      else
        v34 = 0;
      v42 = (uint64_t *)(v33 + 8 * v30);
      v43 = v33 + 8 * v34;
      *v42 = a2;
      v36 = v42 + 1;
      v45 = (char *)*v27;
      v44 = (char *)v27[1];
      if (v44 == *v27)
        goto LABEL_73;
      do
      {
        v46 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v42 = v46;
      }
      while (v44 != v45);
LABEL_72:
      v44 = (char *)*v27;
LABEL_73:
      *v27 = v42;
      v27[1] = v36;
      v27[2] = (void *)v43;
      if (v44)
        operator delete(v44);
      goto LABEL_75;
    }
    goto LABEL_56;
  }
  if (!v23)
  {
    v27 = *(void ***)(a1 + 56);
    v29 = (uint64_t *)v27[1];
    v35 = (unint64_t)v27[2];
    if ((unint64_t)v29 >= v35)
    {
      v37 = ((char *)v29 - (_BYTE *)*v27) >> 3;
      if ((unint64_t)(v37 + 1) >> 61)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v38 = v35 - (_QWORD)*v27;
      v39 = v38 >> 2;
      if (v38 >> 2 <= (unint64_t)(v37 + 1))
        v39 = v37 + 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v40);
      else
        v41 = 0;
      v42 = (uint64_t *)(v40 + 8 * v37);
      v43 = v40 + 8 * v41;
      *v42 = a2;
      v36 = v42 + 1;
      v47 = (char *)*v27;
      v44 = (char *)v27[1];
      if (v44 == *v27)
        goto LABEL_73;
      do
      {
        v48 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v42 = v48;
      }
      while (v44 != v47);
      goto LABEL_72;
    }
LABEL_56:
    *v29 = a2;
    v36 = v29 + 1;
LABEL_75:
    v27[1] = v36;
  }
  return 0;
}

void sub_19B7759D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5D28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5D28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *a2)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  double v6;

  *((_DWORD *)a2 + 8) |= 4u;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 36);
  v5 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 24) + 48))(*(_QWORD *)(v3 + 24), 0);
  if (v5)
    objc_msgSend(v5, "sampleRate");
  else
    v6 = -1.0;
  AUGraphNodeBase::CalculateMaxFrames(a2, v4, v6);
  return 0;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5788;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5788;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;

  v4 = *a3;
  if (*a3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v5 + 16))
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 != v5)
      {
        v7 = *v4;
        v8 = *((_DWORD *)v4 + 2);
        v9 = v4[2];
        v10 = *((_DWORD *)v4 + 6);
        while (v7 != *(_QWORD *)(v6 + 16)
             || v8 != *(_DWORD *)(v6 + 24)
             || v9 != *(_QWORD *)(v6 + 32)
             || v10 != *(_DWORD *)(v6 + 40))
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (v6 == v5)
            goto LABEL_10;
        }
        if (v5 != v6)
          return 1;
      }
    }
  }
LABEL_10:
  a2[8] = 0;
  if (*(_DWORD **)(a1 + 16) == a2)
    return 0;
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 152))(a2);
  if ((_DWORD)result)
  {
    result = 0;
    a2[9] = 0;
  }
  return result;
}

uint64_t AUGraphParser::InitializeActiveNodesInInputChain(AVAudioNodeImplBase **this, AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3)
{
  AVAudioEngineGraph *NodeFromMap;
  BOOL v6;
  NSObject *v7;
  char *v8;
  AVAudioNodeImplBase *i;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD **v17;
  _QWORD **v18;
  _QWORD *v19;
  AVAudioNodeImplBase *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  AVAudioNodeImplBase *k;
  _QWORD *v34;
  uint64_t Connection;
  NSObject *v36;
  _OWORD *v37;
  __int128 v38;
  _QWORD *v39;
  void **m;
  void **v41;
  void **n;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD **v46;
  _QWORD **v47;
  _QWORD *v48;
  AVAudioNodeImplBase *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *j;
  uint64_t v64;
  uint64_t v65;
  uint64_t Disconnection;
  NSObject *v67;
  AVAudioNodeImplBase *v68;
  AVAudioNodeImplBase *v69;
  BOOL v70;
  uint64_t (*v71)(AVAudioEngineGraph *, void *, unsigned int *, const AudioTimeStamp *, uint64_t, unsigned int, AudioBufferList *);
  AVAudioNodeImplBase **v72;
  uint64_t v73;
  NSObject *v74;
  _QWORD *v75;
  _QWORD *v77;
  _QWORD v78[2];
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  void *__p;
  char *v84;
  char *v85;
  char v86;
  void *v87;
  _QWORD **v88;
  uint64_t v89;
  _QWORD *v90;
  void **v91;
  uint64_t v92;
  _BYTE buf[34];
  __int16 v94;
  const char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  NodeFromMap = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (NodeFromMap)
    v6 = NodeFromMap == a2;
  else
    v6 = 0;
  if (!v6)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 775;
      v94 = 2080;
      v95 = "InitializeActiveNodesInInputChain";
      v96 = 2080;
      v97 = "inGraph.GetInputNode() && (&inNode == inGraph.GetInputNode())";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inGraph.GetInputNode() && (&inNode == inGraph.GetInputNode())");
  }
  v8 = (char *)(this + 20);
  for (i = this[21]; i != (AVAudioNodeImplBase *)v8; i = (AVAudioNodeImplBase *)*((_QWORD *)i + 1))
  {
    v10 = *((_QWORD *)i + 4);
    if (v10)
      *(_DWORD *)(v10 + 32) = 0;
    AVAudioEngineGraph::MakeVirtualConnection((AVAudioEngineGraph *)this, (uint64_t)i + 16);
  }
  v90 = &v90;
  v91 = (void **)&v90;
  v92 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v86 = 0;
  AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
  v77 = this + 11;
  this[12] = this[11];
  v11 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (v11)
  {
    v12 = (_QWORD *)v11;
    __p = 0;
    v13 = operator new(0x30uLL);
    *v13 = &off_1E3BE55D8;
    v13[1] = &v86;
    v13[2] = &__p;
    v13[3] = &v87;
    v13[4] = this;
    v13[5] = v77;
    *(_QWORD *)&buf[24] = v13;
    AUGraphParser::TraverseGraphNodes(0, 1, v12, 0, (uint64_t)buf);
    v14 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v15 = 4;
      v14 = buf;
      goto LABEL_20;
    }
    if (*(_QWORD *)&buf[24])
    {
      v15 = 5;
LABEL_20:
      (*(void (**)(void))(*v14 + 8 * v15))();
    }
  }
  if (!*((_BYTE *)this + 187) && v86)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 803;
      v94 = 2080;
      v95 = "InitializeActiveNodesInInputChain";
      v96 = 2080;
      v97 = "false == isInputConnToConverter";
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "false == isInputConnToConverter");
  }
  v17 = (_QWORD **)v87;
  v18 = v88;
  if (v87 != v88)
  {
    while (1)
    {
      v19 = *v17;
      v20 = this[3];
      v21 = !*v17 || v20 == 0;
      if (v21 || (AVAudioNodeImplBase *)v19[3] != v20)
        break;
LABEL_48:
      if (++v17 == v18)
        goto LABEL_49;
    }
    __p = 0;
    v84 = 0;
    v85 = 0;
    v22 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v20);
    if (v22)
    {
      v23 = v22;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
      *(_QWORD *)v24 = v23;
      v26 = v24 + 8;
      v28 = (char *)__p;
      v27 = v84;
      v29 = v24;
      if (v84 != __p)
      {
        do
        {
          v30 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v30;
          v29 -= 8;
        }
        while (v27 != v28);
        v27 = (char *)__p;
      }
      __p = v29;
      v84 = v24 + 8;
      v85 = &v24[8 * v25];
      if (v27)
        operator delete(v27);
      v84 = v26;
    }
    *(_QWORD *)buf = &off_1E3BE5668;
    *(_QWORD *)&buf[8] = this;
    *(_QWORD *)&buf[16] = &__p;
    *(_QWORD *)&buf[24] = buf;
    AUGraphParser::TraverseGraphNodes(1, 1, v19, 0, (uint64_t)buf);
    v31 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v31 = buf;
      v32 = 4;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_46;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_46:
    if (__p)
    {
      v84 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_48;
  }
LABEL_49:
  if (this[11] == this[12])
  {
    std::__list_imp<AUGraphConnection>::clear(this + 20);
    v47 = (_QWORD **)v87;
    v46 = v88;
    if (v87 == v88)
      goto LABEL_107;
    while (1)
    {
      v48 = *v47;
      v49 = this[3];
      v50 = !*v47 || v49 == 0;
      if (v50 || (AVAudioNodeImplBase *)v48[3] != v49)
        break;
LABEL_106:
      if (++v47 == v46)
        goto LABEL_107;
    }
    __p = 0;
    v84 = 0;
    v85 = 0;
    v51 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v49);
    if (v51)
    {
      v52 = v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
      *(_QWORD *)v53 = v52;
      v55 = v53 + 8;
      v57 = (char *)__p;
      v56 = v84;
      v58 = v53;
      if (v84 != __p)
      {
        do
        {
          v59 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *((_QWORD *)v58 - 1) = v59;
          v58 -= 8;
        }
        while (v56 != v57);
        v56 = (char *)__p;
      }
      __p = v58;
      v84 = v53 + 8;
      v85 = &v53[8 * v54];
      if (v56)
        operator delete(v56);
      v84 = v55;
    }
    v81 = 0;
    v82 = 0;
    v79 = (uint64_t)&v79;
    v80 = &v79;
    v60 = operator new(0x28uLL);
    *v60 = &off_1E3BE56B0;
    v60[1] = &v82;
    v60[2] = this;
    v60[3] = &__p;
    v60[4] = &v79;
    *(_QWORD *)&buf[24] = v60;
    AUGraphParser::TraverseGraphNodes(1, 1, v48, 0, (uint64_t)buf);
    v61 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v61 = buf;
      v62 = 4;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
      {
LABEL_90:
        for (j = v80; j != &v79; j = (uint64_t *)j[1])
        {
          if (j[2])
          {
            if (*((_DWORD *)j + 6) != -1)
            {
              v64 = j[4];
              if (v64)
              {
                v65 = *((unsigned int *)j + 10);
                if ((_DWORD)v65 != -1)
                {
                  Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v64 + 24), v65, 0);
                  if ((_DWORD)Disconnection)
                  {
                    if (AVAudioEngineLogCategory(void)::once != -1)
                      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
                    v67 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
                    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136316674;
                      *(_QWORD *)&buf[4] = "AVAEInternal.h";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 104;
                      *(_WORD *)&buf[18] = 2080;
                      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                      *(_WORD *)&buf[28] = 1024;
                      *(_DWORD *)&buf[30] = 876;
                      v94 = 2080;
                      v95 = "InitializeActiveNodesInInputChain";
                      v96 = 2080;
                      v97 = "inGraph.MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
                      v98 = 1024;
                      v99 = Disconnection;
                      _os_log_impl(&dword_19B733000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
                    }
                    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
                  }
                  else
                  {
                    AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 1, (uint64_t)(j + 2), 0);
                  }
                }
              }
            }
          }
        }
        std::__list_imp<AUGraphConnection>::clear(&v79);
        if (__p)
        {
          v84 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_106;
      }
      v62 = 5;
    }
    (*(void (**)(void))(*v61 + 8 * v62))();
    goto LABEL_90;
  }
  std::__list_imp<AUGraphConnection>::clear(&v90);
  for (k = this[21]; k != (AVAudioNodeImplBase *)v8; k = (AVAudioNodeImplBase *)*((_QWORD *)k + 1))
  {
    v34 = (_QWORD *)*((_QWORD *)k + 4);
    if (v34 && AUGraphParser::IsNodeConnectedToTarget(0, v34, v77))
    {
      AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)k + 16);
      Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)k + 2, 0);
      if ((_DWORD)Connection)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v36 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 894;
          v94 = 2080;
          v95 = "InitializeActiveNodesInInputChain";
          v96 = 2080;
          v97 = "inGraph.MakeConnection(inputConn)";
          v98 = 1024;
          v99 = Connection;
          _os_log_impl(&dword_19B733000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Connection);
      }
      else
      {
        v37 = operator new(0x30uLL);
        v38 = *((_OWORD *)k + 2);
        v37[1] = *((_OWORD *)k + 1);
        v37[2] = v38;
        v39 = v90;
        *(_QWORD *)v37 = v90;
        *((_QWORD *)v37 + 1) = &v90;
        v39[1] = v37;
        v90 = v37;
        ++v92;
      }
    }
  }
  for (m = v91; m != (void **)&v90; m = (void **)m[1])
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)(m + 2), 1, 0);
  v41 = (void **)this[11];
  for (n = (void **)this[12]; v41 != n; ++v41)
  {
    __p = *v41;
    *(_QWORD *)buf = &off_1E3BE56F8;
    *(_QWORD *)&buf[8] = &__p;
    *(_QWORD *)&buf[16] = this;
    *(_QWORD *)&buf[24] = buf;
    AUGraphParser::TraverseGraphNodes(0, 0, __p, 0, (uint64_t)buf);
    v43 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v43 = buf;
      v44 = 4;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_69;
      v44 = 5;
    }
    (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_69:
    v45 = AUGraphParser::InitializeNodeChain((uint64_t)this, 1, __p, 1);
    if ((_DWORD)v45)
    {
      AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
      this[12] = this[11];
      goto LABEL_121;
    }
  }
LABEL_107:
  v68 = this[11];
  v69 = this[12];
  v70 = v68 == v69;
  if (v68 == v69)
    v71 = 0;
  else
    v71 = AVAudioEngineGraph::InputAvailable;
  if (v70)
    v72 = 0;
  else
    v72 = this;
  v78[0] = v71;
  v78[1] = v72;
  v73 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 128))(v73))
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 280))(v73, v78);
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v74 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 945;
      v94 = 2080;
      v95 = "InitializeActiveNodesInInputChain";
      v96 = 2080;
      v97 = "inGraph.PerformCommand(*inGraph.GetInputNode(), AVAudioEngineGraph::kAUSetInputCallback, &rc, sizeof(rc))";
      v98 = 1024;
      v99 = -50;
      _os_log_impl(&dword_19B733000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), 4294967246);
  }
  AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, this[11] != this[12]);
  v75 = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  v45 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v75, 3, 0, 0);
LABEL_121:
  if (v87)
  {
    v88 = (_QWORD **)v87;
    operator delete(v87);
  }
  std::__list_imp<AUGraphConnection>::clear(&v90);
  return v45;
}

void sub_19B7767D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  std::__list_imp<AUGraphConnection>::clear(&a28);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::MakeVirtualConnection(AVAudioEngineGraph *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t NodeFromMap;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  if (!AVAudioEngineGraph::IsNodeInGraph((uint64_t)a1, *(_QWORD *)a2)
    || (v5 = *(_QWORD *)(a2 + 16), !AVAudioEngineGraph::IsNodeInGraph((uint64_t)a1, v5)))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v23 = "AVAEInternal.h";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      v27 = "AVAudioEngineGraph.mm";
      v28 = 1024;
      v29 = 3924;
      v30 = 2080;
      v31 = "MakeVirtualConnection";
      v32 = 2080;
      v33 = "IsNodeInGraph(conn.srcNode) && IsNodeInGraph(conn.destNode)";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(conn.srcNode) && IsNodeInGraph(conn.destNode)");
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(a1, *(AVAudioNodeImplBase **)(v4 + 24));
  v8 = AVAudioEngineGraph::GetNodeFromMap(a1, *(AVAudioNodeImplBase **)(v5 + 24));
  v18 = 0;
  v19 = -1;
  v20 = 0;
  v21 = -1;
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)NodeFromMap + 32))(NodeFromMap, 0, *(unsigned int *)(a2 + 8), &v18);
  if (v20
    && (*(_QWORD *)a2 != v18 || *(_DWORD *)(a2 + 8) != v19 || *(_QWORD *)(a2 + 16) != v20 || *(_DWORD *)(a2 + 24) != v21))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v23 = "AVAEInternal.h";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      v27 = "AVAudioEngineGraph.mm";
      v28 = 1024;
      v29 = 3934;
      v30 = 2080;
      v31 = "MakeVirtualConnection";
      v32 = 2080;
      v33 = "srcCurrConn.destNode == NULL || srcCurrConn == conn";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "srcCurrConn.destNode == NULL || srcCurrConn == conn");
  }
  v14 = 0;
  v15 = -1;
  v16 = 0;
  v17 = -1;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v8 + 32))(v8, 1, *(unsigned int *)(a2 + 24), &v14);
  if (v14
    && (*(_QWORD *)a2 != v14 || *(_DWORD *)(a2 + 8) != v15 || *(_QWORD *)(a2 + 16) != v16 || *(_DWORD *)(a2 + 24) != v17))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v23 = "AVAEInternal.h";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      v27 = "AVAudioEngineGraph.mm";
      v28 = 1024;
      v29 = 3939;
      v30 = 2080;
      v31 = "MakeVirtualConnection";
      v32 = 2080;
      v33 = "destCurrConn.srcNode == NULL || destCurrConn == conn";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "destCurrConn.srcNode == NULL || destCurrConn == conn");
  }
  v12 = *(_DWORD *)(a2 + 8);
  v11 = (unsigned int *)(a2 + 8);
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)NodeFromMap + 56))(NodeFromMap, 0, v12, v8, v11[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 56))(v8, 1, v11[4], NodeFromMap, *v11);
}

uint64_t AUGraphParser::PrepareForConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD **)(a2 + 16);
  if (!*(_QWORD *)a2 || !AVAudioEngineGraph::IsNodeInGraph(a1, *(_QWORD *)a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 1100;
      v29 = 2080;
      v30 = "PrepareForConnection";
      v31 = 2080;
      v32 = "srcNode && inGraph.IsNodeInGraph(srcNode)";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "srcNode && inGraph.IsNodeInGraph(srcNode)");
  }
  if (!v5 || !AVAudioEngineGraph::IsNodeInGraph(a1, (uint64_t)v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 1101;
      v29 = 2080;
      v30 = "PrepareForConnection";
      v31 = 2080;
      v32 = "destNode && inGraph.IsNodeInGraph(destNode)";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "destNode && inGraph.IsNodeInGraph(destNode)");
  }
  v17 = 0;
  v18 = -1;
  v19 = 0;
  v20 = -1;
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v4 + 32))(v4, 0, *(unsigned int *)(a2 + 8), &v17);
  if (v19
    && (*(_QWORD *)a2 != v17 || *(_DWORD *)(a2 + 8) != v18 || *(_QWORD *)(a2 + 16) != v19 || *(_DWORD *)(a2 + 24) != v20))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 1107;
      v29 = 2080;
      v30 = "PrepareForConnection";
      v31 = 2080;
      v32 = "srcCurrConn.destNode == NULL || srcCurrConn == inConn";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "srcCurrConn.destNode == NULL || srcCurrConn == inConn");
  }
  v13 = 0;
  v14 = -1;
  v15 = 0;
  v16 = -1;
  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t *))(*v5 + 32))(v5, 1, *(unsigned int *)(a2 + 24), &v13);
  if (v13
    && (*(_QWORD *)a2 != v13 || *(_DWORD *)(a2 + 8) != v14 || *(_QWORD *)(a2 + 16) != v15 || *(_DWORD *)(a2 + 24) != v16))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 1111;
      v29 = 2080;
      v30 = "PrepareForConnection";
      v31 = 2080;
      v32 = "destCurrConn.srcNode == NULL || destCurrConn == inConn";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "destCurrConn.srcNode == NULL || destCurrConn == inConn");
  }
  result = (*(uint64_t (**)(_QWORD *))(*v5 + 120))(v5);
  if ((result & 1) == 0)
  {
    result = AVAudioEngineGraph::PerformCommand(a1, v5, 4, 0, 0);
    v11 = result;
    if ((_DWORD)result)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        v22 = "AVAEInternal.h";
        v23 = 1024;
        v24 = 104;
        v25 = 2080;
        v26 = "AVAudioEngineGraph.mm";
        v27 = 1024;
        v28 = 1116;
        v29 = 2080;
        v30 = "PrepareForConnection";
        v31 = 2080;
        v32 = "inGraph.PerformCommand(*destNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
        v33 = 1024;
        v34 = v11;
        _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v11);
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::MakeConnection(AVAudioEngineGraph *a1, uint64_t *a2, NSError **a3)
{
  uint64_t v4;
  uint64_t v5;
  AVAudioNodeImplBase *v6;

  v4 = *a2;
  if (*a2)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = a2[2];
  if (v5)
    v6 = *(AVAudioNodeImplBase **)(v5 + 24);
  else
    v6 = 0;
  return AVAudioEngineGraph::MakeConnection(a1, (AVAudioNodeImplBase *)v4, v6, *((_DWORD *)a2 + 2), *((unsigned int *)a2 + 6), a3);
}

void AVAudioEngineGraph::RemovePendingConnection(uint64_t a1, int a2, uint64_t a3, int a4, NSError **a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;

  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3774, "RemovePendingConnection", "inConn.srcNode || inConn.destNode", (*(_QWORD *)a3 | *(_QWORD *)(a3 + 16)) != 0, 4294967246, a5))
  {
    v9 = a2 ? a1 + 160 : a1 + 136;
    v10 = *(uint64_t **)(v9 + 8);
    if (v10 != (uint64_t *)v9)
    {
      do
      {
        if (a4 == 1)
        {
          if (*(_QWORD *)a3 == v10[2])
          {
            v11 = *(_QWORD *)(a3 + 16);
            if (*(_DWORD *)(a3 + 8) == *((_DWORD *)v10 + 6))
            {
              if (v11 == v10[4] && *(_DWORD *)(a3 + 24) == *((_DWORD *)v10 + 10))
                v12 = 1;
              else
LABEL_18:
                v12 = 0;
              v13 = *v10;
              v14 = (uint64_t *)v10[1];
              *(_QWORD *)(v13 + 8) = v14;
              *(_QWORD *)v10[1] = v13;
              --*(_QWORD *)(v9 + 16);
              operator delete(v10);
              if ((v12 & 1) != 0)
                return;
              goto LABEL_22;
            }
          }
          else
          {
            v11 = *(_QWORD *)(a3 + 16);
          }
          if (v10[4] == v11 && *((_DWORD *)v10 + 10) == *(_DWORD *)(a3 + 24))
            goto LABEL_18;
        }
        else if (v10[2] == *(_QWORD *)a3 || v10[4] == *(_QWORD *)(a3 + 16))
        {
          goto LABEL_18;
        }
        v14 = (uint64_t *)v10[1];
LABEL_22:
        v10 = v14;
      }
      while (v14 != (uint64_t *)v9);
    }
  }
}

uint64_t AVAudioEngineGraph::SetNodesToPullEnabled(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(this + 128) != a2)
  {
    v2 = a2;
    v3 = this;
    if (*(_BYTE *)(this + 184))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(this + 112);
      *(_BYTE *)(v3 + 128) = v2;
      return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v3 + 112);
    }
    else
    {
      *(_BYTE *)(this + 128) = a2;
    }
  }
  return this;
}

uint64_t AVAudioEngineGraph::InputAvailable(AVAudioEngineGraph *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, unsigned int a6, AudioBufferList *a7)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  const AudioBufferList **v17;
  NSObject *v18;
  int v19;
  const AudioBufferList *v20;
  uint64_t mNumberBuffers;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  AudioBufferList *v28;
  uint64_t v29;
  void **p_mData;
  _QWORD *v33;
  int v34;
  char *v35;
  char v36;
  _BYTE buf[12];
  __int16 v38;
  int v39;
  __int16 v40;
  char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v35 = (char *)this + 112;
  v9 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 112);
  v36 = v9;
  if (!v9)
    goto LABEL_34;
  if (!*((_BYTE *)this + 128))
    goto LABEL_34;
  v10 = (_QWORD *)*((_QWORD *)this + 11);
  v33 = (_QWORD *)*((_QWORD *)this + 12);
  if (v10 == v33)
    goto LABEL_34;
  while (1)
  {
    v11 = (_QWORD *)*v10;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 144))(*v10);
    if ((v12 & 1) == 0)
    {
      v14 = (unsigned int *)v11[1];
      if (v14)
      {
        v15 = 1;
      }
      else
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v38 = 1024;
          v39 = 71;
          v40 = 2080;
          v41 = "AVAudioEngineGraph.mm";
          v42 = 1024;
          v43 = 3628;
          v44 = 2080;
          v45 = "InputAvailable";
          v46 = 2080;
          v47 = "isSink || tap != nullptr";
          _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "isSink || tap != nullptr");
LABEL_14:
        v15 = 0;
        v14 = 0;
      }
      v17 = (const AudioBufferList **)(v14 + 300);
      v16 = 4;
      goto LABEL_16;
    }
    v13 = v11[3];
    if (!v13)
      goto LABEL_14;
    v14 = 0;
    v15 = 0;
    v16 = *(_DWORD *)(v13 + 196);
    v17 = (const AudioBufferList **)(v13 + 200);
LABEL_16:
    v34 = 0;
    *(_QWORD *)buf = v17 + 3;
    v19 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v17 + 3));
    buf[8] = v19;
    if (!v19)
      goto LABEL_31;
    v20 = *v17;
    mNumberBuffers = (*v17)->mNumberBuffers;
    if (mNumberBuffers != (unint64_t)((char *)v17[1] - (char *)*v17 - 8) >> 4)
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    if (!(_DWORD)mNumberBuffers)
      goto LABEL_31;
    v22 = 0;
    v23 = 16 * mNumberBuffers;
    do
    {
      v24 = (char *)v20 + v22;
      *((_DWORD *)v24 + 2) = 1;
      *((_DWORD *)v24 + 3) = v16 * a5;
      *((_QWORD *)v24 + 2) = 0;
      v22 += 16;
    }
    while (v23 != v22);
    v25 = (*(uint64_t (**)(_QWORD *))(*v11 + 304))(v11);
    if (v15)
      v26 = v14[2];
    else
      v26 = 0;
    v27 = (*(uint64_t (**)(_QWORD *))(*v11 + 312))(v11);
    if ((*(unsigned int (**)(uint64_t, int *, unsigned int *, uint64_t, uint64_t, const AudioBufferList *, uint64_t))(v25 + 16))(v25, &v34, a3, a5, v26, v20, v27))
    {
      goto LABEL_33;
    }
    v29 = v20->mNumberBuffers;
    if ((_DWORD)v29)
      break;
LABEL_29:
    if ((v12 & 1) == 0)
    {
      v34 |= 8u;
      AVAudioNodeTap::RenderCallback((AVAudioNodeTap *)v14, &v34, a3, (const AudioTimeStamp *)v14[2], a5, v20, v28);
    }
LABEL_31:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
    if (++v10 == v33)
      goto LABEL_34;
  }
  p_mData = &v20->mBuffers[0].mData;
  while (*p_mData)
  {
    p_mData += 2;
    if (!--v29)
      goto LABEL_29;
  }
LABEL_33:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
LABEL_34:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v35);
  return 0;
}

void sub_19B77794C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE56F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE56F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t Disconnection;
  NSObject *v11;
  _BYTE buf[18];
  __int16 v13;
  _BYTE v14[14];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (!*a3)
    return 0;
  if (*(_QWORD *)v3 != **(_QWORD **)(a1 + 8))
    return 0;
  v6 = *(_QWORD **)(v3 + 16);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)buf = &off_1E3BE5CE0;
  *(_QWORD *)&buf[8] = v7;
  *(_QWORD *)&v14[4] = buf;
  AUGraphParser::TraverseGraphNodes(0, 1, v6, 0, (uint64_t)buf);
  v8 = *(_QWORD **)&v14[4];
  if (*(_BYTE **)&v14[4] == buf)
  {
    v9 = 4;
    v8 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v14[4])
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  Disconnection = AVAudioEngineGraph::MakeDisconnection(*(AVAudioEngineGraph **)(a1 + 16), *(AVAudioNodeImplBase **)(*(_QWORD *)(v3 + 16) + 24), *(unsigned int *)(v3 + 24), 0);
  if ((_DWORD)Disconnection)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      v13 = 2080;
      *(_QWORD *)v14 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v14[8] = 1024;
      *(_DWORD *)&v14[10] = 916;
      v15 = 2080;
      v16 = "operator()";
      v17 = 2080;
      v18 = "inGraph.MakeDisconnection(inPrevConn->destNode->NodeImpl(), inPrevConn->destBus)";
      v19 = 1024;
      v20 = Disconnection;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
  }
  else
  {
    AVAudioEngineGraph::AddPendingConnection(*(_QWORD *)(a1 + 16), 1, v3, 0);
  }
  return 0;
}

void sub_19B777C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5CE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5CE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  AUGraphParser::UninitializeNode(*(AUGraphParser **)(a1 + 8), a2, 0);
  return 0;
}

uint64_t AVAudioEngineGraph::MakeConnection(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, AVAudioNodeImplBase *a3, int a4, uint64_t a5, NSError **a6)
{
  char IsNodeInGraph;
  char v13;
  _QWORD *NodeFromMap;
  const AVAudioEngineGraph *v15;
  int v16;
  unsigned int v17;
  NSError **v18;
  uint64_t Disconnection;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *i;
  _QWORD *v26;
  int v27;
  const AVAudioEngineGraph *v28;
  int v29;
  unsigned int v30;
  NSError **v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v31 = a6;
  IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, a3);
  _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3844, "MakeConnection", "IsNodeInGraph(inDestImpl)", IsNodeInGraph, 4294967246, a6);
  if (!a2)
    return AVAudioEngineGraph::MakeDisconnection(this, a3, a5, a6);
  v13 = AVAudioEngineGraph::IsNodeInGraph(this, a2);
  _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3846, "MakeConnection", "IsNodeInGraph(inSrcImpl)", v13, 4294967246, a6);
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
  v15 = (const AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, a3);
  v26 = NodeFromMap;
  v27 = a4;
  v28 = v15;
  v29 = a5;
  v16 = *(unsigned __int8 *)(*((_QWORD *)v15 + 3) + 48);
  AUGraphParser::PrepareForDisconnection(this, v15, 0, v17, v18);
  Disconnection = AVAudioEngineGraph::MakeDisconnection(this, a3, a5, a6);
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3867, "MakeConnection", "err = MakeDisconnection(inDestImpl, inDestBus, outErr)", Disconnection, a6)|| (Disconnection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v15, 8, (uint64_t)&v26, 32), v30 = Disconnection, !_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3871, "MakeConnection", "err = PerformCommand(*graphNodeDest, kAUMakeConnection, &connection, sizeof(connection))", Disconnection, a6)))
  {
LABEL_6:
    if (!v16)
      return Disconnection;
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)v15 + 120))(v15))
  {
    v32 = 0;
    LODWORD(v33) = -1;
    v34 = 0;
    LODWORD(v35) = -1;
    (*(void (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 32))(v15, 1, a5, &v32);
    AUGraphParser::InformNodesAboutMixerConnection(NodeFromMap, (uint64_t)&v32, a6);
    goto LABEL_6;
  }
  v32 = (uint64_t)&v32;
  v33 = &v32;
  v34 = 0;
  AUGraphParser::GetNodeConnectionsToMixer(v15, &v32, 0);
  for (i = v33; i != &v32; i = (uint64_t *)i[1])
    AUGraphParser::InformNodesAboutMixerConnection(NodeFromMap, (uint64_t)(i + 2), a6);
  std::__list_imp<AUGraphConnection>::clear(&v32);
  if (!v16)
    return Disconnection;
LABEL_7:
  Disconnection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v15, 3, 0, 0);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3892, "MakeConnection", "err = PerformCommand(*graphNodeDest, kAUInitialize, NULL, 0)", Disconnection, a6);
  if (!(_DWORD)Disconnection)
  {
    v20 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 3, 0, 0);
    v30 = v20;
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3894, "MakeConnection", "err = PerformCommand(*graphNodeSrc, kAUInitialize, NULL, 0)", v20, a6);
    v21 = (uint64_t *)operator new(0x20uLL);
    *v21 = (uint64_t)&off_1E3BE5A58;
    v21[1] = (uint64_t)&v30;
    v21[2] = (uint64_t)this;
    v21[3] = (uint64_t)&v31;
    v35 = v21;
    AUGraphParser::TraverseMIDIGraphNodes((uint64_t)NodeFromMap, (uint64_t)&v32);
    v22 = v35;
    if (v35 == &v32)
    {
      v23 = 4;
      v22 = &v32;
    }
    else
    {
      if (!v35)
        return v30;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    return v30;
  }
  return Disconnection;
}

void sub_19B77808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__list_imp<AUGraphConnection>::clear(va);
  _Unwind_Resume(a1);
}

void std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3BE5A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5A58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = AVAudioEngineGraph::PerformCommand(*(_QWORD *)(a1 + 16), a2, 3, 0, 0);
  **(_DWORD **)(a1 + 8) = v3;
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3897, "operator()", "err = PerformCommand(midiInput, kAUInitialize, nullptr, 0)", v3, **(NSError ****)(a1 + 24));
  return 0;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3BE56B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE56B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AVAudioEngineGraph *a2, _OWORD **a3)
{
  _OWORD *v5;
  AVAudioEngineGraph *v6;
  NSObject *v7;
  uint64_t *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  AUGraphParser *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = **(AVAudioEngineGraph ***)(a1 + 8);
  if (v6 == a2 || !v6 && AUGraphParser::IsNodeConnectedToTarget(0, a2, *(_QWORD **)(a1 + 24)))
  {
    if (!*(_BYTE *)(*((_QWORD *)a2 + 3) + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v21 = "AVAEInternal.h";
        v22 = 1024;
        v23 = 71;
        v24 = 2080;
        v25 = "AVAudioEngineGraph.mm";
        v26 = 1024;
        v27 = 846;
        v28 = 2080;
        v29 = "operator()";
        v30 = 2080;
        v31 = "inNodeUpstream.IsInitialized()";
        _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inNodeUpstream.IsInitialized()");
    }
    **(_QWORD **)(a1 + 8) = a2;
    if (v5)
    {
      v8 = *(uint64_t **)(a1 + 32);
      v9 = operator new(0x30uLL);
      v10 = v5[1];
      v9[1] = *v5;
      v9[2] = v10;
      *((_QWORD *)v9 + 1) = v8;
      v11 = *v8;
      *(_QWORD *)v9 = *v8;
      *(_QWORD *)(v11 + 8) = v9;
      *v8 = (uint64_t)v9;
      ++v8[2];
    }
    return 2;
  }
  else
  {
    v13 = *(AUGraphParser **)(a1 + 16);
    v14 = *((_QWORD *)v13 + 2);
    if (v14)
      v15 = *((_QWORD *)a2 + 3) == v14;
    else
      v15 = 0;
    if (v15)
    {
      if (v5)
      {
        v16 = *(uint64_t **)(a1 + 32);
        v17 = operator new(0x30uLL);
        result = 0;
        v18 = v5[1];
        v17[1] = *v5;
        v17[2] = v18;
        *((_QWORD *)v17 + 1) = v16;
        v19 = *v16;
        *(_QWORD *)v17 = *v16;
        *(_QWORD *)(v19 + 8) = v17;
        *v16 = (uint64_t)v17;
        ++v16[2];
        return result;
      }
    }
    else
    {
      AUGraphParser::UninitializeNode(v13, a2, 0);
    }
    return 0;
  }
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (AUGraphParser::IsNodeConnectedToTarget(0, (_QWORD *)a2, *(_QWORD **)(a1 + 16)))
    return 2;
  result = 0;
  *(_DWORD *)(a2 + 32) = 1;
  return result;
}

void std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3BE55D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3BE55D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::operator()(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  char **v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v5 = *a3;
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 256))(a2[3]) == 1635083875
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 408))(a2[3]) & 1) == 0
    && ((*(uint64_t (**)(_QWORD *))(*a2 + 144))(a2) & 1) == 0)
  {
    **(_BYTE **)(a1 + 8) = 1;
  }
  v6 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6 | 1;
  v7 = v6 & 2;
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *v5;
    if (*v5)
    {
      v10 = *(_DWORD *)(v9 + 36);
      v11 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 48))(*(_QWORD *)(v9 + 24), 0);
      if (v11)
        objc_msgSend(v11, "sampleRate");
      else
        v12 = -1.0;
      AUGraphNodeBase::CalculateMaxFrames((AUGraphNodeBase *)a2, v10, v12);
    }
  }
  if (a2[1] || (*(unsigned int (**)(_QWORD *))(*a2 + 144))(a2))
    **(_QWORD **)(a1 + 16) = a2;
  v13 = (_QWORD *)a2[9];
  v14 = (_QWORD *)a2[10];
  if (v13 == v14)
    goto LABEL_24;
  v15 = 0;
  do
  {
    if (*v13++)
      ++v15;
  }
  while (v13 != v14);
  if (!v15)
  {
LABEL_24:
    v17 = *(void ***)(a1 + 24);
    v19 = v17[1];
    v18 = (unint64_t)v17[2];
    if ((unint64_t)v19 >= v18)
    {
      v21 = ((char *)v19 - (_BYTE *)*v17) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
        goto LABEL_70;
      v22 = v18 - (_QWORD)*v17;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v24);
      else
        v25 = 0;
      v26 = (_QWORD *)(v24 + 8 * v21);
      v27 = v24 + 8 * v25;
      *v26 = a2;
      v20 = v26 + 1;
      v29 = (char *)*v17;
      v28 = (char *)v17[1];
      if (v28 != *v17)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)*v17;
      }
      *v17 = v26;
      v17[1] = v20;
      v17[2] = (void *)v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v19 = a2;
      v20 = v19 + 1;
    }
    v17[1] = v20;
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    if (v31)
      v32 = a2[3] == v31;
    else
      v32 = 0;
    if (v32)
      goto LABEL_68;
    v33 = *(uint64_t **)(a1 + 16);
    v34 = *v33;
    if (!*v33)
      goto LABEL_68;
    v35 = *(char ***)(a1 + 40);
    v36 = *v35;
    v37 = v35[1];
    if (*v35 == v37)
    {
LABEL_49:
      v38 = v35[1];
    }
    else
    {
      v38 = *v35;
      while (*(_QWORD *)v38 != v34)
      {
        v38 += 8;
        if (v38 == v37)
          goto LABEL_49;
      }
    }
    if (v37 != v38)
      goto LABEL_68;
    v39 = (unint64_t)v35[2];
    if ((unint64_t)v37 < v39)
    {
      *(_QWORD *)v37 = v34;
      v40 = v37 + 8;
LABEL_67:
      v35[1] = v40;
LABEL_68:
      **(_QWORD **)(a1 + 16) = 0;
      return 0;
    }
    v41 = (v37 - v36) >> 3;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      v42 = v39 - (_QWORD)v36;
      v43 = v42 >> 2;
      if (v42 >> 2 <= (unint64_t)(v41 + 1))
        v43 = v41 + 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
      {
        v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v44);
        v34 = *v33;
      }
      else
      {
        v45 = 0;
      }
      v46 = (char *)(v44 + 8 * v41);
      v47 = v44 + 8 * v45;
      *(_QWORD *)v46 = v34;
      v40 = v46 + 8;
      v49 = *v35;
      v48 = v35[1];
      if (v48 != *v35)
      {
        do
        {
          v50 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *((_QWORD *)v46 - 1) = v50;
          v46 -= 8;
        }
        while (v48 != v49);
        v48 = *v35;
      }
      *v35 = v46;
      v35[1] = v40;
      v35[2] = (char *)v47;
      if (v48)
        operator delete(v48);
      goto LABEL_67;
    }
LABEL_70:
    std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
  }
  return 0;
}

void AUGraphParser::UpdateGraphAttributes(AVAudioNodeImplBase **this, AVAudioEngineGraph *a2)
{
  uint64_t NodeFromMap;
  AVAudioNodeImplBase *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  char *v12;
  char *v13;
  AVAudioNodeImplBase *v14;
  AVAudioNodeImplBase *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  AVAudioNodeImplBase *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  v43 = NodeFromMap;
  if (NodeFromMap | AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]))
  {
    this[8] = this[7];
    v4 = this[1];
    v7 = *(_QWORD **)v4;
    v5 = (_QWORD *)((char *)v4 + 8);
    v6 = v7;
    if (v7 != v5)
    {
      do
      {
        v8 = v6[5];
        *(_QWORD *)(v8 + 40) = 0;
        *(_DWORD *)(v8 + 32) &= ~4u;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v5);
    }
    if (NodeFromMap)
    {
      v12 = (char *)operator new(8uLL);
      *(_QWORD *)v12 = NodeFromMap;
      v13 = v12 + 8;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v15 = this[11];
    v14 = this[12];
    if (v15 != v14)
    {
      v16 = v14 - v15;
      if (v16 >= 1)
      {
        v17 = v16 >> 3;
        v18 = v13 - v12;
        v19 = (v13 - v12) >> 3;
        v20 = v19 + (v16 >> 3);
        if (v20 >> 61)
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        if (v18 >> 2 > v20)
          v20 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
        v22 = &v12[v18 & 0xFFFFFFFFFFFFFFF8];
        v23 = (_QWORD *)(v21 + 8 * v19);
        v24 = (char *)&v23[v17];
        v25 = 8 * v17;
        v26 = v23;
        do
        {
          v27 = *(_QWORD *)v15;
          v15 = (AVAudioNodeImplBase *)((char *)v15 + 8);
          *v26++ = v27;
          v25 -= 8;
        }
        while (v25);
        if (v13 != v12)
        {
          v28 = 8 * v19;
          do
          {
            *(_QWORD *)(v21 + v28 - 8) = *(_QWORD *)&v12[v28 - 8];
            v28 -= 8;
          }
          while (v28);
          v23 = (_QWORD *)v21;
        }
        v29 = v13 - v22;
        if (v29)
          memmove(v24, v22, v29);
        v13 = &v24[v29];
        if (v12)
          operator delete(v12);
        v12 = (char *)v23;
      }
    }
    if (v12 != v13)
    {
      v30 = v12;
      while (1)
      {
        v31 = *(_QWORD **)v30;
        v42 = v31;
        v31[5] = 0;
        v32 = operator new(0x20uLL);
        *v32 = &off_1E3BE5548;
        v32[1] = &v42;
        v32[2] = &v43;
        v32[3] = this;
        v45 = v32;
        AUGraphParser::TraverseGraphNodes(1, 1, v31, 0, (uint64_t)v44);
        v33 = v45;
        if (v45 == v44)
          break;
        if (v45)
        {
          v34 = 5;
LABEL_39:
          (*(void (**)(void))(*v33 + 8 * v34))();
        }
        v30 += 8;
        if (v30 == v13)
          goto LABEL_41;
      }
      v33 = v44;
      v34 = 4;
      goto LABEL_39;
    }
LABEL_41:
    v35 = this[1];
    v38 = *(_QWORD **)v35;
    v36 = (_QWORD *)((char *)v35 + 8);
    v37 = v38;
    if (v38 != v36)
    {
      do
      {
        v39 = v37[5];
        (*(void (**)(_QWORD, double))(**(_QWORD **)(v39 + 24) + 392))(*(_QWORD *)(v39 + 24), *(double *)(v39 + 40));
        *(_DWORD *)(v39 + 32) &= ~4u;
        v40 = (_QWORD *)v37[1];
        if (v40)
        {
          do
          {
            v41 = v40;
            v40 = (_QWORD *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            v41 = (_QWORD *)v37[2];
            v11 = *v41 == (_QWORD)v37;
            v37 = v41;
          }
          while (!v11);
        }
        v37 = v41;
      }
      while (v41 != v36);
    }
    if (v12)
      operator delete(v12);
  }
}

void sub_19B778B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3BE5548;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5548;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  NSObject *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 32);
  if (*(_QWORD *)a3)
  {
    v6 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    if (v6)
    {
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(v6 + 24) + 384))(*(_QWORD *)(v6 + 24))
         + *(double *)(v6 + 40);
      if ((v5 & 4) != 0)
      {
        if (*(double *)(a2 + 40) >= v7)
          v7 = *(double *)(a2 + 40);
      }
      else
      {
        v7 = fmax(v7, 0.0);
      }
      *(double *)(a2 + 40) = v7;
    }
  }
  if (**(_QWORD **)(a1 + 8) == **(_QWORD **)(a1 + 16))
  {
    v8 = v5 & 4;
    if (AVAudioEngineGraph::IsValidSourceNode(*(_QWORD *)(a1 + 24), a2) && v8 == 0)
    {
      v10 = *(_QWORD **)(a2 + 48);
      v11 = *(_QWORD **)(a2 + 56);
      if (v10 != v11)
      {
        v12 = 0;
        do
        {
          if (*v10++)
            ++v12;
        }
        while (v10 != v11);
        if (v12)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            v32 = "AVAEInternal.h";
            v33 = 1024;
            v34 = 71;
            v35 = 2080;
            v36 = "AVAudioEngineGraph.mm";
            v37 = 1024;
            v38 = 1067;
            v39 = 2080;
            v40 = "operator()";
            v41 = 2080;
            v42 = "0 == inCurrNode.NumberOfValidConnections(kUpstream)";
            _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "0 == inCurrNode.NumberOfValidConnections(kUpstream)");
        }
      }
      v15 = *(_QWORD **)(a1 + 24);
      v17 = (uint64_t *)v15[8];
      v16 = v15[9];
      if ((unint64_t)v17 >= v16)
      {
        v19 = v15[7];
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v23);
        else
          v24 = 0;
        v25 = (uint64_t *)(v23 + 8 * v20);
        v26 = v23 + 8 * v24;
        *v25 = a2;
        v18 = v25 + 1;
        v28 = (char *)v15[7];
        v27 = (char *)v15[8];
        if (v27 != v28)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v25 = v29;
          }
          while (v27 != v28);
          v27 = (char *)v15[7];
        }
        v15[7] = v25;
        v15[8] = v18;
        v15[9] = v26;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v17 = a2;
        v18 = v17 + 1;
      }
      v15[8] = v18;
    }
  }
  *(_DWORD *)(a2 + 32) |= 4u;
  return 0;
}

void AVAEGraphStateTracker::CancelTimers(AVAEGraphStateTracker *this)
{
  AVAEDispatchQueueTimer *v2;
  AVAEDispatchQueueTimer *v3;

  v2 = (AVAEDispatchQueueTimer *)*((_QWORD *)this + 2);
  if (v2)
    AVAEDispatchQueueTimer::CancelTimer(v2);
  v3 = (AVAEDispatchQueueTimer *)*((_QWORD *)this + 3);
  if (v3)
    AVAEDispatchQueueTimer::CancelTimer(v3);
}

_QWORD **std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100](_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    AVAEDispatchQueueTimer::CancelTimer((AVAEDispatchQueueTimer *)v2);
    v3 = (_QWORD *)v2[6];
    if (v3 == v2 + 3)
    {
      v4 = 4;
      v3 = v2 + 3;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void AVAEDispatchQueueTimer::CancelTimer(AVAEDispatchQueueTimer *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[5];

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 56))
    {
      v3 = MEMORY[0x1E0C809B0];
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke;
      v6[3] = &__block_descriptor_40_e14_v16__0___v___8l;
      v6[4] = this;
      v4 = dispatch_semaphore_create(0);
      dispatch_retain(v4);
      v7[0] = v3;
      v7[1] = 0x40000000;
      v7[2] = __Synchronously_block_invoke;
      v7[3] = &__block_descriptor_tmp_1185;
      v7[4] = v4;
      ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke((uint64_t)v6, (uint64_t)v7);
      dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v4);
    }
    else
    {
      dispatch_source_cancel(v2);
    }
    if (*((_BYTE *)this + 16) && *((_BYTE *)this + 56))
    {
      *((_BYTE *)this + 16) = 0;
      v5 = *((_QWORD *)this + 6);
      if (v5)
      {
        LOBYTE(v7[0]) = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v7);
      }
    }
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((_QWORD *)this + 1) = 0;
    *((_BYTE *)this + 16) = 0;
  }
}

void ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 8);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke_2;
  handler[3] = &unk_1E3BECB00;
  handler[4] = a2;
  dispatch_source_set_cancel_handler(v3, handler);
  dispatch_source_cancel(*(dispatch_source_t *)(v2 + 8));
}

uint64_t ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t AVAEGraphStateTracker::GraphHasActiveSource(AVAEGraphStateTracker *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (*((_QWORD *)this + 11) != *((_QWORD *)this + 12))
    return 1;
  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 8);
  if (v2 == v3)
    return 0;
  v4 = v2 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 - 8) + 24) + 432))(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 24));
    if ((result & 1) != 0)
      break;
    v5 = v4 == v3;
    v4 += 8;
  }
  while (!v5);
  return result;
}

void AVAEDispatchQueueTimer::StartTimer(uint64_t a1, char a2, _QWORD *a3, double a4, double a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  dispatch_time_t v20;
  _QWORD handler[5];
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  AVAEDispatchQueueTimer::CancelTimer((AVAEDispatchQueueTimer *)a1);
  *(_BYTE *)(a1 + 16) = 1;
  v10 = (_QWORD *)a3[3];
  if (v10)
  {
    if (v10 == a3)
    {
      v23 = v22;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v22);
    }
    else
    {
      v23 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v23 = 0;
  }
  v11 = a1 + 24;
  if ((_QWORD *)(a1 + 24) != v22)
  {
    v12 = v23;
    v13 = *(_QWORD *)(a1 + 48);
    if (v23 == v22)
    {
      if (v13 == v11)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v24);
        (*(void (**)(_QWORD *))(*v23 + 32))(v23);
        v23 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v22);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
        *(_QWORD *)(a1 + 48) = 0;
        v23 = v22;
        (*(void (**)(_QWORD *, uint64_t))(v24[0] + 24))(v24, a1 + 24);
        (*(void (**)(_QWORD *))(v24[0] + 32))(v24);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v22[0] + 24))(v22, a1 + 24);
        (*(void (**)(_QWORD *))(*v23 + 32))(v23);
        v23 = *(_QWORD **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v11;
    }
    else if (v13 == v11)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(a1 + 24, v22);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
      *(_QWORD *)(a1 + 48) = v23;
      v23 = v22;
    }
    else
    {
      v23 = *(_QWORD **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v12;
    }
  }
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_20:
  *(_BYTE *)(a1 + 56) = a2;
  v16 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)a1);
  v17 = MEMORY[0x1E0C809B0];
  *(_QWORD *)(a1 + 8) = v16;
  handler[0] = v17;
  handler[1] = 3221225472;
  handler[2] = ___ZN22AVAEDispatchQueueTimer10StartTimerEddbNSt3__18functionIFvbEEE_block_invoke;
  handler[3] = &__block_descriptor_40_e5_v8__0l;
  handler[4] = a1;
  dispatch_source_set_event_handler(v16, handler);
  dispatch_activate(*(dispatch_object_t *)(a1 + 8));
  if (a5 <= 0.0)
    v18 = -1;
  else
    v18 = (unint64_t)(a5 * 1000000000.0);
  v19 = *(NSObject **)(a1 + 8);
  v20 = dispatch_time(0, (uint64_t)(a4 * 1000000000.0));
  dispatch_source_set_timer(v19, v20, v18, 0x1312D00uLL);
}

void sub_19B77949C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5AE8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::operator()(uint64_t a1)
{
  AVAEGraphStateTracker **v1;
  std::recursive_mutex *v2;
  AVAEGraphStateTracker *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(AVAEGraphStateTracker ***)(a1 + 8);
  v2 = (std::recursive_mutex *)(*(_QWORD *)*v1 + 112);
  if (std::recursive_mutex::try_lock(v2))
  {
    v3 = *v1;
    if (*((_BYTE *)*v1 + 208)
      && *((_BYTE *)v3 + 184)
      && !*((_BYTE *)v3 + 187)
      && (AVAEGraphStateTracker::GraphHasActiveSource(v3) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
      {
        v5 = 136315650;
        v6 = "AVAudioEngineGraph.mm";
        v7 = 1024;
        v8 = 1245;
        v9 = 2048;
        v10 = 0x404E000000000000;
        _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAudioEngine (auto shutdown mode): left running idle for %.f s, stopping!", (uint8_t *)&v5, 0x1Cu);
      }
      AVAudioEngineGraph::Stop((AVAudioNodeImplBase **)*v1, 0);
    }
    AVAEDispatchQueueTimer::CancelTimer(v1[3]);
    std::recursive_mutex::unlock(v2);
  }
}

void sub_19B779660(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::Stop(AVAudioNodeImplBase **this, NSError **a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;

  v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  if (*((_BYTE *)this + 184))
    v5 = AVAudioEngineGraph::_Stop(this, a2);
  else
    v5 = 0;
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_19B7796D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::_Stop(AVAudioNodeImplBase **this, NSError **a2)
{
  std::recursive_mutex *v4;
  uint64_t NodeFromMap;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  AVAudioNodeImplBase *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  v6 = 3;
  if (!NodeFromMap)
    v6 = 2;
  v7 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[v6]);
  v8 = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1584, "_Stop", "ioNode != NULL", v7 != 0, 4294967246, a2);
  *((_BYTE *)this + 232) = *((_BYTE *)this + 187) ^ 1;
  if (v7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7))
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 232))(v7);
    else
      v9 = 4294967246;
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1592, "_Stop", "(err = PerformCommand(*ioNode, kAUStopIO, NULL, 0))", v9, a2);
  }
  else
  {
    v9 = v8;
  }
  v10 = this[1];
  v13 = *(_QWORD **)v10;
  v11 = (_QWORD *)((char *)v10 + 8);
  v12 = v13;
  if (v13 != v11)
  {
    do
    {
      v14 = (_QWORD *)v12[5];
      if (*(_BYTE *)(v14[3] + 48))
        (*(void (**)(_QWORD *))(*v14 + 216))(v14);
      v15 = (_QWORD *)v12[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v12[2];
          v17 = *v16 == (_QWORD)v12;
          v12 = v16;
        }
        while (!v17);
      }
      v12 = v16;
    }
    while (v16 != v11);
  }
  *((_BYTE *)this + 184) = 0;
  AVAudioEngineGraph::MonitorState((AVAudioEngineGraph *)this);
  std::recursive_mutex::unlock(v4);
  return v9;
}

void sub_19B779874(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::MonitorState(AVAudioEngineGraph *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  NSObject *v5;
  NSObject *global_queue;
  AVAEGraphStateTracker *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)((char *)this + 216);
  if (*((_BYTE *)this + 187))
  {
    std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100]((uint64_t *)this + 27, 0);
    return;
  }
  v2 = *v1;
  if (!*v1)
  {
    v4 = (_QWORD *)operator new();
    *v4 = this;
    v4[2] = 0;
    v4[3] = 0;
    v5 = dispatch_queue_create("AVAEGraphStateTracker.RunStateQueue", 0);
    v4[1] = v5;
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_set_target_queue(v5, global_queue);
    std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100](v1, (uint64_t)v4);
    v2 = *((_QWORD *)this + 27);
  }
  v7 = *(AVAEGraphStateTracker **)v2;
  if (!*(_BYTE *)(*(_QWORD *)v2 + 184)
    || *((_BYTE *)v7 + 187)
    || AVAEGraphStateTracker::GraphHasActiveSource(v7))
  {
    AVAEGraphStateTracker::CancelTimers((AVAEGraphStateTracker *)v2);
    return;
  }
  v8 = *(_QWORD *)(v2 + 16);
  if (!v8)
  {
    v9 = operator new();
    *(_QWORD *)v9 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_BYTE *)(v9 + 56) = 0;
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 16), (_QWORD *)v9);
    v8 = *(_QWORD *)(v2 + 16);
  }
  if (!*(_QWORD *)(v8 + 8))
  {
    v10 = 120.0;
    if (*(_BYTE *)(*(_QWORD *)v2 + 208))
      v10 = 30.0;
    v19[0] = &off_1E3BE5AA0;
    v19[1] = v2;
    v20 = v19;
    AVAEDispatchQueueTimer::StartTimer(v8, 0, v19, v10, v10);
    v11 = v20;
    if (v20 == v19)
    {
      v12 = 4;
      v11 = v19;
      goto LABEL_18;
    }
    if (v20)
    {
      v12 = 5;
LABEL_18:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
  }
  if (*(_BYTE *)(*(_QWORD *)v2 + 208))
  {
    v13 = *(_QWORD *)(v2 + 24);
    if (!v13)
    {
      v14 = operator new();
      *(_QWORD *)v14 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_BYTE *)(v14 + 56) = 0;
      std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 24), (_QWORD *)v14);
      v13 = *(_QWORD *)(v2 + 24);
    }
    if (!*(_QWORD *)(v13 + 8))
    {
      v17[0] = &off_1E3BE5AE8;
      v17[1] = v2;
      v18 = v17;
      AVAEDispatchQueueTimer::StartTimer(v13, 0, v17, 60.0, 0.05);
      v15 = v18;
      if (v18 == v17)
      {
        v16 = 4;
        v15 = v17;
      }
      else
      {
        if (!v18)
          return;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
    }
  }
}

void sub_19B779B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    AVAEGraphStateTracker::CancelTimers((AVAEGraphStateTracker *)v2);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 16), 0);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 24), 0);
    dispatch_sync(*(dispatch_queue_t *)(v2 + 8), &__block_literal_global_1626);
    dispatch_release(*(dispatch_object_t *)(v2 + 8));
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 24), 0);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)(v2 + 16), 0);
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

uint64_t ___ZN22AVAEDispatchQueueTimer10StartTimerEddbNSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 16) = 0;
  result = *(_QWORD *)(v1 + 48);
  if (result)
  {
    v3 = 1;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5AA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5AA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v3 = 0x403E000000000000;
    if (!*(_BYTE *)(*(_QWORD *)v1 + 208))
      v3 = 0x405E000000000000;
    v4 = 136315650;
    v5 = "AVAudioEngineGraph.mm";
    v6 = 1024;
    v7 = 1232;
    v8 = 2048;
    v9 = v3;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAudioEngine: left running idle for %.f s", (uint8_t *)&v4, 0x1Cu);
  }
}

uint64_t AVAudioEngineGraph::Initialize(AVAudioEngineGraph *this, NSError **a2)
{
  std::recursive_mutex *v4;
  uint64_t active;
  uint64_t NodeFromMap;
  uint64_t v7;
  _DWORD *v8;
  NSObject *v9;
  const char *v10;
  int v11;
  char v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  AVAudioNodeImplBase **v22;
  NSObject *v23;
  AVAudioEngineGraph *v24;
  AUGraphNodeBaseV3 *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  double v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  double v38;
  void *v39;
  void *v40;
  double v41;
  char v42;
  AVAudioNodeImplBase *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  double v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  _QWORD *v57;
  _QWORD *v58;
  AVAudioEngineGraph *v59;
  AVAudioFormat *v60;
  AVAudioFormat *v61;
  BOOL v62;
  char v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v4);
  if (*((_BYTE *)this + 185))
  {
    active = 0;
    goto LABEL_108;
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
  v7 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  v8 = (_DWORD *)v7;
  v64 = 0;
  if (*((_BYTE *)this + 187))
  {
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      v10 = "outputNode != nullptr";
      if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      *(_DWORD *)buf = 136316418;
      v66 = "AVAEInternal.h";
      v67 = 1024;
      v68 = 71;
      v69 = 2080;
      v70 = "AVAudioEngineGraph.mm";
      v71 = 1024;
      v11 = 1320;
LABEL_16:
      v72 = v11;
      v73 = 2080;
      v74 = "Initialize";
      v75 = 2080;
      v76 = v10;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
LABEL_17:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), v10);
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  if (!(NodeFromMap | v7))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    v10 = "inputNode != nullptr || outputNode != nullptr";
    if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    *(_DWORD *)buf = 136316418;
    v66 = "AVAEInternal.h";
    v67 = 1024;
    v68 = 71;
    v69 = 2080;
    v70 = "AVAudioEngineGraph.mm";
    v71 = 1024;
    v11 = 1322;
    goto LABEL_16;
  }
  if (v7)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v12 = 1;
  v7 = NodeFromMap;
LABEL_19:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
  if ((v12 & 1) == 0
    && (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 152))(v8)
     || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 128))(v8)))
  {
    v8[9] = v13;
  }
  if (NodeFromMap
    && (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 152))(NodeFromMap)
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 128))(NodeFromMap)))
  {
    *(_DWORD *)(NodeFromMap + 36) = v13;
  }
  if ((v12 & 1) != 0)
    goto LABEL_28;
  (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v8 + 200))(v8, *((unsigned __int8 *)this + 187), *((_QWORD *)this + 24));
  active = AVAudioEngineGraph::PerformCommand((uint64_t)this, v8, 3, 0, 0);
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1348, "Initialize", "err = PerformCommand(*outputNode, kAUInitialize, NULL, 0)", active, a2))goto LABEL_106;
  v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 240))(v8);
  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 152))(v8)
    || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 128))(v8))
  {
    v8[9] = v33;
  }
  if (NodeFromMap
    && (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 152))(NodeFromMap)
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 128))(NodeFromMap)))
  {
    *(_DWORD *)(NodeFromMap + 36) = v33;
  }
  v34 = (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, 1, 0);
  v35 = v34;
  if (!v34
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 120))(v34)
    || *((_BYTE *)this + 186)
    && (v36 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v8 + 3) + 72))(*((_QWORD *)v8 + 3), 0), (v37 = v36) != 0)&& (objc_msgSend(v36, "sampleRate"), v38 > 0.0)&& objc_msgSend(v37, "channelCount"))
  {
LABEL_28:
    active = 0;
  }
  else
  {
    v39 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v8 + 3) + 48))(*((_QWORD *)v8 + 3), 0);
    v40 = v39;
    v42 = v39 && (objc_msgSend(v39, "sampleRate"), v41 > 0.0) && objc_msgSend(v40, "channelCount") != 0;
    active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1361, "Initialize", "IsFormatSampleRateAndChannelCountValid(outputHWFormat)", v42, 4294956421, a2);
    if ((_DWORD)active)
      goto LABEL_107;
    v60 = [AVAudioFormat alloc];
    objc_msgSend(v40, "sampleRate");
    v61 = -[AVAudioFormat initStandardFormatWithSampleRate:channels:](v60, "initStandardFormatWithSampleRate:channels:", 2);
    active = AVAudioEngineGraph::_Connect(this, *(AVAudioNodeImplBase **)(v35 + 24), *((AVAudioNodeImplBase **)v8 + 3), 0, 0, v61);
    v62 = _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1369, "Initialize", "err = _Connect(connNode->NodeImpl(), outputNode->NodeImpl(), 0, 0, format)", active, a2);

    if (!v62)
      goto LABEL_106;
    *((_BYTE *)this + 186) = 0;
  }
  std::__list_imp<AUGraphConnection>::clear((_QWORD *)this + 17);
  std::__list_imp<AUGraphConnection>::clear((_QWORD *)this + 20);
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  v17 = (_QWORD *)*v14;
  v15 = v14 + 1;
  v16 = v17;
  if (v17 != v15)
  {
    do
    {
      v18 = (_DWORD *)v16[5];
      v18[8] = 0;
      (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v18 + 200))(v18, *((unsigned __int8 *)this + 187), *((_QWORD *)this + 24));
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v21 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v21);
      }
      v16 = v20;
    }
    while (v20 != v15);
  }
  v22 = (AVAudioNodeImplBase **)AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  if (v22)
  {
    active = AUGraphParser::InitializeActiveNodesInOutputChain(this, v22, &v64);
    if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1393, "Initialize", "err = AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, kOutputChainOptimizedTraversal, *GetOutputNode(), isOutputChainActive)", active, a2))goto LABEL_106;
    if (!*(_BYTE *)(*(_QWORD *)(AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3)) + 24)
                   + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v66 = "AVAEInternal.h";
        v67 = 1024;
        v68 = 71;
        v69 = 2080;
        v70 = "AVAudioEngineGraph.mm";
        v71 = 1024;
        v72 = 1396;
        v73 = 2080;
        v74 = "Initialize";
        v75 = 2080;
        v76 = "GetOutputNode()->IsInitialized()";
        _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetOutputNode()->IsInitialized()");
    }
  }
  v24 = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
  if (!v24)
    goto LABEL_52;
  active = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)this, v24, v25);
  if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1401, "Initialize", "err = AUGraphParser::InitializeActiveNodesInInputChain(ThisGraph, *GetInputNode())", active, a2))
  {
    if (!*(_BYTE *)(*(_QWORD *)(AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2)) + 24)
                   + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v26 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v66 = "AVAEInternal.h";
        v67 = 1024;
        v68 = 71;
        v69 = 2080;
        v70 = "AVAudioEngineGraph.mm";
        v71 = 1024;
        v72 = 1405;
        v73 = 2080;
        v74 = "Initialize";
        v75 = 2080;
        v76 = "GetInputNode()->IsInitialized()";
        _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetInputNode()->IsInitialized()");
    }
LABEL_52:
    v27 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
    if (v27 && (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 24))(v27, 1, 0))
    {
      v28 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
      v29 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v28 + 24) + 48))(*(_QWORD *)(v28 + 24), 0);
      v30 = v29;
      v32 = v29 && (objc_msgSend(v29, "sampleRate"), v31 > 0.0) && objc_msgSend(v30, "channelCount") != 0;
      active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1412, "Initialize", "IsFormatSampleRateAndChannelCountValid(outputHWFormat)", v32, 4294956421, a2);
      if ((_DWORD)active)
        goto LABEL_107;
    }
    v43 = (AVAudioNodeImplBase *)*((_QWORD *)this + 2);
    if (AVAudioEngineGraph::GetNodeFromMap(this, v43))
    {
      if (*((_QWORD *)this + 11) != *((_QWORD *)this + 12))
      {
LABEL_80:
        v45 = AVAudioEngineGraph::GetNodeFromMap(this, v43);
        v46 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v45 + 24) + 72))(*(_QWORD *)(v45 + 24), 0);
        v47 = v46;
        v49 = v46
           && (objc_msgSend(v46, "sampleRate"), v48 > 0.0)
           && objc_msgSend(v47, "channelCount") != 0;
        active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1419, "Initialize", "IsFormatSampleRateAndChannelCountValid(inputHWFormat)", v49, 4294956421, a2);
        if ((_DWORD)active)
          goto LABEL_107;
        goto LABEL_85;
      }
      v44 = AVAudioEngineGraph::GetNodeFromMap(this, v43);
      if ((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 24))(v44, 0, 0))
      {
        v43 = (AVAudioNodeImplBase *)*((_QWORD *)this + 2);
        goto LABEL_80;
      }
    }
LABEL_85:
    v50 = (_QWORD *)*((_QWORD *)this + 1);
    v53 = (_QWORD *)*v50;
    v51 = v50 + 1;
    v52 = v53;
    if (v53 != v51)
    {
      do
      {
        v54 = v52[5];
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 128))(v54) & 1) == 0
          && (*(_BYTE *)(v54 + 32) & 3) == 0)
        {
          v55 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (_QWORD *)v54, 4, 0, 0);
          if ((_DWORD)v55)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v56 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316674;
              v66 = "AVAEInternal.h";
              v67 = 1024;
              v68 = 104;
              v69 = 2080;
              v70 = "AVAudioEngineGraph.mm";
              v71 = 1024;
              v72 = 1430;
              v73 = 2080;
              v74 = "Initialize";
              v75 = 2080;
              v76 = "PerformCommand(*graphNode, kAUUninitialize, NULL, 0)";
              v77 = 1024;
              v78 = v55;
              _os_log_impl(&dword_19B733000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v55);
          }
        }
        v57 = (_QWORD *)v52[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = (_QWORD *)v52[2];
            v21 = *v58 == (_QWORD)v52;
            v52 = v58;
          }
          while (!v21);
        }
        v52 = v58;
      }
      while (v58 != v51);
    }
    AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)this);
    AUGraphParser::UpdateGraphAttributes((AVAudioNodeImplBase **)this, v59);
    if (!(_DWORD)active)
    {
      *((_BYTE *)this + 185) = 1;
      goto LABEL_108;
    }
LABEL_107:
    AVAudioEngineGraph::_Uninitialize((AVAudioNodeImplBase **)this, a2);
    goto LABEL_108;
  }
LABEL_106:
  if ((_DWORD)active || !*((_BYTE *)this + 185))
    goto LABEL_107;
LABEL_108:
  std::recursive_mutex::unlock(v4);
  return active;
}

void sub_19B77A984(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::_Connect(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, AVAudioNodeImplBase *a3, uint64_t a4, uint64_t a5, AVAudioFormat *a6)
{
  double v12;
  NSObject *v13;
  std::recursive_mutex *v14;
  NSObject *v15;
  _QWORD *NodeFromMap;
  const AVAudioEngineGraph *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  NSError **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  NSObject *v28;
  int v29;
  _BOOL4 IsNodeConnectedToTarget;
  _BOOL4 v31;
  BOOL v32;
  int v33;
  NSObject *v34;
  uint64_t updated;
  int v36;
  uint64_t *v37;
  uint64_t Disconnection;
  uint64_t *i;
  unsigned int v40;
  NSError **v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  NSObject *v48;
  AVAudioEngineGraph **v49;
  char *v50;
  AVAudioEngineGraph **v51;
  uint64_t v52;
  unsigned int v53;
  NSError **v54;
  const AVAudioEngineGraph *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  AVAudioEngineGraph **v61;
  AVAudioEngineGraph *v62;
  uint64_t v63;
  void *v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void *v70;
  NSObject *v71;
  int v72;
  uint64_t *j;
  int v74;
  uint64_t *v76;
  const AVAudioEngineGraph *v77;
  NSObject *v78;
  NSObject *v79;
  char v81;
  AVAudioNodeImplBase *v82;
  int v83;
  int v84;
  AVAudioFormat *v85;
  std::recursive_mutex *v86;
  int v87;
  unsigned int v88;
  char v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *__p;
  void *v97;
  unint64_t v98;
  _QWORD *v99;
  int v100;
  const AVAudioEngineGraph *v101;
  int v102;
  AVAudioEngineGraph *v103;
  unsigned int v104;
  const AVAudioEngineGraph *v105;
  int buf;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  char *v111;
  __int16 v112;
  int v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  const char *v117;
  __int16 v118;
  int v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    -[AVAudioFormat sampleRate](a6, "sampleRate");
    if (v12 <= 0.0 || !-[AVAudioFormat channelCount](a6, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316418;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 71;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2153;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v117 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
    }
  }
  v14 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v14);
  v86 = v14;
  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2) || !AVAudioEngineGraph::IsNodeInGraph(this, a3))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316418;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 71;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2163;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "IsNodeInGraph(inSrcImpl) && IsNodeInGraph(inDestImpl)";
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inSrcImpl) && IsNodeInGraph(inDestImpl)");
  }
  v85 = a6;
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
  v17 = (const AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, a3);
  v105 = v17;
  v103 = 0;
  v104 = -1;
  v99 = NodeFromMap;
  v100 = a4;
  v101 = v17;
  v102 = a5;
  if (!(*(unsigned int (**)(AVAudioNodeImplBase *))(*(_QWORD *)a2 + 104))(a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316418;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 71;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2178;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "inSrcImpl->NumberOutputs() > 0";
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcImpl->NumberOutputs() > 0");
  }
  if (!(*(unsigned int (**)(AVAudioNodeImplBase *))(*(_QWORD *)a3 + 96))(a3)
    && ((*(uint64_t (**)(const AVAudioEngineGraph *))(*(_QWORD *)v17 + 96))(v17) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316418;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 71;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2180;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "inDestImpl->NumberInputs() > 0 || graphNodeDest->CanResizeNumberOfInputs()";
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inDestImpl->NumberInputs() > 0 || graphNodeDest->CanResizeNumberOfInputs()");
  }
  if (!*((_BYTE *)this + 186))
  {
    if (v17)
    {
      v20 = *((_QWORD *)this + 3);
      if (v20)
      {
        if (*((_QWORD *)v17 + 3) == v20)
        {
          v21 = (*(uint64_t (**)(_QWORD *))(*NodeFromMap + 120))(NodeFromMap) ^ 1;
          if (!a6)
            LOBYTE(v21) = 1;
          if ((v21 & 1) == 0)
            *((_BYTE *)this + 186) = 1;
        }
      }
    }
  }
  if ((const AVAudioEngineGraph *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*NodeFromMap + 24))(NodeFromMap, 0, a4) == v17&& (_QWORD *)(*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, 1, a5) == NodeFromMap&& (!a6|| -[AVAudioFormat isEqual:](a6, "isEqual:", (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)a2 + 48))(a2, a4))))
  {
    updated = 0;
    goto LABEL_214;
  }
  v82 = a3;
  __p = 0;
  v97 = 0;
  v98 = 0;
  v24 = *(unsigned __int8 *)(NodeFromMap[3] + 48);
  v25 = *(unsigned __int8 *)(*((_QWORD *)v17 + 3) + 48);
  v93 = (uint64_t)&v93;
  v94 = &v93;
  v95 = 0;
  v90 = (uint64_t)&v90;
  v91 = &v90;
  v92 = 0;
  v87 = 2;
  v88 = a5;
  v83 = v24;
  v84 = v25;
  if (!*((_BYTE *)this + 185) || !(v24 | v25))
    goto LABEL_89;
  if (v24)
  {
    if ((NodeFromMap[4] & 2) != 0)
    {
      v89 = 0;
      AUGraphParser::GetNodeConnectionsToMixer(NodeFromMap, &v93, &v89);
      if (v95)
        v26 = v89 == 0;
      else
        v26 = 0;
      v27 = v26;
      if (!*((_BYTE *)this + 184))
      {
        if (v27)
          v29 = 2;
        else
          v29 = 1;
LABEL_57:
        v87 = v29;
        IsNodeConnectedToTarget = AUGraphParser::IsNodeConnectedToTarget(0, NodeFromMap, (_QWORD *)this + 11);
        v31 = IsNodeConnectedToTarget;
        if (!v84)
        {
          if (!IsNodeConnectedToTarget)
            goto LABEL_89;
LABEL_88:
          AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
          goto LABEL_89;
        }
        goto LABEL_62;
      }
      if ((v27 & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v28 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          buf = 136316418;
          v107 = "AVAEInternal.h";
          v108 = 1024;
          v109 = 71;
          v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          v112 = 1024;
          v113 = 2228;
          v114 = 2080;
          v115 = "_Connect";
          v116 = 2080;
          v117 = "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode";
          _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode");
      }
    }
    v29 = 2;
    goto LABEL_57;
  }
  v87 = 2;
  if (!v25)
    goto LABEL_89;
  v31 = 0;
LABEL_62:
  if ((*((_BYTE *)v17 + 32) & 2) != 0
    && ((*(uint64_t (**)(const AVAudioEngineGraph *))(*(_QWORD *)v17 + 120))(v17) & 1) == 0)
  {
    v89 = 0;
    AUGraphParser::GetNodeConnectionsToMixer(v17, &v90, &v89);
    if (v92)
      v32 = v89 == 0;
    else
      v32 = 0;
    v33 = v32;
    if (*((_BYTE *)this + 184))
    {
      if ((v33 & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v34 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          buf = 136316418;
          v107 = "AVAEInternal.h";
          v108 = 1024;
          v109 = 71;
          v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          v112 = 1024;
          v113 = 2245;
          v114 = 2080;
          v115 = "_Connect";
          v116 = 2080;
          v117 = "!destNodeMixerConns.empty() && !isDestNodeConnectedToIONode";
          _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!destNodeMixerConns.empty() && !isDestNodeConnectedToIONode");
      }
    }
    else
    {
      v26 = v33 == 0;
      v36 = v87;
      if (v26)
        v36 = 1;
      v87 = v36;
    }
  }
  if (AUGraphParser::IsNodeConnectedToTarget(0, v17, (_QWORD *)this + 11) || v31)
    goto LABEL_88;
LABEL_89:
  v37 = v94;
  if (v94 != &v93)
  {
    while (1)
    {
      AUGraphParser::PrepareForDisconnection(this, (const AVAudioEngineGraph *)v37[4], 0, v22, v23);
      Disconnection = AVAudioEngineGraph::MakeDisconnection(this, *(AVAudioNodeImplBase **)(v37[4] + 24), *((unsigned int *)v37 + 10), 0);
      if ((_DWORD)Disconnection)
        break;
      v37 = (uint64_t *)v37[1];
      if (v37 == &v93)
        goto LABEL_92;
    }
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v47 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316674;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 104;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2266;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
      v118 = 1024;
      v119 = Disconnection;
      _os_log_impl(&dword_19B733000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    goto LABEL_184;
  }
LABEL_92:
  for (i = v91; i != &v90; i = (uint64_t *)i[1])
  {
    AUGraphParser::PrepareForDisconnection(this, (const AVAudioEngineGraph *)i[4], 0, v22, v23);
    Disconnection = AVAudioEngineGraph::MakeDisconnection(this, *(AVAudioNodeImplBase **)(i[4] + 24), *((unsigned int *)i + 10), 0);
    if ((_DWORD)Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v48 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316674;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 104;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2272;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v117 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
        v118 = 1024;
        v119 = Disconnection;
        _os_log_impl(&dword_19B733000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
      }
      goto LABEL_184;
    }
  }
  v42 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 4, 0, 0);
  if ((_DWORD)v42)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v43 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316674;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 104;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2278;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "PerformCommand(*graphNodeSrc, kAUUninitialize, NULL, 0)";
      v118 = 1024;
      v119 = v42;
      _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v42);
  }
  AUGraphParser::PrepareForDisconnection(this, v17, 0, v40, v41);
  v44 = (*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, 1, a5);
  if (v44)
  {
    Disconnection = AVAudioEngineGraph::MakeDisconnection(this, a3, a5, 0);
    if ((_DWORD)Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316674;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 104;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2289;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v46 = "err = MakeDisconnection(inDestImpl, inDestBus)";
LABEL_183:
        v117 = v46;
        v118 = 1024;
        v119 = Disconnection;
        _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
        goto LABEL_184;
      }
      goto LABEL_184;
    }
    v49 = 0;
    if (*((_BYTE *)this + 185))
    {
      v50 = 0;
      v51 = 0;
      if (v84)
      {
        v49 = (AVAudioEngineGraph **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
        v50 = (char *)&v49[v52];
        *v49 = (AVAudioEngineGraph *)v44;
        v51 = v49 + 1;
        __p = v49;
        v97 = v49 + 1;
        v98 = (unint64_t)v50;
      }
    }
    else
    {
      v50 = 0;
      v51 = 0;
    }
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
  }
  v55 = v17;
  if ((*(unsigned int (**)(_QWORD *, _QWORD, uint64_t, AVAudioEngineGraph **))(*NodeFromMap + 40))(NodeFromMap, 0, a4, &v103))
  {
    AUGraphParser::PrepareForDisconnection(this, v103, 0, v53, v54);
    Disconnection = AVAudioEngineGraph::MakeDisconnection(this, *((AVAudioNodeImplBase **)v103 + 3), v104, 0);
    if ((_DWORD)Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316674;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 104;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2300;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v46 = "err = MakeDisconnection(graphNodeSrcCurrConnPoint.node->NodeImpl(), graphNodeSrcCurrConnPoint.bus)";
        goto LABEL_183;
      }
LABEL_184:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
      v72 = 0;
      goto LABEL_185;
    }
    v55 = v17;
    if (*((_BYTE *)this + 185))
    {
      v55 = v17;
      if (v83)
      {
        if (v51 >= (AVAudioEngineGraph **)v50)
        {
          v57 = v51 - v49;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          if ((v50 - (char *)v49) >> 2 > v58)
            v58 = (v50 - (char *)v49) >> 2;
          if ((unint64_t)(v50 - (char *)v49) >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v59);
          else
            v60 = 0;
          v61 = (AVAudioEngineGraph **)(v59 + 8 * v57);
          *v61 = v103;
          v56 = v61 + 1;
          if (v51 != v49)
          {
            do
            {
              v62 = *--v51;
              *--v61 = v62;
            }
            while (v51 != v49);
            v49 = (AVAudioEngineGraph **)__p;
          }
          __p = v61;
          v97 = v56;
          v98 = v59 + 8 * v60;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v51 = v103;
          v56 = v51 + 1;
        }
        v97 = v56;
        v55 = v105;
      }
    }
  }
  if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)v55 + 96))(v55)
    && (*(unsigned int (**)(_QWORD))(**((_QWORD **)v55 + 3) + 96))(*((_QWORD *)v55 + 3)) <= v88)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v55 + 3) + 112))(*((_QWORD *)v55 + 3), v88 + 1);
  }
  if ((*(unsigned int (**)(_QWORD *))(*NodeFromMap + 104))(NodeFromMap)
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)NodeFromMap[3] + 104))(NodeFromMap[3]) <= a4)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)NodeFromMap[3] + 120))(NodeFromMap[3], (a4 + 1));
  }
  if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)v55 + 136))(v55)
    && *((_BYTE *)this + 185))
  {
    v63 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)v82 + 72))(v82, v88);
    if (v85)
    {
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2321, "_Connect", "[format isEqual:dstFormat]", -[AVAudioFormat isEqual:](v85, "isEqual:", v63));
    }
    else if ((objc_msgSend((id)(*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)a2 + 48))(a2, a4), "isEqual:", v63) & 1) == 0)
    {
      v81 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD, uint64_t))(*(_QWORD *)a2 + 64))(a2, a4, v63);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2325, "_Connect", "inSrcImpl->SetOutputFormat(inSrcBus, dstFormat)", v81);
    }
  }
  else if (v85)
  {
    if ((*(unsigned int (**)(_QWORD *))(*NodeFromMap + 136))(NodeFromMap) && *((_BYTE *)this + 185))
    {
      v64 = (void *)(*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)a2 + 48))(a2, a4);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2330, "_Connect", "[srcFormat isEqual:format]", objc_msgSend(v64, "isEqual:", v85));
      v65 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD, void *))(*(_QWORD *)v82 + 80))(v82, v88, v64);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2331, "_Connect", "inDestImpl->SetInputFormat(inDestBus, srcFormat)", v65);
    }
    else
    {
      if ((*(unsigned int (**)(AVAudioNodeImplBase *, _QWORD, AVAudioFormat *))(*(_QWORD *)a2 + 64))(a2, a4, v85))
      {
        v66 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD, AVAudioFormat *))(*(_QWORD *)v82 + 80))(v82, v88, v85);
      }
      else
      {
        v66 = 0;
      }
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2333, "_Connect", "inSrcImpl->SetOutputFormat(inSrcBus, format) && inDestImpl->SetInputFormat(inDestBus, format)", v66);
    }
  }
  else
  {
    v67 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)a2 + 48))(a2, a4);
    v68 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD, uint64_t))(*(_QWORD *)v82 + 80))(v82, v88, v67);
    _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2338, "_Connect", "inDestImpl->SetInputFormat(inDestBus, srcFormat)", v68);
  }
  v69 = NodeFromMap[14];
  if (v69)
  {
    v70 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v69 + 24) + 48))(*(_QWORD *)(v69 + 24), 0);
    if ((objc_msgSend(v70, "isEqual:", (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0)) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v71 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316418;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 71;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2344;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v117 = "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]";
        _os_log_impl(&dword_19B733000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]");
    }
  }
  if (*((_BYTE *)this + 185)
    && *(_BYTE *)(*((_QWORD *)v55 + 3) + 48)
    && (*(unsigned int (**)(const AVAudioEngineGraph *))(*(_QWORD *)v55 + 120))(v55)
    && (*((_BYTE *)v55 + 32) & 2) != 0)
  {
    AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)&v99, 0);
  }
  else
  {
    AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)&v99);
    Disconnection = AVAudioEngineGraph::MakeConnection(this, (AVAudioNodeImplBase *)NodeFromMap[3], *((AVAudioNodeImplBase **)v17 + 3), a4, v88, 0);
    if ((_DWORD)Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        buf = 136316674;
        v107 = "AVAEInternal.h";
        v108 = 1024;
        v109 = 104;
        v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        v112 = 1024;
        v113 = 2364;
        v114 = 2080;
        v115 = "_Connect";
        v116 = 2080;
        v46 = "err = MakeConnection(currentConn)";
        goto LABEL_183;
      }
      goto LABEL_184;
    }
    if (*((_BYTE *)this + 185))
    {
      AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)&v99, 1, 0);
      AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)&v99, 1, 0);
      v72 = 1;
      if (!v84 && v83)
        std::vector<AUGraphNodeBaseV3 *>::push_back[abi:ne180100](&__p, &v105);
      goto LABEL_185;
    }
  }
  v72 = 1;
LABEL_185:
  for (j = v94; j != &v93; j = (uint64_t *)j[1])
  {
    if (NodeFromMap == (_QWORD *)j[2])
      v74 = v72;
    else
      v74 = 0;
    if (v74 != 1 || *((_DWORD *)j + 6) != (_DWORD)a4)
      AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(j + 2), 0);
  }
  v76 = v91;
  if (v91 != &v90)
  {
    v77 = v105;
    do
    {
      if (v77 == (const AVAudioEngineGraph *)v76[4])
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v78 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          buf = 136316418;
          v107 = "AVAEInternal.h";
          v108 = 1024;
          v109 = 71;
          v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          v112 = 1024;
          v113 = 2390;
          v114 = 2080;
          v115 = "_Connect";
          v116 = 2080;
          v117 = "graphNodeDest != conn.destNode";
          _os_log_impl(&dword_19B733000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNodeDest != conn.destNode");
      }
      AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v76 + 2), 0);
      v76 = (uint64_t *)v76[1];
    }
    while (v76 != &v90);
  }
  updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(this, (uint64_t)&__p, v87);
  if ((_DWORD)updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v79 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf = 136316674;
      v107 = "AVAEInternal.h";
      v108 = 1024;
      v109 = 104;
      v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      v112 = 1024;
      v113 = 2396;
      v114 = 2080;
      v115 = "_Connect";
      v116 = 2080;
      v117 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      v118 = 1024;
      v119 = updated;
      _os_log_impl(&dword_19B733000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), updated);
  }
  AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)this);
  std::__list_imp<AUGraphConnection>::clear(&v90);
  std::__list_imp<AUGraphConnection>::clear(&v93);
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }
  v14 = v86;
LABEL_214:
  std::recursive_mutex::unlock(v14);
  return updated;
}

void sub_19B77C278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::__list_imp<AUGraphConnection>::clear(&a19);
  std::__list_imp<AUGraphConnection>::clear(&a22);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::recursive_mutex::unlock(a13);
  _Unwind_Resume(a1);
}

AVAudioNode *AVAudioEngineGraph::RemoveInactiveInternalNodes(AVAudioNode *this)
{
  id *isa;
  AVAudioEngineGraph *v2;
  AVAudioNode *v3;
  id *v4;
  _QWORD *v5;
  _QWORD *impl;
  int v7;
  id *v9;
  int64_t v10;

  isa = (id *)this[2].super.isa;
  if (isa != this[2]._impl)
  {
    v2 = (AVAudioEngineGraph *)this;
    while (1)
    {
      v3 = (AVAudioNode *)*isa;
      this = (AVAudioNode *)AVAudioEngineGraph::GetNodeFromMap(v2, (AVAudioNodeImplBase *)objc_msgSend(*isa, "impl"));
      if (!this)
        goto LABEL_13;
      if (!*((_BYTE *)this[1]._impl + 48))
      {
        v5 = this[3].super.isa;
        impl = this[3]._impl;
        if (v5 == impl)
          break;
        v7 = 0;
        do
        {
          if (*v5++)
            ++v7;
        }
        while (v5 != impl);
        if (!v7)
          break;
      }
      ++isa;
      v4 = (id *)*((_QWORD *)v2 + 5);
LABEL_16:
      if (isa == v4)
        return this;
    }
    AVAudioEngineGraph::RemoveNode((uint64_t ***)v2, v3, 0);
LABEL_13:
    this = v3;
    v9 = (id *)*((_QWORD *)v2 + 5);
    v10 = (char *)v9 - (char *)(isa + 1);
    if (v9 != isa + 1)
      this = (AVAudioNode *)memmove(isa, isa + 1, (char *)v9 - (char *)(isa + 1));
    v4 = (id *)((char *)isa + v10);
    *((_QWORD *)v2 + 5) = (char *)isa + v10;
    goto LABEL_16;
  }
  return this;
}

uint64_t AVAudioEngineGraph::_Uninitialize(AVAudioNodeImplBase **this, NSError **a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  AVAudioNodeImplBase *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t Connection;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  AVAudioNodeImplBase **i;
  AVAudioNodeImplBase **j;
  _QWORD *NodeFromMap;
  _QWORD *v17;

  v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  v5 = AVAudioEngineGraph::Stop(this, a2);
  v6 = this[1];
  v9 = *(_QWORD **)v6;
  v7 = (_QWORD *)((char *)v6 + 8);
  v8 = v9;
  if (v9 == v7)
  {
    Connection = v5;
  }
  else
  {
    do
    {
      Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, (_QWORD *)v8[5], 4, 0, 0);
      _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1473, "_Uninitialize", "(err = PerformCommand(*graphNode, kAUUninitialize, NULL, 0))", Connection, a2);
      v11 = (_QWORD *)v8[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v8[2];
          v13 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
    }
    while (v12 != v7);
  }
  for (i = (AVAudioNodeImplBase **)this[18]; i != this + 17; i = (AVAudioNodeImplBase **)i[1])
  {
    Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)i + 2, a2);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1480, "_Uninitialize", "(err = MakeConnection(conn, outErr))", Connection, a2);
  }
  for (j = (AVAudioNodeImplBase **)this[21]; j != this + 20; j = (AVAudioNodeImplBase **)j[1])
  {
    Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)j + 2, a2);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1483, "_Uninitialize", "(err = MakeConnection(conn, outErr))", Connection, a2);
  }
  std::__list_imp<AUGraphConnection>::clear(this + 17);
  std::__list_imp<AUGraphConnection>::clear(this + 20);
  *((_BYTE *)this + 185) = 0;
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  if (NodeFromMap)
  {
    Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 4, 0, 0);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1495, "_Uninitialize", "(err = PerformCommand(*GetOutputNode(), kAUUninitialize, NULL, 0))", Connection, a2);
  }
  v17 = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (v17)
  {
    Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v17, 4, 0, 0);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1497, "_Uninitialize", "(err = PerformCommand(*GetInputNode(), kAUUninitialize, NULL, 0))", Connection, a2);
  }
  std::recursive_mutex::unlock(v4);
  return Connection;
}

void sub_19B77C654(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::RemoveNode(uint64_t ***this, AVAudioNode *a2, NSError **a3)
{
  uint64_t updated;
  AVAudioNodeImplBase *v7;
  char IsNodeInGraph;
  _QWORD *NodeFromMap;
  AudioComponentDescription *v10;
  char v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  NSError **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const char *v24;
  uint64_t Disconnection;
  uint64_t v26;
  const char *v27;
  _QWORD **v28;
  uint64_t v29;
  int v30;
  AVAudioNodeImplBase **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  NSError **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Connection;
  unsigned int v41;
  NSError **v42;
  AVAudioEngineGraph *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  AudioComponentDescription *v72;
  _QWORD **v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t i;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD **v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  _QWORD **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  AUGraphSequencerInterface *v93;
  NSObject *v94;
  AUGraphSequencerInterface *v96;
  uint64_t v97;
  int v98;
  AVAudioNodeImplBase *v99;
  std::recursive_mutex *v100;
  char v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *__p;
  uint64_t v108;
  void *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  void *__dst;
  char *v116;
  unint64_t v117;
  _BYTE buf[28];
  __int16 v119;
  int v120;
  __int16 v121;
  const char *v122;
  __int16 v123;
  const char *v124;
  __int16 v125;
  int v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1694, "RemoveNode", "nil != inAVNode", a2 != 0, 4294967246, a3);
  if ((_DWORD)updated)
    return updated;
  v100 = (std::recursive_mutex *)(*this + 14);
  std::recursive_mutex::lock(v100);
  v7 = -[AVAudioNode impl](a2, "impl");
  IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, v7);
  updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1702, "RemoveNode", "IsNodeInGraph(inImpl)", IsNodeInGraph, 4294967246, a3);
  v99 = v7;
  if ((_DWORD)updated)
    goto LABEL_170;
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v7);
  if ((*(unsigned int (**)(_QWORD *))(*NodeFromMap + 128))(NodeFromMap))
  {
    v11 = !*((_BYTE *)this + 184) && *(_BYTE *)(NodeFromMap[3] + 48) == 0;
    updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1720, "RemoveNode", "!IsRunning() && !graphNode->IsInitialized()", v11, 4294967246, a3);
    if ((_DWORD)updated)
      goto LABEL_170;
  }
  if (((NodeFromMap[7] - NodeFromMap[6]) & 0x7FFFFFFF8) == 0
    && ((NodeFromMap[10] - NodeFromMap[9]) & 0x7FFFFFFF8) == 0
    && !NodeFromMap[14]
    && NodeFromMap[16] == NodeFromMap[17])
  {
    if (*((_BYTE *)this + 185)
      && (*(_QWORD *)buf = NodeFromMap,
          *(_DWORD *)&buf[8] = 0,
          *(_QWORD *)&buf[16] = NodeFromMap,
          *(_DWORD *)&buf[24] = 0,
          AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)buf, 2, a3),
          AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)buf, 2, a3),
          a3)
      && -[NSError code](*a3, "code"))
    {
      updated = -[NSError code](*a3, "code");
    }
    else
    {
      v96 = (AUGraphSequencerInterface *)this[10];
      if (v96)
        AUGraphSequencerInterface::NodeStateChanged(v96, (_QWORD **)NodeFromMap, 3u, v10);
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(this[1], (unint64_t)v7);
      (*(void (**)(_QWORD *))(*NodeFromMap + 8))(NodeFromMap);
      updated = 0;
    }
    goto LABEL_170;
  }
  v12 = *(unsigned __int8 *)(NodeFromMap[3] + 48);
  __dst = 0;
  v116 = 0;
  v117 = 0;
  v112 = (uint64_t)&v112;
  v113 = &v112;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v106 = (uint64_t)&v106;
  __p = &v106;
  v108 = 0;
  v103 = (uint64_t)&v103;
  v104 = &v103;
  v105 = 0;
  AUGraphNodeBase::GetValidConnections((uint64_t)NodeFromMap, 1, &v106);
  AUGraphNodeBase::GetValidConnections((uint64_t)NodeFromMap, 0, &v103);
  v98 = 2;
  if (!*((_BYTE *)this + 185) || !v12)
    goto LABEL_36;
  v13 = *((_DWORD *)NodeFromMap + 8);
  if ((v13 & 3) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v119 = 1024;
      v120 = 1775;
      v121 = 2080;
      v122 = "RemoveNode";
      v123 = 2080;
      v124 = "(graphNode->IsNodeState(kAUGraphNodeState_InInputChain) || graphNode->IsNodeState(kAUGraphNodeState_InOutputChain))";
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "(graphNode->IsNodeState(kAUGraphNodeState_InInputChain) || graphNode->IsNodeState(kAUGraphNodeState_InOutputChain))");
    v13 = *((_DWORD *)NodeFromMap + 8);
  }
  if ((v13 & 2) == 0)
    goto LABEL_21;
  buf[0] = 0;
  AUGraphParser::GetNodeConnectionsToMixer(NodeFromMap, &v112, buf);
  if (v114)
    v16 = buf[0] == 0;
  else
    v16 = 0;
  v17 = v16;
  if (*((_BYTE *)this + 184))
  {
    updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1782, "RemoveNode", "!nodeMixerConns.empty() && !hasDirectConnToIONode", v17, 4294967246, a3);
    if ((_DWORD)updated)
      goto LABEL_166;
LABEL_21:
    v15 = 2;
    goto LABEL_34;
  }
  if (v17)
    v15 = 2;
  else
    v15 = 1;
LABEL_34:
  v98 = v15;
  if (AUGraphParser::IsNodeConnectedToTarget(0, NodeFromMap, this + 11))
    AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
LABEL_36:
  v97 = NodeFromMap[14];
  if (v97)
  {
    *(_QWORD *)buf = NodeFromMap[14];
    *(_QWORD *)&buf[8] = NodeFromMap;
    *(_QWORD *)&buf[16] = 0;
    *(_DWORD *)&buf[24] = 0;
    (*(void (**)(_QWORD *, _BYTE *))(*NodeFromMap + 368))(NodeFromMap, buf);
  }
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)NodeFromMap[3] + 256))(NodeFromMap[3]) == 1635085673)
  {
    if (v97)
      std::vector<AUGraphNodeBaseV3 *>::__assign_with_size[abi:ne180100]<AUGraphNodeBaseV3 **,AUGraphNodeBaseV3 **>(&v109, (char *)NodeFromMap[16], (char *)NodeFromMap[17], (uint64_t)(NodeFromMap[17] - NodeFromMap[16]) >> 3);
    v20 = (uint64_t *)NodeFromMap[16];
    v21 = (uint64_t *)NodeFromMap[17];
    while (v20 != v21)
    {
      v22 = *v20;
      *(_QWORD *)buf = NodeFromMap;
      *(_QWORD *)&buf[8] = v22;
      *(_QWORD *)&buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 368))(v22, buf);
      ++v20;
    }
  }
  v102 = NodeFromMap;
  v23 = v113;
  if (v113 != &v112)
  {
    v24 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)";
    do
    {
      AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v23[4], a3, v18, v19);
      Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v23[4] + 24), *((unsigned int *)v23 + 10), a3);
      if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1822, "RemoveNode", v24, Disconnection, a3))goto LABEL_160;
      if (v102 == (_QWORD *)v23[2])
      {
        v26 = v108;
        if (v108)
        {
          v27 = v24;
          v28 = (_QWORD **)__p;
          v29 = *((_QWORD *)__p + 2);
          v30 = *((_DWORD *)__p + 6);
          v31 = (AVAudioNodeImplBase **)*((_QWORD *)__p + 4);
          v32 = *((unsigned int *)__p + 10);
          v33 = *(_QWORD *)__p;
          *(_QWORD *)(v33 + 8) = *((_QWORD *)__p + 1);
          *v28[1] = v33;
          v108 = v26 - 1;
          operator delete(v28);
          v34 = v23[4];
          v35 = *((_DWORD *)v23 + 10);
          *(_QWORD *)buf = v29;
          *(_DWORD *)&buf[8] = v30;
          *(_QWORD *)&buf[16] = v34;
          *(_DWORD *)&buf[24] = v35;
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)buf, a3);
          AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v31, a3, v36, v37);
          v38 = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, v31[3], v32, a3);
          v24 = v27;
          if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1838, "RemoveNode", "err = MakeDisconnection(currSrcConn.destNode->NodeImpl(), currSrcConn.destBus, outErr)", v38, a3))goto LABEL_160;
        }
      }
      else
      {
        AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v23 + 2), a3);
      }
      v23 = (uint64_t *)v23[1];
    }
    while (v23 != &v112);
  }
  v39 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v102, 4, 0, 0);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1844, "RemoveNode", "err = PerformCommand(*graphNode, kAUUninitialize, NULL, 0)", v39, a3);
  Connection = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4015, "DisconnectInactiveNode", "false == inNode->IsInitialized()", *(_BYTE *)(v102[3] + 48) == 0, 4294967246, a3);
  if (!(_DWORD)Connection)
  {
    v116 = 0;
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    v127 = (uint64_t)&v127;
    v128 = &v127;
    v129 = 0;
    AUGraphNodeBase::GetValidConnections((uint64_t)v102, 1, (uint64_t *)buf);
    AUGraphNodeBase::GetValidConnections((uint64_t)v102, 0, &v127);
    if (*(_QWORD *)&buf[16] | v129)
    {
      v43 = (AVAudioEngineGraph *)this;
      v44 = *(_QWORD *)&buf[8];
      if (*(_BYTE **)&buf[8] == buf)
      {
        v46 = 0;
        Connection = 0;
LABEL_77:
        v55 = v128;
        if (v128 == &v127)
        {
          v56 = v46;
LABEL_98:
          if (*(_QWORD *)&buf[16] == v129)
          {
            v65 = *(_QWORD *)&buf[8];
            if (*(_BYTE **)&buf[8] != buf)
            {
              v66 = v128;
              do
              {
                Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(*(_QWORD *)(v65 + 16) + 24), *(AVAudioNodeImplBase **)(v66[4] + 24), *(_DWORD *)(v65 + 24), *((unsigned int *)v66 + 10), a3);
                if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4060, "DisconnectInactiveNode", "err = MakeConnection(itInp->srcNode->NodeImpl(), itOut->destNode->NodeImpl(), itInp->srcBus, itOut->destBus, outErr)", Connection, a3))break;
                v67 = (char *)__dst;
                if (__dst == v56)
                {
                  v68 = __dst;
                }
                else
                {
                  v68 = __dst;
                  while (*v68 != *(_QWORD *)(v65 + 16))
                  {
                    if (++v68 == (_QWORD *)v56)
                    {
                      v68 = v56;
                      break;
                    }
                  }
                }
                if (v56 != (char *)(v68 + 1))
                  memmove(v68, v68 + 1, v56 - (char *)(v68 + 1));
                v69 = v56 - 8;
                if (v67 != v56 - 8)
                {
                  v70 = 8 * (((char *)v68 - v67) >> 3) + 8 * ((v56 - (char *)(v68 + 1)) >> 3);
                  while (*(_QWORD *)v67 != v66[4])
                  {
                    v67 += 8;
                    v70 -= 8;
                    if (!v70)
                    {
                      v67 = v56 - 8;
                      break;
                    }
                  }
                }
                v71 = v69 - (v67 + 8);
                if (v69 != v67 + 8)
                  memmove(v67, v67 + 8, v69 - (v67 + 8));
                v56 = &v67[v71];
                v116 = &v67[v71];
                v65 = *(_QWORD *)(v65 + 8);
                v66 = (uint64_t *)v66[1];
                this = (uint64_t ***)v43;
              }
              while ((_BYTE *)v65 != buf);
            }
          }
        }
        else
        {
          while (1)
          {
            AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v55[4], 0, v41, v42);
            Connection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v55[4] + 24), *((unsigned int *)v55 + 10), a3);
            if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4045, "DisconnectInactiveNode", "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)", Connection, a3))break;
            if ((unint64_t)v46 >= v117)
            {
              v57 = (char *)__dst;
              v58 = (v46 - (_BYTE *)__dst) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
                std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
              v60 = v117 - (_QWORD)__dst;
              if ((uint64_t)(v117 - (_QWORD)__dst) >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
                v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v61);
              else
                v62 = 0;
              v63 = (char *)(v61 + 8 * v58);
              *(_QWORD *)v63 = v55[4];
              v56 = v63 + 8;
              if (v46 != v57)
              {
                do
                {
                  v64 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v63 - 1) = v64;
                  v63 -= 8;
                }
                while (v46 != v57);
                v46 = (char *)__dst;
              }
              __dst = v63;
              v116 = v56;
              v117 = v61 + 8 * v62;
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v46 = v55[4];
              v56 = v46 + 8;
            }
            v116 = v56;
            v55 = (uint64_t *)v55[1];
            v46 = v56;
            if (v55 == &v127)
              goto LABEL_98;
          }
        }
      }
      else
      {
        v45 = 0;
        while (1)
        {
          Connection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(*(_QWORD *)(v44 + 32) + 24), *(unsigned int *)(v44 + 40), a3);
          if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4036, "DisconnectInactiveNode", "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)", Connection, a3))break;
          if ((unint64_t)v45 >= v117)
          {
            v47 = (char *)__dst;
            v48 = (v45 - (_BYTE *)__dst) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
            v50 = v117 - (_QWORD)__dst;
            if ((uint64_t)(v117 - (_QWORD)__dst) >> 2 > v49)
              v49 = v50 >> 2;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
              v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v51);
            else
              v52 = 0;
            v53 = (char *)(v51 + 8 * v48);
            *(_QWORD *)v53 = *(_QWORD *)(v44 + 16);
            v46 = v53 + 8;
            if (v45 != v47)
            {
              do
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              while (v45 != v47);
              v45 = (char *)__dst;
            }
            __dst = v53;
            v116 = v46;
            v117 = v51 + 8 * v52;
            if (v45)
              operator delete(v45);
          }
          else
          {
            *(_QWORD *)v45 = *(_QWORD *)(v44 + 16);
            v46 = v45 + 8;
          }
          v116 = v46;
          v44 = *(_QWORD *)(v44 + 8);
          v45 = v46;
          if ((_BYTE *)v44 == buf)
            goto LABEL_77;
        }
      }
    }
    else
    {
      Connection = 0;
    }
    std::__list_imp<AUGraphConnection>::clear(&v127);
    std::__list_imp<AUGraphConnection>::clear(buf);
  }
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1847, "RemoveNode", "err = DisconnectInactiveNode(graphNode, true , disjointNodes, outErr)", Connection, a3))goto LABEL_160;
  v73 = (_QWORD **)v102;
  if (!*((_BYTE *)this + 185))
    goto LABEL_157;
  v74 = 0;
  v75 = 0;
  v127 = 0x100000000;
  do
  {
    v76 = *((_DWORD *)&v127 + v75);
    v101 = v74;
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    AVAudioEngineGraph::GetPendingConnection((uint64_t)this, v76, (uint64_t)v73, buf);
    for (i = *(_QWORD *)&buf[8]; (_BYTE *)i != buf; i = *(_QWORD *)(i + 8))
    {
      v78 = *(_QWORD *)(i + 16) && *(_DWORD *)(i + 24) != -1 && *(_QWORD *)(i + 32) && *(_DWORD *)(i + 40) != -1;
      if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1860, "RemoveNode", "conn.IsSrcAndDestValid()", v78, 4294967246, a3))
      {
        if (v73 == *(_QWORD ***)(i + 16))
        {
          if (!v108)
            goto LABEL_146;
          v84 = *((_QWORD *)__p + 2);
          v85 = *((_DWORD *)__p + 6);
          if ((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v84 + 24))(v84, 0, v85)
            || (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(i + 32) + 24))(*(_QWORD *)(i + 32), 1, *(unsigned int *)(i + 40)))
          {
            v86 = 0;
          }
          else
          {
            *(_QWORD *)(i + 16) = v84;
            *(_DWORD *)(i + 24) = v85;
            v86 = 1;
          }
          v87 = (_QWORD **)__p;
          v88 = *(_QWORD *)__p;
          *(_QWORD *)(v88 + 8) = *((_QWORD *)__p + 1);
          *v87[1] = v88;
          --v108;
          operator delete(v87);
          v73 = (_QWORD **)v102;
          if ((v86 & 1) == 0)
            goto LABEL_146;
        }
        else
        {
          if (_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1884, "RemoveNode", "graphNode == conn.destNode", v73 == *(_QWORD ***)(i + 32), 4294967246, a3))continue;
          if (!v105)
            goto LABEL_146;
          v79 = *((_QWORD *)v104 + 4);
          v80 = *((unsigned int *)v104 + 10);
          if ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(i + 16) + 24))(*(_QWORD *)(i + 16), 0, *(unsigned int *)(i + 24))|| (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 24))(v79, 1, v80))
          {
            v81 = 0;
          }
          else
          {
            *(_QWORD *)(i + 32) = v79;
            *(_DWORD *)(i + 40) = v80;
            v81 = 1;
          }
          v82 = (_QWORD **)v104;
          v83 = *(_QWORD *)v104;
          *(_QWORD *)(v83 + 8) = *((_QWORD *)v104 + 1);
          *v82[1] = v83;
          --v105;
          operator delete(v82);
          v73 = (_QWORD **)v102;
          if (!v81)
          {
LABEL_146:
            AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, v76, i + 16, 1, a3);
            continue;
          }
        }
        if (v76 || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 32) + 120))(*(_QWORD *)(i + 32)) & 1) != 0)
        {
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, v76, i + 16, a3);
        }
        else
        {
          AUGraphParser::PrepareForConnection((uint64_t)this, i + 16);
          v89 = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)(i + 16), a3);
          _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1912, "RemoveNode", "err = MakeConnection(conn, outErr)", v89, a3);
        }
      }
    }
    std::__list_imp<AUGraphConnection>::clear(buf);
    v74 = 1;
    v75 = 1;
  }
  while ((v101 & 1) == 0);
  if (v97
    && *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v97 + 24) + 256))(*(_QWORD *)(v97 + 24)) == 1635085673)
  {
    v90 = (uint64_t *)v109;
    v91 = v110;
    while (v90 != v91)
    {
      v92 = *v90;
      *(_QWORD *)buf = v97;
      *(_QWORD *)&buf[8] = v92;
      *(_QWORD *)&buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v92 + 360))(v92, buf);
      ++v90;
    }
  }
LABEL_157:
  v93 = (AUGraphSequencerInterface *)this[10];
  if (v93)
    AUGraphSequencerInterface::NodeStateChanged(v93, v73, 3u, v72);
  std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(this[1], (unint64_t)v99);
  ((void (*)(_QWORD **))(*v73)[1])(v73);
LABEL_160:
  updated = AVAudioEngineGraph::UpdateGraphAfterReconfig((AVAudioEngineGraph *)this, (uint64_t)&__dst, v98);
  if ((_DWORD)updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v94 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v119 = 1024;
      v120 = 1940;
      v121 = 2080;
      v122 = "RemoveNode";
      v123 = 2080;
      v124 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      v125 = 1024;
      v126 = updated;
      _os_log_impl(&dword_19B733000, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), updated);
  }
LABEL_166:
  std::__list_imp<AUGraphConnection>::clear(&v103);
  std::__list_imp<AUGraphConnection>::clear(&v106);
  if (v109)
    operator delete(v109);
  std::__list_imp<AUGraphConnection>::clear(&v112);
  if (__dst)
  {
    v116 = (char *)__dst;
    operator delete(__dst);
  }
LABEL_170:
  std::recursive_mutex::unlock(v100);
  return updated;
}

void sub_19B77D664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33)
{
  std::recursive_mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

_QWORD *std::vector<AUGraphNodeBaseV3 *>::__assign_with_size[abi:ne180100]<AUGraphNodeBaseV3 **,AUGraphNodeBaseV3 **>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v12];
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v14 = &v9[v13];
  return result;
}

_OWORD *AVAudioEngineGraph::GetPendingConnection(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  result = std::__list_imp<AUGraphConnection>::clear(a4);
  if (a2)
    v9 = a1 + 160;
  else
    v9 = a1 + 136;
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 != v9)
  {
    v11 = (_OWORD *)*a4;
    v12 = *(_QWORD *)(a3 + 24);
    v13 = a4[2];
    do
    {
      if (v12 == *(_QWORD *)(*(_QWORD *)(v10 + 16) + 24) || v12 == *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24))
      {
        result = operator new(0x30uLL);
        v14 = *(_OWORD *)(v10 + 32);
        result[1] = *(_OWORD *)(v10 + 16);
        result[2] = v14;
        *(_QWORD *)result = v11;
        *((_QWORD *)result + 1) = a4;
        *((_QWORD *)v11 + 1) = result;
        *a4 = result;
        a4[2] = ++v13;
        v11 = result;
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t AVAudioEngineGraph::UpdateGraphAfterReconfig(AVAudioEngineGraph *this, uint64_t a2, int a3)
{
  _QWORD **v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t NodeFromMap;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t i;
  uint64_t v30;
  AVAudioNodeImplBase *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  _OWORD *v36;
  __int128 v37;
  char *v38;
  AVAudioNodeImplBase ***v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  AUGraphNodeBase *v46;
  uint64_t v47;
  unsigned int v48;
  void *v49;
  double v50;
  uint64_t active;
  NSObject *v52;
  const char *v53;
  char *j;
  uint64_t v55;
  _QWORD **v56;
  uint64_t Connection;
  NSObject *v58;
  const char *v59;
  _OWORD *v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  NSObject *v64;
  void **k;
  uint64_t v66;
  _QWORD *m;
  uint64_t v68;
  NSObject *v69;
  uint64_t n;
  uint64_t v71;
  NSObject *v72;
  AVAudioNodeImplBase **v73;
  uint64_t v74;
  NSObject *v75;
  AVAudioNodeImplBase *v76;
  AVAudioEngineGraph *v77;
  AUGraphNodeBaseV3 *v78;
  AVAudioEngineGraph *v79;
  NSObject *v80;
  char v82;
  _QWORD *v83;
  void **v84;
  uint64_t v85;
  void *__p;
  char *p_p;
  unint64_t v88;
  _BYTE buf[28];
  __int16 v90;
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 185))
    return 0;
  if (a2)
  {
    v5 = *(_QWORD ***)a2;
    v6 = *(_QWORD ***)(a2 + 8);
    if (*(_QWORD ***)a2 != v6)
    {
      do
      {
        v7 = *v5;
        memset(buf, 0, 24);
        __p = 0;
        p_p = 0;
        v88 = 0;
        NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
        v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
        *v9 = NodeFromMap;
        v11 = v9 + 1;
        v13 = *(char **)buf;
        v12 = *(char **)&buf[8];
        v14 = v9;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            v15 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v14 = v15;
          }
          while (v12 != v13);
          v12 = *(char **)buf;
        }
        *(_QWORD *)buf = v14;
        *(_QWORD *)&buf[8] = v9 + 1;
        *(_QWORD *)&buf[16] = &v9[v10];
        if (v12)
          operator delete(v12);
        *(_QWORD *)&buf[8] = v11;
        v16 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
        v17 = v16;
        v18 = p_p;
        if ((unint64_t)p_p >= v88)
        {
          v20 = (p_p - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          v21 = (uint64_t)(v88 - (_QWORD)__p) >> 2;
          if (v21 <= v20 + 1)
            v21 = v20 + 1;
          if (v88 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v22);
          else
            v23 = 0;
          v24 = (uint64_t *)(v22 + 8 * v20);
          *v24 = v17;
          v19 = (char *)(v24 + 1);
          v26 = (char *)__p;
          v25 = p_p;
          if (p_p != __p)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v24 = v27;
            }
            while (v25 != v26);
            v25 = (char *)__p;
          }
          __p = v24;
          p_p = v19;
          v88 = v22 + 8 * v23;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)p_p = v16;
          v19 = v18 + 8;
        }
        p_p = v19;
        if (!AUGraphParser::IsNodeConnectedToTarget(1, v7, buf)
          && !AUGraphParser::IsNodeConnectedToTarget(0, v7, &__p))
        {
          AUGraphParser::UninitializeNodeChain((uint64_t)this, 1, v7);
          AUGraphParser::UninitializeNodeChain((uint64_t)this, 0, v7);
        }
        if (__p)
        {
          p_p = (char *)__p;
          operator delete(__p);
        }
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  v28 = (char *)this + 160;
  for (i = *((_QWORD *)this + 21); (char *)i != v28; i = *(_QWORD *)(i + 8))
  {
    v30 = *(_QWORD *)(i + 32);
    if (v30)
      *(_DWORD *)(v30 + 32) = 0;
    AVAudioEngineGraph::MakeVirtualConnection(this, i + 16);
  }
  v31 = (AVAudioNodeImplBase *)*((_QWORD *)this + 3);
  v32 = AVAudioEngineGraph::GetNodeFromMap(this, v31);
  if (a3 == 2 && v32)
  {
    v33 = *((_QWORD *)this + 18);
    __p = &__p;
    p_p = (char *)&__p;
    v88 = 0;
    if ((AVAudioEngineGraph *)v33 == (AVAudioEngineGraph *)((char *)this + 136))
    {
      v83 = &v83;
      v84 = (void **)&v83;
      v85 = 0;
    }
    else
    {
      v34 = 1;
      v35 = &__p;
      do
      {
        v36 = operator new(0x30uLL);
        v37 = *(_OWORD *)(v33 + 32);
        v36[1] = *(_OWORD *)(v33 + 16);
        v36[2] = v37;
        *(_QWORD *)v36 = v35;
        *((_QWORD *)v36 + 1) = &__p;
        v35[1] = v36;
        __p = v36;
        v88 = v34;
        v33 = *(_QWORD *)(v33 + 8);
        ++v34;
        v35 = (void **)v36;
      }
      while ((AVAudioEngineGraph *)v33 != (AVAudioEngineGraph *)((char *)this + 136));
      v38 = p_p;
      v83 = &v83;
      v84 = (void **)&v83;
      v85 = 0;
      if (p_p != (char *)&__p)
      {
        while (1)
        {
          v39 = (AVAudioNodeImplBase ***)(v38 + 16);
          if (!*((_QWORD *)v38 + 2)
            || (v40 = *((_QWORD *)v38 + 4)) == 0
            || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 120))(v40) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v41 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
              v90 = 1024;
              v91 = 4177;
              v92 = 2080;
              v93 = "UpdateGraphAfterReconfig";
              v94 = 2080;
              v95 = "conn.srcNode && conn.destNode && conn.destNode->IsMixerNode()";
              _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "conn.srcNode && conn.destNode && conn.destNode->IsMixerNode()");
          }
          v42 = (_QWORD *)*((_QWORD *)v38 + 4);
          if (*(_BYTE *)(v42[3] + 48))
          {
            if ((*(unsigned int (**)(_QWORD *))(*v42 + 96))(v42))
            {
              v43 = *((_DWORD *)v38 + 10);
              if (v43 >= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 4) + 24) + 96))(*(_QWORD *)(*((_QWORD *)v38 + 4) + 24)))
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 4) + 24) + 112))(*(_QWORD *)(*((_QWORD *)v38 + 4) + 24), (*((_DWORD *)v38 + 10) + 1));
            }
            if ((*((unsigned int (**)(AVAudioNodeImplBase **))**v39 + 13))(*v39))
            {
              v44 = *((_DWORD *)v38 + 6);
              if (v44 >= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 2) + 24) + 104))(*(_QWORD *)(*((_QWORD *)v38 + 2) + 24)))
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 2) + 24) + 120))(*(_QWORD *)(*((_QWORD *)v38 + 2) + 24), (*((_DWORD *)v38 + 6) + 1));
            }
            v45 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 2) + 24) + 48))(*(_QWORD *)(*((_QWORD *)v38 + 2) + 24), *((unsigned int *)v38 + 6));
            if ((objc_msgSend(v45, "isEqual:", (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v38 + 4) + 24) + 72))(*(_QWORD *)(*((_QWORD *)v38 + 4) + 24), *((unsigned int *)v38 + 10))) & 1) == 0&& ((*(uint64_t (**)(_QWORD))(**((_QWORD **)v38 + 4) + 136))(*((_QWORD *)v38 + 4)) & 1) == 0)
            {
              (*(void (**)(_QWORD, _QWORD, void *))(**(_QWORD **)(*((_QWORD *)v38 + 4) + 24) + 80))(*(_QWORD *)(*((_QWORD *)v38 + 4) + 24), *((unsigned int *)v38 + 10), v45);
            }
            v46 = (AUGraphNodeBase *)*((_QWORD *)v38 + 2);
            v47 = *((_QWORD *)v38 + 4);
            v48 = *(_DWORD *)(v47 + 36);
            v49 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v47 + 24) + 48))(*(_QWORD *)(v47 + 24), 0);
            if (v49)
              objc_msgSend(v49, "sampleRate");
            else
              v50 = -1.0;
            AUGraphNodeBase::CalculateMaxFrames(v46, v48, v50);
            v82 = 0;
            active = AUGraphParser::InitializeActiveNodesInOutputChain(this, *v39, &v82);
            if ((_DWORD)active)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v52 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                v90 = 1024;
                v91 = 4208;
                v92 = 2080;
                v93 = "UpdateGraphAfterReconfig";
                v94 = 2080;
                v53 = "AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, kOutputChainFullTraversal, *conn.srcN"
                      "ode, isChainActive)";
                goto LABEL_70;
              }
              goto LABEL_71;
            }
            if (v82)
              break;
          }
LABEL_72:
          v38 = (char *)*((_QWORD *)v38 + 1);
          if (v38 == (char *)&__p)
            goto LABEL_131;
        }
        std::__list_imp<AUGraphConnection>::clear(&v83);
        for (j = (char *)*((_QWORD *)this + 21); ; j = (char *)*((_QWORD *)j + 1))
        {
          if (j == v28)
          {
            for (k = v84; k != (void **)&v83; k = (void **)k[1])
              AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)(k + 2), 1, 0);
            AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)(v38 + 16));
            active = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)v38 + 2, 0);
            if ((_DWORD)active)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v52 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                v90 = 1024;
                v91 = 4233;
                v92 = 2080;
                v93 = "UpdateGraphAfterReconfig";
                v94 = 2080;
                v53 = "MakeConnection(conn)";
LABEL_70:
                v95 = v53;
                v96 = 1024;
                v97 = active;
                _os_log_impl(&dword_19B733000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
LABEL_71:
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), active);
            }
            else
            {
              AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)(v38 + 16), 1, 0);
            }
            goto LABEL_72;
          }
          v55 = *((_QWORD *)j + 4);
          if (v55 && (*(_BYTE *)(v55 + 32) & 2) != 0)
          {
            v56 = (_QWORD **)(j + 16);
            AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)(j + 16));
            Connection = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)j + 2, 0);
            if ((_DWORD)Connection)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                v90 = 1024;
                v91 = 4218;
                v92 = 2080;
                v93 = "UpdateGraphAfterReconfig";
                v94 = 2080;
                v59 = "MakeConnection(inputConn)";
                goto LABEL_95;
              }
              goto LABEL_96;
            }
            v60 = operator new(0x30uLL);
            v61 = *((_OWORD *)j + 2);
            v60[1] = *(_OWORD *)v56;
            v60[2] = v61;
            v62 = v83;
            *(_QWORD *)v60 = v83;
            *((_QWORD *)v60 + 1) = &v83;
            v62[1] = v60;
            v83 = v60;
            ++v85;
            v63 = AVAudioEngineGraph::PerformCommand((uint64_t)this, *v56, 3, 0, 0);
            if ((_DWORD)v63)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v64 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                v90 = 1024;
                v91 = 4222;
                v92 = 2080;
                v93 = "UpdateGraphAfterReconfig";
                v94 = 2080;
                v95 = "PerformCommand(*inputConn.srcNode, kAUInitialize, NULL, 0)";
                v96 = 1024;
                v97 = v63;
                _os_log_impl(&dword_19B733000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v63);
            }
            Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, *((_QWORD **)j + 4), 3, 0, 0);
            if ((_DWORD)Connection)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "AVAEInternal.h";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
                v90 = 1024;
                v91 = 4223;
                v92 = 2080;
                v93 = "UpdateGraphAfterReconfig";
                v94 = 2080;
                v59 = "PerformCommand(*inputConn.destNode, kAUInitialize, NULL, 0)";
LABEL_95:
                v95 = v59;
                v96 = 1024;
                v97 = Connection;
                _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
LABEL_96:
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Connection);
              continue;
            }
          }
        }
      }
    }
LABEL_131:
    std::__list_imp<AUGraphConnection>::clear(&v83);
    std::__list_imp<AUGraphConnection>::clear(&__p);
    goto LABEL_132;
  }
  v66 = AVAudioEngineGraph::GetNodeFromMap(this, v31);
  if (a3 != 1 || !v66)
    goto LABEL_132;
  for (m = (_QWORD *)*((_QWORD *)this + 18); m != (_QWORD *)((char *)this + 136); m = (_QWORD *)m[1])
  {
    v68 = AVAudioEngineGraph::MakeConnection(this, m + 2, 0);
    if ((_DWORD)v68)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v69 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
        v90 = 1024;
        v91 = 4241;
        v92 = 2080;
        v93 = "UpdateGraphAfterReconfig";
        v94 = 2080;
        v95 = "MakeConnection(conn)";
        v96 = 1024;
        v97 = v68;
        _os_log_impl(&dword_19B733000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v68);
    }
  }
  for (n = *((_QWORD *)this + 21); (char *)n != v28; n = *(_QWORD *)(n + 8))
  {
    v71 = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)(n + 16), 0);
    if ((_DWORD)v71)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v72 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
        v90 = 1024;
        v91 = 4244;
        v92 = 2080;
        v93 = "UpdateGraphAfterReconfig";
        v94 = 2080;
        v95 = "MakeConnection(conn)";
        v96 = 1024;
        v97 = v71;
        _os_log_impl(&dword_19B733000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v71);
    }
  }
  std::__list_imp<AUGraphConnection>::clear((_QWORD *)this + 17);
  std::__list_imp<AUGraphConnection>::clear((_QWORD *)this + 20);
  v73 = (AVAudioNodeImplBase **)AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  v74 = AUGraphParser::InitializeActiveNodesInOutputChain(this, v73, &__p);
  if (!(_DWORD)v74)
  {
LABEL_132:
    v76 = (AVAudioNodeImplBase *)*((_QWORD *)this + 2);
    if (AVAudioEngineGraph::GetNodeFromMap(this, v76))
    {
      v77 = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, v76);
      v74 = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)this, v77, v78);
      if ((_DWORD)v74)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v80 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
          v90 = 1024;
          v91 = 4262;
          v92 = 2080;
          v93 = "UpdateGraphAfterReconfig";
          v94 = 2080;
          v95 = "err = AUGraphParser::InitializeActiveNodesInInputChain(ThisGraph, *GetInputNode())";
          v96 = 1024;
          v97 = v74;
          _os_log_impl(&dword_19B733000, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v74);
        return v74;
      }
    }
    else
    {
      AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
      *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
    }
    AUGraphParser::UpdateGraphAttributes((AVAudioNodeImplBase **)this, v79);
    AVAudioEngineGraph::MonitorState(this);
    return 0;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v75 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "AVAEInternal.h";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 104;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
    v90 = 1024;
    v91 = 4252;
    v92 = 2080;
    v93 = "UpdateGraphAfterReconfig";
    v94 = 2080;
    v95 = "err = AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, inTraversalMode, *GetOutputNode(), isChainActive)";
    v96 = 1024;
    v97 = v74;
    _os_log_impl(&dword_19B733000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v74);
  return v74;
}

void sub_19B77EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  std::__list_imp<AUGraphConnection>::clear(&a17);
  std::__list_imp<AUGraphConnection>::clear(&__p);
  _Unwind_Resume(a1);
}

void std::vector<AUGraphNodeBaseV3 *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AVAudioEngineGraph::Start(AVAudioNodeImplBase **this, NSError **a2)
{
  std::recursive_mutex *v4;
  uint64_t NodeFromMap;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  AVAudioNodeImplBase *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2)
    *a2 = 0;
  v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  if (!*((_BYTE *)this + 184))
  {
    NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
    v6 = 3;
    if (!NodeFromMap)
      v6 = 2;
    v7 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[v6]);
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v19 = "AVAEInternal.h";
        v20 = 1024;
        v21 = 71;
        v22 = 2080;
        v23 = "AVAudioEngineGraph.mm";
        v24 = 1024;
        v25 = 1533;
        v26 = 2080;
        v27 = "Start";
        v28 = 2080;
        v29 = "ioNode != NULL";
        _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "ioNode != NULL");
    }
    if (AVAudioEngineGraph::Initialize((AVAudioEngineGraph *)this, a2))
      goto LABEL_28;
    v9 = this[1];
    v12 = *(_QWORD **)v9;
    v10 = (_QWORD *)((char *)v9 + 8);
    v11 = v12;
    if (v12 != v10)
    {
      do
      {
        v13 = (_QWORD *)v11[5];
        if (*(_BYTE *)(v13[3] + 48))
          (*(void (**)(_QWORD *))(*v13 + 208))(v13);
        v14 = (_QWORD *)v11[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v11[2];
            v16 = *v15 == (_QWORD)v11;
            v11 = v15;
          }
          while (!v16);
        }
        v11 = v15;
      }
      while (v15 != v10);
    }
    v17 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7)
        ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7)
        : 4294967246;
    if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1549, "Start", "err = PerformCommand(*ioNode, kAUStartIO, NULL, 0)", v17, a2))
    {
      *((_BYTE *)this + 184) = 1;
      AVAudioEngineGraph::MonitorState((AVAudioEngineGraph *)this);
    }
    if ((_DWORD)v17 || !*((_BYTE *)this + 184))
LABEL_28:
      AVAudioEngineGraph::_Stop(this, a2);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_19B77EE04(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::AddNode(uint64_t **this, AVAudioNode *a2)
{
  NSObject *v4;
  std::recursive_mutex *v5;
  AVAudioNodeImplBase *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  _DWORD *v10;
  AUGraphMultiBusNode *v12;
  void *v13;
  void *v14;
  void *v15;
  __n128 v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v18 = "AVAEInternal.h";
      v19 = 1024;
      v20 = 71;
      v21 = 2080;
      v22 = "AVAudioEngineGraph.mm";
      v23 = 1024;
      v24 = 1629;
      v25 = 2080;
      v26 = "AddNode";
      v27 = 2080;
      v28 = "nil != inAVNode";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != inAVNode");
  }
  v5 = (std::recursive_mutex *)(*this + 14);
  std::recursive_mutex::lock(v5);
  v6 = -[AVAudioNode impl](a2, "impl");
  if (!v6
    || (v7 = -[AVAudioNode impl](a2, "impl"),
        *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 256))(v7) == 1635086197))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v18 = "AVAEInternal.h";
      v19 = 1024;
      v20 = 71;
      v21 = 2080;
      v22 = "AVAudioEngineGraph.mm";
      v23 = 1024;
      v24 = 1634;
      v25 = 2080;
      v26 = "AddNode";
      v27 = 2080;
      v28 = "inImpl != nil && !IsIONode(inAVNode)";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inImpl != nil && !IsIONode(inAVNode)");
  }
  if (!AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, v6))
  {
    v9 = -[AVAudioNode impl](a2, "impl");
    v10 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 256))(v9);
    if (v10[1] == 1836281964 || *v10 == 1635085688)
    {
      v12 = (AUGraphMultiBusNode *)operator new();
      AUGraphMultiBusNode::AUGraphMultiBusNode(v12, a2);
    }
    else
    {
      v13 = -[AVAudioNode impl](a2, "impl");
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 256))(v13) == 1635085673)
      {
        v12 = (AUGraphMultiBusNode *)operator new();
        AUGraphMIDINodeV3::AUGraphMIDINodeV3(v12, a2);
      }
      else
      {
        v14 = -[AVAudioNode impl](a2, "impl");
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v14 + 408))(v14))
        {
          v12 = (AUGraphMultiBusNode *)operator new();
          AUGraphSourceNodeV3::AUGraphSourceNodeV3(v12, a2);
        }
        else
        {
          v15 = -[AVAudioNode impl](a2, "impl");
          if ((*(unsigned int (**)(void *))(*(_QWORD *)v15 + 416))(v15))
          {
            v12 = (AUGraphMultiBusNode *)operator new();
            AUGraphSinkNodeV3::AUGraphSinkNodeV3(v12, a2);
          }
          else
          {
            v12 = (AUGraphMultiBusNode *)operator new();
            AUGraphNodeBaseV3::AUGraphNodeBaseV3(v12, a2);
            *(_QWORD *)v12 = &off_1E3BE6298;
          }
        }
      }
    }
    v16.n128_u64[0] = (unint64_t)v6;
    v16.n128_u64[1] = (unint64_t)v12;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__emplace_unique_key_args<AVAudioNodeImplBase *,std::pair<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>(this[1], (unint64_t)v6, v16);
  }
  std::recursive_mutex::unlock(v5);
}

void sub_19B77F22C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;

  MEMORY[0x1A1AC5BD4](v2, 0x10A1C40220A4F1BLL);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__emplace_unique_key_args<AVAudioNodeImplBase *,std::pair<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>(uint64_t *result, unint64_t a2, __n128 a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  __n128 *v8;

  v3 = (uint64_t **)result;
  v5 = (uint64_t **)(result + 1);
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 1);
LABEL_9:
    v8 = (__n128 *)operator new(0x30uLL);
    v8[2] = a3;
    return std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(v3, (uint64_t)v6, v5, (uint64_t *)v8);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void AUGraphNodeV3::~AUGraphNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AUGraphNodeBase::CanResizeNumberOfInputs(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::CanResizeNumberOfOutputs(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsSplitterNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsMixerNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsIONode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsVoiceIONode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsSinkNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::CanChangeMaxFrames(AUGraphNodeBase *this)
{
  return 1;
}

uint64_t AUGraphNodeBase::SetManualRenderingRenderCallback()
{
  return 0;
}

uint64_t AUGraphNodeBase::RenderToABL(AUGraphNodeBase *this, unsigned int a2, AudioBufferList *a3)
{
  return 4294956448;
}

uint64_t AUGraphNodeBase::GetLastInputCallbackStatus(AUGraphNodeBase *this)
{
  return -1;
}

uint64_t AUGraphNodeBaseV3::InputMutex(AUGraphNodeBaseV3 *this)
{
  return (uint64_t)this + 152;
}

uint64_t AUGraphNodeBaseV3::OutputMutex(AUGraphNodeBaseV3 *this)
{
  return (uint64_t)this + 156;
}

uint64_t AUGraphNodeBaseV3::RenderBlock(AUGraphNodeBaseV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUGraphNodeBaseV3::InputBlock(AUGraphNodeBaseV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUGraphNodeV3::OutputProvider(AUGraphNodeV3 *this)
{
  return 0;
}

uint64_t AUGraphNodeV3::InputHandler(AUGraphNodeV3 *this)
{
  return 0;
}

uint64_t AUGraphNodeBaseV3::LastRenderError(AUGraphNodeBaseV3 *this)
{
  return atomic_load((unsigned int *)this + 40);
}

void AVAudioEngineGraph::AddIONode(uint64_t **this, AVAudioNode *a2, int a3)
{
  NSObject *v6;
  std::recursive_mutex *v7;
  AVAudioNodeImplBase *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  AVAudioNodeImplBase *v12;
  NSObject *v13;
  AUGraphNodeGenericIOV3 *v14;
  __n128 v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v17 = "AVAEInternal.h";
      v18 = 1024;
      v19 = 71;
      v20 = 2080;
      v21 = "AVAudioEngineGraph.mm";
      v22 = 1024;
      v23 = 1665;
      v24 = 2080;
      v25 = "AddIONode";
      v26 = 2080;
      v27 = "nil != inAVNode";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != inAVNode");
  }
  v7 = (std::recursive_mutex *)(*this + 14);
  std::recursive_mutex::lock(v7);
  v8 = -[AVAudioNode impl](a2, "impl");
  if (!v8
    || (v9 = -[AVAudioNode impl](a2, "impl"),
        *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 256))(v9) != 1635086197))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v17 = "AVAEInternal.h";
      v18 = 1024;
      v19 = 71;
      v20 = 2080;
      v21 = "AVAudioEngineGraph.mm";
      v22 = 1024;
      v23 = 1670;
      v24 = 2080;
      v25 = "AddIONode";
      v26 = 2080;
      v27 = "inImpl != nil && IsIONode(inAVNode)";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inImpl != nil && IsIONode(inAVNode)");
  }
  if (a3)
    v11 = 2;
  else
    v11 = 3;
  v12 = (AVAudioNodeImplBase *)this[v11];
  if (v8 != v12)
  {
    if (v12 || AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, v8))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v17 = "AVAEInternal.h";
        v18 = 1024;
        v19 = 71;
        v20 = 2080;
        v21 = "AVAudioEngineGraph.mm";
        v22 = 1024;
        v23 = 1678;
        v24 = 2080;
        v25 = "AddIONode";
        v26 = 2080;
        v27 = "NULL == ioNodeImpl && !IsNodeInGraph(inImpl)";
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "NULL == ioNodeImpl && !IsNodeInGraph(inImpl)");
    }
    if (*((_BYTE *)this + 187))
    {
      v14 = (AUGraphNodeGenericIOV3 *)operator new();
      AUGraphNodeGenericIOV3::AUGraphNodeGenericIOV3(v14, a2, a3);
    }
    else
    {
      v14 = (AUGraphNodeGenericIOV3 *)operator new();
      AUGraphNodeIOV3::AUGraphNodeIOV3(v14, a2);
    }
    v15.n128_u64[0] = (unint64_t)v8;
    v15.n128_u64[1] = (unint64_t)v14;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__emplace_unique_key_args<AVAudioNodeImplBase *,std::pair<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>(this[1], (unint64_t)v8, v15);
    this[v11] = (uint64_t *)v8;
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19B77F8B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;

  MEMORY[0x1A1AC5BD4](v2, 0x10A1C400CDEF94BLL);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::RemoveIONode(AVAudioEngineGraph *this, AVAudioNode *a2, int a3, NSError **a4)
{
  std::recursive_mutex *v8;
  AVAudioNodeImplBase *v9;
  char IsNodeInGraph;
  uint64_t NodeFromMap;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1956, "RemoveIONode", "nil != inAVNode", a2 != 0, 4294967246, a4))
  {
    v8 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
    std::recursive_mutex::lock(v8);
    v9 = -[AVAudioNode impl](a2, "impl");
    IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, v9);
    if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1962, "RemoveIONode", "IsNodeInGraph(inImpl)", IsNodeInGraph, 4294967246, a4))
    {
      NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v9);
      v12 = 24;
      if (a3)
        v12 = 16;
      v13 = NodeFromMap == AVAudioEngineGraph::GetNodeFromMap(this, *(AVAudioNodeImplBase **)((char *)this + v12));
      _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1967, "RemoveIONode", "(isInputNode && graphNode == GetInputNode()) || (!isInputNode && graphNode == GetOutputNode())", v13, 4294967246, a4);
      if (*((_BYTE *)this + 184))
        v14 = 0;
      else
        v14 = *((_BYTE *)this + 185) == 0;
      if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1968, "RemoveIONode", "!IsRunning() && !IsInitialized()", v14, 4294967246, a4))
      {
        v15 = AVAudioEngineGraph::RemoveNode((uint64_t ***)this, a2, a4);
        if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1980, "RemoveIONode", "err = RemoveNode(inAVNode, outErr)", v15, a4))
        {
          if (a3)
          {
            *((_QWORD *)this + 2) = 0;
            AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
            *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
          }
          else
          {
            *((_QWORD *)this + 3) = 0;
          }
        }
      }
    }
    std::recursive_mutex::unlock(v8);
  }
}

void sub_19B77FAF0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::IsGraphRunning(AUGraphSequencerInterface *this, void *a2)
{
  _QWORD *v2;
  std::recursive_mutex *v3;
  uint64_t v4;

  v2 = *(_QWORD **)this;
  v3 = (std::recursive_mutex *)(**(_QWORD **)this + 112);
  std::recursive_mutex::lock(v3);
  v4 = *((unsigned __int8 *)v2 + 184);
  std::recursive_mutex::unlock(v3);
  return v4;
}

uint64_t AUGraphSequencerInterface::RegisterAUStatusCallback(AUGraphSequencerInterface *this, void *a2, void (*a3)(void *, OpaqueAudioComponentInstance *, int), void *a4)
{
  _QWORD *v6;
  _QWORD *v8;

  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if (v6)
  {
    *v6 = a2;
    v6[1] = a3;
  }
  else
  {
    v8 = (_QWORD *)operator new();
    *v8 = a2;
    v8[1] = a3;
    *((_QWORD *)this + 3) = v8;
  }
  return 0;
}

uint64_t AUGraphSequencerInterface::RegisterRenderCallback(AVAudioNodeImplBase ***this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  AVAudioNodeImplBase **v6;
  std::recursive_mutex *v7;
  uint64_t NodeFromMap;
  NSObject *v9;
  _BYTE buf[18];
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *this;
  v7 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v7);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v6, v6[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      v12 = 2080;
      v13 = "AVAudioEngineGraph.mm";
      v14 = 1024;
      v15 = 4614;
      v16 = 2080;
      v17 = "RegisterRenderCallback";
      v18 = 2080;
      v19 = "outputNode";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outputNode");
  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)NodeFromMap + 264))(NodeFromMap, buf);
  std::recursive_mutex::unlock(v7);
  return 0;
}

void sub_19B77FD44(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::UnregisterRenderCallback(AVAudioNodeImplBase ***this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  AVAudioNodeImplBase **v6;
  std::recursive_mutex *v7;
  uint64_t NodeFromMap;
  NSObject *v9;
  _BYTE buf[18];
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *this;
  v7 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v7);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v6, v6[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      v12 = 2080;
      v13 = "AVAudioEngineGraph.mm";
      v14 = 1024;
      v15 = 4631;
      v16 = 2080;
      v17 = "UnregisterRenderCallback";
      v18 = 2080;
      v19 = "outputNode";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outputNode");
  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)NodeFromMap + 272))(NodeFromMap, buf);
  std::recursive_mutex::unlock(v7);
  return 0;
}

void sub_19B77FEFC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::GetOutputAudioUnit(AVAudioNodeImplBase ***this, unint64_t a2, unint64_t a3, AudioComponentDescription *a4)
{
  NSObject *v7;
  AVAudioNodeImplBase **v8;
  std::recursive_mutex *v9;
  uint64_t NodeFromMap;
  NSObject *v11;
  uint64_t v12;
  __int128 v13;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 | a3)
  {
    if (a2)
      *(_QWORD *)a2 = 0;
    if (a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngineGraph.mm";
      v21 = 1024;
      v22 = 4694;
      v23 = 2080;
      v24 = "GetOutputAudioUnit";
      v25 = 2080;
      v26 = "outUnit || outDesc";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outUnit || outDesc");
  }
  v8 = *this;
  v9 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v9);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, v8[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngineGraph.mm";
      v21 = 1024;
      v22 = 4707;
      v23 = 2080;
      v24 = "GetOutputAudioUnit";
      v25 = 2080;
      v26 = "outputNode";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outputNode");
  }
  if (a2)
    *(_QWORD *)a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(NodeFromMap + 24) + 224))(*(_QWORD *)(NodeFromMap + 24));
  if (a3)
  {
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(NodeFromMap + 24) + 256))(*(_QWORD *)(NodeFromMap + 24));
    v13 = *(_OWORD *)v12;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v12 + 16);
    *(_OWORD *)a3 = v13;
  }
  std::recursive_mutex::unlock(v9);
  return 0;
}

void sub_19B7801EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t AVAudioEngineGraph::_DisconnectInput(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, uint64_t a3)
{
  std::recursive_mutex *v6;
  NSObject *v7;
  _QWORD *NodeFromMap;
  _QWORD *v9;
  int v10;
  uint64_t updated;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  uint64_t *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t Disconnection;
  NSObject *v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *__p;
  void *v48;
  _QWORD *v49;
  uint8_t buf[12];
  __int16 v51;
  _BYTE v52[14];
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v6);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v51 = 1024;
      *(_DWORD *)v52 = 71;
      *(_WORD *)&v52[4] = 2080;
      *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
      v53 = 1024;
      v54 = 2678;
      v55 = 2080;
      v56 = "_DisconnectInput";
      v57 = 2080;
      v58 = "IsNodeInGraph(inDestImpl)";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inDestImpl)");
  }
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*NodeFromMap + 24))(NodeFromMap, 1, a3);
  if (!v9)
  {
    updated = 0;
    goto LABEL_64;
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  v10 = *(unsigned __int8 *)(NodeFromMap[3] + 48);
  v44 = (uint64_t)&v44;
  v45 = &v44;
  v46 = 0;
  if ((*(unsigned int (**)(_QWORD *))(*NodeFromMap + 120))(NodeFromMap))
  {
    AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*NodeFromMap + 128))(NodeFromMap) ^ 1;
    if (!v10)
      LOBYTE(v12) = 1;
    if ((v12 & 1) != 0)
    {
      v26 = 2;
      if (*((_BYTE *)this + 185) && v10)
      {
        if ((NodeFromMap[4] & 2) != 0)
        {
          buf[0] = 0;
          AUGraphParser::GetNodeConnectionsToMixer(NodeFromMap, &v44, buf);
          if (v46)
            v27 = buf[0] == 0;
          else
            v27 = 0;
          v28 = v27;
          if (*((_BYTE *)this + 184))
          {
            _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2726, "_DisconnectInput", "!nodeMixerConns.empty() && !hasDirectConnToIONode", v28);
          }
          else if (v28)
          {
            v26 = 2;
          }
          else
          {
            v26 = 1;
          }
        }
        if (AUGraphParser::IsNodeConnectedToTarget(0, NodeFromMap, (_QWORD *)this + 11))
          AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
      }
      v43 = v26;
      v35 = v45;
      if (v45 == &v44)
      {
LABEL_79:
        v17 = v43;
        v38 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 4, 0, 0);
        if ((_DWORD)v38)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v39 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            v51 = 1024;
            *(_DWORD *)v52 = 104;
            *(_WORD *)&v52[4] = 2080;
            *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
            v53 = 1024;
            v54 = 2753;
            v55 = 2080;
            v56 = "_DisconnectInput";
            v57 = 2080;
            v58 = "PerformCommand(*graphNode, kAUUninitialize, NULL, 0)";
            v59 = 1024;
            v60 = v38;
            _os_log_impl(&dword_19B733000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v38);
        }
        Disconnection = AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
        if ((_DWORD)Disconnection)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v41 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            v51 = 1024;
            *(_DWORD *)v52 = 104;
            *(_WORD *)&v52[4] = 2080;
            *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
            v53 = 1024;
            v54 = 2756;
            v55 = 2080;
            v56 = "_DisconnectInput";
            v57 = 2080;
            v58 = "err = MakeDisconnection(inDestImpl, inDestBus)";
            v59 = 1024;
            v60 = Disconnection;
            _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
        }
      }
      else
      {
        while (1)
        {
          v36 = AVAudioEngineGraph::MakeDisconnection(this, *(AVAudioNodeImplBase **)(v35[4] + 24), *((unsigned int *)v35 + 10), 0);
          if ((_DWORD)v36)
            break;
          if (NodeFromMap == (_QWORD *)v35[4])
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              v51 = 1024;
              *(_DWORD *)v52 = 71;
              *(_WORD *)&v52[4] = 2080;
              *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
              v53 = 1024;
              v54 = 2748;
              v55 = 2080;
              v56 = "_DisconnectInput";
              v57 = 2080;
              v58 = "graphNode != conn.destNode";
              _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNode != conn.destNode");
          }
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v35 + 2), 0);
          v35 = (uint64_t *)v35[1];
          if (v35 == &v44)
            goto LABEL_79;
        }
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v17 = v43;
        v42 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v51 = 1024;
          *(_DWORD *)v52 = 104;
          *(_WORD *)&v52[4] = 2080;
          *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
          v53 = 1024;
          v54 = 2743;
          v55 = 2080;
          v56 = "_DisconnectInput";
          v57 = 2080;
          v58 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
          v59 = 1024;
          v60 = v36;
          _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v36);
      }
      goto LABEL_29;
    }
    if (*((_BYTE *)this + 184))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        v51 = 1024;
        *(_DWORD *)v52 = 71;
        *(_WORD *)&v52[4] = 2080;
        *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
        v53 = 1024;
        v54 = 2705;
        v55 = 2080;
        v56 = "_DisconnectInput";
        v57 = 2080;
        v58 = "!IsRunning()";
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!IsRunning()");
    }
    v14 = *((_QWORD *)this + 2);
    if (v14)
      LODWORD(v14) = NodeFromMap[3] == v14;
    AUGraphParser::UninitializeNodeChain((uint64_t)this, v14 ^ 1, v9);
    v15 = AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
    if ((_DWORD)v15)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        v51 = 1024;
        *(_DWORD *)v52 = 104;
        *(_WORD *)&v52[4] = 2080;
        *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
        v53 = 1024;
        v54 = 2710;
        v55 = 2080;
        v56 = "_DisconnectInput";
        v57 = 2080;
        v58 = "err = MakeDisconnection(inDestImpl, inDestBus)";
        v59 = 1024;
        v60 = v15;
        _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v15);
    }
  }
  v17 = 2;
LABEL_29:
  if (*((_BYTE *)this + 185))
  {
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v52[2] = NodeFromMap;
    *(_DWORD *)&v52[10] = a3;
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)buf, 1, 0);
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v52[2] = NodeFromMap;
    *(_DWORD *)&v52[10] = a3;
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)buf, 1, 0);
  }
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
  v20 = v18;
  *v18 = NodeFromMap;
  __p = v18;
  v48 = v18 + 1;
  v49 = &v18[v19];
  if (v19 < 2)
  {
    v22 = 2;
    v23 = 8 * v19;
    if ((unint64_t)((8 * v19) >> 2) > 2)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v24);
    else
      v25 = 0;
    v29 = 0;
    v30 = v24 + 8;
    v31 = v24 + 8 * v25;
    *(_QWORD *)(v24 + 8) = v9;
    v21 = (_QWORD *)(v24 + 16);
    do
    {
      *(_QWORD *)(v24 + v29 * 8) = v20[v29];
      --v29;
    }
    while (v29 != -1);
    v32 = __p;
    __p = (void *)(v30 - 8);
    v48 = v21;
    v49 = (_QWORD *)v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    v18[1] = v9;
    v21 = v18 + 2;
  }
  v48 = v21;
  updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(this, (uint64_t)&__p, v17);
  if ((_DWORD)updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v33 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v51 = 1024;
      *(_DWORD *)v52 = 104;
      *(_WORD *)&v52[4] = 2080;
      *(_QWORD *)&v52[6] = "AVAudioEngineGraph.mm";
      v53 = 1024;
      v54 = 2772;
      v55 = 2080;
      v56 = "_DisconnectInput";
      v57 = 2080;
      v58 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      v59 = 1024;
      v60 = updated;
      _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), updated);
  }
  std::__list_imp<AUGraphConnection>::clear(&v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
LABEL_64:
  std::recursive_mutex::unlock(v6);
  return updated;
}

void sub_19B780DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__list_imp<AUGraphConnection>::clear(&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t std::list<AUGraphConnection>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      if (v5 == a4)
      {
        v8 = 1;
      }
      else
      {
        v6 = -1;
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
        v8 = v6 + 2;
      }
      *(_QWORD *)(a3 + 16) -= v8;
      *(_QWORD *)(result + 16) += v8;
    }
    v9 = *a4;
    *(_QWORD *)(v9 + 8) = v5[1];
    *(_QWORD *)v5[1] = v9;
    v10 = *a2;
    *(_QWORD *)(v10 + 8) = a4;
    *a4 = v10;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t AVAudioEngineGraph::ConnectMIDI(AVAudioEngineGraph *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  NSObject *v10;
  NSObject *v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  unsigned __int8 *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  AVAudioNodeImplBase *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  char *v40;
  char *v41;
  NSObject *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  uint64_t *v59;
  uint64_t *i;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t updated;
  NSObject *v76;
  std::recursive_mutex *v78;
  int v79;
  uint64_t v80;
  uint64_t v83;
  uint64_t v84;
  AVAudioEngineGraph *v85;
  AVAudioNodeImplBase *v86;
  unint64_t v87;
  _QWORD *NodeFromMap;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  void *__p;
  char *v94;
  unint64_t v95;
  uint8_t v96[128];
  _BYTE buf[34];
  __int16 v98;
  const char *v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3 || !objc_msgSend(a3, "count"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2878;
      v98 = 2080;
      v99 = "ConnectMIDI";
      v100 = 2080;
      v101 = "inSourceAVNode && inDestAVNodes && inDestAVNodes.count > 0";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSourceAVNode && inDestAVNodes && inDestAVNodes.count > 0");
  }
  v86 = (AVAudioNodeImplBase *)objc_msgSend(a2, "impl");
  if (!v86)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2881;
      v98 = 2080;
      v99 = "ConnectMIDI";
      v100 = 2080;
      v101 = "inSrcImpl";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcImpl");
  }
  if (a4)
  {
    objc_msgSend(a4, "sampleRate");
    if (v12 <= 0.0 || !objc_msgSend(a4, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 2884;
        v98 = 2080;
        v99 = "ConnectMIDI";
        v100 = 2080;
        v101 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
    }
  }
  v78 = (std::recursive_mutex *)(*(_QWORD *)a1 + 112);
  std::recursive_mutex::lock(v78);
  if (!AVAudioEngineGraph::IsNodeInGraph(a1, v86))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2889;
      v98 = 2080;
      v99 = "ConnectMIDI";
      v100 = 2080;
      v101 = "IsNodeInGraph(inSrcImpl)";
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inSrcImpl)", v78);
  }
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(a1, v86);
  v15 = (unsigned __int8 *)NodeFromMap[3];
  v79 = v15[48];
  if (*(_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15 + 256))(v15) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2896;
      v98 = 2080;
      v99 = "ConnectMIDI";
      v100 = 2080;
      v101 = "graphNodeSrc->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNodeSrc->IsMIDIProcessorNode()");
  }
  __p = 0;
  v94 = 0;
  v95 = 0;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v17 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v89, v96, 16);
  v85 = a1;
  v18 = 0;
  v19 = 0;
  if (v17)
  {
    v87 = 0;
    v83 = *(_QWORD *)v90;
    v80 = a5;
    do
    {
      v20 = 0;
      v84 = v17;
      do
      {
        if (*(_QWORD *)v90 != v83)
          objc_enumerationMutation(a3);
        v21 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * v20);
        if (!v21)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2906;
            v98 = 2080;
            v99 = "ConnectMIDI";
            v100 = 2080;
            v101 = "destAVNode";
            _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "destAVNode");
        }
        v23 = (AVAudioNodeImplBase *)objc_msgSend(v21, "impl");
        if (!v23)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2909;
            v98 = 2080;
            v99 = "ConnectMIDI";
            v100 = 2080;
            v101 = "inDestImpl";
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inDestImpl");
        }
        if (!AVAudioEngineGraph::IsNodeInGraph(a1, v23))
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2913;
            v98 = 2080;
            v99 = "ConnectMIDI";
            v100 = 2080;
            v101 = "IsNodeInGraph(inDestImpl)";
            _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inDestImpl)");
        }
        v26 = AVAudioEngineGraph::GetNodeFromMap(a1, v23);
        v27 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 24) + 256))(*(_QWORD *)(v26 + 24));
        if (v27 != 1635085685 && v27 != 1635086953)
        {
          v29 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 24) + 256))(*(_QWORD *)(v26 + 24));
          v30 = v29 == 1635085670 || v29 == 1635086957;
          if (!v30
            && *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 24) + 256))(*(_QWORD *)(v26 + 24)) != 1635085673)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v42 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2917;
              v98 = 2080;
              v99 = "ConnectMIDI";
              v100 = 2080;
              v101 = "graphNodeDest->IsMusicDevice() || graphNodeDest->IsMusicEffect() || graphNodeDest->IsMIDIProcessorNode()";
              _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNodeDest->IsMusicDevice() || graphNodeDest->IsMusicEffect() || graphNodeDest->IsMIDIProcessorNode()");
          }
        }
        if ((unint64_t)v19 >= v87)
        {
          v31 = v19 - v18;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v87 - (_QWORD)v18) >> 2 > v32)
            v32 = (uint64_t)(v87 - (_QWORD)v18) >> 2;
          if (v87 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v31);
          *v35 = v26;
          v36 = v35 + 1;
          while (v19 != v18)
          {
            v37 = *--v19;
            *--v35 = v37;
          }
          v87 = v33 + 8 * v34;
          if (v18)
            operator delete(v18);
          v18 = v35;
          v19 = v36;
        }
        else
        {
          *v19++ = v26;
        }
        v38 = *(_QWORD **)(v26 + 112);
        if (v38)
        {
          if (v38 == NodeFromMap)
            goto LABEL_135;
          v39 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 24) + 48);
          *(_QWORD *)buf = *(_QWORD *)(v26 + 112);
          *(_QWORD *)&buf[8] = v26;
          *(_QWORD *)&buf[16] = 0;
          *(_DWORD *)&buf[24] = 0;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 368))(v26, buf);
          if (*((_BYTE *)a1 + 185) && v39)
          {
            v40 = v94;
            if ((unint64_t)v94 >= v95)
            {
              v43 = a6;
              v44 = (char *)__p;
              v45 = (v94 - (_BYTE *)__p) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
              v47 = v95 - (_QWORD)__p;
              if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
                v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v48);
              else
                v49 = 0;
              v50 = (char *)(v48 + 8 * v45);
              *(_QWORD *)v50 = v38;
              v41 = v50 + 8;
              if (v40 != v44)
              {
                do
                {
                  v51 = *((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *((_QWORD *)v50 - 1) = v51;
                  v50 -= 8;
                }
                while (v40 != v44);
                v40 = (char *)__p;
              }
              __p = v50;
              v95 = v48 + 8 * v49;
              a6 = v43;
              if (v40)
                operator delete(v40);
              a5 = v80;
            }
            else
            {
              *(_QWORD *)v94 = v38;
              v41 = v40 + 8;
            }
            v94 = v41;
          }
        }
        v52 = (uint64_t)a4;
        if (!a4)
          v52 = (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)v23 + 48))(v23, 0);
        if ((objc_msgSend((id)(*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)v86 + 48))(v86, 0), "isEqual:", v52) & 1) == 0)
        {
          v53 = AVAudioEngineGraph::PerformCommand((uint64_t)v85, NodeFromMap, 4, 0, 0);
          if ((_DWORD)v53)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v54 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 104;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2944;
              v98 = 2080;
              v99 = "ConnectMIDI";
              v100 = 2080;
              v101 = "PerformCommand(*graphNodeSrc, kAUUninitialize, NULL, 0)";
              v102 = 1024;
              v103 = v53;
              _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v53);
          }
          if (((*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD, uint64_t))(*(_QWORD *)v86 + 64))(v86, 0, v52) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v55 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2945;
              v98 = 2080;
              v99 = "ConnectMIDI";
              v100 = 2080;
              v101 = "inSrcImpl->SetOutputFormat(0, newFormat)";
              _os_log_impl(&dword_19B733000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcImpl->SetOutputFormat(0, newFormat)");
          }
        }
        v56 = NodeFromMap[14];
        a1 = v85;
        if (v56)
        {
          v57 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v56 + 24) + 48))(*(_QWORD *)(v56 + 24), 0);
          if ((objc_msgSend(v57, "isEqual:", (*(uint64_t (**)(AVAudioNodeImplBase *, _QWORD))(*(_QWORD *)v86 + 48))(v86, 0)) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "AVAEInternal.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2950;
              v98 = 2080;
              v99 = "ConnectMIDI";
              v100 = 2080;
              v101 = "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]";
              _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]");
          }
        }
        *(_QWORD *)buf = NodeFromMap;
        *(_QWORD *)&buf[8] = v26;
        *(_QWORD *)&buf[16] = a5;
        *(_QWORD *)&buf[24] = a6;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 360))(v26, buf);
LABEL_135:
        ++v20;
      }
      while (v20 != v84);
      v17 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v89, v96, 16);
    }
    while (v17);
  }
  v59 = (uint64_t *)NodeFromMap[16];
  for (i = (uint64_t *)NodeFromMap[17]; v59 != i; ++v59)
  {
    v61 = *v59;
    v62 = v18;
    if (v18 != v19)
    {
      while (*v62 != v61)
      {
        if (++v62 == v19)
        {
          v62 = v19;
          break;
        }
      }
    }
    if (v62 == v19)
    {
      *(_QWORD *)buf = NodeFromMap;
      *(_QWORD *)&buf[8] = v61;
      *(_QWORD *)&buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v61 + 368))(v61, buf);
      if (*((_BYTE *)v85 + 185))
      {
        if (v79)
        {
          v63 = v94;
          if ((unint64_t)v94 >= v95)
          {
            v65 = (char *)__p;
            v66 = (v94 - (_BYTE *)__p) >> 3;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61)
              std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
            v68 = v95 - (_QWORD)__p;
            if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v67)
              v67 = v68 >> 2;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
              v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v69);
            else
              v70 = 0;
            v71 = (char *)(v69 + 8 * v66);
            *(_QWORD *)v71 = v61;
            v64 = v71 + 8;
            if (v63 != v65)
            {
              do
              {
                v72 = *((_QWORD *)v63 - 1);
                v63 -= 8;
                *((_QWORD *)v71 - 1) = v72;
                v71 -= 8;
              }
              while (v63 != v65);
              v63 = (char *)__p;
            }
            __p = v71;
            v95 = v69 + 8 * v70;
            if (v63)
              operator delete(v63);
          }
          else
          {
            *(_QWORD *)v94 = v61;
            v64 = v63 + 8;
          }
          v94 = v64;
        }
      }
    }
  }
  if (v79)
  {
    if (!*(_BYTE *)(NodeFromMap[3] + 48))
    {
      v73 = AVAudioEngineGraph::PerformCommand((uint64_t)v85, NodeFromMap, 3, 0, 0);
      if ((_DWORD)v73)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v74 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 2971;
          v98 = 2080;
          v99 = "ConnectMIDI";
          v100 = 2080;
          v101 = "PerformCommand(*graphNodeSrc, kAUInitialize, NULL, 0)";
          v102 = 1024;
          v103 = v73;
          _os_log_impl(&dword_19B733000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v73);
      }
    }
  }
  updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(v85, (uint64_t)&__p, 1);
  if ((_DWORD)updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v76 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2975;
      v98 = 2080;
      v99 = "ConnectMIDI";
      v100 = 2080;
      v101 = "err = UpdateGraphAfterReconfig(&disjointNodes, kOutputChainFullTraversal)";
      v102 = 1024;
      v103 = updated;
      _os_log_impl(&dword_19B733000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), updated);
  }
  AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)v85);
  if (__p)
  {
    v94 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
    operator delete(v18);
  std::recursive_mutex::unlock(v78);
  return updated;
}

void sub_19B78232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::DisconnectMIDI(AVAudioEngineGraph *this, AVAudioNode *a2, NSArray *a3)
{
  AVAudioNodeImplBase *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t NodeFromMap;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  AVAudioNodeImplBase *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  std::recursive_mutex *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  _BYTE buf[28];
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = -[AVAudioNode impl](a2, "impl");
  if (!v4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v31 = 1024;
      v32 = 2993;
      v33 = 2080;
      v34 = "DisconnectMIDI";
      v35 = 2080;
      v36 = "inSrcImpl";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcImpl");
  }
  v23 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v23);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v4))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v31 = 1024;
      v32 = 2998;
      v33 = 2080;
      v34 = "DisconnectMIDI";
      v35 = 2080;
      v36 = "IsNodeInGraph(inSrcImpl)";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inSrcImpl)");
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v4);
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(NodeFromMap + 24) + 256))(*(_QWORD *)(NodeFromMap + 24)) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v31 = 1024;
      v32 = 3003;
      v33 = 2080;
      v34 = "DisconnectMIDI";
      v35 = 2080;
      v36 = "graphNodeSrc->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNodeSrc->IsMIDIProcessorNode()");
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v9 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v26;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v26 != v10)
          objc_enumerationMutation(a3);
        v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v11);
        if (!v12)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            v31 = 1024;
            v32 = 3009;
            v33 = 2080;
            v34 = "DisconnectMIDI";
            v35 = 2080;
            v36 = "destAVNode";
            _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "destAVNode");
        }
        v14 = (AVAudioNodeImplBase *)objc_msgSend(v12, "impl");
        if (!v14)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            v31 = 1024;
            v32 = 3012;
            v33 = 2080;
            v34 = "DisconnectMIDI";
            v35 = 2080;
            v36 = "inDestImpl";
            _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inDestImpl");
        }
        if (!AVAudioEngineGraph::IsNodeInGraph(this, v14))
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
            v31 = 1024;
            v32 = 3016;
            v33 = 2080;
            v34 = "DisconnectMIDI";
            v35 = 2080;
            v36 = "IsNodeInGraph(inDestImpl)";
            _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inDestImpl)");
        }
        v17 = AVAudioEngineGraph::GetNodeFromMap(this, v14);
        v18 = *(_QWORD **)(NodeFromMap + 128);
        v19 = *(_QWORD **)(NodeFromMap + 136);
        if (v18 != v19)
        {
          v20 = v17;
          do
          {
            if (*v18 == v20)
            {
              *(_QWORD *)buf = NodeFromMap;
              *(_QWORD *)&buf[8] = v20;
              *(_QWORD *)&buf[16] = 0;
              *(_DWORD *)&buf[24] = 0;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 368))(v20, buf);
            }
            ++v18;
          }
          while (v18 != v19);
        }
        ++v11;
      }
      while (v11 != v9);
      v9 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v9);
  }
  if (*(_QWORD *)(NodeFromMap + 128) == *(_QWORD *)(NodeFromMap + 136))
  {
    v21 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (_QWORD *)NodeFromMap, 4, 0, 0);
    if ((_DWORD)v21)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
        v31 = 1024;
        v32 = 3030;
        v33 = 2080;
        v34 = "DisconnectMIDI";
        v35 = 2080;
        v36 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
        v37 = 1024;
        v38 = v21;
        _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v21);
    }
  }
  std::recursive_mutex::unlock(v23);
}

void sub_19B782C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11)
{
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::DisconnectAllMIDIInputs(AVAudioEngineGraph *this, AVAudioNode *a2)
{
  NSObject *v4;
  AVAudioNodeImplBase *v5;
  NSObject *v6;
  std::recursive_mutex *v7;
  NSObject *v8;
  _QWORD *NodeFromMap;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[3];
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngineGraph.mm";
      v21 = 1024;
      v22 = 3038;
      v23 = 2080;
      v24 = "DisconnectAllMIDIInputs";
      v25 = 2080;
      v26 = "inAVNode";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inAVNode");
  }
  v5 = -[AVAudioNode impl](a2, "impl");
  if (!v5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngineGraph.mm";
      v21 = 1024;
      v22 = 3041;
      v23 = 2080;
      v24 = "DisconnectAllMIDIInputs";
      v25 = 2080;
      v26 = "inImpl";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inImpl");
  }
  v7 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v7);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngineGraph.mm";
      v21 = 1024;
      v22 = 3046;
      v23 = 2080;
      v24 = "DisconnectAllMIDIInputs";
      v25 = 2080;
      v26 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(this, v5);
  v10 = (_QWORD *)NodeFromMap[14];
  if (v10)
  {
    v13[0] = NodeFromMap[14];
    v13[1] = NodeFromMap;
    v13[2] = 0;
    v14 = 0;
    (*(void (**)(_QWORD *, _QWORD *))(*NodeFromMap + 368))(NodeFromMap, v13);
    if (v10[16] == v10[17])
    {
      v11 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v10, 4, 0, 0);
      if ((_DWORD)v11)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          v16 = "AVAEInternal.h";
          v17 = 1024;
          v18 = 104;
          v19 = 2080;
          v20 = "AVAudioEngineGraph.mm";
          v21 = 1024;
          v22 = 3058;
          v23 = 2080;
          v24 = "DisconnectAllMIDIInputs";
          v25 = 2080;
          v26 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
          v27 = 1024;
          v28 = v11;
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v11);
      }
    }
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19B78315C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::DisconnectAllMIDIOutputs(AVAudioEngineGraph *this, AVAudioNode *a2)
{
  NSObject *v4;
  AVAudioNodeImplBase *v5;
  NSObject *v6;
  std::recursive_mutex *v7;
  NSObject *v8;
  uint64_t NodeFromMap;
  NSObject *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BYTE buf[28];
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 3067;
      v19 = 2080;
      v20 = "DisconnectAllMIDIOutputs";
      v21 = 2080;
      v22 = "inAVNode";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inAVNode");
  }
  v5 = -[AVAudioNode impl](a2, "impl");
  if (!v5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 3070;
      v19 = 2080;
      v20 = "DisconnectAllMIDIOutputs";
      v21 = 2080;
      v22 = "inImpl";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inImpl");
  }
  v7 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v7);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 3075;
      v19 = 2080;
      v20 = "DisconnectAllMIDIOutputs";
      v21 = 2080;
      v22 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v5);
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(NodeFromMap + 24) + 256))(*(_QWORD *)(NodeFromMap + 24)) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 3082;
      v19 = 2080;
      v20 = "DisconnectAllMIDIOutputs";
      v21 = 2080;
      v22 = "graphNode->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "graphNode->IsMIDIProcessorNode()");
  }
  v11 = *(unint64_t **)(NodeFromMap + 128);
  v12 = *(unint64_t **)(NodeFromMap + 136);
  while (v11 != v12)
  {
    v13 = *v11;
    *(_QWORD *)buf = NodeFromMap;
    *(_OWORD *)&buf[8] = v13;
    *(_DWORD *)&buf[24] = 0;
    (*(void (**)(unint64_t, _BYTE *))(*(_QWORD *)v13 + 368))(v13, buf);
    ++v11;
  }
  v14 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (_QWORD *)NodeFromMap, 4, 0, 0);
  if ((_DWORD)v14)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngineGraph.mm";
      v17 = 1024;
      v18 = 3091;
      v19 = 2080;
      v20 = "DisconnectAllMIDIOutputs";
      v21 = 2080;
      v22 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
      v23 = 1024;
      v24 = v14;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v14);
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19B783734(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

AVAudioConnectionPoint *AVAudioEngineGraph::GetInputConnectionPointForNode(AVAudioEngineGraph *this, AVAudioNode *a2, uint64_t a3)
{
  NSObject *v6;
  std::recursive_mutex *v7;
  AVAudioNodeImplBase *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t NodeFromMap;
  NSObject *v12;
  NSObject *v13;
  AVAudioConnectionPoint *v14;
  AVAudioConnectionPoint *v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 3099;
      v29 = 2080;
      v30 = "GetInputConnectionPointForNode";
      v31 = 2080;
      v32 = "nil != inAVNode";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != inAVNode");
  }
  v7 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v7);
  v8 = -[AVAudioNode impl](a2, "impl");
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 3104;
      v29 = 2080;
      v30 = "GetInputConnectionPointForNode";
      v31 = 2080;
      v32 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  v10 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v8 + 240))(v8, a3);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 112))(NodeFromMap))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v22 = "AVAEInternal.h";
      v23 = 1024;
      v24 = 71;
      v25 = 2080;
      v26 = "AVAudioEngineGraph.mm";
      v27 = 1024;
      v28 = 3112;
      v29 = 2080;
      v30 = "GetInputConnectionPointForNode";
      v31 = 2080;
      v32 = "!graphNode->IsSplitterNode()";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!graphNode->IsSplitterNode()");
  }
  v19 = 0;
  v20 = -1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)NodeFromMap + 40))(NodeFromMap, 1, v10, &v19))
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 112))(v19))
    {
      v14 = +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(_QWORD *)(v19 + 16), (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 24) + 248))(*(_QWORD *)(v19 + 24), v20));
LABEL_31:
      v15 = v14;
      goto LABEL_32;
    }
    v17 = 0;
    v18 = -1;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v19 + 40))(v19, 1, 0, &v17))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 112))(v17))
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v22 = "AVAEInternal.h";
          v23 = 1024;
          v24 = 71;
          v25 = 2080;
          v26 = "AVAudioEngineGraph.mm";
          v27 = 1024;
          v28 = 3121;
          v29 = 2080;
          v30 = "GetInputConnectionPointForNode";
          v31 = 2080;
          v32 = "!splitterConnPoint.node->IsSplitterNode()";
          _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!splitterConnPoint.node->IsSplitterNode()");
      }
      v14 = +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(_QWORD *)(v17 + 16), (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 24) + 248))(*(_QWORD *)(v17 + 24), v18));
      goto LABEL_31;
    }
  }
  v15 = 0;
LABEL_32:
  std::recursive_mutex::unlock(v7);
  return v15;
}

void sub_19B783CE0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::GetOutputConnectionPointsForNode(AVAudioEngineGraph *this, AVAudioNode *a2, uint64_t a3)
{
  NSObject *v6;
  std::recursive_mutex *v7;
  AVAudioNodeImplBase *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t NodeFromMap;
  NSObject *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t *i;
  NSObject *v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v33 = "AVAEInternal.h";
      v34 = 1024;
      v35 = 71;
      v36 = 2080;
      v37 = "AVAudioEngineGraph.mm";
      v38 = 1024;
      v39 = 3137;
      v40 = 2080;
      v41 = "GetOutputConnectionPointsForNode";
      v42 = 2080;
      v43 = "nil != inAVNode";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != inAVNode");
  }
  v7 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v7);
  v8 = -[AVAudioNode impl](a2, "impl");
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v33 = "AVAEInternal.h";
      v34 = 1024;
      v35 = 71;
      v36 = 2080;
      v37 = "AVAudioEngineGraph.mm";
      v38 = 1024;
      v39 = 3142;
      v40 = 2080;
      v41 = "GetOutputConnectionPointsForNode";
      v42 = 2080;
      v43 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  v10 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v8 + 240))(v8, a3);
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)NodeFromMap + 112))(NodeFromMap))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v33 = "AVAEInternal.h";
      v34 = 1024;
      v35 = 71;
      v36 = 2080;
      v37 = "AVAudioEngineGraph.mm";
      v38 = 1024;
      v39 = 3150;
      v40 = 2080;
      v41 = "GetOutputConnectionPointsForNode";
      v42 = 2080;
      v43 = "!graphNode->IsSplitterNode()";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!graphNode->IsSplitterNode()");
  }
  v30 = 0;
  v31 = -1;
  if (!(*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD **))(*(_QWORD *)NodeFromMap + 40))(NodeFromMap, 0, v10, &v30))goto LABEL_53;
  v13 = (*(uint64_t (**)(_QWORD *))(*v30 + 112))(v30);
  v14 = v30;
  if (!v13)
  {
    v21 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", v30[2], (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v30[3] + 248))(v30[3], v31)));
LABEL_40:
    v22 = v21;
    goto LABEL_41;
  }
  v15 = (_QWORD *)v30[9];
  v16 = (_QWORD *)v30[10];
  if (v15 == v16)
    goto LABEL_53;
  v17 = 0;
  do
  {
    if (*v15++)
      ++v17;
  }
  while (v15 != v16);
  if (v17 != 1)
  {
    if (v17 >= 2)
    {
      v27 = (uint64_t)&v27;
      v28 = &v27;
      v29 = 0;
      AUGraphNodeBase::GetValidConnectionPoints(v30, &v27);
      v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      for (i = v28; i != &v27; i = (uint64_t *)i[1])
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)i[2] + 112))(i[2]))
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            v33 = "AVAEInternal.h";
            v34 = 1024;
            v35 = 71;
            v36 = 2080;
            v37 = "AVAudioEngineGraph.mm";
            v38 = 1024;
            v39 = 3180;
            v40 = 2080;
            v41 = "GetOutputConnectionPointsForNode";
            v42 = 2080;
            v43 = "!connPoint.node->IsSplitterNode()";
            _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!connPoint.node->IsSplitterNode()");
        }
        objc_msgSend(v23, "addObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(_QWORD *)(i[2] + 16), (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(i[2] + 24) + 248))(*(_QWORD *)(i[2] + 24), *((unsigned int *)i + 6))));
      }
      v22 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v23);
      std::__list_imp<AUGraphConnection>::clear(&v27);
      goto LABEL_41;
    }
LABEL_53:
    v22 = objc_msgSend(MEMORY[0x1E0C99D20], "array");
    goto LABEL_54;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v33 = "AVAEInternal.h";
    v34 = 1024;
    v35 = 71;
    v36 = 2080;
    v37 = "AVAudioEngineGraph.mm";
    v38 = 1024;
    v39 = 3160;
    v40 = 2080;
    v41 = "GetOutputConnectionPointsForNode";
    v42 = 2080;
    v43 = "numSplitterConnections == 0 || numSplitterConnections > 1";
    _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "numSplitterConnections == 0 || numSplitterConnections > 1");
  v27 = 0;
  LODWORD(v28) = -1;
  if ((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD, uint64_t *))(*v14 + 40))(v14, 0, 0, &v27))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 112))(v27))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v20 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v33 = "AVAEInternal.h";
        v34 = 1024;
        v35 = 71;
        v36 = 2080;
        v37 = "AVAudioEngineGraph.mm";
        v38 = 1024;
        v39 = 3167;
        v40 = 2080;
        v41 = "GetOutputConnectionPointsForNode";
        v42 = 2080;
        v43 = "!splitterConnPoint.node->IsSplitterNode()";
        _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!splitterConnPoint.node->IsSplitterNode()");
    }
    v21 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(_QWORD *)(v27 + 16), (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v27 + 24) + 248))(*(_QWORD *)(v27 + 24), v28)));
    goto LABEL_40;
  }
  v22 = 0;
LABEL_41:
  if (!v22)
    goto LABEL_53;
LABEL_54:
  std::recursive_mutex::unlock(v7);
  return v22;
}

void sub_19B784598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::recursive_mutex *v6;
  va_list va;

  va_start(va, a6);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  std::recursive_mutex::unlock(v6);
  _Unwind_Resume(a1);
}

const char *CAMemoryStream::Write(CAMemoryStream *this, void *a2, const char *a3)
{
  const char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = a3;
  if ((int)a3 >= 1)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = v6 + a3;
    if ((unint64_t)(v7 + 1) <= *((_QWORD *)this + 3))
    {
      v8 = (char *)*((_QWORD *)this + 1);
    }
    else
    {
      v8 = (char *)malloc_type_realloc(*((void **)this + 1), (v7 & 0xFFFFFFFFFFFFFF80) + 128, 0xB69AE6F0uLL);
      if (!v8)
      {
        fwrite("realloc failed", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        return (const char *)0xFFFFFFFFLL;
      }
      *((_QWORD *)this + 1) = v8;
      *((_QWORD *)this + 3) = (v7 & 0xFFFFFFFFFFFFFF80) + 128;
      v6 = *((_QWORD *)this + 2);
    }
    memcpy(&v8[v6], a2, v3);
    *((_QWORD *)this + 2) = v7;
  }
  return v3;
}

_QWORD *AVAudioEngineGraph::ConnAsString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  const void *v8;
  void **v9;
  int v10;
  char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  const void *v15;
  void **v16;
  void *__p[2];
  char v19;
  char __str[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)__str = 0u;
  v6 = *(_DWORD *)(a3 + 8);
  v7 = *(_QWORD *)a3;
  if (AVAudioEngineGraph::IsNodeInGraph(a2, *(_QWORD *)a3))
    v8 = *(const void **)(v7 + 24);
  else
    v8 = 0;
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v7))
  {
    AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, *(_QWORD *)(v7 + 24));
    if (v19 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = snprintf(__str, 0x100uLL, "(bus%d) %p, {%s} -> ", v6, v8, (const char *)v9);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = snprintf(__str, 0x100uLL, "(bus%d) %p, {%s} -> ", v6, v8, "");
  }
  v11 = &__str[v10];
  v12 = 256 - v10;
  v13 = *(_DWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 16);
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v14))
    v15 = *(const void **)(v14 + 24);
  else
    v15 = 0;
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v14))
  {
    AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, *(_QWORD *)(v14 + 24));
    if (v19 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    snprintf(v11, v12, "(bus%d) %p, {%s}", v13, v15, (const char *)v16);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    snprintf(v11, v12, "(bus%d) %p, {%s}", v13, v15, "");
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;

  v5 = (_QWORD *)*((_QWORD *)this + 6);
  v6 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      if (*v5++)
        ++v7;
    }
    while (v5 != v6);
    if (v7)
      goto LABEL_13;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  v10 = (_QWORD *)*((_QWORD *)this + 10);
  if (v9 != v10)
  {
    v11 = 0;
    do
    {
      if (*v9++)
        ++v11;
    }
    while (v9 != v10);
    if (v11)
LABEL_13:
      AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
  }
  v13 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD **)(v13 + 8);
  v14 = (_QWORD *)(v13 + 8);
  v15 = v16;
  if (v16)
  {
    v17 = *((_QWORD *)this + 3);
    v18 = v14;
    do
    {
      v19 = v15[4];
      v20 = v19 >= v17;
      if (v19 >= v17)
        v21 = v15;
      else
        v21 = v15 + 1;
      if (v20)
        v18 = v15;
      v15 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 != v14 && v17 >= v18[4])
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), v17);
  }
  return 0;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;

  v5 = (_QWORD *)*((_QWORD *)this + 6);
  v6 = (_QWORD *)*((_QWORD *)this + 7);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      if (*v5++)
        ++v7;
    }
    while (v5 != v6);
    if (v7)
      goto LABEL_13;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  v10 = (_QWORD *)*((_QWORD *)this + 10);
  if (v9 != v10)
  {
    v11 = 0;
    do
    {
      if (*v9++)
        ++v11;
    }
    while (v9 != v10);
    if (v11)
LABEL_13:
      AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
  }
  v13 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD **)(v13 + 8);
  v14 = (_QWORD *)(v13 + 8);
  v15 = v16;
  if (v16)
  {
    v17 = *((_QWORD *)this + 3);
    v18 = v14;
    do
    {
      v19 = v15[4];
      v20 = v19 >= v17;
      if (v19 >= v17)
        v21 = v15;
      else
        v21 = v15 + 1;
      if (v20)
        v18 = v15;
      v15 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 != v14 && v17 >= v18[4])
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), v17);
  }
  return 0;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5BC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5BC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
    *((_DWORD *)this + 8) |= 8u;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), *((_QWORD *)this + 3));
  }
  return 0;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5B78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5B78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
  {
    AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
    *((_DWORD *)this + 8) |= 0x10u;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), *((_QWORD *)this + 3));
  }
  return 0;
}

uint64_t AVAudioEngineGraph::SetManualRenderingMode(AVAudioEngineGraph *this, int a2, AVAudioEngineManualRenderingMode a3, NSError **a4)
{
  std::recursive_mutex *v8;
  NSError *v9;
  uint64_t v10;
  AVAudioEngineManualRenderingMode v11;

  v8 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v8);
  if ((((*((_BYTE *)this + 187) != 0) ^ a2) & 1) != 0 || *((_QWORD *)this + 24) != a3)
  {
    if (*((_BYTE *)this + 185))
    {
      if (!a4)
      {
        v10 = 0;
        goto LABEL_14;
      }
      v9 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.avfaudio"), -80801, 0);
      v10 = 0;
      goto LABEL_12;
    }
    *((_BYTE *)this + 187) = a2;
    if (a2)
      v11 = a3;
    else
      v11 = AVAudioEngineManualRenderingModeRealtime;
    *((_QWORD *)this + 24) = v11;
  }
  v10 = 1;
  if (a4)
  {
    v9 = 0;
LABEL_12:
    *a4 = v9;
  }
LABEL_14:
  std::recursive_mutex::unlock(v8);
  return v10;
}

void sub_19B784DA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::RenderToABL(AVAudioNodeImplBase **this, uint64_t a2, AudioBufferList *a3, int *a4)
{
  int v8;
  uint64_t NodeFromMap;
  NSObject *v10;
  uint64_t result;
  uint64_t mNumberBuffers;
  UInt32 *p_mDataByteSize;
  AVAudioNodeImplBase *v14;
  uint64_t v15;
  AVAudioNodeImplBase *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = -80802;
  if (*((_BYTE *)this + 187))
  {
    if (*((_BYTE *)this + 184))
    {
      NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
      if (!NodeFromMap)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v18 = "AVAEInternal.h";
          v19 = 1024;
          v20 = 71;
          v21 = 2080;
          v22 = "AVAudioEngineGraph.mm";
          v23 = 1024;
          v24 = 3557;
          v25 = 2080;
          v26 = "RenderToABL";
          v27 = 2080;
          v28 = "outputNode";
          _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "outputNode");
      }
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, AudioBufferList *, AVAudioNodeImplBase *))(*(_QWORD *)NodeFromMap
                                                                                                 + 168))(NodeFromMap, a2, a3, this[25]);
    }
    if (a4)
      goto LABEL_11;
  }
  else
  {
    v8 = -80800;
    if (a4)
LABEL_11:
      *a4 = v8;
  }
  if (v8)
  {
    result = -1;
  }
  else
  {
    result = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  }
  if (a3)
  {
    mNumberBuffers = a3->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      if (v8
        || result == 1
        && (v14 = this[8], v14 - this[7] == 8)
        && (v15 = *((_QWORD *)v14 - 1)) != 0
        && (v16 = this[2]) != 0
        && *(AVAudioNodeImplBase **)(v15 + 24) == v16)
      {
        p_mDataByteSize = &a3->mBuffers[0].mDataByteSize;
        do
        {
          *p_mDataByteSize = 0;
          p_mDataByteSize += 4;
          --mNumberBuffers;
        }
        while (mNumberBuffers);
      }
      else if (a3->mBuffers[0].mDataByteSize)
      {
        this[25] = (AVAudioNodeImplBase *)((char *)this[25] + a2);
      }
    }
  }
  return result;
}

void std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE5C98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE5C98;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 376))(a2);
  if (v4)
  {
    v5 = a2[2];
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v6 + 16))
    {
      *(_DWORD *)v6 = v4;
      *(_QWORD *)(v6 + 8) = v5;
    }
    else
    {
      *(_QWORD *)v6 = v4;
      *(_QWORD *)(v6 + 8) = v5;
      *(_BYTE *)(v6 + 16) = 1;
    }
  }
  return v4 != 0;
}

void AVAudioEnvironmentNodeImpl::~AVAudioEnvironmentNodeImpl(AVAudioEnvironmentNodeImpl *this)
{
  AVAudioEnvironmentNodeImpl::~AVAudioEnvironmentNodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E3BE9100;
  if (*((_QWORD *)this + 28))
  {
    if (*((_BYTE *)this + 256))
    {
      MEMORY[0x1A1AC59C4]((char *)this + 240);
      *((_BYTE *)this + 256) = 0;
    }
    caulk::semaphore::semaphore((AVAudioEnvironmentNodeImpl *)((char *)this + 240));
    *((_BYTE *)this + 256) = 1;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    caulk::semaphore::timed_wait((AVAudioEnvironmentNodeImpl *)((char *)this + 240), -1.0);
    __dmb(9u);
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 26));

  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*((_QWORD **)this + 40));
  caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base((uint64_t)this + 216);
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

uint64_t AVAudioEnvironmentNodeImpl::SetOutputFormat(AVAudioEnvironmentNodeImpl *this, uint64_t a2, AVAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *))(*(_QWORD *)this + 40))(this);
  v7 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v6 + 48))(v6, 0, v7, a3);
}

uint64_t AVAudioEnvironmentNodeImpl::SetInputFormat(AVAudioEnvironmentNodeImpl *this, uint64_t a2, AVAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *))(*(_QWORD *)this + 40))(this);
  v7 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v6 + 48))(v6, 1, v7, a3);
}

uint64_t AVAudioEnvironmentNodeImpl::SetManualRenderingMode(AVAudioEnvironmentNodeImpl *this, unsigned int a2, AVAudioEngineManualRenderingMode a3)
{
  _BOOL4 v4;
  AVAudioEngineManualRenderingMode v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *((_BYTE *)this + 72) != 0;
  *((_BYTE *)this + 72) = a2;
  if (a2)
    v5 = a3;
  else
    v5 = AVAudioEngineManualRenderingModeRealtime;
  *((_QWORD *)this + 10) = v5;
  if (a3)
    v6 = 0;
  else
    v6 = a2;
  v7 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *))(*(_QWORD *)this + 40))(this);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 184))(v7, v6);
  *((_BYTE *)this + 49) = v6;
  if (v4 != (*((_BYTE *)this + 72) != 0) && !*((_QWORD *)this + 24))
    return AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(this);
  return result;
}

uint64_t AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(AVAudioEnvironmentNodeImpl *this)
{
  NSObject *v2;
  int v3;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  int v10;
  _BOOL4 v11;
  int v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 24))
    return 1;
  v12 = 3;
  if (!*((_BYTE *)this + 72) && !*((_BYTE *)this + 49))
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CFF1C0], "sharedInstance");
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "count") == 1)
    {
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "firstObject"), "isHeadphones"))
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v14 = "AVAudioEnvironmentNodeImpl.mm";
          v15 = 1024;
          v16 = 443;
          _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting output type = headphones", buf, 0x12u);
        }
        v3 = 1;
        goto LABEL_32;
      }
      v9 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "firstObject"), "portType");
      v10 = objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CFF140]);
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      v11 = os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG);
      if (v10)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136315394;
          v14 = "AVAudioEnvironmentNodeImpl.mm";
          v15 = 1024;
          v16 = 455;
          v3 = 2;
          _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting output type = built-in speakers", buf, 0x12u);
        }
        else
        {
          v3 = 2;
        }
        goto LABEL_32;
      }
      if (!v11)
      {
LABEL_31:
        v3 = 3;
LABEL_32:
        v12 = v3;
        goto LABEL_9;
      }
      *(_DWORD *)buf = 136315394;
      v14 = "AVAudioEnvironmentNodeImpl.mm";
      v15 = 1024;
      v16 = 458;
      v8 = "%25s:%-5d setting output type = external speakers";
    }
    else
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
        goto LABEL_31;
      *(_DWORD *)buf = 136315394;
      v14 = "AVAudioEnvironmentNodeImpl.mm";
      v15 = 1024;
      v16 = 461;
      v8 = "%25s:%-5d multiple outputs active, setting output type = external speakers";
    }
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, v8, buf, 0x12u);
    goto LABEL_31;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v14 = "AVAudioEnvironmentNodeImpl.mm";
    v15 = 1024;
    v16 = 557;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d manual rendering mode, setting output type = external speakers", buf, 0x12u);
  }
  v3 = 3;
LABEL_9:
  if (v3 == *((_DWORD *)this + 50))
    return 1;
  *((_DWORD *)this + 50) = v3;
  return (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, _QWORD, _QWORD, int *, uint64_t))(*(_QWORD *)this + 144))(this, 3100, 0, 0, &v12, 4);
}

uint64_t caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 8))
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(_BYTE *)(a1 + 40))
      MEMORY[0x1A1AC59C4](a1 + 24);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    return a1;
  }
  return result;
}

void ___ZN26AVAudioEnvironmentNodeImplC2Ev_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AVAudioEnvironmentNodeImpl *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::recursive_mutex *v8;
  char v9;
  std::recursive_mutex *v10;
  char v11;
  AVAudioEnvironmentNodeImpl *v12;
  std::__shared_weak_count *v13;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v13 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(AVAudioEnvironmentNodeImpl **)(a1 + 32);
      v12 = v5;
      if (v5)
      {
        AVAudioNodeImplBase::GetAttachAndEngineLock((AVAudioNodeImplBase *)&v8, (uint64_t)v5);
        AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(v5);
        if (v11)
          std::recursive_mutex::unlock(v10);
        if (v9)
          std::recursive_mutex::unlock(v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19B785864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEnvironmentNodeImpl::SetMixerDistanceParameters(AVAudioEnvironmentNodeImpl *this)
{
  float v2;
  float v3;
  int v4;
  float v5;
  AVAudioEnvironmentNodeImpl *v6;
  uint64_t v7;
  int v8;
  AVAudioEnvironmentNodeImpl *v9;
  AVAudioEnvironmentNodeImpl *v10;
  BOOL v11;
  float v13;
  float v14;
  int v15;

  v2 = *((float *)this + 87);
  v3 = *((float *)this + 88);
  v13 = v3;
  v14 = v2;
  AVAudioEnvironmentNodeImpl::GetMaxAttenuation(this);
  v15 = v4;
  if (*((_DWORD *)this + 86) == 3)
  {
    v5 = *((float *)this + 89);
    if (v5 > 1.0 && (float)(v2 - v3) > 0.001)
      v14 = v3 + (float)((float)(v2 - v3) / v5);
  }
  v6 = (AVAudioEnvironmentNodeImpl *)*((_QWORD *)this + 39);
  v7 = 1;
  if (v6 != (AVAudioEnvironmentNodeImpl *)((char *)this + 320))
  {
    do
    {
      v8 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, _QWORD, float *, uint64_t))(*(_QWORD *)this + 144))(this, 3010, 1, *((unsigned int *)v6 + 10), &v13, 12);
      v9 = (AVAudioEnvironmentNodeImpl *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(AVAudioEnvironmentNodeImpl **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (AVAudioEnvironmentNodeImpl *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v7 = v7 & v8;
      v6 = v10;
    }
    while (v10 != (AVAudioEnvironmentNodeImpl *)((char *)this + 320));
  }
  return v7;
}

void AVAudioEnvironmentNodeImpl::GetMaxAttenuation(AVAudioEnvironmentNodeImpl *this)
{
  float v1;
  float v2;
  int v3;
  float v4;

  v1 = *((float *)this + 87);
  v2 = *((float *)this + 88);
  if ((float)(v1 - v2) > 0.001)
  {
    v3 = *((_DWORD *)this + 86);
    if (v3 == 3)
    {
      v4 = 1.0 - *((float *)this + 89);
      if (v4 < 1.0e-10)
        v4 = 1.0e-10;
      log10f(v4);
    }
    else if (v3 == 2)
    {
      if (v2 > 0.001)
        log10f((float)((float)((float)(v1 - v2) * *((float *)this + 89)) / v2) + 1.0);
    }
    else if (v3 == 1 && v2 > 0.001)
    {
      log10f(v1 / v2);
    }
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSN5caulk14lifetime_guardI26AVAudioEnvironmentNodeImplvE8weak_refE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSN5caulk14lifetime_guardI26AVAudioEnvironmentNodeImplvE8weak_refE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void EnvironmentReverbFilterParameters::~EnvironmentReverbFilterParameters(EnvironmentReverbFilterParameters *this)
{
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t EnvironmentReverbFilterParameters::SetFilterType(EnvironmentReverbFilterParameters *this, AVAudioUnitEQFilterType a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), 17, 0, 0, (float)a2);
}

uint64_t EnvironmentReverbFilterParameters::SetFrequency(EnvironmentReverbFilterParameters *this, float a2)
{
  float *v2;
  float v3;
  float v4;

  v2 = (float *)*((_QWORD *)this + 2);
  if (v2[98] == a2)
    return 1;
  v3 = 20000.0;
  if (a2 < 20000.0)
    v3 = a2;
  if (a2 <= 10.0)
    v4 = 10.0;
  else
    v4 = v3;
  v2[98] = v4;
  return (*(uint64_t (**)(float *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 128))(v2, 14, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetBandwidth(EnvironmentReverbFilterParameters *this, float a2)
{
  float *v2;
  float v3;
  float v4;

  v2 = (float *)*((_QWORD *)this + 2);
  if (v2[97] == a2)
    return 1;
  v3 = 5.0;
  if (a2 < 5.0)
    v3 = a2;
  if (a2 <= 0.05)
    v4 = 0.05;
  else
    v4 = v3;
  v2[97] = v4;
  return (*(uint64_t (**)(float *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 128))(v2, 15, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetGain(EnvironmentReverbFilterParameters *this, float a2)
{
  float *v2;
  float v3;
  float v4;

  v2 = (float *)*((_QWORD *)this + 2);
  if (v2[96] == a2)
    return 1;
  v3 = 24.0;
  if (a2 < 24.0)
    v3 = a2;
  if (a2 <= -96.0)
    v4 = -96.0;
  else
    v4 = v3;
  v2[96] = v4;
  return (*(uint64_t (**)(float *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 128))(v2, 16, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetBypass(EnvironmentReverbFilterParameters *this, int a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), 18, 0, 0, (float)(a2 ^ 1u));
}

uint64_t EnvironmentReverbFilterParameters::GetFilterType(EnvironmentReverbFilterParameters *this)
{
  float v2;

  v2 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2), 17, 0, 0, &v2);
  return (uint64_t)v2;
}

float EnvironmentReverbFilterParameters::GetFrequency(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((_QWORD *)this + 2) + 392);
}

float EnvironmentReverbFilterParameters::GetBandwidth(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((_QWORD *)this + 2) + 388);
}

float EnvironmentReverbFilterParameters::GetGain(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((_QWORD *)this + 2) + 384);
}

BOOL EnvironmentReverbFilterParameters::GetBypass(EnvironmentReverbFilterParameters *this)
{
  float v2;

  v2 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2), 18, 0, 0, &v2);
  return v2 == 0.0;
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BEB748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BEB748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(_QWORD *)(a1 + 40) + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t AVAudioEnvironmentNodeImpl::ResetRenderingFlags(AVAudioEnvironmentNodeImpl *this)
{
  char *v1;
  char *v2;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  BOOL v8;
  int v10;

  v10 = 4;
  v1 = (char *)*((_QWORD *)this + 39);
  v2 = (char *)this + 320;
  if (v1 == (char *)this + 320)
    return 1;
  LODWORD(v4) = 1;
  do
  {
    v5 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, _QWORD, int *, uint64_t))(*(_QWORD *)this + 144))(this, 3003, 1, *((unsigned int *)v1 + 10), &v10, 4);
    v6 = (char *)*((_QWORD *)v1 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (char *)*((_QWORD *)v1 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v4 = v4 & v5;
    v1 = v7;
  }
  while (v7 != v2);
  return v4;
}

float RotateVectorByEulerAngles(float a1, float a2, float a3, AVAudio3DPoint *a4)
{
  __float2 v7;
  __float2 v8;
  __float2 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float y;
  float z;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float result;

  v7 = __sincosf_stret((float)(a2 * 0.017453) * 0.5);
  v8 = __sincosf_stret((float)(a1 * 0.017453) * 0.5);
  v9 = __sincosf_stret((float)(a3 * 0.017453) * 0.5);
  v10 = (float)(v9.__sinval * (float)(v8.__cosval * v7.__cosval))
      - (float)(v9.__cosval * (float)(v8.__sinval * v7.__sinval));
  v11 = (float)(v8.__sinval * (float)(v7.__cosval * v9.__sinval))
      + (float)((float)(v7.__sinval * v9.__cosval) * v8.__cosval);
  v12 = (float)(v8.__cosval * (float)-(float)(v9.__sinval * v7.__sinval))
      + (float)((float)(v7.__cosval * v9.__cosval) * v8.__sinval);
  v13 = (float)(v9.__sinval * (float)(v8.__sinval * v7.__sinval))
      + (float)(v9.__cosval * (float)(v8.__cosval * v7.__cosval));
  v14 = -v12;
  v15 = -v10;
  v16 = sqrtf((float)((float)((float)(v11 * v11) + (float)(v13 * v13)) + (float)(v12 * v12)) + (float)(v10 * v10));
  if (v16 == 0.0)
  {
    v18 = (float)(v9.__sinval * (float)(v8.__sinval * v7.__sinval))
        + (float)(v9.__cosval * (float)(v8.__cosval * v7.__cosval));
  }
  else
  {
    v17 = 1.0 / v16;
    v18 = v13 * (float)(1.0 / v16);
    v11 = v11 * v17;
    v14 = v17 * v14;
    v15 = v17 * v15;
  }
  y = a4->y;
  z = a4->z;
  v21 = (float)((float)((float)(v18 * 0.0) - (float)(v11 * a4->x)) - (float)(v14 * y)) - (float)(v15 * z);
  v22 = (float)((float)((float)(v11 * 0.0) + (float)(v18 * a4->x)) + (float)(v14 * z)) - (float)(v15 * y);
  v23 = (float)((float)((float)(v18 * y) - (float)(v11 * z)) + (float)(v14 * 0.0)) + (float)(v15 * a4->x);
  v24 = (float)((float)((float)(v11 * y) + (float)(v18 * z)) - (float)(v14 * a4->x)) + (float)(v15 * 0.0);
  v25 = (float)((float)((float)(v13 * v22) - (float)(v21 * v11)) - (float)(v23 * v15)) + (float)(v24 * v14);
  v26 = (float)((float)((float)(v15 * v22) - (float)(v21 * v14)) + (float)(v23 * v13)) - (float)(v24 * v11);
  result = (float)((float)((float)-(float)(v14 * v22) - (float)(v21 * v15)) + (float)(v23 * v11)) + (float)(v24 * v13);
  a4->x = v25;
  a4->y = v26;
  a4->z = result;
  return result;
}

void sub_19B7860A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B786334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19B786488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B786568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B786678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19B786724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B786EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B787370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19B787820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B787BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B787DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B787F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7882F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7884B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B788684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B788888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B788A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B788B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B788BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)AVAudioDeviceTest;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

os_log_t ___Z26AVAudioDeviceTestClientLogv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.avfaudio", "avat");
  *v0 = result;
  AVAudioDeviceTestClientLog(void)::category = (uint64_t)v0;
  return result;
}

void sub_19B788F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19B7891A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19B7894D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B789614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7897EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10A0C40A8DF87D0);
  _Unwind_Resume(a1);
}

uint64_t AVAudioConverterImpl::FillComplexProc(AVAudioConverterImpl *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  AudioStreamPacketDescription *v9;

  if (!*((_BYTE *)a5 + 64))
  {
    v9 = a5[6];
    if (v9)

    a5[6] = (AudioStreamPacketDescription *)((uint64_t (*)(void))a5[7][1].mStartOffset)();
    *((_BYTE *)a5 + 64) = 1;
    a5[6] = 0;
  }
  *(_DWORD *)a2 = 0;
  return 0;
}

uint64_t AVAudioConverterImpl::getInt32List(AudioConverterRef *this, AudioConverterPropertyID a2, int a3)
{
  unsigned int *v6;
  uint64_t v7;
  UInt32 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  Boolean outWritable;
  UInt32 outSize;

  outSize = 0;
  outWritable = 0;
  if (AudioConverterGetPropertyInfo(*this, a2, &outSize, &outWritable))
    return 0;
  v6 = (unsigned int *)malloc_type_calloc(1uLL, outSize, 0xB0FF10F4uLL);
  if (AudioConverterGetProperty(*this, a2, &outSize, v6))
  {
    free(v6);
    return 0;
  }
  v9 = outSize >> 2;
  LODWORD(v28) = outSize >> 2;
  HIDWORD(v28) = outSize;
  v10 = 0;
  if (outSize >= 4)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if (v9 <= 1)
      v15 = 1;
    else
      v15 = v9;
    do
    {
      if (a3)
        v16 = v6[v14];
      else
        v16 = (int)v6[v14];
      v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v16, v28);
      v18 = v17;
      if ((unint64_t)v12 >= v13)
      {
        v19 = v12 - v10;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v13 - (_QWORD)v10) >> 2 > v20)
          v20 = (uint64_t)(v13 - (_QWORD)v10) >> 2;
        if (v13 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
        else
          v22 = 0;
        v23 = (uint64_t *)(v21 + 8 * v19);
        *v23 = v18;
        v11 = v23 + 1;
        while (v12 != v10)
        {
          v24 = *--v12;
          *--v23 = v24;
        }
        v13 = v21 + 8 * v22;
        if (v10)
          operator delete(v10);
        v10 = v23;
      }
      else
      {
        *v12 = v17;
        v11 = v12 + 1;
      }
      ++v14;
      v12 = v11;
    }
    while (v14 != v15);
  }
  else
  {
    v11 = 0;
  }
  free(v6);
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v10, v11 - v10);
  if (HIDWORD(v28) >= 4)
  {
    v25 = 0;
    v26 = v28;
    if (v28 <= 1)
      v26 = 1;
    v27 = 8 * v26;
    do
    {

      v25 += 8;
    }
    while (v27 != v25);
  }
  else if (!v10)
  {
    return v7;
  }
  operator delete(v10);
  return v7;
}

void sub_19B78AB9C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AVAudioConverterImpl::getRateList(AudioConverterRef *this, AudioConverterPropertyID a2, int a3)
{
  void *v6;
  uint64_t v7;
  UInt32 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  UInt32 v28;
  UInt32 v29;
  Boolean outWritable;
  UInt32 outSize;

  outSize = 0;
  outWritable = 0;
  if (AudioConverterGetPropertyInfo(*this, a2, &outSize, &outWritable))
    return 0;
  v6 = malloc_type_calloc(1uLL, outSize, 0x88D87671uLL);
  if (AudioConverterGetProperty(*this, a2, &outSize, v6))
  {
    free(v6);
    return 0;
  }
  v9 = outSize >> 4;
  v28 = outSize >> 4;
  v29 = outSize;
  v10 = 0;
  if (outSize >= 0x10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if (v9 <= 1)
      v15 = 1;
    else
      v15 = v9;
    do
    {
      v16 = *((double *)v6 + 2 * v14);
      if (a3)
        v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
      else
        v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", (uint64_t)v16);
      v18 = v17;
      if ((unint64_t)v12 >= v13)
      {
        v19 = v12 - v10;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v13 - (_QWORD)v10) >> 2 > v20)
          v20 = (uint64_t)(v13 - (_QWORD)v10) >> 2;
        if (v13 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
        else
          v22 = 0;
        v23 = (uint64_t *)(v21 + 8 * v19);
        *v23 = v18;
        v11 = v23 + 1;
        while (v12 != v10)
        {
          v24 = *--v12;
          *--v23 = v24;
        }
        v13 = v21 + 8 * v22;
        if (v10)
          operator delete(v10);
        v10 = v23;
      }
      else
      {
        *v12 = v17;
        v11 = v12 + 1;
      }
      ++v14;
      v12 = v11;
    }
    while (v14 != v15);
  }
  else
  {
    v11 = 0;
  }
  free(v6);
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v10, v11 - v10);
  if (v29 >= 0x10)
  {
    v25 = 0;
    v26 = v28;
    if (v28 <= 1)
      v26 = 1;
    v27 = 8 * v26;
    do
    {

      v25 += 8;
    }
    while (v27 != v25);
  }
  else if (!v10)
  {
    return v7;
  }
  operator delete(v10);
  return v7;
}

void sub_19B78AFD4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void CACFDictionary::AddBool(__CFDictionary **this, const __CFString *key)
{
  const void *v4;
  __CFDictionary *v5;
  BOOL v6;
  const void *v7;
  char v8;

  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v7 = v4;
  v8 = 1;
  if (v4)
    CFRetain(v4);
  if (*((_BYTE *)this + 9))
  {
    v5 = *this;
    if (v4)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
      CFDictionarySetValue(v5, key, v4);
  }
  CACFBoolean::~CACFBoolean((CACFBoolean *)&v7);
}

void sub_19B78B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFBoolean::~CACFBoolean((CACFBoolean *)&a9);
  _Unwind_Resume(a1);
}

void CACFBoolean::~CACFBoolean(CACFBoolean *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void CACFDictionary::AddUInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  char v7;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = v5;
  v7 = 1;
  if (*((_BYTE *)this + 9) && v5 && *this)
    CFDictionarySetValue(*this, a2, v5);
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_19B78B170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void CACFDictionary::AddFloat32(CFMutableDictionaryRef *this, const __CFString *a2, float a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  char v7;
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v6 = v5;
  v7 = 1;
  if (*((_BYTE *)this + 9) && v5 && *this)
    CFDictionarySetValue(*this, a2, v5);
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_19B78B1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void sub_19B78BB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19B78BDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_19B78C1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19B78C378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B78C514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19B78C5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B78C640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B78D228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19B78D62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_19B78D9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19B78E2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B78E4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B78E660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B78E78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B78E8F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void sub_19B78F00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19B78F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_19B78F458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v2;

  if ((v2 & 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_19B78F5F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19B78F72C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F1C40976EDA9DLL);
  _Unwind_Resume(a1);
}

void AVAudioStereoMixingImpl::~AVAudioStereoMixingImpl(AVAudioStereoMixingImpl *this)
{
  *(_QWORD *)this = &off_1E3BE8CE8;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
}

{
  *(_QWORD *)this = &off_1E3BE8CE8;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  JUMPOUT(0x1A1AC5BD4);
}

BOOL AVAudioStereoMixingImpl::IsConnectedToMixer(AVAudioNode **this, AVAudioNode *a2, int a3)
{
  return this[9] == a2 && *((_DWORD *)this + 16) == a3;
}

AVAudioConnectionPoint *AVAudioStereoMixingImpl::GetMixerConnectionPoint(id *this)
{
  uint64_t v2;

  v2 = objc_msgSend(this[9], "impl");
  return +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", this[9], (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 248))(v2, *((unsigned int *)this + 16)));
}

uint64_t AVAudioStereoMixingImpl::SetGain(AVAudioStereoMixingImpl *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (fabsf(a2) == INFINITY)
    a2 = 0.0;
  if (*((float *)this + 4) == a2)
    return 0;
  v2 = 100000.0;
  if (a2 < 100000.0)
    v2 = a2;
  if (a2 <= 0.0)
    v3 = 0.0;
  else
    v3 = v2;
  *((float *)this + 4) = v3;
  v4 = *((unsigned int *)this + 16);
  v5 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 128))(v5, 0, 1, v4, v3);
}

uint64_t AVAudioStereoMixingImpl::SetPan(AVAudioStereoMixingImpl *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (fabsf(a2) == INFINITY)
    a2 = -1.0;
  if (*((float *)this + 5) == a2)
    return 0;
  v2 = 1.0;
  if (a2 < 1.0)
    v2 = a2;
  if (a2 <= -1.0)
    v3 = -1.0;
  else
    v3 = v2;
  *((float *)this + 5) = v3;
  v4 = *((unsigned int *)this + 16);
  v5 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 128))(v5, 2, 1, v4, v3);
}

uint64_t AUGraphNodeBase::GetNodeForBus(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a1 + 48;
  v4 = 72;
  if (a2 == 1)
    v4 = 48;
  else
    v3 = a1 + 72;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(a1 + v4);
  v7 = (v5 - v6) >> 3;
  if ((int)v7 <= (int)a3)
    return 0;
  if (v7 <= a3)
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v6 + 8 * a3);
}

uint64_t AUGraphNodeBase::GetConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)a2 == 1)
  {
    *(_QWORD *)(a4 + 16) = v8;
    v9 = (_DWORD *)(a4 + 24);
  }
  else
  {
    *(_QWORD *)a4 = v8;
    v9 = (_DWORD *)(a4 + 8);
  }
  *v9 = a3;
  v11 = 0;
  v12 = -1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2, a3, &v11);
  if ((_DWORD)result)
  {
    if ((_DWORD)a2 == 1)
    {
      *(_QWORD *)a4 = v11;
      *(_DWORD *)(a4 + 8) = v12;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = v11;
      *(_DWORD *)(a4 + 24) = v12;
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::GetConnectionPoint(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  *a4 = 0;
  a4[1] = 0;
  v4 = a1 + 48;
  v5 = 48;
  if (a2 != 1)
  {
    v5 = 72;
    v4 = a1 + 72;
  }
  if (*(_QWORD *)(a1 + v5) == *(_QWORD *)(v4 + 8))
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (result)
  {
    v11 = result;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v14 = a3;
    v12 = -1;
    result = (*(uint64_t (**)(uint64_t, BOOL, uint64_t *, int *))(*(_QWORD *)v11 + 48))(v11, a2 != 1, &v13, &v12);
    if ((_DWORD)result)
    {
      *a4 = v11;
      *((_DWORD *)a4 + 2) = v12;
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::GetBusForConnectionPoint(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;

  *a4 = -1;
  v4 = a1 + 72;
  v5 = 72;
  if (a2 == 1)
  {
    v5 = 48;
    v4 = a1 + 48;
  }
  v6 = *(char **)(a1 + v5);
  v7 = *(char **)(v4 + 8);
  if (v6 == v7)
    return 0;
  v8 = *(char **)(a1 + v5);
  while (*(_QWORD *)v8 != *a3)
  {
    v8 += 8;
    if (v8 == v7)
    {
      v8 = v7;
      break;
    }
  }
  if (v8 == v7)
    return 0;
  *a4 = (unint64_t)(v8 - v6) >> 3;
  return 1;
}

void AUGraphNodeBase::AddNode(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  NSObject *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v25 = "AVAEInternal.h";
      v26 = 1024;
      v27 = 71;
      v28 = 2080;
      v29 = "AVAEGraphNode.mm";
      v30 = 1024;
      v31 = 386;
      v32 = 2080;
      v33 = "AddNode";
      v34 = 2080;
      v35 = "inNode != nil";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inNode != nil");
  }
  v9 = a2 == 1;
  if (a2 == 1)
    v10 = 48;
  else
    v10 = 72;
  if (v9)
    v11 = a1 + 48;
  else
    v11 = a1 + 72;
  v12 = *(_QWORD **)(v11 + 8);
  v13 = *(_QWORD *)(a1 + v10);
  for (i = ((uint64_t)v12 - v13) >> 3; (int)i <= (int)a3; i = ((uint64_t)v12 - v13) >> 3)
  {
    v15 = *(_QWORD *)(v11 + 16);
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 61)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v16 = v15 - v13;
      v17 = v16 >> 2;
      if (v16 >> 2 <= i + 1)
        v17 = i + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v18);
      else
        v19 = 0;
      v20 = (_QWORD *)(v18 + 8 * i);
      *v20 = 0;
      v12 = v20 + 1;
      v21 = *(char **)(v11 + 8);
      v22 = *(char **)(a1 + v10);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v20 = v23;
        }
        while (v21 != v22);
        v21 = *(char **)(a1 + v10);
      }
      *(_QWORD *)(a1 + v10) = v20;
      *(_QWORD *)(v11 + 8) = v12;
      *(_QWORD *)(v11 + 16) = v18 + 8 * v19;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12++ = 0;
    }
    *(_QWORD *)(v11 + 8) = v12;
    v13 = *(_QWORD *)(a1 + v10);
  }
  if (i <= a3)
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v13 + 8 * a3) = a4;
}

uint64_t AUGraphNodeBase::DisconnectNode(uint64_t result, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v7 = result;
  v29 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v18 = "AVAEInternal.h";
      v19 = 1024;
      v20 = 71;
      v21 = 2080;
      v22 = "AVAEGraphNode.mm";
      v23 = 1024;
      v24 = 411;
      v25 = 2080;
      v26 = "DisconnectNode";
      v27 = 2080;
      v28 = "inNode != nil";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inNode != nil");
  }
  v9 = v7 + 48;
  v10 = 72;
  if (a2 == 1)
    v10 = 48;
  else
    v9 = v7 + 72;
  v11 = *(_QWORD *)(v7 + v10);
  v12 = *(_QWORD *)(v9 + 8);
  if (v11 != v12 && a3 < (unint64_t)((v12 - v11) >> 3) && *(_QWORD *)(v11 + 8 * a3) == a4)
  {
    *(_QWORD *)(v11 + 8 * a3) = 0;
    v13 = *(_QWORD **)(v7 + v10);
    v14 = *(_QWORD **)(v9 + 8);
    if (v13 != v14)
    {
      v15 = v14 - 1;
      do
      {
        if (*v15)
          break;
        *(_QWORD *)(v9 + 8) = v15;
      }
      while (v15-- != v13);
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::DisconnectNode(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = result + 48;
  v4 = 72;
  if (a2 == 1)
    v4 = 48;
  else
    v3 = result + 72;
  v5 = *(_QWORD *)(result + v4);
  v6 = *(_QWORD *)(v3 + 8);
  if (v5 != v6 && a3 < (unint64_t)((v6 - v5) >> 3))
  {
    *(_QWORD *)(v5 + 8 * a3) = 0;
    v7 = *(_QWORD **)(result + v4);
    v8 = *(_QWORD **)(v3 + 8);
    if (v7 != v8)
    {
      v9 = v8 - 1;
      do
      {
        if (*v9)
          break;
        *(_QWORD *)(v3 + 8) = v9;
      }
      while (v9-- != v7);
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::CreateRecordingTap(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  NSObject *v10;
  NSObject *v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v20 = "AVAEInternal.h";
      v21 = 1024;
      v22 = 71;
      v23 = 2080;
      v24 = "AVAEGraphNode.mm";
      v25 = 1024;
      v26 = 451;
      v27 = 2080;
      v28 = "CreateRecordingTap";
      v29 = 2080;
      v30 = "nil != callbackBlock";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != callbackBlock");
  }
  if (*(_QWORD *)(a1 + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v20 = "AVAEInternal.h";
      v21 = 1024;
      v22 = 71;
      v23 = 2080;
      v24 = "AVAEGraphNode.mm";
      v25 = 1024;
      v26 = 454;
      v27 = 2080;
      v28 = "CreateRecordingTap";
      v29 = 2080;
      v30 = "nullptr == Tap()";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr == Tap()");
  }
  if (a4)
  {
    objc_msgSend(a4, "sampleRate");
    if (v12 <= 0.0 || !objc_msgSend(a4, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v20 = "AVAEInternal.h";
        v21 = 1024;
        v22 = 71;
        v23 = 2080;
        v24 = "AVAEGraphNode.mm";
        v25 = 1024;
        v26 = 457;
        v27 = 2080;
        v28 = "CreateRecordingTap";
        v29 = 2080;
        v30 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t, void *))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), a2, a4) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v20 = "AVAEInternal.h";
        v21 = 1024;
        v22 = 71;
        v23 = 2080;
        v24 = "AVAEGraphNode.mm";
        v25 = 1024;
        v26 = 458;
        v27 = 2080;
        v28 = "CreateRecordingTap";
        v29 = 2080;
        v30 = "NodeImpl()->SetOutputFormat(bus, format)";
        _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "NodeImpl()->SetOutputFormat(bus, format)");
    }
  }
  v15 = operator new();
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 240))(*(_QWORD *)(a1 + 24), a2);
  result = AVAudioNodeTap::AVAudioNodeTap(v15, v16, v17, a3, a5);
  *(_QWORD *)(a1 + 8) = v15;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 48))
    return AVAudioNodeTap::Initialize(v15);
  return result;
}

void sub_19B790568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F0C402021B9A6);
  _Unwind_Resume(a1);
}

void AUGraphNodeBase::DestroyRecordingTap(AUGraphNodeBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 1) = 0;
    __dmb(0xBu);
    AVAudioNodeTap::Uninitialize(v1);
    *(_BYTE *)(v1 + 54) = 1;
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (_BYTE *)(v1 + 1168));
  }
}

uint64_t AUGraphNodeBase::Initialize(AUGraphNodeBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (!(_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      AVAudioNodeTap::Initialize(v4);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
  }
  return v3;
}

uint64_t AUGraphNodeBase::Uninitialize(AUGraphNodeBase *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    AVAudioNodeTap::Uninitialize(v2);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 336))(*((_QWORD *)this + 3));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
}

uint64_t AUGraphNodeBase::SetManualRenderingMode(AUGraphNodeBase *this, uint64_t a2, AVAudioEngineManualRenderingMode a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, AVAudioEngineManualRenderingMode))(**((_QWORD **)this + 3) + 288))(*((_QWORD *)this + 3), a2, a3);
}

uint64_t AUGraphNodeBase::NodeWillStart(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 52))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v6 = "AVAEInternal.h";
        v7 = 1024;
        v8 = 71;
        v9 = 2080;
        v10 = "AVAudioNodeTap.mm";
        v11 = 1024;
        v12 = 129;
        v13 = 2080;
        v14 = "Start";
        v15 = 2080;
        v16 = "_initialized";
        _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_initialized");
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 24);
    v3 = 0;
    *(_DWORD *)(v1 + 56) = 0;
    do
    {
      v4 = v1 + v3;
      *(_QWORD *)(v4 + 208) = 0;
      *(_QWORD *)(v4 + 216) = 0;
      *(_DWORD *)(v4 + 224) = 0;
      v3 += 24;
    }
    while (v3 != 768);
    *(_DWORD *)(v1 + 976) = 0;
    *(_BYTE *)(v1 + 980) = 1;
    *(_BYTE *)(v1 + 53) = 1;
    *(_BYTE *)(v1 + 1144) = 1;
    *(_DWORD *)(v1 + 1128) = 0;
    *(_QWORD *)(v1 + 1152) = 0;
    return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1 + 24);
  }
  return this;
}

void sub_19B79084C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphNodeBase::NodeDidStop(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 52))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 24);
      *(_DWORD *)(v1 + 56) = 1;
      return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1 + 24);
    }
  }
  return this;
}

uint64_t AUGraphNodeBase::StartIO(AUGraphNodeBase *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288))(v1);
}

uint64_t AUGraphNodeBase::StopIO(AUGraphNodeBase *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 296))(v1);
}

uint64_t AUGraphNodeBase::GetAUMaxFramesPerSlice(AUGraphNodeBase *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
}

uint64_t AUGraphNodeBase::SetAUMaxFramesPerSlice(AUGraphNodeBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 160))(v3, a2);
}

uint64_t AUGraphNodeBase::ConnectInput(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)a4;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v9 = (_QWORD **)v8;
  v10 = *(unsigned int *)(a4 + 8);
  if (a2)
  {
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v15 = "AVAEInternal.h";
        v16 = 1024;
        v17 = 71;
        v18 = 2080;
        v19 = "AVAEGraphNode.mm";
        v20 = 1024;
        v21 = 227;
        v22 = 2080;
        v23 = "ConnectInput";
        v24 = 2080;
        v25 = "nullptr != srcNode";
        _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr != srcNode");
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD **, uint64_t))(*v7 + 56))(v7, 0, v10, v9, a3);
    ((void (*)(_QWORD **, uint64_t, uint64_t, _QWORD *, uint64_t))(*v9)[7])(v9, 1, a3, v7, v10);
    return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v9[3] + 272))(v9[3], a3, v7[3], v10);
  }
  else
  {
    v13 = *(_QWORD *)(v8 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 280))(v13, a3, v7[3], v10);
      ((void (*)(_QWORD **, uint64_t, uint64_t))(*v9)[9])(v9, 1, a3);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD **, uint64_t))(*v7 + 64))(v7, 0, v10, v9, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 280))(v13, a3, 0, v10);
      return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v9)[9])(v9, 1, a3);
    }
  }
}

uint64_t AUGraphNodeBase::AddRenderObserver(AUGraphNodeBase *this, const AURenderCallbackStruct *a2)
{
  return (*(uint64_t (**)(_QWORD, const AURenderCallbackStruct *))(**((_QWORD **)this + 3) + 168))(*((_QWORD *)this + 3), a2);
}

uint64_t AUGraphNodeBase::RemoveRenderObserver(AUGraphNodeBase *this, const AURenderCallbackStruct *a2)
{
  return (*(uint64_t (**)(_QWORD, const AURenderCallbackStruct *))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), a2);
}

uint64_t AUGraphNodeBaseV3::CreateRecordingTap(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  NSObject *v10;
  NSObject *v11;
  caulk::pooled_semaphore_mutex *v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v21 = "AVAEInternal.h";
      v22 = 1024;
      v23 = 71;
      v24 = 2080;
      v25 = "AVAEGraphNode.mm";
      v26 = 1024;
      v27 = 823;
      v28 = 2080;
      v29 = "CreateRecordingTap";
      v30 = 2080;
      v31 = "nil != callbackBlock";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != callbackBlock");
  }
  if (*(_QWORD *)(a1 + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v21 = "AVAEInternal.h";
      v22 = 1024;
      v23 = 71;
      v24 = 2080;
      v25 = "AVAEGraphNode.mm";
      v26 = 1024;
      v27 = 826;
      v28 = 2080;
      v29 = "CreateRecordingTap";
      v30 = 2080;
      v31 = "nullptr == Tap()";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr == Tap()");
  }
  v12 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  caulk::pooled_semaphore_mutex::_lock(v12);
  if (a4)
  {
    objc_msgSend(a4, "sampleRate");
    if (v13 <= 0.0 || !objc_msgSend(a4, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v21 = "AVAEInternal.h";
        v22 = 1024;
        v23 = 71;
        v24 = 2080;
        v25 = "AVAEGraphNode.mm";
        v26 = 1024;
        v27 = 832;
        v28 = 2080;
        v29 = "CreateRecordingTap";
        v30 = 2080;
        v31 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t, void *))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), a2, a4) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v21 = "AVAEInternal.h";
        v22 = 1024;
        v23 = 71;
        v24 = 2080;
        v25 = "AVAEGraphNode.mm";
        v26 = 1024;
        v27 = 833;
        v28 = 2080;
        v29 = "CreateRecordingTap";
        v30 = 2080;
        v31 = "NodeImpl()->SetOutputFormat(bus, format)";
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "NodeImpl()->SetOutputFormat(bus, format)");
    }
  }
  v16 = operator new();
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 240))(*(_QWORD *)(a1 + 24), a2);
  AVAudioNodeTap::AVAudioNodeTap(v16, v17, v18, a3, a5);
  *(_QWORD *)(a1 + 8) = v16;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 48))
    AVAudioNodeTap::Initialize(v16);
  return caulk::pooled_semaphore_mutex::_unlock(v12);
}

void sub_19B791128(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AUGraphNodeBaseV3::DestroyRecordingTap(AUGraphNodeBaseV3 *this)
{
  uint64_t v1;
  caulk::pooled_semaphore_mutex *v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(AUGraphNodeBaseV3 *))(*(_QWORD *)this + 296))(this);
    caulk::pooled_semaphore_mutex::_lock(v3);
    *((_QWORD *)this + 1) = 0;
    caulk::pooled_semaphore_mutex::_unlock(v3);
    AVAudioNodeTap::Uninitialize(v1);
    *(_BYTE *)(v1 + 54) = 1;
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (_BYTE *)(v1 + 1168));
  }
}

uint64_t AUGraphNodeBaseV3::ConnectInput(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  caulk::pooled_semaphore_mutex *v8;
  caulk::pooled_semaphore_mutex *v9;

  v8 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, a3, 1);
  if (*a4)
  {
    v9 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 296))(*a4);
    std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(v9, v8);
    if (a2)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    AUGraphNodeBase::ConnectInput(a1, a2, a3, (uint64_t)a4);
    caulk::pooled_semaphore_mutex::_unlock(v8);
    return caulk::pooled_semaphore_mutex::_unlock(v9);
  }
  else
  {
    caulk::pooled_semaphore_mutex::_lock(v8);
    if (a2)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    AUGraphNodeBase::ConnectInput(a1, a2, a3, (uint64_t)a4);
    return caulk::pooled_semaphore_mutex::_unlock(v8);
  }
}

void sub_19B7912E0(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

const void ***AUGraphNodeBaseV3::AllocateInputBlock(const void ***this)
{
  const void ***result;
  const void **v3;
  _QWORD aBlock[5];

  result = (const void ***)((uint64_t (*)(const void ***))(*this)[39])(this);
  if (!result)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN17AUGraphNodeBaseV318AllocateInputBlockEv_block_invoke;
    aBlock[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    aBlock[4] = this;
    v3 = (const void **)operator new();
    *v3 = 0;
    AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v3, aBlock);
    return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 15, v3);
  }
  return result;
}

void sub_19B7913B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t AUGraphNodeBaseV3::CreateMIDIConnection(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  caulk::pooled_semaphore_mutex *v7;
  caulk::pooled_semaphore_mutex *v8;
  caulk::pooled_semaphore_mutex *v9;
  caulk::pooled_semaphore_mutex *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  _BYTE buf[12];
  __int16 v30;
  int v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (!v4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v30 = 1024;
      v31 = 71;
      v32 = 2080;
      v33 = "AVAEGraphNode.mm";
      v34 = 1024;
      v35 = 934;
      v36 = 2080;
      v37 = "CreateMIDIConnection";
      v38 = 2080;
      v39 = "midiSrc != nullptr";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "midiSrc != nullptr");
  }
  v7 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*v4 + 296))(v4);
  v8 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*a1 + 296))(a1);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(v7, v8);
  v9 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*v4 + 296))(v4);
  v10 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*a1 + 296))(a1);
  a1[14] = v4;
  if (v5)
  {
    v11 = (uint64_t *)v4[16];
    v12 = (uint64_t *)v4[17];
    v13 = v11;
    if (v11 != v12)
    {
      while (*v13 != v5)
      {
        if (++v13 == v12)
        {
          v13 = (uint64_t *)v4[17];
          break;
        }
      }
    }
    if (v13 == v12)
    {
      v14 = v4[18];
      if ((unint64_t)v12 >= v14)
      {
        v16 = v12 - v11;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        v17 = v14 - (_QWORD)v11;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v19);
        else
          v20 = 0;
        v21 = (uint64_t *)(v19 + 8 * v16);
        v22 = v19 + 8 * v20;
        *v21 = v5;
        v15 = v21 + 1;
        v24 = (char *)v4[16];
        v23 = (char *)v4[17];
        if (v23 != v24)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v21 = v25;
          }
          while (v23 != v24);
          v23 = (char *)v4[16];
        }
        v4[16] = v21;
        v4[17] = v15;
        v4[18] = v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v12 = v5;
        v15 = v12 + 1;
      }
      v4[17] = v15;
      v4 = (_QWORD *)a1[14];
    }
  }
  v28 = v4;
  v26 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v26 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_QWORD *)buf = &v28;
  ((void (*)(_BYTE *, uint64_t))off_1E3BEB978[v26])(buf, a2 + 16);
  caulk::pooled_semaphore_mutex::_unlock(v10);
  return caulk::pooled_semaphore_mutex::_unlock(v9);
}

void sub_19B7916D4(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;
  caulk::pooled_semaphore_mutex *v2;

  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphNodeBaseV3::DestroyMIDIConnection(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  caulk::pooled_semaphore_mutex *v5;
  caulk::pooled_semaphore_mutex *v6;
  caulk::pooled_semaphore_mutex *v7;
  caulk::pooled_semaphore_mutex *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  const void ***v16;
  _QWORD *v17;
  _QWORD *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*v3 + 296))(v3);
  v6 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*a1 + 296))(a1);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(v5, v6);
  v7 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*v3 + 296))(v3);
  v8 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD *))(*a1 + 296))(a1);
  if (v3 != (_QWORD *)a1[14])
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v20 = "AVAEInternal.h";
      v21 = 1024;
      v22 = 71;
      v23 = 2080;
      v24 = "AVAEGraphNode.mm";
      v25 = 1024;
      v26 = 967;
      v27 = 2080;
      v28 = "DestroyMIDIConnection";
      v29 = 2080;
      v30 = "midiSrc == MIDIInput()";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "midiSrc == MIDIInput()");
    v3 = (_QWORD *)a1[14];
  }
  if (v4)
  {
    v10 = (_QWORD *)v3[17];
    v11 = (_QWORD *)v3[16];
    if (v11 != v10)
    {
      while (*v11 != v4)
      {
        if (++v11 == v10)
        {
          v11 = (_QWORD *)v3[17];
          break;
        }
      }
    }
    if (v11 != v10)
    {
      v12 = v11 + 1;
      if (v11 + 1 != v10)
      {
        do
        {
          if (*v12 != v4)
            *v11++ = *v12;
          ++v12;
        }
        while (v12 != v10);
        v10 = (_QWORD *)v3[17];
      }
    }
    if (v10 != v11)
      v3[17] = v11;
  }
  v13 = a1[14];
  if (*(_QWORD *)(v13 + 128) == *(_QWORD *)(v13 + 136))
  {
    v15 = *(_QWORD **)(v13 + 176);
    if (v15 && *v15)
    {
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100]((const void ***)(v13 + 176), 0);
      v13 = a1[14];
    }
    v18 = *(_QWORD **)(v13 + 184);
    v16 = (const void ***)(v13 + 184);
    v17 = v18;
    if (v18 && *v17)
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v16, 0);
  }
  a1[14] = 0;
  caulk::pooled_semaphore_mutex::_unlock(v8);
  return caulk::pooled_semaphore_mutex::_unlock(v7);
}

void sub_19B7919E4(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;
  caulk::pooled_semaphore_mutex *v2;

  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

const void ***AUGraphNodeBaseV3::DeallocateInputBlock(const void ***this)
{
  return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 15, 0);
}

uint64_t std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(caulk::pooled_semaphore_mutex *this, caulk::pooled_semaphore_mutex *a2)
{
  caulk::pooled_semaphore_mutex *v5;
  char v6;

  while (1)
  {
    v5 = this;
    v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(this);
    if ((caulk::pooled_semaphore_mutex::try_lock(a2) & 1) != 0)
      break;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
    v5 = a2;
    v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(a2);
    if ((caulk::pooled_semaphore_mutex::try_lock(this) & 1) != 0)
      break;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
  }
  v5 = 0;
  v6 = 0;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_19B791ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
}

const void ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AUGraphNodeBaseV3::CreateMIDIConnection(AUGraphMIDIConnection const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int({block_pointer})(long long,unsigned char,long,unsigned char const*),int({block_pointer})(long long,unsigned char,MIDIEventList const*)> const&>(uint64_t **a1, const void **a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const void ***v6;
  _QWORD *v7;
  const void **v8;
  NSObject *v9;
  const void ***result;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *a2;
  v7 = *(_QWORD **)(v3 + 176);
  v6 = (const void ***)(v3 + 176);
  v5 = v7;
  if (v7)
    v5 = (_QWORD *)*v5;
  if (v5 != v4)
  {
    if (v4)
    {
      v8 = (const void **)operator new();
      *v8 = 0;
      *v8 = _Block_copy(v4);
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v6, v8);
      if (!*v6 || !**v6)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v12 = "AVAEInternal.h";
          v13 = 1024;
          v14 = 71;
          v15 = 2080;
          v16 = "AVAEGraphNode.mm";
          v17 = 1024;
          v18 = 1225;
          v19 = 2080;
          v20 = "SetTapBlock";
          v21 = 2080;
          v22 = "GetTapBlock()";
          _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetTapBlock()");
      }
    }
    else
    {
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v6, 0);
    }
  }
  result = (const void ***)(*v2 + 184);
  if (*result)
  {
    if (**result)
      return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](result, 0);
  }
  return result;
}

void sub_19B791DCC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

const void ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AUGraphNodeBaseV3::CreateMIDIConnection(AUGraphMIDIConnection const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int({block_pointer})(long long,unsigned char,long,unsigned char const*),int({block_pointer})(long long,unsigned char,MIDIEventList const*)> const&>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  const void ***result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void ***v9;
  _QWORD *v10;
  const void **v11;
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  result = (const void ***)(v4 + 176);
  v6 = *(_QWORD **)(v4 + 176);
  if (v6 && *v6)
  {
    result = std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](result, 0);
    v4 = *v3;
  }
  v7 = *a2;
  v10 = *(_QWORD **)(v4 + 184);
  v9 = (const void ***)(v4 + 184);
  v8 = v10;
  if (v10)
    v8 = (_QWORD *)*v8;
  if (v8 != v7)
  {
    if (v7)
    {
      v11 = (const void **)operator new();
      *v11 = 0;
      AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v11, v7);
      result = std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v9, v11);
      if (!*v9 || !**v9)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v14 = "AVAEInternal.h";
          v15 = 1024;
          v16 = 71;
          v17 = 2080;
          v18 = "AVAEGraphNode.mm";
          v19 = 1024;
          v20 = 1238;
          v21 = 2080;
          v22 = "SetTapBlockEventList";
          v23 = 2080;
          v24 = "GetTapBlockEventList()";
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        return (const void ***)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "GetTapBlockEventList()");
      }
    }
    else
    {
      return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v9, 0);
    }
  }
  return result;
}

void sub_19B791FFC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN17AUGraphNodeBaseV318AllocateInputBlockEv_block_invoke(uint64_t a1, unsigned int *a2, AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v12;
  uint64_t v13;
  AUGraphMIDINodeV3 *v14;
  uint64_t v15;
  uint64_t v16;
  AudioBufferList *v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  int v24;
  caulk::pooled_semaphore_mutex *v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  caulk::pooled_semaphore_mutex *v29;
  char v30;

  v29 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32)
                                                                                            + 288))(*(_QWORD *)(a1 + 32), a5, 0);
  v30 = caulk::pooled_semaphore_mutex::try_lock(v29);
  if ((v30 & 1) == 0)
  {
    v21 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 160);
    v18 = 4294956433;
LABEL_12:
    atomic_store(v18, v21);
    goto LABEL_18;
  }
  v27 = 0;
  v28 = -1;
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), 1, a5, &v27) & 1) == 0)
  {
    v21 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 160);
    v18 = 4294956420;
    goto LABEL_12;
  }
  v12 = v27;
  v13 = v28;
  v25 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 296))(v27);
  v26 = caulk::pooled_semaphore_mutex::try_lock(v25);
  if ((v26 & 1) != 0)
  {
    v14 = *(AUGraphMIDINodeV3 **)(v12 + 112);
    if (v14)
      AUGraphMIDINodeV3::RenderMIDI(v14, a2, a3, a4, v13, a6);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 304))(v12);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 312))(v12);
    v18 = (*(uint64_t (**)(uint64_t, unsigned int *, AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *, uint64_t))(v15 + 16))(v15, a2, a3, a4, v13, a6, v16);
    atomic_store(v18, (unsigned int *)(v12 + 160));
    if (!(_DWORD)v18)
    {
      v19 = *(unsigned int **)(v12 + 8);
      if (v19)
      {
        if (a2)
          v20 = *a2 | 8;
        else
          v20 = 8;
        v24 = v20;
        AVAudioNodeTap::RenderCallback((AVAudioNodeTap *)v19, &v24, (unsigned int *)a3, (const AudioTimeStamp *)v19[2], a4, a6, v17);
      }
      v18 = 0;
    }
  }
  else
  {
    v22 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 160);
    v18 = 4294956433;
    atomic_store(0xFFFFD591, v22);
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v25);
LABEL_18:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v29);
  return v18;
}

void sub_19B7921F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphMIDINodeV3::RenderMIDI(AUGraphMIDINodeV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  AUGraphMIDINodeV3 *v12;
  uint64_t result;
  UInt64 mHostTime;
  uint64_t v15;

  v12 = (AUGraphMIDINodeV3 *)*((_QWORD *)this + 14);
  if (!v12 || (result = AUGraphMIDINodeV3::RenderMIDI(v12, a2, a3, a4, a5, a6), !(_DWORD)result))
  {
    mHostTime = a3->mHostTime;
    if (*((_QWORD *)this + 21) == mHostTime)
    {
      return 0;
    }
    else
    {
      v15 = (*(uint64_t (**)(AUGraphMIDINodeV3 *))(*(_QWORD *)this + 304))(this);
      result = (*(uint64_t (**)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *, _QWORD))(v15 + 16))(v15, a2, a3, a4, a5, a6, 0);
      *((_QWORD *)this + 21) = mHostTime;
    }
  }
  return result;
}

void AUGraphNodeIOV3::~AUGraphNodeIOV3(const void ***this)
{
  AUGraphNodeIOV3::~AUGraphNodeIOV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = (const void **)&off_1E3BE67A0;
  AUGraphNodeIOV3::DeallocateInputBlock((AUGraphNodeIOV3 *)this);
  ((void (*)(const void ***))(*this)[44])(this);
  std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](this + 22, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 21, 0);
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
}

BOOL AUGraphNodeIOV3::IsIONode(AUGraphNodeIOV3 *this)
{
  return *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3)) == 1635086197;
}

BOOL AUGraphNodeIOV3::IsVoiceIONode(AUGraphNodeIOV3 *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3));
  return *v1 == 1635086197 && v1[1] == 1987078511 && v1[2] == 1634758764;
}

uint64_t AUGraphNodeIOV3::CanChangeMaxFrames(AUGraphNodeIOV3 *this)
{
  return 0;
}

uint64_t AUGraphNodeIOV3::SetInputCallback(AUGraphNodeIOV3 *this, const AURenderCallbackStruct *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (a2->inputProc)
    return (*(uint64_t (**)(void))(v2 + 344))();
  else
    return (*(uint64_t (**)(void))(v2 + 352))();
}

uint64_t AUGraphNodeIOV3::AllocateInputBlock(const void ***this)
{
  uint64_t result;
  _QWORD v3[5];

  AUGraphNodeBaseV3::AllocateInputBlock(this);
  result = ((uint64_t (*)(const void ***))(*this)[41])(this);
  if (!result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZN15AUGraphNodeIOV318AllocateInputBlockEv_block_invoke;
    v3[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    v3[4] = this;
    return ((uint64_t (*)(const void ***, _QWORD *))(*this)[49])(this, v3);
  }
  return result;
}

uint64_t AUGraphNodeIOV3::OutputProvider(AUGraphNodeIOV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 21);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUGraphNodeIOV3::InputHandler(AUGraphNodeIOV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 22);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUGraphNodeIOV3::AllocateInputHandler(const void ***this, const AURenderCallbackStruct *a2)
{
  NSObject *v4;
  uint64_t result;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD aBlock[4];
  __int128 v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2->inputProc)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v12 = "AVAEInternal.h";
      v13 = 1024;
      v14 = 71;
      v15 = 2080;
      v16 = "AVAEGraphNode.mm";
      v17 = 1024;
      v18 = 1068;
      v19 = 2080;
      v20 = "AllocateInputHandler";
      v21 = 2080;
      v22 = "inRenderCallback.inputProc";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inRenderCallback.inputProc");
  }
  result = ((uint64_t (*)(const void ***))(*this)[42])(this);
  if (!result)
  {
    v10 = (__int128)*a2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN15AUGraphNodeIOV320AllocateInputHandlerERK22AURenderCallbackStruct_block_invoke;
    aBlock[3] = &__block_descriptor_48_e63_v36__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28l;
    v6 = (const void **)operator new();
    *v6 = 0;
    *v6 = _Block_copy(aBlock);
    std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](this + 22, v6);
    v7 = (*((uint64_t (**)(const void **))*this[3] + 5))(this[3]);
    v8 = ((uint64_t (*)(const void ***))(*this)[42])(this);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 352))(v7, v8);
  }
  return result;
}

void sub_19B792678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

const void ***AUGraphNodeIOV3::DeallocateInputHandler(AUGraphNodeIOV3 *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 352))(v2, 0);
  return std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100]((const void ***)this + 22, 0);
}

uint64_t AUGraphNodeIOV3::LastRenderError(AUGraphNodeIOV3 *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int v5;

  result = atomic_load((unsigned int *)this + 40);
  if (!(_DWORD)result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
    v5 = 0;
    v4 = 4;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, unsigned int *, int *))(*(_QWORD *)v3 + 240))(v3, 22, 0, 0, &v5, &v4);
    return v5;
  }
  return result;
}

const void ***AUGraphNodeIOV3::DeallocateInputBlock(AUGraphNodeIOV3 *this)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v3 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v6 = "AVAEInternal.h";
      v7 = 1024;
      v8 = 71;
      v9 = 2080;
      v10 = "AVAEGraphNode.mm";
      v11 = 1024;
      v12 = 1044;
      v13 = 2080;
      v14 = "DeallocateInputBlock";
      v15 = 2080;
      v16 = "false == AUI().IsRunning()";
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "false == AUI().IsRunning()");
  }
  (*(void (**)(AUGraphNodeIOV3 *, _QWORD))(*(_QWORD *)this + 392))(this, 0);
  return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 15, 0);
}

const void ***AUGraphNodeIOV3::SetOutputProvider(uint64_t a1, const void ***a2)
{
  const void ***result;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;

  result = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  if (result != a2)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 344))(v5, 0);
    if (a2)
    {
      v6 = (const void **)operator new();
      *v6 = 0;
      AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v6, a2);
      std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)(a1 + 168), v6);
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
      return (const void ***)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 344))(v7, v8);
    }
    else
    {
      return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)(a1 + 168), 0);
    }
  }
  return result;
}

void sub_19B7929CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

const void ***std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

uint64_t ___ZN15AUGraphNodeIOV320AllocateInputHandlerERK22AURenderCallbackStruct_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), a2, a3, a5, a4, 0);
}

uint64_t ___ZN15AUGraphNodeIOV318AllocateInputBlockEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 312))(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v11, a2, a3, a4, a5, a6);
}

void AUGraphNodeBaseV3::~AUGraphNodeBaseV3(const void ***this)
{
  const void ***v2;
  const void **v3;

  *this = (const void **)off_1E3BE7010;
  v2 = this + 13;
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](this + 13, 0);
  ((void (*)(const void ***))(*this)[48])(this);
  v3 = this[16];
  if (v3)
  {
    this[17] = v3;
    operator delete(v3);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 15, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](this + 12, 0);
  AUGraphNodeBase::~AUGraphNodeBase((AUGraphNodeBase *)this);
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void AUGraphNodeBase::~AUGraphNodeBase(AUGraphNodeBase *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E3BE6670;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 1) = 0;
    __dmb(0xBu);
    AVAudioNodeTap::Uninitialize(v2);
    *(_BYTE *)(v2 + 54) = 1;
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (_BYTE *)(v2 + 1168));
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

void AUGraphNodeGenericIOV3::~AUGraphNodeGenericIOV3(const void ***this)
{
  AUGraphNodeGenericIOV3::~AUGraphNodeGenericIOV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = (const void **)&off_1E3BE8948;
  AUGraphNodeGenericIOV3::SetManualRenderingInputBlock((uint64_t)this, 0);
  std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})>>::reset[abi:ne180100](this + 24, 0);
  AUGraphNodeIOV3::~AUGraphNodeIOV3(this);
}

uint64_t AUGraphNodeGenericIOV3::CanChangeMaxFrames(AUGraphNodeGenericIOV3 *this)
{
  return *((unsigned __int8 *)this + 184);
}

BOOL AUGraphNodeGenericIOV3::SetManualRenderingRenderCallback(uint64_t a1, void *a2, uint64_t a3)
{
  _BOOL8 result;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 184))
    return 0;
  if (objc_msgSend(a2, "isEqual:", (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), 0))&& (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1) == a3)
  {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1) != a3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, 0);
  if ((*(unsigned int (**)(_QWORD, _QWORD, void *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), 0, a2))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 416))(a1, a3);
    return 1;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  result = os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = 136315650;
    v9 = "AVAEGraphNode.mm";
    v10 = 1024;
    v11 = 1429;
    v12 = 2080;
    v13 = objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting manual rendering mode input PCM format on input node! %s", (uint8_t *)&v8, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t AUGraphNodeGenericIOV3::RenderToABL(AUGraphNodeGenericIOV3 *this, uint64_t a2, AudioBufferList *a3, uint64_t a4)
{
  uint64_t v6;
  double v8[7];
  int v9;
  int v10;

  if (!a3)
    return 4294967246;
  if (!a3->mNumberBuffers)
    return 4294967246;
  v10 = 0;
  v8[0] = (double)a4;
  v9 = 1;
  v6 = (*(uint64_t (**)(AUGraphNodeGenericIOV3 *))(*(_QWORD *)this + 328))(this);
  return (*(uint64_t (**)(uint64_t, int *, double *, uint64_t, _QWORD, AudioBufferList *))(v6 + 16))(v6, &v10, v8, a2, 0, a3);
}

uint64_t AUGraphNodeGenericIOV3::GetLastInputCallbackStatus(AUGraphNodeGenericIOV3 *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t AUGraphNodeGenericIOV3::AllocateInputBlock(const void ***this)
{
  uint64_t result;
  _QWORD v3[5];

  AUGraphNodeBaseV3::AllocateInputBlock(this);
  result = ((uint64_t (*)(const void ***))(*this)[41])(this);
  if (!result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZN22AUGraphNodeGenericIOV318AllocateInputBlockEv_block_invoke;
    v3[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    v3[4] = this;
    return ((uint64_t (*)(const void ***, _QWORD *))(*this)[49])(this, v3);
  }
  return result;
}

uint64_t AUGraphNodeGenericIOV3::ManualRenderingInputBlock(AUGraphNodeGenericIOV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUGraphNodeGenericIOV3::SetLastInputCallbackStatus(uint64_t this, AVAudioEngineManualRenderingStatus a2)
{
  *(_QWORD *)(this + 200) = a2;
  return this;
}

const void ***AUGraphNodeGenericIOV3::SetManualRenderingInputBlock(uint64_t a1, const void ***a2)
{
  const void ***result;
  const void **v5;
  _QWORD v6[2];

  result = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
  if (result != a2)
  {
    v6[0] = GenericInputNodeRenderCallback;
    v6[1] = a1;
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), 0, v6);
    result = std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})>>::reset[abi:ne180100]((const void ***)(a1 + 192), 0);
    if (a2)
    {
      v5 = (const void **)operator new();
      *v5 = 0;
      *v5 = _Block_copy(a2);
      std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})>>::reset[abi:ne180100]((const void ***)(a1 + 192), v5);
      return (const void ***)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 184))(*(_QWORD *)(a1 + 24), 0, v6);
    }
  }
  return result;
}

void sub_19B793060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t GenericInputNodeRenderCallback(unsigned int *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  void **p_mData;
  void **v13;
  unint64_t v14;
  void **v15;
  uint64_t result;

  (*(void (**)(unsigned int *, _QWORD, const AudioTimeStamp *))(*(_QWORD *)a1 + 408))(a1, 0, a3);
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 400))(a1))
  {
    v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 400))(a1);
    v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v9, a5);
    if (v10 && (v11 = *v10, (_DWORD)v11) && v10[3] == a6->mBuffers[0].mDataByteSize)
    {
      if ((_DWORD)v11 != a6->mNumberBuffers)
      {
        result = 4294967246;
        goto LABEL_14;
      }
      p_mData = &a6->mBuffers[0].mData;
      v13 = (void **)(v10 + 4);
      do
      {
        *p_mData = *v13;
        *(p_mData - 1) = *(v13 - 1);
        p_mData += 2;
        v13 += 2;
        --v11;
      }
      while (v11);
    }
    else
    {
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 408))(a1, 1);
      if (a6->mNumberBuffers)
      {
        v14 = 0;
        v15 = &a6->mBuffers[0].mData;
        do
        {
          bzero(*v15, *((unsigned int *)v15 - 1));
          ++v14;
          v15 += 2;
        }
        while (v14 < a6->mNumberBuffers);
      }
    }
    result = 0;
  }
  else
  {
    result = 4294956420;
  }
LABEL_14:
  atomic_store(result, a1 + 40);
  return result;
}

const void ***std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})(unsigned int)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

uint64_t ___ZN22AUGraphNodeGenericIOV318AllocateInputBlockEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v12 = *(unsigned int **)(a1 + 32);
  v13 = v12 + 40;
  v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 304))(v12);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 312))(*(_QWORD *)(a1 + 32));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(v14, a2, a3, a4, a5, a6, v15);
  atomic_store(result, v13);
  return result;
}

void AUGraphMIDINodeV3::~AUGraphMIDINodeV3(const void ***this)
{
  AUGraphMIDINodeV3::~AUGraphMIDINodeV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = (const void **)&off_1E3BE6E78;
  AUGraphMIDINodeV3::SetMIDIOutputEventListBlock(this, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](this + 23, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](this + 22, 0);
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
}

uint64_t AUGraphMIDINodeV3::Initialize(AUGraphMIDINodeV3 *this)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  const void **v5;
  void *v6;
  NSObject *v7;
  _QWORD v9[5];
  _BYTE buf[54];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if ((int)objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 304))(v2), "hostMIDIProtocol") <= 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v3 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1246;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "Initialize";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "AUI().GetHostMIDIProtocol() > 0";
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "AUI().GetHostMIDIProtocol() > 0");
  }
  if (MEMORY[0x1E0C9E580])
  {
    v4 = (_QWORD *)*((_QWORD *)this + 12);
    if (!v4 || !*v4)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke;
      v9[3] = &__block_descriptor_40_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
      v9[4] = this;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke_2;
      *(_QWORD *)&buf[24] = &unk_1E3BEB908;
      *(_QWORD *)&buf[32] = v9;
      *(_QWORD *)&buf[40] = this;
      AUGraphMIDINodeV3::SetMIDIOutputEventListBlock((const void ***)this, (const void **)buf);
    }
  }
  v5 = (const void **)operator new();
  v6 = (void *)objc_msgSend((id)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 232))(*((_QWORD *)this + 3)), "renderBlock");
  *v5 = 0;
  AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v5, v6);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100]((const void ***)this + 13, v5);
  if (!(*(uint64_t (**)(AUGraphMIDINodeV3 *))(*(_QWORD *)this + 304))(this))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1252;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "Initialize";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "RenderBlock()";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "RenderBlock()");
  }
  return AUGraphNodeBase::Initialize(this);
}

void sub_19B793640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t AUGraphMIDINodeV3::Uninitialize(AUGraphMIDINodeV3 *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = AUGraphNodeBase::Uninitialize(this);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if ((int)objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 304))(v3), "hostMIDIProtocol") <= 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v7 = "AVAEInternal.h";
      v8 = 1024;
      v9 = 71;
      v10 = 2080;
      v11 = "AVAEGraphNode.mm";
      v12 = 1024;
      v13 = 1261;
      v14 = 2080;
      v15 = "Uninitialize";
      v16 = 2080;
      v17 = "AUI().GetHostMIDIProtocol() > 0";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "AUI().GetHostMIDIProtocol() > 0");
  }
  AUGraphMIDINodeV3::SetMIDIOutputEventListBlock((const void ***)this, 0);
  return v2;
}

const void ***AUGraphMIDINodeV3::SetMIDIOutputEventListBlock(const void ***result, const void **a2)
{
  const void ***v3;
  const void **v4;
  const void ***v5;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  const void *v10;

  v3 = result;
  v5 = result + 12;
  v4 = result[12];
  if (v4)
    v4 = (const void **)*v4;
  if (v4 != a2)
  {
    v6 = (*((uint64_t (**)(const void **))*result[3] + 5))(result[3]);
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 304))(v6), "setMIDIOutputEventListBlock:", 0);
    if (a2)
    {
      v7 = (const void **)operator new();
      *v7 = 0;
      AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v7, a2);
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v5, v7);
      v8 = (*((uint64_t (**)(const void **))*v3[3] + 5))(v3[3]);
      v9 = v3[12];
      if (v9)
        v10 = *v9;
      else
        v10 = 0;
      return (const void ***)objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 304))(v8), "setMIDIOutputEventListBlock:", v10);
    }
    else
    {
      return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v5, 0);
    }
  }
  return result;
}

void sub_19B7938EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke(uint64_t a1, uint64_t a2, char a3, _DWORD *a4)
{
  void (**v5)();
  char v7;
  uint64_t v8;
  uint64_t (**v9)();
  __n128 v10;
  char *v11;
  void (**v12)();
  __n128 v13[3];
  void (**v14)(MIDI::MIDIPacketList_Deliverer *__hidden);
  void (**v15)();
  __n128 v16[3];
  _QWORD v17[97];

  v17[96] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a2;
  v9 = _ZN5caulk16inplace_functionIFvPKN4MIDI16LegacyPacketListEELm48ELm8ENS_23inplace_function_detail6vtableEE16k_wrapper_vtableIZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EE;
  v10.n128_u64[0] = a1 + 32;
  v10.n128_u64[1] = (unint64_t)&v8;
  v11 = &v7;
  v12 = (void (**)())_ZN5caulk16inplace_functionIFvPKN4MIDI16LegacyPacketListEELm48ELm8ENS_23inplace_function_detail6vtableEE16k_wrapper_vtableIZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EE;
  _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E_8__invokeESD_SD_(v13, &v10);
  v14 = &off_1E3BE9C00;
  v5 = v12;
  v12 = &caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::empty;
  v15 = v5;
  ((void (*)(__n128 *, __n128 *))v5[2])(v16, v13);
  bzero(v17, 0x300uLL);
  ((void (*)(__n128 *))v12[3])(v13);
  MIDI::MIDIPacketList_Deliverer::operator()((uint64_t)&v14, a4);
  v14 = &off_1E3BE9C00;
  ((void (*)(__n128 *))v15[3])(v16);
  ((void (*)(__n128 *))v9[3])(&v10);
  return 0;
}

void sub_19B793A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = *(_QWORD **)(a1 + 40);
  v9 = (uint64_t *)v8[16];
  v10 = (uint64_t *)v8[17];
  if (v9 != v10)
  {
    do
    {
      v11 = *v9++;
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 328))(v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v13, a2, a3, a4);
    }
    while (v9 != v10);
    v8 = *(_QWORD **)(a1 + 40);
  }
  v14 = (uint64_t *)v8[23];
  if (v14)
  {
    v15 = *v14;
    if (*v14)
      goto LABEL_9;
  }
  v16 = (_QWORD *)v8[22];
  if (v16 && *v16)
  {
    v15 = *(_QWORD *)(a1 + 32);
LABEL_9:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v15, a2, a3, a4);
  }
  return 0;
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  int v66;
  uint64_t __src[3];

  __src[1] = *MEMORY[0x1E0C80C00];
  v62 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(&v63, a1 + 16);
  v65 = 0;
  v64 = &v66;
  v53 = a2;
  if (*a2 == 2)
  {
    if (!a2[1])
      return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
    v25 = 0;
    v26 = (uint64_t)(a2 + 2);
    v49 = a1 + 64;
LABEL_77:
    v52 = v25;
    v27 = *(unsigned int *)(v26 + 8);
    v58 = (_DWORD *)(v26 + 12);
    v59 = v27;
    v51 = v26;
    v60 = *(_QWORD *)v26;
    v61 = 0;
    while (1)
    {
      v56 = 0;
      v57 = 0;
      v55 = 0;
      if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v57, &v55))
      {
        v26 = v51 + 4 * *(unsigned int *)(v51 + 8) + 12;
        v25 = v52 + 1;
        if ((v52 + 1) >= v53[1])
          return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
        goto LABEL_77;
      }
      __src[0] = v57;
      v28 = v55;
      if (((1 << (v55 >> 28)) & 0xA02B) != 0)
        break;
      if (v55 >> 28 == 4)
      {
        v30 = BYTE3(v55) & 0xF | 0x20;
        v31 = HIDWORD(v55);
        switch(BYTE2(v55) >> 4)
        {
          case 2:
          case 3:
            v34 = v49 + 48 * (BYTE3(v55) & 0xF);
            v35 = ((unint64_t)v55 >> 16) & 0xF;
            v36 = (unsigned __int8 *)(v34 + 3 * v35);
            v37 = (v55 >> 8) & 0x7F;
            v38 = v55 & 0x7F;
            if ((v55 & 0x100000) != 0)
              v39 = 2;
            else
              v39 = 1;
            if (v39 == *v36 && v37 == v36[1])
            {
              v40 = v35 | 0xB0;
              if (v38 == *(unsigned __int8 *)(v34 + 3 * v35 + 2))
              {
                v41 = (v30 << 24) | (v40 << 16);
                goto LABEL_100;
              }
            }
            else
            {
              v40 = v35 | 0xB0;
            }
            v50 = ((unint64_t)v55 >> 16) & 0xF;
            if ((v55 & 0x100000) != 0)
              v42 = 25344;
            else
              v42 = 25856;
            v41 = (v30 << 24) | (v40 << 16);
            v43 = (v55 >> 8) & 0x7F;
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | v42 | v37, 0, (uint64_t)&v62, __src);
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | (v42 - 256) | v38, 0, (uint64_t)&v62, __src);
            *v36 = v39;
            v44 = v34 + 3 * v50;
            *(_BYTE *)(v44 + 1) = v43;
            *(_BYTE *)(v44 + 2) = v38;
LABEL_100:
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | (v31 >> 25) | 0x600, 0, (uint64_t)&v62, __src);
            v45 = (v31 >> 18) & 0x7F;
            if (!v45)
              continue;
            v29 = 0;
            v28 = v45 | v41 | 0x2600u;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
            v29 = 0;
            v32 = BYTE2(v55) >> 4 == 9;
            if (HIDWORD(v55) >> 25)
              v32 = HIDWORD(v55) >> 25;
            v33 = (BYTE2(v55) << 16) | (v30 << 24) | v55 & 0x7F00;
            goto LABEL_87;
          case 12:
            if ((v55 & 1) != 0)
            {
              v47 = BYTE2(v55) << 16;
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v47 - 0x100000) & 0xFFFFFF80 | (v30 << 24) | (HIDWORD(v55) >> 8) & 0x7F, 0, (uint64_t)&v62, __src);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v47 - 0x100000) | (v30 << 24) | v31 & 0x7F | 0x2000, 0, (uint64_t)&v62, __src);
              v46 = v30 << 24;
            }
            else
            {
              v46 = v30 << 24;
              v47 = BYTE2(v55) << 16;
            }
            v29 = 0;
            v33 = v46 | v47;
            v32 = HIWORD(v31) & 0x7F00;
LABEL_87:
            v28 = v32 | v33;
            break;
          case 13:
            v29 = 0;
            v28 = (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25 << 8);
            break;
          case 14:
            v29 = 0;
            v28 = (HIDWORD(v55) >> 10) & 0x7F00 | (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25);
            break;
          default:
            continue;
        }
LABEL_81:
        MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v28, v29, (uint64_t)&v62, __src);
      }
    }
    v29 = HIDWORD(v55);
    goto LABEL_81;
  }
  if (*a2 != 1)
    std::terminate();
  if (a2[1])
  {
    v4 = 0;
    v5 = a2 + 2;
    do
    {
      v6 = v5[2];
      v58 = v5 + 3;
      v59 = v6;
      v60 = *(_QWORD *)v5;
      v61 = 0;
      while (1)
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v54, &v55))
          break;
        v7 = v54;
        v8 = v55;
        v9 = v55 >> 28;
        if (v55 >> 28 == 3)
        {
          v13 = ((unint64_t)v55 >> 16) & 0xF;
          if (v13 <= 6 && BYTE2(v55) <= 0x3Fu)
          {
            v57 = _byteswap_uint64(__PAIR64__(v55, HIDWORD(v55)));
            if ((v55 & 0x200000) != 0)
            {
              v10 = 0;
              if (!(_DWORD)v13)
                goto LABEL_45;
LABEL_44:
              memcpy((char *)__src + v10, (char *)&v57 + 2, ((unint64_t)v55 >> 16) & 0xF);
              v10 += (v13 - 1) + 1;
              goto LABEL_45;
            }
            LOBYTE(__src[0]) = -16;
            v10 = 1;
            if ((_DWORD)v13)
              goto LABEL_44;
LABEL_45:
            if ((((v8 >> 20) + 3) & 2) != 0)
              *((_BYTE *)__src + v10++) = -9;
            v11 = (unint64_t)v64;
            if (v65)
            {
              v20 = *((unsigned __int16 *)v64 + 4);
              if (*(_QWORD *)v64 == v7 && *((unsigned __int8 *)v64 + v20 + 9) != 247 && LOBYTE(__src[0]) != 240)
              {
                if ((char *)v64 + v10 + v20 + 10 > (char *)__src)
                  goto LABEL_63;
                goto LABEL_60;
              }
              v11 = ((unint64_t)v64 + v20 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v11 + v10 + 10 > (unint64_t)__src)
              goto LABEL_63;
            v20 = 0;
            ++v65;
            *(_QWORD *)v11 = v7;
            *(_WORD *)(v11 + 8) = 0;
LABEL_60:
            v21 = (_BYTE *)(v11 + v20 + 10);
            v22 = __src;
            switch(v10)
            {
              case 0uLL:
                break;
              case 1uLL:
                goto LABEL_69;
              case 2uLL:
                goto LABEL_68;
              case 3uLL:
                goto LABEL_67;
              case 4uLL:
LABEL_66:
                *v21++ = __src[0];
                v22 = (uint64_t *)((char *)__src + 1);
LABEL_67:
                v23 = *(_BYTE *)v22;
                v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v23;
LABEL_68:
                v24 = *(_BYTE *)v22;
                v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v24;
LABEL_69:
                *v21 = *(_BYTE *)v22;
                break;
              default:
LABEL_70:
                memmove(v21, __src, v10);
                break;
            }
            *(_WORD *)(v11 + 8) += v10;
LABEL_72:
            v64 = (int *)v11;
          }
        }
        else if (v9 == 2)
        {
          v14 = v55 & 0xE00000;
          LOBYTE(__src[0]) = BYTE2(v55);
          BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
          if ((v55 & 0xE00000) == 0xC00000)
            v15 = 2;
          else
            v15 = 3;
          if (v14 != 12582912)
            BYTE2(__src[0]) = v55 & 0x7F;
          v16 = (unint64_t)v64;
          if (v65)
          {
            v17 = *((unsigned __int16 *)v64 + 4);
            if (*(_QWORD *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v17 + 9) != 247)
            {
              if ((char *)v64 + v15 + v17 + 10 > (char *)__src)
                goto LABEL_39;
              goto LABEL_41;
            }
            v16 = ((unint64_t)v64 + v17 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v16 + v15 + 10 > (unint64_t)__src)
          {
LABEL_39:
            v16 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v54, (char *)__src, v15);
            goto LABEL_55;
          }
          v17 = 0;
          ++v65;
          *(_QWORD *)v16 = v54;
          *(_WORD *)(v16 + 8) = 0;
LABEL_41:
          v18 = (_BYTE *)(v16 + v17 + 10);
          if (v14 == 12582912)
          {
            v19 = __src;
          }
          else
          {
            *v18++ = __src[0];
            v19 = (uint64_t *)((char *)__src + 1);
          }
          *v18 = *(_BYTE *)v19;
          v18[1] = *((_BYTE *)v19 + 1);
          *(_WORD *)(v16 + 8) += v15;
LABEL_55:
          v64 = (int *)v16;
        }
        else if (v9 == 1 && BYTE2(v55) >= 0xF0u && ((0x22B1uLL >> (BYTE2(v55) + 16)) & 1) == 0)
        {
          v10 = MIDI::system_message_size::sizes[BYTE2(v55) - 240];
          LOBYTE(__src[0]) = BYTE2(v55);
          if (((0xDD40uLL >> (BYTE2(v55) + 16)) & 1) == 0)
          {
            BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
            if (BYTE2(v55) == 242)
              BYTE2(__src[0]) = v55 & 0x7F;
          }
          v11 = (unint64_t)v64;
          if (v65)
          {
            v12 = *((unsigned __int16 *)v64 + 4);
            if (*(_QWORD *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v12 + 9) != 247)
            {
              if ((char *)v64 + v12 + v10 + 10 <= (char *)__src)
                goto LABEL_65;
LABEL_63:
              v11 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v7, (char *)__src, v10);
              goto LABEL_72;
            }
            v11 = ((unint64_t)v64 + v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v11 + v10 + 10 <= (unint64_t)__src)
          {
            v12 = 0;
            ++v65;
            *(_QWORD *)v11 = v54;
            *(_WORD *)(v11 + 8) = 0;
LABEL_65:
            v21 = (_BYTE *)(v11 + v12 + 10);
            v22 = __src;
            switch((int)v10)
            {
              case 1:
                goto LABEL_69;
              case 2:
                goto LABEL_68;
              case 3:
                goto LABEL_67;
              case 4:
                goto LABEL_66;
              default:
                goto LABEL_70;
            }
          }
          goto LABEL_63;
        }
      }
      v5 += v5[2] + 3;
      ++v4;
    }
    while (v4 < v53[1]);
  }
  return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
}

void sub_19B794350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase(uint64_t a1)
{
  uint64_t v3;

  if (*(_DWORD *)(a1 + 64))
  {
    v3 = a1 + 64;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v3);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 68;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1 + 8);
  return a1;
}

uint64_t MIDI::EventList::PacketReader::read(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;

  v3 = a1[1];
  v4 = a1[3];
  if (v4 >= v3)
    return 0;
  v5 = *a1;
  v6 = (unsigned int *)(*a1 + 4 * v4);
  v7 = *v6;
  v8 = v4 + MIDI::UniversalPacket::word_sizes[v7 >> 28];
  if (v8 > v3)
    return 0;
  *a2 = a1[2];
  switch((uint64_t)(v5 + 4 * v8 - (_QWORD)v6) >> 2)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      *a3++ = v7;
      v10 = v6[1];
      ++v6;
      LODWORD(v7) = v10;
LABEL_6:
      *a3++ = v7;
      v11 = v6[1];
      ++v6;
      LODWORD(v7) = v11;
LABEL_7:
      *a3++ = v7;
      LODWORD(v7) = v6[1];
LABEL_8:
      *a3 = v7;
LABEL_9:
      a1[3] = v8;
      result = 1;
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

uint64_t MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *p_src;
  char v29;
  char v30;
  _DWORD v31[2];
  unsigned __int8 __src;
  char v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = BYTE2(result);
  v7 = result >> 28;
  if (result >> 28 == 3)
  {
    v14 = WORD1(result) & 0xF;
    if (v14 > 6 || BYTE2(result) > 0x3Fu)
      return result;
    v15 = (result >> 20) + 3;
    v31[0] = bswap32(result);
    v31[1] = bswap32(a2);
    if ((result & 0x200000) != 0)
    {
      v8 = 0;
      if (!(_DWORD)v14)
        goto LABEL_39;
    }
    else
    {
      __src = -16;
      v8 = 1;
      if (!(_DWORD)v14)
      {
LABEL_39:
        if ((v15 & 2) != 0)
          *(&__src + v8++) = -9;
        v24 = *a4;
        v10 = *(_QWORD *)(a3 + 56);
        v25 = a3 + 1088;
        v26 = *(_DWORD *)(a3 + 64);
        if (v26)
        {
          v27 = *(unsigned __int16 *)(v10 + 8);
          if (*(_QWORD *)v10 == v24 && *(unsigned __int8 *)(v27 + v10 + 9) != 247 && __src != 240)
          {
            if (v10 + v8 + v27 + 10 <= v25)
              goto LABEL_54;
            goto LABEL_52;
          }
          v10 = (v10 + v27 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v10 + v8 + 10 <= v25)
        {
          LODWORD(v27) = 0;
          *(_DWORD *)(a3 + 64) = v26 + 1;
          *(_QWORD *)v10 = v24;
          *(_WORD *)(v10 + 8) = 0;
LABEL_54:
          result = v10 + v27 + 10;
          p_src = &__src;
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_64;
            case 2uLL:
              goto LABEL_63;
            case 3uLL:
              goto LABEL_62;
            case 4uLL:
LABEL_61:
              p_src = (unsigned __int8 *)&v33;
              *(_BYTE *)result++ = __src;
LABEL_62:
              v29 = *p_src++;
              *(_BYTE *)result++ = v29;
LABEL_63:
              v30 = *p_src++;
              *(_BYTE *)result++ = v30;
LABEL_64:
              *(_BYTE *)result = *p_src;
              break;
            default:
LABEL_65:
              result = (uint64_t)memmove((void *)result, &__src, v8);
              break;
          }
          *(_WORD *)(v10 + 8) += v8;
          goto LABEL_67;
        }
LABEL_52:
        result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v24, (char *)&__src, v8);
LABEL_58:
        v10 = result;
LABEL_67:
        *(_QWORD *)(a3 + 56) = v10;
        return result;
      }
    }
    memcpy(&__src + v8, (char *)v31 + 2, v14);
    v8 += (v14 - 1) + 1;
    goto LABEL_39;
  }
  if (v7 == 2)
  {
    v16 = result & 0xE00000;
    __src = BYTE2(result);
    v33 = BYTE1(result) & 0x7F;
    if ((result & 0xE00000) == 0xC00000)
      v17 = 2;
    else
      v17 = 3;
    if (v16 != 12582912)
      v34 = result & 0x7F;
    v18 = *a4;
    result = *(_QWORD *)(a3 + 56);
    v19 = a3 + 1088;
    v20 = *(_DWORD *)(a3 + 64);
    if (v20)
    {
      v21 = *(unsigned __int16 *)(result + 8);
      if (*(_QWORD *)result == v18 && v6 != 240 && *(unsigned __int8 *)(v21 + result + 9) != 247)
      {
        if (result + v17 + v21 + 10 <= v19)
          goto LABEL_35;
        goto LABEL_33;
      }
      result = (result + v21 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (result + v17 + 10 <= v19)
    {
      LODWORD(v21) = 0;
      *(_DWORD *)(a3 + 64) = v20 + 1;
      *(_QWORD *)result = v18;
      *(_WORD *)(result + 8) = 0;
LABEL_35:
      v22 = (unsigned __int8 *)(result + v21 + 10);
      if (v16 == 12582912)
      {
        v23 = &__src;
      }
      else
      {
        v23 = (unsigned __int8 *)&v33;
        *v22 = __src;
        v22 = (unsigned __int8 *)(result + v21 + 11);
      }
      *v22 = *v23;
      v22[1] = v23[1];
      *(_WORD *)(result + 8) += v17;
      goto LABEL_49;
    }
LABEL_33:
    result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v18, (char *)&__src, v17);
LABEL_49:
    *(_QWORD *)(a3 + 56) = result;
    return result;
  }
  if (v7 == 1 && BYTE2(result) >= 0xF0u && ((0x22B1uLL >> (BYTE2(result) + 16)) & 1) == 0)
  {
    v8 = MIDI::system_message_size::sizes[BYTE2(result) - 240];
    __src = BYTE2(result);
    if (((0xDD40uLL >> (BYTE2(result) + 16)) & 1) == 0)
    {
      v33 = BYTE1(result) & 0x7F;
      if (BYTE2(result) == 242)
        v34 = result & 0x7F;
    }
    v9 = *a4;
    v10 = *(_QWORD *)(a3 + 56);
    v11 = a3 + 1088;
    v12 = *(_DWORD *)(a3 + 64);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v10 + 8);
      if (*(_QWORD *)v10 == v9 && BYTE2(result) != 240 && *(unsigned __int8 *)(v13 + v10 + 9) != 247)
      {
        if (v10 + v13 + v8 + 10 <= v11)
          goto LABEL_60;
LABEL_57:
        result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v9, (char *)&__src, v8);
        goto LABEL_58;
      }
      v10 = (v10 + v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (v10 + v8 + 10 <= v11)
    {
      LODWORD(v13) = 0;
      *(_DWORD *)(a3 + 64) = v12 + 1;
      *(_QWORD *)v10 = v9;
      *(_WORD *)(v10 + 8) = 0;
LABEL_60:
      result = v10 + v13 + 10;
      p_src = &__src;
      switch((int)v8)
      {
        case 1:
          goto LABEL_64;
        case 2:
          goto LABEL_63;
        case 3:
          goto LABEL_62;
        case 4:
          goto LABEL_61;
        default:
          goto LABEL_65;
      }
    }
    goto LABEL_57;
  }
  return result;
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  char *v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 64)
    && (v16 = a1 + 64,
        (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16),
        *(_DWORD *)(a1 + 64) = 0,
        v8 = a1 + 68,
        a1 + 68 + a4 + 10 <= a1 + 1088))
  {
    *(_DWORD *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 68) = a2;
    *(_WORD *)(a1 + 76) = 0;
    v9 = (char *)(a1 + 78);
    v10 = 0;
    switch(a4)
    {
      case 0uLL:
        break;
      case 1uLL:
        goto LABEL_8;
      case 2uLL:
        goto LABEL_7;
      case 3uLL:
        goto LABEL_6;
      case 4uLL:
        v11 = *a3++;
        v9 = (char *)(a1 + 79);
        *(_BYTE *)(a1 + 78) = v11;
LABEL_6:
        v12 = *a3++;
        *v9++ = v12;
LABEL_7:
        v13 = *a3++;
        *v9++ = v13;
LABEL_8:
        *v9 = *a3;
        v10 = *(_WORD *)(a1 + 76);
        break;
      default:
        if (a4)
          memmove(v9, a3, a4);
        v10 = 0;
        break;
    }
    *(_WORD *)(a1 + 76) = v10 + a4;
  }
  else
  {
    MIDI::LegacyPacketList::create();
    v16 = v15;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16);
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
    v8 = a1 + 68;
    *(_QWORD *)(a1 + 56) = a1 + 68;
    *(_DWORD *)(a1 + 64) = 0;
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
  }
  return v8;
}

void sub_19B794A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)MIDI::LegacyPacketListDeleter::operator()();
  return result;
}

void caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable(void)::{lambda(void *,MIDI::LegacyPacketList const*&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void MIDI::MIDIPacketList_Deliverer::~MIDIPacketList_Deliverer(MIDI::MIDIPacketList_Deliverer *this)
{
  *(_QWORD *)this = &off_1E3BE9C00;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 24))((char *)this + 16);
}

{
  *(_QWORD *)this = &off_1E3BE9C00;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 24))((char *)this + 16);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return (**(uint64_t (***)(uint64_t, uint64_t *))(a1 + 8))(a1 + 16, &v3);
}

uint64_t _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESD_SE_(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v2 = *a2;
  if (**a2)
  {
    v3 = result;
    v4 = 0;
    v5 = (unint64_t)(v2 + 1);
    do
    {
      result = (*(uint64_t (**)(void))(**(_QWORD **)(**(_QWORD **)v3 + 176) + 16))();
      v5 = (v5 + 10 + *(unsigned __int16 *)(v5 + 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E_8__invokeESD_SD_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E0_8__invokeESD_SD_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void AUGraphSourceNodeV3::~AUGraphSourceNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

const void ***AUGraphSourceNodeV3::AllocateInputBlock(AUGraphSourceNodeV3 *this)
{
  _QWORD *v2;
  const void **v3;
  _QWORD v5[6];

  v2 = *(_QWORD **)(*((_QWORD *)this + 3) + 184);
  if (v2)
    v2 = (_QWORD *)*v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN19AUGraphSourceNodeV318AllocateInputBlockEv_block_invoke;
  v5[3] = &unk_1E3BEB930;
  v5[4] = v2;
  v5[5] = this;
  v3 = (const void **)operator new();
  *v3 = 0;
  AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v3, v5);
  return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 15, v3);
}

void sub_19B794D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19AUGraphSourceNodeV318AllocateInputBlockEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  atomic_store(result, (unsigned int *)(v1 + 160));
  return result;
}

void AUGraphMultiBusNode::~AUGraphMultiBusNode(AUGraphMultiBusNode *this)
{
  AUGraphMultiBusNode::~AUGraphMultiBusNode(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E3BE7930;
  v4 = (void **)((char *)this + 216);
  std::vector<std::unique_ptr<caulk::pooled_semaphore_mutex>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3((const void ***)this);
}

uint64_t AUGraphMultiBusNode::GetConnection(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  int v6;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  _DWORD *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v5 = a3;
  v6 = a2;
  v30 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if ((_DWORD)a2 == 1)
  {
    *(_QWORD *)(a4 + 16) = a1;
    *(_DWORD *)(a4 + 24) = a3;
    v8 = a1 + 6;
  }
  else
  {
    *(_QWORD *)a4 = a1;
    *(_DWORD *)(a4 + 8) = a3;
    v8 = a1 + 9;
  }
  if (*v8 == v8[1])
    return 0;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 24))(a1, a2, a3);
  if (result)
  {
    v10 = result;
    if (v6 == 1)
      v11 = 21;
    else
      v11 = 24;
    if (v6 == 1)
      v12 = a1 + 21;
    else
      v12 = a1 + 24;
    v13 = a1[v11];
    v14 = (v12[1] - v13) >> 2;
    if (v14 < v5 + 1)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v19 = "AVAEInternal.h";
        v20 = 1024;
        v21 = 71;
        v22 = 2080;
        v23 = "AVAEGraphNode.mm";
        v24 = 1024;
        v25 = 1479;
        v26 = 2080;
        v27 = "GetConnection";
        v28 = 2080;
        v29 = "nodeBussesVec.size() >= (inBus + 1)";
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeBussesVec.size() >= (inBus + 1)");
      v13 = a1[v11];
      v14 = (v12[1] - v13) >> 2;
    }
    if (v14 <= v5)
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    v16 = *(_DWORD *)(v13 + 4 * v5);
    if (v6 == 1)
    {
      *(_QWORD *)a4 = v10;
      v17 = (_DWORD *)(a4 + 8);
    }
    else
    {
      *(_QWORD *)(a4 + 16) = v10;
      v17 = (_DWORD *)(a4 + 24);
    }
    *v17 = v16;
    return 1;
  }
  return result;
}

uint64_t AUGraphMultiBusNode::GetConnectionPoint(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  v4 = a1 + 48;
  v5 = 72;
  if (a2 == 1)
    v5 = 48;
  else
    v4 = a1 + 72;
  if (*(_QWORD *)(a1 + v5) == *(_QWORD *)(v4 + 8))
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (result)
  {
    v11 = result;
    if (a2 == 1)
      v12 = 168;
    else
      v12 = 192;
    if (a2 == 1)
      v13 = a1 + 168;
    else
      v13 = a1 + 192;
    v14 = *(_QWORD *)(a1 + v12);
    v15 = (*(_QWORD *)(v13 + 8) - v14) >> 2;
    if (v15 < a3 + 1)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v19 = "AVAEInternal.h";
        v20 = 1024;
        v21 = 71;
        v22 = 2080;
        v23 = "AVAEGraphNode.mm";
        v24 = 1024;
        v25 = 1511;
        v26 = 2080;
        v27 = "GetConnectionPoint";
        v28 = 2080;
        v29 = "nodeBussesVec.size() >= (inBus + 1)";
        _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeBussesVec.size() >= (inBus + 1)");
      v14 = *(_QWORD *)(a1 + v12);
      v15 = (*(_QWORD *)(v13 + 8) - v14) >> 2;
    }
    if (v15 <= a3)
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    v17 = *(_DWORD *)(v14 + 4 * a3);
    *a4 = v11;
    *((_DWORD *)a4 + 2) = v17;
    return 1;
  }
  return result;
}

uint64_t AUGraphMultiBusNode::GetBusForConnectionPoint(uint64_t *a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *a4 = -1;
  if (a2 == 1)
  {
    v7 = a1 + 6;
    v6 = a1[6];
    v9 = a1 + 7;
    v8 = a1[7];
    if (v6 != v8)
    {
      v10 = a1 + 21;
      goto LABEL_6;
    }
    return 0;
  }
  v7 = a1 + 9;
  v6 = a1[9];
  v9 = a1 + 10;
  v8 = a1[10];
  if (v6 == v8)
    return 0;
  v10 = a1 + 24;
LABEL_6:
  v11 = (uint64_t)(v10[1] - *v10) >> 2;
  if (v11 != (v8 - v6) >> 3)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v17 = "AVAEInternal.h";
      v18 = 1024;
      v19 = 71;
      v20 = 2080;
      v21 = "AVAEGraphNode.mm";
      v22 = 1024;
      v23 = 1529;
      v24 = 2080;
      v25 = "GetBusForConnectionPoint";
      v26 = 2080;
      v27 = "nodeBussesVec.size() == nodeVec.size()";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeBussesVec.size() == nodeVec.size()");
    v8 = *v9;
    v6 = *v7;
    v11 = (*v9 - *v7) >> 3;
  }
  if (v8 == v6)
    return 0;
  v13 = 0;
  v14 = 0;
  while (*(_QWORD *)a3 != *(_QWORD *)(v6 + 8 * v13) || *(_DWORD *)(a3 + 8) != *(_DWORD *)(*v10 + 4 * v13))
  {
    v13 = ++v14;
    if (v11 <= v14)
      return 0;
  }
  *a4 = v14;
  return 1;
}

char *AUGraphMultiBusNode::AddNode(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *result;
  unint64_t j;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v40 = "AVAEInternal.h";
      v41 = 1024;
      v42 = 71;
      v43 = 2080;
      v44 = "AVAEGraphNode.mm";
      v45 = 1024;
      v46 = 1545;
      v47 = 2080;
      v48 = "AddNode";
      v49 = 2080;
      v50 = "inNode != nil";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inNode != nil");
  }
  if (a2 == 1)
    v10 = 48;
  else
    v10 = 72;
  if (a2 == 1)
    v11 = a1 + 48;
  else
    v11 = a1 + 72;
  v12 = *(_QWORD **)(v11 + 8);
  v13 = *(_QWORD *)(a1 + v10);
  for (i = ((uint64_t)v12 - v13) >> 3; (int)i <= (int)a3; i = ((uint64_t)v12 - v13) >> 3)
  {
    v15 = *(_QWORD *)(v11 + 16);
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 61)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v16 = v15 - v13;
      v17 = v16 >> 2;
      if (v16 >> 2 <= i + 1)
        v17 = i + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v18);
      else
        v19 = 0;
      v20 = (_QWORD *)(v18 + 8 * i);
      *v20 = 0;
      v12 = v20 + 1;
      v21 = *(char **)(v11 + 8);
      v22 = *(char **)(a1 + v10);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v20 = v23;
        }
        while (v21 != v22);
        v21 = *(char **)(a1 + v10);
      }
      *(_QWORD *)(a1 + v10) = v20;
      *(_QWORD *)(v11 + 8) = v12;
      *(_QWORD *)(v11 + 16) = v18 + 8 * v19;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12++ = 0;
    }
    *(_QWORD *)(v11 + 8) = v12;
    v13 = *(_QWORD *)(a1 + v10);
  }
  if (i <= a3)
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v13 + 8 * a3) = a4;
  v24 = a2 == 1;
  if (a2 == 1)
    v25 = 168;
  else
    v25 = 192;
  if (v24)
    v26 = a1 + 168;
  else
    v26 = a1 + 192;
  v27 = *(char **)(v26 + 8);
  result = *(char **)(a1 + v25);
  for (j = (v27 - result) >> 2; (int)j <= (int)a3; v27 = v31)
  {
    v30 = *(_QWORD *)(v26 + 16);
    if ((unint64_t)v27 >= v30)
    {
      v32 = j + 1;
      if ((j + 1) >> 62)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v33 = v30 - (_QWORD)result;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(v34);
        v27 = *(char **)(v26 + 8);
        result = *(char **)(a1 + v25);
      }
      else
      {
        v35 = 0;
      }
      v36 = (char *)(v34 + 4 * j);
      *(_DWORD *)v36 = -1;
      v31 = v36 + 4;
      while (v27 != result)
      {
        v37 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(_QWORD *)(a1 + v25) = v36;
      *(_QWORD *)(v26 + 8) = v31;
      *(_QWORD *)(v26 + 16) = v34 + 4 * v35;
      if (result)
      {
        operator delete(result);
        result = *(char **)(a1 + v25);
      }
      else
      {
        result = v36;
      }
    }
    else
    {
      *(_DWORD *)v27 = -1;
      v31 = v27 + 4;
    }
    *(_QWORD *)(v26 + 8) = v31;
    j = (v31 - result) >> 2;
  }
  if (j <= a3)
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  *(_DWORD *)&result[4 * a3] = a5;
  return result;
}

uint64_t AUGraphMultiBusNode::DisconnectNode(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v8 = (_QWORD *)result;
  v34 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v23 = "AVAEInternal.h";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      v27 = "AVAEGraphNode.mm";
      v28 = 1024;
      v29 = 1575;
      v30 = 2080;
      v31 = "DisconnectNode";
      v32 = 2080;
      v33 = "inNode != nil";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inNode != nil");
  }
  if (a2 == 1)
  {
    v11 = v8 + 6;
    v10 = (_QWORD *)v8[6];
    v13 = v8 + 7;
    v12 = (_QWORD *)v8[7];
    if (v10 == v12)
      return result;
    v14 = v8 + 21;
  }
  else
  {
    v11 = v8 + 9;
    v10 = (_QWORD *)v8[9];
    v13 = v8 + 10;
    v12 = (_QWORD *)v8[10];
    if (v10 == v12)
      return result;
    v14 = v8 + 24;
  }
  v15 = (uint64_t)(v14[1] - *v14) >> 2;
  if (v15 != v12 - v10)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v23 = "AVAEInternal.h";
      v24 = 1024;
      v25 = 71;
      v26 = 2080;
      v27 = "AVAEGraphNode.mm";
      v28 = 1024;
      v29 = 1582;
      v30 = 2080;
      v31 = "DisconnectNode";
      v32 = 2080;
      v33 = "nodeBussesVec.size() == nodeVec.size()";
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeBussesVec.size() == nodeVec.size()");
    v12 = (_QWORD *)*v13;
    v10 = (_QWORD *)*v11;
    v15 = (uint64_t)(*v13 - *v11) >> 3;
  }
  if (v12 != v10)
  {
    v17 = 0;
    v18 = 1;
    while (v10[v17] != a4 || *(_DWORD *)(*v14 + 4 * v17) != a5)
    {
      v17 = v18;
      if (v15 <= v18++)
        goto LABEL_25;
    }
    v10[v17] = 0;
    *(_DWORD *)(*v14 + 4 * v17) = -1;
    v10 = (_QWORD *)*v11;
    v12 = (_QWORD *)*v13;
LABEL_25:
    if (v10 != v12)
    {
      v20 = v12 - 1;
      do
      {
        if (*v20)
          break;
        *v13 = v20;
        v14[1] -= 4;
      }
      while (v20-- != v10);
    }
  }
  return result;
}

uint64_t AUGraphMultiBusNode::DisconnectNode(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
    v3 = 48;
  else
    v3 = 72;
  if (a2 == 1)
    v4 = result + 48;
  else
    v4 = result + 72;
  v5 = *(_QWORD *)(result + v3);
  v6 = *(_QWORD *)(v4 + 8);
  if (v5 != v6)
  {
    v8 = (v6 - v5) >> 3;
    if (v8 > a3)
    {
      v9 = result;
      if (a2 == 1)
        v10 = 168;
      else
        v10 = 192;
      if (a2 == 1)
        v11 = result + 168;
      else
        v11 = result + 192;
      if (v8 != (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)(result + v10)) >> 2)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v21 = "AVAEInternal.h";
          v22 = 1024;
          v23 = 71;
          v24 = 2080;
          v25 = "AVAEGraphNode.mm";
          v26 = 1024;
          v27 = 1612;
          v28 = 2080;
          v29 = "DisconnectNode";
          v30 = 2080;
          v31 = "nodeBussesVec.size() == nodeVec.size()";
          _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeBussesVec.size() == nodeVec.size()");
        v5 = *(_QWORD *)(v9 + v3);
        v8 = (*(_QWORD *)(v4 + 8) - v5) >> 3;
      }
      if (v8 <= a3)
        std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v5 + 8 * a3) = 0;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v9 + v10);
      if (a3 >= (unint64_t)((v13 - v14) >> 2))
        std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
      *(_DWORD *)(v14 + 4 * a3) = -1;
      v15 = *(_QWORD **)(v9 + v3);
      v16 = *(_QWORD **)(v4 + 8);
      if (v15 != v16)
      {
        v17 = v13 - 4;
        v18 = v16 - 1;
        do
        {
          if (*v18)
            break;
          *(_QWORD *)(v4 + 8) = v18;
          *(_QWORD *)(v11 + 8) = v17;
          v17 -= 4;
        }
        while (v18-- != v15);
      }
    }
  }
  return result;
}

uint64_t AUGraphMultiBusNode::CanResizeNumberOfInputs(AUGraphMultiBusNode *this)
{
  return (*(uint64_t (**)(AUGraphMultiBusNode *))(*(_QWORD *)this + 120))(this);
}

uint64_t AUGraphMultiBusNode::CanResizeNumberOfOutputs(AUGraphMultiBusNode *this)
{
  return (*(uint64_t (**)(AUGraphMultiBusNode *))(*(_QWORD *)this + 112))(this);
}

BOOL AUGraphMultiBusNode::IsSplitterNode(AUGraphMultiBusNode *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3));
  return *v1 == 1635085688 && v1[1] == 1836281964;
}

BOOL AUGraphMultiBusNode::IsMixerNode(AUGraphMultiBusNode *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3));
  return *v1 == 1635085688 && v1[1] != 1836281964;
}

uint64_t AUGraphMultiBusNode::InputMutex(AUGraphMultiBusNode *this, unsigned int a2, char a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  caulk::pooled_semaphore_mutex *v7;
  unint64_t v8;
  caulk::pooled_semaphore_mutex **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  caulk::pooled_semaphore_mutex **v18;
  char *v19;
  caulk::pooled_semaphore_mutex *v20;
  caulk::pooled_semaphore_mutex **v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 27);
    v5 = (*((_QWORD *)this + 28) - v4) >> 3;
    v6 = a2;
    if (v5 <= a2)
    {
      do
      {
        v7 = (caulk::pooled_semaphore_mutex *)operator new();
        caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(v7);
        v9 = (caulk::pooled_semaphore_mutex **)*((_QWORD *)this + 28);
        v8 = *((_QWORD *)this + 29);
        if ((unint64_t)v9 >= v8)
        {
          v12 = (_QWORD *)*((_QWORD *)this + 27);
          v13 = v9 - (caulk::pooled_semaphore_mutex **)v12;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          v15 = v8 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v17 = (char *)operator new(8 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = (caulk::pooled_semaphore_mutex **)&v17[8 * v13];
          v19 = &v17[8 * v16];
          *v18 = v7;
          v11 = v18 + 1;
          if (v9 == v12)
          {
            *((_QWORD *)this + 27) = v18;
            *((_QWORD *)this + 28) = v11;
            *((_QWORD *)this + 29) = v19;
          }
          else
          {
            do
            {
              v20 = *--v9;
              *v9 = 0;
              *--v18 = v20;
            }
            while (v9 != v12);
            v9 = (caulk::pooled_semaphore_mutex **)*((_QWORD *)this + 27);
            v21 = (caulk::pooled_semaphore_mutex **)*((_QWORD *)this + 28);
            *((_QWORD *)this + 27) = v18;
            *((_QWORD *)this + 28) = v11;
            *((_QWORD *)this + 29) = v19;
            while (v21 != v9)
            {
              v23 = (uint64_t)*--v21;
              v22 = v23;
              *v21 = 0;
              if (v23)
                MEMORY[0x1A1AC5BD4](v22, 0x1000C4052888210);
            }
          }
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
          *((_QWORD *)this + 28) = v10;
          v11 = v10;
        }
        *((_QWORD *)this + 28) = v11;
        v4 = *((_QWORD *)this + 27);
      }
      while (v6 >= ((uint64_t)v11 - v4) >> 3);
      return *(_QWORD *)(v4 + 8 * v6);
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 27);
    v6 = a2;
    v5 = (*((_QWORD *)this + 28) - v4) >> 3;
  }
  if (v5 <= v6)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v27 = "AVAEInternal.h";
      v28 = 1024;
      v29 = 71;
      v30 = 2080;
      v31 = "AVAEGraphNode.h";
      v32 = 1024;
      v33 = 622;
      v34 = 2080;
      v35 = "InputMutex";
      v36 = 2080;
      v37 = "bus < _inMutexes.size()";
      _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "bus < _inMutexes.size()");
    v4 = *((_QWORD *)this + 27);
  }
  return *(_QWORD *)(v4 + 8 * v6);
}

void sub_19B7960B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<caulk::pooled_semaphore_mutex>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1A1AC5BD4](v6, 0x1000C4052888210);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *AUGraphNodeBase::DescAsString(AUGraphNodeBase *this, uint64_t a2)
{
  const AudioComponentDescription *v3;
  int16x8_t v4;
  char *v5;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v3 = (const AudioComponentDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
  v5 = AudioComponentDescriptionAsString(v3, (char *)v7, v4);
  return std::string::basic_string[abi:ne180100]<0>(this, v5);
}

_OWORD *AUGraphNodeBase::GetValidConnections(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  result = std::__list_imp<AUGraphConnection>::clear(a3);
  v7 = 80;
  if ((_DWORD)a2 == 1)
    v7 = 56;
  v8 = 72;
  if ((_DWORD)a2 == 1)
    v8 = 48;
  v9 = *(_QWORD *)(a1 + v7) - *(_QWORD *)(a1 + v8);
  *(_QWORD *)&v14 = 0;
  DWORD2(v14) = -1;
  v10 = v9 >> 3;
  *(_QWORD *)&v15 = 0;
  DWORD2(v15) = -1;
  if ((int)(v9 >> 3) >= 1)
  {
    v11 = 0;
    do
    {
      result = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, a2, v11, &v14);
      if ((_DWORD)result)
      {
        result = operator new(0x30uLL);
        v12 = v15;
        result[1] = v14;
        result[2] = v12;
        v13 = *a3;
        *(_QWORD *)result = *a3;
        *((_QWORD *)result + 1) = a3;
        *(_QWORD *)(v13 + 8) = result;
        *a3 = (uint64_t)result;
        ++a3[2];
      }
      v11 = (v11 + 1);
    }
    while ((_DWORD)v10 != (_DWORD)v11);
  }
  return result;
}

_OWORD *AUGraphNodeBase::GetValidConnectionPoints(_QWORD *a1, uint64_t *a2)
{
  _OWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  result = std::__list_imp<AUGraphConnection>::clear(a2);
  v5 = (a1[10] - a1[9]) >> 3;
  *(_QWORD *)&v8 = 0;
  DWORD2(v8) = -1;
  if ((int)v5 >= 1)
  {
    v6 = 0;
    do
    {
      result = (_OWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, __int128 *))(*a1 + 40))(a1, 0, v6, &v8);
      if ((_DWORD)result)
      {
        result = operator new(0x20uLL);
        result[1] = v8;
        v7 = *a2;
        *(_QWORD *)result = *a2;
        *((_QWORD *)result + 1) = a2;
        *(_QWORD *)(v7 + 8) = result;
        *a2 = (uint64_t)result;
        ++a2[2];
      }
      v6 = (v6 + 1);
    }
    while ((_DWORD)v5 != (_DWORD)v6);
  }
  return result;
}

void *AUGraphNodeBase::CalculateMaxFrames(AUGraphNodeBase *this, unsigned int a2, double a3)
{
  void *result;
  double v7;

  result = (void *)(*(uint64_t (**)(AUGraphNodeBase *))(*(_QWORD *)this + 152))(this);
  if ((_DWORD)result)
  {
    if (a3 > 0.0
      && (result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), 0)) != 0&& (result = (void *)objc_msgSend(result, "sampleRate"), v7 > 0.0))
    {
      if (v7 != a3)
        a2 = (vcvtpd_u64_f64(v7 * (double)a2 / a3) & 0xFFFFFFE0) + 32;
    }
    else
    {
      a2 = 0;
    }
    *((_DWORD *)this + 9) = a2;
  }
  return result;
}

void AUGraphNodeBase::PrintNodeObject(AUGraphNodeBase *this, __sFILE *a2, const char *a3)
{
  _QWORD *v4;
  const void *v5;
  void **v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  double v15;
  int16x8_t v16;
  int v17;
  uint64_t v18;
  const void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  double v28;
  int16x8_t v29;
  int v30;
  uint64_t v31;
  const void *v32;
  const char *v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  CAStreamBasicDescription v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(*(uint64_t (**)(AUGraphNodeBase *, __sFILE *, const char *))(*(_QWORD *)this + 16))(this, a2, a3);
  v5 = (const void *)v4[3];
  AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, (uint64_t)v5);
  if ((SBYTE7(v44) & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (*(_BYTE *)(v4[3] + 48))
    v7 = "I";
  else
    v7 = "U";
  fprintf(a2, "\n\t node %p {%s}, '%s'\n", v5, (const char *)v6, v7);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  v8 = v4[6];
  if (((unint64_t)(v4[7] - v8) >> 3))
  {
    fprintf(a2, "\t\t inputs = %d\n", (unint64_t)(v4[7] - v8) >> 3);
    if ((int)((v4[7] - v4[6]) >> 3) >= 1)
    {
      v9 = 0;
      do
      {
        v39 = 0;
        v40 = -1;
        v41 = 0;
        v42 = -1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*v4 + 32))(v4, 1, v9, &v39);
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__p = 0u;
        v44 = 0u;
        memset(&v38, 0, sizeof(v38));
        v10 = (void *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v4[3] + 72))(v4[3], v9);
        if (v10)
        {
          v11 = objc_msgSend(v10, "streamDescription");
          v12 = *(_OWORD *)(v11 + 16);
          *(_OWORD *)&v38.var0 = *(_OWORD *)v11;
          *(_OWORD *)&v38.var3 = v12;
          *(_QWORD *)&v38.var7 = *(_QWORD *)(v11 + 32);
        }
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[3] + 40))(v4[3]);
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 72))(v13, 1, v9);
        v17 = v40;
        v18 = v39;
        if (v39)
        {
          v19 = *(const void **)(v39 + 24);
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)v36, (uint64_t)v19);
          if (v37 >= 0)
            v20 = (const char *)v36;
          else
            v20 = (const char *)v36[0];
        }
        else
        {
          v19 = 0;
          v20 = "";
        }
        CAStreamBasicDescription::AsString(&v38, (char *)__p, 0x80uLL, v15, v16);
        fprintf(a2, "\t\t\t (bus%d, en%d) <- (bus%d) %p, {%s}, [%s]\n", v9, v14, v17, v19, v20, (const char *)__p);
        if (v18 && v37 < 0)
          operator delete(v36[0]);
        ++v9;
      }
      while (v9 < (int)((v4[7] - v4[6]) >> 3));
    }
  }
  v21 = v4[9];
  if (((unint64_t)(v4[10] - v21) >> 3))
  {
    fprintf(a2, "\t\t outputs = %d\n", (unint64_t)(v4[10] - v21) >> 3);
    if ((int)((v4[10] - v4[9]) >> 3) >= 1)
    {
      v22 = 0;
      do
      {
        v39 = 0;
        v40 = -1;
        v41 = 0;
        v42 = -1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t *))(*v4 + 32))(v4, 0, v22, &v39);
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__p = 0u;
        v44 = 0u;
        memset(&v38, 0, sizeof(v38));
        v23 = (void *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v4[3] + 48))(v4[3], v22);
        if (v23)
        {
          v24 = objc_msgSend(v23, "streamDescription");
          v25 = *(_OWORD *)(v24 + 16);
          *(_OWORD *)&v38.var0 = *(_OWORD *)v24;
          *(_OWORD *)&v38.var3 = v25;
          *(_QWORD *)&v38.var7 = *(_QWORD *)(v24 + 32);
        }
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[3] + 40))(v4[3]);
        v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 72))(v26, 0, v22);
        v30 = v42;
        v31 = v41;
        if (v41)
        {
          v32 = *(const void **)(v41 + 24);
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)v34, (uint64_t)v32);
          if (v35 >= 0)
            v33 = (const char *)v34;
          else
            v33 = (const char *)v34[0];
        }
        else
        {
          v32 = 0;
          v33 = "";
        }
        CAStreamBasicDescription::AsString(&v38, (char *)__p, 0x100uLL, v28, v29);
        fprintf(a2, "\t\t\t (bus%d, en%d) -> (bus%d) %p, {%s}, [%s]\n", v22, v27, v30, v32, v33, (const char *)__p);
        if (v31)
        {
          if (v35 < 0)
            operator delete(v34[0]);
        }
        ++v22;
      }
      while (v22 < (int)((v4[10] - v4[9]) >> 3));
    }
  }
}

void sub_19B796880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(exception_object);
}

void AUGraphNodeBaseV3::AUGraphNodeBaseV3(AUGraphNodeBaseV3 *this, AVAudioNode *a2)
{
  void *v3;
  NSObject *v4;
  NSObject *v5;
  const void **v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E3BE6670;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  v3 = -[AVAudioNode impl](a2, "impl");
  *((_QWORD *)this + 3) = v3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  if (*((_QWORD *)this + 2))
  {
    if (v3)
      goto LABEL_14;
    goto LABEL_9;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v10 = "AVAEInternal.h";
    v11 = 1024;
    v12 = 71;
    v13 = 2080;
    v14 = "AVAEGraphNode.mm";
    v15 = 1024;
    v16 = 141;
    v17 = 2080;
    v18 = "AUGraphNodeBase";
    v19 = 2080;
    v20 = "nil != _avNode";
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != _avNode");
  if (!*((_QWORD *)this + 3))
  {
LABEL_9:
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v10 = "AVAEInternal.h";
      v11 = 1024;
      v12 = 71;
      v13 = 2080;
      v14 = "AVAEGraphNode.mm";
      v15 = 1024;
      v16 = 142;
      v17 = 2080;
      v18 = "AUGraphNodeBase";
      v19 = 2080;
      v20 = "nullptr != _avNodeImpl";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr != _avNodeImpl");
  }
LABEL_14:
  *((_OWORD *)this + 6) = 0u;
  *(_QWORD *)this = off_1E3BE7010;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUGraphNodeBaseV3 *)((char *)this + 152));
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUGraphNodeBaseV3 *)((char *)this + 156));
  *((_DWORD *)this + 40) = 0;
  v6 = (const void **)operator new();
  v7 = (void *)objc_msgSend((id)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 232))(*((_QWORD *)this + 3)), "renderBlock");
  *v6 = 0;
  AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v6, v7);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100]((const void ***)this + 13, v6);
  if (!(*(uint64_t (**)(AUGraphNodeBaseV3 *))(*(_QWORD *)this + 304))(this))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v10 = "AVAEInternal.h";
      v11 = 1024;
      v12 = 71;
      v13 = 2080;
      v14 = "AVAEGraphNode.mm";
      v15 = 1024;
      v16 = 785;
      v17 = 2080;
      v18 = "AUGraphNodeBaseV3";
      v19 = 2080;
      v20 = "RenderBlock()";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "RenderBlock()");
  }
}

void sub_19B796CEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void AUGraphNodeIOV3::AUGraphNodeIOV3(AUGraphNodeIOV3 *this, AVAudioNode *a2)
{
  _QWORD *v2;

  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *v2 = &off_1E3BE67A0;
  v2[21] = 0;
  v2[22] = 0;
}

void AUGraphNodeGenericIOV3::AUGraphNodeGenericIOV3(AUGraphNodeGenericIOV3 *this, AVAudioNode *a2, char a3)
{
  uint64_t v4;

  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)v4 = &off_1E3BE8948;
  *(_BYTE *)(v4 + 184) = a3;
  *(_QWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 200) = 0;
}

void AUGraphMIDINodeV3::AUGraphMIDINodeV3(AUGraphMIDINodeV3 *this, AVAudioNode *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *(_QWORD *)v3 = &off_1E3BE6E78;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 256))(*(_QWORD *)(v3 + 24)) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v7 = "AVAEInternal.h";
      v8 = 1024;
      v9 = 71;
      v10 = 2080;
      v11 = "AVAEGraphNode.mm";
      v12 = 1024;
      v13 = 1167;
      v14 = 2080;
      v15 = "AUGraphMIDINodeV3";
      v16 = 2080;
      v17 = "IsMIDIProcessorNode()";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsMIDIProcessorNode()");
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 304))(v5), "setHostMIDIProtocol:", 2);
}

void sub_19B796F8C(_Unwind_Exception *a1)
{
  const void ***v1;
  const void ***v2;

  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v1 + 23, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v2, 0);
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(v1);
  _Unwind_Resume(a1);
}

void AUGraphSourceNodeV3::AUGraphSourceNodeV3(AUGraphSourceNodeV3 *this, AVAudioNode *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *(_QWORD *)v3 = &off_1E3BE7AC8;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 408))(*(_QWORD *)(v3 + 24)) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v7 = "AVAEInternal.h";
      v8 = 1024;
      v9 = 71;
      v10 = 2080;
      v11 = "AVAEGraphNode.mm";
      v12 = 1024;
      v13 = 1330;
      v14 = 2080;
      v15 = "AUGraphSourceNodeV3";
      v16 = 2080;
      v17 = "NodeImpl()->IsAVAudioSourceNode()";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "NodeImpl()->IsAVAudioSourceNode()");
  }
  (*(void (**)(AUGraphSourceNodeV3 *))(*(_QWORD *)this + 320))(this);
  if (!(*(uint64_t (**)(AUGraphSourceNodeV3 *))(*(_QWORD *)this + 312))(this))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v7 = "AVAEInternal.h";
      v8 = 1024;
      v9 = 71;
      v10 = 2080;
      v11 = "AVAEGraphNode.mm";
      v12 = 1024;
      v13 = 1334;
      v14 = 2080;
      v15 = "AUGraphSourceNodeV3";
      v16 = 2080;
      v17 = "InputBlock()";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "InputBlock()");
  }
}

void sub_19B79723C(_Unwind_Exception *a1)
{
  const void ***v1;

  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUGraphSinkNodeV319AllocateRenderBlockEv_block_invoke(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(a1[4] + 16))();
  v3 = a1[6];
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(void))(a1[5] + 16))();
  atomic_store(result, (unsigned int *)(v3 + 160));
  return result;
}

void AUGraphSinkNodeV3::~AUGraphSinkNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AUGraphSinkNodeV3::IsSinkNode(AUGraphSinkNodeV3 *this)
{
  return 1;
}

void AUGraphSinkNodeV3::AUGraphSinkNodeV3(AUGraphSinkNodeV3 *this, AVAudioNode *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  const void **v9;
  NSObject *v10;
  _BYTE buf[56];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *(_QWORD *)v3 = &off_1E3BE71A8;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 416))(*(_QWORD *)(v3 + 24)) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1359;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "AUGraphSinkNodeV3";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "NodeImpl()->IsSinkNode()";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "NodeImpl()->IsSinkNode()");
  }
  v5 = (*(uint64_t (**)(AUGraphSinkNodeV3 *))(*(_QWORD *)this + 304))(this);
  v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 184);
  if (!v6 || (v7 = *v6) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1371;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "AllocateRenderBlock";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "receiverBlock";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "receiverBlock");
    v7 = 0;
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN17AUGraphSinkNodeV319AllocateRenderBlockEv_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E3BEB958;
  *(_QWORD *)&buf[40] = v7;
  *(_QWORD *)&buf[48] = this;
  *(_QWORD *)&buf[32] = v5;
  v9 = (const void **)operator new();
  *v9 = 0;
  AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v9, buf);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100]((const void ***)this + 13, v9);
  if (!(*(uint64_t (**)(AUGraphSinkNodeV3 *))(*(_QWORD *)this + 304))(this))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1363;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "AUGraphSinkNodeV3";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "RenderBlock()";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "RenderBlock()");
  }
}

void sub_19B7976F4(_Unwind_Exception *a1)
{
  const void ***v1;
  uint64_t v2;

  MEMORY[0x1A1AC5BD4](v2, 0x80C40B8603338);
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(v1);
  _Unwind_Resume(a1);
}

void AUGraphMultiBusNode::AUGraphMultiBusNode(AUGraphMultiBusNode *this, AVAudioNode *a2)
{
  uint64_t v3;
  _DWORD *v4;
  BOOL v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  AUGraphNodeBaseV3::AUGraphNodeBaseV3(this, a2);
  *(_QWORD *)v3 = &off_1E3BE7930;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_QWORD *)(v3 + 232) = 0;
  v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 256))(*(_QWORD *)(v3 + 24));
  v5 = *v4 != 1635085688 || v4[1] == 1836281964;
  if (v5 && ((*(uint64_t (**)(AUGraphMultiBusNode *))(*(_QWORD *)this + 112))(this) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v8 = "AVAEInternal.h";
      v9 = 1024;
      v10 = 71;
      v11 = 2080;
      v12 = "AVAEGraphNode.mm";
      v13 = 1024;
      v14 = 1447;
      v15 = 2080;
      v16 = "AUGraphMultiBusNode";
      v17 = 2080;
      v18 = "IsMixerNode() || IsSplitterNode()";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsMixerNode() || IsSplitterNode()");
  }
}

void sub_19B7978F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a3);
  std::vector<std::unique_ptr<caulk::pooled_semaphore_mutex>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v6 = *(void **)(v3 + 192);
  if (v6)
  {
    *(_QWORD *)(v3 + 200) = v6;
    operator delete(v6);
  }
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 176) = v7;
    operator delete(v7);
  }
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3((const void ***)v3);
  _Unwind_Resume(a1);
}

void sub_19B797A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B797AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B797B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B797BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B797C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

os_log_t ___Z36AVAudioDeviceTestServicePulseToneLogv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.avfaudio", "atpt");
  *v0 = result;
  AVAudioDeviceTestServicePulseToneLog(void)::category = (uint64_t)v0;
  return result;
}

void PulseTone::PulseTone(PulseTone *this, double a2, double a3, double a4, int a5, double a6, double a7, double a8, double a9)
{
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  float v18;
  float v19;
  double v20;
  NSObject *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((double *)this + 3) = a3;
  *((_QWORD *)this + 5) = 0;
  *((double *)this + 9) = a2;
  *((_BYTE *)this + 80) = 0;
  v11 = fmax(a6, 1.0);
  v12 = fmin(a8, v11);
  v13 = 0.0;
  if (v12 != 0.0)
    v13 = a2 / (1000.0 / v12);
  *((double *)this + 8) = v13;
  if (a5)
    v14 = a5;
  else
    v14 = -1;
  *((_DWORD *)this + 13) = v14;
  *((_DWORD *)this + 14) = (int)(a2 / (1000.0 / v11));
  if (a7 == 0.0)
    v15 = 0;
  else
    v15 = (int)(a2 / (1000.0 / a7));
  *((_DWORD *)this + 15) = v15;
  v16 = fmax(a9, 0.0);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = (int)(a2 / (-1000.0 / v16));
  *((_DWORD *)this + 12) = v17;
  v18 = a4 * 0.05;
  v19 = __exp10f(v18);
  v20 = v19;
  if (v19 > 1.0)
  {
    if (AVAudioDeviceTestServicePulseToneLog(void)::once != -1)
      dispatch_once(&AVAudioDeviceTestServicePulseToneLog(void)::once, &__block_literal_global_2496);
    v21 = objc_retainAutorelease(*(id *)AVAudioDeviceTestServicePulseToneLog(void)::category);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = 136315650;
      v23 = "PulseTone.mm";
      v24 = 1024;
      v25 = 142;
      v26 = 2048;
      v27 = v20;
      _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Playing tone above amplitude of 1.0. { amplitude=%f }", (uint8_t *)&v22, 0x1Cu);
    }
  }
  *((double *)this + 4) = v20;
  *((double *)this + 1) = (*((double *)this + 8) + (double)*((int *)this + 14)) / a2;
}

void sub_19B797EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_19B797F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19B798014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7980AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B798150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7981F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B798288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7983D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioMixerNodeImpl::~AVAudioMixerNodeImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AVAudioMixerNodeImpl::ConnectInput(AVAudioNodeImplBase *this, uint64_t a2, AVAudioNodeImplBase *a3, uint64_t a4)
{
  (*(void (**)(AVAudioNodeImplBase *, _QWORD, uint64_t, uint64_t, float))(*(_QWORD *)this + 128))(this, 0, 1, a2, 1.0);
  AVAudioNodeImplBase::ConnectInput(this, a2, a3, a4);
  return 1;
}

void sub_19B7985FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x1020C40C17CD2A5);
  _Unwind_Resume(a1);
}

void sub_19B798918(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F1C4021999281);
  _Unwind_Resume(a1);
}

AVAudioTime *AVAudioClockImpl::CurrentTime(AVAudioClockImpl *this)
{
  int v2;
  __int128 *v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = (__int128 *)((char *)this + 24);
  while (1)
  {
    v4 = atomic_load((unint64_t *)this + 2);
    if ((v4 & 1) == 0)
    {
      v5 = v3[1];
      v9 = *v3;
      v10 = v5;
      v6 = v3[3];
      v11 = v3[2];
      v12 = v6;
      v7 = atomic_load((unint64_t *)this + 2);
      if (v4 == v7)
        break;
    }
    if (++v2 == 5)
    {
      sched_yield();
      v2 = 0;
    }
  }
  return +[AVAudioTime timeWithAudioTimeStamp:sampleRate:](AVAudioTime, "timeWithAudioTimeStamp:sampleRate:", &v9, *((double *)this + 1));
}

uint64_t AVAudioClockImpl::RenderCallback(AVAudioClockImpl *this, _DWORD *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, unsigned int a6, AudioBufferList *a7, double a8, double a9)
{
  unint64_t v9;
  unsigned int v10;
  double v11;
  double v12;
  int v13;
  double v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v26;
  __int128 v27;

  if ((*a2 & 4) != 0)
  {
    atomic_store(a5, (unsigned int *)this + 22);
    v15 = (unint64_t *)((char *)this + 16);
    do
      v16 = __ldaxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = *(_OWORD *)a3;
    v18 = *((_OWORD *)a3 + 1);
    v19 = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)this + 72) = *((_OWORD *)a3 + 3);
    *(_OWORD *)((char *)this + 56) = v19;
    *(_OWORD *)((char *)this + 40) = v18;
    *(_OWORD *)((char *)this + 24) = v17;
    do
      v20 = __ldxr(v15);
    while (__stlxr(v20 + 1, v15));
    if (*((_BYTE *)this + 104))
    {
      v21 = *((_QWORD *)this + 12);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 80))(v21);
    }
  }
  else if ((*a2 & 8) != 0)
  {
    v10 = a3[14];
    if ((v10 & 1) != 0)
    {
      v11 = *((double *)this + 1);
      if (v11 > 0.0)
      {
        v12 = *(double *)a3 + (double)a5;
        if ((~v10 & 3) != 0)
        {
          if ((v10 & 2) != 0)
            return 0;
          v13 = 1;
        }
        else
        {
          if ((v10 & 4) != 0)
          {
            a9 = *((double *)a3 + 2);
            v14 = a9 * 24000000.0;
            v13 = 7;
          }
          else
          {
            v13 = 3;
            v14 = 24000000.0;
          }
          v9 = (unint64_t)((double)*((uint64_t *)a3 + 1) + (v12 - *(double *)a3) * (v14 / v11));
        }
        v22 = (unint64_t *)((char *)this + 16);
        do
          v23 = __ldaxr(v22);
        while (__stxr(v23 + 1, v22));
        *((double *)this + 3) = v12;
        *((_QWORD *)this + 4) = v9;
        *((double *)this + 5) = a9;
        *((_OWORD *)this + 3) = v26;
        *((_OWORD *)this + 4) = v27;
        *((_DWORD *)this + 20) = v13;
        do
          v24 = __ldxr(v22);
        while (__stlxr(v24 + 1, v22));
      }
    }
  }
  return 0;
}

_QWORD *AVAudioClockImpl::StreamFormatListener(_QWORD *this, void *a2, OpaqueAudioComponentInstance *a3, int a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;

  if (a4 == 2 && !a5)
  {
    v5 = this;
    this = (_QWORD *)objc_msgSend((id)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*this + 56))(*this, 0, 1), "sampleRate");
    v5[1] = v6;
  }
  return this;
}

void ___ZN14MIDIPlayerImpl4stopEv_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t MIDIPlayerImpl::finishLoad(MIDIPlayerImpl *this, NSURL *a2)
{
  uint64_t AUGraph;
  uint64_t v4;
  NSObject *v5;
  OpaqueAUGraph *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t NodeCount;
  uint64_t v11;
  NSObject *v12;
  UInt32 v13;
  uint64_t IndNode;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t TrackCount;
  uint64_t v28;
  NSObject *v29;
  UInt32 v30;
  double v31;
  uint64_t Property;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  AUGraph outGraph;
  Boolean outWritable;
  UInt32 outDataSize;
  AudioUnit outAudioUnit;
  AudioComponentDescription outDescription;
  AUNode outNode;
  UInt32 outNumberOfNodes;
  double inData;
  UInt32 ioLength;
  _BYTE buf[12];
  __int16 v49;
  int v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  outGraph = 0;
  AUGraph = MusicSequenceGetAUGraph(this->var2, &outGraph);
  if ((_DWORD)AUGraph)
  {
    v4 = AUGraph;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v49 = 1024;
      v50 = 104;
      v51 = 2080;
      v52 = "AVMIDIPlayer.mm";
      v53 = 1024;
      v54 = 324;
      v55 = 2080;
      v56 = "finishLoad";
      v57 = 2080;
      v58 = "MusicSequenceGetAUGraph(mSequence, &graph)";
      v59 = 1024;
      v60 = v4;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v4);
  }
  v6 = outGraph;
  ioLength = 4096;
  inData = *(double *)&a2;
  outNumberOfNodes = 0;
  v7 = AUGraphOpen(outGraph);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v49 = 1024;
      v50 = 104;
      v51 = 2080;
      v52 = "AVMIDIPlayer.mm";
      v53 = 1024;
      v54 = 460;
      v55 = 2080;
      v56 = "SetUpGraph";
      v57 = 2080;
      v58 = "AUGraphOpen(inGraph)";
      v59 = 1024;
      v60 = v8;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v8);
  }
  NodeCount = AUGraphGetNodeCount(v6, &outNumberOfNodes);
  if ((_DWORD)NodeCount)
  {
    v11 = NodeCount;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v49 = 1024;
      v50 = 104;
      v51 = 2080;
      v52 = "AVMIDIPlayer.mm";
      v53 = 1024;
      v54 = 462;
      v55 = 2080;
      v56 = "SetUpGraph";
      v57 = 2080;
      v58 = "AUGraphGetNodeCount (inGraph, &nodeCount)";
      v59 = 1024;
      v60 = v11;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v11);
  }
  if (outNumberOfNodes)
  {
    v13 = 0;
    while (1)
    {
      outNode = 0;
      IndNode = AUGraphGetIndNode(v6, v13, &outNode);
      if ((_DWORD)IndNode)
      {
        v15 = IndNode;
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v49 = 1024;
          v50 = 104;
          v51 = 2080;
          v52 = "AVMIDIPlayer.mm";
          v53 = 1024;
          v54 = 467;
          v55 = 2080;
          v56 = "SetUpGraph";
          v57 = 2080;
          v58 = "AUGraphGetIndNode(inGraph, i, &node)";
          v59 = 1024;
          v60 = v15;
          _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v15);
      }
      outAudioUnit = 0;
      outDataSize = 0;
      outWritable = 0;
      v17 = AUGraphNodeInfo(v6, outNode, &outDescription, &outAudioUnit);
      if ((_DWORD)v17)
      {
        v18 = v17;
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v49 = 1024;
          v50 = 104;
          v51 = 2080;
          v52 = "AVMIDIPlayer.mm";
          v53 = 1024;
          v54 = 473;
          v55 = 2080;
          v56 = "SetUpGraph";
          v57 = 2080;
          v58 = "AUGraphNodeInfo(inGraph, node, &desc, &unit)";
          v59 = 1024;
          v60 = v18;
          _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v18);
      }
      if (inData != 0.0
        && outDescription.componentType == 1635085685
        && !AudioUnitGetPropertyInfo(outAudioUnit, 0x44Cu, 0, 0, &outDataSize, &outWritable))
      {
        if (outWritable)
        {
          result = AudioUnitSetProperty(outAudioUnit, 0x44Cu, 0, 0, &inData, 8u);
          if ((_DWORD)result)
            break;
        }
      }
      v21 = AudioUnitSetProperty(outAudioUnit, 0xEu, 0, 0, &ioLength, 4u);
      if ((_DWORD)v21)
      {
        v22 = v21;
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "AVAEInternal.h";
          v49 = 1024;
          v50 = 104;
          v51 = 2080;
          v52 = "AVMIDIPlayer.mm";
          v53 = 1024;
          v54 = 497;
          v55 = 2080;
          v56 = "SetUpGraph";
          v57 = 2080;
          v58 = "AudioUnitSetProperty (unit, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 0, &numFra"
                "mes, sizeof(numFrames))";
          v59 = 1024;
          v60 = v22;
          _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v22);
      }
      if (++v13 >= outNumberOfNodes)
        goto LABEL_45;
    }
  }
  else
  {
LABEL_45:
    v24 = AUGraphInitialize(v6);
    if ((_DWORD)v24)
    {
      v25 = v24;
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v26 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        v49 = 1024;
        v50 = 104;
        v51 = 2080;
        v52 = "AVMIDIPlayer.mm";
        v53 = 1024;
        v54 = 500;
        v55 = 2080;
        v56 = "SetUpGraph";
        v57 = 2080;
        v58 = "AUGraphInitialize(inGraph)";
        v59 = 1024;
        v60 = v25;
        _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v25);
    }
    LODWORD(outAudioUnit) = 0;
    TrackCount = MusicSequenceGetTrackCount(this->var2, (UInt32 *)&outAudioUnit);
    if ((_DWORD)TrackCount)
    {
      v28 = TrackCount;
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v29 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        v49 = 1024;
        v50 = 104;
        v51 = 2080;
        v52 = "AVMIDIPlayer.mm";
        v53 = 1024;
        v54 = 332;
        v55 = 2080;
        v56 = "finishLoad";
        v57 = 2080;
        v58 = "MusicSequenceGetTrackCount(mSequence, &trackCount)";
        v59 = 1024;
        v60 = v28;
        _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v28);
    }
    if ((_DWORD)outAudioUnit)
    {
      v30 = 0;
      v31 = 0.0;
      do
      {
        *(_QWORD *)&outDescription.componentType = 0;
        MusicSequenceGetIndTrack(this->var2, v30, (MusicTrack *)&outDescription);
        inData = 0.0;
        ioLength = 8;
        Property = MusicTrackGetProperty(*(MusicTrack *)&outDescription.componentType, 5u, &inData, &ioLength);
        if ((_DWORD)Property)
        {
          v33 = Property;
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v34 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = "AVAEInternal.h";
            v49 = 1024;
            v50 = 104;
            v51 = 2080;
            v52 = "AVMIDIPlayer.mm";
            v53 = 1024;
            v54 = 338;
            v55 = 2080;
            v56 = "finishLoad";
            v57 = 2080;
            v58 = "MusicTrackGetProperty(track, kSequenceTrackProperty_TrackLength, &length, &plength)";
            v59 = 1024;
            v60 = v33;
            _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v33);
        }
        if (inData > v31)
          v31 = inData;
        ++v30;
      }
      while (v30 < outAudioUnit);
    }
    else
    {
      v31 = 0.0;
    }
    this->var3 = v31;
    v35 = MusicSequenceSetUserCallback(this->var2, (MusicSequenceUserCallback)MIDIPlayerImpl::userCallback, this);
    if ((_DWORD)v35)
    {
      v36 = v35;
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        v49 = 1024;
        v50 = 104;
        v51 = 2080;
        v52 = "AVMIDIPlayer.mm";
        v53 = 1024;
        v54 = 344;
        v55 = 2080;
        v56 = "finishLoad";
        v57 = 2080;
        v58 = "MusicSequenceSetUserCallback(mSequence, userCallback, this)";
        v59 = 1024;
        v60 = v36;
        _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v36);
    }
    *(_QWORD *)buf = 0;
    result = MusicSequenceGetIndTrack(this->var2, 0, (MusicTrack *)buf);
    if (!(_DWORD)result)
    {
      *(_QWORD *)&outDescription.componentType = 0x8600000001;
      return MusicTrackNewUserEvent(*(MusicTrack *)buf, v31, (const MusicEventUserData *)&outDescription);
    }
  }
  return result;
}

void MIDIPlayerImpl::userCallback(MIDIPlayerImpl *this, void *a2, OpaqueMusicSequence *a3, OpaqueMusicTrack *a4, double a5, const MusicEventUserData *a6, double a7, double a8)
{
  id var4;
  OpaqueMusicPlayer *var1;
  NSObject *var5;
  _QWORD v11[6];

  if (*(_DWORD *)a4 == 1 && *((unsigned __int8 *)a4 + 4) == 134)
  {
    var4 = this->var4;
    if (var4)
    {
      var1 = this->var1;
      this->var4 = 0;
      var5 = this->var5;
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___ZN14MIDIPlayerImpl12userCallbackEPvP19OpaqueMusicSequenceP16OpaqueMusicTrackdPK18MusicEventUserDatadd_block_invoke;
      v11[3] = &unk_1E3BECB48;
      v11[4] = var4;
      v11[5] = var1;
      dispatch_async(var5, v11);
    }
  }
}

void ___ZN14MIDIPlayerImpl12userCallbackEPvP19OpaqueMusicSequenceP16OpaqueMusicTrackdPK18MusicEventUserDatadd_block_invoke(uint64_t a1)
{
  MusicPlayerStop(*(MusicPlayer *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_19B79AE98(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v3 = v2;
    __cxa_end_catch();
    JUMPOUT(0x19B79AE0CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_19B79B054(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AVVCKeepAliveImpl_AudioQueue::create(AudioQueueRef *this)
{
  AudioQueueRef *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  const char *v9;
  id v10;
  id v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  id v15;
  _BYTE v17[8];
  uint8_t v18[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const __CFString *v23;
  AudioStreamBasicDescription buf;
  _BYTE v25[160];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  ElapsedTime::ElapsedTime((ElapsedTime *)v25, "create", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v17, "createKeepAliveQueue");
  v2 = this + 1;
  if (!this[1])
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AVVCKeepAliveImpl_AudioQueue.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 36;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating keepAliveQueue", (uint8_t *)&buf, 0x12u);
    }

LABEL_10:
    *(_QWORD *)&buf.mBitsPerChannel = 16;
    buf.mSampleRate = 16000.0;
    *(_OWORD *)&buf.mFormatID = xmmword_19B85A1C0;
    *(_QWORD *)&buf.mBytesPerFrame = 0x100000002;
    v6 = AudioQueueNewOutput(&buf, (AudioQueueOutputCallback)AQOutputCallback, this, 0, 0, 0, this + 1);
    v3 = v6;
    if ((_DWORD)v6)
    {
      if ((v6 + 199999) > 0x61A7E)
      {
        if (kAVVCScope)
        {
          v7 = *(id *)kAVVCScope;
          if (!v7)
            goto LABEL_41;
        }
        else
        {
          v7 = MEMORY[0x1E0C81028];
          v10 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        *(_DWORD *)v18 = 136315650;
        v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        v20 = 1024;
        v21 = 42;
        v22 = 1024;
        LODWORD(v23) = v3;
        v9 = "%25s:%-5d ERROR: createKeepAliveQueue: AudioQueueNewOutput err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          v7 = *(id *)kAVVCScope;
          if (!v7)
            goto LABEL_41;
        }
        else
        {
          v7 = MEMORY[0x1E0C81028];
          v8 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        *(_DWORD *)v18 = 136315650;
        v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        v20 = 1024;
        v21 = 42;
        v22 = 1024;
        LODWORD(v23) = v3;
        v9 = "%25s:%-5d ERROR: createKeepAliveQueue: AudioQueueNewOutput err %d";
      }
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, v9, v18, 0x18u);
    }
    else
    {
      v3 = AudioQueueSetProperty(*v2, 0x63756964u, &AudioQueueProperty_KeepAliveQueueClientName, 8u);
      if ((_DWORD)v3)
      {
        if (kAVVCScope)
        {
          v7 = *(id *)kAVVCScope;
          if (!v7)
            goto LABEL_41;
        }
        else
        {
          v7 = MEMORY[0x1E0C81028];
          v11 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        *(_DWORD *)v18 = 136315650;
        v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        v20 = 1024;
        v21 = 49;
        v22 = 2112;
        v23 = CFSTR("AVVoiceController_KeepAliveQueue");
        v12 = "%25s:%-5d FAILED _createKeepAliveQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
        v13 = v7;
        v14 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        if (kAVVCScope)
        {
          v7 = *(id *)kAVVCScope;
          if (!v7)
            goto LABEL_41;
        }
        else
        {
          v7 = MEMORY[0x1E0C81028];
          v15 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_40;
        *(_DWORD *)v18 = 136315650;
        v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        v20 = 1024;
        v21 = 51;
        v22 = 2112;
        v23 = CFSTR("AVVoiceController_KeepAliveQueue");
        v12 = "%25s:%-5d _createKeepAliveQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
        v13 = v7;
        v14 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl(&dword_19B733000, v13, v14, v12, v18, 0x1Cu);
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = 0;
LABEL_41:
  TraceMethod::~TraceMethod((TraceMethod *)v17);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v25);
  return v3;
}

void sub_19B79B4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  _Unwind_Resume(a1);
}

uint64_t AVVCKeepAliveImpl_AudioQueue::start(AVVCKeepAliveImpl_AudioQueue *this)
{
  NSObject *v2;
  id v3;
  _BYTE v5[8];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v5, "startKeepAliveQueue");
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v7 = "AVVCKeepAliveImpl_AudioQueue.mm";
    v8 = 1024;
    v9 = 103;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to start keepAliveQueue", buf, 0x12u);
  }

LABEL_8:
  AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(this, 1);
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return 0;
}

void sub_19B79B5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t AVVCKeepAliveImpl_AudioQueue::stop(AVVCKeepAliveImpl_AudioQueue *this)
{
  NSObject *v2;
  id v3;
  _BYTE v5[8];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v5, "stopKeepAliveQueue");
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v7 = "AVVCKeepAliveImpl_AudioQueue.mm";
    v8 = 1024;
    v9 = 112;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to stop keepAliveQueue", buf, 0x12u);
  }

LABEL_8:
  AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(this, 0);
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return 0;
}

void sub_19B79B708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

OpaqueAudioQueue *AVVCKeepAliveImpl_AudioQueue::destroy(AVVCKeepAliveImpl_AudioQueue *this)
{
  OpaqueAudioQueue *v2;
  OSStatus v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  _BYTE v9[8];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  OSStatus v15;
  uint8_t v16[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v9, "_destroyKeepAliveQueue");
  v2 = (OpaqueAudioQueue *)*((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_18;
  *((_QWORD *)this + 1) = 0;
  ElapsedTime::ElapsedTime((ElapsedTime *)v16, "destroy", "_destroyKeepAliveQueue : AudioQueueStop", 0);
  v3 = AudioQueueStop(v2, 1u);
  if (v3)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v12 = 1024;
      v13 = 128;
      v14 = 1024;
      v15 = v3;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d _destroyKeepAliveQueue, AudioQueueDispose returned error : %d", buf, 0x18u);
    }

  }
LABEL_10:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v16);
  v2 = (OpaqueAudioQueue *)AudioQueueDispose(v2, 0);
  if ((_DWORD)v2)
  {
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_18;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v16 = 136315650;
      v17 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v18 = 1024;
      v19 = 131;
      v20 = 1024;
      v21 = (int)v2;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d _destroyKeepAliveQueue, AudioQueueDispose returned error : %d", v16, 0x18u);
    }

  }
LABEL_18:
  TraceMethod::~TraceMethod((TraceMethod *)v9);
  return v2;
}

void sub_19B79B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void AVVCKeepAliveImpl_AudioQueue::~AVVCKeepAliveImpl_AudioQueue(AVVCKeepAliveImpl_AudioQueue *this)
{
  AVVCKeepAliveImpl_AudioQueue::~AVVCKeepAliveImpl_AudioQueue(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E3BE92E0;
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "AVVCKeepAliveImpl_AudioQueue.mm";
    v5 = 1024;
    v6 = 137;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCKeepAliveImpl_AudioQueue destroyed", (uint8_t *)&v3, 0x12u);
  }

}

void AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(AVVCKeepAliveImpl_AudioQueue *this, int a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  const char *v11;
  const char *v12;
  OSStatus v13;
  NSObject *v14;
  id v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  id v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  id v24;
  id v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  id v29;
  id v30;
  id v31;
  _BYTE v32[8];
  uint8_t v33[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  OSStatus v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  _BYTE v47[160];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  ElapsedTime::ElapsedTime((ElapsedTime *)v47, "keepHardwareActive", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v32, "keepHardwareActive");
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_10;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "false";
    v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    *(_DWORD *)buf = 136315650;
    if (a2)
      v6 = "true";
    v41 = 1024;
    v42 = 61;
    v43 = 2080;
    v44 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d keep-alive _keepHardwareActive: %s", buf, 0x1Cu);
  }

LABEL_10:
  if (!*((_QWORD *)this + 1))
  {
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_78;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_77;
    *(_DWORD *)buf = 136315394;
    v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    v41 = 1024;
    v42 = 94;
    v16 = "%25s:%-5d keep-alive keepHardwareActive: queue is null -- noop";
    v17 = v9;
    v18 = OS_LOG_TYPE_DEFAULT;
    v19 = 18;
    goto LABEL_76;
  }
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "keepHardwareActive: queue running check", 0);
  v7 = QueueIsRunning(*((OpaqueAudioQueue **)this + 1));
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_25;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "FALSE";
    if (a2)
      v11 = "TRUE";
    v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    v41 = 1024;
    v42 = 71;
    v12 = "Running";
    *(_DWORD *)buf = 136315906;
    v44 = v11;
    v43 = 2080;
    if (!v7)
      v12 = "Not Running";
    v45 = 2080;
    v46 = v12;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC keep-alive state : makeActive - %s : QueueRuning - %s", buf, 0x26u);
  }

LABEL_25:
  if (((a2 ^ 1 | v7) & 1) == 0)
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "mKeepAliveQueue: AudioQueueStart", 0);
    v13 = AudioQueueStart(*((AudioQueueRef *)this + 1), 0);
    if (v13)
    {
      if (kAVVCScope)
      {
        v14 = *(id *)kAVVCScope;
        if (!v14)
          goto LABEL_61;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
        v20 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)v33 = 136315650;
      v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v35 = 1024;
      v36 = 79;
      v37 = 1024;
      v38 = v13;
      v21 = "%25s:%-5d AVVC started keep-alive queue but failed (%d)";
      v22 = v14;
      v23 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (kAVVCScope)
      {
        v14 = *(id *)kAVVCScope;
        if (!v14)
          goto LABEL_61;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
        v24 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        goto LABEL_60;
      *(_DWORD *)v33 = 136315650;
      v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v35 = 1024;
      v36 = 81;
      v37 = 1024;
      v38 = 0;
      v21 = "%25s:%-5d AVVC started keep-alive queue (%d)";
      v22 = v14;
      v23 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl(&dword_19B733000, v22, v23, v21, v33, 0x18u);
    goto LABEL_60;
  }
  if ((a2 & 1) != 0 || ((v7 ^ 1) & 1) != 0)
    goto LABEL_78;
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "mKeepAliveQueue: AudioQueueStop", 0);
  v13 = AudioQueueStop(*((AudioQueueRef *)this + 1), 1u);
  if (v13)
  {
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_61;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v33 = 136315650;
      v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v35 = 1024;
      v36 = 87;
      v37 = 1024;
      v38 = v13;
      v26 = "%25s:%-5d AVVC stopped keep-alive queue but failed (%d)";
      v27 = v14;
      v28 = OS_LOG_TYPE_ERROR;
LABEL_59:
      _os_log_impl(&dword_19B733000, v27, v28, v26, v33, 0x18u);
      goto LABEL_60;
    }
    goto LABEL_60;
  }
  if (!kAVVCScope)
  {
    v14 = MEMORY[0x1E0C81028];
    v29 = MEMORY[0x1E0C81028];
LABEL_57:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v33 = 136315650;
      v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v35 = 1024;
      v36 = 89;
      v37 = 1024;
      v38 = 0;
      v26 = "%25s:%-5d AVVC stopped keep-alive queue (%d)";
      v27 = v14;
      v28 = OS_LOG_TYPE_DEBUG;
      goto LABEL_59;
    }
LABEL_60:

    goto LABEL_61;
  }
  v14 = *(id *)kAVVCScope;
  if (v14)
    goto LABEL_57;
LABEL_61:
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (v13)
  {
    if ((v13 + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        v9 = *(id *)kAVVCScope;
        if (!v9)
          goto LABEL_78;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
        v31 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_77;
      *(_DWORD *)buf = 136315650;
      v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v41 = 1024;
      v42 = 91;
      v43 = 1024;
      LODWORD(v44) = v13;
      v16 = "%25s:%-5d ERROR: _keepHardwareActive: AudioQueueStart/Stop err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v9 = *(id *)kAVVCScope;
        if (!v9)
          goto LABEL_78;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
        v30 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_77;
      *(_DWORD *)buf = 136315650;
      v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
      v41 = 1024;
      v42 = 91;
      v43 = 1024;
      LODWORD(v44) = v13;
      v16 = "%25s:%-5d ERROR: _keepHardwareActive: AudioQueueStart/Stop err %d";
    }
    v17 = v9;
    v18 = OS_LOG_TYPE_ERROR;
    v19 = 24;
LABEL_76:
    _os_log_impl(&dword_19B733000, v17, v18, v16, buf, v19);
LABEL_77:

  }
LABEL_78:
  TraceMethod::~TraceMethod((TraceMethod *)v32);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v47);
}

void sub_19B79C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a15);
  TraceMethod::~TraceMethod((TraceMethod *)&a10);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a36);
  _Unwind_Resume(a1);
}

id AVVCRouteManager::getRecordDeviceUID(id *this)
{
  id v2;
  std::mutex *v3;

  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (IsSerializationEnabled(void)::enable)
  {
    v2 = this[2];
  }
  else
  {
    v3 = (std::mutex *)(this + 7);
    std::mutex::lock((std::mutex *)(this + 7));
    v2 = this[2];
    std::mutex::unlock(v3);
  }
  return v2;
}

void AVVCRouteManager::getRecordRoute(uint64_t a1, void **a2)
{
  std::mutex *v4;
  int v5;
  uint64_t v6;
  void *v7;

  v4 = (std::mutex *)(a1 + 56);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock(v4);
  v6 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v7 = *a2;
  *a2 = (void *)v6;

  if (!v5)
    std::mutex::unlock(v4);
}

void sub_19B79C268(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (!v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AVVCRouteManager::isOutputHandsFree(id *this)
{
  std::mutex *v2;
  int v3;
  uint64_t v4;

  v2 = (std::mutex *)(this + 7);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock(v2);
  if ((objc_msgSend(this[5], "isEqualToString:", *MEMORY[0x1E0CFF128]) & 1) == 0
    && (objc_msgSend(this[5], "isEqualToString:", *MEMORY[0x1E0CFF140]) & 1) == 0
    && (objc_msgSend(this[5], "isEqualToString:", *MEMORY[0x1E0CFF158]) & 1) == 0)
  {
    v4 = objc_msgSend(this[5], "isEqualToString:", *MEMORY[0x1E0CFF178]) ^ 1;
    if (v3)
      return v4;
    goto LABEL_9;
  }
  v4 = 0;
  if (!v3)
LABEL_9:
    std::mutex::unlock(v2);
  return v4;
}

void sub_19B79C360(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (!v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AVVCRouteManager::isOutputWiredHeadset(id *this)
{
  std::mutex *v2;
  int v3;
  uint64_t v4;

  v2 = (std::mutex *)(this + 7);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock(v2);
  v4 = objc_msgSend(this[5], "isEqualToString:", *MEMORY[0x1E0CFF158]);
  if (!v3)
    std::mutex::unlock(v2);
  return v4;
}

void sub_19B79C404(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (!v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t PlatformUtilities_iOS::GetProductType(PlatformUtilities_iOS *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck == 1)
    return PlatformUtilities_iOS::GetProductType(void)::sType;
  PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck = 1;
  v2 = MGGetProductType();
  if (v2 <= 2144123135)
  {
    if (v2 > 1309571157)
    {
      if (v2 > 1701146936)
      {
        if (v2 <= 2021146988)
        {
          if (v2 > 1834147426)
          {
            if (v2 <= 1895344377)
            {
              if (v2 == 1834147427)
                goto LABEL_277;
              if (v2 != 1868379043)
              {
                if (v2 == 1878257790)
                {
                  result = 75;
                  goto LABEL_409;
                }
                goto LABEL_408;
              }
              goto LABEL_191;
            }
            if (v2 == 1895344378)
            {
              result = 80;
              goto LABEL_409;
            }
            if (v2 == 1990293942)
            {
              result = 128;
              goto LABEL_409;
            }
            v6 = 2001966017;
LABEL_263:
            if (v2 != v6)
              goto LABEL_408;
            goto LABEL_264;
          }
          if (v2 <= 1737882205)
          {
            switch(v2)
            {
              case 1701146937:
                result = 43;
                goto LABEL_409;
              case 1721691077:
                result = 16;
                goto LABEL_409;
              case 1733600853:
                result = 116;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 1737882206)
          {
            result = 104;
            goto LABEL_409;
          }
          if (v2 != 1744899922)
          {
            if (v2 == 1756509290)
            {
              result = 132;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_321;
        }
        if (v2 <= 2081274471)
        {
          if (v2 > 2048538370)
          {
            switch(v2)
            {
              case 2048538371:
                result = 54;
                goto LABEL_409;
              case 2078329141:
                result = 29;
                goto LABEL_409;
              case 2080700391:
                result = 40;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 2021146989)
          {
            result = 18;
            goto LABEL_409;
          }
          if (v2 == 2023824667)
            goto LABEL_191;
          if (v2 != 2032616841)
            goto LABEL_408;
          goto LABEL_326;
        }
        if (v2 <= 2103978417)
        {
          if (v2 == 2081274472)
            goto LABEL_314;
          if (v2 == 2085054105)
          {
            result = 146;
            goto LABEL_409;
          }
          if (v2 != 2089455188)
            goto LABEL_408;
LABEL_161:
          result = 95;
          goto LABEL_409;
        }
        if (v2 != 2103978418)
        {
          if (v2 == 2132302344)
          {
            result = 136;
            goto LABEL_409;
          }
          v9 = 2141052862;
          goto LABEL_320;
        }
LABEL_332:
        result = 86;
        goto LABEL_409;
      }
      if (v2 > 1419435330)
      {
        if (v2 <= 1559256612)
        {
          if (v2 > 1517755654)
          {
            switch(v2)
            {
              case 1517755655:
                result = 150;
                goto LABEL_409;
              case 1540760353:
                result = 5;
                goto LABEL_409;
              case 1549248876:
                result = 151;
                goto LABEL_409;
            }
          }
          else
          {
            switch(v2)
            {
              case 1419435331:
                result = 130;
                goto LABEL_409;
              case 1429914406:
                result = 23;
                goto LABEL_409;
              case 1434404433:
                result = 17;
                goto LABEL_409;
            }
          }
          goto LABEL_408;
        }
        if (v2 <= 1608945769)
        {
          switch(v2)
          {
            case 1559256613:
              result = 49;
              goto LABEL_409;
            case 1573906122:
              result = 126;
              goto LABEL_409;
            case 1602181456:
              result = 142;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 == 1608945770)
        {
          result = 169;
          goto LABEL_409;
        }
        if (v2 != 1625227434)
        {
          if (v2 == 1644180312)
          {
            result = 133;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_329:
        result = 94;
        goto LABEL_409;
      }
      if (v2 > 1373516432)
      {
        if (v2 > 1408738133)
        {
          switch(v2)
          {
            case 1408738134:
              result = 138;
              goto LABEL_409;
            case 1412429328:
              result = 59;
              goto LABEL_409;
            case 1415625992:
              result = 124;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 1373516433)
        {
          if (v2 == 1380747801)
          {
            result = 115;
            goto LABEL_409;
          }
          if (v2 == 1402208364)
          {
            result = 118;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_191;
      }
      if (v2 <= 1353145732)
      {
        if (v2 == 1309571158)
        {
          result = 129;
          goto LABEL_409;
        }
        if (v2 == 1325975682)
        {
          result = 61;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 != 1353145733)
      {
        if (v2 != 1364038516)
        {
          if (v2 == 1371389549)
          {
            result = 27;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
LABEL_264:
      result = 82;
      goto LABEL_409;
    }
    if (v2 > 676119127)
    {
      if (v2 <= 1060988940)
      {
        if (v2 <= 776033018)
        {
          if (v2 <= 698697054)
          {
            if (v2 == 676119128)
            {
              result = 134;
              goto LABEL_409;
            }
            if (v2 == 689804742)
            {
              result = 34;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 != 698697055)
          {
            if (v2 != 746003606)
            {
              if (v2 != 761631964)
                goto LABEL_408;
              goto LABEL_327;
            }
            goto LABEL_277;
          }
LABEL_313:
          result = 171;
          goto LABEL_409;
        }
        if (v2 <= 896202453)
        {
          if (v2 == 776033019)
          {
            result = 51;
            goto LABEL_409;
          }
          if (v2 == 810906663)
            goto LABEL_136;
          v4 = 820711327;
          goto LABEL_311;
        }
        if (v2 == 896202454)
        {
          result = 65;
          goto LABEL_409;
        }
        if (v2 != 910181310)
        {
          v8 = 952317141;
          goto LABEL_254;
        }
LABEL_326:
        result = 25;
        goto LABEL_409;
      }
      if (v2 <= 1234705394)
      {
        if (v2 > 1114644380)
        {
          if (v2 == 1114644381)
          {
            result = 76;
            goto LABEL_409;
          }
          if (v2 != 1119807502)
          {
            if (v2 == 1169082144)
            {
              result = 31;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
LABEL_272:
          result = 45;
          goto LABEL_409;
        }
        switch(v2)
        {
          case 1060988941:
            result = 9;
            goto LABEL_409;
          case 1085318934:
            result = 119;
            goto LABEL_409;
          case 1110205732:
            result = 42;
            goto LABEL_409;
        }
LABEL_408:
        result = 0;
        goto LABEL_409;
      }
      if (v2 > 1293446024)
      {
        if (v2 != 1293446025)
        {
          if (v2 == 1294429942)
          {
            result = 135;
            goto LABEL_409;
          }
          v3 = 1302273958;
          goto LABEL_289;
        }
        goto LABEL_332;
      }
      if (v2 == 1234705395)
      {
        result = 113;
        goto LABEL_409;
      }
      if (v2 != 1280441783)
      {
        if (v2 == 1280909812)
        {
          result = 140;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
    }
    else
    {
      if (v2 > 262180326)
      {
        if (v2 > 358923951)
        {
          if (v2 > 445396641)
          {
            if (v2 == 445396642)
            {
              result = 105;
              goto LABEL_409;
            }
            if (v2 == 502329937)
            {
              result = 22;
              goto LABEL_409;
            }
            if (v2 != 551446205)
              goto LABEL_408;
            goto LABEL_272;
          }
          if (v2 == 358923952)
          {
            result = 114;
            goto LABEL_409;
          }
          if (v2 != 363237283)
          {
            if (v2 == 425046865)
            {
              result = 145;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_321;
        }
        if (v2 <= 341800272)
        {
          switch(v2)
          {
            case 262180327:
              result = 111;
              goto LABEL_409;
            case 337183581:
              result = 11;
              goto LABEL_409;
            case 340218669:
              result = 99;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 341800273)
        {
          if (v2 == 344862120)
          {
            result = 103;
            goto LABEL_409;
          }
          if (v2 == 355234908)
          {
            result = 117;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_264;
      }
      if (v2 <= 88647036)
      {
        if (v2 <= 40511011)
        {
          if (v2 == 23433786)
          {
            result = 55;
            goto LABEL_409;
          }
          if (v2 == 33245053)
          {
            result = 62;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 == 40511012)
        {
          result = 122;
          goto LABEL_409;
        }
        if (v2 == 42878382)
        {
          result = 12;
          goto LABEL_409;
        }
        if (v2 != 79936591)
          goto LABEL_408;
        goto LABEL_171;
      }
      if (v2 > 173258741)
      {
        if (v2 == 173258742)
        {
          result = 53;
          goto LABEL_409;
        }
        if (v2 != 228444038)
        {
          v7 = 253148925;
          goto LABEL_238;
        }
        goto LABEL_325;
      }
      if (v2 == 88647037)
        goto LABEL_331;
      if (v2 == 133314240)
      {
        result = 38;
        goto LABEL_409;
      }
      if (v2 != 157833461)
        goto LABEL_408;
    }
    result = 72;
    goto LABEL_409;
  }
  if (v2 > 3215673113)
  {
    if (v2 > 3707345670)
    {
      if (v2 <= 3885279869)
      {
        if (v2 <= 3819635029)
        {
          if (v2 <= 3743999267)
          {
            switch(v2)
            {
              case 3707345671:
                goto LABEL_272;
              case 3711192744:
                result = 78;
                goto LABEL_409;
              case 3742999858:
                result = 147;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 3743999268)
          {
            result = 24;
            goto LABEL_409;
          }
          if (v2 == 3767261006)
          {
            result = 141;
            goto LABEL_409;
          }
          v6 = 3801472101;
          goto LABEL_263;
        }
        if (v2 <= 3863625341)
        {
          switch(v2)
          {
            case 3819635030:
              result = 148;
              goto LABEL_409;
            case 3825599860:
              result = 20;
              goto LABEL_409;
            case 3856877970:
              result = 98;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 3863625342)
        {
          if (v2 == 3865897231)
          {
            result = 73;
            goto LABEL_409;
          }
          if (v2 == 3865922942)
          {
            result = 50;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_328:
        result = 87;
        goto LABEL_409;
      }
      if (v2 > 4067129263)
      {
        if (v2 > 4232256924)
        {
          switch(v2)
          {
            case 4232256925:
              result = 102;
              goto LABEL_409;
            case 4240173202:
              result = 2;
              goto LABEL_409;
            case 4242862982:
              result = 74;
              goto LABEL_409;
          }
        }
        else
        {
          switch(v2)
          {
            case 4067129264:
              result = 127;
              goto LABEL_409;
            case 4172444931:
              result = 120;
              goto LABEL_409;
            case 4201643249:
              result = 33;
              goto LABEL_409;
          }
        }
        goto LABEL_408;
      }
      if (v2 > 3953847431)
      {
        switch(v2)
        {
          case 3953847432:
            result = 149;
            goto LABEL_409;
          case 4025247511:
            result = 121;
            goto LABEL_409;
          case 4055323051:
            result = 52;
            goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 == 3885279870)
      {
        result = 30;
        goto LABEL_409;
      }
      if (v2 != 3933865620)
      {
        if (v2 == 3933982784)
        {
          result = 47;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_321;
    }
    if (v2 > 3540156651)
    {
      if (v2 <= 3637438249)
      {
        if (v2 > 3585085678)
        {
          if (v2 == 3585085679)
          {
            result = 10;
            goto LABEL_409;
          }
          if (v2 != 3599094683)
          {
            v5 = 3636345305;
LABEL_217:
            if (v2 != v5)
              goto LABEL_408;
            goto LABEL_295;
          }
          goto LABEL_328;
        }
        if (v2 == 3540156652)
        {
          result = 85;
          goto LABEL_409;
        }
        if (v2 != 3543203160)
        {
          if (v2 == 3571532206)
          {
            result = 139;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_321:
        result = 170;
        goto LABEL_409;
      }
      if (v2 > 3670339450)
      {
        if (v2 != 3670339451)
        {
          if (v2 != 3677894691)
          {
            if (v2 == 3683904382)
            {
              result = 125;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_330;
        }
        goto LABEL_321;
      }
      if (v2 == 3637438250)
      {
        result = 46;
        goto LABEL_409;
      }
      if (v2 != 3645319985)
      {
        if (v2 == 3663011141)
        {
          result = 144;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_325:
      result = 66;
      goto LABEL_409;
    }
    if (v2 > 3348380075)
    {
      if (v2 > 3402870383)
      {
        if (v2 == 3402870384)
        {
          result = 64;
          goto LABEL_409;
        }
        if (v2 != 3417429877)
        {
          if (v2 == 3455223061)
          {
            result = 77;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
      if (v2 == 3348380076)
      {
        result = 4;
        goto LABEL_409;
      }
      if (v2 != 3361025853)
      {
        if (v2 == 3397214291)
        {
          result = 68;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_161;
    }
    if (v2 > 3228373940)
    {
      if (v2 != 3228373941)
      {
        if (v2 == 3242623367)
        {
          result = 15;
          goto LABEL_409;
        }
        if (v2 == 3300281076)
        {
          result = 48;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_329;
    }
    if (v2 == 3215673114)
    {
      result = 69;
      goto LABEL_409;
    }
    v9 = 3217792190;
LABEL_320:
    if (v2 != v9)
      goto LABEL_408;
    goto LABEL_321;
  }
  if (v2 <= 2673319455)
  {
    if (v2 > 2385671068)
    {
      if (v2 <= 2516717267)
      {
        if (v2 <= 2454275342)
        {
          if (v2 != 2385671069)
          {
            if (v2 == 2418348558)
            {
              result = 123;
              goto LABEL_409;
            }
            if (v2 == 2445473385)
            {
              result = 112;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
LABEL_304:
          result = 44;
          goto LABEL_409;
        }
        if (v2 == 2454275343)
        {
          result = 57;
          goto LABEL_409;
        }
        if (v2 == 2458172802)
          goto LABEL_295;
        v7 = 2468178735;
LABEL_238:
        if (v2 == v7)
        {
          result = 108;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 <= 2628394913)
      {
        if (v2 == 2516717268)
          goto LABEL_303;
        if (v2 == 2614323575)
          goto LABEL_304;
        if (v2 != 2622433984)
          goto LABEL_408;
LABEL_136:
        result = 88;
        goto LABEL_409;
      }
      if (v2 == 2628394914)
        goto LABEL_277;
      if (v2 != 2634105757)
      {
        if (v2 == 2644487444)
        {
          result = 84;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_330:
      result = 92;
      goto LABEL_409;
    }
    if (v2 > 2262113698)
    {
      if (v2 <= 2309863437)
      {
        if (v2 != 2262113699)
        {
          if (v2 == 2270970153)
          {
            result = 21;
            goto LABEL_409;
          }
          v3 = 2288107369;
LABEL_289:
          if (v2 == v3)
          {
            result = 96;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_171:
        result = 70;
        goto LABEL_409;
      }
      if (v2 == 2309863438)
      {
        result = 35;
        goto LABEL_409;
      }
      if (v2 == 2311900306)
      {
        result = 14;
        goto LABEL_409;
      }
      v8 = 2336512887;
LABEL_254:
      if (v2 == v8)
      {
        result = 109;
        goto LABEL_409;
      }
      goto LABEL_408;
    }
    if (v2 > 2159747552)
    {
      if (v2 == 2159747553)
      {
        result = 26;
        goto LABEL_409;
      }
      if (v2 != 2162679683)
      {
        v5 = 2236272848;
        goto LABEL_217;
      }
LABEL_314:
      result = 110;
      goto LABEL_409;
    }
    if (v2 == 2144123136)
      goto LABEL_313;
    v4 = 2158787296;
LABEL_311:
    if (v2 == v4)
    {
      result = 63;
      goto LABEL_409;
    }
    goto LABEL_408;
  }
  if (v2 > 2940697644)
  {
    if (v2 <= 3101941569)
    {
      if (v2 <= 2979575959)
      {
        switch(v2)
        {
          case 2940697645:
            result = 36;
            goto LABEL_409;
          case 2941181571:
            result = 39;
            goto LABEL_409;
          case 2943112657:
            result = 137;
            goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 == 2979575960)
      {
        result = 143;
        goto LABEL_409;
      }
      if (v2 == 3001488778)
      {
        result = 32;
        goto LABEL_409;
      }
      if (v2 != 3054476161)
        goto LABEL_408;
LABEL_277:
      result = 91;
      goto LABEL_409;
    }
    if (v2 <= 3184375230)
    {
      if (v2 != 3101941570)
      {
        if (v2 != 3128362815)
        {
          if (v2 == 3133873109)
          {
            result = 56;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
LABEL_191:
      result = 90;
      goto LABEL_409;
    }
    if (v2 != 3184375231)
    {
      if (v2 != 3196158497)
      {
        if (v2 == 3196805751)
        {
          result = 7;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_295:
      result = 81;
      goto LABEL_409;
    }
LABEL_331:
    result = 71;
    goto LABEL_409;
  }
  if (v2 > 2781508712)
  {
    if (v2 <= 2823174121)
    {
      switch(v2)
      {
        case 2781508713:
          result = 6;
          goto LABEL_409;
        case 2793418701:
          result = 19;
          goto LABEL_409;
        case 2797549163:
          result = 101;
          goto LABEL_409;
      }
      goto LABEL_408;
    }
    if (v2 != 2823174122)
    {
      if (v2 != 2880863278)
      {
        if (v2 == 2903084588)
        {
          result = 79;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_272;
    }
LABEL_327:
    result = 97;
    goto LABEL_409;
  }
  if (v2 > 2722529671)
  {
    switch(v2)
    {
      case 2722529672:
        result = 28;
        goto LABEL_409;
      case 2730762296:
        result = 100;
        goto LABEL_409;
      case 2751865418:
        result = 131;
        goto LABEL_409;
    }
    goto LABEL_408;
  }
  if (v2 == 2673319456)
  {
LABEL_303:
    result = 67;
    goto LABEL_409;
  }
  if (v2 == 2688879999)
  {
    result = 37;
    goto LABEL_409;
  }
  if (v2 != 2702125347)
    goto LABEL_408;
  result = 3;
LABEL_409:
  PlatformUtilities_iOS::GetProductType(void)::sType = result;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19B79D974(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AC5B74](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x1A1AC5A60](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A1AC5A6C](v23);
  return a1;
}

void sub_19B79DBBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1A1AC5A6C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19B79DB90);
}

void sub_19B79DC1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AC5B74](a1 + 128);
  return a1;
}

void sub_19B79DE60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B79F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_19B79FA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B79FC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7A02F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19B7A0614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_19B7A06D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7A2AFC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *exc_bufa, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v68;
  NSObject *v69;
  void *v70;
  uint64_t v71;
  void *v72;

  if (a2)
  {

    _Block_object_dispose((const void *)(v66 - 224), 8);
    _Block_object_dispose(&a39, 8);

    if (a2 == 2)
    {
      v68 = objc_begin_catch(a1);
      if (AVAudioDeviceTestServiceLog(void)::once != -1)
        dispatch_once(&AVAudioDeviceTestServiceLog(void)::once, &__block_literal_global_3006);
      v69 = objc_retainAutorelease(*(id *)AVAudioDeviceTestServiceLog(void)::category);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        generateAudioSelfTestError(-7);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend(v70, "code");
        *(_DWORD *)(v66 - 224) = 136315906;
        STACK[0x224] = (unint64_t)"AVAudioDeviceTestService.mm";
        *(_WORD *)(v66 - 212) = 1024;
        LODWORD(STACK[0x22E]) = 825;
        *(_WORD *)(v66 - 206) = 2112;
        STACK[0x234] = (unint64_t)v68;
        *(_WORD *)(v66 - 196) = 2048;
        STACK[0x23E] = v71;
        _os_log_impl(&dword_19B733000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d exception (%@) with test error (%li)", (uint8_t *)(v66 - 224), 0x26u);

      }
      generateAudioSelfTestError(-7);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(a19 + 16))(a19, 0, v72);

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x19B7A2464);
  }
  _Unwind_Resume(a1);
}

void sub_19B7A3914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7A3A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7A48C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19B7A52A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_19B7A5840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7A59BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7A5A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7A5B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7A5ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7A60D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7A6454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7A6F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19B7A7400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7A7488()
{
  JUMPOUT(0x19B7A7480);
}

void sub_19B7A7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19B7A7884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_19B7A7BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)AVAudioDeviceTestService;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B7A7F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19B7A82F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19B7A87E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_19B7A8CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7A8E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_19B7A8FAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7A9000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PulseTone>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

os_log_t ___Z27AVAudioDeviceTestServiceLogv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.avfaudio", "asts");
  *v0 = result;
  AVAudioDeviceTestServiceLog(void)::category = (uint64_t)v0;
  return result;
}

void sub_19B7A94FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7A973C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7A9928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7A9AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id generateAudioSelfTestError(uint64_t a1)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (AVAudioDeviceTestServiceLog(void)::once != -1)
    dispatch_once(&AVAudioDeviceTestServiceLog(void)::once, &__block_literal_global_3006);
  v2 = objc_retainAutorelease(*(id *)AVAudioDeviceTestServiceLog(void)::category);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315650;
    v5 = "AVAudioDeviceTestService.mm";
    v6 = 1024;
    v7 = 150;
    v8 = 2048;
    v9 = a1;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d error code %li", (uint8_t *)&v4, 0x1Cu);
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], a1, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *std::vector<float>::vector(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v6 = 4 * a2;
    v7 = operator new(4 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[a2];
    a1[2] = v8;
    v9 = *a3;
    do
    {
      *v7++ = v9;
      v6 -= 4;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_19B7A9E78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7AA29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7AA87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7AAE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7AAFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7AB290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7AB504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7AC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;

  _Block_object_dispose((const void *)(v63 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_19B7AC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7AC5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7AC644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7AC770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3052(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3053(uint64_t a1)
{

}

void sub_19B7AC9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B7ACA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B7ACE80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *MediaSafetyNetLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
    MediaSafetyNetLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)MediaSafetyNetLibraryCore(char **)::frameworkLibrary;
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaSafetyNetLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVAudioDeviceTestService.mm"), 46, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_19B7ACFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19B7AD130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7AD2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7AD44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7AD710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19B7ADB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  uint64_t v13;

  _Block_object_dispose((const void *)(v13 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_19B7ADE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v4);

  _Unwind_Resume(a1);
}

void sub_19B7AE144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 32));
  _Unwind_Resume(a1);
}

void sub_19B7AE23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B7AE420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

uint64_t AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(AVAudioUnitMIDIInstrumentImpl *this, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE v13[3];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v13[0] = a5 | a2;
  v13[1] = a3;
  v13[2] = a4;
  v9 = (*(uint64_t (**)(AVAudioUnitMIDIInstrumentImpl *))(*(_QWORD *)this + 40))(this);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v9 + 136))(v9, 0, 0, a5, 3, v13);
  if ((v10 & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316418;
      v15 = "AVAudioUnitMIDIInstrument.mm";
      v16 = 1024;
      v17 = 49;
      v18 = 1024;
      v19 = a2;
      v20 = 1024;
      v21 = a5;
      v22 = 1024;
      v23 = a3;
      v24 = 1024;
      v25 = a4;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Unable to send midi event status(%d), channel(%d), param1(%d), param2(%d)\n", buf, 0x2Au);
    }
  }
  return v10;
}

void AVAudioUnitMIDIInstrumentImpl::~AVAudioUnitMIDIInstrumentImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AVAudioUnitMIDIInstrumentImpl::SendProgramChange(AVAudioUnitMIDIInstrumentImpl *this, int a2, int a3, int a4, uint64_t a5)
{
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 176, 0, a3, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v14 = "AVAEInternal.h";
      v15 = 1024;
      v16 = 71;
      v17 = 2080;
      v18 = "AVAudioUnitMIDIInstrument.mm";
      v19 = 1024;
      v20 = 66;
      v21 = 2080;
      v22 = "SendProgramChange";
      v23 = 2080;
      v24 = "true == SendMIDIEvent(kMIDIMessage_ControlChange, 0, bankMSB, 0, channel)";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "true == SendMIDIEvent(kMIDIMessage_ControlChange, 0, bankMSB, 0, channel)");
  }
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 176, 31, a4, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v14 = "AVAEInternal.h";
      v15 = 1024;
      v16 = 71;
      v17 = 2080;
      v18 = "AVAudioUnitMIDIInstrument.mm";
      v19 = 1024;
      v20 = 67;
      v21 = 2080;
      v22 = "SendProgramChange";
      v23 = 2080;
      v24 = "true == SendMIDIEvent(kMIDIMessage_ControlChange, bankSelectLSBParam1, bankLSB, 0, channel)";
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "true == SendMIDIEvent(kMIDIMessage_ControlChange, bankSelectLSBParam1, bankLSB, 0, channel)");
  }
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 192, a2, 0, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v14 = "AVAEInternal.h";
      v15 = 1024;
      v16 = 71;
      v17 = 2080;
      v18 = "AVAudioUnitMIDIInstrument.mm";
      v19 = 1024;
      v20 = 68;
      v21 = 2080;
      v22 = "SendProgramChange";
      v23 = 2080;
      v24 = "true == SendMIDIEvent(kMIDIMessage_PatchChange, programID, 0, 0, channel)";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "true == SendMIDIEvent(kMIDIMessage_PatchChange, programID, 0, 0, channel)");
  }
  return 1;
}

void sub_19B7AFD38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19B7B0320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *v4;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v4 = (char *)operator new(__n);
  this->__begin_ = v4;
  v5 = &v4[__n];
  this->__end_cap_.__value_ = &v4[__n];
  bzero(v4, __n);
  this->__end_ = v5;
  return this;
}

uint64_t std::optional<CA::BufferList>::operator=[abi:ne180100]<CA::BufferList,void>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL `anonymous namespace'::isPCMFormat(_DWORD *a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v5;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v1 = a1[2];
  v2 = a1[5];
  v3 = v1 == 1819304813 && v2 == 1;
  if (!v3)
  {
    if ((v1 == 1970037111 || v1 == 1634492791) && v2 == 1)
    {
      v5 = a1[6];
      if (v5 == a1[4])
        return a1[8] <= (8 * v5) && a1[7] != 0;
    }
    return 0;
  }
  v8 = a1[6];
  if (v8 != a1[4])
    return 0;
  v9 = a1[8];
  if (v8 < v9 >> 3)
    return 0;
  v10 = a1[7];
  if (!v10)
    return 0;
  v11 = a1[3];
  if ((v11 & 0x20) == 0)
  {
    v3 = v8 == v8 / v10 * v10;
    v8 /= v10;
    if (!v3)
      return 0;
  }
  result = 1;
  if ((v11 & 3) == 1 && 8 * v8 == v9 && (v11 & 0x1F84) != 0)
    return 0;
  return result;
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_19B7B0A3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__objc2_prot_list *gAVAudioBufferLog(void)
{
  unsigned __int8 v0;
  __objc2_prot_list **p_prots;
  int v3;

  p_prots = &OBJC_PROTOCOL___NSMutableCopying.prots;
  if ((v0 & 1) == 0)
  {
    p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___NSMutableCopying + 16);
    if (v3)
    {
      gAVAudioBufferLog(void)::global = (uint64_t)os_log_create("com.apple.avfaudio", "AVAB");
      p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___NSMutableCopying + 16);
    }
  }
  return p_prots[207];
}

uint64_t `anonymous namespace'::getPCMFormat(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v5;
  unsigned int v6;

  v1 = a1[3];
  if ((v1 & 1) != 0)
  {
    if (a1[8] == 32)
      return 0;
    else
      return 3;
  }
  else
  {
    v2 = a1[6];
    if (!v2)
      return 3;
    if ((v1 & 0x20) != 0)
    {
      v3 = 1;
    }
    else
    {
      v3 = a1[7];
      if (!v3)
        return 3;
    }
    v5 = v2 / v3;
    if (v5 == 2)
      v6 = 1;
    else
      v6 = 3;
    if (v5 == 4)
      return 2;
    else
      return v6;
  }
}

void sub_19B7B26DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19B7B2830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B28B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B29D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B2F20(_Unwind_Exception *a1)
{
  id *v1;

  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  MEMORY[0x1A1AC5BD4](v1, 0x10B1C40A067855ELL);
  _Unwind_Resume(a1);
}

void sub_19B7B3060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7B30F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void NBandEQFilterParametersForBand::~NBandEQFilterParametersForBand(NBandEQFilterParametersForBand *this)
{
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t NBandEQFilterParametersForBand::SetFilterType(NBandEQFilterParametersForBand *this, AVAudioUnitEQFilterType a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), (*((_DWORD *)this + 6) + 2000), 0, 0, (float)a2);
}

uint64_t NBandEQFilterParametersForBand::SetFrequency(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), (*((_DWORD *)this + 6) + 3000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetBandwidth(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), (*((_DWORD *)this + 6) + 5000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetGain(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), (*((_DWORD *)this + 6) + 4000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetBypass(NBandEQFilterParametersForBand *this, unsigned int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), (*((_DWORD *)this + 6) + 1000), 0, 0, (float)a2);
}

uint64_t NBandEQFilterParametersForBand::GetFilterType(NBandEQFilterParametersForBand *this)
{
  uint64_t v1;
  float v3;

  v1 = (*((_DWORD *)this + 6) + 2000);
  v3 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v1, 0, 0, &v3);
  return (uint64_t)v3;
}

float NBandEQFilterParametersForBand::GetFrequency(NBandEQFilterParametersForBand *this)
{
  uint64_t v1;
  float v3;

  v1 = (*((_DWORD *)this + 6) + 3000);
  v3 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v1, 0, 0, &v3);
  return v3;
}

float NBandEQFilterParametersForBand::GetBandwidth(NBandEQFilterParametersForBand *this)
{
  uint64_t v1;
  float v3;

  v1 = (*((_DWORD *)this + 6) + 5000);
  v3 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v1, 0, 0, &v3);
  return v3;
}

float NBandEQFilterParametersForBand::GetGain(NBandEQFilterParametersForBand *this)
{
  uint64_t v1;
  float v3;

  v1 = (*((_DWORD *)this + 6) + 4000);
  v3 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v1, 0, 0, &v3);
  return v3;
}

BOOL NBandEQFilterParametersForBand::GetBypass(NBandEQFilterParametersForBand *this)
{
  uint64_t v1;
  float v3;

  v1 = (*((_DWORD *)this + 6) + 1000);
  v3 = 0.0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float *))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v1, 0, 0, &v3);
  return v3 != 0.0;
}

void AVAudioUnitEQImpl::~AVAudioUnitEQImpl(id *this)
{
  AVAudioUnitEQImpl::~AVAudioUnitEQImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = &off_1E3BE7718;

  AVAudioUnitImpl::~AVAudioUnitImpl(this);
}

NSData *AVAudioFormatImpl::setMagicCookie(NSData *this, NSData *a2)
{
  NSData *isa;
  NSData *v3;

  isa = (NSData *)this[1].super.isa;
  if (isa != a2)
  {
    v3 = this;

    v3[1].super.isa = (Class)a2;
    return a2;
  }
  return this;
}

Class ___ZL17AudioSessionClassv_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("AVAudioSession"));
  AudioSessionClass(void)::gAudioSessionClass = (uint64_t)result;
  return result;
}

void AVAudioSourceNodeImpl::~AVAudioSourceNodeImpl(AVAudioSourceNodeImpl *this)
{
  AVAudioSourceNodeImpl::~AVAudioSourceNodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *(_QWORD *)this = &off_1E3BE8768;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 64))(*((_QWORD *)this + 22), 1, 0, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 23, 0);
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

uint64_t AVAudioSourceNodeImpl::SetOutputFormat(AVAudioSourceNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)this + 24)
    || (v5 = (*(uint64_t (**)(AVAudioSourceNodeImpl *))(*(_QWORD *)this + 40))(this),
        v6 = (*(uint64_t (**)(AVAudioSourceNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0),
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v5 + 48))(v5, 1, v6, a3), (_DWORD)result))
  {
    v8 = (*(uint64_t (**)(AVAudioSourceNodeImpl *))(*(_QWORD *)this + 40))(this);
    v9 = (*(uint64_t (**)(AVAudioSourceNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v8 + 48))(v8, 0, v9, a3);
  }
  return result;
}

uint64_t AVAudioSourceNodeImpl::SetInputFormat(AVAudioSourceNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 24) = a3;
  if (!a3)
    return 1;
  v5 = (*(uint64_t (**)(AVAudioSourceNodeImpl *))(*(_QWORD *)this + 40))(this);
  v6 = (*(uint64_t (**)(AVAudioSourceNodeImpl *, _QWORD))(*(_QWORD *)this + 240))(this, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v5 + 48))(v5, 1, v6, a3);
}

uint64_t AVAudioSourceNodeImpl::NumberInputs(AVAudioSourceNodeImpl *this)
{
  return 0;
}

uint64_t AVAudioSourceNodeImpl::IsAVAudioSourceNode(AVAudioSourceNodeImpl *this)
{
  return 1;
}

void sub_19B7B4EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C40AECC1445);
  _Unwind_Resume(a1);
}

void sub_19B7B4FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C40AECC1445);
  _Unwind_Resume(a1);
}

_QWORD *AVAudioSourceNodeImpl::AVAudioSourceNodeImpl(_QWORD *a1, void *a2, uint64_t a3)
{
  const void **v6;
  uint64_t v7;
  NSObject *v8;
  AudioComponentDescription buf;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&buf.componentType = xmmword_19B85A210;
  buf.componentFlagsMask = 0;
  AVAudioNodeImpl::AVAudioNodeImpl((uint64_t)a1, 0, &buf, 0);
  *a1 = &off_1E3BE8768;
  v6 = (const void **)operator new();
  *v6 = 0;
  AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v6, a2);
  a1[23] = v6;
  a1[24] = 0;
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 64))(v7, 1, 0, 1);
  if (a3 && ((*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, a3) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf.componentType = 136316418;
      *(_QWORD *)&buf.componentSubType = "AVAEInternal.h";
      LOWORD(buf.componentFlags) = 1024;
      *(UInt32 *)((char *)&buf.componentFlags + 2) = 71;
      HIWORD(buf.componentFlagsMask) = 2080;
      v11 = "AVAudioSourceNode.mm";
      v12 = 1024;
      v13 = 22;
      v14 = 2080;
      v15 = "AVAudioSourceNodeImpl";
      v16 = 2080;
      v17 = "SetInputFormat(0, format)";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "SetInputFormat(0, format)");
  }
  return a1;
}

void sub_19B7B51CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  MEMORY[0x1A1AC5BD4](v2, 0x80C40B8603338);
  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::~AVVCAudioQueueRecordingEngine(AVVCAudioQueueRecordingEngine *this)
{
  AVVCAudioQueueRecordingEngine::~AVVCAudioQueueRecordingEngine(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  void *v2;
  void *v3;
  _BYTE v4[8];

  *(_QWORD *)this = &off_1E3BE9508;
  TraceMethod::TraceMethod((TraceMethod *)v4, "~AVVCAudioQueueRecordingEngine");
  *((_QWORD *)this + 96) = 0;
  v2 = (void *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;

  objc_msgSend(*((id *)this + 103), "stop");
  v3 = (void *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;

  TraceMethod::~TraceMethod((TraceMethod *)v4);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)this + 864);

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

uint64_t AVVCAudioQueueRecordingEngine::asbdForClientSettings(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2, AudioStreamBasicDescription *a3)
{
  NSDictionary *v5;
  void *v6;
  double v7;
  double v8;
  NSObject *v9;
  NSDictionary *v10;
  int *v11;
  double v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  unsigned int v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  objc_object *v23;
  double v24;
  unsigned int mFormatFlags;
  unsigned int mChannelsPerFrame;
  unsigned int v27;
  NSObject *v28;
  id v29;
  const char *v30;
  id v31;
  double v33;
  unsigned int v34[2];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "speechDetectionDeviceSampleRate");
  v8 = v7;

  if (v8 != 0.0)
  {
    (*(void (**)(AVVCAudioQueueRecordingEngine *, double))(*(_QWORD *)this + 40))(this, v8);
    if (!v5)
    {
      v34[1] = 1;
      UpdateWithHardwareDeviceNumInputChannels(&v34[1]);
      v15 = 0;
      v16 = v34[1];
      a3->mSampleRate = 16000.0;
      *(_OWORD *)&a3->mFormatID = xmmword_19B85A290;
      a3->mBytesPerFrame = 0;
      a3->mChannelsPerFrame = v16;
      *(_QWORD *)&a3->mBitsPerChannel = 0;
      goto LABEL_63;
    }
    v10 = (NSDictionary *)-[NSDictionary mutableCopy](v5, "mutableCopy");
    v33 = 16000.0;
    if (getFloat64ForKey(v10, (NSString *)&v33, (double *)v34, v11))
    {
      v12 = v33;
      if (v33 < 16000.0)
      {
        if (kAVVCScope)
        {
          v13 = *(id *)kAVVCScope;
          if (!v13)
          {
LABEL_31:
            v33 = 16000.0;
            goto LABEL_36;
          }
        }
        else
        {
          v13 = MEMORY[0x1E0C81028];
          v19 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v34[1] = 136315650;
          v35 = "AVVCAudioQueueRecordingEngine.mm";
          v36 = 1024;
          v37 = 301;
          v38 = 2048;
          v39 = v12;
          _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was:%.2f, setting to 16000.00", (uint8_t *)&v34[1], 0x1Cu);
        }

        goto LABEL_31;
      }
      if (kAVVCScope)
      {
        v17 = *(id *)kAVVCScope;
        if (!v17)
        {
LABEL_36:
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v33, *(_QWORD *)&v33);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v21, CFSTR("AVSampleRateKey"));

          (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = asbdFromSettings(v10, a3, v22, v24, v23);
          v34[0] = v15;
          if (isDarwinOSProduct(void)::onceToken != -1)
            dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
          if (!isDarwinOSProduct(void)::isDarwinOS || *((_QWORD *)this + 34) != 1)
          {
LABEL_46:
            if (!(_DWORD)v15)
            {
LABEL_62:

              goto LABEL_63;
            }
            if ((v15 + 199999) > 0x61A7E)
            {
              if (kAVVCScope)
              {
                v28 = *(id *)kAVVCScope;
                if (!v28)
                  goto LABEL_62;
              }
              else
              {
                v28 = MEMORY[0x1E0C81028];
                v31 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                goto LABEL_61;
              v34[1] = 136315650;
              v35 = "AVVCAudioQueueRecordingEngine.mm";
              v36 = 1024;
              v37 = 329;
              v38 = 1024;
              LODWORD(v39) = v15;
              v30 = "%25s:%-5d ERROR: setupRecordQueue: asbdFromSettings err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                v28 = *(id *)kAVVCScope;
                if (!v28)
                  goto LABEL_62;
              }
              else
              {
                v28 = MEMORY[0x1E0C81028];
                v29 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                goto LABEL_61;
              v34[1] = 136315650;
              v35 = "AVVCAudioQueueRecordingEngine.mm";
              v36 = 1024;
              v37 = 329;
              v38 = 1024;
              LODWORD(v39) = v15;
              v30 = "%25s:%-5d ERROR: setupRecordQueue: asbdFromSettings err %d";
            }
            _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v34[1], 0x18u);
LABEL_61:

            v15 = v34[0];
            goto LABEL_62;
          }
          mFormatFlags = a3->mFormatFlags;
          if ((mFormatFlags & 0x20) != 0)
          {
            mChannelsPerFrame = 1;
          }
          else
          {
            mChannelsPerFrame = a3->mChannelsPerFrame;
            if (!mChannelsPerFrame)
            {
              v27 = (a3->mBitsPerChannel + 7) >> 3;
LABEL_45:
              a3->mBytesPerFrame = v27;
              a3->mChannelsPerFrame = 2;
              a3->mBytesPerPacket = v27;
              a3->mFramesPerPacket = 1;
              a3->mFormatFlags = mFormatFlags | 0x20;
              goto LABEL_46;
            }
          }
          v27 = a3->mBytesPerFrame / mChannelsPerFrame;
          goto LABEL_45;
        }
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v34[1] = 136315650;
        v35 = "AVVCAudioQueueRecordingEngine.mm";
        v36 = 1024;
        v37 = 305;
        v38 = 2048;
        v39 = v12;
        _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was:%.2f", (uint8_t *)&v34[1], 0x1Cu);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        v17 = *(id *)kAVVCScope;
        if (!v17)
          goto LABEL_36;
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
        v18 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v34[1] = 136315394;
        v35 = "AVVCAudioQueueRecordingEngine.mm";
        v36 = 1024;
        v37 = 309;
        _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was not specified, setting to 16000.00", (uint8_t *)&v34[1], 0x12u);
      }
    }

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    v9 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
    goto LABEL_12;
  }
  v9 = *(id *)kAVVCScope;
  if (v9)
  {
LABEL_12:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v34[1] = 136315394;
      v35 = "AVVCAudioQueueRecordingEngine.mm";
      v36 = 1024;
      v37 = 269;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error getting input hardware sample rate", (uint8_t *)&v34[1], 0x12u);
    }

  }
  v15 = 4294955511;
LABEL_63:

  return v15;
}

void sub_19B7B5898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::createRecordQueue(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2)
{
  NSDictionary *v3;
  NSObject *v4;
  uint64_t v5;
  __int128 v6;
  UInt32 mChannelsPerFrame;
  UInt32 v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  double v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v18;
  id v19;
  NSObject *v20;
  __CFRunLoop *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  AudioQueueRef *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t Property;
  NSObject *v45;
  __int128 v46;
  id v47;
  id v48;
  id v49;
  id v50;
  NSObject *v51;
  OSStatus v52;
  unsigned int v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  NSObject *v59;
  const char *v60;
  id v61;
  OSStatus v62;
  unsigned int v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  const char *v68;
  id v69;
  unsigned int *v70;
  uint64_t v71;
  NSObject *v72;
  id v73;
  id v74;
  NSObject *v75;
  uint64_t v76;
  id v77;
  id v78;
  NSObject *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  UInt32 v83;
  id v84;
  id v85;
  NSObject *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t Buffer;
  void *v92;
  void *v93;
  NSObject *v94;
  unsigned int v95;
  uint64_t v96;
  void *v97;
  AVAudioChannelLayout *v98;
  AVAudioChannelLayout *v99;
  uint64_t v100;
  AVAudioFormat *v101;
  AVAudioPCMBuffer *v102;
  void *v103;
  NSObject *v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  id v109;
  NSObject *v110;
  id v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  AudioStreamBasicDescription *v116;
  AudioStreamBasicDescription v117;
  unsigned int outData;
  UInt32 ioDataSize;
  int inData;
  unsigned int v121;
  AudioStreamBasicDescription inFormat;
  uint64_t v123;
  std::__shared_weak_count *v124;
  char v125[8];
  int v126;
  char v127;
  __int128 v128;
  __int128 v129;
  uint8_t v130[4];
  const char *v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  AudioStreamBasicDescription v136;
  uint8_t buf[4];
  const char *v138;
  __int16 v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v126 = 4102;
  v127 = 1;
  v128 = 0u;
  v129 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v125, "createRecordQueue");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v123, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (!*((_QWORD *)this + 76))
  {
    v5 = *((unsigned int *)this + 8);
    v6 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)&inFormat.mSampleRate = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)&inFormat.mBytesPerPacket = v6;
    *(_QWORD *)&inFormat.mBitsPerChannel = *((_QWORD *)this + 7);
    inFormat.mFormatID = 1819304813;
    v121 = *((_DWORD *)this + 13);
    if (isDarwinOSProduct(void)::onceToken != -1)
      dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
    if (isDarwinOSProduct(void)::isDarwinOS && *((_QWORD *)this + 34) == 1)
      UpdateWithHardwareDeviceNumInputChannels(&v121);
    v116 = (AudioStreamBasicDescription *)((char *)this + 24);
    if ((_DWORD)v5 != 1819304813)
    {
      inFormat.mSampleRate = *((Float64 *)this + 3);
      *(_QWORD *)&inFormat.mFormatID = 0x96C70636DLL;
      inFormat.mBytesPerPacket = 4 * v121;
      inFormat.mFramesPerPacket = 1;
      inFormat.mBytesPerFrame = 4 * v121;
      inFormat.mChannelsPerFrame = v121;
      inFormat.mBitsPerChannel = 32;
      goto LABEL_25;
    }
    if ((inFormat.mFormatFlags & 0x20) != 0)
    {
      mChannelsPerFrame = 1;
    }
    else
    {
      mChannelsPerFrame = inFormat.mChannelsPerFrame;
      if (!inFormat.mChannelsPerFrame)
      {
        v8 = (inFormat.mBitsPerChannel + 7) >> 3;
LABEL_24:
        inFormat.mChannelsPerFrame = v121;
        inFormat.mFramesPerPacket = 1;
        inFormat.mBytesPerFrame = v8 * v121;
        inFormat.mFormatFlags &= ~0x20u;
        inFormat.mBytesPerPacket = v8 * v121;
LABEL_25:
        if (kAVVCScope)
        {
          v11 = *(id *)kAVVCScope;
          if (!v11)
            goto LABEL_32;
        }
        else
        {
          v11 = (id)MEMORY[0x1E0C81028];
          v12 = MEMORY[0x1E0C81028];
        }
        v13 = v11;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&inFormat, (char *)buf, 0x100uLL, v14, v15);
          LODWORD(v136.mSampleRate) = 136315650;
          *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v136.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 383;
          HIWORD(v136.mBytesPerPacket) = 2080;
          *(_QWORD *)&v136.mFramesPerPacket = buf;
          _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Record Queue Format: %s", (uint8_t *)&v136, 0x1Cu);
        }

LABEL_32:
        v16 = *((_QWORD *)this + 35);
        if (v16 == 1768764005 || v16 == 1768780647)
          v18 = 4;
        else
          v18 = 4100;
        if (kAVVCScope)
        {
          if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
          {
            v19 = *(id *)kAVVCScope;
            if (v19)
            {
              v20 = v19;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(v136.mSampleRate) = 136315906;
                *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                LOWORD(v136.mFormatFlags) = 1024;
                *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 396;
                HIWORD(v136.mBytesPerPacket) = 1024;
                v136.mFramesPerPacket = v18;
                LOWORD(v136.mBytesPerFrame) = 2080;
                *(_QWORD *)((char *)&v136.mBytesPerFrame + 2) = "With";
                _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating queue with flags 0x%x. %s runloops", (uint8_t *)&v136, 0x22u);
              }

            }
          }
        }
        v21 = *(__CFRunLoop **)(*((_QWORD *)this + 96) + 128);
        v23 = v123;
        v22 = v124;
        if (v124)
        {
          p_shared_owners = (unint64_t *)&v124->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        v26 = (AudioQueueRef *)((char *)this + 608);
        *((_QWORD *)this + 108) = v23;
        v27 = (std::__shared_weak_count *)*((_QWORD *)this + 109);
        *((_QWORD *)this + 109) = v22;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = AudioQueueNewInput(&inFormat, (AudioQueueInputCallback)AVVCAudioQueueRecordingEngine::AudioQueueRecordInputCallback, (char *)this + 864, v21, 0, v18, (AudioQueueRef *)this + 76);
        v9 = v30;
        if ((_DWORD)v30)
        {
          if ((v30 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              v31 = *(id *)kAVVCScope;
              if (!v31)
                goto LABEL_228;
            }
            else
            {
              v31 = MEMORY[0x1E0C81028];
              v35 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v136.mSampleRate) = 136315650;
              *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v136.mFormatFlags) = 1024;
              *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 406;
              HIWORD(v136.mBytesPerPacket) = 1024;
              v136.mFramesPerPacket = v9;
              _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueNewInput err %{audio:4CC}d", (uint8_t *)&v136, 0x18u);
            }
          }
          else
          {
            if (kAVVCScope)
            {
              v31 = *(id *)kAVVCScope;
              if (!v31)
                goto LABEL_228;
            }
            else
            {
              v31 = MEMORY[0x1E0C81028];
              v34 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v136.mSampleRate) = 136315650;
              *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v136.mFormatFlags) = 1024;
              *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 406;
              HIWORD(v136.mBytesPerPacket) = 1024;
              v136.mFramesPerPacket = v9;
              _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueNewInput err %d", (uint8_t *)&v136, 0x18u);
            }
          }

          goto LABEL_228;
        }
        if (AudioQueueSetProperty(*v26, 0x63756964u, &AudioQueueProperty_RecordQueueClientName, 8u))
        {
          if (kAVVCScope)
          {
            v32 = *(id *)kAVVCScope;
            if (!v32)
              goto LABEL_83;
          }
          else
          {
            v32 = (id)MEMORY[0x1E0C81028];
            v36 = MEMORY[0x1E0C81028];
          }
          v37 = v32;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v136.mSampleRate) = 136315650;
            *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
            LOWORD(v136.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 414;
            HIWORD(v136.mBytesPerPacket) = 2112;
            *(_QWORD *)&v136.mFramesPerPacket = CFSTR("AVVoiceController_RecordQueue");
            v38 = "%25s:%-5d FAILED createRecordQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
            v39 = v37;
            v40 = OS_LOG_TYPE_ERROR;
LABEL_81:
            _os_log_impl(&dword_19B733000, v39, v40, v38, (uint8_t *)&v136, 0x1Cu);
          }
        }
        else
        {
          if (kAVVCScope)
          {
            v33 = *(id *)kAVVCScope;
            if (!v33)
            {
LABEL_83:
              inData = 127;
              v42 = AudioQueueSetProperty(*v26, 0x73726371u, &inData, 4u);
              v9 = v42;
              if ((_DWORD)v42)
              {
                if ((v42 + 199999) >= 0x61A7F)
                {
                  if (kAVVCScope)
                  {
                    v43 = *(id *)kAVVCScope;
                    if (!v43)
                      goto LABEL_228;
                  }
                  else
                  {
                    v43 = MEMORY[0x1E0C81028];
                    v49 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v136.mSampleRate) = 136315650;
                    *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                    LOWORD(v136.mFormatFlags) = 1024;
                    *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 450;
                    HIWORD(v136.mBytesPerPacket) = 1024;
                    v136.mFramesPerPacket = v9;
                    _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueSetProperty(kAudioConverterSampleRateConverterQuality, Max) err %{audio:4CC}d", (uint8_t *)&v136, 0x18u);
                  }
                }
                else
                {
                  if (kAVVCScope)
                  {
                    v43 = *(id *)kAVVCScope;
                    if (!v43)
                      goto LABEL_228;
                  }
                  else
                  {
                    v43 = MEMORY[0x1E0C81028];
                    v48 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v136.mSampleRate) = 136315650;
                    *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                    LOWORD(v136.mFormatFlags) = 1024;
                    *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 450;
                    HIWORD(v136.mBytesPerPacket) = 1024;
                    v136.mFramesPerPacket = v9;
                    _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueSetProperty(kAudioConverterSampleRateConverterQuality, Max) err %d", (uint8_t *)&v136, 0x18u);
                  }
                }

                goto LABEL_228;
              }
              ioDataSize = 40;
              Property = AudioQueueGetProperty(*v26, 0x61716674u, &inFormat, &ioDataSize);
              v9 = Property;
              if ((_DWORD)Property)
              {
                if ((Property + 199999) >= 0x61A7F)
                {
                  if (kAVVCScope)
                  {
                    v45 = *(id *)kAVVCScope;
                    if (!v45)
                      goto LABEL_228;
                  }
                  else
                  {
                    v45 = MEMORY[0x1E0C81028];
                    v56 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v136.mSampleRate) = 136315650;
                    *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                    LOWORD(v136.mFormatFlags) = 1024;
                    *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 455;
                    HIWORD(v136.mBytesPerPacket) = 1024;
                    v136.mFramesPerPacket = v9;
                    _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueGetProperty(StreamDescription) err %{audio:4CC}d", (uint8_t *)&v136, 0x18u);
                  }
                }
                else
                {
                  if (kAVVCScope)
                  {
                    v45 = *(id *)kAVVCScope;
                    if (!v45)
                      goto LABEL_228;
                  }
                  else
                  {
                    v45 = MEMORY[0x1E0C81028];
                    v55 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v136.mSampleRate) = 136315650;
                    *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                    LOWORD(v136.mFormatFlags) = 1024;
                    *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 455;
                    HIWORD(v136.mBytesPerPacket) = 1024;
                    v136.mFramesPerPacket = v9;
                    _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueGetProperty(StreamDescription) err %d", (uint8_t *)&v136, 0x18u);
                  }
                }

                goto LABEL_228;
              }
              *((_QWORD *)this + 81) = *(_QWORD *)&inFormat.mBitsPerChannel;
              v46 = *(_OWORD *)&inFormat.mBytesPerPacket;
              *(_OWORD *)((char *)this + 616) = *(_OWORD *)&inFormat.mSampleRate;
              *(_OWORD *)((char *)this + 632) = v46;
              outData = 0;
              ioDataSize = 4;
              AudioQueueGetProperty(*((AudioQueueRef *)this + 76), 0x61716463u, &outData, &ioDataSize);
              if (kAVVCScope)
              {
                v47 = *(id *)kAVVCScope;
                if (!v47)
                  goto LABEL_114;
              }
              else
              {
                v47 = (id)MEMORY[0x1E0C81028];
                v50 = MEMORY[0x1E0C81028];
              }
              v51 = v47;
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(v136.mSampleRate) = 136315650;
                *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                LOWORD(v136.mFormatFlags) = 1024;
                *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 464;
                HIWORD(v136.mBytesPerPacket) = 1024;
                v136.mFramesPerPacket = outData;
                _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d AQGetProperty - kAudioQueueDeviceProperty_NumberChannels returned : %u", (uint8_t *)&v136, 0x18u);
              }

LABEL_114:
              *((_DWORD *)this + 170) = outData;
              v52 = AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 76), 0x6171726Eu, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
              v53 = v52;
              if (!v52)
                goto LABEL_138;
              if ((v52 + 199999) >= 0x61A7F)
              {
                if (kAVVCScope)
                {
                  v57 = *(id *)kAVVCScope;
                  if (!v57)
                  {
LABEL_138:
                    v62 = AudioQueueAddPropertyListener(*v26, 0x71637665u, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
                    v63 = v62;
                    if (!v62)
                      goto LABEL_154;
                    if ((v62 + 199999) >= 0x61A7F)
                    {
                      if (kAVVCScope)
                      {
                        v65 = *(id *)kAVVCScope;
                        if (!v65)
                        {
LABEL_154:
                          (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD))(*(_QWORD *)this + 152))(this, *((unsigned __int8 *)this + 296));
                          *((_DWORD *)this + 204) = 0;
                          v70 = (unsigned int *)((char *)this + 816);
                          if (AVVCAudioQueueRecordingEngine::ShouldUseAudioConverter(this, v116))
                          {
                            v136 = inFormat;
                            AVVCAudioQueueRecordingEngine::createAudioConverter(this, (CAStreamBasicDescription *)&v136, v3, (unsigned int *)this + 204);
                            v9 = v71;
                            if ((_DWORD)v71)
                            {
                              if (kAVVCScope)
                              {
                                v72 = *(id *)kAVVCScope;
                                if (!v72)
                                {
LABEL_215:
                                  AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this
                                                                                         + 18));
                                  goto LABEL_228;
                                }
                              }
                              else
                              {
                                v72 = MEMORY[0x1E0C81028];
                                v107 = MEMORY[0x1E0C81028];
                              }
                              if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)v130 = 136315650;
                                v131 = "AVVCAudioQueueRecordingEngine.mm";
                                v132 = 1024;
                                v133 = 482;
                                v134 = 1024;
                                v135 = v9;
                                _os_log_impl(&dword_19B733000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d createRecordQueue: createAudioConverter error: %d. Destroying record queue.", v130, 0x18u);
                              }

                              goto LABEL_215;
                            }
                          }
                          else
                          {
                            *((_DWORD *)this + 204) = (*((double *)this + 33) * *((double *)this + 3));
                            if (kAVVCScope)
                            {
                              v73 = *(id *)kAVVCScope;
                              if (!v73)
                                goto LABEL_166;
                            }
                            else
                            {
                              v73 = (id)MEMORY[0x1E0C81028];
                              v74 = MEMORY[0x1E0C81028];
                            }
                            v75 = v73;
                            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                            {
                              LODWORD(v136.mSampleRate) = 136315394;
                              *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                              LOWORD(v136.mFormatFlags) = 1024;
                              *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 489;
                              _os_log_impl(&dword_19B733000, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverter is not created.. reason: requested channels is 1 or requested interleaved audio or non-lpcm is requested", (uint8_t *)&v136, 0x12u);
                            }

                          }
LABEL_166:
                          v76 = *((_QWORD *)this + 16);
                          if (v76)
                            (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 16))(v76, *((_QWORD *)this + 34), v5);
                          if (kAVVCScope)
                          {
                            v77 = *(id *)kAVVCScope;
                            if (!v77)
                              goto LABEL_175;
                          }
                          else
                          {
                            v77 = (id)MEMORY[0x1E0C81028];
                            v78 = MEMORY[0x1E0C81028];
                          }
                          v79 = v77;
                          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                          {
                            v80 = *((_DWORD *)this + 204);
                            v81 = *((_QWORD *)this + 33);
                            LODWORD(v136.mSampleRate) = 136315906;
                            *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                            LOWORD(v136.mFormatFlags) = 1024;
                            *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 495;
                            HIWORD(v136.mBytesPerPacket) = 1024;
                            v136.mFramesPerPacket = v80;
                            LOWORD(v136.mBytesPerFrame) = 2048;
                            *(_QWORD *)((char *)&v136.mBytesPerFrame + 2) = v81;
                            _os_log_impl(&dword_19B733000, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d FrameCapacity: %d. Buffer duration: %f s", (uint8_t *)&v136, 0x22u);
                          }

LABEL_175:
                          AVVCRecordingEngine::populateRecordSettings((AVVCRecordingEngine *)this);
                          v82 = (1.0 / *((double *)this + 33));
                          if (v82 <= 0x10)
                            v82 = 16;
                          *((_DWORD *)this + 166) = v82;
                          v83 = *((_DWORD *)this + 204) / inFormat.mFramesPerPacket * inFormat.mBytesPerPacket;
                          if (kAVVCScope)
                          {
                            v84 = *(id *)kAVVCScope;
                            if (!v84)
                              goto LABEL_184;
                          }
                          else
                          {
                            v84 = (id)MEMORY[0x1E0C81028];
                            v85 = MEMORY[0x1E0C81028];
                          }
                          v86 = v84;
                          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
                          {
                            v87 = *((_DWORD *)this + 166);
                            LODWORD(v136.mSampleRate) = 136315906;
                            *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                            LOWORD(v136.mFormatFlags) = 1024;
                            *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 513;
                            HIWORD(v136.mBytesPerPacket) = 1024;
                            v136.mFramesPerPacket = v87;
                            LOWORD(v136.mBytesPerFrame) = 1024;
                            *(UInt32 *)((char *)&v136.mBytesPerFrame + 2) = v83;
                            _os_log_impl(&dword_19B733000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue: creating %u queue buffers %u bytes each", (uint8_t *)&v136, 0x1Eu);
                          }

LABEL_184:
                          v88 = *((_QWORD *)this + 82);
                          if (v88)
                            MEMORY[0x1A1AC5BBC](v88, 0x20C8093837F09);
                          *((_QWORD *)this + 82) = operator new[]();
                          if (*((_DWORD *)this + 166))
                          {
                            v89 = 0;
                            v90 = 0;
                            while (1)
                            {
                              Buffer = AudioQueueAllocateBuffer(*((AudioQueueRef *)this + 76), v83, (AudioQueueBufferRef *)(*((_QWORD *)this + 82) + v89));
                              v9 = Buffer;
                              if ((_DWORD)Buffer)
                                break;
                              ++v90;
                              v89 += 8;
                              if (v90 >= *((unsigned int *)this + 166))
                                goto LABEL_190;
                            }
                            if ((Buffer + 199999) >= 0x61A7F)
                            {
                              if (kAVVCScope)
                              {
                                v108 = *(id *)kAVVCScope;
                                if (!v108)
                                  goto LABEL_228;
                              }
                              else
                              {
                                v108 = (id)MEMORY[0x1E0C81028];
                                v111 = MEMORY[0x1E0C81028];
                              }
                              v110 = v108;
                              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v136.mSampleRate) = 136315650;
                                *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                                LOWORD(v136.mFormatFlags) = 1024;
                                *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 519;
                                HIWORD(v136.mBytesPerPacket) = 1024;
                                v136.mFramesPerPacket = v9;
                                _os_log_impl(&dword_19B733000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueAllocateBuffer err %{audio:4CC}d", (uint8_t *)&v136, 0x18u);
                              }
                            }
                            else
                            {
                              if (kAVVCScope)
                              {
                                v105 = *(id *)kAVVCScope;
                                if (!v105)
                                  goto LABEL_228;
                              }
                              else
                              {
                                v105 = (id)MEMORY[0x1E0C81028];
                                v109 = MEMORY[0x1E0C81028];
                              }
                              v110 = v105;
                              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v136.mSampleRate) = 136315650;
                                *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                                LOWORD(v136.mFormatFlags) = 1024;
                                *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 519;
                                HIWORD(v136.mBytesPerPacket) = 1024;
                                v136.mFramesPerPacket = v9;
                                _os_log_impl(&dword_19B733000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueAllocateBuffer err %d", (uint8_t *)&v136, 0x18u);
                              }
                            }

                            goto LABEL_228;
                          }
LABEL_190:
                          AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
                          CALog::LogObjIfEnabled(5, kAVVCScope);
                          v92 = (void *)objc_claimAutoreleasedReturnValue();
                          v93 = v92;
                          if (v92)
                          {
                            v94 = v92;
                            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
                            {
                              v95 = *((_DWORD *)this + 204);
                              v96 = *((_QWORD *)this + 33);
                              LODWORD(v136.mSampleRate) = 136315906;
                              *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                              LOWORD(v136.mFormatFlags) = 1024;
                              *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 529;
                              HIWORD(v136.mBytesPerPacket) = 1024;
                              v136.mFramesPerPacket = v95;
                              LOWORD(v136.mBytesPerFrame) = 2048;
                              *(_QWORD *)((char *)&v136.mBytesPerFrame + 2) = v96;
                              _os_log_impl(&dword_19B733000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating AVAudioPCMBuffer with frameCapacity: %d. Buffer duration: %f s", (uint8_t *)&v136, 0x22u);
                            }

                          }
                          v97 = (void *)*((_QWORD *)this + 99);
                          *((_QWORD *)this + 99) = 0;

                          v98 = [AVAudioChannelLayout alloc];
                          v99 = -[AVAudioChannelLayout initWithLayoutTag:](v98, "initWithLayoutTag:", inFormat.mChannelsPerFrame | 0x930000);
                          LODWORD(v136.mSampleRate) = 0;
                          if (CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)&v136)&& LODWORD(v136.mSampleRate) == 1)
                          {
                            v100 = 1;
                          }
                          else
                          {
                            LODWORD(v136.mSampleRate) = 0;
                            if (!CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)&v136)|| LODWORD(v136.mSampleRate) != 2)
                            {
                              CALog::LogObjIfEnabled(1, kAVVCScope);
                              v106 = (void *)objc_claimAutoreleasedReturnValue();
                              if (!v106)
                              {
                                v101 = 0;
                                v9 = 4294967246;
                                goto LABEL_202;
                              }
                              v104 = v106;
                              if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v136.mSampleRate) = 136315394;
                                *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                                LOWORD(v136.mFormatFlags) = 1024;
                                *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 535;
                                _os_log_impl(&dword_19B733000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpected Format found.. ", (uint8_t *)&v136, 0x12u);
                              }
                              v9 = 4294967246;
                              v101 = (AVAudioFormat *)v104;
LABEL_201:

LABEL_202:
                              goto LABEL_228;
                            }
                            v100 = 3;
                          }
                          v101 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v100, 1, v99, v116->mSampleRate);
                          v102 = -[AVAudioPCMBuffer initWithPCMFormat:frameCapacity:]([AVAudioPCMBuffer alloc], "initWithPCMFormat:frameCapacity:", v101, *v70);
                          v103 = (void *)*((_QWORD *)this + 99);
                          *((_QWORD *)this + 99) = v102;

                          +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
                          v104 = objc_claimAutoreleasedReturnValue();
                          v117 = inFormat;
                          -[NSObject setAudioIssueDetectorFormat:numFrames:](v104, "setAudioIssueDetectorFormat:numFrames:", &v117, *v70);
                          v9 = 0;
                          goto LABEL_201;
                        }
                      }
                      else
                      {
                        v65 = (id)MEMORY[0x1E0C81028];
                        v69 = MEMORY[0x1E0C81028];
                      }
                      v67 = v65;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v136.mSampleRate) = 136315650;
                        *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                        LOWORD(v136.mFormatFlags) = 1024;
                        *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 471;
                        HIWORD(v136.mBytesPerPacket) = 1024;
                        v136.mFramesPerPacket = v63;
                        v68 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_Conv"
                              "erterError) err %{audio:4CC}d";
                        goto LABEL_152;
                      }
                    }
                    else
                    {
                      if (kAVVCScope)
                      {
                        v64 = *(id *)kAVVCScope;
                        if (!v64)
                          goto LABEL_154;
                      }
                      else
                      {
                        v64 = (id)MEMORY[0x1E0C81028];
                        v66 = MEMORY[0x1E0C81028];
                      }
                      v67 = v64;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v136.mSampleRate) = 136315650;
                        *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                        LOWORD(v136.mFormatFlags) = 1024;
                        *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 471;
                        HIWORD(v136.mBytesPerPacket) = 1024;
                        v136.mFramesPerPacket = v63;
                        v68 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_Conv"
                              "erterError) err %d";
LABEL_152:
                        _os_log_impl(&dword_19B733000, v67, OS_LOG_TYPE_ERROR, v68, (uint8_t *)&v136, 0x18u);
                      }
                    }

                    goto LABEL_154;
                  }
                }
                else
                {
                  v57 = (id)MEMORY[0x1E0C81028];
                  v61 = MEMORY[0x1E0C81028];
                }
                v59 = v57;
                if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v136.mSampleRate) = 136315650;
                  *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                  LOWORD(v136.mFormatFlags) = 1024;
                  *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 469;
                  HIWORD(v136.mBytesPerPacket) = 1024;
                  v136.mFramesPerPacket = v53;
                  v60 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_IsRunning)"
                        " err %{audio:4CC}d";
                  goto LABEL_136;
                }
              }
              else
              {
                if (kAVVCScope)
                {
                  v54 = *(id *)kAVVCScope;
                  if (!v54)
                    goto LABEL_138;
                }
                else
                {
                  v54 = (id)MEMORY[0x1E0C81028];
                  v58 = MEMORY[0x1E0C81028];
                }
                v59 = v54;
                if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v136.mSampleRate) = 136315650;
                  *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                  LOWORD(v136.mFormatFlags) = 1024;
                  *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 469;
                  HIWORD(v136.mBytesPerPacket) = 1024;
                  v136.mFramesPerPacket = v53;
                  v60 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_IsRunning) err %d";
LABEL_136:
                  _os_log_impl(&dword_19B733000, v59, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&v136, 0x18u);
                }
              }

              goto LABEL_138;
            }
          }
          else
          {
            v33 = (id)MEMORY[0x1E0C81028];
            v41 = MEMORY[0x1E0C81028];
          }
          v37 = v33;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v136.mSampleRate) = 136315650;
            *(_QWORD *)((char *)&v136.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
            LOWORD(v136.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&v136.mFormatFlags + 2) = 416;
            HIWORD(v136.mBytesPerPacket) = 2112;
            *(_QWORD *)&v136.mFramesPerPacket = CFSTR("AVVoiceController_RecordQueue");
            v38 = "%25s:%-5d createRecordQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
            v39 = v37;
            v40 = OS_LOG_TYPE_DEBUG;
            goto LABEL_81;
          }
        }

        goto LABEL_83;
      }
    }
    v8 = inFormat.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_24;
  }
  if (*((uint64_t *)this + 28) <= 1)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_21:
        v9 = 4294955515;
        goto LABEL_228;
      }
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v138 = "AVVCAudioQueueRecordingEngine.mm";
      v139 = 1024;
      v140 = 345;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Record engine state does not match queue (previously assertion failure)", buf, 0x12u);
    }

    goto LABEL_21;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 136))(v123);
  v9 = 0;
LABEL_228:
  v112 = v124;
  if (v124)
  {
    v113 = (unint64_t *)&v124->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v125);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v126);

  return v9;
}

void sub_19B7B6DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  TraceMethod::~TraceMethod((TraceMethod *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a29);

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::Initialize(AVVCAudioQueueRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

void AVVCAudioQueueRecordingEngine::setHWSampleRate(AVVCAudioQueueRecordingEngine *this, double a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *((double *)this + 40) = a2;
  *((_BYTE *)this + 328) = a2 < 16000.0;
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      return;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 34);
    v6 = *((_QWORD *)this + 40);
    v7 = *((unsigned __int8 *)this + 328);
    v8 = 136316162;
    v9 = "AVVCAudioQueueRecordingEngine.mm";
    v10 = 1024;
    v11 = 252;
    v12 = 2048;
    v13 = v5;
    v14 = 2048;
    v15 = v6;
    v16 = 1024;
    v17 = v7;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHWSampleRate() streamID(%lu) sr(%.2f) upSamp(%d)", (uint8_t *)&v8, 0x2Cu);
  }

}

uint64_t AVVCAudioQueueRecordingEngine::prepareRecording(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2)
{
  NSDictionary *v3;
  uint64_t Recorder;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  AVAudioChannelLayout *v13;
  AVAudioFormat *v14;
  AVAudioPCMBuffer *v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  _BYTE v22[8];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v22, "prepareRecording");
  Recorder = AVVCRecordingEngine::setupASBDAndCreateRecorder((AVVCRecordingEngine *)this, v3);
  v5 = Recorder;
  if ((_DWORD)Recorder == -66680)
  {
    v5 = 4294955506;
    goto LABEL_38;
  }
  if (!(_DWORD)Recorder)
  {
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_11;
    }
    else
    {
      v6 = (id)MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    v8 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      v24 = "AVVCAudioQueueRecordingEngine.mm";
      v25 = 1024;
      v26 = 980;
      v27 = 2112;
      v28 = v9;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device is built in device (%@)- update channel count", buf, 0x1Cu);

    }
LABEL_11:
    v5 = AVVCAudioQueueRecordingEngine::setupDSPGraph(this);
    if ((_DWORD)v5)
      goto LABEL_38;
    v10 = *((_QWORD *)this + 103);
    if (v10 && *((_QWORD *)this + 104))
      *((_DWORD *)this + 9) |= 0x20u;
    *(_DWORD *)buf = 0;
    if (CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf)
      && *(_DWORD *)buf == 1)
    {
      v11 = 1;
      if (!v10)
      {
LABEL_25:
        if ((*((_BYTE *)this + 36) & 0x20) != 0)
          v17 = *((_DWORD *)this + 161);
        else
          v17 = 0;
        if (*((_QWORD *)this + 103) && *((_QWORD *)this + 104))
          v17 += 2;
        if (v17)
        {
          v18 = *((_QWORD *)this + 100);
          if (v18)
          {
            MEMORY[0x1A1AC5BBC](v18, 0x1000C8077774924);
            *((_QWORD *)this + 100) = 0;
          }
          v19 = (void *)*((_QWORD *)this + 101);
          if (v19)
          {
            free(v19);
            *((_QWORD *)this + 101) = 0;
          }
          v20 = (_DWORD *)operator new[]();
          *((_QWORD *)this + 100) = v20;
          *v20 = v17;
          *((_QWORD *)this + 101) = malloc_type_calloc((*((_DWORD *)this + 204) * v17 * *((_DWORD *)this + 12)), 1uLL, 0x5AE23348uLL);
        }
        AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
        v5 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      *(_DWORD *)buf = 0;
      v12 = CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf);
      if ((v12 & (*(_DWORD *)buf == 2)) != 0)
        v11 = 3;
      else
        v11 = 0;
      if (!v10)
        goto LABEL_25;
    }
    if (*((_QWORD *)this + 104))
    {
      v13 = -[AVAudioChannelLayout initWithLayoutTag:]([AVAudioChannelLayout alloc], "initWithLayoutTag:", 9633794);
      v14 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v11, 0, v13, *((double *)this + 3));
      v15 = -[AVAudioPCMBuffer initWithPCMFormat:frameCapacity:]([AVAudioPCMBuffer alloc], "initWithPCMFormat:frameCapacity:", v14, *((unsigned int *)this + 204));
      v16 = (void *)*((_QWORD *)this + 105);
      *((_QWORD *)this + 105) = v15;

    }
    goto LABEL_25;
  }
LABEL_38:
  TraceMethod::~TraceMethod((TraceMethod *)v22);

  return v5;
}

void sub_19B7B72FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::startRecording(AVVCAudioQueueRecordingEngine *this)
{
  void *v1;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  unint64_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  OSStatus v38;
  id v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  OSStatus v44;
  unsigned int v45;
  NSObject *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  NSObject *v51;
  const char *v52;
  id v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  NSObject *v60;
  const AudioTimeStamp *v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  id v65;
  id v66;
  NSObject *v67;
  const char *v68;
  const char *v69;
  id v70;
  id v71;
  id v72;
  NSObject *v73;
  const char *v74;
  id v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  char v95[8];
  uint8_t buf[4];
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  const char *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  const char *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v95, "startRecording");
  if (!kAVVCScope)
  {
    v3 = (id)MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
LABEL_5:
    v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_63:

      goto LABEL_64;
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v6 = v81;
    if ((_QWORD)v81)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 64))(v93, 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v1, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v7 = "Inactive";
          break;
        case 2u:
          v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v7 = "Deactivating";
          break;
        case 5u:
          v7 = "Prewarming";
          break;
        case 6u:
          v7 = "Activating";
          break;
        case 7u:
          v7 = "Active";
          break;
        default:
          v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v7 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v91, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v91)
    {
      v8 = (uint64_t)v92;
      if (v92)
        v8 = v92->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v91, *(unsigned int *)(v91 + 272), v8);
      v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = CFSTR("(0x0) use_count:0");
    }
    v10 = v9;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v78, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v11 = v78;
    if (v78)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v89, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 320))(v89);
      if (v12 > 4)
        v13 = "ILLEGAL";
      else
        v13 = off_1E3BEC7A8[v12];
    }
    else
    {
      v13 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v87, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v87)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v14 = *(_QWORD *)(v85 + 224);
      if (v14 > 6)
        v15 = "ILLEGAL";
      else
        v15 = off_1E3BEC7D0[v14];
      *(_DWORD *)buf = 136316418;
      v97 = "AVVCAudioQueueRecordingEngine.mm";
      v98 = 1024;
      v99 = 1033;
      v100 = 2080;
      v101 = v7;
      v102 = 2112;
      v103 = (const char *)v10;
      v104 = 2080;
      v105 = v13;
      v106 = 2080;
      v107 = v15;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v16 = v86;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      v97 = "AVVCAudioQueueRecordingEngine.mm";
      v98 = 1024;
      v99 = 1033;
      v100 = 2080;
      v101 = v7;
      v102 = 2112;
      v103 = (const char *)v10;
      v104 = 2080;
      v105 = v13;
      v106 = 2080;
      v107 = "unconfigured";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v19 = v88;
    if (v88)
    {
      v20 = (unint64_t *)&v88->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v11)
    {
      v22 = v90;
      if (v90)
      {
        v23 = (unint64_t *)&v90->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    v25 = (std::__shared_weak_count *)v79;
    if ((_QWORD)v79)
    {
      v26 = (unint64_t *)(v79 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    v28 = v92;
    if (!v92)
      goto LABEL_50;
    v29 = (unint64_t *)&v92->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (v6)
        goto LABEL_51;
    }
    else
    {
LABEL_50:
      if (v6)
      {
LABEL_51:

        v31 = v94;
        if (v94)
        {
          v32 = (unint64_t *)&v94->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    goto LABEL_63;
  }
  v3 = *(id *)kAVVCScope;
  if (v3)
    goto LABEL_5;
LABEL_64:
  if (*((_QWORD *)this + 28) != 4)
  {
    if (kAVVCScope)
    {
      v46 = *(id *)kAVVCScope;
      if (!v46)
        goto LABEL_88;
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
      v47 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v97 = "AVVCAudioQueueRecordingEngine.mm";
      v98 = 1024;
      v99 = 1036;
      _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueue startRecording: record state already started or stopping -- no-op", buf, 0x12u);
    }

    goto LABEL_88;
  }
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "resetAudioIssueDetector");

  if (v38)
  {
LABEL_88:
    TraceMethod::~TraceMethod((TraceMethod *)v95);
    return;
  }
  *((_BYTE *)this + 760) = 0;
  if (*((_BYTE *)this + 684))
  {
LABEL_113:
    v54 = (const char *)*((_QWORD *)this + 30);
    v55 = mach_absolute_time();
    if (v38)
      goto LABEL_160;
    v56 = v55;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    if (v54)
    {
      if (kAVVCScope)
      {
        v57 = *(id *)kAVVCScope;
        if (!v57)
        {
LABEL_125:
          *(_QWORD *)&v81 = 0;
          *((_QWORD *)&v81 + 1) = v54;
          v82 = 0u;
          v83 = 0u;
          *(_QWORD *)&v84 = 0;
          DWORD2(v84) = 2;
          v61 = (const AudioTimeStamp *)&v81;
          v62 = (uint64_t)v54;
          goto LABEL_131;
        }
      }
      else
      {
        v57 = (id)MEMORY[0x1E0C81028];
        v59 = MEMORY[0x1E0C81028];
      }
      v60 = v57;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v97 = "AVVCAudioQueueRecordingEngine.mm";
        v98 = 1024;
        v99 = 1076;
        v100 = 2048;
        v101 = v54;
        _os_log_impl(&dword_19B733000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### Starting record queue at time %llu ####", buf, 0x1Cu);
      }

      goto LABEL_125;
    }
    if (kAVVCScope)
    {
      v58 = *(id *)kAVVCScope;
      if (!v58)
      {
LABEL_130:
        v62 = mach_absolute_time();
        v61 = 0;
LABEL_131:
        *((_QWORD *)this + 86) = v62;
        if (kAVVCScope)
        {
          v65 = *(id *)kAVVCScope;
          if (!v65)
          {
LABEL_142:
            LODWORD(v78) = 4103;
            BYTE4(v78) = 1;
            v79 = 0u;
            v80 = 0u;
            kdebug_trace();
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording : AudioQueueStart", 0);
            ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_RecordQueueStart"));
            v38 = AudioQueueStart(*((AudioQueueRef *)this + 76), v61);
            ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_RecordQueueEnd"));
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            TraceWrapper::~TraceWrapper((TraceWrapper *)&v78);
            if (v38)
            {
              if ((v38 + 199999) >= 0x61A7F)
              {
                if (kAVVCScope)
                {
                  v71 = *(id *)kAVVCScope;
                  if (!v71)
                    goto LABEL_159;
                }
                else
                {
                  v71 = (id)MEMORY[0x1E0C81028];
                  v75 = MEMORY[0x1E0C81028];
                }
                v73 = v71;
                if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                  goto LABEL_158;
                *(_DWORD *)buf = 136315650;
                v97 = "AVVCAudioQueueRecordingEngine.mm";
                v98 = 1024;
                v99 = 1096;
                v100 = 1024;
                LODWORD(v101) = v38;
                v74 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueStart err %{audio:4CC}d";
              }
              else
              {
                if (kAVVCScope)
                {
                  v70 = *(id *)kAVVCScope;
                  if (!v70)
                    goto LABEL_159;
                }
                else
                {
                  v70 = (id)MEMORY[0x1E0C81028];
                  v72 = MEMORY[0x1E0C81028];
                }
                v73 = v70;
                if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                {
LABEL_158:

LABEL_159:
                  *((_QWORD *)this + 30) = 0;
LABEL_160:
                  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v38, "startRecording");
                  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
                  if (v38 == -66671)
                    (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD))(*(_QWORD *)this + 112))(this, 0);
                  goto LABEL_88;
                }
                *(_DWORD *)buf = 136315650;
                v97 = "AVVCAudioQueueRecordingEngine.mm";
                v98 = 1024;
                v99 = 1096;
                v100 = 1024;
                LODWORD(v101) = v38;
                v74 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueStart err %d";
              }
              _os_log_impl(&dword_19B733000, v73, OS_LOG_TYPE_ERROR, v74, buf, 0x18u);
              goto LABEL_158;
            }
            *((_QWORD *)this + 30) = 0;
            goto LABEL_88;
          }
        }
        else
        {
          v65 = (id)MEMORY[0x1E0C81028];
          v66 = MEMORY[0x1E0C81028];
        }
        v67 = v65;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          v68 = "past";
          v69 = (const char *)*((_QWORD *)this + 86);
          *(_DWORD *)buf = 136316162;
          v97 = "AVVCAudioQueueRecordingEngine.mm";
          if ((unint64_t)v54 > v56)
            v68 = "future";
          v98 = 1024;
          v99 = 1084;
          v100 = 2080;
          v101 = "";
          if (!v54)
            v68 = "immediate";
          v102 = 2080;
          v103 = v68;
          v104 = 2048;
          v105 = v69;
          _os_log_impl(&dword_19B733000, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC starting record queue%s at (%s) hosttime (%lld) ", buf, 0x30u);
        }

        goto LABEL_142;
      }
    }
    else
    {
      v58 = (id)MEMORY[0x1E0C81028];
      v63 = MEMORY[0x1E0C81028];
    }
    v64 = v58;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v97 = "AVVCAudioQueueRecordingEngine.mm";
      v98 = 1024;
      v99 = 1073;
      _os_log_impl(&dword_19B733000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### Starting record queue immediately ####", buf, 0x12u);
    }

    goto LABEL_130;
  }
  if (*((_QWORD *)this + 28) == 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v76 = MEMORY[0x1E0C81028];
      v77 = " ASSERTION FAILED: attempting to prime record queue while queue is running";
LABEL_166:
      _os_log_error_impl(&dword_19B733000, v76, OS_LOG_TYPE_ERROR, v77, buf, 2u);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 167))
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v39 = *(id *)kAVVCScope;
          if (v39)
          {
            v40 = v39;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
            {
              v41 = *((_DWORD *)this + 166);
              *(_DWORD *)buf = 136315650;
              v97 = "AVVCAudioQueueRecordingEngine.mm";
              v98 = 1024;
              v99 = 1052;
              v100 = 1024;
              LODWORD(v101) = v41;
              _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordQueue: enqueing %d buffers", buf, 0x18u);
            }

          }
        }
      }
      if (!*((_DWORD *)this + 166))
      {
LABEL_80:
        v38 = 0;
LABEL_112:
        *((_BYTE *)this + 684) = v38 == 0;
        goto LABEL_113;
      }
      v42 = 0;
      v43 = (unsigned int *)((char *)this + 668);
      while (1)
      {
        v44 = AudioQueueEnqueueBuffer(*((AudioQueueRef *)this + 76), *(AudioQueueBufferRef *)(*((_QWORD *)this + 82) + 8 * v42), 0, 0);
        v38 = v44;
        if (v44)
          break;
        do
          v45 = __ldxr(v43);
        while (__stxr(v45 + 1, v43));
        if (++v42 >= (unint64_t)*((unsigned int *)this + 166))
          goto LABEL_80;
      }
      if ((v44 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          v49 = *(id *)kAVVCScope;
          if (!v49)
            goto LABEL_111;
        }
        else
        {
          v49 = (id)MEMORY[0x1E0C81028];
          v53 = MEMORY[0x1E0C81028];
        }
        v51 = v49;
        if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          goto LABEL_110;
        *(_DWORD *)buf = 136315650;
        v97 = "AVVCAudioQueueRecordingEngine.mm";
        v98 = 1024;
        v99 = 1055;
        v100 = 1024;
        LODWORD(v101) = v38;
        v52 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueEnqueueBuffer err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          v48 = *(id *)kAVVCScope;
          if (!v48)
            goto LABEL_111;
        }
        else
        {
          v48 = (id)MEMORY[0x1E0C81028];
          v50 = MEMORY[0x1E0C81028];
        }
        v51 = v48;
        if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
LABEL_110:

LABEL_111:
          ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording:AudioQueueReset", 0);
          AudioQueueReset(*((AudioQueueRef *)this + 76));
          *v43 = 0;
          ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
          goto LABEL_112;
        }
        *(_DWORD *)buf = 136315650;
        v97 = "AVVCAudioQueueRecordingEngine.mm";
        v98 = 1024;
        v99 = 1055;
        v100 = 1024;
        LODWORD(v101) = v38;
        v52 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueEnqueueBuffer err %d";
      }
      _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_ERROR, v52, buf, 0x18u);
      goto LABEL_110;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v76 = MEMORY[0x1E0C81028];
      v77 = " ASSERTION FAILED: some buffers already enqueued!";
      goto LABEL_166;
    }
  }
  __break(1u);
}

void sub_19B7B8098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,char a38)
{
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a38);
  TraceMethod::~TraceMethod((TraceMethod *)&a36);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::stopRecording(AVVCAudioQueueRecordingEngine *this)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  const char *v42;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  char v57[8];
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  __CFString *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v57, "stopRecording");
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
LABEL_5:
    v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
LABEL_63:

      goto LABEL_64;
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v70, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v5 = v70;
    if (v70)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v55, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 64))(v55, 0);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v44, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v6 = "Inactive";
          break;
        case 2u:
          v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v6 = "Deactivating";
          break;
        case 5u:
          v6 = "Prewarming";
          break;
        case 6u:
          v6 = "Activating";
          break;
        case 7u:
          v6 = "Active";
          break;
        default:
          v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v53, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v53)
    {
      v7 = (uint64_t)v54;
      if (v54)
        v7 = v54->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v53, *(unsigned int *)(v53 + 272), v7);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = CFSTR("(0x0) use_count:0");
    }
    v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v51, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v10 = v51;
    if (v51)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v49, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 320))(v49);
      if (v11 > 4)
        v12 = "ILLEGAL";
      else
        v12 = off_1E3BEC7A8[v11];
    }
    else
    {
      v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v47, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v47)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v45, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v13 = *(_QWORD *)(v45 + 224);
      if (v13 > 6)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC7D0[v13];
      *(_DWORD *)buf = 136316418;
      v59 = "AVVCAudioQueueRecordingEngine.mm";
      v60 = 1024;
      v61 = 1121;
      v62 = 2080;
      v63 = v6;
      v64 = 2112;
      v65 = v9;
      v66 = 2080;
      v67 = v12;
      v68 = 2080;
      v69 = v14;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v15 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      v59 = "AVVCAudioQueueRecordingEngine.mm";
      v60 = 1024;
      v61 = 1121;
      v62 = 2080;
      v63 = v6;
      v64 = 2112;
      v65 = v9;
      v66 = 2080;
      v67 = v12;
      v68 = 2080;
      v69 = "unconfigured";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v18 = v48;
    if (v48)
    {
      v19 = (unint64_t *)&v48->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v10)
    {
      v21 = v50;
      if (v50)
      {
        v22 = (unint64_t *)&v50->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v24 = v52;
    if (v52)
    {
      v25 = (unint64_t *)&v52->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    v27 = v54;
    if (!v54)
      goto LABEL_50;
    v28 = (unint64_t *)&v54->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v5)
        goto LABEL_51;
    }
    else
    {
LABEL_50:
      if (v5)
      {
LABEL_51:

        v30 = v56;
        if (v56)
        {
          v31 = (unint64_t *)&v56->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
    v33 = (std::__shared_weak_count *)v71;
    if ((_QWORD)v71)
    {
      v34 = (unint64_t *)(v71 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    goto LABEL_63;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
    goto LABEL_5;
LABEL_64:
  if (*((_QWORD *)this + 76))
  {
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
      {
        v36 = *(id *)kAVVCScope;
        if (v36)
        {
          v37 = v36;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v59 = "AVVCAudioQueueRecordingEngine.mm";
            v60 = 1024;
            v61 = 1130;
            _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d stopRecordQueue: mRecordIsStopping set to true", buf, 0x12u);
          }

        }
      }
    }
    *((_BYTE *)this + 252) = 1;
    AVVCRecordingEngine::setStreamState((uint64_t)this, 6);
    LODWORD(v70) = 4105;
    BYTE4(v70) = 1;
    v71 = 0u;
    v72 = 0u;
    kdebug_trace();
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "stopRecording", "mRecordQueue : AudioQueueStop", 0);
    v38 = AudioQueueStop(*((AudioQueueRef *)this + 76), 1u);
    ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v70);
    if (kAVVCScope)
    {
      v39 = *(id *)kAVVCScope;
      if (!v39)
      {
LABEL_81:
        *((_BYTE *)this + 880) = 1;
        goto LABEL_82;
      }
    }
    else
    {
      v39 = (id)MEMORY[0x1E0C81028];
      v40 = MEMORY[0x1E0C81028];
    }
    v41 = v39;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v70, v38);
      v42 = " but failed";
      v59 = "AVVCAudioQueueRecordingEngine.mm";
      v60 = 1024;
      v61 = 1141;
      *(_DWORD *)buf = 136315906;
      if (!(_DWORD)v38)
        v42 = "";
      v62 = 2080;
      v63 = v42;
      v64 = 2080;
      v65 = (__CFString *)&v70;
      _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordQueue: AudioQueueStop%s err(%s)", buf, 0x26u);
    }

    goto LABEL_81;
  }
  v38 = 0;
LABEL_82:
  TraceMethod::~TraceMethod((TraceMethod *)v57);
  return v38;
}

void sub_19B7B88D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  TraceMethod::~TraceMethod((TraceMethod *)&a26);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::destroyRecordEngine(AVVCAudioQueueRecordingEngine *this, int a2)
{
  id v4;
  id v5;
  NSObject *v6;
  AVVCRecordingEngine *v7;
  const char *v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  OpaqueAudioQueue *v41;
  id v42;
  NSObject *v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  id v48;
  id v49;
  NSObject *v50;
  OSStatus v51;
  id v52;
  id v53;
  id v54;
  NSObject *v55;
  OSStatus v56;
  id v57;
  id v58;
  NSObject *v59;
  const char *v60;
  id v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  id v65;
  NSObject *v66;
  OSStatus v67;
  OSStatus v68;
  id v69;
  id v70;
  id v71;
  NSObject *v72;
  const char *v73;
  id v74;
  id v75;
  NSObject *v76;
  const char *v77;
  id v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  NSObject *v85;
  void *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  id v91;
  id v92;
  NSObject *v93;
  const char *v94;
  id v95;
  id v96;
  NSObject *v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  AVVCRecordingEngine *v111;
  std::__shared_weak_count *v112;
  _BYTE v113[8];
  int v114;
  char v115;
  __int128 v116;
  __int128 v117;
  uint8_t buf[4];
  const char *v119;
  __int16 v120;
  int v121;
  __int16 v122;
  const char *v123;
  __int16 v124;
  __CFString *v125;
  __int16 v126;
  const char *v127;
  __int16 v128;
  const char *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v114 = 4119;
  v115 = 1;
  v116 = 0u;
  v117 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v113, "destroyRecordEngine");
  if (!kAVVCScope)
  {
    v4 = (id)MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
LABEL_5:
    v6 = v4;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
LABEL_63:

      goto LABEL_64;
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v111, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v7 = v111;
    if (v111)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v109, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 64))(v109, 0);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v98, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v8 = "Inactive";
          break;
        case 2u:
          v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v8 = "Deactivating";
          break;
        case 5u:
          v8 = "Prewarming";
          break;
        case 6u:
          v8 = "Activating";
          break;
        case 7u:
          v8 = "Active";
          break;
        default:
          v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v8 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v107, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v107)
    {
      v9 = (uint64_t)v108;
      if (v108)
        v9 = v108->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v107, *(unsigned int *)(v107 + 272), v9);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = CFSTR("(0x0) use_count:0");
    }
    v11 = v10;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v105, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v12 = v105;
    if (v105)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v103, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 320))(v103);
      if (v13 > 4)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC7A8[v13];
    }
    else
    {
      v14 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v101, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v101)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v99, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v15 = *(_QWORD *)(v99 + 224);
      if (v15 > 6)
        v16 = "ILLEGAL";
      else
        v16 = off_1E3BEC7D0[v15];
      *(_DWORD *)buf = 136316418;
      v119 = "AVVCAudioQueueRecordingEngine.mm";
      v120 = 1024;
      v121 = 1155;
      v122 = 2080;
      v123 = v8;
      v124 = 2112;
      v125 = v11;
      v126 = 2080;
      v127 = v14;
      v128 = 2080;
      v129 = v16;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v17 = v100;
      if (v100)
      {
        p_shared_owners = (unint64_t *)&v100->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      v119 = "AVVCAudioQueueRecordingEngine.mm";
      v120 = 1024;
      v121 = 1155;
      v122 = 2080;
      v123 = v8;
      v124 = 2112;
      v125 = v11;
      v126 = 2080;
      v127 = v14;
      v128 = 2080;
      v129 = "unconfigured";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v20 = v102;
    if (v102)
    {
      v21 = (unint64_t *)&v102->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v12)
    {
      v23 = v104;
      if (v104)
      {
        v24 = (unint64_t *)&v104->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v26 = v106;
    if (v106)
    {
      v27 = (unint64_t *)&v106->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    v29 = v108;
    if (!v108)
      goto LABEL_50;
    v30 = (unint64_t *)&v108->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (v7)
        goto LABEL_51;
    }
    else
    {
LABEL_50:
      if (v7)
      {
LABEL_51:

        v32 = v110;
        if (v110)
        {
          v33 = (unint64_t *)&v110->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
    v35 = v112;
    if (v112)
    {
      v36 = (unint64_t *)&v112->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }

    goto LABEL_63;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
    goto LABEL_5;
LABEL_64:
  if (kAVVCScope)
  {
    v38 = *(id *)kAVVCScope;
    if (!v38)
      goto LABEL_71;
  }
  else
  {
    v38 = (id)MEMORY[0x1E0C81028];
    v39 = MEMORY[0x1E0C81028];
  }
  v40 = v38;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v119 = "AVVCAudioQueueRecordingEngine.mm";
    v120 = 1024;
    v121 = 1156;
    _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling destroyRecordEngine", buf, 0x12u);
  }

LABEL_71:
  if (!*((_QWORD *)this + 76))
  {
LABEL_182:
    TraceMethod::~TraceMethod((TraceMethod *)v113);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v114);
    return;
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v111, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v41 = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v42 = *(id *)kAVVCScope;
      if (v42)
      {
        v43 = v42;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v119 = "AVVCAudioQueueRecordingEngine.mm";
          v120 = 1024;
          v121 = 1162;
          _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: mRecordIsStopping set to true", buf, 0x12u);
        }

      }
    }
  }
  *((_BYTE *)this + 252) = 1;
  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
  *((_QWORD *)this + 76) = 0;
  if (a2)
  {
    v44 = *((_DWORD *)this + 58);
    if (v44 != -11790 && v44 != -11785)
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v54 = *(id *)kAVVCScope;
          if (v54)
          {
            v55 = v54;
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v119 = "AVVCAudioQueueRecordingEngine.mm";
              v120 = 1024;
              v121 = 1169;
              _os_log_impl(&dword_19B733000, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: about to call AudioQueueStop(..., true)", buf, 0x12u);
            }

          }
        }
      }
      ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyRecordEngine", "queue : AudioQueueStop", 0);
      v56 = AudioQueueStop(v41, 1u);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      if (kAVVCScope)
      {
        v57 = *(id *)kAVVCScope;
        if (!v57)
          goto LABEL_151;
      }
      else
      {
        v57 = (id)MEMORY[0x1E0C81028];
        v71 = MEMORY[0x1E0C81028];
      }
      v72 = v57;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        v73 = " but failed";
        *(_DWORD *)buf = 136315906;
        v119 = "AVVCAudioQueueRecordingEngine.mm";
        v121 = 1177;
        v122 = 2080;
        v120 = 1024;
        if (!v56)
          v73 = "";
        v123 = v73;
        v124 = 1024;
        LODWORD(v125) = v56;
        _os_log_impl(&dword_19B733000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped record queue%s (%d)", buf, 0x22u);
      }

LABEL_151:
      if (!v56)
        goto LABEL_201;
      if ((v56 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          v91 = *(id *)kAVVCScope;
          if (!v91)
          {
LABEL_201:
            if (kAVVCScope)
            {
              if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
              {
                v96 = *(id *)kAVVCScope;
                if (v96)
                {
                  v97 = v96;
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    v119 = "AVVCAudioQueueRecordingEngine.mm";
                    v120 = 1024;
                    v121 = 1180;
                    _os_log_impl(&dword_19B733000, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine:  calling doneRecording by hand", buf, 0x12u);
                  }

                }
              }
            }
            AVVCRecordingEngine::doneRecording(v111);
LABEL_83:
            AudioQueueRemovePropertyListener(v41, 0x6171726Eu, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
            AudioQueueRemovePropertyListener(v41, 0x71637665u, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
            v45 = (std::__shared_weak_count *)*((_QWORD *)this + 109);
            *((_OWORD *)this + 54) = 0u;
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            if (kAVVCScope)
            {
              v48 = *(id *)kAVVCScope;
              if (!v48)
                goto LABEL_96;
            }
            else
            {
              v48 = (id)MEMORY[0x1E0C81028];
              v49 = MEMORY[0x1E0C81028];
            }
            v50 = v48;
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              v119 = "AVVCAudioQueueRecordingEngine.mm";
              v120 = 1024;
              v121 = 1195;
              _os_log_impl(&dword_19B733000, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroyRecordEngine: about to call AudioQueueDispose(..., true)", buf, 0x12u);
            }

LABEL_96:
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyRecordEngine", "destroyRecordEngine: AudioQueueDispose", 0);
            v51 = AudioQueueDispose(v41, 1u);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (!v51)
              goto LABEL_121;
            if ((v51 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                v53 = *(id *)kAVVCScope;
                if (!v53)
                {
LABEL_121:
                  CallbackBarrier(*(__CFRunLoop **)(*((_QWORD *)this + 96) + 128));
                  AVVCRecordingEngine::setStreamState((uint64_t)this, 1);
                  v62 = *((_QWORD *)this + 82);
                  if (v62)
                    MEMORY[0x1A1AC5BBC](v62, 0x20C8093837F09);
                  *((_QWORD *)this + 82) = 0;
                  if (kAVVCScope)
                  {
                    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
                    {
                      v63 = *(id *)kAVVCScope;
                      if (v63)
                      {
                        v64 = v63;
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136315394;
                          v119 = "AVVCAudioQueueRecordingEngine.mm";
                          v120 = 1024;
                          v121 = 1211;
                          _os_log_impl(&dword_19B733000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: mRecordIsStopping set to false", buf, 0x12u);
                        }

                      }
                    }
                  }
                  *((_BYTE *)this + 252) = 0;
                  *((_DWORD *)this + 167) = 0;
                  *((_BYTE *)this + 684) = 0;
                  if (*((_QWORD *)this + 97))
                  {
                    if (kAVVCScope)
                    {
                      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
                      {
                        v65 = *(id *)kAVVCScope;
                        if (v65)
                        {
                          v66 = v65;
                          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 136315394;
                            v119 = "AVVCAudioQueueRecordingEngine.mm";
                            v120 = 1024;
                            v121 = 1218;
                            _os_log_impl(&dword_19B733000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: about to destroy audio converter", buf, 0x12u);
                          }

                        }
                      }
                    }
                    v67 = AudioConverterDispose(*((AudioConverterRef *)this + 97));
                    v68 = v67;
                    if (*((_DWORD *)this + 58) != -11785)
                    {
                      if (v67)
                      {
                        if ((v67 + 199999) < 0x61A7F)
                        {
                          if (kAVVCScope)
                          {
                            v69 = *(id *)kAVVCScope;
                            if (!v69)
                              goto LABEL_164;
                          }
                          else
                          {
                            v69 = (id)MEMORY[0x1E0C81028];
                            v75 = MEMORY[0x1E0C81028];
                          }
                          v76 = v69;
                          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            v119 = "AVVCAudioQueueRecordingEngine.mm";
                            v120 = 1024;
                            v121 = 1221;
                            v122 = 1024;
                            LODWORD(v123) = v68;
                            v77 = "%25s:%-5d ERROR: destroyRecordEngine: AudioConverterDispose err %d";
LABEL_162:
                            _os_log_impl(&dword_19B733000, v76, OS_LOG_TYPE_ERROR, v77, buf, 0x18u);
                            goto LABEL_163;
                          }
                          goto LABEL_163;
                        }
                        if (kAVVCScope)
                        {
                          v70 = *(id *)kAVVCScope;
                          if (!v70)
                            goto LABEL_164;
                        }
                        else
                        {
                          v70 = (id)MEMORY[0x1E0C81028];
                          v78 = MEMORY[0x1E0C81028];
                        }
                        v76 = v70;
                        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315650;
                          v119 = "AVVCAudioQueueRecordingEngine.mm";
                          v120 = 1024;
                          v121 = 1221;
                          v122 = 1024;
                          LODWORD(v123) = v68;
                          v77 = "%25s:%-5d ERROR: destroyRecordEngine: AudioConverterDispose err %{audio:4CC}d";
                          goto LABEL_162;
                        }
LABEL_163:

                      }
                    }
                  }
LABEL_164:
                  *((_QWORD *)this + 97) = 0;
                  v79 = (void *)*((_QWORD *)this + 105);
                  *((_QWORD *)this + 105) = 0;

                  v80 = (void *)*((_QWORD *)this + 101);
                  if (v80)
                  {
                    free(v80);
                    *((_QWORD *)this + 101) = 0;
                  }
                  v81 = *((_QWORD *)this + 100);
                  if (v81)
                  {
                    MEMORY[0x1A1AC5BBC](v81, 0x1000C8077774924);
                    *((_QWORD *)this + 100) = 0;
                  }
                  v82 = (void *)*((_QWORD *)this + 99);
                  *((_QWORD *)this + 99) = 0;

                  if (!*((_QWORD *)this + 104))
                    goto LABEL_177;
                  if (kAVVCScope)
                  {
                    v83 = *(id *)kAVVCScope;
                    if (!v83)
                    {
LABEL_176:
                      objc_msgSend(*((id *)this + 103), "stop");
                      objc_msgSend(*((id *)this + 103), "detachNode:", *((_QWORD *)this + 104));
                      v86 = (void *)*((_QWORD *)this + 104);
                      *((_QWORD *)this + 104) = 0;

LABEL_177:
                      v87 = (void *)*((_QWORD *)this + 103);
                      *((_QWORD *)this + 103) = 0;

                      v88 = v112;
                      if (v112)
                      {
                        v89 = (unint64_t *)&v112->__shared_owners_;
                        do
                          v90 = __ldaxr(v89);
                        while (__stlxr(v90 - 1, v89));
                        if (!v90)
                        {
                          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                          std::__shared_weak_count::__release_weak(v88);
                        }
                      }
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    v83 = (id)MEMORY[0x1E0C81028];
                    v84 = MEMORY[0x1E0C81028];
                  }
                  v85 = v83;
                  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    v119 = "AVVCAudioQueueRecordingEngine.mm";
                    v120 = 1024;
                    v121 = 1242;
                    _os_log_impl(&dword_19B733000, v85, OS_LOG_TYPE_DEBUG, "%25s:%-5d Deleting old DSPGraph...", buf, 0x12u);
                  }

                  goto LABEL_176;
                }
              }
              else
              {
                v53 = (id)MEMORY[0x1E0C81028];
                v61 = MEMORY[0x1E0C81028];
              }
              v59 = v53;
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v119 = "AVVCAudioQueueRecordingEngine.mm";
                v120 = 1024;
                v121 = 1200;
                v122 = 1024;
                LODWORD(v123) = v51;
                v60 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueDispose err %{audio:4CC}d";
                goto LABEL_119;
              }
            }
            else
            {
              if (kAVVCScope)
              {
                v52 = *(id *)kAVVCScope;
                if (!v52)
                  goto LABEL_121;
              }
              else
              {
                v52 = (id)MEMORY[0x1E0C81028];
                v58 = MEMORY[0x1E0C81028];
              }
              v59 = v52;
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v119 = "AVVCAudioQueueRecordingEngine.mm";
                v120 = 1024;
                v121 = 1200;
                v122 = 1024;
                LODWORD(v123) = v51;
                v60 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueDispose err %d";
LABEL_119:
                _os_log_impl(&dword_19B733000, v59, OS_LOG_TYPE_ERROR, v60, buf, 0x18u);
              }
            }

            goto LABEL_121;
          }
        }
        else
        {
          v91 = (id)MEMORY[0x1E0C81028];
          v95 = MEMORY[0x1E0C81028];
        }
        v93 = v91;
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v119 = "AVVCAudioQueueRecordingEngine.mm";
          v120 = 1024;
          v121 = 1179;
          v122 = 1024;
          LODWORD(v123) = v56;
          v94 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueStop err %{audio:4CC}d";
          goto LABEL_199;
        }
      }
      else
      {
        if (kAVVCScope)
        {
          v74 = *(id *)kAVVCScope;
          if (!v74)
            goto LABEL_201;
        }
        else
        {
          v74 = (id)MEMORY[0x1E0C81028];
          v92 = MEMORY[0x1E0C81028];
        }
        v93 = v74;
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v119 = "AVVCAudioQueueRecordingEngine.mm";
          v120 = 1024;
          v121 = 1179;
          v122 = 1024;
          LODWORD(v123) = v56;
          v94 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueStop err %d";
LABEL_199:
          _os_log_impl(&dword_19B733000, v93, OS_LOG_TYPE_ERROR, v94, buf, 0x18u);
        }
      }

      goto LABEL_201;
    }
  }
  if (!QueueIsRunning(v41))
  {
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
    goto LABEL_83;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: queue was running when destroyed but not asked to stop", buf, 2u);
  }
  __break(1u);
}

void sub_19B7B9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a34);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  TraceMethod::~TraceMethod((TraceMethod *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a29);
  _Unwind_Resume(a1);
}

__n128 AVVCAudioQueueRecordingEngine::getRecordQueueFormat@<Q0>(AVVCAudioQueueRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 81);
  result = *(__n128 *)((char *)this + 616);
  v3 = *(_OWORD *)((char *)this + 632);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t AVVCAudioQueueRecordingEngine::getNumberOfChannels(AVVCAudioQueueRecordingEngine *this)
{
  return *((unsigned int *)this + 170);
}

uint64_t AVVCAudioQueueRecordingEngine::resetRecordBuffersEnqueued(uint64_t this)
{
  *(_DWORD *)(this + 668) = 0;
  return this;
}

uint64_t AVVCAudioQueueRecordingEngine::enableSiriListeningMode(AudioQueueRef *this, int a2)
{
  uint64_t v3;
  _BYTE v5[12];
  int inData;
  _BYTE v7[160];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  inData = a2;
  TraceMethod::TraceMethod((TraceMethod *)v5, "enableSiriListeningMode");
  if (this[76] && this[64] == (AudioQueueRef)1)
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)v7, "enableSiriListeningMode", "AudioQueueSetProperty : kAudioQueueProperty_EnableSiriListening", 0);
    v3 = AudioQueueSetProperty(this[76], 0x6C73746Eu, &inData, 4u);
    ElapsedTime::~ElapsedTime((ElapsedTime *)v7);
  }
  else
  {
    v3 = 0;
  }
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return v3;
}

void sub_19B7B9C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

NSObject *AVVCAudioQueueRecordingEngine::enableMetering(AVVCAudioQueueRecordingEngine *this, int a2)
{
  OpaqueAudioQueue *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  const char *v15;
  id v16;
  char v17;
  NSObject *v18;
  id v19;
  int v20;
  int inData;
  _BYTE v23[8];
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v23, "enableMetering");
  v4 = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (v4)
  {
    inData = a2;
    v5 = AudioQueueSetProperty(v4, 0x61716D65u, &inData, 4u);
    v6 = v5;
    if (!(_DWORD)v5)
    {
LABEL_25:
      if (!a2)
        goto LABEL_42;
      inData = 1;
      v12 = AudioQueueSetProperty(*((AudioQueueRef *)this + 76), 0x71696E6Du, &inData, 4u);
      v6 = v12;
      if (!(_DWORD)v12)
        goto LABEL_42;
      if (((_DWORD)v12 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          v13 = *(id *)kAVVCScope;
          if (!v13)
            goto LABEL_42;
        }
        else
        {
          v13 = MEMORY[0x1E0C81028];
          v14 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v25 = "AVVCAudioQueueRecordingEngine.mm";
          v26 = 1024;
          v27 = 1282;
          v28 = 1024;
          v29 = (int)v6;
          v15 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_InstantaneousMetering) err %d";
LABEL_40:
          _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, v15, buf, 0x18u);
          goto LABEL_41;
        }
        goto LABEL_41;
      }
      if (kAVVCScope)
      {
        v13 = *(id *)kAVVCScope;
        if (!v13)
          goto LABEL_42;
      }
      else
      {
        v13 = MEMORY[0x1E0C81028];
        v16 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v25 = "AVVCAudioQueueRecordingEngine.mm";
        v26 = 1024;
        v27 = 1282;
        v28 = 1024;
        v29 = (int)v6;
        v15 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_InstantaneousMetering) err %{audio:4CC}d";
        goto LABEL_40;
      }
LABEL_41:

      goto LABEL_42;
    }
    if (((_DWORD)v5 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v7 = *(id *)kAVVCScope;
        if (!v7)
          goto LABEL_25;
      }
      else
      {
        v7 = MEMORY[0x1E0C81028];
        v11 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)buf = 136315650;
      v25 = "AVVCAudioQueueRecordingEngine.mm";
      v26 = 1024;
      v27 = 1278;
      v28 = 1024;
      v29 = (int)v6;
      v10 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_EnableLevelMetering) err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v7 = *(id *)kAVVCScope;
        if (!v7)
          goto LABEL_25;
      }
      else
      {
        v7 = MEMORY[0x1E0C81028];
        v9 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)buf = 136315650;
      v25 = "AVVCAudioQueueRecordingEngine.mm";
      v26 = 1024;
      v27 = 1278;
      v28 = 1024;
      v29 = (int)v6;
      v10 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_EnableLevelMetering) err %d";
    }
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, v10, buf, 0x18u);
LABEL_24:

    goto LABEL_25;
  }
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_42;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "AVVCAudioQueueRecordingEngine.mm";
    v26 = 1024;
    v27 = 1285;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine: Record queue does not exist to enable metering. Caching, and will enable during prepare", buf, 0x12u);
  }

  v6 = 0;
LABEL_42:
  if ((_DWORD)v6)
    v17 = 0;
  else
    v17 = a2;
  *((_BYTE *)this + 296) = v17;
  if (kAVVCScope)
  {
    v18 = *(id *)kAVVCScope;
    if (!v18)
      goto LABEL_52;
  }
  else
  {
    v18 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *((unsigned __int8 *)this + 296);
    *(_DWORD *)buf = 136315650;
    v25 = "AVVCAudioQueueRecordingEngine.mm";
    v26 = 1024;
    v27 = 1288;
    v28 = 1024;
    v29 = v20;
    _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine: Enable Metering?: %d", buf, 0x18u);
  }

LABEL_52:
  TraceMethod::~TraceMethod((TraceMethod *)v23);
  return v6;
}

void sub_19B7BA100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::updateMeterLevels(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v2;
  void *v3;
  OpaqueAudioQueue *v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t Property;
  id v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  id v15;
  UInt32 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  _BOOL4 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 13);
  v3 = (void *)*((_QWORD *)this + 38);
  if (!v3)
  {
    v3 = malloc_type_calloc(*((unsigned int *)this + 13), 8uLL, 0x100004000313F17uLL);
    *((_QWORD *)this + 38) = v3;
  }
  if (!*((_BYTE *)this + 296)
    || ((v4 = (OpaqueAudioQueue *)*((_QWORD *)this + 76)) != 0 ? (v5 = v3 == 0) : (v5 = 1), v5))
  {
    v6 = 4294900625;
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_18;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *((unsigned __int8 *)this + 296);
      v11 = *((_QWORD *)this + 76) != 0;
      v12 = *((_QWORD *)this + 38) != 0;
      v16 = 136316162;
      v17 = "AVVCAudioQueueRecordingEngine.mm";
      v18 = 1024;
      v19 = 1314;
      v20 = 1024;
      v21 = v10;
      v22 = 1024;
      v23 = v11;
      v24 = 1024;
      v25 = v12;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine::updateMeterLevels: not fetching meter levels because one of them is untrue! mMeteringEnabled(%d), mRecordQueue(%d), mRecordMeters(%d)", (uint8_t *)&v16, 0x24u);
    }

  }
  else
  {
    v16 = 8 * v2;
    Property = AudioQueueGetProperty(v4, 0x61716D64u, v3, &v16);
    v6 = Property;
    if (!(_DWORD)Property)
      return v6;
  }
LABEL_18:
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
    {
      if (!(_DWORD)v2)
        return v6;
LABEL_21:
      memset_pattern16(*((void **)this + 38), &unk_19B85A350, 8 * v2);
      return v6;
    }
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v15 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v16 = 136315650;
    v17 = "AVVCAudioQueueRecordingEngine.mm";
    v18 = 1024;
    v19 = 1317;
    v20 = 1024;
    v21 = v6;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCAudioQueueRecordingEngine::updateMeterLevels: Error! In fetching meter levels. Sending 'no signal'. Error(%d)", (uint8_t *)&v16, 0x18u);
  }

  if ((_DWORD)v2)
    goto LABEL_21;
  return v6;
}

void AVVCAudioQueueRecordingEngine::updateStreamStoppedState(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v1;

  if (*((_QWORD *)this + 76))
    v1 = 3;
  else
    v1 = 1;
  AVVCRecordingEngine::setStreamState((uint64_t)this, v1);
}

uint64_t AVVCAudioQueueRecordingEngine::resetAudioEngine(AudioQueueRef *this)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _BYTE v6[8];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v6, "resetAudioEngine");
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "AVVCAudioQueueRecordingEngine.mm";
    v9 = 1024;
    v10 = 1944;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d doneRecording: resetting record queue", buf, 0x12u);
  }

LABEL_8:
  if (this[76])
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "resetAudioEngine", "resetAudioEngine:mRecordQueue: AudioQueueReset", 0);
    v4 = AudioQueueReset(this[76]);
    ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  }
  else
  {
    v4 = 0;
  }
  TraceMethod::~TraceMethod((TraceMethod *)v6);
  return v4;
}

void sub_19B7BA4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

double AVVCAudioQueueRecordingEngine::getElapsedRecordTime(AVVCAudioQueueRecordingEngine *this, double a2)
{
  return (double)*((unint64_t *)this + 84) / a2;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueueUInt32PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, unsigned int *a3)
{
  OpaqueAudioQueue *result;
  UInt32 ioDataSize;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
  {
    ioDataSize = 4;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, &ioDataSize);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueueFloat64PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, double *a3)
{
  OpaqueAudioQueue *result;
  UInt32 ioDataSize;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
  {
    ioDataSize = 8;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, &ioDataSize);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::setQueueUInt32PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, int a3)
{
  OpaqueAudioQueue *result;
  int inData;

  inData = a3;
  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
    return (OpaqueAudioQueue *)AudioQueueSetProperty(result, a2, &inData, 4u);
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::setQueueFloat64PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, double a3)
{
  OpaqueAudioQueue *result;
  double inData;

  inData = a3;
  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
    return (OpaqueAudioQueue *)AudioQueueSetProperty(result, a2, &inData, 8u);
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueuePropertyValueSize(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, unsigned int *a3)
{
  OpaqueAudioQueue *result;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
    return (OpaqueAudioQueue *)AudioQueueGetPropertySize(result, a2, a3);
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueuePtrPropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, void *a3, unsigned int *a4)
{
  OpaqueAudioQueue *result;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, a4);
  return result;
}

void AVVCAudioQueueRecordingEngine::handleRecordQueuePropertyListener(AVVCAudioQueueRecordingEngine *this, OpaqueAudioQueue *a2, int a3)
{
  void *p_info;
  NSObject *v6;
  unsigned int v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  OSStatus Property;
  id v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  id v23;
  unint64_t v24;
  char *v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  id v63;
  NSObject *v64;
  NSObject *v65;
  id v66;
  id v67;
  NSObject *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  __CFString *v72;
  __CFString *v73;
  uint64_t v74;
  unsigned int v75;
  const char *v76;
  unint64_t v77;
  const char *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  id v102;
  NSObject *v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  __CFString *v107;
  __CFString *v108;
  uint64_t v109;
  unsigned int v110;
  const char *v111;
  unint64_t v112;
  const char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  __CFString *v126;
  uint64_t v127;
  unsigned int v128;
  const char *v129;
  unint64_t v130;
  const char *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  UInt32 ioDataSize;
  unsigned int outData;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142[2];
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  AVVCRecordingEngine *v155;
  std::__shared_weak_count *v156;
  char v157[8];
  const char *v158;
  std::__shared_weak_count *v159;
  uint8_t buf[4];
  const char *v161;
  __int16 v162;
  int v163;
  __int16 v164;
  const char *v165;
  __int16 v166;
  __CFString *v167;
  __int16 v168;
  const char *v169;
  __int16 v170;
  const char *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v157, "handleRecordQueuePropertyListener");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v155, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (*((uint64_t *)this + 28) > 1)
  {
    if (a3 != 1902343781)
    {
      if (a3 != 1634824814)
        goto LABEL_270;
      v7 = QueueIsRunning(*((OpaqueAudioQueue **)this + 76));
      if (kAVVCScope)
      {
        v8 = *(id *)kAVVCScope;
        if (!v8)
          goto LABEL_103;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
        v23 = MEMORY[0x1E0C81028];
      }
      v8 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v158, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v24 = *((_QWORD *)this + 28);
        v25 = v24 > 6 ? "ILLEGAL" : off_1E3BEC7D0[v24];
        *(_DWORD *)buf = 136316162;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 1452;
        v164 = 2048;
        v165 = v158;
        v166 = 2080;
        v167 = (__CFString *)v25;
        v168 = 1024;
        LODWORD(v169) = v7;
        _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handleRecordQueuePropertyListener (%p): Stream State: %s. AQ Running: %d", buf, 0x2Cu);
        v56 = v159;
        if (v159)
        {
          p_shared_owners = (unint64_t *)&v159->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }

LABEL_103:
      if (v7)
      {
        if (*((_QWORD *)this + 28) == 4)
        {
          kdebug_trace();
          if (kAVVCScope)
          {
            if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
            {
              v59 = *(id *)kAVVCScope;
              if (v59)
              {
                v60 = v59;
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  v161 = "AVVCAudioQueueRecordingEngine.mm";
                  v162 = 1024;
                  v163 = 1457;
                  _os_log_impl(&dword_19B733000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: RUNNING", buf, 0x12u);
                }

              }
            }
          }
          AVVCRecordingEngine::startedRecording(v155);
        }
        else
        {
          if (kAVVCScope)
          {
            if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
            {
              v64 = *(id *)kAVVCScope;
              if (v64)
              {
                v65 = v64;
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  v161 = "AVVCAudioQueueRecordingEngine.mm";
                  v162 = 1024;
                  v163 = 1461;
                  _os_log_impl(&dword_19B733000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: RUNNING-PAUSED", buf, 0x12u);
                }

              }
            }
          }
          if (kAVVCScope)
          {
            v66 = *(id *)kAVVCScope;
            if (!v66)
              goto LABEL_270;
          }
          else
          {
            v66 = (id)MEMORY[0x1E0C81028];
            v102 = MEMORY[0x1E0C81028];
          }
          v103 = v66;
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v158, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            v104 = v158;
            if (v158)
            {
              std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v153, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 64))(v153, 0);
              v8 = objc_claimAutoreleasedReturnValue();
              switch(-[NSObject sessionState](v8, "sessionState"))
              {
                case 0u:
                  goto LABEL_252;
                case 1u:
                  v105 = "Inactive";
                  break;
                case 2u:
                  v105 = "InteruptedWhileRecording";
                  break;
                case 3u:
                  v105 = "InteruptedWhilePlaying";
                  break;
                case 4u:
                  v105 = "Deactivating";
                  break;
                case 5u:
                  v105 = "Prewarming";
                  break;
                case 6u:
                  v105 = "Activating";
                  break;
                case 7u:
                  v105 = "Active";
                  break;
                default:
                  v105 = "ILLEGAL";
                  break;
              }
            }
            else
            {
LABEL_252:
              v105 = "NotConfigured";
            }
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v142, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            engineToString(v142[0], v142[1]);
            v126 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            v127 = v149;
            if (v149)
            {
              std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v147, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
              v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 320))(v147);
              if (v128 > 4)
                v129 = "ILLEGAL";
              else
                v129 = off_1E3BEC7A8[v128];
            }
            else
            {
              v129 = "unconfigured";
            }
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v145, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            if (v145)
            {
              std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
              v130 = *(_QWORD *)(v143 + 224);
              if (v130 >= 7)
                v131 = "ILLEGAL";
              else
                v131 = off_1E3BEC7D0[v130];
              *(_DWORD *)buf = 136316418;
              v161 = "AVVCAudioQueueRecordingEngine.mm";
              v162 = 1024;
              v163 = 1462;
              v164 = 2080;
              v165 = v105;
              v166 = 2112;
              v167 = v126;
              v168 = 2080;
              v169 = v129;
              v170 = 2080;
              v171 = v131;
              _os_log_impl(&dword_19B733000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
              std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v143);
            }
            else
            {
              *(_DWORD *)buf = 136316418;
              v161 = "AVVCAudioQueueRecordingEngine.mm";
              v162 = 1024;
              v163 = 1462;
              v164 = 2080;
              v165 = v105;
              v166 = 2112;
              v167 = v126;
              v168 = 2080;
              v169 = v129;
              v170 = 2080;
              v171 = "unconfigured";
              _os_log_impl(&dword_19B733000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
            }
            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v145);
            if (v127)
              std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v149);

            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v142);
            if (v104)
            {

              std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v153);
            }
            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v158);

          }
        }
        goto LABEL_270;
      }
      kdebug_trace();
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v61 = *(id *)kAVVCScope;
          if (v61)
          {
            v62 = v61;
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v161 = "AVVCAudioQueueRecordingEngine.mm";
              v162 = 1024;
              v163 = 1467;
              _os_log_impl(&dword_19B733000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: STOPPED", buf, 0x12u);
            }

          }
        }
      }
      if (kAVVCScope)
      {
        v63 = *(id *)kAVVCScope;
        if (!v63)
        {
LABEL_250:
          if (*((_QWORD *)this + 28) == 6)
          {
            *((_DWORD *)this + 167) = 0;
            *((_BYTE *)this + 684) = 0;
            AVVCRecordingEngine::doneRecording(v155);
          }
          goto LABEL_270;
        }
      }
      else
      {
        v63 = (id)MEMORY[0x1E0C81028];
        v67 = MEMORY[0x1E0C81028];
      }
      v68 = v63;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v158, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v69 = v158;
        if (v158)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v153, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 64))(v153, 0);
          v8 = objc_claimAutoreleasedReturnValue();
          switch(-[NSObject sessionState](v8, "sessionState"))
          {
            case 0u:
              goto LABEL_207;
            case 1u:
              v70 = "Inactive";
              break;
            case 2u:
              v70 = "InteruptedWhileRecording";
              break;
            case 3u:
              v70 = "InteruptedWhilePlaying";
              break;
            case 4u:
              v70 = "Deactivating";
              break;
            case 5u:
              v70 = "Prewarming";
              break;
            case 6u:
              v70 = "Activating";
              break;
            case 7u:
              v70 = "Active";
              break;
            default:
              v70 = "ILLEGAL";
              break;
          }
        }
        else
        {
LABEL_207:
          v70 = "NotConfigured";
        }
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v140, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        if (v140)
        {
          v106 = (uint64_t)v141;
          if (v141)
            v106 = v141->__shared_owners_ + 1;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v140, *(unsigned int *)(v140 + 272), v106);
          v107 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v107 = CFSTR("(0x0) use_count:0");
        }
        v108 = v107;
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v109 = v149;
        if (v149)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v147, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 320))(v147);
          if (v110 > 4)
            v111 = "ILLEGAL";
          else
            v111 = off_1E3BEC7A8[v110];
        }
        else
        {
          v111 = "unconfigured";
        }
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v145, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        if (v145)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          v112 = *(_QWORD *)(v143 + 224);
          if (v112 >= 7)
            v113 = "ILLEGAL";
          else
            v113 = off_1E3BEC7D0[v112];
          *(_DWORD *)buf = 136316418;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 1468;
          v164 = 2080;
          v165 = v70;
          v166 = 2112;
          v167 = v108;
          v168 = 2080;
          v169 = v111;
          v170 = 2080;
          v171 = v113;
          _os_log_impl(&dword_19B733000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v143);
        }
        else
        {
          *(_DWORD *)buf = 136316418;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 1468;
          v164 = 2080;
          v165 = v70;
          v166 = 2112;
          v167 = v108;
          v168 = 2080;
          v169 = v111;
          v170 = 2080;
          v171 = "unconfigured";
          _os_log_impl(&dword_19B733000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        }
        v114 = v146;
        if (v146)
        {
          v115 = (unint64_t *)&v146->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        if (v109)
          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v147);
        v117 = v150;
        if (v150)
        {
          v118 = (unint64_t *)&v150->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }

        v120 = v141;
        if (v141)
        {
          v121 = (unint64_t *)&v141->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        if (v69)
        {

          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&v153);
        }
        v123 = v159;
        if (v159)
        {
          v124 = (unint64_t *)&v159->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }

      }
      goto LABEL_250;
    }
    ioDataSize = 4;
    outData = 0;
    Property = AudioQueueGetProperty(*((AudioQueueRef *)this + 76), 0x71637665u, &outData, &ioDataSize);
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
        goto LABEL_43;
    }
    else
    {
      v16 = (id)MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    v27 = v16;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v158, outData);
      *(_DWORD *)buf = 136315650;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 1482;
      v164 = 2080;
      v165 = (const char *)&v158;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Record Listener: Converter error: %s", buf, 0x1Cu);
    }

LABEL_43:
    if (kAVVCScope)
    {
      v28 = *(id *)kAVVCScope;
      if (!v28)
      {
LABEL_190:
        if (!Property && !*((_BYTE *)this + 760))
        {
          v101 = *((_QWORD *)this + 15);
          if (v101)
            (*(void (**)(uint64_t, _QWORD))(v101 + 16))(v101, outData);
          *((_BYTE *)this + 760) = 1;
        }
        goto LABEL_270;
      }
    }
    else
    {
      v28 = (id)MEMORY[0x1E0C81028];
      v29 = MEMORY[0x1E0C81028];
    }
    v30 = v28;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v158, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v31 = v158;
      if (v158)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v153, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 64))(v153, 0);
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        switch(objc_msgSend(v135, "sessionState"))
        {
          case 0u:
            goto LABEL_135;
          case 1u:
            v32 = "Inactive";
            break;
          case 2u:
            v32 = "InteruptedWhileRecording";
            break;
          case 3u:
            v32 = "InteruptedWhilePlaying";
            break;
          case 4u:
            v32 = "Deactivating";
            break;
          case 5u:
            v32 = "Prewarming";
            break;
          case 6u:
            v32 = "Activating";
            break;
          case 7u:
            v32 = "Active";
            break;
          default:
            v32 = "ILLEGAL";
            break;
        }
      }
      else
      {
LABEL_135:
        v32 = "NotConfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v136, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v136)
      {
        v71 = (uint64_t)v137;
        if (v137)
          v71 = v137->__shared_owners_ + 1;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v136, *(unsigned int *)(v136 + 272), v71);
        v72 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v72 = CFSTR("(0x0) use_count:0");
      }
      v73 = v72;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v74 = v149;
      if (v149)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v147, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 320))(v147);
        if (v75 > 4)
          v76 = "ILLEGAL";
        else
          v76 = off_1E3BEC7A8[v75];
      }
      else
      {
        v76 = "unconfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v145, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v145)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v77 = *(_QWORD *)(v143 + 224);
        if (v77 >= 7)
          v78 = "ILLEGAL";
        else
          v78 = off_1E3BEC7D0[v77];
        *(_DWORD *)buf = 136316418;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 1483;
        v164 = 2080;
        v165 = v32;
        v166 = 2112;
        v167 = v73;
        v168 = 2080;
        v169 = v76;
        v170 = 2080;
        v171 = v78;
        _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        v80 = v144;
        v79 = v135;
        if (v144)
        {
          v81 = (unint64_t *)&v144->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      else
      {
        *(_DWORD *)buf = 136316418;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 1483;
        v164 = 2080;
        v165 = v32;
        v166 = 2112;
        v167 = v73;
        v168 = 2080;
        v169 = v76;
        v170 = 2080;
        v171 = "unconfigured";
        _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        v79 = v135;
      }
      v83 = v146;
      if (v146)
      {
        v84 = (unint64_t *)&v146->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (v74)
      {
        v86 = v148;
        if (v148)
        {
          v87 = (unint64_t *)&v148->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
      }
      v89 = v150;
      if (v150)
      {
        v90 = (unint64_t *)&v150->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }

      v92 = v137;
      if (v137)
      {
        v93 = (unint64_t *)&v137->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      if (v31)
      {

        v95 = v154;
        if (v154)
        {
          v96 = (unint64_t *)&v154->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      v98 = v159;
      if (v159)
      {
        v99 = (unint64_t *)&v159->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }

    }
    goto LABEL_190;
  }
  p_info = &OBJC_METACLASS___AVSpeechUtterance.info;
  if (!kAVVCScope)
  {
    v6 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_11;
  }
  v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_11:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 1443;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handleRecordAQPropertyChange: queue already destroyed -- noop", buf, 0x12u);
    }

  }
  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_270;
  }
  else
  {
    v10 = (id)MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  v12 = v10;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v158, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v13 = v158;
    if (v158)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v153, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 64))(v153, 0);
      p_info = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(p_info, "sessionState"))
      {
        case 0u:
          goto LABEL_25;
        case 1u:
          v14 = "Inactive";
          break;
        case 2u:
          v14 = "InteruptedWhileRecording";
          break;
        case 3u:
          v14 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v14 = "Deactivating";
          break;
        case 5u:
          v14 = "Prewarming";
          break;
        case 6u:
          v14 = "Activating";
          break;
        case 7u:
          v14 = "Active";
          break;
        default:
          v14 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_25:
      v14 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v151, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v151)
    {
      v17 = (uint64_t)v152;
      if (v152)
        v17 = v152->__shared_owners_ + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v151, *(unsigned int *)(v151 + 272), v17);
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = CFSTR("(0x0) use_count:0");
    }
    v19 = v18;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v20 = v149;
    if (v149)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v147, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 320))(v147);
      if (v21 > 4)
        v22 = "ILLEGAL";
      else
        v22 = off_1E3BEC7A8[v21];
    }
    else
    {
      v22 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v145, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v145)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      v33 = *(_QWORD *)(v143 + 224);
      if (v33 > 6)
        v34 = "ILLEGAL";
      else
        v34 = off_1E3BEC7D0[v33];
      *(_DWORD *)buf = 136316418;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 1444;
      v164 = 2080;
      v165 = v14;
      v166 = 2112;
      v167 = v19;
      v168 = 2080;
      v169 = v22;
      v170 = 2080;
      v171 = v34;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      v35 = v144;
      if (v144)
      {
        v36 = (unint64_t *)&v144->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 1444;
      v164 = 2080;
      v165 = v14;
      v166 = 2112;
      v167 = v19;
      v168 = 2080;
      v169 = v22;
      v170 = 2080;
      v171 = "unconfigured";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    v38 = v146;
    if (v146)
    {
      v39 = (unint64_t *)&v146->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v20)
    {
      v41 = v148;
      if (v148)
      {
        v42 = (unint64_t *)&v148->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    v44 = v150;
    if (v150)
    {
      v45 = (unint64_t *)&v150->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }

    v47 = v152;
    if (v152)
    {
      v48 = (unint64_t *)&v152->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v13)
    {

      v50 = v154;
      if (v154)
      {
        v51 = (unint64_t *)&v154->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    v53 = v159;
    if (v159)
    {
      v54 = (unint64_t *)&v159->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }

  }
LABEL_270:
  v132 = v156;
  if (v156)
  {
    v133 = (unint64_t *)&v156->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v157);
}

void sub_19B7BBBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (v38)
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v37)
  {

    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v39 - 192);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  TraceMethod::~TraceMethod((TraceMethod *)&a34);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::handleAudioInput(AVVCAudioQueueRecordingEngine *this, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, const AudioTimeStamp *a4, unsigned int a5, const AudioStreamPacketDescription *a6)
{
  AVVCAudioQueueRecordingEngine *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  UInt64 v18;
  UInt64 mHostTime;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  id v26;
  NSObject *v27;
  uint64_t mSampleTime;
  UInt64 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t ReporterID;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  id v44;
  id v45;
  NSObject *v46;
  Float64 v47;
  UInt64 v48;
  UInt32 v49;
  unsigned int v50;
  uint64_t v51;
  NSObject *v52;
  AVVCAudioQueueRecordingEngine *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  const char *v60;
  NSObject *v61;
  os_log_type_t v62;
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  __CFString *v67;
  id v68;
  AVVCAudioQueueRecordingEngine *v69;
  uint64_t v70;
  UInt32 v71;
  AVVCAudioQueueRecordingEngine *v72;
  unsigned int v73;
  UInt32 v74;
  id v75;
  _BOOL4 v76;
  UInt32 v77;
  AudioBufferList *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  AudioBufferList *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  NSObject *v89;
  uint64_t v90;
  AudioBufferList *v91;
  OSStatus v92;
  NSObject *v93;
  id v94;
  NSObject *v95;
  int v96;
  uint64_t v97;
  AVVCAudioQueueRecordingEngine *v98;
  id v99;
  void *v100;
  id v101;
  NSObject *v102;
  void *mAudioData;
  UInt32 v104;
  id v105;
  void *v106;
  id v107;
  NSObject *v108;
  uint64_t v109;
  UInt32 mDataByteSize;
  UInt32 v111;
  id v112;
  void *v113;
  id v114;
  NSObject *v115;
  AVVCAudioQueueRecordingEngine *v116;
  OSStatus Property;
  OSStatus v118;
  id v119;
  id v120;
  void *v121;
  id v122;
  NSObject *v123;
  NSObject *v124;
  const char *v125;
  void *v126;
  id v127;
  __int128 v128;
  UInt32 v129;
  uint64_t v130;
  id v131;
  void *v132;
  id v133;
  NSObject *v134;
  int v135;
  uint64_t v136;
  int v137;
  id v138;
  id v139;
  int *v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  void *v146;
  size_t v147;
  void *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  __int128 v153;
  NSObject *v154;
  AudioQueueBuffer *v155;
  const char *v156;
  id v157;
  uint64_t v158;
  __CFString *v159;
  __CFString *v160;
  uint64_t v161;
  unsigned int v162;
  const char *v163;
  unint64_t v164;
  const char *v165;
  std::__shared_weak_count *v166;
  unint64_t *p_shared_owners;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  id v178;
  NSObject *v179;
  const char *v180;
  id v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  id v195;
  NSObject *v196;
  void *v197;
  UInt32 v198;
  OSStatus v199;
  int v200;
  NSObject *v201;
  unsigned int v202;
  id v203;
  id v204;
  id v205;
  id v206;
  NSObject *v207;
  const char *v208;
  id v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  id v218;
  unsigned int v219;
  char *v221;
  int v222;
  int inNumberPCMFrames;
  UInt32 inNumberPCMFramesa[2];
  UInt32 mAudioDataByteSize;
  unsigned int v227;
  int v228;
  _QWORD v231[2];
  void (*v232)(uint64_t);
  void *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  _QWORD v236[2];
  UInt32 ioPropertyDataSize[2];
  std::__shared_weak_count *v238;
  UInt32 ioOutputDataPacketSize[4];
  uint64_t v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  uint64_t v243;
  _QWORD v244[5];
  std::__shared_weak_count *v245;
  AudioBufferList outOutputData;
  id v247;
  AudioQueueBuffer *inInputDataProcUserData;
  __int128 v249;
  __int128 v250;
  _BYTE v251[18];
  __int16 v252;
  OSStatus v253;
  uint8_t buf[80];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;

  v6 = this;
  v258 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned int *)((char *)this + 668);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 - 1, v7));
  v9 = *((_DWORD *)this + 161);
  mAudioDataByteSize = a3->mAudioDataByteSize;
  v10 = *((_DWORD *)this + 162);
  if (!*((_BYTE *)this + 880))
    goto LABEL_24;
  inNumberPCMFrames = *((_DWORD *)this + 162);
  LODWORD(inInputDataProcUserData) = 4108;
  BYTE4(inInputDataProcUserData) = 0;
  v249 = 0u;
  v250 = 0u;
  v11 = kdebug_trace();
  v12 = (void *)MEMORY[0x1A1AC6084](v11);
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "logProfileMetrics:", CFSTR("AVVC_PROFILE_Prop_FirstBufferReceived"));

  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (id)objc_msgSend(v14, "retrieveProfileMetrics");

  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "resetProfileMetrics");

  objc_autoreleasePoolPop(v12);
  v222 = v9;
  v17 = mach_absolute_time();
  v18 = *((_QWORD *)v6 + 86);
  mHostTime = a4->mHostTime;
  v20 = __udivti3();
  if (mHostTime >= v18)
    v21 = v20;
  else
    v21 = -v20;
  v22 = __udivti3();
  if (v17 >= v18)
    v23 = v22;
  else
    v23 = -v22;
  v24 = (double)v21 / 1000000.0;
  if (!kAVVCScope)
  {
    v25 = (id)MEMORY[0x1E0C81028];
    v26 = MEMORY[0x1E0C81028];
LABEL_14:
    v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&outOutputData, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
      mSampleTime = (uint64_t)a4->mSampleTime;
      *(_DWORD *)buf = 136317186;
      v29 = a4->mHostTime;
      v30 = *((_QWORD *)this + 86);
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1577;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = *(_QWORD *)&outOutputData.mNumberBuffers;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v17;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v29;
      *(_WORD *)&buf[48] = 2048;
      *(_QWORD *)&buf[50] = mSampleTime;
      *(_WORD *)&buf[58] = 2048;
      *(_QWORD *)&buf[60] = v30;
      *(_WORD *)&buf[68] = 2048;
      *(double *)&buf[70] = (double)v23 / 1000000.0;
      *(_WORD *)&buf[78] = 2048;
      *(double *)&v255 = v24;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (%p) - First callback from AQ -  Now:(ht: %lld), BuffStartTime:(ht: %lld st: %lld), SiriRequestedStartTime:(ht: %lld). Now-SiriRequestedStartTime: %0.6f ms, BuffStartTime-SiriRequestedStartTime: %0.6f ms.", buf, 0x58u);
      v31 = *(std::__shared_weak_count **)&outOutputData.mBuffers[0].mNumberChannels;
      if (*(_QWORD *)&outOutputData.mBuffers[0].mNumberChannels)
      {
        v32 = (unint64_t *)(*(_QWORD *)&outOutputData.mBuffers[0].mNumberChannels + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }

    goto LABEL_21;
  }
  v25 = *(id *)kAVVCScope;
  if (v25)
    goto LABEL_14;
LABEL_21:
  v34 = (void *)MEMORY[0x1A1AC6084]();
  mach_absolute_time();
  v35 = __udivti3();
  ReporterID = AVVCRecordingEngine::getReporterID((AVVCRecordingEngine *)this);
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = (void *)MEMORY[0x1E0CB37E8];
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "numberWithDouble:", (float)((float)(unint64_t)(v35 - objc_msgSend(v39, "callToStartRecordHostTime")) / 1000000.0));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "logSessionMetric:value:category:type:reporterID:", CFSTR("avvcStartRecordTime"), v40, 2, 1, ReporterID);

  v6 = this;
  if (*((_QWORD *)this + 35) == 1987012963)
  {
    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "logSessionMetric:value:category:type:reporterID:", CFSTR("avvcVoiceTriggerToRecordTime"), v42, 2, 1, ReporterID);

    v6 = this;
  }
  objc_autoreleasePoolPop(v34);
  *((_BYTE *)v6 + 880) = 0;
  TraceWrapper::~TraceWrapper((TraceWrapper *)&inInputDataProcUserData);
  v9 = v222;
  v10 = inNumberPCMFrames;
LABEL_24:
  v43 = ((v10 + 7) >> 3) * v9;
  *(_QWORD *)inNumberPCMFramesa = mAudioDataByteSize / v43;
  if (kAVVCScope)
  {
    v44 = *(id *)kAVVCScope;
    if (!v44)
      goto LABEL_31;
  }
  else
  {
    v44 = (id)MEMORY[0x1E0C81028];
    v45 = MEMORY[0x1E0C81028];
  }
  v46 = v44;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    v47 = a4->mSampleTime;
    v48 = a4->mHostTime;
    v49 = a3->mAudioDataByteSize;
    v50 = *v7;
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1597;
    *(_WORD *)&buf[18] = 2048;
    *(Float64 *)&buf[20] = v47;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v48;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = mAudioDataByteSize / v43;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v49;
    *(_WORD *)&buf[54] = 1024;
    *(_DWORD *)&buf[56] = v50;
    _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: sample time: %f, host time %llu, %llu frames (%d bytes), %d buffers enqueued", buf, 0x3Cu);
  }

  v6 = this;
LABEL_31:
  v51 = *((_QWORD *)v6 + 28);
  if ((v51 == 6 || v51 <= 3) && !*((_BYTE *)v6 + 253))
  {
    if (kAVVCScope)
    {
      v52 = *(id *)kAVVCScope;
      if (!v52)
        return;
    }
    else
    {
      v52 = MEMORY[0x1E0C81028];
      v63 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      goto LABEL_312;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1601;
    v60 = "%25s:%-5d handleRecordAQInput: record internally stopped, so throwing away buffer";
    v61 = v52;
    v62 = OS_LOG_TYPE_DEBUG;
    goto LABEL_54;
  }
  if (v43 > mAudioDataByteSize)
  {
    if (v51 != 5)
      return;
    if (kAVVCScope)
    {
      v52 = *(id *)kAVVCScope;
      if (!v52)
        return;
    }
    else
    {
      v52 = MEMORY[0x1E0C81028];
      v59 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      goto LABEL_312;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1607;
    v60 = "%25s:%-5d handleRecordAQInput: throwing away zero-length buffer";
    v61 = v52;
    v62 = OS_LOG_TYPE_ERROR;
LABEL_54:
    _os_log_impl(&dword_19B733000, v61, v62, v60, buf, 0x12u);
    goto LABEL_312;
  }
  *((_QWORD *)v6 + 84) += *(_QWORD *)inNumberPCMFramesa;
  objc_msgSend(*((id *)v6 + 99), "setFrameLength:");
  memcpy(*(void **)(objc_msgSend(*((id *)this + 99), "mutableAudioBufferList") + 16), a3->mAudioData, a3->mAudioDataByteSize);
  v53 = this;
  v54 = (void *)*((_QWORD *)this + 103);
  if (v54 && *((_QWORD *)this + 104))
  {
    v55 = *((_QWORD *)this + 105);
    v247 = 0;
    v56 = objc_msgSend(v54, "renderOffline:toBuffer:error:", *(_QWORD *)inNumberPCMFramesa, v55, &v247);
    v57 = v247;
    if (v56)
    {
      if (kAVVCScope)
      {
        v58 = *(id *)kAVVCScope;
        if (!v58)
          goto LABEL_69;
      }
      else
      {
        v58 = (id)MEMORY[0x1E0C81028];
        v65 = MEMORY[0x1E0C81028];
      }
      v66 = v58;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        if (v57)
        {
          objc_msgSend(v57, "description");
          v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v67 = &stru_1E3BED4C0;
        }
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1633;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v67;
        _os_log_impl(&dword_19B733000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d handleRecordAQInput: Error in AVAudioEngine renderOffline : %@", buf, 0x1Cu);
        if (v57)

      }
    }
    else
    {
      if (kAVVCScope)
      {
        v64 = *(id *)kAVVCScope;
        if (!v64)
          goto LABEL_69;
      }
      else
      {
        v64 = (id)MEMORY[0x1E0C81028];
        v68 = MEMORY[0x1E0C81028];
      }
      v66 = v64;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1631;
        _os_log_impl(&dword_19B733000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: AVAudioEngine renderOffline returned SUCCESS", buf, 0x12u);
      }
    }

LABEL_69:
    v53 = this;
  }
  (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v53 + 272))(v53, *((_QWORD *)v53 + 9), *((_QWORD *)v53 + 99), 0);
  (*(void (**)(AVVCAudioQueueRecordingEngine *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 272))(this, *((_QWORD *)this + 106), *((_QWORD *)this + 105), 0);
  v69 = this;
  if (*((_DWORD *)this + 8) == 1819304813)
  {
    if (!*((_QWORD *)this + 97))
    {
      v76 = 0;
      goto LABEL_165;
    }
    TraceMethod::TraceMethod((TraceMethod *)&inInputDataProcUserData, "DeinterleaveAudio");
    v70 = *((unsigned int *)this + 161);
    if (*((_QWORD *)this + 103))
      v227 = 2 * (*((_QWORD *)this + 104) != 0);
    else
      v227 = 0;
    v77 = a3->mAudioDataByteSize;
    v78 = (AudioBufferList *)operator new[]();
    v78->mNumberBuffers = v70;
    if ((int)v70 >= 1)
    {
      v79 = 0;
      v80 = 0;
      v81 = 16 * v70;
      v82 = 16 * v227;
      v83 = v77 / v70;
      do
      {
        v84 = v78;
        v85 = (char *)v78 + v79;
        *((_DWORD *)v85 + 2) = 1;
        v86 = *((_QWORD *)this + 100) + v82 + v79;
        *(_DWORD *)(v86 + 8) = 1;
        *((_DWORD *)v85 + 3) = v83;
        *(_DWORD *)(v86 + 12) = v83;
        v87 = *((_QWORD *)this + 101) + v83 * (v80 + v227);
        *((_QWORD *)v85 + 2) = v87;
        *(_QWORD *)(v86 + 16) = v87;
        if (kAVVCScope)
        {
          if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
          {
            v88 = *(id *)kAVVCScope;
            if (v88)
            {
              v89 = v88;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
              {
                v90 = *(_QWORD *)(*((_QWORD *)this + 100) + v82 + v79 + 16);
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1418;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v80;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v227;
                *(_WORD *)&buf[30] = 2048;
                *(_QWORD *)&buf[32] = v90;
                _os_log_impl(&dword_19B733000, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d nChannel:%d, startChannel:%d, mClientAudioBufferList->mBuffers[nChannel+startChannel].mData : %p", buf, 0x28u);
              }

            }
          }
        }
        ++v80;
        v79 += 16;
        v78 = v84;
      }
      while (v81 != v79);
    }
    v91 = v78;
    v92 = AudioConverterConvertComplexBuffer(*((AudioConverterRef *)this + 97), inNumberPCMFramesa[0], (const AudioBufferList *)objc_msgSend(*((id *)this + 99), "audioBufferList"), v78);
    v76 = v92 == 0;
    if (v92)
    {
      if (kAVVCScope)
      {
        v93 = *(id *)kAVVCScope;
        if (!v93)
          goto LABEL_164;
      }
      else
      {
        v93 = MEMORY[0x1E0C81028];
        v139 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1425;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v92;
        _os_log_impl(&dword_19B733000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterConvertComplexBuffer failed with error : %d", buf, 0x18u);
      }

    }
LABEL_164:
    MEMORY[0x1A1AC5BBC](v91, 0x1000C8077774924);
    TraceMethod::~TraceMethod((TraceMethod *)&inInputDataProcUserData);
    v69 = this;
LABEL_165:
    v140 = (int *)*((_QWORD *)v69 + 100);
    v141 = *((_DWORD *)v69 + 161);
    if (v140)
    {
      if (v76)
        v142 = *((_DWORD *)v69 + 161);
      else
        v142 = 1;
      *v140 = v142;
    }
    if (*((_QWORD *)v69 + 103) && *((_QWORD *)v69 + 104))
    {
      v143 = objc_msgSend(*((id *)v69 + 105), "audioBufferList");
      v144 = v143;
      if (v76)
      {
        v145 = v141 + 2;
        v69 = this;
      }
      else
      {
        v69 = this;
        v145 = *((_DWORD *)this + 13);
      }
      *v140 = v145;
      v140[2] = 1;
      v140[3] = *(_DWORD *)(v143 + 12);
      v146 = (void *)*((_QWORD *)v69 + 101);
      *((_QWORD *)v140 + 2) = v146;
      memcpy(v146, *(const void **)(v144 + 16), *(unsigned int *)(v144 + 12));
      if (*((_DWORD *)v69 + 13) >= 2u)
      {
        v140[6] = 1;
        v147 = *(unsigned int *)(v144 + 28);
        v140[7] = v147;
        v148 = (void *)(*((_QWORD *)v69 + 101) + *(unsigned int *)(v144 + 12));
        *((_QWORD *)v140 + 4) = v148;
        memcpy(v148, *(const void **)(v144 + 32), v147);
      }
    }
    else if (!v76)
    {
      AVVCRecordingEngine::audioQueueBufferReceived((AVVCRecordingEngine *)v69, a3, a4->mHostTime);
LABEL_180:
      v72 = this;
      goto LABEL_181;
    }
    AVVCRecordingEngine::audioBufferListReceived((AVVCRecordingEngine *)v69, (AudioBufferList *)v140, *v140, a4->mHostTime);
    goto LABEL_180;
  }
  v71 = *((_DWORD *)this + 13);
  AVVCRecordingEngine::lpcmAudioQueueBufferReceivedForNonLPCMClientFormat((AVVCRecordingEngine *)this, a3, a4->mHostTime, (AudioStreamBasicDescription *)((char *)this + 616));
  v72 = this;
  if (!*((_QWORD *)this + 97))
  {
LABEL_181:
    if (!*((_BYTE *)v72 + 200))
      AVVCRecordingEngine::checkForEndpoint((AVVCRecordingEngine *)this, a3, 0);
    v149 = (void *)MEMORY[0x1A1AC6084]();
    v150 = *((_QWORD *)this + 42);
    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v152 = objc_msgSend(*((id *)this + 99), "audioBufferList");
    v153 = *(_OWORD *)v152;
    v243 = *(_QWORD *)(v152 + 16);
    v242 = v153;
    objc_msgSend(v151, "audioIssueDetectorAnalyzeBuffer:numFrames:timeStamp:shouldAnalyze:", &v242, *(_QWORD *)inNumberPCMFramesa, a4, v150 == 1);

    objc_autoreleasePoolPop(v149);
    if (kAVVCScope && (*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0 && *(_QWORD *)kAVVCScope)
    {
      v154 = *(id *)kAVVCScope;
      if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&inInputDataProcUserData, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v155 = inInputDataProcUserData;
        if (inInputDataProcUserData)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&outOutputData, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&outOutputData.mNumberBuffers + 64))(*(_QWORD *)&outOutputData.mNumberBuffers, 0);
          v149 = (void *)objc_claimAutoreleasedReturnValue();
          switch(objc_msgSend(v149, "sessionState"))
          {
            case 0u:
              goto LABEL_193;
            case 1u:
              v156 = "Inactive";
              break;
            case 2u:
              v156 = "InteruptedWhileRecording";
              break;
            case 3u:
              v156 = "InteruptedWhilePlaying";
              break;
            case 4u:
              v156 = "Deactivating";
              break;
            case 5u:
              v156 = "Prewarming";
              break;
            case 6u:
              v156 = "Activating";
              break;
            case 7u:
              v156 = "Active";
              break;
            default:
              v156 = "ILLEGAL";
              break;
          }
        }
        else
        {
LABEL_193:
          v156 = "NotConfigured";
        }
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v240, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        if (v240)
        {
          v158 = (uint64_t)v241;
          if (v241)
            v158 = v241->__shared_owners_ + 1;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v240, *(unsigned int *)(v240 + 272), v158);
          v159 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v159 = CFSTR("(0x0) use_count:0");
        }
        v160 = v159;
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v251, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        v161 = *(_QWORD *)v251;
        if (*(_QWORD *)v251)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(ioOutputDataPacketSize, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          v162 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)ioOutputDataPacketSize + 320))(*(_QWORD *)ioOutputDataPacketSize);
          if (v162 > 4)
            v163 = "ILLEGAL";
          else
            v163 = off_1E3BEC7A8[v162];
        }
        else
        {
          v163 = "unconfigured";
        }
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(ioPropertyDataSize, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
        if (*(_QWORD *)ioPropertyDataSize)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v236, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          v164 = *(_QWORD *)(v236[0] + 224);
          if (v164 >= 7)
            v165 = "ILLEGAL";
          else
            v165 = off_1E3BEC7D0[v164];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1833;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v156;
          *(_WORD *)&buf[28] = 2112;
          *(_QWORD *)&buf[30] = v160;
          *(_WORD *)&buf[38] = 2080;
          *(_QWORD *)&buf[40] = v163;
          *(_WORD *)&buf[48] = 2080;
          *(_QWORD *)&buf[50] = v165;
          _os_log_impl(&dword_19B733000, v154, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v236);
        }
        else
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1833;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v156;
          *(_WORD *)&buf[28] = 2112;
          *(_QWORD *)&buf[30] = v160;
          *(_WORD *)&buf[38] = 2080;
          *(_QWORD *)&buf[40] = v163;
          *(_WORD *)&buf[48] = 2080;
          *(_QWORD *)&buf[50] = "unconfigured";
          _os_log_impl(&dword_19B733000, v154, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        }
        v166 = v238;
        if (v238)
        {
          p_shared_owners = (unint64_t *)&v238->__shared_owners_;
          do
            v168 = __ldaxr(p_shared_owners);
          while (__stlxr(v168 - 1, p_shared_owners));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        if (v161)
          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)ioOutputDataPacketSize);
        v169 = *(std::__shared_weak_count **)&v251[8];
        if (*(_QWORD *)&v251[8])
        {
          v170 = (unint64_t *)(*(_QWORD *)&v251[8] + 8);
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }

        v172 = v241;
        if (v241)
        {
          v173 = (unint64_t *)&v241->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        if (v155)
        {

          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&outOutputData);
        }
        v175 = (std::__shared_weak_count *)v249;
        if ((_QWORD)v249)
        {
          v176 = (unint64_t *)(v249 + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }

      }
    }
    goto LABEL_260;
  }
  outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = v71;
  v73 = (*((_DWORD *)this + 162) + 7) >> 3;
  inInputDataProcUserData = a3;
  LODWORD(v249) = v71;
  DWORD1(v249) = v73 * v71;
  v74 = a3->mAudioDataByteSize / (v73 * v71);
  *((_QWORD *)&v249 + 1) = __PAIR64__(*((_DWORD *)this + 11), v74);
  LODWORD(v250) = 0;
  *((_QWORD *)&v250 + 1) = a4;
  if (!kAVVCScope)
  {
    v75 = (id)MEMORY[0x1E0C81028];
    v94 = MEMORY[0x1E0C81028];
    goto LABEL_94;
  }
  v75 = *(id *)kAVVCScope;
  if (v75)
  {
LABEL_94:
    v95 = v75;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1730;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v74;
      _os_log_impl(&dword_19B733000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: encoder input: packetsAvailable: %u", buf, 0x18u);
    }

    v72 = this;
  }
  v228 = 0;
  v96 = 0;
  v221 = (char *)v72 + 24;
  while (1)
  {
    v97 = operator new();
    v98 = this;
    MyAudioQueueBuffer::MyAudioQueueBuffer((MyAudioQueueBuffer *)v97, *((_DWORD *)this + 197), *((_DWORD *)this + 196));
    outOutputData.mBuffers[0].mData = *(void **)(v97 + 8);
    outOutputData.mBuffers[0].mDataByteSize = *(_DWORD *)v97;
    ioOutputDataPacketSize[0] = *((_DWORD *)this + 196);
    if (kAVVCScope)
    {
      v99 = *(id *)kAVVCScope;
      if (!v99)
        goto LABEL_105;
    }
    else
    {
      v100 = (void *)MEMORY[0x1E0C81028];
      v101 = MEMORY[0x1E0C81028];
      v99 = v100;
    }
    v102 = v99;
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      mAudioData = a3->mAudioData;
      v104 = a3->mAudioDataByteSize;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1745;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = mAudioData;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v104;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = DWORD2(v249);
      _os_log_impl(&dword_19B733000, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: encoder input buffer %p: %u bytes, %u packets", buf, 0x28u);
    }

    v98 = this;
LABEL_105:
    if (kAVVCScope)
    {
      v105 = *(id *)kAVVCScope;
      if (!v105)
        goto LABEL_112;
    }
    else
    {
      v106 = (void *)MEMORY[0x1E0C81028];
      v107 = MEMORY[0x1E0C81028];
      v105 = v106;
    }
    v108 = v105;
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1747;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = outOutputData.mBuffers[0].mDataByteSize;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = ioOutputDataPacketSize[0];
      _os_log_impl(&dword_19B733000, v108, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: handing to converter: encoder output buffer: %u bytes, ioOutputDataPackets = %u", buf, 0x1Eu);
    }

    v98 = this;
LABEL_112:
    v109 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)v98 + 97), (AudioConverterComplexInputDataProc)RecordEncoderInputDataProc, &inInputDataProcUserData, ioOutputDataPacketSize, &outOutputData, *(AudioStreamPacketDescription **)(v97 + 40));
    mDataByteSize = outOutputData.mBuffers[0].mDataByteSize;
    v111 = ioOutputDataPacketSize[0];
    v96 += outOutputData.mBuffers[0].mDataByteSize;
    if (kAVVCScope)
    {
      v112 = *(id *)kAVVCScope;
      if (!v112)
        goto LABEL_119;
    }
    else
    {
      v113 = (void *)MEMORY[0x1E0C81028];
      v114 = MEMORY[0x1E0C81028];
      v112 = v113;
    }
    v115 = v112;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v251, v109);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1761;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v251;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = ioOutputDataPacketSize[0];
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = mDataByteSize;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v96;
      _os_log_impl(&dword_19B733000, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: err %s, got from converter %u encoded packets, %u bytes.  totalOutputByteSize = %u", buf, 0x2Eu);
    }

LABEL_119:
    if ((_DWORD)v109 && (_DWORD)v109 != 1802723939 && !*((_BYTE *)this + 760))
      break;
    if (!v111)
    {
      MyAudioQueueBuffer::~MyAudioQueueBuffer((MyAudioQueueBuffer *)v97);
      MEMORY[0x1A1AC5BD4]();
      goto LABEL_153;
    }
    v116 = this;
    if (*((_BYTE *)this + 200))
    {
      ioPropertyDataSize[0] = 128;
      memset(buf, 0, sizeof(buf));
      v255 = 0u;
      v256 = 0u;
      v257 = 0u;
      Property = AudioConverterGetProperty(*((AudioConverterRef *)this + 97), 0x7373716Cu, ioPropertyDataSize, buf);
      v118 = Property;
      if (Property)
      {
        if ((Property + 199999) >= 0x61A7F)
        {
          if (kAVVCScope)
          {
            v120 = *(id *)kAVVCScope;
            if (!v120)
              goto LABEL_141;
          }
          else
          {
            v126 = (void *)MEMORY[0x1E0C81028];
            v127 = MEMORY[0x1E0C81028];
            v120 = v126;
          }
          v123 = v120;
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v251 = 136315650;
            *(_QWORD *)&v251[4] = "AVVCAudioQueueRecordingEngine.mm";
            *(_WORD *)&v251[12] = 1024;
            *(_DWORD *)&v251[14] = 1784;
            v252 = 1024;
            v253 = v118;
            v124 = v123;
            v125 = "%25s:%-5d ERROR: handleRecordAQInput: AudioConverterGetProperty('ssql') err %{audio:4CC}d";
LABEL_139:
            _os_log_impl(&dword_19B733000, v124, OS_LOG_TYPE_ERROR, v125, v251, 0x18u);
          }
        }
        else
        {
          if (kAVVCScope)
          {
            v119 = *(id *)kAVVCScope;
            if (!v119)
              goto LABEL_141;
          }
          else
          {
            v121 = (void *)MEMORY[0x1E0C81028];
            v122 = MEMORY[0x1E0C81028];
            v119 = v121;
          }
          v123 = v119;
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v251 = 136315650;
            *(_QWORD *)&v251[4] = "AVVCAudioQueueRecordingEngine.mm";
            *(_WORD *)&v251[12] = 1024;
            *(_DWORD *)&v251[14] = 1784;
            v252 = 1024;
            v253 = v118;
            v124 = v123;
            v125 = "%25s:%-5d ERROR: handleRecordAQInput: AudioConverterGetProperty('ssql') err %d";
            goto LABEL_139;
          }
        }

      }
LABEL_141:
      AVVCRecordingEngine::checkForEndpoint((AVVCRecordingEngine *)this, a3, (float *)buf);
      v116 = this;
    }
    v128 = *((_OWORD *)v221 + 1);
    *(_OWORD *)(v97 + 56) = *(_OWORD *)v221;
    *(_DWORD *)(v97 + 16) = mDataByteSize;
    if (*(_DWORD *)(v97 + 32))
      v129 = v111;
    else
      v129 = 0;
    *(_DWORD *)(v97 + 48) = v129;
    *(_OWORD *)(v97 + 72) = v128;
    *(_QWORD *)(v97 + 88) = *((_QWORD *)v221 + 4);
    v130 = (a4->mHostTime - *((_QWORD *)v116 + 88))
         * (*((_DWORD *)v116 + 11) * v228)
         / *(_QWORD *)inNumberPCMFramesa
         + a4->mHostTime;
    if (!kAVVCScope)
    {
      v132 = (void *)MEMORY[0x1E0C81028];
      v133 = MEMORY[0x1E0C81028];
      v131 = v132;
LABEL_149:
      v134 = v131;
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
      {
        v135 = *(_DWORD *)(v97 + 16);
        v136 = *(_QWORD *)(v97 + 8);
        v137 = *(_DWORD *)(v97 + 48);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1798;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v135;
        *(_WORD *)&buf[24] = 2048;
        *(_QWORD *)&buf[26] = v136;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v137;
        *(_WORD *)&buf[40] = 2048;
        *(_QWORD *)&buf[42] = v130;
        _os_log_impl(&dword_19B733000, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: sending %u bytes of encoded data (addr %p) to client with %u packet descs @time %llu", buf, 0x32u);
      }

      goto LABEL_152;
    }
    v131 = *(id *)kAVVCScope;
    if (v131)
      goto LABEL_149;
LABEL_152:
    AVVCRecordingEngine::myAudioQueueBufferReceived((AVVCRecordingEngine *)this, (MyAudioQueueBuffer *)v97, v130);
    v228 += v111;
LABEL_153:
    if ((_DWORD)v109 == 1802723939 || !DWORD2(v249))
      goto LABEL_180;
  }
  if ((v109 + 199999) < 0x61A7F)
  {
    if (kAVVCScope)
    {
      v138 = *(id *)kAVVCScope;
      if (!v138)
        goto LABEL_244;
    }
    else
    {
      v138 = (id)MEMORY[0x1E0C81028];
      v178 = MEMORY[0x1E0C81028];
    }
    v179 = v138;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1763;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v109;
      v180 = "%25s:%-5d ERROR: handleRecordAQInput: AudioConverterFillComplexBuffer err %d";
      goto LABEL_242;
    }
    goto LABEL_243;
  }
  if (!kAVVCScope)
  {
    v157 = (id)MEMORY[0x1E0C81028];
    v181 = MEMORY[0x1E0C81028];
LABEL_240:
    v179 = v157;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1763;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v109;
      v180 = "%25s:%-5d ERROR: handleRecordAQInput: AudioConverterFillComplexBuffer err %{audio:4CC}d";
LABEL_242:
      _os_log_impl(&dword_19B733000, v179, OS_LOG_TYPE_ERROR, v180, buf, 0x18u);
    }
LABEL_243:

    goto LABEL_244;
  }
  v157 = *(id *)kAVVCScope;
  if (v157)
    goto LABEL_240;
LABEL_244:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v244[0] = MEMORY[0x1E0C809B0];
  v244[1] = 3321888768;
  v244[2] = ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke;
  v244[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  v182 = *(_QWORD *)buf;
  v244[4] = *(_QWORD *)buf;
  v245 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v183 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v182 + 368))(v182, v244, "handleAudioInput");
  v185 = v245;
  if (v245)
  {
    v186 = (unint64_t *)&v245->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v189 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = *((_QWORD *)this + 15);
  if (v191)
    (*(void (**)(uint64_t, uint64_t))(v191 + 16))(v191, v109);
  *((_BYTE *)this + 760) = 1;
  MyAudioQueueBuffer::~MyAudioQueueBuffer((MyAudioQueueBuffer *)v97);
  MEMORY[0x1A1AC5BD4]();
LABEL_260:
  v192 = *(_OWORD *)&a4->mSampleTime;
  v193 = *(_OWORD *)&a4->mRateScalar;
  v194 = *(_OWORD *)&a4->mSMPTETime.mHours;
  *(_OWORD *)((char *)this + 728) = *(_OWORD *)&a4->mSMPTETime.mSubframes;
  *(_OWORD *)((char *)this + 744) = v194;
  *(_OWORD *)((char *)this + 696) = v192;
  *(_OWORD *)((char *)this + 712) = v193;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
    {
      v195 = *(id *)kAVVCScope;
      if (v195)
      {
        v196 = v195;
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
        {
          v197 = a3->mAudioData;
          v198 = a3->mAudioDataByteSize;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1841;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a3;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v197;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v198;
          _os_log_impl(&dword_19B733000, v196, OS_LOG_TYPE_DEBUG, "%25s:%-5d Re-enqueuing buffer %p (data ptr %p), size %u", buf, 0x2Cu);
        }

      }
    }
  }
  v199 = AudioQueueEnqueueBuffer(a2, a3, 0, 0);
  v200 = v199;
  if (v199 != -66632)
  {
    v201 = this;
    if (!v199)
    {
      do
        v202 = __ldxr(v7);
      while (__stxr(v202 + 1, v7));
      goto LABEL_306;
    }
LABEL_275:
    if ((v200 + 199999) < 0x61A7F)
      goto LABEL_276;
    if (kAVVCScope)
    {
      v205 = *(id *)kAVVCScope;
      if (!v205)
        goto LABEL_290;
    }
    else
    {
      v205 = (id)MEMORY[0x1E0C81028];
      v209 = MEMORY[0x1E0C81028];
    }
    v207 = v205;
    if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1851;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v200;
      v208 = "%25s:%-5d ERROR: handleRecordAQInput: AudioQueueEnqueueBuffer err %{audio:4CC}d";
LABEL_288:
      _os_log_impl(&dword_19B733000, v207, OS_LOG_TYPE_ERROR, v208, buf, 0x18u);
    }
    goto LABEL_289;
  }
  v201 = this;
  if (*((_BYTE *)this + 252))
  {
    if (*((_QWORD *)this + 28) != 5)
      goto LABEL_306;
    v201 = MEMORY[0x1E0C81028];
    v203 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: AQ enqueue error while actively recording", buf, 2u);
    }

    __break(1u);
    goto LABEL_275;
  }
LABEL_276:
  if (kAVVCScope)
  {
    v204 = *(id *)kAVVCScope;
    if (!v204)
      goto LABEL_290;
  }
  else
  {
    v204 = (id)MEMORY[0x1E0C81028];
    v206 = MEMORY[0x1E0C81028];
  }
  v207 = v204;
  if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1851;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v200;
    v208 = "%25s:%-5d ERROR: handleRecordAQInput: AudioQueueEnqueueBuffer err %d";
    goto LABEL_288;
  }
LABEL_289:

  v201 = this;
LABEL_290:
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v201, v200, "handleAudioInput");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v210 = *(_QWORD *)buf;
  v211 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v212 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
    v232 = ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke_114;
    v233 = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    v234 = v210;
    v235 = v211;
    do
      v214 = __ldxr(v212);
    while (__stxr(v214 + 1, v212));
  }
  else
  {
    v232 = ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke_114;
    v233 = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    v234 = *(_QWORD *)buf;
    v235 = 0;
  }
  v231[0] = MEMORY[0x1E0C809B0];
  v231[1] = 3321888768;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v210 + 368))(v210, v231, "handleAudioInput");
  if (v235)
    std::__shared_weak_count::__release_weak(v235);
  if (v211)
    std::__shared_weak_count::__release_weak(v211);
  v215 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v216 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
LABEL_306:
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
    {
      v218 = *(id *)kAVVCScope;
      if (v218)
      {
        v52 = v218;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          v219 = *v7;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AVVCAudioQueueRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1861;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v219;
          _os_log_impl(&dword_19B733000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Exiting handleRecordAQInput (%d buffers enqueued)", buf, 0x18u);
        }

LABEL_312:
      }
    }
  }
}

void sub_19B7BDD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (v65)
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a61);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (v61)
  {

    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a56);

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::setupAudioCaptures(AVVCAudioQueueRecordingEngine *this)
{
  _DWORD *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  AVAudioChannelLayout *v8;
  AVAudioFormat *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  AVAudioFormat *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;
  _OWORD v26[2];
  uint64_t v27;

  v2 = (_DWORD *)((char *)this + 616);
  v27 = *((_QWORD *)this + 81);
  v3 = *(_OWORD *)((char *)this + 632);
  v26[0] = *(_OWORD *)((char *)this + 616);
  v26[1] = v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "Capture");
  v4 = NewAVVCAudioCapturer((uint64_t)__p);
  *((_QWORD *)this + 9) = v4;
  if (v25 < 0)
  {
    operator delete(__p[0]);
    v4 = *((_QWORD *)this + 9);
  }
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _OWORD *, _QWORD))(*(_QWORD *)v4 + 16))(v4, *((_QWORD *)this + 34), v26, 0);
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS && *((_QWORD *)this + 34) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "Capture-DSPOut");
    v5 = NewAVVCAudioCapturer((uint64_t)v22);
    *((_QWORD *)this + 106) = v5;
    if (v23 < 0)
    {
      operator delete(v22[0]);
      if (!*((_QWORD *)this + 106))
        return 0;
    }
    else if (!v5)
    {
      return 0;
    }
    LODWORD(v20[0]) = 0;
    if (CAStreamBasicDescription::IdentifyCommonPCMFormat(v2, (int *)v20) && LODWORD(v20[0]) == 1)
    {
      v6 = 1;
    }
    else
    {
      LODWORD(v20[0]) = 0;
      v7 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v2, (int *)v20);
      if ((v7 & (LODWORD(v20[0]) == 2)) != 0)
        v6 = 3;
      else
        v6 = 0;
    }
    v8 = -[AVAudioChannelLayout initWithLayoutTag:]([AVAudioChannelLayout alloc], "initWithLayoutTag:", 9633794);
    v9 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v6, 0, v8, *((double *)this + 3));
    v10 = -[AVAudioFormat streamDescription](v9, "streamDescription");
    v11 = *(_OWORD *)v10;
    v12 = *(_OWORD *)(v10 + 16);
    v21 = *(_QWORD *)(v10 + 32);
    v20[0] = v11;
    v20[1] = v12;
    v13 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v6, 1, v8, *((double *)this + 3));
    v14 = -[AVAudioFormat streamDescription](v13, "streamDescription");
    v15 = *(_OWORD *)v14;
    v16 = *(_OWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 32);
    v18[0] = v15;
    v18[1] = v16;
    (*(void (**)(_QWORD, _QWORD, _OWORD *, _OWORD *))(**((_QWORD **)this + 106) + 16))(*((_QWORD *)this + 106), *((_QWORD *)this + 34), v20, v18);

  }
  return 0;
}

void sub_19B7BE180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::logAudioCaptures(AVVCAudioQueueRecordingEngine *this, AVVCAudioCapturer *a2, AVAudioBuffer *a3)
{
  AVAudioBuffer *v4;

  v4 = a3;
  if (a2)
    (*(void (**)(AVVCAudioCapturer *, AVAudioBuffer *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v4, 0);

  return 0;
}

void sub_19B7BE220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::disposeAudioCaptures(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v3 = *((_QWORD *)this + 9);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 9) = 0;
  }
  v4 = *((_QWORD *)this + 106);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v5 = *((_QWORD *)this + 106);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 106) = 0;
  }
  return 0;
}

uint64_t AVVCAudioQueueRecordingEngine::setSessionIsRecordingFlag(AVVCRecordingEngine *this)
{
  int isSessionRecording;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  isSessionRecording = AVVCRecordingEngine::isSessionRecording(this);
  v3 = (*(uint64_t (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)this + 144))(this, isSessionRecording ^ 1u);
  if ((_DWORD)v3)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        return v3;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315906;
      v9 = "AVVCAudioQueueRecordingEngine.mm";
      v10 = 1024;
      v11 = 1930;
      v12 = 1024;
      v13 = isSessionRecording ^ 1;
      v14 = 1024;
      v15 = v3;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionIsRecordingFlag: Failed at enableSiriListeningMode(%u) with error: %d", (uint8_t *)&v8, 0x1Eu);
    }

  }
  else
  {
    v5 = 1;
    if (!isSessionRecording)
      v5 = 2;
    *((_QWORD *)this + 42) = v5;
  }
  return v3;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getPastDataFramesAvailable(AVVCAudioQueueRecordingEngine *this, unsigned int *outData)
{
  OpaqueAudioQueue *result;
  UInt32 ioDataSize;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (result)
  {
    ioDataSize = 4;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, 0x71706261u, outData, &ioDataSize);
  }
  return result;
}

void AVVCAudioQueueRecordingEngine::UpdateRecordDeviceOnQueue(AVVCAudioQueueRecordingEngine *this, NSString *a2)
{
  OpaqueAudioQueue *v3;
  OSStatus v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSString *inData;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  NSString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  inData = a2;
  v3 = (OpaqueAudioQueue *)*((_QWORD *)this + 76);
  if (!v3)
    goto LABEL_17;
  v4 = AudioQueueSetProperty(v3, 0x61716364u, &inData, 8u);
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "AVVCAudioQueueRecordingEngine.mm";
    v12 = 1024;
    v13 = 1970;
    v14 = 2112;
    v15 = inData;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d UpdateRecordDeviceOnQueue : AudioQueueSetProperty(kAudioQueueProperty_CurrentDevice) - %@", buf, 0x1Cu);
  }

LABEL_9:
  if (v4)
  {
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "AVVCAudioQueueRecordingEngine.mm";
      v12 = 1024;
      v13 = 1972;
      v14 = 1024;
      LODWORD(v15) = v4;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d UpdateRecordDeviceOnQueue: AudioQueueSetProperty(kAudioQueueProperty_CurrentDevice - %d)", buf, 0x18u);
    }

  }
LABEL_17:

}

void sub_19B7BE5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::setupAudioQueueRecordDeviceAndUpdate(AVVCAudioQueueRecordingEngine *this, NSString *a2)
{
  return 0;
}

uint64_t AVVCAudioQueueRecordingEngine::getEngineType(AVVCAudioQueueRecordingEngine *this)
{
  return 2;
}

uint64_t AVVCAudioQueueRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  uint64_t result;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  AVVCRouteManager::getRecordRoute(*(_QWORD *)(a1 + 376), a2);
  result = objc_msgSend(*a2, "isEqualToString:", CFSTR("No Record Route"));
  if ((_DWORD)result)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        return 4294955512;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "AVVCAudioQueueRecordingEngine.mm";
      v8 = 1024;
      v9 = 2032;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCAudioQueueRecordingEngine::getRecordRoute : Cached record route is nil!", (uint8_t *)&v6, 0x12u);
    }

    return 4294955512;
  }
  return result;
}

id AVVCAudioQueueRecordingEngine::setDeviceIOBufferSizeFrames(AudioQueueRef *this, int a2)
{
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  char v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  NSObject *v15;
  id v16;
  int inData;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _BYTE v24[10];
  _BOOL4 v25;
  _BYTE v26[160];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  ElapsedTime::ElapsedTime((ElapsedTime *)v26, "setDeviceIOBufferSizeFrames", "setDeviceIOBufferSizeFrames", 0);
  inData = a2;
  (*((void (**)(AudioQueueRef *, _QWORD))*this + 8))(this, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "siriInputSource");

  v6 = IsAnyAppRecording();
  v7 = v6;
  v8 = v5 != 1936290660 || v6;
  if ((v8 & 1) == 0)
  {
    v9 = (id)AudioQueueSetProperty(this[76], 0x64766266u, &inData, 4u);
    if (kAVVCScope)
    {
      v10 = *(id *)kAVVCScope;
      if (!v10)
      {
LABEL_19:
        if (!(_DWORD)v9)
          *((_DWORD *)this + 150) = inData;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v20 = "AVVCAudioQueueRecordingEngine.mm";
      v21 = 1024;
      v22 = 1015;
      v23 = 1024;
      *(_DWORD *)v24 = inData;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = (_DWORD)v9;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDeviceIOBufferSizeFrames: AudioQueueSetProperty(kAudioQueueProperty_DeviceBufferSizeFrames) : %u err : %d", buf, 0x1Eu);
    }

    goto LABEL_19;
  }
  if (kAVVCScope)
  {
    v9 = *(id *)kAVVCScope;
    if (!v9)
      goto LABEL_21;
  }
  else
  {
    v9 = (id)MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  v12 = v9;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    Get4CCFromInt(v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    v20 = "AVVCAudioQueueRecordingEngine.mm";
    v21 = 1024;
    v22 = 1021;
    v23 = 2112;
    *(_QWORD *)v24 = v13;
    *(_WORD *)&v24[8] = 1024;
    v25 = v7;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDeviceIOBufferSizeFrames: Not setting DeviceBufferSizeFrames. siri input source: %@, isAnyAppRecording: %d", buf, 0x22u);

  }
  v9 = 0;
LABEL_21:
  if (kAVVCScope)
  {
    v15 = *(id *)kAVVCScope;
    if (!v15)
      goto LABEL_28;
  }
  else
  {
    v15 = MEMORY[0x1E0C81028];
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v20 = "AVVCAudioQueueRecordingEngine.mm";
    v21 = 1024;
    v22 = 1024;
    v23 = 1024;
    *(_DWORD *)v24 = inData;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = (_DWORD)v9;
    _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d setDeviceIOBufferSizeFrames: %u err : %d", buf, 0x1Eu);
  }

LABEL_28:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v26);
  return v9;
}

void sub_19B7BE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

uint64_t RecordEncoderInputDataProc(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  id v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *mData;
  UInt32 mDataByteSize;
  id v22;
  unsigned int v23;
  uint64_t v25;
  id v26;
  NSObject *v27;
  int v28;
  _BYTE v30[16];
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)a5;
  v10 = a5[6];
  v11 = a5[4];
  v12 = a5[3] * v10;
  v13 = v11 - v10;
  if (kAVVCScope)
  {
    v14 = *(id *)kAVVCScope;
    if (!v14)
      goto LABEL_8;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
    v15 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v16 = *a2;
    *(_DWORD *)buf = 136316162;
    v32 = "AVVCAudioQueueRecordingEngine.mm";
    v33 = 1024;
    v34 = 1526;
    v35 = 1024;
    LODWORD(v36) = v16;
    WORD2(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 6) = v11 - v10;
    WORD5(v36) = 1024;
    HIDWORD(v36) = v12;
    _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: ENTRY: *ioNumberDataPackets passed in: %u, packets remaining: %u, bytes already consumed: %u", buf, 0x24u);
  }

LABEL_8:
  a3->mBuffers[0].mData = (void *)(*(_QWORD *)(v9 + 8) + v12);
  a3->mBuffers[0].mDataByteSize = a5[3] * v13;
  a3->mBuffers[0].mNumberChannels = a5[2];
  if (a4)
    *a4 = *(AudioStreamPacketDescription **)(v9 + 40);
  if (!v11)
  {
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_25:
        a3->mBuffers[0].mDataByteSize = 0;
        *a2 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v22 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v32 = "AVVCAudioQueueRecordingEngine.mm";
      v33 = 1024;
      v34 = 1536;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: End of stream -- handing back zero size buffer", buf, 0x12u);
    }

    goto LABEL_25;
  }
  if (kAVVCScope)
  {
    v17 = *(id *)kAVVCScope;
    if (!v17)
      goto LABEL_26;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    mData = a3->mBuffers[0].mData;
    mDataByteSize = a3->mBuffers[0].mDataByteSize;
    *(_DWORD *)buf = 136315906;
    v32 = "AVVCAudioQueueRecordingEngine.mm";
    v33 = 1024;
    v34 = 1542;
    v35 = 2048;
    *(_QWORD *)&v36 = mData;
    WORD4(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 10) = mDataByteSize;
    _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: Handing back ioData buffer %p of size %u", buf, 0x22u);
  }

LABEL_26:
  *a2 = v13;
  v23 = a5[6] + v13;
  a5[6] = v23;
  if (v23 > a5[4])
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: packetsRead <= packetsAvailable!", buf, 2u);
    }
    __break(1u);
  }
  if (v11 != v10 || v11 == 0)
    v25 = 0;
  else
    v25 = 1802723939;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 8) != 0)
    {
      v26 = *(id *)kAVVCScope;
      if (v26)
      {
        v27 = v26;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v28 = *a2;
          CAX4CCString::CAX4CCString((CAX4CCString *)v30, v25);
          *(_DWORD *)buf = 136315906;
          v32 = "AVVCAudioQueueRecordingEngine.mm";
          v33 = 1024;
          v34 = 1553;
          v35 = 1024;
          LODWORD(v36) = v28;
          WORD2(v36) = 2080;
          *(_QWORD *)((char *)&v36 + 6) = v30;
          _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: EXIT: *ioNumberDataPackets passed back out: %u, status: %s", buf, 0x22u);
        }

      }
    }
  }
  return v25;
}

void sub_19B7BEDF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke(uint64_t a1)
{
  AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(*(_QWORD *)(a1 + 32) + 152));
}

void ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke_114(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 32)) == 0)
  {
LABEL_6:
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "AVVCAudioQueueRecordingEngine.mm";
      v11 = 1024;
      v12 = 1857;
      v13 = 2048;
      v14 = 0;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", buf, 0x1Cu);
    }

LABEL_13:
    if (!v3)
      return;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
LABEL_14:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B7BEF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

__CFString *engineToString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __CFString *v3;

  if (a1)
  {
    if (a2)
      v2 = *(_QWORD *)(a2 + 8) + 1;
    else
      v2 = 0;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), a1, *(unsigned int *)(a1 + 272), v2);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = CFSTR("(0x0) use_count:0");
  }
  return v3;
}

void AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc(AVVCAudioQueueRecordingEngine *this, void *a2, OpaqueAudioQueue *a3)
{
  int v3;
  NSObject *v6;
  id v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[5];
  std::__shared_weak_count *v32;
  void *v33;
  int v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  _BYTE v39[8];
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  __CFString *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v3 = (int)a3;
  v50 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_8;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "AVVCAudioQueueRecordingEngine.mm";
    v42 = 1024;
    v43 = 166;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueueRecordPropertyListenerProc called ", buf, 0x12u);
  }

LABEL_8:
  TraceMethod::TraceMethod((TraceMethod *)v39, "AudioQueueRecordPropertyListenerProc");
  v9 = *(_QWORD **)this;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v37 = *(_QWORD **)this;
  v38 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!kAVVCScope)
  {
    v12 = (id)MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
LABEL_15:
    v14 = v12;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_31:

      goto LABEL_32;
    }
    v35 = v9;
    v36 = v8;
    if (v8)
    {
      v15 = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      if (v9)
      {
        v17 = (void *)MEMORY[0x1E0CB3940];
        v18 = v9[34];
        v19 = *v15 + 1;
LABEL_23:
        objc_msgSend(v17, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v9, v18, v19);
        v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_25;
      }
    }
    else if (v9)
    {
      v19 = 0;
      v17 = (void *)MEMORY[0x1E0CB3940];
      v18 = v9[34];
      goto LABEL_23;
    }
    v20 = CFSTR("(0x0) use_count:0");
LABEL_25:
    *(_DWORD *)buf = 136316162;
    v41 = "AVVCAudioQueueRecordingEngine.mm";
    v42 = 1024;
    v43 = 171;
    v44 = 2112;
    v45 = v20;
    v46 = 2048;
    v47 = a2;
    v48 = 1024;
    v49 = v3;
    _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueRecordPropertyListenerProc: Engine[%@] Queue(%p) Property(%d)", buf, 0x2Cu);
    if (v8)
    {
      v21 = (unint64_t *)&v8->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    v9 = v37;
    goto LABEL_31;
  }
  v12 = *(id *)kAVVCScope;
  if (v12)
    goto LABEL_15;
LABEL_32:
  if (v9)
  {
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3321888768;
    v31[2] = ___ZN29AVVCAudioQueueRecordingEngine36AudioQueueRecordPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke;
    v31[3] = &__block_descriptor_60_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    v31[4] = v9;
    v32 = v38;
    if (v38)
    {
      v23 = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v33 = a2;
    v34 = v3;
    (*(void (**)(_QWORD *, _QWORD *, const char *))(*v9 + 368))(v9, v31, "AudioQueueRecordPropertyListenerProc");
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v39);
}

void sub_19B7BF3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a12);
  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29AVVCAudioQueueRecordingEngine36AudioQueueRecordPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));
}

uint64_t AVVCAudioQueueRecordingEngine::setupDSPGraph(AVVCAudioQueueRecordingEngine *this)
{
  BOOL v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  AVAudioUnitEffect *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  char v21;
  id v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  NSObject *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  AVAudioChannelLayout *v61;
  AVAudioChannelLayout *v62;
  uint64_t v63;
  unsigned __int8 v64;
  double v65;
  double v66;
  AVAudioEngine *v67;
  void *v68;
  void *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  NSObject *v76;
  NSObject *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  NSObject *v81;
  void *v82;
  char v83;
  void *v84;
  void *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  NSObject *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  NSObject *v97;
  double v98;
  int16x8_t v99;
  void *v100;
  void *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  NSObject *v105;
  id v106;
  uint64_t v107;
  void *v108;
  void *v109;
  NSObject *v110;
  id v111;
  uint64_t v112;
  void *v113;
  void *v114;
  NSObject *v115;
  id v116;
  uint64_t v117;
  void *v118;
  void *v119;
  NSObject *v120;
  id v121;
  uint64_t v122;
  void *v123;
  void *v124;
  NSObject *v125;
  id v126;
  uint64_t v127;
  void *v128;
  char v129;
  void *v130;
  void *v131;
  NSObject *v132;
  void *v133;
  void *v134;
  NSObject *v135;
  uint8_t *v136;
  AVAudioChannelLayout *v138;
  AVAudioFormat *v139;
  AVAudioFormat *v140;
  AVAudioFormat *v141;
  AVAudioFormat *v142;
  NSObject *v143;
  id v144;
  _QWORD v145[6];
  id v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  NSObject *inData;
  __int128 v151;
  int v152;
  id v153;
  uint8_t v154[4];
  const char *v155;
  __int16 v156;
  int v157;
  __int16 v158;
  uint8_t *v159;
  uint8_t buf[4];
  const char *v161;
  __int16 v162;
  int v163;
  __int16 v164;
  NSObject *v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS)
    v2 = *((_QWORD *)this + 34) == 1;
  else
    v2 = 0;
  if (v2)
  {
    if (*((_QWORD *)this + 104))
    {
      v4 = (void *)*((_QWORD *)this + 103);
      if (v4)
      {
        objc_msgSend(v4, "stop");
        if (kAVVCScope)
        {
          v5 = *(id *)kAVVCScope;
          if (!v5)
            goto LABEL_39;
        }
        else
        {
          v5 = MEMORY[0x1E0C81028];
          v19 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 781;
          _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC - Graph is already setup. Starting and stopping the engine/dsp", buf, 0x12u);
        }

LABEL_39:
        v20 = (void *)*((_QWORD *)this + 103);
        v153 = 0;
        v21 = objc_msgSend(v20, "startAndReturnError:", &v153);
        v8 = v153;
        if ((v21 & 1) != 0)
          goto LABEL_23;
        if (kAVVCScope)
        {
          v22 = *(id *)kAVVCScope;
          if (!v22)
          {
LABEL_67:
            v9 = objc_msgSend(v8, "code");
            goto LABEL_179;
          }
        }
        else
        {
          v22 = (id)MEMORY[0x1E0C81028];
          v32 = MEMORY[0x1E0C81028];
        }
        v33 = v22;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v8, "description");
          v34 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 783;
          v164 = 2112;
          v165 = v34;
          _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC - failed to restart AVAudioEngine: %@", buf, 0x1Cu);

        }
        goto LABEL_67;
      }
    }
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_28;
    }
    else
    {
      v6 = (id)MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    v11 = v6;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 791;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC - Setting up DSPGraph", buf, 0x12u);
    }

LABEL_28:
    v151 = xmmword_19B85A2A0;
    v152 = 0;
    v12 = -[AVAudioUnitEffect initWithAudioComponentDescription:]([AVAudioUnitEffect alloc], "initWithAudioComponentDescription:", &v151);
    v13 = (void *)*((_QWORD *)this + 104);
    *((_QWORD *)this + 104) = v12;

    if (*((_QWORD *)this + 104))
    {
      GetModelPathComponent();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.dspg"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("<UPPERCASE_MODEL>"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      GetLowercaseModelName();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringByReplacingOccurrencesOfString:withString:", CFSTR("<LOWERCASE_MODEL>"), v16);
      v143 = objc_claimAutoreleasedReturnValue();

      inData = v143;
      if (kAVVCScope)
      {
        v17 = *(id *)kAVVCScope;
        if (!v17)
          goto LABEL_47;
      }
      else
      {
        v17 = (id)MEMORY[0x1E0C81028];
        v23 = MEMORY[0x1E0C81028];
      }
      v24 = v17;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 814;
        v164 = 2112;
        v165 = v143;
        _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_47:
      v9 = AudioUnitSetProperty((AudioUnit)objc_msgSend(*((id *)this + 104), "audioUnit"), 0x64737067u, 0, 0, &inData, 8u);
      if ((_DWORD)v9)
      {
        if (kAVVCScope)
        {
          v25 = *(id *)kAVVCScope;
          if (!v25)
          {
            v8 = 0;
LABEL_178:

            goto LABEL_179;
          }
        }
        else
        {
          v25 = MEMORY[0x1E0C81028];
          v30 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 817;
          v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph text file: %d", buf, 0x18u);
        }
        v8 = 0;
LABEL_177:

        goto LABEL_178;
      }
      GetModelPathComponent();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.propstrip"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("<UPPERCASE_MODEL>"), v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      GetLowercaseModelName();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "stringByReplacingOccurrencesOfString:withString:", CFSTR("<LOWERCASE_MODEL>"), v28);
      v25 = objc_claimAutoreleasedReturnValue();

      if (kAVVCScope)
      {
        v29 = *(id *)kAVVCScope;
        if (!v29)
          goto LABEL_72;
      }
      else
      {
        v29 = (id)MEMORY[0x1E0C81028];
        v35 = MEMORY[0x1E0C81028];
      }
      v36 = v29;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 823;
        v164 = 2112;
        v165 = v25;
        _os_log_impl(&dword_19B733000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_72:
      v149 = 0;
      v37 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v25);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = 0;
      v39 = objc_msgSend(v37, "dictionaryWithContentsOfURL:error:", v38, &v148);
      v8 = v148;

      v149 = v39;
      if (!v8)
        goto LABEL_80;
      if (kAVVCScope)
      {
        v40 = *(id *)kAVVCScope;
        if (!v40)
          goto LABEL_80;
      }
      else
      {
        v40 = (id)MEMORY[0x1E0C81028];
        v41 = MEMORY[0x1E0C81028];
      }
      v42 = v40;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v8, "description");
        v43 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 826;
        v164 = 2112;
        v165 = v43;
        _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to read contents of DSPGraph AUStrip file: %@", buf, 0x1Cu);

      }
LABEL_80:
      v9 = AudioUnitSetProperty((AudioUnit)objc_msgSend(*((id *)this + 104), "audioUnit"), 0x70727370u, 0, 0, &v149, 8u);
      if ((_DWORD)v9)
      {
        if (kAVVCScope)
        {
          v44 = *(id *)kAVVCScope;
          if (!v44)
            goto LABEL_177;
        }
        else
        {
          v44 = MEMORY[0x1E0C81028];
          v49 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 830;
          v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph AUStrip file: %d", buf, 0x18u);
        }
        goto LABEL_176;
      }
      GetModelPathComponent();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.austrip"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("<UPPERCASE_MODEL>"), v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      GetLowercaseModelName();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "stringByReplacingOccurrencesOfString:withString:", CFSTR("<LOWERCASE_MODEL>"), v47);
      v44 = objc_claimAutoreleasedReturnValue();

      if (kAVVCScope)
      {
        v48 = *(id *)kAVVCScope;
        if (!v48)
          goto LABEL_94;
      }
      else
      {
        v48 = (id)MEMORY[0x1E0C81028];
        v50 = MEMORY[0x1E0C81028];
      }
      v51 = v48;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        v162 = 1024;
        v163 = 836;
        v164 = 2112;
        v165 = v44;
        _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_94:
      v147 = 0;
      v52 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v44);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v146 = v8;
      v54 = objc_msgSend(v52, "dictionaryWithContentsOfURL:error:", v53, &v146);
      v55 = v146;

      v8 = v55;
      v147 = v54;
      if (v55)
      {
        CALog::LogObjIfEnabled(1, kAVVCScope);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = v56;
        if (v56)
        {
          v58 = v56;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v55, "description");
            v59 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136315650;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            v162 = 1024;
            v163 = 839;
            v164 = 2112;
            v165 = v59;
            _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to read contents of DSPGraph AUStrip file: %@", buf, 0x1Cu);

          }
        }

      }
      v9 = AudioUnitSetProperty((AudioUnit)objc_msgSend(*((id *)this + 104), "audioUnit"), 0x61757370u, 0, 0, &v147, 8u);
      if ((_DWORD)v9)
      {
        CALog::LogObjIfEnabled(1, kAVVCScope);
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = (AVAudioChannelLayout *)v60;
        if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 843;
          v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19B733000, &v61->super, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph AUStrip file: %d", buf, 0x18u);
        }
        goto LABEL_175;
      }
      v61 = -[AVAudioChannelLayout initWithLayoutTag:]([AVAudioChannelLayout alloc], "initWithLayoutTag:", *((_DWORD *)this + 161) | 0x930000u);
      v62 = -[AVAudioChannelLayout initWithLayoutTag:]([AVAudioChannelLayout alloc], "initWithLayoutTag:", 9633794);
      *(_DWORD *)buf = 0;
      if (CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf)
        && *(_DWORD *)buf == 1)
      {
        v63 = 1;
      }
      else
      {
        *(_DWORD *)buf = 0;
        v64 = CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf);
        if ((v64 & (*(_DWORD *)buf == 2)) != 0)
          v63 = 3;
        else
          v63 = 0;
      }
      v138 = v62;
      v141 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v63, 1, v61, *((double *)this + 3));
      v142 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v63, 0, v62, *((double *)this + 3));
      v140 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v61, *((double *)this + 3));
      v139 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v62, *((double *)this + 3));
      v65 = *((double *)this + 33);
      v66 = *((double *)this + 3);
      v67 = objc_alloc_init(AVAudioEngine);
      v68 = (void *)*((_QWORD *)this + 103);
      *((_QWORD *)this + 103) = v67;

      CALog::LogObjIfEnabled(5, kAVVCScope);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = v69;
      if (v69)
      {
        v71 = v69;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          v162 = 1024;
          v163 = 870;
          _os_log_impl(&dword_19B733000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine EnableManualRenderingMode Offline", buf, 0x12u);
        }

      }
      v72 = (void *)*((_QWORD *)this + 103);
      v145[5] = v8;
      objc_msgSend(v72, "enableManualRenderingMode:format:maximumFrameCount:error:", 0, v142);
      v73 = v8;

      if (v73)
      {
        CALog::LogObjIfEnabled(1, kAVVCScope);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = v74;
        if (v74)
        {
          v76 = v74;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v73, "description");
            v77 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136315650;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            v162 = 1024;
            v163 = 873;
            v164 = 2112;
            v165 = v77;
            _os_log_impl(&dword_19B733000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: Failed to EnableManualRenderingMode on AVAudioEngine: %@", buf, 0x1Cu);

          }
        }

        v78 = objc_msgSend(v73, "code");
      }
      else
      {
        CALog::LogObjIfEnabled(5, kAVVCScope);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = v79;
        if (v79)
        {
          v81 = v79;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            v162 = 1024;
            v163 = 877;
            _os_log_impl(&dword_19B733000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine SetManualRenderingInputPCMFormat", buf, 0x12u);
          }

        }
        objc_msgSend(*((id *)this + 103), "inputNode");
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        v145[0] = MEMORY[0x1E0C809B0];
        v145[1] = 3221225472;
        v145[2] = ___ZN29AVVCAudioQueueRecordingEngine13setupDSPGraphEv_block_invoke;
        v145[3] = &__block_descriptor_40_e49_r__AudioBufferList_I_1_AudioBuffer_II_v___12__0I8l;
        v145[4] = this;
        v83 = objc_msgSend(v82, "setManualRenderingInputPCMFormat:inputBlock:", v141, v145);

        if ((v83 & 1) == 0)
        {
          CALog::LogObjIfEnabled(1, kAVVCScope);
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = v84;
          if (v84)
          {
            v86 = v84;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v161 = "AVVCAudioQueueRecordingEngine.mm";
              v162 = 1024;
              v163 = 893;
              _os_log_impl(&dword_19B733000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: failed to set AVAudioEngine input rendering block", buf, 0x12u);
            }

          }
        }
        CALog::LogObjIfEnabled(5, kAVVCScope);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v88 = v87;
        if (v87)
        {
          v89 = v87;
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            v162 = 1024;
            v163 = 897;
            _os_log_impl(&dword_19B733000, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: Making AVAudioEngine node connections", buf, 0x12u);
          }

        }
        objc_msgSend(*((id *)this + 103), "attachNode:", *((_QWORD *)this + 104));
        v90 = (void *)*((_QWORD *)this + 103);
        objc_msgSend(v90, "inputNode");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "connect:to:format:", v91, *((_QWORD *)this + 104), v140);

        v92 = (void *)*((_QWORD *)this + 103);
        v93 = *((_QWORD *)this + 104);
        objc_msgSend(v92, "outputNode");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v92, "connect:to:format:", v93, v94, v139);

        CALog::LogObjIfEnabled(5, kAVVCScope);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        v96 = v95;
        if (v95)
        {
          v97 = v95;
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
          {
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v98, v99);
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 903;
            v158 = 2080;
            v159 = buf;
            _os_log_impl(&dword_19B733000, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d mRecordASBD = %s", v154, 0x1Cu);
          }

        }
        CALog::LogObjIfEnabled(5, kAVVCScope);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        v101 = v100;
        if (v100)
        {
          v102 = v100;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 904;
            v158 = 1024;
            LODWORD(v159) = (v65 * v66);
            _os_log_impl(&dword_19B733000, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d numFrames = %d", v154, 0x18u);
          }

        }
        CALog::LogObjIfEnabled(5, kAVVCScope);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        v104 = v103;
        if (v103)
        {
          v105 = v103;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
          {
            -[AVAudioFormat description](v141, "description");
            v106 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v107 = objc_msgSend(v106, "UTF8String");
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 905;
            v158 = 2080;
            v159 = (uint8_t *)v107;
            _os_log_impl(&dword_19B733000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAE input format = %s", v154, 0x1Cu);

          }
        }

        CALog::LogObjIfEnabled(5, kAVVCScope);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v109 = v108;
        if (v108)
        {
          v110 = v108;
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
          {
            -[AVAudioFormat description](v142, "description");
            v111 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v112 = objc_msgSend(v111, "UTF8String");
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 906;
            v158 = 2080;
            v159 = (uint8_t *)v112;
            _os_log_impl(&dword_19B733000, v110, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAE output format = %s", v154, 0x1Cu);

          }
        }

        CALog::LogObjIfEnabled(5, kAVVCScope);
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        v114 = v113;
        if (v113)
        {
          v115 = v113;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
          {
            -[AVAudioFormat description](v140, "description");
            v116 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v117 = objc_msgSend(v116, "UTF8String");
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 907;
            v158 = 2080;
            v159 = (uint8_t *)v117;
            _os_log_impl(&dword_19B733000, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSPGraph input format = %s", v154, 0x1Cu);

          }
        }

        CALog::LogObjIfEnabled(5, kAVVCScope);
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        v119 = v118;
        if (v118)
        {
          v120 = v118;
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
          {
            -[AVAudioFormat description](v139, "description");
            v121 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v122 = objc_msgSend(v121, "UTF8String");
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 908;
            v158 = 2080;
            v159 = (uint8_t *)v122;
            _os_log_impl(&dword_19B733000, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSPGraph output format = %s", v154, 0x1Cu);

          }
        }

        CALog::LogObjIfEnabled(5, kAVVCScope);
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        v124 = v123;
        if (v123)
        {
          v125 = v123;
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(*((id *)this + 103), "description");
            v126 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v127 = objc_msgSend(v126, "UTF8String");
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 911;
            v158 = 2080;
            v159 = (uint8_t *)v127;
            _os_log_impl(&dword_19B733000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: Starting AVAudioEngine with desc = %s", v154, 0x1Cu);

          }
        }

        v128 = (void *)*((_QWORD *)this + 103);
        v144 = 0;
        v129 = objc_msgSend(v128, "startAndReturnError:", &v144);
        v73 = v144;
        if ((v129 & 1) != 0)
        {
          CALog::LogObjIfEnabled(5, kAVVCScope);
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          v131 = v130;
          if (v130)
          {
            v132 = v130;
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v154 = 136315394;
              v155 = "AVVCAudioQueueRecordingEngine.mm";
              v156 = 1024;
              v157 = 918;
              _os_log_impl(&dword_19B733000, v132, OS_LOG_TYPE_DEBUG, "%25s:%-5d Done setting up DSPGraph", v154, 0x12u);
            }

          }
          v9 = 0;
          goto LABEL_174;
        }
        CALog::LogObjIfEnabled(1, kAVVCScope);
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        v134 = v133;
        if (v133)
        {
          v135 = v133;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v73, "description");
            v136 = (uint8_t *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            v156 = 1024;
            v157 = 914;
            v158 = 2112;
            v159 = v136;
            _os_log_impl(&dword_19B733000, v135, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: Failed to start AVAudioEngine: %@", v154, 0x1Cu);

          }
        }

        v78 = objc_msgSend(v73, "code");
      }
      v9 = v78;
LABEL_174:

      v8 = v73;
LABEL_175:

LABEL_176:
      goto LABEL_177;
    }
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_62:
        v8 = 0;
        v9 = 4294956421;
        goto LABEL_179;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v31 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 808;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to instantiate AUDSPGraph", buf, 0x12u);
    }

    goto LABEL_62;
  }
  if (!kAVVCScope)
  {
    v3 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
    goto LABEL_19;
  }
  v3 = *(id *)kAVVCScope;
  if (v3)
  {
LABEL_19:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      v162 = 1024;
      v163 = 770;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d AVVC - Cannot use DSP Graph. ", buf, 0x12u);
    }

  }
  v8 = 0;
LABEL_23:
  v9 = 0;
LABEL_179:

  return v9;
}

void sub_19B7C0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint8_t buf,int a38,int a39,__int16 a40,__int16 a41,__int16 a42,__int16 a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  _Unwind_Resume(a1);
}

uint64_t ___ZN29AVVCAudioQueueRecordingEngine13setupDSPGraphEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 856))
  {
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(v3 + 856) = 1;
        return objc_msgSend(*(id *)(v3 + 792), "audioBufferList");
      }
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315650;
      v11 = "AVVCAudioQueueRecordingEngine.mm";
      v12 = 1024;
      v13 = 880;
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC: AVAudioEngine input rendering block call with numFrames: %d", (uint8_t *)&v10, 0x18u);
    }

    goto LABEL_14;
  }
  v4 = *(_DWORD *)(v3 + 860);
  if (v4 < 19)
  {
    *(_DWORD *)(v3 + 860) = v4 + 1;
  }
  else
  {
    *(_DWORD *)(v3 + 860) = 0;
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        return objc_msgSend(*(id *)(v3 + 792), "audioBufferList");
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v10 = 136315650;
      v11 = "AVVCAudioQueueRecordingEngine.mm";
      v12 = 1024;
      v13 = 885;
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine input rendering block call with numFrames: %d", (uint8_t *)&v10, 0x18u);
    }

  }
  return objc_msgSend(*(id *)(v3 + 792), "audioBufferList");
}

void AVVCAudioQueueRecordingEngine::AudioQueueRecordInputCallback(AVVCAudioQueueRecordingEngine *this, void *a2, OpaqueAudioQueue *a3, AudioQueueBuffer *a4, const AudioTimeStamp *a5, uint64_t a6, const AudioStreamPacketDescription *a7)
{
  NSObject *v13;
  id v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
      goto LABEL_8;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v21 = 136315394;
    *(_QWORD *)&v21[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&v21[12] = 1024;
    *(_DWORD *)&v21[14] = 152;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueueRecordInputCallback called ", v21, 0x12u);
  }

LABEL_8:
  v15 = *(_QWORD *)this;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)v21 = v15;
  *(_QWORD *)&v21[8] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15)
    (*(void (**)(uint64_t, void *, OpaqueAudioQueue *, AudioQueueBuffer *, const AudioTimeStamp *, uint64_t))(*(_QWORD *)v15 + 248))(v15, a2, a3, a4, a5, a6);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19B7C118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL AVVCAudioQueueRecordingEngine::ShouldUseAudioConverter(AVVCAudioQueueRecordingEngine *this, const AudioStreamBasicDescription *a2)
{
  UInt32 mChannelsPerFrame;
  BOOL v3;
  AVVCAudioQueueRecordingEngine *v5;

  if (a2->mFormatID != 1819304813)
    return 1;
  if ((a2->mFormatFlags & 0x20) == 0)
    return 0;
  mChannelsPerFrame = a2->mChannelsPerFrame;
  if (mChannelsPerFrame != 2)
    return mChannelsPerFrame > 1;
  if (isDarwinOSProduct(void)::onceToken != -1)
  {
    v5 = this;
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
    this = v5;
  }
  if (isDarwinOSProduct(void)::isDarwinOS)
    v3 = *((_QWORD *)this + 34) == 1;
  else
    v3 = 0;
  return !v3;
}

void AVVCAudioQueueRecordingEngine::createAudioConverter(AVVCAudioQueueRecordingEngine *this, CAStreamBasicDescription *a2, NSDictionary *a3, unsigned int *a4)
{
  NSDictionary *v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  NSObject *v13;
  double v14;
  int16x8_t v15;
  __int128 v16;
  id v17;
  id v18;
  NSObject *v19;
  double v20;
  int16x8_t v21;
  UInt32 var6;
  UInt32 mChannelsPerFrame;
  UInt32 v24;
  AudioConverterRef *v25;
  OSStatus v26;
  unsigned int v27;
  NSObject *v28;
  NSDictionary *v29;
  NSDictionary *v30;
  OSStatus v31;
  unsigned int v32;
  NSObject *v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  id v38;
  OSStatus v39;
  unsigned int v40;
  NSObject *v41;
  OSStatus v42;
  unsigned int v43;
  unsigned int v44;
  NSObject *v45;
  NSObject *v46;
  const char *v47;
  id v48;
  id v49;
  OSStatus v50;
  unsigned int v51;
  NSObject *v52;
  id v53;
  const char *v54;
  id v55;
  OSStatus v56;
  unsigned int v57;
  NSObject *v58;
  id v59;
  const char *v60;
  id v61;
  unsigned int v62;
  id v63;
  id v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  OSStatus v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  id v73;
  id v74;
  const char *v75;
  id v76;
  id v77;
  NSObject *v78;
  uint64_t v79;
  id v80;
  id v81;
  NSObject *v82;
  unsigned int v83;
  OSStatus v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  id v88;
  id v89;
  NSObject *v90;
  id v91;
  id v92;
  NSObject *v93;
  __int128 v94;
  unsigned int var4;
  OSStatus Property;
  id v97;
  id v98;
  id v99;
  NSObject *v100;
  const char *v101;
  id v102;
  unsigned int v103;
  id v104;
  id v105;
  NSObject *v106;
  id v107;
  id v108;
  NSObject *v109;
  int v110;
  id v111;
  OSStatus v112;
  OSStatus v113;
  unsigned int v114;
  void *v115;
  void *v116;
  NSObject *v117;
  id v118;
  NSObject *v119;
  unsigned int v120;
  unsigned int v121;
  id v122;
  id v123;
  NSObject *v124;
  int v125;
  id v126;
  id v127;
  NSObject *v128;
  id v129;
  id v130;
  NSObject *v131;
  double v132;
  int16x8_t v133;
  NSObject *v134;
  id v135;
  const char *v136;
  id v137;
  unsigned int v138;
  AudioStreamBasicDescription inDestinationFormat;
  unsigned int outPropertyData;
  unsigned int inPropertyData;
  uint8_t v142[4];
  const char *v143;
  __int16 v144;
  int v145;
  __int16 v146;
  uint8_t *v147;
  CAStreamBasicDescription v148;
  unsigned int v149;
  uint8_t buf[4];
  const char *v151;
  __int16 v152;
  int v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    v8 = (id)MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  v10 = v8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v151 = "AVVCAudioQueueRecordingEngine.mm";
    v152 = 1024;
    v153 = 633;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: INITIAL AUDIOCONVERTER OUTPUT FORMAT:", buf, 0x12u);
  }

LABEL_8:
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_15;
  }
  else
  {
    v11 = (id)MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v14, v15);
    LODWORD(v148.var0) = 136315650;
    *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
    LOWORD(v148.var2) = 1024;
    *(unsigned int *)((char *)&v148.var2 + 2) = 635;
    HIWORD(v148.var3) = 2080;
    *(_QWORD *)&v148.var4 = buf;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", (uint8_t *)&v148, 0x1Cu);
  }

LABEL_15:
  v16 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v16;
  *(_QWORD *)&inDestinationFormat.mBitsPerChannel = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 103) && *((_QWORD *)this + 104))
  {
    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
        goto LABEL_24;
    }
    else
    {
      v17 = (id)MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    v19 = v17;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      CAStreamBasicDescription::AsString(a2, (char *)buf, 0x100uLL, v20, v21);
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 639;
      HIWORD(v148.var3) = 2080;
      *(_QWORD *)&v148.var4 = buf;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d inASBD : %s", (uint8_t *)&v148, 0x1Cu);
    }

LABEL_24:
    var6 = a2->var6;
    if ((inDestinationFormat.mFormatFlags & 0x20) != 0)
    {
      mChannelsPerFrame = 1;
    }
    else
    {
      mChannelsPerFrame = inDestinationFormat.mChannelsPerFrame;
      if (!inDestinationFormat.mChannelsPerFrame)
      {
        v24 = (inDestinationFormat.mBitsPerChannel + 7) >> 3;
LABEL_29:
        inDestinationFormat.mBytesPerFrame = v24;
        inDestinationFormat.mChannelsPerFrame = var6;
        inDestinationFormat.mBytesPerPacket = v24;
        inDestinationFormat.mFramesPerPacket = 1;
        inDestinationFormat.mFormatFlags |= 0x20u;
        goto LABEL_30;
      }
    }
    v24 = inDestinationFormat.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_29;
  }
LABEL_30:
  v25 = (AudioConverterRef *)((char *)this + 776);
  v26 = AudioConverterNew((const AudioStreamBasicDescription *)a2, &inDestinationFormat, (AudioConverterRef *)this + 97);
  v27 = v26;
  if (v26)
  {
    if ((v26 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_307;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v35 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 644;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v27;
        _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterNew err %{audio:4CC}d", (uint8_t *)&v148, 0x18u);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_307;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v34 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 644;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v27;
        _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterNew err %d", (uint8_t *)&v148, 0x18u);
      }
    }
    goto LABEL_320;
  }
  v29 = v7;
  v30 = v29;
  *(_DWORD *)v142 = 0;
  if (v29 && *v25)
  {
    inPropertyData = 0;
    if (getUInt32ForKey(v29, CFSTR("AVSampleRateConverterQualityKey"), &inPropertyData, (int *)v142))
    {
      v31 = AudioConverterSetProperty(*v25, 0x73726371u, 4u, &inPropertyData);
      v32 = v31;
      *(_DWORD *)v142 = v31;
      if (!v31)
        goto LABEL_67;
      if ((v31 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          v33 = *(id *)kAVVCScope;
          if (!v33)
            goto LABEL_67;
        }
        else
        {
          v33 = MEMORY[0x1E0C81028];
          v36 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v148.var0) = 136315650;
          *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v148.var2) = 1024;
          *(unsigned int *)((char *)&v148.var2 + 2) = 602;
          HIWORD(v148.var3) = 1024;
          v148.var4 = v32;
          v37 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterSampleRateConverterQuality err %d";
LABEL_65:
          _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&v148, 0x18u);
          goto LABEL_66;
        }
        goto LABEL_66;
      }
      if (kAVVCScope)
      {
        v33 = *(id *)kAVVCScope;
        if (!v33)
          goto LABEL_67;
      }
      else
      {
        v33 = MEMORY[0x1E0C81028];
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 602;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v32;
        v37 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterSampleRateConverterQuality err %{audio:4CC}d";
        goto LABEL_65;
      }
LABEL_66:

      goto LABEL_67;
    }
    if (*(_DWORD *)v142)
      goto LABEL_124;
LABEL_67:
    if (getUInt32ForKey(v30, CFSTR("AVEncoderBitRateKey"), &inPropertyData, (int *)v142))
    {
      v39 = AudioConverterSetProperty(*v25, 0x62726174u, 4u, &inPropertyData);
      v40 = v39;
      *(_DWORD *)v142 = v39;
      if (!v39)
        goto LABEL_98;
      if ((v39 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          v41 = *(id *)kAVVCScope;
          if (!v41)
            goto LABEL_98;
        }
        else
        {
          v41 = MEMORY[0x1E0C81028];
          v48 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v148.var0) = 136315650;
          *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v148.var2) = 1024;
          *(unsigned int *)((char *)&v148.var2 + 2) = 607;
          HIWORD(v148.var3) = 1024;
          v148.var4 = v40;
          _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %d", (uint8_t *)&v148, 0x18u);
        }
LABEL_88:

        goto LABEL_98;
      }
      if (kAVVCScope)
      {
        v41 = *(id *)kAVVCScope;
        if (!v41)
          goto LABEL_98;
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
        v49 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 607;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v40;
        _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %{audio:4CC}d", (uint8_t *)&v148, 0x18u);
      }
      goto LABEL_88;
    }
    if (*(_DWORD *)v142)
      goto LABEL_124;
    if (!getUInt32ForKey(v30, CFSTR("AVEncoderBitRatePerChannelKey"), &inPropertyData, (int *)v142))
    {
      if (*(_DWORD *)v142)
        goto LABEL_124;
LABEL_98:
      if (!getUInt32ForKey(v30, CFSTR("AVEncoderBitDepthHintKey"), &inPropertyData, (int *)v142))
      {
        if (*(_DWORD *)v142)
          goto LABEL_124;
        goto LABEL_117;
      }
      v50 = AudioConverterSetProperty(*v25, 0x61636264u, 4u, &inPropertyData);
      v51 = v50;
      *(_DWORD *)v142 = v50;
      if (!v50)
      {
LABEL_117:
        if (getUInt32ForKey(v30, CFSTR("AVEncoderQualityKey"), &inPropertyData, (int *)v142))
        {
          v56 = AudioConverterSetProperty(*v25, 0x63647175u, 4u, &inPropertyData);
          v57 = v56;
          *(_DWORD *)v142 = v56;
          if (!v56)
            goto LABEL_136;
          if ((v56 + 199999) < 0x61A7F)
          {
            if (kAVVCScope)
            {
              v58 = *(id *)kAVVCScope;
              if (!v58)
                goto LABEL_136;
            }
            else
            {
              v58 = MEMORY[0x1E0C81028];
              v59 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v148.var0) = 136315650;
              *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v148.var2) = 1024;
              *(unsigned int *)((char *)&v148.var2 + 2) = 625;
              HIWORD(v148.var3) = 1024;
              v148.var4 = v57;
              v60 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterCodecQuality err %d";
LABEL_134:
              _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&v148, 0x18u);
              goto LABEL_135;
            }
            goto LABEL_135;
          }
          if (kAVVCScope)
          {
            v58 = *(id *)kAVVCScope;
            if (!v58)
              goto LABEL_136;
          }
          else
          {
            v58 = MEMORY[0x1E0C81028];
            v61 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v148.var0) = 136315650;
            *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
            LOWORD(v148.var2) = 1024;
            *(unsigned int *)((char *)&v148.var2 + 2) = 625;
            HIWORD(v148.var3) = 1024;
            v148.var4 = v57;
            v60 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterCodecQuality err %{audio:4CC}d";
            goto LABEL_134;
          }
LABEL_135:

          goto LABEL_136;
        }
        if (!*(_DWORD *)v142)
          goto LABEL_136;
LABEL_124:

LABEL_307:
        return;
      }
      if ((v50 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          v52 = *(id *)kAVVCScope;
          if (!v52)
            goto LABEL_117;
        }
        else
        {
          v52 = MEMORY[0x1E0C81028];
          v55 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          goto LABEL_116;
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 620;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v51;
        v54 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterPropertyBitDepthHint err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          v52 = *(id *)kAVVCScope;
          if (!v52)
            goto LABEL_117;
        }
        else
        {
          v52 = MEMORY[0x1E0C81028];
          v53 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          goto LABEL_116;
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 620;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v51;
        v54 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterPropertyBitDepthHint err %d";
      }
      _os_log_impl(&dword_19B733000, v52, OS_LOG_TYPE_ERROR, v54, (uint8_t *)&v148, 0x18u);
LABEL_116:

      goto LABEL_117;
    }
    outPropertyData = *((_DWORD *)this + 13) * inPropertyData;
    v42 = AudioConverterSetProperty(*((AudioConverterRef *)this + 97), 0x62726174u, 4u, &outPropertyData);
    v43 = v42;
    *(_DWORD *)v142 = v42;
    if (!v42)
      goto LABEL_98;
    v44 = v42 + 199999;
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = v45;
    if (v44 >= 0x61A7F)
    {
      if (!v45 || !os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        goto LABEL_97;
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 613;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v43;
      v47 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %{audio:4CC}d";
    }
    else
    {
      if (!v45 || !os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        goto LABEL_97;
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 613;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v43;
      v47 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %d";
    }
    _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_ERROR, v47, (uint8_t *)&v148, 0x18u);
LABEL_97:

    goto LABEL_98;
  }
LABEL_136:

  inPropertyData = 0;
  v62 = (*((double *)this + 33) * *((double *)this + 3));
  if (kAVVCScope)
  {
    v63 = *(id *)kAVVCScope;
    if (!v63)
      goto LABEL_143;
  }
  else
  {
    v63 = (id)MEMORY[0x1E0C81028];
    v64 = MEMORY[0x1E0C81028];
  }
  v65 = v63;
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    v66 = *((_QWORD *)this + 33);
    v67 = *((_QWORD *)this + 3);
    LODWORD(v148.var0) = 136316162;
    *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
    LOWORD(v148.var2) = 1024;
    *(unsigned int *)((char *)&v148.var2 + 2) = 656;
    HIWORD(v148.var3) = 2048;
    *(_QWORD *)&v148.var4 = v66;
    LOWORD(v148.var6) = 2048;
    *(_QWORD *)((char *)&v148.var6 + 2) = v67;
    HIWORD(v148.var8) = 1024;
    v149 = v62;
    _os_log_impl(&dword_19B733000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: initial frames per buffer = dur %.2f * sr %.2f = %u", (uint8_t *)&v148, 0x2Cu);
  }

LABEL_143:
  v68 = (double *)((char *)this + 24);
  if (*((_DWORD *)this + 8) != 1936745848)
    goto LABEL_200;
  *(_DWORD *)v142 = 3;
  v69 = AudioConverterSetProperty(*v25, 0x73656378u, 4u, v142);
  v70 = v69;
  if (v69)
  {
    if ((v69 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_307;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v76 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_320;
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 662;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v70;
      v75 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertySpeexEncodeComplexity) e"
            "rr %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_307;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v74 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_320;
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 662;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v70;
      v75 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertySpeexEncodeComplexity) err %d";
    }
    _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, v75, (uint8_t *)&v148, 0x18u);
    goto LABEL_320;
  }
  outPropertyData = 0;
  inPropertyData = 4;
  if (AudioConverterGetProperty(*v25, 0x61667070u, &inPropertyData, &outPropertyData))
  {
    if (*v68 == 8000.0)
      v71 = 160;
    else
      v71 = 320;
    outPropertyData = v71;
  }
  else
  {
    v71 = outPropertyData;
  }
  v72 = v62 / v71 * v71;
  *((_DWORD *)this + 11) = v72;
  if (v62 == v62 - v72)
  {
    if (kAVVCScope)
    {
      v73 = *(id *)kAVVCScope;
      if (!v73)
      {
LABEL_174:
        v72 = *((_DWORD *)this + 11);
        goto LABEL_175;
      }
    }
    else
    {
      v73 = (id)MEMORY[0x1E0C81028];
      v77 = MEMORY[0x1E0C81028];
    }
    v78 = v73;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      v79 = *((_QWORD *)this + 33);
      LODWORD(v148.var0) = 136315906;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 674;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v62;
      LOWORD(v148.var5) = 2048;
      *(_QWORD *)((char *)&v148.var5 + 2) = v79;
      _os_log_impl(&dword_19B733000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d createAudioConverter: corrupted values??? framesPerBuffer = %u, mRecordBufferDuration = %f", (uint8_t *)&v148, 0x22u);
    }

    goto LABEL_174;
  }
LABEL_175:
  if (v72)
  {
    if (v72 >= 0xC81)
      *((_DWORD *)this + 11) = v72 >> 1;
    if (kAVVCScope)
    {
      v80 = *(id *)kAVVCScope;
      if (!v80)
        goto LABEL_185;
    }
    else
    {
      v80 = (id)MEMORY[0x1E0C81028];
      v81 = MEMORY[0x1E0C81028];
    }
    v82 = v80;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      v83 = *((_DWORD *)this + 11);
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 680;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v83;
      _os_log_impl(&dword_19B733000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: setting audio converter format to %u frames per packet", (uint8_t *)&v148, 0x18u);
    }

LABEL_185:
    v84 = AudioConverterSetProperty(*v25, 0x6F666D74u, 0x28u, (char *)this + 24);
    v86 = v84;
    if (v84)
    {
      if ((v84 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          v28 = *(id *)kAVVCScope;
          if (!v28)
            goto LABEL_307;
        }
        else
        {
          v28 = MEMORY[0x1E0C81028];
          v137 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          goto LABEL_320;
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 682;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v86;
        v136 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertyCurrentOutputFormat) "
               "err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          v28 = *(id *)kAVVCScope;
          if (!v28)
            goto LABEL_307;
        }
        else
        {
          v28 = MEMORY[0x1E0C81028];
          v135 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          goto LABEL_320;
        LODWORD(v148.var0) = 136315650;
        *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 682;
        HIWORD(v148.var3) = 1024;
        v148.var4 = v86;
        v136 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertyCurrentOutputFormat) err %d";
      }
      _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, v136, (uint8_t *)&v148, 0x18u);
LABEL_320:

      goto LABEL_307;
    }
    LODWORD(v85) = outPropertyData;
    v87 = (*((double *)this + 3) / (double)v85);
    *((_DWORD *)this + 64) = v87;
    if (kAVVCScope)
    {
      v88 = *(id *)kAVVCScope;
      if (!v88)
        goto LABEL_200;
    }
    else
    {
      v88 = (id)MEMORY[0x1E0C81028];
      v89 = MEMORY[0x1E0C81028];
    }
    v90 = v88;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v148.var0) = 136315650;
      *(_QWORD *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 686;
      HIWORD(v148.var3) = 1024;
      v148.var4 = v87;
      _os_log_impl(&dword_19B733000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: %u atomic blocks per second", (uint8_t *)&v148, 0x18u);
    }

LABEL_200:
    memset(&v148, 0, sizeof(v148));
    inPropertyData = 40;
    AudioConverterGetProperty(*v25, 0x61636F64u, &inPropertyData, &v148);
    if (v148.var0 != 0.0 && inDestinationFormat.mSampleRate != 0.0 && v148.var0 != inDestinationFormat.mSampleRate
      || v148.var1 && inDestinationFormat.mFormatID && v148.var1 != inDestinationFormat.mFormatID
      || v148.var3 && inDestinationFormat.mBytesPerPacket && v148.var3 != inDestinationFormat.mBytesPerPacket
      || v148.var4 && inDestinationFormat.mFramesPerPacket && v148.var4 != inDestinationFormat.mFramesPerPacket
      || v148.var5 && inDestinationFormat.mBytesPerFrame && v148.var5 != inDestinationFormat.mBytesPerFrame
      || v148.var6 && inDestinationFormat.mChannelsPerFrame && v148.var6 != inDestinationFormat.mChannelsPerFrame
      || v148.var7 && inDestinationFormat.mBitsPerChannel && v148.var7 != inDestinationFormat.mBitsPerChannel
      || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v148, &inDestinationFormat, (const AudioStreamBasicDescription *)1, 1))
    {
      if (kAVVCScope)
      {
        v91 = *(id *)kAVVCScope;
        if (!v91)
          goto LABEL_230;
      }
      else
      {
        v91 = (id)MEMORY[0x1E0C81028];
        v92 = MEMORY[0x1E0C81028];
      }
      v93 = v91;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v142 = 136315394;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        v144 = 1024;
        v145 = 694;
        _os_log_impl(&dword_19B733000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d kAudioConverterCurrentOutputStreamDescription ASBD's are different !! ", v142, 0x12u);
      }

    }
LABEL_230:
    if (*((_DWORD *)this + 8) == 1819304813
      || (v94 = *(_OWORD *)&v148.var3,
          *(_OWORD *)v68 = *(_OWORD *)&v148.var0,
          *(_OWORD *)((char *)this + 40) = v94,
          *((_QWORD *)this + 7) = *(_QWORD *)&v148.var7,
          *((_DWORD *)this + 8) != 1936745848))
    {
      *((_DWORD *)this + 64) = (*((double *)this + 3) / (double)v62);
    }
    var4 = v148.var4;
    v138 = 2100;
    outPropertyData = v148.var3;
    inPropertyData = 4;
    Property = AudioConverterGetProperty(*v25, 0x6D6F6273u, &inPropertyData, &v138);
    if (Property)
    {
      if (kAVVCScope)
      {
        v97 = *(id *)kAVVCScope;
        if (!v97)
          goto LABEL_248;
      }
      else
      {
        v97 = (id)MEMORY[0x1E0C81028];
        v99 = MEMORY[0x1E0C81028];
      }
      v100 = v97;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v142 = 136315650;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        v144 = 1024;
        v145 = 719;
        v146 = 1024;
        LODWORD(v147) = Property;
        v101 = "%25s:%-5d createAudioConverter: AudioConverterGetProperty(kAudioConverterPropertyMinimumOutputBufferSize)"
               " returned status %d";
LABEL_246:
        _os_log_impl(&dword_19B733000, v100, OS_LOG_TYPE_DEBUG, v101, v142, 0x18u);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        v98 = *(id *)kAVVCScope;
        if (!v98)
        {
LABEL_248:
          if (v62 == v62 % var4)
            v103 = 1;
          else
            v103 = v62 / var4 * var4;
          *((_DWORD *)this + 196) = v103 / v148.var4 + 1;
          if (kAVVCScope)
          {
            v104 = *(id *)kAVVCScope;
            if (!v104)
              goto LABEL_258;
          }
          else
          {
            v104 = (id)MEMORY[0x1E0C81028];
            v105 = MEMORY[0x1E0C81028];
          }
          v106 = v104;
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 727;
            v146 = 1024;
            LODWORD(v147) = v103;
            _os_log_impl(&dword_19B733000, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: final framesPerBuffer: %u", v142, 0x18u);
          }

LABEL_258:
          if (kAVVCScope)
          {
            v107 = *(id *)kAVVCScope;
            if (!v107)
              goto LABEL_265;
          }
          else
          {
            v107 = (id)MEMORY[0x1E0C81028];
            v108 = MEMORY[0x1E0C81028];
          }
          v109 = v107;
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
          {
            v110 = *((_DWORD *)this + 196);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 728;
            v146 = 1024;
            LODWORD(v147) = v110;
            _os_log_impl(&dword_19B733000, v109, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: mConvertPacketCount: %u", v142, 0x18u);
          }

LABEL_265:
          if (!outPropertyData)
          {
            inPropertyData = 4;
            v112 = AudioConverterGetProperty(*v25, 0x786F7073u, &inPropertyData, &outPropertyData);
            v113 = v112;
            if (v112)
            {
              v114 = v112 + 199999;
              CALog::LogObjIfEnabled(1, kAVVCScope);
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              v116 = v115;
              if (v114 >= 0x61A7F)
              {
                if (v115)
                {
                  v134 = v115;
                  if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v142 = 136315650;
                    v143 = "AVVCAudioQueueRecordingEngine.mm";
                    v144 = 1024;
                    v145 = 735;
                    v146 = 1024;
                    LODWORD(v147) = v113;
                    _os_log_impl(&dword_19B733000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize) err %{audio:4CC}d", v142, 0x18u);
                  }

                }
              }
              else if (v115)
              {
                v117 = v115;
                if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v142 = 136315650;
                  v143 = "AVVCAudioQueueRecordingEngine.mm";
                  v144 = 1024;
                  v145 = 735;
                  v146 = 1024;
                  LODWORD(v147) = v113;
                  _os_log_impl(&dword_19B733000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize) err %d", v142, 0x18u);
                }

              }
              goto LABEL_307;
            }
          }
          if (kAVVCScope)
          {
            v111 = *(id *)kAVVCScope;
            if (!v111)
              goto LABEL_280;
          }
          else
          {
            v111 = (id)MEMORY[0x1E0C81028];
            v118 = MEMORY[0x1E0C81028];
          }
          v119 = v111;
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 742;
            v146 = 1024;
            LODWORD(v147) = outPropertyData;
            _os_log_impl(&dword_19B733000, v119, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: outputSizePerPacket: %u", v142, 0x18u);
          }

LABEL_280:
          if ((v148.var2 & 0x20) != 0)
            v120 = v148.var6;
          else
            v120 = 1;
          v121 = outPropertyData * *((_DWORD *)this + 196) * v120;
          if (v138 > v121)
            v121 = v138;
          *((_DWORD *)this + 197) = v121;
          if (kAVVCScope)
          {
            v122 = *(id *)kAVVCScope;
            if (!v122)
              goto LABEL_292;
          }
          else
          {
            v122 = (id)MEMORY[0x1E0C81028];
            v123 = MEMORY[0x1E0C81028];
          }
          v124 = v122;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
          {
            v125 = *((_DWORD *)this + 197);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 753;
            v146 = 1024;
            LODWORD(v147) = v125;
            _os_log_impl(&dword_19B733000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: mConvertAudioCapacity %u bytes", v142, 0x18u);
          }

LABEL_292:
          if (kAVVCScope)
          {
            v126 = *(id *)kAVVCScope;
            if (!v126)
              goto LABEL_299;
          }
          else
          {
            v126 = (id)MEMORY[0x1E0C81028];
            v127 = MEMORY[0x1E0C81028];
          }
          v128 = v126;
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315394;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 755;
            _os_log_impl(&dword_19B733000, v128, OS_LOG_TYPE_DEBUG, "%25s:%-5d FINAL RECORD FORMAT:", v142, 0x12u);
          }

LABEL_299:
          if (kAVVCScope)
          {
            v129 = *(id *)kAVVCScope;
            if (!v129)
            {
LABEL_306:
              *a4 = v103;
              goto LABEL_307;
            }
          }
          else
          {
            v129 = (id)MEMORY[0x1E0C81028];
            v130 = MEMORY[0x1E0C81028];
          }
          v131 = v129;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            CAStreamBasicDescription::AsString(&v148, (char *)buf, 0x100uLL, v132, v133);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            v144 = 1024;
            v145 = 756;
            v146 = 2080;
            v147 = buf;
            _os_log_impl(&dword_19B733000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v142, 0x1Cu);
          }

          goto LABEL_306;
        }
      }
      else
      {
        v98 = (id)MEMORY[0x1E0C81028];
        v102 = MEMORY[0x1E0C81028];
      }
      v100 = v98;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v142 = 136315650;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        v144 = 1024;
        v145 = 716;
        v146 = 1024;
        LODWORD(v147) = v138;
        v101 = "%25s:%-5d createAudioConverter: encoded audio needs minimum of %u bytes per output buffer";
        goto LABEL_246;
      }
    }

    goto LABEL_248;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v148.var0) = 0;
    _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: mFramesPerPacket cannot be zero!", (uint8_t *)&v148, 2u);
  }
  __break(1u);
}

void sub_19B7C2C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CADeprecated::AudioRingBuffer::~AudioRingBuffer(CADeprecated::AudioRingBuffer *this)
{
  CADeprecated::AudioRingBuffer::~AudioRingBuffer(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3BE99A8;
  CADeprecated::AudioRingBuffer::Deallocate(this);
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x1A1AC5BD4](v2, 0x1080C404ACF7207);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x1A1AC5BD4](v3, 0x1080C404ACF7207);
}

OpaqueAudioConverter *CADeprecated::AudioRingBuffer::Deallocate(CADeprecated::AudioRingBuffer *this)
{
  void *v2;
  OpaqueAudioConverter *result;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 13) = 0;
  }
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  result = (OpaqueAudioConverter *)*((_QWORD *)this + 16);
  if (result)
  {
    result = (OpaqueAudioConverter *)AudioConverterDispose(result);
    *((_QWORD *)this + 16) = 0;
  }
  return result;
}

uint64_t CADeprecated::AudioRingBuffer::ConvertAndStore(uint64_t this, int a2, const AudioBufferList *a3, int a4, UInt32 inNumberPCMFrames)
{
  const AudioBufferList *v6;
  uint64_t mNumberBuffers;
  UInt32 v8;
  void **p_mData;
  void **v10;
  char *v11;
  AudioBufferList *v12;
  uint64_t v13;
  UInt32 v14;
  uint64_t *v15;
  void **v16;
  uint64_t v17;

  if (inNumberPCMFrames)
  {
    v6 = *(const AudioBufferList **)(this + 96);
    mNumberBuffers = v6->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      v8 = *(_DWORD *)(this + 72) * inNumberPCMFrames;
      p_mData = &v6->mBuffers[0].mData;
      v10 = &a3->mBuffers[0].mData;
      do
      {
        v11 = (char *)*v10;
        v10 += 2;
        *p_mData = &v11[a4];
        *((_DWORD *)p_mData - 1) = v8;
        p_mData += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    v12 = *(AudioBufferList **)(this + 88);
    v13 = v12->mNumberBuffers;
    if ((_DWORD)v13)
    {
      v14 = *(_DWORD *)(this + 32) * inNumberPCMFrames;
      v15 = *(uint64_t **)(this + 104);
      v16 = &v12->mBuffers[0].mData;
      do
      {
        v17 = *v15++;
        *v16 = (void *)(v17 + a2);
        *((_DWORD *)v16 - 1) = v14;
        v16 += 2;
        --v13;
      }
      while (v13);
    }
    return AudioConverterConvertComplexBuffer(*(AudioConverterRef *)(this + 128), inNumberPCMFrames, v6, v12);
  }
  return this;
}

uint64_t CADeprecated::AudioRingBuffer::CheckTimeBounds(CADeprecated::AudioRingBuffer *this, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *((_DWORD *)this + 226);
  v4 = (char *)this + 24 * (v3 & 0x1F);
  v5 = (uint64_t *)(v4 + 136);
  v6 = (uint64_t *)(v4 + 144);
  v7 = v4 + 152;
  v8 = 8;
  while (1)
  {
    v9 = *v5;
    v10 = *v6;
    if (*v7 == v3)
      break;
    if (!--v8)
      return 4;
  }
  if (v10 > a2)
    v12 = 1;
  else
    v12 = 2;
  if (v10 >= a3)
    v12 = 0;
  if (v9 >= a3)
    v13 = -2;
  else
    v13 = -1;
  if (v10 >= a3)
    v14 = v13;
  else
    v14 = 3;
  if (v9 > a2)
    return v14;
  else
    return v12;
}

void AVVCHACRecordingEngine::~AVVCHACRecordingEngine(AVVCHACRecordingEngine *this)
{
  AVVCHACRecordingEngine::~AVVCHACRecordingEngine(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  void *v2;
  _BYTE v3[8];

  *(_QWORD *)this = &off_1E3BE5248;
  TraceMethod::TraceMethod((TraceMethod *)v3, "~AVVCHACRecordingEngine");
  v2 = (void *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;

  *((_QWORD *)this + 76) = 0;
  TraceMethod::~TraceMethod((TraceMethod *)v3);

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

uint64_t AVVCHACRecordingEngine::asbdForClientSettings(AVVCHACRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::Initialize(AVVCHACRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCHACRecordingEngine::prepareRecording(AVVCHACRecordingEngine *this, NSDictionary *a2)
{
  void *v3;
  id v4;
  _BYTE v6[8];

  TraceMethod::TraceMethod((TraceMethod *)v6, "prepareRecoding");
  if (*((_QWORD *)this + 35) == 1684628340)
  {
    *((_BYTE *)this + 633) = 1;
    +[AVVoiceTriggerClient sharedInstance](AVVoiceTriggerClient, "sharedInstance");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (id)objc_msgSend(v3, "activateSecureSession:", 1);

  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, 0, "prepareRecording");
  AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  TraceMethod::~TraceMethod((TraceMethod *)v6);
  return 0;
}

void sub_19B7C306C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::startRecording(AVVCHACRecordingEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t started;
  uint64_t v10;
  _BYTE v12[8];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v12, "startRecording");
  v2 = *((_QWORD *)this + 30);
  v3 = mach_absolute_time();
  v4 = v2;
  if (!v2)
    v4 = mach_absolute_time();
  *((_QWORD *)this + 78) = v4;
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "past";
    if (v2 > v3)
      v7 = "future";
    v14 = "AVVCHACRecordingEngine.mm";
    v15 = 1024;
    v16 = 127;
    v8 = *((_QWORD *)this + 78);
    *(_DWORD *)buf = 136315906;
    if (!v2)
      v7 = "immediate";
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = v8;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC starting HAC record (%s) hosttime (%lld) ", buf, 0x26u);
  }

LABEL_14:
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording : StartIsolatedAudio*", 0);
  if (v2)
    started = StartIsolatedAudioAtTime();
  else
    started = StartIsolatedAudio();
  v10 = started;
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  *((_QWORD *)this + 30) = 0;
  if ((_DWORD)v10)
  {
    AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v10, "startRecording");
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
  }
  else
  {
    AVVCRecordingEngine::startedRecording((AVVCRecordingEngine *)this);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v12);
  return v10;
}

void sub_19B7C325C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t AVVCHACRecordingEngine::stopRecording(AVVCRecordingEngine *this)
{
  void *v2;
  id v3;
  uint64_t v5;
  _BYTE v6[160];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)&v5, "stopRecording");
  ElapsedTime::ElapsedTime((ElapsedTime *)v6, "stopRecording", "stopRecording : StopIsolatedAudio", 0);
  StopIsolatedAudio();
  ElapsedTime::~ElapsedTime((ElapsedTime *)v6);
  AVVCRecordingEngine::doneRecording(this);
  if (*((_BYTE *)this + 633))
  {
    *((_BYTE *)this + 633) = 0;
    +[AVVoiceTriggerClient sharedInstance](AVVoiceTriggerClient, "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (id)objc_msgSend(v2, "activateSecureSession:", 0);

  }
  *((_BYTE *)this + 632) = 1;
  TraceMethod::~TraceMethod((TraceMethod *)&v5);
  return 0;
}

void sub_19B7C3364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  TraceMethod::~TraceMethod((TraceMethod *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::destroyRecordEngine(AVVCHACRecordingEngine *this)
{
  uint64_t v2;
  _BYTE v4[8];

  TraceMethod::TraceMethod((TraceMethod *)v4, "destroyRecordingEngine");
  v2 = (*(uint64_t (**)(AVVCHACRecordingEngine *))(*(_QWORD *)this + 104))(this);
  TraceMethod::~TraceMethod((TraceMethod *)v4);
  return v2;
}

void sub_19B7C33F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

__n128 AVVCHACRecordingEngine::getRecordQueueFormat@<Q0>(AVVCHACRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 24);
  v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 7);
  return result;
}

uint64_t AVVCHACRecordingEngine::enableSiriListeningMode(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::enableMetering(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::updateMeterLevels(AVVCHACRecordingEngine *this)
{
  return 0;
}

void AVVCHACRecordingEngine::updateStreamStoppedState(AVVCHACRecordingEngine *this)
{
  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
}

uint64_t AVVCHACRecordingEngine::setupAudioCaptures(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::logAudioCaptures()
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::disposeAudioCaptures(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::setSessionIsRecordingFlag(AVVCHACRecordingEngine *this)
{
  _BYTE v2[8];

  TraceMethod::TraceMethod((TraceMethod *)v2, "setSessionIsRecordingFlag");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCHACRecordingEngine::getEngineType(AVVCHACRecordingEngine *this)
{
  return 4;
}

uint64_t AVVCHACRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  AVVCRouteManager::getRecordRoute(*(_QWORD *)(a1 + 376), a2);
  return 0;
}

void AVVCHACRecordingEngine::Impl::AVVCHACRecordingEngineAudioAvailabilityCallback(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  id v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  id v33;
  id v34;
  NSObject *v35;
  unint64_t v36;
  const char *v37;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE buf[40];
  std::__shared_weak_count *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 632))
  {
    LODWORD(v41) = 4108;
    BYTE4(v41) = 0;
    v42 = 0u;
    v43 = 0u;
    kdebug_trace();
    v6 = mach_absolute_time();
    v7 = *(_QWORD *)(a3 + 624);
    v8 = __udivti3();
    if ((unint64_t)a1 >= v7)
      v9 = v8;
    else
      v9 = -v8;
    v10 = __udivti3();
    if (v6 >= v7)
      v11 = v10;
    else
      v11 = -v10;
    if (kAVVCScope)
    {
      v12 = *(id *)kAVVCScope;
      if (!v12)
      {
LABEL_22:
        TraceWrapper::~TraceWrapper((TraceWrapper *)&v41);
        goto LABEL_27;
      }
    }
    else
    {
      v12 = (id)MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    v15 = v12;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v39, *(_QWORD *)(a3 + 8), *(std::__shared_weak_count **)(a3 + 16));
      *(_DWORD *)buf = 136317186;
      v16 = *(_QWORD *)(a3 + 624);
      *(_QWORD *)&buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 210;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v39;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v6;
      *(_WORD *)&buf[38] = 2048;
      v45 = a1;
      v46 = 2048;
      v47 = a2;
      v48 = 2048;
      v49 = v16;
      v50 = 2048;
      v51 = (double)v11 / 1000000.0;
      v52 = 2048;
      v53 = (double)v9 / 1000000.0;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAC (%p) - First callback -  Now:(ht: %lld), BuffStartTime:(ht: %lld st: %lld), SiriRequestedStartTime:(ht: %lld). Now-SiriRequestedStartTime: %0.6f ms, BuffStartTime-SiriRequestedStartTime: %0.6f ms.", buf, 0x58u);
      v17 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }

    goto LABEL_22;
  }
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
      goto LABEL_27;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v20 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AVVCHACRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 213;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a1;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a2;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d timestamp received (h: %lld, s: %lld)", buf, 0x26u);
  }

LABEL_27:
  v21 = *(_QWORD *)(a3 + 224);
  if ((v21 == 6 || v21 <= 3) && !*(_BYTE *)(a3 + 253))
  {
    if (kAVVCScope)
    {
      v33 = *(id *)kAVVCScope;
      if (!v33)
      {
LABEL_67:
        *(_BYTE *)(a3 + 632) = 0;
        return;
      }
    }
    else
    {
      v33 = (id)MEMORY[0x1E0C81028];
      v34 = MEMORY[0x1E0C81028];
    }
    v35 = v33;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(_QWORD *)(a3 + 224);
      if (v36 > 6)
        v37 = "ILLEGAL";
      else
        v37 = off_1E3BEC7D0[v36];
      v38 = *(unsigned __int8 *)(a3 + 253);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 218;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v37;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v38;
      _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d record internally stopped, so throwing away buffer. StreamState(%s). RecordCancelled(%d)", buf, 0x22u);
    }

    goto LABEL_67;
  }
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "handleInput", "AVVCHACRecordingEngine : RequestIsolatedAudio", *(_BYTE *)(a3 + 632) == 0);
  if (*(_BYTE *)(a3 + 632))
    *(_BYTE *)(a3 + 632) = 0;
  v22 = RequestIsolatedAudio();
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (!v22)
  {
    objc_msgSend(*(id *)(a3 + 616), "setTimeStamp:", a1);
    AVVCRecordingEngine::avvcAudioBufferReceived((AVVCRecordingEngine *)a3, *(AVVCAudioBuffer **)(a3 + 616), 1, 1);
    return;
  }
  if (!kAVVCScope)
  {
    v23 = MEMORY[0x1E0C81028];
    v24 = MEMORY[0x1E0C81028];
    goto LABEL_38;
  }
  v23 = *(id *)kAVVCScope;
  if (v23)
  {
LABEL_38:
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 235;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v22;
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCHACRecordingEngine::handleInput request error: %d", buf, 0x18u);
    }

  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)a3, v22, "handleInput");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v41, *(_QWORD *)(a3 + 8), *(std::__shared_weak_count **)(a3 + 16));
  v25 = v41;
  v26 = (std::__shared_weak_count *)v42;
  if ((_QWORD)v42)
  {
    v27 = (unint64_t *)(v42 + 16);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *(_QWORD *)&buf[16] = ___ZN22AVVCHACRecordingEngine11handleInputE18CoreAudioTimestamp_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    *(_QWORD *)&buf[32] = v25;
    v45 = v26;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
  }
  else
  {
    *(_QWORD *)&buf[16] = ___ZN22AVVCHACRecordingEngine11handleInputE18CoreAudioTimestamp_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_48_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    *(_QWORD *)&buf[32] = v41;
    v45 = 0;
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3321888768;
  (*(void (**)(uint64_t, _BYTE *, const char *))(*(_QWORD *)v25 + 368))(v25, buf, "handleInput");
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  v30 = (std::__shared_weak_count *)v42;
  if ((_QWORD)v42)
  {
    v31 = (unint64_t *)(v42 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19B7C3AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  void *v22;

  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);
  _Unwind_Resume(a1);
}

void AVVCHACRecordingEngine::Impl::AVVCHACRecordingEngineAudioLapseCallback(AVVCHACRecordingEngine::Impl *this, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[5];
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = (int)this;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v16, *(_QWORD *)(a2 + 8), *(std::__shared_weak_count **)(a2 + 16));
  v4 = v16;
  v5 = v17;
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3321888768;
  v13[2] = ___ZN22AVVCHACRecordingEngine16handleAudioLapseEi_block_invoke;
  v13[3] = &__block_descriptor_52_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  v15 = v3;
  v13[4] = v4;
  v14 = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v4 + 368))(v4, v13, "handleAudioLapse");
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19B7C3C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22AVVCHACRecordingEngine16handleAudioLapseEi_block_invoke(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AVVCRecordingEngine *v7;
  NSObject *v8;
  id v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315650;
    v13 = "AVVCHACRecordingEngine.mm";
    v14 = 1024;
    v15 = 260;
    v16 = 1024;
    LODWORD(v17) = v4;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCHACRecordingEngine::handleAudioLapse: status(%d)", buf, 0x18u);
  }

LABEL_8:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_13;
  }
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6 || (v7 = *(AVVCRecordingEngine **)(a1 + 32)) == 0)
  {
LABEL_13:
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
        goto LABEL_20;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "AVVCHACRecordingEngine.mm";
      v14 = 1024;
      v15 = 261;
      v16 = 2048;
      v17 = 0;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", buf, 0x1Cu);
    }

LABEL_20:
    if (!v6)
      return;
    goto LABEL_21;
  }
  AVVCRecordingEngine::setRecordErrorStatus(v7, *(_DWORD *)(a1 + 48), "handleAudioLapse_block_invoke");
  (*(void (**)(AVVCRecordingEngine *))(*(_QWORD *)v7 + 104))(v7);
LABEL_21:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19B7C3EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN22AVVCHACRecordingEngine11handleInputE18CoreAudioTimestamp_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 32)) == 0)
  {
LABEL_6:
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "AVVCHACRecordingEngine.mm";
      v11 = 1024;
      v12 = 241;
      v13 = 2048;
      v14 = 0;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", buf, 0x1Cu);
    }

LABEL_13:
    if (!v3)
      return;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
LABEL_14:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B7C4070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::AVVCHACRecordingEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  AVVCAudioBuffer *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  _BYTE v13[160];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = AVVCRecordingEngine::AVVCRecordingEngine(a1, a2);
  *(_QWORD *)v3 = &off_1E3BE5248;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_QWORD *)(v3 + 616) = 0;
  *(_WORD *)(v3 + 632) = 1;
  TraceMethod::TraceMethod((TraceMethod *)&v12, "AVVCHACRecordingEngine");
  AVVCRecordingEngine::setStreamState(a1, 1);
  v4 = operator new();
  *(_DWORD *)v4 = 2048;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 98) = 0;
  *(_QWORD *)(v4 + 8) = operator new[]();
  *(_QWORD *)(a1 + 608) = v4;
  *(_BYTE *)(v4 + 99) = *(_BYTE *)(a1 + 328);
  *(_QWORD *)(a1 + 24) = 0x40CF400000000000;
  *(_OWORD *)(a1 + 32) = xmmword_19B85A2B0;
  *(_OWORD *)(a1 + 48) = xmmword_19B85A2C0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 56);
  v5 = -[AVVCAudioBuffer initWithAudioQueueBuffer:channels:timeStamp:]([AVVCAudioBuffer alloc], "initWithAudioQueueBuffer:channels:timeStamp:", *(_QWORD *)(a1 + 608), 1, 0);
  v6 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = v5;

  v7 = *(_QWORD *)(a1 + 376);
  v8 = (id)*MEMORY[0x1E0CFF118];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v9;

  ElapsedTime::ElapsedTime((ElapsedTime *)v13, "AVVCHACRecordingEngine", "AVVCHACRecordingEngine : RegisterForIsolatedAudio", 0);
  RegisterForIsolatedAudio();
  ElapsedTime::~ElapsedTime((ElapsedTime *)v13);
  ElapsedTime::ElapsedTime((ElapsedTime *)v13, "AVVCHACRecordingEngine", "AVVCHACRecordingEngine : SetAudioLapseHandler", 0);
  SetAudioLapseHandler();
  ElapsedTime::~ElapsedTime((ElapsedTime *)v13);
  TraceMethod::~TraceMethod((TraceMethod *)&v12);
  return a1;
}

void sub_19B7C42AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a10);
  TraceMethod::~TraceMethod((TraceMethod *)&a9);

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)v10);
  _Unwind_Resume(a1);
}

void sub_19B7C4424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B7C45E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void ___Z36_AVLoadSpeechSynthesisImplementationv_block_invoke()
{
  void *v0;
  int v1;
  id v2;
  id v3;
  uint8_t buf[4];
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/TextToSpeech.framework"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v0, "isLoaded") & 1) == 0)
  {
    v3 = 0;
    v1 = objc_msgSend(v0, "loadAndReturnError:", &v3);
    v2 = v3;
    if (v1)
      objc_msgSend((id)objc_msgSend(v0, "principalClass"), "initialize");
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v5 = v2;
        _os_log_fault_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Could not load AXSpeechImplementation: %@", buf, 0xCu);
      }

    }
  }

}

void sub_19B7C4784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7C49A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B7C4C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19B7C4D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B7C5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B7C533C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19B7C5434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::donePlaying(uint64_t this)
{
  uint64_t (*v1)(_QWORD, uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(this + 314))
  {
    *(_OWORD *)(this + 320) = 0u;
    *(_OWORD *)(this + 336) = 0u;
  }
  if (*(_DWORD *)(this + 308))
  {
    *(_DWORD *)(this + 308) = 0;
    *(_BYTE *)(this + 305) = 0;
    if (*(_QWORD *)(this + 488))
    {
      v1 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(this + 496);
      if (v1)
        return v1(*(_QWORD *)(this + 488), 1685024357, 1, this + 440);
    }
  }
  return this;
}

OpaqueAudioQueue *AVAudioPlayerCpp::disposeQueue(AVAudioPlayerCpp *this, int a2)
{
  OpaqueAudioQueue *result;
  OpaqueAudioQueue *v5;

  result = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
  if (result)
  {
    AudioQueueRemovePropertyListener(result, 0x6171726Eu, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    AudioQueueRemovePropertyListener(*((AudioQueueRef *)this + 22), 0x71637665u, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    *((_BYTE *)this + 312) = 1;
    __dmb(0xBu);
    v5 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    __dmb(0xBu);
    *((_BYTE *)this + 315) = 0;
    *((_WORD *)this + 152) = 0;
    *((_DWORD *)this + 77) = 0;
    *((_BYTE *)this + 307) = 0;
    *((_BYTE *)this + 312) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 42) = 0;
    __dmb(0xBu);
    pthread_mutex_unlock(&avap_mutex);
    if (a2)
      AudioQueueStop(v5, 1u);
    AudioQueueDispose(v5, 0);
    return (OpaqueAudioQueue *)pthread_mutex_lock(&avap_mutex);
  }
  return result;
}

void sub_19B7C5634(_Unwind_Exception *a1)
{
  pthread_mutex_lock(&avap_mutex);
  _Unwind_Resume(a1);
}

void AVAudioPlayerCpp::freeChannelAssignments(AVAudioPlayerCpp *this)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  const void *v6;

  v2 = (void *)*((_QWORD *)this + 66);
  if (v2)
  {
    v3 = *((unsigned int *)this + 130);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(const void **)(*((_QWORD *)this + 66) + v4);
        if (v6)
        {
          CFRelease(v6);
          v3 = *((unsigned int *)this + 130);
        }
        v4 += 16;
      }
      v2 = (void *)*((_QWORD *)this + 66);
    }
    free(v2);
    *((_QWORD *)this + 66) = 0;
  }
}

uint64_t AudioPlayerAQPropertyListenerProc(uint64_t a1, OpaqueAudioQueue *a2, int a3)
{
  UInt32 ioDataSize;
  int outData;

  pthread_mutex_lock(&avap_mutex);
  if (a3 == 1902343781)
  {
    if (*(_QWORD *)(a1 + 488))
    {
      if (*(_QWORD *)(a1 + 496))
      {
        ioDataSize = 4;
        outData = 0;
        if (!AudioQueueGetProperty(a2, 0x71637665u, &outData, &ioDataSize))
          (*(void (**)(_QWORD, uint64_t, uint64_t, int *))(a1 + 496))(*(_QWORD *)(a1 + 488), 1684370034, 4, &outData);
      }
    }
  }
  else if (a3 == 1634824814 && !*(_BYTE *)(a1 + 443))
  {
    ioDataSize = 4;
    outData = 0;
    AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 176), 0x6171726Eu, &outData, &ioDataSize);
    if (!outData && !*(_BYTE *)(a1 + 460))
      AVAudioPlayerCpp::donePlaying(a1);
  }
  return pthread_mutex_unlock(&avap_mutex);
}

void sub_19B7C57B8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::DoAction(AudioQueueRef *this, int a2, uint64_t a3, double *a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  OpaqueAudioQueue *v8;
  OpaqueAudioQueue *v9;
  AudioQueueRef v10;
  size_t v11;
  AudioTimeStamp v13;

  v5 = 560030580;
  if (a2 <= 1886545263)
  {
    if (a2 != 1885435251)
    {
      if (a2 == 1886151028)
      {
        if (a3 == 8)
        {
          v6 = *a4;
          v13.mSampleTime = 0.0;
          memset(&v13.mRateScalar, 0, 48);
          v13.mHostTime = (unint64_t)(v6 * 24000000.0);
          v13.mFlags = 2;
          pthread_mutex_lock(&avap_mutex);
          v5 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)this, &v13);
          pthread_mutex_unlock(&avap_mutex);
          return v5;
        }
      }
      else
      {
        if (a2 != 1886151033)
          return v5;
        if (!a3)
        {
          pthread_mutex_lock(&avap_mutex);
          if (*((_BYTE *)this + 460))
          {
            AudioSessionSetActive_Priv();
            AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
            *((_WORD *)this + 230) = 0;
          }
          v5 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)this, 0);
          pthread_mutex_unlock(&avap_mutex);
          return v5;
        }
      }
      return 561211770;
    }
    if (a3)
      return 561211770;
    pthread_mutex_lock(&avap_mutex);
    if (*((_BYTE *)this + 307))
    {
      AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)this, 1);
      AudioQueuePause(this[22]);
      *((_DWORD *)this + 77) = 0;
      *((_BYTE *)this + 307) = 0;
    }
    pthread_mutex_unlock(&avap_mutex);
    return 0;
  }
  if (a2 == 1970302324)
  {
    if (a3)
      return 561211770;
    if (*((_BYTE *)this + 313))
      return 0;
    pthread_mutex_lock(&avap_mutex);
    v7 = *((unsigned int *)this + 15);
    v8 = this[48];
    if (!v8)
    {
      v8 = (OpaqueAudioQueue *)malloc_type_calloc(*((unsigned int *)this + 15), 8uLL, 0x100004000313F17uLL);
      this[48] = v8;
    }
    v9 = this[22];
    if (v9 && *((_DWORD *)this + 94))
    {
      LODWORD(v13.mSampleTime) = 8 * v7;
      if (!AudioQueueGetProperty(v9, 0x61716D64u, v8, (UInt32 *)&v13) || !(_DWORD)v7)
        goto LABEL_39;
      v10 = this[48];
      v11 = 8 * v7;
    }
    else
    {
      if (!(_DWORD)v7)
      {
LABEL_39:
        pthread_mutex_unlock(&avap_mutex);
        return 0;
      }
      v11 = 8 * v7;
      v10 = v8;
    }
    memset_pattern16(v10, &unk_19B85A350, v11);
    goto LABEL_39;
  }
  if (a2 == 1937010544)
  {
    if (a3)
      return 561211770;
    pthread_mutex_lock(&avap_mutex);
    if (*((_BYTE *)this + 305))
    {
      AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)this, 1);
      this[43] = this[41];
    }
    AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
    pthread_mutex_unlock(&avap_mutex);
    return 0;
  }
  if (a2 != 1886545264)
    return v5;
  if (a3)
    return 561211770;
  pthread_mutex_lock(&avap_mutex);
  if (*((_BYTE *)this + 460))
  {
    AudioSessionSetActive_Priv();
    AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
    *((_WORD *)this + 230) = 0;
  }
  v5 = AVAudioPlayerCpp::prepareToPlayQueue((AVAudioPlayerCpp *)this);
  pthread_mutex_unlock(&avap_mutex);
  return v5;
}

void sub_19B7C5AD4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

double AVAudioPlayerCpp::getQueueTime(AVAudioPlayerCpp *this, int a2)
{
  OpaqueAudioQueue *v3;
  double mSampleTime;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  AudioTimeStamp v12;

  v3 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
  if (v3)
  {
    if (*((_BYTE *)this + 307))
    {
      if (!AudioQueueGetCurrentTime(v3, 0, &v12, 0))
      {
        mSampleTime = v12.mSampleTime;
        *((_QWORD *)this + 40) = *(_QWORD *)&v12.mSampleTime;
        if (a2)
        {
          v6 = *((double *)this + 43);
          v7 = fmax(mSampleTime - *((double *)this + 42) + v6, 0.0);
          *((double *)this + 41) = v7;
          if (*((_BYTE *)this + 463))
          {
            v8 = (double)*((uint64_t *)this + 58);
            *((long double *)this + 43) = fmod(fmax(v6, 0.0), v8);
            if (*((_DWORD *)this + 74) || v6 >= v8)
            {
              v10 = fmod(v7, v8);
            }
            else
            {
              if (v7 <= v8)
                v9 = v7;
              else
                v9 = v8;
              v10 = fmax(v9, 0.0);
            }
            *((double *)this + 41) = v10;
          }
        }
      }
    }
  }
  return *((double *)this + 40);
}

uint64_t AVAudioPlayerCpp::playQueue(AVAudioPlayerCpp *this, const AudioTimeStamp *a2)
{
  uint64_t v2;
  double v5;
  double QueueTime;
  double v7;
  AudioQueueParameterValue v8;
  AudioQueueParameterValue v9;
  AudioQueueParameterValue v10;
  unsigned int v11;
  int inData;

  if (*((_BYTE *)this + 307))
    return 0;
  if (*((_BYTE *)this + 305))
  {
    v5 = *((double *)this + 42);
    QueueTime = AVAudioPlayerCpp::getQueueTime(this, 0);
    *((double *)this + 42) = QueueTime;
    if (!*((_BYTE *)this + 306))
    {
      v7 = QueueTime - v5 + *((double *)this + 43);
      *((double *)this + 43) = v7;
      *((double *)this + 41) = v7;
    }
  }
  v2 = AVAudioPlayerCpp::prepareToPlayQueue(this);
  if (!(_DWORD)v2)
  {
    *((_BYTE *)this + 306) = 0;
    v8 = *((double *)this + 26);
    AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 1u, v8);
    v9 = *((double *)this + 29);
    AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 0xDu, v9);
    AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x715F7470u, (char *)this + 240, 4u);
    if (*((_DWORD *)this + 60))
    {
      inData = 1953064047;
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x71747061u, &inData, 4u);
      v10 = *((double *)this + 28);
      AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 2u, v10);
    }
    *((_BYTE *)this + 305) = 1;
    *((_DWORD *)this + 77) = 1;
    *((_BYTE *)this + 307) = 1;
    v11 = atomic_load((unsigned int *)this + 106);
    pthread_mutex_unlock(&avap_mutex);
    v2 = AudioQueueStart(*((AudioQueueRef *)this + 22), a2);
    pthread_mutex_lock(&avap_mutex);
    if ((_DWORD)v2)
    {
      *((_BYTE *)this + 305) = 0;
      *((_DWORD *)this + 77) = 0;
      *((_BYTE *)this + 307) = 0;
      return v2;
    }
    if (!v11)
      AVAudioPlayerCpp::flushQueue((uint64_t)this);
    return 0;
  }
  return v2;
}

void sub_19B7C5DE0(_Unwind_Exception *a1)
{
  pthread_mutex_lock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::prepareToPlayQueue(AVAudioPlayerCpp *this)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  AudioQueueBufferRef *v10;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  OpaqueAudioQueue *v21;
  UInt32 outNumberOfFramesPrepared;
  UInt32 ioDataSize[2];

  v2 = AVAudioPlayerCpp::allocAudioQueue(this);
  if (!(_DWORD)v2)
  {
    *((_QWORD *)this + 41) = *((_QWORD *)this + 43);
    if (*((_BYTE *)this + 304))
    {
      return 0;
    }
    else
    {
      if (*((_DWORD *)this + 10) != 1819304813)
      {
        ioDataSize[0] = 4;
        ioDataSize[1] = 0;
        AudioQueueGetProperty(*((AudioQueueRef *)this + 22), 0x6171726Eu, &ioDataSize[1], ioDataSize);
        if (!ioDataSize[1])
        {
          while (1)
          {
            v12 = *((_DWORD *)this + 10);
            *(_QWORD *)ioDataSize = 0;
            FindCodecs(v12, &ioDataSize[1], ioDataSize, v4, v5);
            if (!ioDataSize[1])
            {
LABEL_35:
              v21 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
              ioDataSize[1] = 1;
              AudioQueueSetProperty(v21, 0x61716370u, &ioDataSize[1], 4u);
              goto LABEL_7;
            }
            outNumberOfFramesPrepared = 0;
            if (!AudioQueuePrime(*((AudioQueueRef *)this + 22), 0, &outNumberOfFramesPrepared))
              break;
            v15 = *((_DWORD *)this + 10);
            *(_QWORD *)ioDataSize = 0;
            FindCodecs(v15, &ioDataSize[1], ioDataSize, v13, v14);
            if (!ioDataSize[1] || ioDataSize[0])
              goto LABEL_35;
            if (!*((_QWORD *)this + 18) || *((_DWORD *)this + 38) >= *((_DWORD *)this + 34))
              return 1718449215;
            AVAudioPlayerCpp::disposeQueue(this, 0);
            v16 = *((_QWORD *)this + 18);
            v17 = *((_DWORD *)this + 38) + 1;
            *((_DWORD *)this + 38) = v17;
            v18 = (__int128 *)(v16 + 48 * v17);
            v20 = *v18;
            v19 = v18[1];
            *((_QWORD *)this + 8) = *((_QWORD *)v18 + 4);
            *((_OWORD *)this + 2) = v20;
            *((_OWORD *)this + 3) = v19;
            AVAudioPlayerCpp::allocAudioQueue(this);
          }
          pthread_mutex_unlock(&avap_mutex);
          AudioQueueReset(*((AudioQueueRef *)this + 22));
          pthread_mutex_lock(&avap_mutex);
        }
      }
LABEL_7:
      if (!*((_BYTE *)this + 305) && !*((_BYTE *)this + 444))
        AVAudioPlayerCpp::setPlaybackFramePos(this, vcvtmd_s64_f64(*((double *)this + 41)), 1);
      if (!*((_BYTE *)this + 460))
        *((_DWORD *)this + 75) = 0;
      *((_QWORD *)this + 52) = 0;
      *((_DWORD *)this + 64) = 0;
      *((_WORD *)this + 157) = 256;
      v6 = (unsigned int *)((char *)this + 424);
      atomic_store(0, (unsigned int *)this + 106);
      v7 = *((_QWORD *)this + 2);
      *((_WORD *)this + 220) = 1;
      *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
      *((_BYTE *)this + 442) = 1;
      if (v7)
        AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x716C646Eu, (char *)this + 16, 8u);
      v8 = 0;
      while (1)
      {
        do
          v9 = __ldaxr(v6);
        while (__stlxr(v9 + 1, v6));
        v10 = (AudioQueueBufferRef *)((char *)this + 8 * v8);
        AVAudioPlayerCpp::AQOutputCallbackCore((uint64_t)this, *((AudioQueueRef *)this + 22), v10[49]);
        if (*((_DWORD *)this + 64))
        {
          *((_BYTE *)this + 442) = 0;
          AVAudioPlayerCpp::disposeQueue(this, 0);
          return *((unsigned int *)this + 64);
        }
        if (!atomic_load(v6))
        {
          *(_WORD *)((char *)this + 441) = 0;
          AVAudioPlayerCpp::disposeQueue(this, 0);
          return 2003334207;
        }
        if (*((_BYTE *)this + 314))
          break;
        if (++v8 == 3)
          goto LABEL_24;
      }
      *((_QWORD *)this + 56) = v10[49];
LABEL_24:
      *((_BYTE *)this + 442) = 0;
      ioDataSize[1] = 1024;
      v2 = AudioQueuePrime(*((AudioQueueRef *)this + 22), 0, &ioDataSize[1]);
      if ((_DWORD)v2)
      {
        AVAudioPlayerCpp::disposeQueue(this, 0);
      }
      else
      {
        *((_BYTE *)this + 304) = 1;
        if (*((_BYTE *)this + 305))
          *((double *)this + 42) = AVAudioPlayerCpp::getQueueTime(this, 0);
      }
    }
  }
  return v2;
}

void sub_19B7C6100(_Unwind_Exception *a1)
{
  pthread_mutex_lock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::flushQueue(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 312))
  {
    v1 = this;
    AudioQueueFlush(*(AudioQueueRef *)(this + 176));
    *(_BYTE *)(v1 + 312) = 1;
    __dmb(0xBu);
    pthread_mutex_unlock(&avap_mutex);
    AudioQueueStop(*(AudioQueueRef *)(v1 + 176), 0);
    return pthread_mutex_lock(&avap_mutex);
  }
  return this;
}

void sub_19B7C617C(_Unwind_Exception *a1)
{
  pthread_mutex_lock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::allocAudioQueue(AVAudioPlayerCpp *this)
{
  AudioQueueRef *v1;
  uint64_t v2;
  void *v4;
  double v5;
  int v6;
  unsigned int v7;
  double v8;
  UInt32 v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD *v13;
  uint64_t i;
  OpaqueAudioQueue *v15;
  uint64_t Buffer;
  void (*v17)(void);
  const void *v18;
  OpaqueAudioQueue *v19;
  int inData;
  UInt32 ioDataSize;

  v1 = (AudioQueueRef *)((char *)this + 176);
  if (!*((_QWORD *)this + 22))
  {
    pthread_once(&gHaveInitializedAVAudio, (void (*)(void))initAVAudio);
    AudioSessionSetActive_Priv();
    pthread_mutex_unlock(&avap_mutex);
    v2 = AudioQueueNewOutputWithAudioSession();
    pthread_mutex_lock(&avap_mutex);
    if ((_DWORD)v2)
      return v2;
    if (*((_QWORD *)this + 46) && *v1)
      AudioQueueSetProperty(*v1, 0x61716364u, (char *)this + 368, 8u);
    v4 = (void *)*((_QWORD *)this + 64);
    if (v4)
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x6171636Cu, (const void *)objc_msgSend(*((id *)this + 64), "layout"), objc_msgSend(v4, "layoutSize"));
    AVAudioPlayerCpp::makeChannelAssignments(this);
    v5 = *((double *)this + 4);
    v7 = *((_DWORD *)this + 13);
    v6 = *((_DWORD *)this + 14);
    if (v7 <= 1)
      v7 = 1;
    v8 = v5 / (double)v7;
    *((_DWORD *)this + 120) = vcvtpd_u64_f64(((double)*((int *)this + 68) / v5 + 0.025) * v8);
    if (v6)
    {
      v9 = v6 * vcvtmd_u64_f64(v5 * 0.333 + 0.5);
      *((_DWORD *)this + 119) = v6 * v7;
      goto LABEL_22;
    }
    v10 = *((_DWORD *)this + 12);
    if (v10)
    {
      *((_DWORD *)this + 119) = v10;
    }
    else
    {
      ioDataSize = 4;
      if (AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706B7562u, &ioDataSize, (char *)this + 476))
      {
        v9 = 0x8000;
        goto LABEL_22;
      }
      v10 = *((_DWORD *)this + 119);
    }
    v11 = vcvtmd_u64_f64(v8 * 0.333 * (double)v10 + 0.5);
    if (v10 <= v11)
      v10 = v11;
    if (v10 <= 0x400)
      v9 = 1024;
    else
      v9 = v10;
LABEL_22:
    v12 = *((_DWORD *)this + 12);
    v13 = (_QWORD *)((char *)this + 392);
    for (i = 392; i != 416; i += 8)
    {
      v15 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
      if (v12)
        Buffer = AudioQueueAllocateBuffer(v15, v9, (AudioQueueBufferRef *)((char *)this + i));
      else
        Buffer = AudioQueueAllocateBufferWithPacketDescriptions(v15, v9, 0x200u, (AudioQueueBufferRef *)((char *)this + i));
      v2 = Buffer;
      if ((_DWORD)Buffer)
      {
        v19 = *v1;
        *v1 = 0;
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        __dmb(0xBu);
        pthread_mutex_unlock(&avap_mutex);
        AudioQueueDispose(v19, 1u);
        pthread_mutex_lock(&avap_mutex);
        return v2;
      }
    }
    AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 22), 0x6171726Eu, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 22), 0x71637665u, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    if (*((_DWORD *)this + 94))
    {
      inData = 1;
      AudioQueueSetProperty(*v1, 0x61716D65u, &inData, 4u);
    }
    if (*((_QWORD *)this + 61))
    {
      v17 = (void (*)(void))*((_QWORD *)this + 62);
      if (v17)
        v17();
    }
    v18 = (const void *)*((_QWORD *)this + 16);
    if (v18)
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x61716D63u, v18, *((_DWORD *)this + 30));
    if (*((_QWORD *)this + 67))
      AVAudioPlayerCpp::applySTSLabelToQueueIfPossible(this);
  }
  return 0;
}

void sub_19B7C64C4(_Unwind_Exception *a1)
{
  pthread_mutex_lock(&avap_mutex);
  _Unwind_Resume(a1);
}

double AVAudioPlayerCpp::setPlaybackFramePos(AVAudioPlayerCpp *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OSStatus Property;
  uint64_t v9;
  double result;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  uint64_t v13;

  v3 = a2;
  if (a3 && *((_BYTE *)this + 463) && *((_QWORD *)this + 58) - a2 < *((unsigned int *)this + 13))
    v3 = 0;
  v5 = *((unsigned int *)this + 13);
  v6 = v3 / v5;
  *((_QWORD *)this + 23) = v3 / v5;
  v7 = *((int *)this + 68) + (uint64_t)(int)(v3 % v5);
  *((_QWORD *)this + 35) = v7;
  if (*((_DWORD *)this + 28))
  {
    if (v6 >= 1)
    {
      outPropertyData = v6;
      ioDataSize = 16;
      Property = AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706B726Cu, &ioDataSize, &outPropertyData);
      v7 = *((_QWORD *)this + 35);
      if (!Property)
      {
        v9 = v13;
        *((_QWORD *)this + 23) -= v13;
        v7 += v9 * *((unsigned int *)this + 13);
        *((_QWORD *)this + 35) = v7;
      }
    }
  }
  *((_QWORD *)this + 36) = v7;
  result = (double)v3;
  *((double *)this + 43) = (double)v3;
  return result;
}

uint64_t AVAudioPlayerCpp::AQOutputCallbackCore(uint64_t this, AudioQueueRef inAQ, AudioQueueBufferRef inBuffer)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  UInt32 v9;
  unsigned int v10;
  UInt32 mAudioDataBytesCapacity;
  UInt32 v12;
  int v13;
  UInt32 v14;
  uint64_t v15;
  UInt32 mPacketDescriptionCount;
  const AudioStreamPacketDescription *v17;
  unsigned int v19;
  UInt32 *v20;
  AudioStreamPacketDescription *mPacketDescriptions;
  UInt32 v22;
  UInt32 mPacketDescriptionCapacity;
  UInt32 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  UInt32 v30;
  uint64_t v31;
  UInt32 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  UInt32 v37;
  unsigned int v38;
  UInt32 *v39;
  uint64_t v40;
  UInt32 v41;
  UInt32 v42;
  unsigned int v43;
  UInt32 ioNumPackets;
  UInt32 ioNumBytes;

  if (!*(_BYTE *)(this + 312))
  {
    if (inBuffer)
    {
      v5 = this;
      if (*(AudioQueueRef *)(this + 176) == inAQ)
      {
        v6 = (unsigned int *)(this + 424);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        v8 = 0;
        *(_DWORD *)(this + 256) = 0;
        while (*(AudioQueueBufferRef *)(this + 8 * v8 + 392) != inBuffer)
        {
          if (++v8 == 3)
          {
            LODWORD(v8) = 0;
            break;
          }
        }
        if (!*(_BYTE *)(this + 314)
          || *(AudioQueueBufferRef *)(this + 416) != inBuffer
          || (*(_QWORD *)(this + 416) = 0,
              this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)this),
              (this & 1) == 0))
        {
          if (!*(_BYTE *)(v5 + 441))
          {
            v10 = *(_DWORD *)(v5 + 48);
            if (v10)
            {
              while (1)
              {
                mAudioDataBytesCapacity = inBuffer->mAudioDataBytesCapacity;
                v12 = inBuffer->mAudioDataBytesCapacity / v10;
                ioNumPackets = v12;
                ioNumBytes = mAudioDataBytesCapacity;
                if (*(_BYTE *)(v5 + 444) && *(_DWORD *)(v5 + 480) < v12)
                  ioNumPackets = *(_DWORD *)(v5 + 480);
                this = AudioFileReadPacketData(*(AudioFileID *)(v5 + 160), 0, &ioNumBytes, 0, *(_QWORD *)(v5 + 184), &ioNumPackets, inBuffer->mAudioData);
                v13 = this;
                if ((_DWORD)this != -39)
                {
                  if ((_DWORD)this)
                    break;
                }
                v14 = ioNumPackets;
                v15 = *(_QWORD *)(v5 + 184) + ioNumPackets;
                *(_QWORD *)(v5 + 184) = v15;
                if (v14)
                {
                  v33 = *(_DWORD *)(v5 + 52);
                  inBuffer->mAudioDataByteSize = ioNumBytes;
                  if (*(_BYTE *)(v5 + 315))
                  {
                    v34 = v33 * v14;
                    v35 = *(_QWORD *)(v5 + 288);
                    v36 = v35 - v34;
                    if (v35 >= v34)
                    {
                      v37 = v34;
                    }
                    else
                    {
                      v36 = 0;
                      v37 = *(_QWORD *)(v5 + 288);
                    }
                    *(_QWORD *)(v5 + 288) = v36;
                  }
                  else
                  {
                    v37 = 0;
                  }
                  v39 = (UInt32 *)(v5 + 4 * v8 + 428);
                  *v39 = v37;
                  inBuffer->mUserData = v39;
                  if (*(_DWORD *)(v5 + 276))
                  {
                    v40 = *(_QWORD *)(v5 + 200);
                    if (v15 >= v40)
                      v41 = *(_DWORD *)(v5 + 276);
                    else
                      v41 = 0;
                    if (v40)
                      v42 = v41;
                    else
                      v42 = 0;
                  }
                  else
                  {
                    v42 = 0;
                  }
                  this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, 0, 0, v37, v42, 0, 0, 0, 0);
                  *(_DWORD *)(v5 + 256) = this;
                  if (!(_DWORD)this)
                  {
                    *(_QWORD *)(v5 + 416) = inBuffer;
                    do
                      v43 = __ldaxr(v6);
                    while (__stlxr(v43 + 1, v6));
                  }
                  goto LABEL_34;
                }
                this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5);
                if ((_DWORD)this)
                  goto LABEL_34;
                v10 = *(_DWORD *)(v5 + 48);
              }
            }
            else
            {
              v20 = (UInt32 *)(v5 + 4 * v8 + 428);
              while (1)
              {
                mPacketDescriptions = inBuffer->mPacketDescriptions;
                v22 = inBuffer->mAudioDataBytesCapacity;
                mPacketDescriptionCapacity = inBuffer->mPacketDescriptionCapacity;
                ioNumPackets = mPacketDescriptionCapacity;
                ioNumBytes = v22;
                if (*(_BYTE *)(v5 + 444) && *(_DWORD *)(v5 + 480) < mPacketDescriptionCapacity)
                  ioNumPackets = *(_DWORD *)(v5 + 480);
                this = AudioFileReadPacketData(*(AudioFileID *)(v5 + 160), 0, &ioNumBytes, mPacketDescriptions, *(_QWORD *)(v5 + 184), &ioNumPackets, inBuffer->mAudioData);
                v13 = this;
                if ((_DWORD)this != -39 && (_DWORD)this != 0)
                  break;
                v25 = ioNumPackets;
                v26 = *(_QWORD *)(v5 + 184) + ioNumPackets;
                *(_QWORD *)(v5 + 184) = v26;
                if (v25)
                {
                  v27 = *(_DWORD *)(v5 + 52) * v25;
                  inBuffer->mAudioDataByteSize = ioNumBytes;
                  inBuffer->mPacketDescriptionCount = v25;
                  if (*(_BYTE *)(v5 + 315))
                  {
                    v28 = *(_QWORD *)(v5 + 288);
                    v29 = v28 - v27;
                    if (v28 >= v27)
                    {
                      v30 = v27;
                    }
                    else
                    {
                      v29 = 0;
                      v30 = *(_QWORD *)(v5 + 288);
                    }
                    *(_QWORD *)(v5 + 288) = v29;
                  }
                  else
                  {
                    v30 = 0;
                  }
                  *v20 = v30;
                  inBuffer->mUserData = v20;
                  if (*(_DWORD *)(v5 + 276) && (v31 = *(_QWORD *)(v5 + 200)) != 0)
                    v32 = v26 >= v31 ? *(_DWORD *)(v5 + 276) : 0;
                  else
                    v32 = 0;
                  if (*(_DWORD *)(v5 + 112) || !v32 || v32 + v30 <= v27)
                  {
                    this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, v25, mPacketDescriptions, v30, v32, 0, 0, 0, 0);
                    *(_DWORD *)(v5 + 256) = this;
                    if (!(_DWORD)this)
                    {
                      *(_QWORD *)(v5 + 416) = inBuffer;
                      do
                        v38 = __ldaxr(v6);
                      while (__stlxr(v38 + 1, v6));
                    }
                    goto LABEL_34;
                  }
                }
                this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5);
                if ((_DWORD)this)
                  goto LABEL_34;
              }
            }
            goto LABEL_34;
          }
          if ((_DWORD)v8 || (this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5), (this & 1) == 0))
          {
            v9 = *(AudioQueueBufferRef *)(v5 + 448) == inBuffer ? *(_DWORD *)(v5 + 276) : 0;
            if (*(_DWORD *)(v5 + 48))
            {
              mPacketDescriptionCount = 0;
              v17 = 0;
            }
            else
            {
              mPacketDescriptionCount = inBuffer->mPacketDescriptionCount;
              v17 = inBuffer->mPacketDescriptions;
            }
            this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, mPacketDescriptionCount, v17, *(_DWORD *)inBuffer->mUserData, v9, 0, 0, 0, 0);
            *(_DWORD *)(v5 + 256) = this;
            if (!(_DWORD)this)
            {
              *(_QWORD *)(v5 + 416) = inBuffer;
              do
                v19 = __ldaxr(v6);
              while (__stlxr(v19 + 1, v6));
LABEL_44:
              if (!*(_QWORD *)(v5 + 288))
                *(_BYTE *)(v5 + 315) = 0;
              return this;
            }
          }
        }
        v13 = 0;
LABEL_34:
        if (!atomic_load(v6))
        {
          if (v13 && v13 != -39 || *(_DWORD *)(v5 + 256))
            *(_BYTE *)(v5 + 440) = 0;
          if (*(_BYTE *)(v5 + 307) && *(_DWORD *)(v5 + 256) != 560030580)
            this = AVAudioPlayerCpp::flushQueue(v5);
        }
        goto LABEL_44;
      }
    }
  }
  return this;
}

void sub_19B7C69C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (!*(_QWORD *)(v1 + 288))
    *(_BYTE *)(v1 + 315) = 0;
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::loopLogic(AVAudioPlayerCpp *this)
{
  int v2;
  int v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  UInt32 ioDataSize;
  uint64_t outPropertyData;

  if (!*((_BYTE *)this + 463))
  {
    outPropertyData = 0;
    ioDataSize = 8;
    if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x70636E74u, &ioDataSize, &outPropertyData))
    {
      *((_QWORD *)this + 58) = outPropertyData * *((unsigned int *)this + 13);
      *((_BYTE *)this + 463) = 1;
    }
  }
  if (!*((_BYTE *)this + 442))
  {
    v6 = *((_DWORD *)this + 74);
    v3 = *((_DWORD *)this + 75);
    if ((v6 & 0x80000000) == 0 && v3 >= v6)
      goto LABEL_13;
LABEL_16:
    result = 0;
    *((_DWORD *)this + 75) = v3 + 1;
    goto LABEL_17;
  }
  if (!*((_BYTE *)this + 441) && !*((_QWORD *)this + 24))
  {
    if (atomic_load((unsigned int *)this + 106))
    {
      result = 1;
      *((_BYTE *)this + 314) = 1;
      *((_BYTE *)this + 441) = 1;
      return result;
    }
    AVAudioPlayerCpp::donePlaying((uint64_t)this);
    return 1;
  }
  v2 = *((_DWORD *)this + 74);
  v3 = *((_DWORD *)this + 75);
  if (v2 < 0 || v3 < v2)
    goto LABEL_16;
  if (atomic_load((unsigned int *)this + 106))
  {
LABEL_13:
    result = 1;
    *((_BYTE *)this + 314) = 1;
    *((_BYTE *)this + 440) = 1;
    if (!*((_BYTE *)this + 307))
      return result;
    AVAudioPlayerCpp::flushQueue((uint64_t)this);
    return 1;
  }
  result = 0;
LABEL_17:
  *((_QWORD *)this + 23) = 0;
  v7 = *((int *)this + 68);
  *((_QWORD *)this + 35) = v7;
  *((_QWORD *)this + 36) = v7;
  *((_WORD *)this + 157) = 256;
  return result;
}

uint64_t FindCodecs(int a1, _DWORD *a2, _DWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  UInt32 v8;
  UInt32 v9;
  _DWORD *v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  UInt32 outPropertyDataSize;
  int inSpecifier;

  outPropertyDataSize = 0;
  inSpecifier = a1;
  *a2 = 0;
  *a3 = 0;
  result = AudioFormatGetPropertyInfo(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize);
  if (!(_DWORD)result)
  {
    v8 = outPropertyDataSize;
    if (outPropertyDataSize)
    {
      v9 = outPropertyDataSize / 0xC;
      v10 = (_DWORD *)operator new[]();
      if (AudioFormatGetProperty(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize, v10))
        v11 = 0;
      else
        v11 = v8 >= 0xC;
      if (v11)
      {
        v12 = inSpecifier;
        v13 = v9 + 1;
        v14 = v10 + 2;
        do
        {
          if (*(v14 - 1) == v12)
          {
            if (*v14 == 1634756727)
            {
              if (!*a2)
                *a2 = 1634756727;
            }
            else if (!*a3)
            {
              *a3 = *v14;
            }
          }
          --v13;
          v14 += 3;
        }
        while (v13 > 1);
      }
      return MEMORY[0x1A1AC5BBC](v10, 0x1000C803E1C8BA9);
    }
  }
  return result;
}

uint64_t AudioPlayerAQOutputCallback(uint64_t a1, OpaqueAudioQueue *a2, AudioQueueBuffer *a3)
{
  pthread_mutex_lock(&avap_mutex);
  AVAudioPlayerCpp::AQOutputCallbackCore(a1, a2, a3);
  return pthread_mutex_unlock(&avap_mutex);
}

void sub_19B7C6CA4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::makeChannelAssignments(AVAudioPlayerCpp *this)
{
  OpaqueAudioQueue *v2;
  int v3;

  v2 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
  if (v2 && (v3 = *((_DWORD *)this + 130)) != 0)
    return AudioQueueSetProperty(v2, 0x61716361u, *((const void **)this + 66), 16 * v3);
  else
    return 0;
}

void AVAudioPlayerCpp::applySTSLabelToQueueIfPossible(AVAudioPlayerCpp *this)
{
  OpaqueAudioQueue *v2;
  OSStatus v3;
  OSStatus v4;
  uint64_t v5;
  uint64_t inData;
  uint8_t buf[4];
  AVAudioPlayerCpp *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  OSStatus v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (OpaqueAudioQueue *)*((_QWORD *)this + 22);
  if (v2)
  {
    inData = *((_QWORD *)this + 67);
    v3 = AudioQueueSetProperty(v2, 0x7374736Cu, &inData, 8u);
    if (v3)
    {
      v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v5 = *((_QWORD *)this + 22);
        *(_DWORD *)buf = 134218496;
        v8 = this;
        v9 = 2048;
        v10 = v5;
        v11 = 1024;
        v12 = v4;
        _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "player@0x%p failed to set label on audioqueue 0x%p: %d", buf, 0x1Cu);
      }
    }
  }
}

uint64_t AVAudioPlayerCpp::SetProperty(uint64_t this, int a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int v5;
  OpaqueAudioQueue *v6;
  OpaqueAudioQueue *v7;
  AudioQueueParameterValue v8;
  OpaqueAudioQueue *v9;
  AudioQueueParameterValue v10;
  double v11;
  double v12;
  OpaqueAudioQueue *v13;
  AudioQueueParameterValue v14;
  int v15;
  _DWORD *v16;
  OpaqueAudioQueue *v17;
  AudioQueueParameterValue v18;
  OpaqueAudioQueue *v19;
  AudioQueueParameterValue v20;
  int v21;
  int v22;
  OSStatus v23;
  OSStatus v24;
  int v25;
  UInt32 ioDataSize;
  uint64_t inData;

  v4 = this;
  if (a2 > 1885433375)
  {
    if (a2 > 1987013748)
    {
      if (a2 == 1987013749)
      {
        if (a3 != 8)
          return this;
        if (*(double *)(this + 208) == *a4)
          return this;
        *(double *)(this + 208) = *a4;
        if (*(_BYTE *)(this + 313))
          return this;
        pthread_mutex_lock(&avap_mutex);
        v19 = *(OpaqueAudioQueue **)(v4 + 176);
        if (v19)
        {
          v20 = *(double *)(v4 + 208);
          AudioQueueSetParameter(v19, 1u, v20);
        }
      }
      else
      {
        if (a2 != 1987015284)
          return this;
        if (a3 != 8)
          return this;
        if (*(double *)(this + 216) == *a4)
          return this;
        *(double *)(this + 216) = *a4;
        if (*(_BYTE *)(this + 313))
          return this;
        pthread_mutex_lock(&avap_mutex);
        v9 = *(OpaqueAudioQueue **)(v4 + 176);
        if (v9)
        {
          v10 = *(double *)(v4 + 216);
          AudioQueueSetParameter(v9, 4u, v10);
        }
      }
    }
    else
    {
      if (a2 != 1885433376)
      {
        if (a2 == 1918989413 && a3 == 8 && *(double *)(this + 224) != *a4)
        {
          *(double *)(this + 224) = *a4;
          if (!*(_BYTE *)(this + 313))
          {
            pthread_mutex_lock(&avap_mutex);
            AudioQueueSetProperty(*(AudioQueueRef *)(v4 + 176), 0x715F7470u, (const void *)(v4 + 240), 4u);
            v7 = *(OpaqueAudioQueue **)(v4 + 176);
            if (v7 && *(_DWORD *)(v4 + 240))
            {
              LODWORD(inData) = 1953064047;
              AudioQueueSetProperty(v7, 0x71747061u, &inData, 4u);
              v8 = *(double *)(v4 + 224);
              AudioQueueSetParameter(*(AudioQueueRef *)(v4 + 176), 2u, v8);
            }
            return pthread_mutex_unlock(&avap_mutex);
          }
        }
        return this;
      }
      if (a3 != 8)
        return this;
      if (*(double *)(this + 232) == *a4)
        return this;
      *(double *)(this + 232) = *a4;
      if (*(_BYTE *)(this + 313))
        return this;
      pthread_mutex_lock(&avap_mutex);
      v13 = *(OpaqueAudioQueue **)(v4 + 176);
      if (v13)
      {
        v14 = *(double *)(v4 + 232);
        AudioQueueSetParameter(v13, 0xDu, v14);
      }
    }
    return pthread_mutex_unlock(&avap_mutex);
  }
  if (a2 > 1701737075)
  {
    if (a2 == 1701737076)
    {
      if (a3 == 4)
      {
        v15 = *(_DWORD *)a4 != 0;
        v16 = (_DWORD *)(this + 240);
        if (*(_DWORD *)(this + 240) != v15)
        {
          *(_DWORD *)(this + 240) = v15;
          if (!*(_BYTE *)(this + 313))
          {
            pthread_mutex_lock(&avap_mutex);
            AudioQueueSetProperty(*(AudioQueueRef *)(v4 + 176), 0x715F7470u, (const void *)(v4 + 240), 4u);
            v17 = *(OpaqueAudioQueue **)(v4 + 176);
            if (v17 && *v16)
            {
              LODWORD(inData) = 1953064047;
              AudioQueueSetProperty(v17, 0x71747061u, &inData, 4u);
              v18 = *(double *)(v4 + 224);
              AudioQueueSetParameter(*(AudioQueueRef *)(v4 + 176), 2u, v18);
            }
            return pthread_mutex_unlock(&avap_mutex);
          }
        }
      }
    }
    else if (a2 == 1819242352 && a3 == 4)
    {
      *(_DWORD *)(this + 296) = *(_DWORD *)a4;
    }
  }
  else if (a2 == 1668573549)
  {
    if (a3 == 8 && !*(_BYTE *)(this + 313))
    {
      v11 = *a4;
      pthread_mutex_lock(&avap_mutex);
      if (v11 < 0.0)
        v11 = 0.0;
      v12 = *(double *)(v4 + 248);
      if (v11 > v12)
      {
        if (!*(_BYTE *)(v4 + 462))
        {
          inData = 0;
          ioDataSize = 8;
          if (AudioFileGetProperty(*(AudioFileID *)(v4 + 160), 0x70636E74u, &ioDataSize, &inData))
          {
            v12 = *(double *)(v4 + 248);
          }
          else
          {
            v12 = (double)(inData * *(unsigned int *)(v4 + 52)) / *(double *)(v4 + 32);
            *(double *)(v4 + 248) = v12;
            *(_BYTE *)(v4 + 462) = 1;
          }
        }
        if (v11 > v12)
          v11 = v12;
      }
      v21 = *(unsigned __int8 *)(v4 + 304);
      v22 = *(unsigned __int8 *)(v4 + 305);
      if (v22 | v21)
      {
        if (*(_BYTE *)(v4 + 307))
        {
          *(_BYTE *)(v4 + 443) = 1;
          if (v22)
          {
            *(_BYTE *)(v4 + 312) = 1;
            __dmb(0xBu);
            AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)v4, 1);
            pthread_mutex_unlock(&avap_mutex);
            v23 = AudioQueueStop(*(AudioQueueRef *)(v4 + 176), 1u);
            v24 = v23;
            if (!v23)
              v24 = AudioQueueReset(*(AudioQueueRef *)(v4 + 176));
            pthread_mutex_lock(&avap_mutex);
            if (!v23)
            {
              atomic_store(0, (unsigned int *)(v4 + 424));
              if (!v24)
              {
                *(_WORD *)(v4 + 314) = 0;
                *(_DWORD *)(v4 + 308) = 0;
                *(_DWORD *)(v4 + 304) = 0x10000;
                *(_BYTE *)(v4 + 312) = 0;
                *(_QWORD *)(v4 + 328) = *(_QWORD *)(v4 + 344);
                *(_QWORD *)(v4 + 320) = 0;
                *(_QWORD *)(v4 + 336) = 0;
                __dmb(0xBu);
              }
            }
          }
          AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), 0);
          *(_QWORD *)(v4 + 328) = *(_QWORD *)(v4 + 344);
          *(_BYTE *)(v4 + 444) = 1;
          v25 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)v4, 0);
          *(_WORD *)(v4 + 443) = 0;
          if (v25)
            AVAudioPlayerCpp::donePlaying(v4);
        }
        else
        {
          AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), v21 != 0);
          *(_QWORD *)(v4 + 328) = *(_QWORD *)(v4 + 344);
          *(_BYTE *)(v4 + 304) = 0;
          *(_BYTE *)(v4 + 312) = 1;
          pthread_mutex_unlock(&avap_mutex);
          AudioQueueReset(*(AudioQueueRef *)(v4 + 176));
          pthread_mutex_lock(&avap_mutex);
          *(_BYTE *)(v4 + 312) = 0;
          *(_BYTE *)(v4 + 444) = 1;
          AVAudioPlayerCpp::prepareToPlayQueue((AVAudioPlayerCpp *)v4);
          *(_BYTE *)(v4 + 444) = 0;
        }
      }
      else
      {
        AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), 0);
        *(_QWORD *)(v4 + 328) = *(_QWORD *)(v4 + 344);
      }
      return pthread_mutex_unlock(&avap_mutex);
    }
  }
  else if (a2 == 1701735796 && a3 == 4)
  {
    v5 = *(_DWORD *)a4 != 0;
    if (*(_DWORD *)(this + 376) != v5 && !*(_BYTE *)(this + 313))
    {
      pthread_mutex_lock(&avap_mutex);
      v6 = *(OpaqueAudioQueue **)(v4 + 176);
      if (!v6 || (LODWORD(inData) = v5, !AudioQueueSetProperty(v6, 0x61716D65u, &inData, 4u)))
        *(_DWORD *)(v4 + 376) = v5;
      return pthread_mutex_unlock(&avap_mutex);
    }
  }
  return this;
}

void sub_19B7C73C8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&avap_mutex);
  _Unwind_Resume(a1);
}

uint64_t AudioPlayerAFReadProc(CFDataRef *a1, uint64_t a2, unsigned int a3, void *a4, unsigned int *a5)
{
  const __CFData *v6;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    Length = CFDataGetLength(*a1);
    if (a2 < 0)
    {
      a3 = 0;
      result = 4294967256;
    }
    else if (Length <= a2)
    {
      a3 = 0;
      result = 4294967257;
    }
    else
    {
      if (Length - a2 < a3)
        a3 = Length - a2;
      BytePtr = CFDataGetBytePtr(v6);
      memcpy(a4, &BytePtr[a2], a3);
      result = 0;
    }
  }
  else
  {
    a3 = 0;
    result = 4294967246;
  }
  *a5 = a3;
  return result;
}

const __CFData *AudioPlayerAFGetSizeProc(const __CFData **a1)
{
  const __CFData *result;

  result = *a1;
  if (result)
    return (const __CFData *)CFDataGetLength(result);
  return result;
}

void sub_19B7C7800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MyAudioQueueBuffer::~MyAudioQueueBuffer(MyAudioQueueBuffer *this)
{
  AudioStreamPacketDescription *var5;
  void *var1;

  var5 = this->var5;
  if (var5)
    MEMORY[0x1A1AC5BBC](var5, 0x1000C80451B5BE8);
  var1 = this->var1;
  if (var1)
    MEMORY[0x1A1AC5BBC](var1, 0x1000C8077774924);
}

void MyAudioQueueBuffer::MyAudioQueueBuffer(MyAudioQueueBuffer *this, unsigned int a2, unsigned int a3)
{
  this->var0 = a2;
  this->var1 = 0;
  this->var2 = 0;
  this->var3 = 0;
  this->var4 = a3;
  this->var5 = 0;
  this->var6 = 0;
  *(_WORD *)&this->var8 = 0;
  this->var10 = 0;
  if (a2)
    this->var1 = (void *)operator new[]();
  if (a3)
    this->var5 = (AudioStreamPacketDescription *)operator new[]();
  *(_QWORD *)&this->var7.mBitsPerChannel = 0;
  *(_OWORD *)&this->var7.mBytesPerPacket = 0u;
  *(_OWORD *)&this->var7.mSampleRate = 0u;
}

void sub_19B7C7BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C7CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7C7E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C81E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  id *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD **v19;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*v19);
  caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base(v17);
  AVAudioUnitImpl::~AVAudioUnitImpl(v16);
  MEMORY[0x1A1AC5BD4](v16, 0x10B1C403D80C735);
  _Unwind_Resume(a1);
}

void sub_19B7C8538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C8694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7C880C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C896C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C8BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C8CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7C9524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B7C970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ControllerImpl::~ControllerImpl(ControllerImpl *this)
{
  ControllerImpl::~ControllerImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  NSObject *v2;
  id v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E3BE6608;
  v23 = 4118;
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)&v22, "~ControllerImpl");
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v28 = "ControllerImpl.mm";
    v29 = 1024;
    v30 = 428;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::Entering Dealloc", buf, 0x12u);
  }

LABEL_8:
  *(_DWORD *)buf = 1;
  v4 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 1, buf);
  v5 = v4[5];
  v4[5] = 0;

  *(_DWORD *)buf = 2;
  v6 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 2, buf);
  v7 = v6[5];
  v6[5] = 0;

  *(_DWORD *)buf = 3;
  v8 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 3, buf);
  v9 = v8[5];
  v8[5] = 0;

  v10 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;

  v11 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;

  v12 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

  ControllerImpl::deleteRecordingEngines(this);
  objc_msgSend(*((id *)this + 58), "invalidatePlugins");
  *((_QWORD *)this + 71) = 0;
  v13 = *((_QWORD *)this + 24);
  *(_BYTE *)(v13 + 144) = 1;
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v13 + 136));
  CFRunLoopWakeUp(*(CFRunLoopRef *)(v13 + 128));
  *((_QWORD *)this + 24) = 0;
  if (kAVVCScope)
  {
    v14 = *(id *)kAVVCScope;
    if (!v14)
      goto LABEL_15;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
    v15 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v28 = "ControllerImpl.mm";
    v29 = 1024;
    v30 = 451;
    _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d QueueRunLoop stopped", buf, 0x12u);
  }

LABEL_15:
  objc_storeWeak((id *)this + 21, 0);
  for (i = 536; i != 568; i += 8)
  {
    v17 = *(_QWORD *)((char *)this + i);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    *(_QWORD *)((char *)this + i) = 0;
  }
  +[AVVCMetricsManager destroySharedManager](AVVCMetricsManager, "destroySharedManager");
  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "releasePrimarySessionManager");

  if (kAVVCScope)
  {
    v19 = *(id *)kAVVCScope;
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
    v20 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v28 = "ControllerImpl.mm";
    v29 = 1024;
    v30 = 477;
    _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::Exiting Dealloc", buf, 0x12u);
  }

LABEL_26:
  TraceMethod::~TraceMethod((TraceMethod *)&v22);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v23);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 480);

  objc_destroyWeak((id *)this + 52);
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*((_QWORD **)this + 38));
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*((_QWORD **)this + 35));

  objc_destroyWeak((id *)this + 21);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 104));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 40));

  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_19B7C9C78(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void ControllerImpl::deleteRecordingEngines(ControllerImpl *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 72);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
    goto LABEL_20;
  v13[0] = &off_1E3BE5EA8;
  v14 = v13;
  AVVCRecordingEngineMap::for_each_engine((_QWORD *)v2, (uint64_t)v13, (uint64_t)"deleteRecordingEngines");
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_9;
  }
  if (v14)
  {
    v7 = 5;
LABEL_9:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (IsSerializationEnabled(void)::enable)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*(_QWORD **)(v2 + 8));
    *(_QWORD *)v2 = v2 + 8;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  else
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 24));
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*(_QWORD **)(v2 + 8));
    *(_QWORD *)v2 = v2 + 8;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 24));
  }
  v12 = 0;
  if (!v3)
  {
    *((_QWORD *)this + 59) = 0;
    return;
  }
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_20:
  *((_QWORD *)this + 59) = 0;
  if (v12)
  {
    v10 = (unint64_t *)&v12->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19B7C9F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3BE5EA8;
  return result;
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3BE5EA8;
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  AVVCRecordingEngine::resetCompletionBlocks(*(AVVCRecordingEngine **)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
  *(_BYTE *)(v3 + 520) = 1;
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315650;
    v9 = "AVVCRecordingEngine.mm";
    v10 = 1024;
    v11 = 1088;
    v12 = 1024;
    v13 = 1;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine::setAVVCTeardownCompleted(%d)", (uint8_t *)&v8, 0x18u);
  }

LABEL_8:
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7CA178(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ControllerImpl::enableMiniDucking(ControllerImpl *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  AVVCRecordingEngine *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v16, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v14, *((_QWORD *)this + 72), *((std::__shared_weak_count **)this + 73), 1uLL);
  if (v14)
  {
    AVVCRecordingEngine::getActivationContextSettings(v14);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      v6 = objc_msgSend(v4, "announceCallsEnabled");
    else
      v6 = 0;

  }
  else
  {
    v6 = 0;
  }
  ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "shouldEnableMiniDucking:withOptions:", a2, v6);

  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19B7CA2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ControllerImpl::_lookupEngineForStreamID(ControllerImpl *this, uint64_t a2, std::__shared_weak_count *a3, unint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  id v12;
  unint64_t *v13;
  unint64_t v14;
  uint8_t buf[4];
  _BYTE v17[14];
  uint64_t v18;

  v4 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (a2)
  {
    AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, a2, a4);
    std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&v17[4];
    if (*(_QWORD *)&v17[4])
    {
      v9 = (unint64_t *)(*(_QWORD *)&v17[4] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v4 = a3;
  }
  else
  {
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_18;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v17 = "ControllerImpl.mm";
      *(_WORD *)&v17[8] = 1024;
      *(_DWORD *)&v17[10] = 4106;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }

  }
LABEL_18:
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19B7CA4B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id ControllerImpl::sessionManagerForStreamID(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sessionManagerForContext:clientType:error:", 0, *(_QWORD *)(a1 + 184), a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    return v8;
  }
  v5 = a2;
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v15, *(_QWORD *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), a2);
  if (!v15)
  {
    if (kAVVCScope)
    {
      v10 = *(id *)kAVVCScope;
      if (!v10)
      {
LABEL_12:
        v6 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v18 = "ControllerImpl.mm";
      v19 = 1024;
      v20 = 230;
      v21 = 1024;
      v22 = v5;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d audioSessionForStreamID(%d) couldn't find engine, returning nil", buf, 0x18u);
    }

    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v15, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v6;
}

void sub_19B7CA678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ControllerImpl::audioSessionForStreamID(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sessionForContext:clientType:error:", 0, *(_QWORD *)(a1 + 184), a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    return v8;
  }
  v5 = a2;
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v15, *(_QWORD *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), a2);
  if (!v15)
  {
    if (kAVVCScope)
    {
      v10 = *(id *)kAVVCScope;
      if (!v10)
      {
LABEL_12:
        v6 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v18 = "ControllerImpl.mm";
      v19 = 1024;
      v20 = 210;
      v21 = 1024;
      v22 = v5;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d audioSessionForStreamID(%d) couldn't find engine, returning nil", buf, 0x18u);
    }

    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 56))(v15, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v6;
}

void sub_19B7CA848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CADeprecated::AVVCGenericRunLoopThread::Entry(dispatch_semaphore_t *this, void *a2)
{
  __CFRunLoop *Current;
  __CFRunLoopSource *v4;
  const __CFString *v5;
  CFRunLoopSourceContext v7;

  Current = CFRunLoopGetCurrent();
  v7.version = 0;
  v7.info = this;
  memset(&v7.retain, 0, 56);
  v7.perform = (void (__cdecl *)(void *))CADeprecated::AVVCGenericRunLoopThread::PerformSource;
  v4 = CFRunLoopSourceCreate(0, 0, &v7);
  this[17] = (dispatch_semaphore_t)v4;
  v5 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddSource(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  this[16] = (dispatch_semaphore_t)Current;
  dispatch_semaphore_signal(this[20]);
  while (!*((_BYTE *)this + 144))
    CFRunLoopRunInMode(v5, 504911233.0, 1u);
  return 0;
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::__on_zero_shared(uint64_t a1)
{
  AVVCRecordingEngineMap::~AVVCRecordingEngineMap((AVVCRecordingEngineMap *)(a1 + 24));
}

void ControllerImpl::setStartAlertMode(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3)
      v6 = "Silent";
    else
      v6 = off_1E3BEC6E8[a2 - 1];
    v8 = 136315650;
    v9 = "ControllerImpl.h";
    v10 = 1024;
    v11 = 331;
    v12 = 2080;
    v13 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStartAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 320) != a2)
  {
    *(_DWORD *)(a1 + 320) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200)
        v7 = 200;
      else
        v7 = *(_DWORD *)(a1 + 360);
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setStopAlertMode(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3)
      v6 = "Silent";
    else
      v6 = off_1E3BEC6E8[a2 - 1];
    v8 = 136315650;
    v9 = "ControllerImpl.h";
    v10 = 1024;
    v11 = 338;
    v12 = 2080;
    v13 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStopAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 324) != a2)
  {
    *(_DWORD *)(a1 + 324) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200)
        v7 = 200;
      else
        v7 = *(_DWORD *)(a1 + 360);
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setStopWithErrorAlertMode(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3)
      v6 = "Silent";
    else
      v6 = off_1E3BEC6E8[a2 - 1];
    v8 = 136315650;
    v9 = "ControllerImpl.h";
    v10 = 1024;
    v11 = 345;
    v12 = 2080;
    v13 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStopWithErrorAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 328) != a2)
  {
    *(_DWORD *)(a1 + 328) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200)
        v7 = 200;
      else
        v7 = *(_DWORD *)(a1 + 360);
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setAlertQueueState(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_17;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    switch(a2)
    {
      case 200:
        v6 = "stopped";
        break;
      case 201:
        v6 = "primed";
        break;
      case 202:
        v6 = "stopping";
        break;
      case 203:
        v6 = "started";
        break;
      case 204:
        v6 = "running";
        break;
      default:
        v6 = "ILLEGAL";
        if (!a2)
          v6 = "uninit";
        break;
    }
    v7 = 136315650;
    v8 = "ControllerImpl.h";
    v9 = 1024;
    v10 = 546;
    v11 = 2080;
    v12 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d alert queue state => %s", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
  *(_DWORD *)(a1 + 360) = a2;
}

void MyMutex::~MyMutex(MyMutex *this)
{
  *(_QWORD *)this = &off_1E3BE9A80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

{
  *(_QWORD *)this = &off_1E3BE9A80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  JUMPOUT(0x1A1AC5BD4);
}

void ControllerImpl::ControllerImpl(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _opaque_pthread_t *v7;
  _opaque_pthread_t *v8;
  void *v14;
  uint64_t **v15;
  void *v16;
  uint64_t **v17;
  void *v18;
  uint64_t **v19;
  uint64_t i;
  const char *v21;
  const char *v22;
  CADeprecated::CAMutex *v23;
  id v24;
  uint64_t v25;
  _opaque_pthread_t *v27;
  int v28;
  thread_act_t v29;
  kern_return_t v30;
  _opaque_pthread_t *v31;
  _opaque_pthread_t *v32;
  thread_act_t v33;
  kern_return_t v34;
  NSObject *v35;
  id v36;
  int v37;
  char v38;
  char v39;
  id v40;
  void *v41;
  void (*v42)(void);
  NSObject *v43;
  id v44;
  AVVCPluginRemoteInputHost *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  dispatch_queue_t v49;
  void *v50;
  NSObject *v51;
  dispatch_queue_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  id v61;
  NSObject *v62;
  id v63;
  NSObject *v64;
  const char *v65;
  void *v66;
  void (**v67)(void);
  integer_t policy_info;
  uint8_t buf[4];
  const char *v70;
  __int16 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E3BE6608;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  MEMORY[0x1A1AC5AE4](a1 + 40);
  MEMORY[0x1A1AC5AE4](a1 + 104);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3BE9AC8;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = pthread_self();
  *(_DWORD *)(v6 + 16) = CADeprecated::CAPThread::getScheduledPriority(v7, v8);
  *(_QWORD *)(v6 + 24) = CADeprecated::AVVCGenericRunLoopThread::Entry;
  *(_QWORD *)(v6 + 32) = v6;
  *(_DWORD *)(v6 + 104) = 31;
  *(_QWORD *)(v6 + 108) = 0;
  *(_DWORD *)(v6 + 116) = 0;
  strcpy((char *)(v6 + 40), "AVVC Rec Queue RunLoop");
  *(_QWORD *)v6 = &off_1E3BE99E8;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_BYTE *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = "AVVC Rec Queue RunLoop";
  *(_QWORD *)(v6 + 160) = 0;
  *(_BYTE *)(v6 + 168) = 1;
  *(_DWORD *)(v6 + 120) = 16777217;
  *(_QWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 320) = 0x200000002;
  *(_DWORD *)(a1 + 328) = 2;
  *(_QWORD *)(a1 + 336) = -1;
  *(_QWORD *)(a1 + 344) = -1;
  *(_QWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 400) = _D1;
  *(_WORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0x200000000;
  *(_OWORD *)(a1 + 432) = xmmword_19B85A2F0;
  *(_QWORD *)(a1 + 448) = 0x3FE8A3D70A3D70A4;
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_WORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 1635087471;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  v67 = (void (**)(void))(a1 + 568);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_DWORD *)buf = 1;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), 1, buf)[5] = 0;
  *(_DWORD *)buf = 2;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), 2, buf)[5] = 0;
  *(_DWORD *)buf = 3;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), 3, buf)[5] = 0;
  *(_QWORD *)(a1 + 216) = 0x40CF400000000000;
  *(_OWORD *)(a1 + 224) = xmmword_19B85A1C0;
  *(_QWORD *)(a1 + 240) = 0x100000002;
  *(_DWORD *)(a1 + 248) = 16;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/System/Library/Audio/UISounds/jbl_begin.caf"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 1;
  v15 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 272), 1, buf);
  objc_storeStrong((id *)v15 + 5, v14);
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/System/Library/Audio/UISounds/jbl_confirm.caf"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  *(_DWORD *)buf = 2;
  v17 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 272), 2, buf);
  objc_storeStrong((id *)v17 + 5, v16);
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/System/Library/Audio/UISounds/jbl_cancel.caf"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  *(_DWORD *)buf = 3;
  v66 = v18;
  v19 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 272), 3, buf);
  objc_storeStrong((id *)v19 + 5, v18);
  for (i = 0; i != 4; ++i)
  {
    if (i == 2)
      v21 = "Playback";
    else
      v21 = "Session";
    if ((_DWORD)i == 1)
      v21 = "Record";
    if ((_DWORD)i)
      v22 = v21;
    else
      v22 = "Alert";
    v23 = (CADeprecated::CAMutex *)operator new();
    CADeprecated::CAMutex::CAMutex(v23, v22);
    *(_QWORD *)v23 = &off_1E3BE9960;
    *(_QWORD *)(a1 + 8 * i + 536) = v23;
  }
  *(_QWORD *)(a1 + 184) = a2;
  if (a2 == 1 && +[AVVoiceTriggerClient isAPIAvailable](AVVoiceTriggerClient, "isAPIAvailable"))
    v24 = +[AVVoiceTriggerClient sharedInstance](AVVoiceTriggerClient, "sharedInstance");
  v25 = *(_QWORD *)(a1 + 192);
  *(_DWORD *)(v25 + 104) = 60;
  *(_WORD *)(v25 + 121) = 256;
  if (atomic_load((unint64_t *)(v25 + 8)))
  {
    v27 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v25 + 8));
    if (v27)
    {
      v28 = *(_DWORD *)(v25 + 104);
      if (*(_BYTE *)(v25 + 122)
        && (policy_info = 0, v29 = pthread_mach_thread_np(v27),
                             (v30 = thread_policy_set(v29, 1u, &policy_info, 1u)) != 0))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v70) = v30;
          v64 = MEMORY[0x1E0C81028];
          v65 = " CAPThread::SetPriority: failed to set the fixed-priority policy, Error: 0x%X";
          goto LABEL_73;
        }
      }
      else
      {
        v31 = pthread_self();
        policy_info = v28 - CADeprecated::CAPThread::getScheduledPriority(v31, v32);
        v33 = pthread_mach_thread_np(v27);
        v34 = thread_policy_set(v33, 3u, &policy_info, 1u);
        if (!v34)
          goto LABEL_19;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v70) = v34;
          v64 = MEMORY[0x1E0C81028];
          v65 = " CAPThread::SetPriority: failed to set the precedence policy, Error: 0x%X";
LABEL_73:
          _os_log_error_impl(&dword_19B733000, v64, OS_LOG_TYPE_ERROR, v65, buf, 8u);
        }
      }
      __break(1u);
      return;
    }
  }
LABEL_19:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192));
  if (kAVVCScope)
  {
    v35 = *(id *)kAVVCScope;
    if (!v35)
      goto LABEL_26;
  }
  else
  {
    v35 = MEMORY[0x1E0C81028];
    v36 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v70 = "ControllerImpl.mm";
    v71 = 1024;
    v72 = 349;
    _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d QueueRunLoop started", buf, 0x12u);
  }

LABEL_26:
  v37 = MGGetSInt32Answer();
  v38 = MGGetBoolAnswer();
  if (v37 == 7)
    v39 = 1;
  else
    v39 = v38;
  if ((v39 & 1) != 0)
    goto LABEL_33;
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
LABEL_33:
    ControllerImpl::setStartAlertMode(a1, 0);
    ControllerImpl::setStopAlertMode(a1, 0);
    ControllerImpl::setStopWithErrorAlertMode(a1, 0);
  }
  v40 = +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (!isDarwinOSProduct(void)::isDarwinOS)
    goto LABEL_53;
  if (!*v67)
  {
    if (isDarwinOSProduct(void)::isDarwinOS)
    {
      v41 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 2);
      if (v41)
      {
        v42 = (void (*)(void))dlsym(v41, "RegisterAudioUnits_Internal");
        if (v42)
        {
          *v67 = v42;
          ControllerImpl::loadAudioDSPManager(void)::didLoad = 1;
          goto LABEL_45;
        }
        if (kAVVCScope)
        {
          v62 = *(id *)kAVVCScope;
          if (!v62)
            goto LABEL_38;
        }
        else
        {
          v62 = MEMORY[0x1E0C81028];
          v63 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v70 = "ControllerImpl.mm";
          v71 = 1024;
          v72 = 3362;
          _os_log_impl(&dword_19B733000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d Fail! Unable to load RegisterAudioUnits_Internal from libAudioDSP.dylib.", buf, 0x12u);
        }

      }
    }
  }
LABEL_38:
  if (ControllerImpl::loadAudioDSPManager(void)::didLoad != 1 || !*v67)
    goto LABEL_53;
LABEL_45:
  if (!kAVVCScope)
  {
    v43 = MEMORY[0x1E0C81028];
    v44 = MEMORY[0x1E0C81028];
    goto LABEL_49;
  }
  v43 = *(id *)kAVVCScope;
  if (v43)
  {
LABEL_49:
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v70 = "ControllerImpl.mm";
      v71 = 1024;
      v72 = 3368;
      _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling RegisterAudioUnits_Internal from libAudioDSP.dylib", buf, 0x12u);
    }

  }
  (*v67)();
LABEL_53:
  +[AVVCMetricsManager createSharedManager](AVVCMetricsManager, "createSharedManager");
  v45 = objc_alloc_init(AVVCPluginRemoteInputHost);
  v46 = *(void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v45;

  v47 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v48 = objc_claimAutoreleasedReturnValue();
  v49 = dispatch_queue_create("AVVC Client Notification Queue", v48);
  v50 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v49;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v51 = objc_claimAutoreleasedReturnValue();
  v52 = dispatch_queue_create("AVVC ControllerImpl Work Queue", v51);
  v53 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v52;

  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 2;
  v54 = operator new(0x70uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &off_1E3BE9D20;
  AVVCRecordingEngineMap::AVVCRecordingEngineMap((AVVCRecordingEngineMap *)(v54 + 3));
  *(_QWORD *)&v56 = v55;
  *((_QWORD *)&v56 + 1) = v54;
  v57 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = v56;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  ControllerImpl::audioSessionForStreamID(a1, 0, (uint64_t)a3);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    if (AVVCTestPropertyIsSet())
    {
      AVVCTestPropertyGetError();
      v61 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *a3 = v61;

    }
  }

}

void sub_19B7CB8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::recursive_mutex *a10, id *location, std::recursive_mutex *a12, uint64_t a13, void *a14)
{
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v17;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14 + 576);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v14 + 480);

  objc_destroyWeak((id *)(v14 + 416));
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*(_QWORD **)(v14 + 304));
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*(_QWORD **)(v14 + 280));

  objc_destroyWeak(location);
  std::recursive_mutex::~recursive_mutex(a10);
  std::recursive_mutex::~recursive_mutex(a12);

  v17 = *(std::__shared_weak_count **)(v14 + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void ControllerImpl::deactivateSessionForListening(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, int a6, void *a7)
{
  id v13;
  id v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  id v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[4];
  char v39[8];
  int v40;
  char v41;
  __int128 v42;
  __int128 v43;

  v13 = a2;
  v14 = a7;
  v40 = 4124;
  v41 = 1;
  v42 = 0u;
  v43 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v39, "deactivateSessionForListening");
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x2020000000;
  v38[3] = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v36, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke;
  v26[3] = &unk_1E3BEB128;
  v15 = v36;
  v30 = a1;
  v31 = v36;
  v32 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v34 = a6;
  v29 = v38;
  v33 = a5;
  v18 = v14;
  v28 = v18;
  v35 = a4;
  v19 = v13;
  v27 = v19;
  ControllerImpl::safeWork(v15, v26, (uint64_t)"deactivateSessionForListening");

  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Block_object_dispose(v38, 8);
  TraceMethod::~TraceMethod((TraceMethod *)v39);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v40);

}

void sub_19B7CBCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose(va1, 8);
  TraceMethod::~TraceMethod((TraceMethod *)(v16 - 128));
  TraceWrapper::~TraceWrapper((TraceWrapper *)(v16 - 120));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  unint64_t v37;
  id v38;
  id v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  id v62;
  int8x8_t *v63;
  int8x8_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *i;
  unint64_t v71;
  NSObject *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _BOOL4 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  void (*v83)(uint64_t);
  void *v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  _QWORD v96[4];
  id v97;
  id v98;
  id v99[3];
  _BYTE v100[16];
  _QWORD *v101;
  std::__shared_weak_count *v102;
  _BYTE buf[18];
  __int16 v104;
  _BYTE v105[12];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(void **)(a1 + 64);
  v4 = *(std::__shared_weak_count **)(a1 + 72);
  v99[1] = v2;
  v99[2] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SessionLock::SessionLock(v100, (uint64_t)v2, v4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *(_DWORD *)(a1 + 88);
  if ((v9 & 1) == 0)
  {
    v10 = 0;
    goto LABEL_36;
  }
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (!ControllerImpl::audioSessionForStreamIDIsPrimary((ControllerImpl *)v11, v12))
  {
    ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)buf, *(_QWORD *)(v11 + 576), *(std::__shared_weak_count **)(v11 + 584), v12);
    if (*(_QWORD *)buf)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 64))(*(_QWORD *)buf, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setClientRequestsRecording:", 0);

      (*(void (**)(_QWORD))(**(_QWORD **)buf + 288))(*(_QWORD *)buf);
      v20 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
      v20 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    goto LABEL_35;
  }
  v13 = *(_QWORD **)(v11 + 576);
  v14 = *(std::__shared_weak_count **)(v11 + 584);
  v101 = v13;
  v102 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v13)
  {
    *(_QWORD *)buf = &off_1E3BE5980;
    *(_QWORD *)&v105[4] = buf;
    AVVCRecordingEngineMap::for_each_engine(v13, (uint64_t)buf, (uint64_t)"switchRecordModeOnDeactivate");
    v17 = *(_QWORD **)&v105[4];
    if (*(_BYTE **)&v105[4] == buf)
    {
      v18 = 4;
      v17 = buf;
    }
    else
    {
      if (!*(_QWORD *)&v105[4])
        goto LABEL_29;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
LABEL_29:
  if (v14)
  {
    v24 = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = 0;
LABEL_35:
  v10 = v20;
  v9 = *(_DWORD *)(a1 + 88);
LABEL_36:
  if ((v9 & 2) != 0)
  {
    v26 = *(_QWORD *)(a1 + 64);
    v27 = *(_QWORD *)(a1 + 80);
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    ControllerImpl::sessionManagerForStreamID(v26, v28, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "getSessionActivationOptions");

    if ((v27 & 1) != 0)
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v34 = *(id *)kAVVCScope;
          if (v34)
          {
            v35 = v34;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 527;
              _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d setNoResumeOnDeactivate(FALSE): will notify others on deactivation", buf, 0x12u);
            }

          }
        }
      }
      v33 = v30 | 1u;
    }
    else
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v31 = *(id *)kAVVCScope;
          if (v31)
          {
            v32 = v31;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 523;
              _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d setNoResumeOnDeactivate(TRUE): will not notify others on deactivation", buf, 0x12u);
            }

          }
        }
      }
      v33 = v30 & 0xFFFFFFFE;
    }
    ControllerImpl::sessionManagerForStreamID(v26, v28, 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setSessionActivationOptions:", v33);

  }
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v101, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 64) + 584), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v99[0] = v10;
  ControllerImpl::sessionManagerForStreamID(v3, v37, (uint64_t)v99);
  v38 = (id)objc_claimAutoreleasedReturnValue();
  v39 = v99[0];

  if (v39 || !v38)
  {
    if (kAVVCScope)
    {
      v45 = *(id *)kAVVCScope;
      if (!v45)
        goto LABEL_91;
    }
    else
    {
      v45 = MEMORY[0x1E0C81028];
      v62 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 580;
      v104 = 2112;
      *(_QWORD *)v105 = v39;
      _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivateSessionForListening() returned error(%@)", buf, 0x1Cu);
    }

LABEL_91:
    v63 = *(int8x8_t **)(a1 + 64);
    v64 = v63[61];
    if (v64)
    {
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v66 = *(_QWORD *)(v65 + 24);
      v67 = (uint8x8_t)vcnt_s8(v64);
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        v68 = *(_QWORD *)(v65 + 24);
        if (v66 >= *(_QWORD *)&v64)
          v68 = v66 % *(_QWORD *)&v64;
      }
      else
      {
        v68 = (*(_QWORD *)&v64 - 1) & v66;
      }
      v69 = *(_QWORD **)(*(_QWORD *)&v63[60] + 8 * v68);
      if (v69)
      {
        for (i = (_QWORD *)*v69; i; i = (_QWORD *)*i)
        {
          v71 = i[1];
          if (v66 == v71)
          {
            if (i[2] == v66)
            {
              *(_QWORD *)(v65 + 24) = 0;
              ControllerImpl::sessionManagerForStreamID(v3, 0, 0);
              v81 = objc_claimAutoreleasedReturnValue();

              v38 = (id)v81;
              goto LABEL_55;
            }
          }
          else
          {
            if (v67.u32[0] > 1uLL)
            {
              if (v71 >= *(_QWORD *)&v64)
                v71 %= *(_QWORD *)&v64;
            }
            else
            {
              v71 &= *(_QWORD *)&v64 - 1;
            }
            if (v71 != v68)
              break;
          }
        }
      }
    }
    if (kAVVCScope)
    {
      v72 = *(id *)kAVVCScope;
      if (!v72)
      {
LABEL_114:
        v75 = *(_QWORD *)(a1 + 64);
        v76 = *(void **)(a1 + 40);
        v77 = v76 != 0;
        v96[0] = MEMORY[0x1E0C809B0];
        v96[1] = 3221225472;
        v96[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_86;
        v96[3] = &unk_1E3BECD08;
        v98 = v76;
        v97 = v39;
        ControllerImpl::safeNotifyAlwaysAsync(v75, v77, v96);

        goto LABEL_115;
      }
    }
    else
    {
      v72 = MEMORY[0x1E0C81028];
      v73 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 586;
      v104 = 2048;
      *(_QWORD *)v105 = v74;
      _os_log_impl(&dword_19B733000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d StreamID(%lu) is not associated with primary session, noop", buf, 0x1Cu);
    }

    goto LABEL_114;
  }
LABEL_55:
  v41 = v101;
  v40 = v102;
  v94 = v101;
  v95 = v102;
  if (v102)
  {
    v42 = (unint64_t *)&v102->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v44 = v102;
  }
  else
  {
    v44 = 0;
  }
  v82[0] = MEMORY[0x1E0C809B0];
  v82[1] = 3321888768;
  v83 = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2;
  v84 = &unk_1E3BEB240;
  v93 = *(_BYTE *)(a1 + 92);
  v88 = *(_QWORD *)(a1 + 48);
  v89 = v41;
  v90 = v44;
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v38 = v38;
  v49 = *(_QWORD *)(a1 + 64);
  v48 = *(std::__shared_weak_count **)(a1 + 72);
  v85 = v38;
  v91 = v49;
  v92 = v48;
  if (v48)
  {
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v87 = *(id *)(a1 + 40);
  v86 = *(id *)(a1 + 32);
  v52 = v82;
  v53 = v52;
  if (v41)
    (*(void (**)(_QWORD *, _QWORD *, const char *))(*v41 + 360))(v41, v52, "AVVCDoSafeOrSynchronousWork");
  else
    v83((uint64_t)v52);

  if (v40)
  {
    v54 = (unint64_t *)&v40->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  v56 = v92;
  if (v92)
  {
    v57 = (unint64_t *)&v92->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  v59 = v90;
  if (v90)
  {
    v60 = (unint64_t *)&v90->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_115:

  v78 = v102;
  if (v102)
  {
    v79 = (unint64_t *)&v102->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  VCLocker::~VCLocker((VCLocker *)v100);
}

void sub_19B7CC630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v3 - 144);
  VCLocker::~VCLocker((VCLocker *)(v3 - 160));
  _Unwind_Resume(a1);
}

void ControllerImpl::safeWork(uint64_t a1, void *a2, uint64_t a3)
{
  void (**v5)(_QWORD);
  std::recursive_mutex *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v6 = (std::recursive_mutex *)(a1 + 104);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 104));
      if (*(_BYTE *)(a1 + 520))
      {
        v7 = *(NSObject **)kAVVCScope;
        CALog::Scope::oslog(*(id *)kAVVCScope);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          v9 = 136315138;
          v10 = a3;
          _os_log_fault_impl(&dword_19B733000, v7, OS_LOG_TYPE_FAULT, "Warning: Tyring to do safeWork on impl work queue while in tearDown. Caller: %s", (uint8_t *)&v9, 0xCu);
        }

      }
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      v5[2](v5);
    }
  }

}

void sub_19B7CC888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 64);
}

uint64_t ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_86(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void ControllerImpl::safeNotifyAlwaysAsync(uint64_t a1, int a2, void *a3)
{
  void (**v5)(void);
  std::recursive_mutex *v6;
  void (**v7)(void);

  v5 = a3;
  if (v5 && a2)
  {
    v7 = v5;
    v6 = (std::recursive_mutex *)(a1 + 40);
    std::recursive_mutex::lock(v6);
    v7[2]();
    std::recursive_mutex::unlock(v6);
    v5 = v7;
  }

}

void sub_19B7CC94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  __CFString *v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  id v38;
  uint64_t v39;
  void *v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  _BOOL4 v44;
  id v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  id v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  id v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  id v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[4];
  id v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82[2];
  _QWORD v83[4];
  id v84;
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88[2];
  _QWORD v89[4];
  id v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94[2];
  _QWORD v95[4];
  id v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint8_t buf[4];
  const char *v100;
  __int16 v101;
  int v102;
  __int16 v103;
  const char *v104;
  __int16 v105;
  __CFString *v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  const char *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if ((!*(_BYTE *)(a1 + 96) || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)) && *(_QWORD *)(a1 + 64))
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_40;
    }
    else
    {
      v3 = (id)MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_39:

      goto LABEL_40;
    }
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v6 + 64))(*(_QWORD *)(a1 + 64), 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v1, "sessionState"))
      {
        case 0u:
          goto LABEL_12;
        case 1u:
          v7 = "Inactive";
          break;
        case 2u:
          v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v7 = "Deactivating";
          break;
        case 5u:
          v7 = "Prewarming";
          break;
        case 6u:
          v7 = "Activating";
          break;
        case 7u:
          v7 = "Active";
          break;
        default:
          v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_12:
      v7 = "NotConfigured";
    }
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(std::__shared_weak_count **)(a1 + 72);
    v97 = v8;
    v98 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      if (v8)
      {
        v12 = (void *)MEMORY[0x1E0CB3940];
        v13 = *(_QWORD *)(v8 + 272);
        v14 = *p_shared_owners + 1;
LABEL_20:
        objc_msgSend(v12, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v8, v13, v14);
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_22:
        v16 = v15;
        v17 = *(_QWORD *)(a1 + 64);
        if (v17)
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 320))(v17);
          if (v18 > 4)
            v19 = "ILLEGAL";
          else
            v19 = off_1E3BEC7A8[v18];
          v21 = *(_QWORD *)(a1 + 64);
          if (v21)
          {
            switch(*(_QWORD *)(v21 + 224))
            {
              case 0:
                v20 = "Invalid";
                break;
              case 1:
                v20 = "Uninitialized";
                break;
              case 2:
                v20 = "Prepared";
                break;
              case 3:
                v20 = "Stopped";
                break;
              case 4:
                v20 = "Starting";
                break;
              case 5:
                v20 = "Running";
                break;
              case 6:
                v20 = "Stopping";
                break;
              default:
                v20 = "ILLEGAL";
                break;
            }
          }
          else
          {
            v20 = "unconfigured";
          }
        }
        else
        {
          v19 = "unconfigured";
          v20 = "unconfigured";
        }
        *(_DWORD *)buf = 136316418;
        v100 = "ControllerImpl.mm";
        v101 = 1024;
        v102 = 599;
        v103 = 2080;
        v104 = v7;
        v105 = 2112;
        v106 = v16;
        v107 = 2080;
        v108 = v19;
        v109 = 2080;
        v110 = v20;
        _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v9)
        {
          v22 = (unint64_t *)&v9->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v6)

        goto LABEL_39;
      }
    }
    else if (v8)
    {
      v14 = 0;
      v12 = (void *)MEMORY[0x1E0CB3940];
      v13 = *(_QWORD *)(v8 + 272);
      goto LABEL_20;
    }
    v15 = CFSTR("(0x0) use_count:0");
    goto LABEL_22;
  }
LABEL_40:
  if (!objc_msgSend(*(id *)(a1 + 32), "sessionState"))
  {
    if (kAVVCScope)
    {
      v25 = *(id *)kAVVCScope;
      if (!v25)
      {
LABEL_61:
        v39 = *(_QWORD *)(a1 + 80);
        v40 = *(void **)(a1 + 48);
        v41 = v40 != 0;
        v95[0] = MEMORY[0x1E0C809B0];
        v95[1] = 3221225472;
        v95[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_89;
        v95[3] = &unk_1E3BECB00;
        v96 = v40;
        ControllerImpl::safeNotifyAlwaysAsync(v39, v41, v95);

        return;
      }
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
      v38 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v100 = "ControllerImpl.mm";
      v101 = 1024;
      v102 = 607;
      _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivateSessionForListening: Error! Attemtping to deactivate a session that is not configured.", buf, 0x12u);
    }

    goto LABEL_61;
  }
  if ((int)objc_msgSend(*(id *)(a1 + 32), "sessionState") < 5)
  {
    v26 = *(_QWORD *)(a1 + 64);
    v27 = *(_QWORD *)(a1 + 80);
    v28 = *(std::__shared_weak_count **)(a1 + 88);
    v82[0] = v27;
    v82[1] = (uint64_t)v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v27 = *(_QWORD *)(a1 + 80);
      v31 = *(std::__shared_weak_count **)(a1 + 88);
    }
    else
    {
      v31 = 0;
    }
    v77[0] = MEMORY[0x1E0C809B0];
    v77[1] = 3321888768;
    v77[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_3;
    v77[3] = &unk_1E3BEA918;
    v80 = v27;
    v81 = v31;
    if (v31)
    {
      v42 = (unint64_t *)&v31->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v26 != 0;
    v78 = *(id *)(a1 + 40);
    v74 = *(_OWORD *)(a1 + 48);
    v45 = (id)v74;
    v79 = v74;
    AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v44, v82, v77);
    if (v28)
    {
      v46 = (unint64_t *)&v28->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    v48 = v81;
    if (v81)
    {
      v49 = (unint64_t *)&v81->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
LABEL_108:
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isPrimary"))
    {
      if (kAVVCScope)
      {
        v24 = *(id *)kAVVCScope;
        if (!v24)
        {
LABEL_79:
          objc_msgSend(*(id *)(a1 + 32), "setSessionState:", 4);
          v52 = *(_QWORD *)(a1 + 64);
          v53 = *(std::__shared_weak_count **)(a1 + 88);
          v94[0] = *(_QWORD *)(a1 + 80);
          v94[1] = (uint64_t)v53;
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          v89[0] = MEMORY[0x1E0C809B0];
          v89[1] = 3321888768;
          v89[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_91;
          v89[3] = &unk_1E3BEA918;
          v56 = *(id *)(a1 + 40);
          v58 = *(_QWORD *)(a1 + 80);
          v57 = *(std::__shared_weak_count **)(a1 + 88);
          v90 = v56;
          v92 = v58;
          v93 = v57;
          if (v57)
          {
            v59 = (unint64_t *)&v57->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v75 = *(_OWORD *)(a1 + 48);
          v61 = (id)v75;
          v91 = v75;
          AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v52 != 0, v94, v89);
          if (v53)
          {
            v62 = (unint64_t *)&v53->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }

          v64 = v93;
          if (v93)
          {
            v65 = (unint64_t *)&v93->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }

          return;
        }
      }
      else
      {
        v24 = MEMORY[0x1E0C81028];
        v51 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v100 = "ControllerImpl.mm";
        v101 = 1024;
        v102 = 617;
        _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: Deactivating session with notify ####", buf, 0x12u);
      }

      goto LABEL_79;
    }
    v32 = *(_QWORD *)(a1 + 64);
    v33 = *(_QWORD *)(a1 + 80);
    v34 = *(std::__shared_weak_count **)(a1 + 88);
    v88[0] = v33;
    v88[1] = (uint64_t)v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v33 = *(_QWORD *)(a1 + 80);
      v37 = *(std::__shared_weak_count **)(a1 + 88);
    }
    else
    {
      v37 = 0;
    }
    v83[0] = MEMORY[0x1E0C809B0];
    v83[1] = 3321888768;
    v83[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_97;
    v83[3] = &unk_1E3BEA918;
    v86 = v33;
    v87 = v37;
    if (v37)
    {
      v67 = (unint64_t *)&v37->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = v32 != 0;
    v84 = *(id *)(a1 + 40);
    v76 = *(_OWORD *)(a1 + 48);
    v70 = (id)v76;
    v85 = v76;
    AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v69, v88, v83);
    if (v34)
    {
      v71 = (unint64_t *)&v34->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    v48 = v87;
    if (v87)
    {
      v73 = (unint64_t *)&v87->__shared_owners_;
      do
        v50 = __ldaxr(v73);
      while (__stlxr(v50 - 1, v73));
      goto LABEL_108;
    }
  }
}

void sub_19B7CD250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v5 - 192);
  if (v3)

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 64;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 80);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_89(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11781, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_19B7CD3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_91(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  OSStatus v9;
  OSStatus v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  const char *v14;
  int v15;
  id v16;
  const char *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  _QWORD v22[4];
  id v23;
  int v24;
  _QWORD v25[4];
  id v26;
  id location;
  uint8_t v28[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  OSStatus v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_93;
  v25[3] = &unk_1E3BECC30;
  objc_copyWeak(&v26, &location);
  ControllerImpl::safeNotify(v2, (uint64_t)"beginAudioSessionActivate", v25);
  ControllerImpl::stopKeepAliveQueue(*(ControllerImpl **)(*(_QWORD *)(a1 + 56) + 8), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 16));
  v4 = *(_QWORD *)(a1 + 56);
  if (!*(_DWORD *)(v4 + 364))
  {
    if (!ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v4))
    {
LABEL_37:
      v15 = ControllerImpl::deactivateSession(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32), (uint64_t)"deactivateSessionForListening1", *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
      goto LABEL_38;
    }
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
      {
        v6 = *(id *)kAVVCScope;
        if (v6)
        {
          v7 = v6;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            v35 = "ControllerImpl.mm";
            v36 = 1024;
            v37 = 636;
            _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d deactivateSessionForListening: resetting alert queue", buf, 0x12u);
          }

        }
      }
    }
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "deactivateSessionForListening_block_invoke", "deactivateSessionForListening:AudioQueueReset", 0);
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(*(ControllerImpl **)(a1 + 56));
    v9 = AudioQueueReset(AlertQueueFromImplQueue);
    v10 = v9;
    if (!v9)
    {
LABEL_36:
      ControllerImpl::setAlertQueueState(*(_QWORD *)(a1 + 56), 200);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      goto LABEL_37;
    }
    if ((v9 + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        v11 = *(id *)kAVVCScope;
        if (!v11)
          goto LABEL_36;
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
        v18 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      *(_DWORD *)v28 = 136315650;
      v29 = "ControllerImpl.mm";
      v30 = 1024;
      v31 = 639;
      v32 = 1024;
      v33 = v10;
      v17 = "%25s:%-5d ERROR: setSessionActive(false): ignoring AudioQueueReset err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v11 = *(id *)kAVVCScope;
        if (!v11)
          goto LABEL_36;
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
        v16 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      *(_DWORD *)v28 = 136315650;
      v29 = "ControllerImpl.mm";
      v30 = 1024;
      v31 = 639;
      v32 = 1024;
      v33 = v10;
      v17 = "%25s:%-5d ERROR: setSessionActive(false): ignoring AudioQueueReset err %d";
    }
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, v17, v28, 0x18u);
LABEL_35:

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    v5 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_18;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_18:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 364);
      if (v13 > 3)
        v14 = "ILLEGAL";
      else
        v14 = off_1E3BEC720[v13];
      *(_DWORD *)buf = 136315650;
      v35 = "ControllerImpl.mm";
      v36 = 1024;
      v37 = 646;
      v38 = 2080;
      v39 = v14;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deactivateSessionForListening: alert state %s -- deactivating session in alertFinished", buf, 0x1Cu);
    }

  }
  ControllerImpl::notifyAlertFinished(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32));
  v15 = 0;
LABEL_38:
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(void **)(a1 + 40);
  v21 = v20 != 0;
  v22[0] = v3;
  v22[1] = 3221225472;
  v22[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_96;
  v22[3] = &unk_1E3BEBE50;
  v24 = v15;
  v23 = v20;
  ControllerImpl::safeNotifyAlwaysAsync(v19, v21, v22);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void sub_19B7CD828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(int a1, uint64_t *a2, void *a3)
{
  void (**v5)(_QWORD);

  v5 = a3;
  if (v5)
  {
    if (a1)
      ControllerImpl::safeWork(*a2, v5, (uint64_t)"AVVCDoSafeOrSynchronousWork");
    else
      v5[2](v5);
  }

}

void sub_19B7CD8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_97(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  int v7;

  v1 = a1;
  v2 = ControllerImpl::deactivateSession(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32), (uint64_t)"deactivateSessionForListening1", *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(void **)(v1 + 40);
  LODWORD(v1) = v4 != 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_98;
  v5[3] = &unk_1E3BEBE50;
  v7 = v2;
  v6 = v4;
  ControllerImpl::safeNotifyAlwaysAsync(v3, v1, v5);

}

void sub_19B7CD98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  AVVoiceController *v4;
  id v5;
  id v6;
  NSObject *v7;
  unsigned int SessionState;
  const char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  _BOOL4 v17;
  _QWORD v18[4];
  id v19;
  int v20;
  id location;
  std::__shared_weak_count *v22;
  _BYTE buf[38];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v4 = (AVVoiceController *)*(id *)(a1 + 32);
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    v5 = (id)MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&location, *(_QWORD *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
    SessionState = ControllerImpl::getSessionState((ControllerImpl *)location, (unint64_t)v3);
    if (SessionState > 7)
      v9 = "ILLEGAL";
    else
      v9 = off_1E3BEC8F0[SessionState];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 856;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "deactivateSessionForListening2";
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v9;
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s - setSessionActive(false): session state already %s -- forcing deactivation", buf, 0x26u);
    v10 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

LABEL_15:
  ControllerImpl::setSessionState(v2, 4, (unint64_t)v3);
  objc_initWeak(&location, v4);
  v13 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN14ControllerImpl35forceDeactivateSessionAndFixupStateEP17AVVoiceControlleriPKcm_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E3BECC30;
  objc_copyWeak((id *)&buf[32], &location);
  ControllerImpl::safeNotify(v2, (uint64_t)"beginAudioSessionActivate", buf);
  v14 = ControllerImpl::deactivateSession((ControllerImpl *)v2, v4, (uint64_t)"deactivateSessionForListening2", v3);
  objc_destroyWeak((id *)&buf[32]);
  objc_destroyWeak(&location);

  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(void **)(a1 + 40);
  v17 = v16 != 0;
  v18[0] = v13;
  v18[1] = 3221225472;
  v18[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_4;
  v18[3] = &unk_1E3BEBE50;
  v20 = v14;
  v19 = v16;
  ControllerImpl::safeNotifyAlwaysAsync(v15, v17, v18);

}

void sub_19B7CDC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&location);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  v4 = (id)v3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19B7CDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::getSessionState(ControllerImpl *this, unint64_t a2)
{
  void *v2;
  uint64_t v3;

  ControllerImpl::sessionManagerForStreamID((uint64_t)this, a2, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "sessionState");

  return v3;
}

void sub_19B7CDD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ControllerImpl::setSessionState(uint64_t a1, uint64_t a2, unint64_t a3)
{
  NSObject *v6;
  id v7;
  const char *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 7)
      v8 = "ILLEGAL";
    else
      v8 = off_1E3BEC8F0[a2];
    v10 = 136315906;
    v11 = "ControllerImpl.h";
    v12 = 1024;
    v13 = 369;
    v14 = 1024;
    v15 = a3;
    v16 = 2080;
    v17 = v8;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d session state(streamID %d) => %s", (uint8_t *)&v10, 0x22u);
  }

LABEL_11:
  ControllerImpl::sessionManagerForStreamID(a1, a3, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setSessionState:", a2);

}

void sub_19B7CDE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl35forceDeactivateSessionAndFixupStateEP17AVVoiceControlleriPKcm_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "beginAudioSessionActivate:", 0);
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 862;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7CDFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ControllerImpl::safeNotify(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  std::recursive_mutex *v6;
  NSObject *v7;
  id v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v6 = (std::recursive_mutex *)(a1 + 40);
      std::recursive_mutex::lock(v6);
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
      goto LABEL_14;
    }
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_13:
        v5[2](v5);
        goto LABEL_14;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315650;
      v10 = "ControllerImpl.mm";
      v11 = 1024;
      v12 = 4419;
      v13 = 2080;
      v14 = a2;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling %s synchronously", (uint8_t *)&v9, 0x1Cu);
    }

    goto LABEL_13;
  }
LABEL_14:

}

void sub_19B7CE13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::deactivateSession(ControllerImpl *this, AVVoiceController *a2, uint64_t a3, const char *a4)
{
  uint64_t SessionState;
  void *v7;
  int v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  id v25;
  AVVoiceController *val;
  _QWORD v28[4];
  id v29;
  _QWORD aBlock[4];
  id v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  int v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[16];
  uint8_t v45[4];
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint8_t *v52;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  val = a2;
  v40 = 4112;
  v41 = 1;
  v42 = 0u;
  v43 = 0u;
  kdebug_trace();
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = __Block_byref_object_copy__4869;
  v38 = __Block_byref_object_dispose__4870;
  v39 = 0;
  SessionState = ControllerImpl::getSessionState(this, (unint64_t)a4);
  ControllerImpl::sessionManagerForStreamID((uint64_t)this, (unint64_t)a4, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "getSessionActivationOptions");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke;
  aBlock[3] = &unk_1E3BEC8C8;
  v9 = v7;
  v33 = v8;
  v31 = v9;
  v32 = &v34;
  v10 = _Block_copy(aBlock);
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_8;
  }
  else
  {
    v11 = (id)MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    ControllerImpl::audioSessionForStreamID((uint64_t)this, (unint64_t)a4, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    v54 = "ControllerImpl.mm";
    v55 = 1024;
    v56 = 881;
    v57 = 2048;
    v58 = v14;
    v59 = 2048;
    v60 = v9;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deactivate session (%p) (session mananger (%p))", buf, 0x26u);

  }
LABEL_8:
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "deactivateSession", "AVAudioSessionDeactivate", 0);
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "measureElapseTimeForMetric:block:", CFSTR("SetSessionInactiveTime"), v10);

  if ((v16 & 1) != 0)
    goto LABEL_9;
  v17 = objc_msgSend((id)v35[5], "code");
  if (!(_DWORD)v17)
    goto LABEL_9;
  if (kAVVCScope)
  {
    v18 = *(id *)kAVVCScope;
    if (!v18)
      goto LABEL_18;
  }
  else
  {
    v18 = (id)MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  v20 = v18;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v44, v17);
    *(_DWORD *)v45 = 136315906;
    v46 = "ControllerImpl.mm";
    v47 = 1024;
    v48 = 888;
    v49 = 2080;
    v50 = a3;
    v51 = 2080;
    v52 = v44;
    _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: %s setActive:FALSE withOptions: err %s", v45, 0x26u);
  }

LABEL_18:
  if ((_DWORD)v17 == 560030580)
  {
LABEL_9:
    ControllerImpl::setSessionState((uint64_t)this, 1, (unint64_t)a4);
LABEL_31:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((_QWORD *)this + 60);
    v17 = 0;
    goto LABEL_32;
  }
  if ((_DWORD)v17 == 1836282486)
  {
    ControllerImpl::setSessionState((uint64_t)this, 0, (unint64_t)a4);
    if (kAVVCScope)
    {
      v21 = *(id *)kAVVCScope;
      if (!v21)
        goto LABEL_31;
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
      v23 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v45 = 136315650;
      v46 = "ControllerImpl.mm";
      v47 = 1024;
      v48 = 897;
      v49 = 2080;
      v50 = a3;
      _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s - error AVAudioSessionErrorCodeMediaServicesFailed ####", v45, 0x1Cu);
    }

    goto LABEL_31;
  }
  ControllerImpl::setSessionState((uint64_t)this, SessionState, (unint64_t)a4);
  if (kAVVCScope)
  {
    v22 = *(id *)kAVVCScope;
    if (!v22)
      goto LABEL_32;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
    v25 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v45 = 136315650;
    v46 = "ControllerImpl.mm";
    v47 = 1024;
    v48 = 893;
    v49 = 2080;
    v50 = a3;
    _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s - error ####", v45, 0x1Cu);
  }

LABEL_32:
  kdebug_trace();
  if (ControllerImpl::audioSessionForStreamIDIsPrimary(this, (unint64_t)a4))
  {
    objc_initWeak((id *)v45, val);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke_111;
    v28[3] = &unk_1E3BECC30;
    objc_copyWeak(&v29, (id *)v45);
    ControllerImpl::safeNotify((uint64_t)this, (uint64_t)"endAudioSessionActivate", v28);
    objc_destroyWeak(&v29);
    objc_destroyWeak((id *)v45);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);

  _Block_object_dispose(&v34, 8);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v40);

  return v17;
}

void sub_19B7CE748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  void *v44;
  void *v45;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a43);
  _Block_object_dispose(&a24, 8);

  TraceWrapper::~TraceWrapper((TraceWrapper *)&a30);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4869(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4870(uint64_t a1)
{

}

uint64_t ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id obj;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(v2, "setActive:withOptions:error:", 0, v1, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

BOOL ControllerImpl::audioSessionForStreamIDIsPrimary(ControllerImpl *this, unint64_t a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  ControllerImpl::audioSessionForStreamID((uint64_t)this, a2, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFF1C0], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v2 == v3;

  return v4;
}

void sub_19B7CE924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke_111(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "endAudioSessionActivate:", 0);
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 919;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7CEA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  v4 = (id)v3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19B7CEAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_93(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "beginAudioSessionActivate:", 0);
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 627;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7CEBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ControllerImpl::stopKeepAliveQueue(ControllerImpl *this, std::__shared_weak_count *a2)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v7, (uint64_t)this, a2);
  +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stopWithCompletion:", 0);

  +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destroyWithCompletion:", 0);

  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19B7CEC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ControllerImpl::notifyAlertFinished(ControllerImpl *this, AVVoiceController *a2)
{
  AVVoiceController *v3;
  ControllerImpl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  void *v11;
  void *v12;
  ControllerImpl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[4];
  id v18[3];
  int v19;
  id location[3];
  _BYTE v21[16];
  ControllerImpl *v22;
  std::__shared_weak_count *v23;

  v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v22, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v4 = v22;
  v5 = v23;
  location[1] = v22;
  location[2] = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  AlertLock::AlertLock(v21, (uint64_t)v4, v5);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *((_DWORD *)v22 + 51);
  if (v10)
  {
    v11 = (void *)*((_QWORD *)v22 + 26);
    v12 = (void *)*((_QWORD *)v22 + 49);
    objc_initWeak(location, v3);
    v13 = v22;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = ___ZN14ControllerImpl19notifyAlertFinishedEP17AVVoiceController_block_invoke;
    v17[3] = &unk_1E3BEC000;
    objc_copyWeak(v18, location);
    v19 = v10;
    v18[1] = v11;
    v18[2] = v12;
    ControllerImpl::safeNotify((uint64_t)v13, (uint64_t)"notifyAlertFinished", v17);
    ControllerImpl::alertFinished(v22, v3);
    objc_destroyWeak(v18);
    objc_destroyWeak(location);
  }
  VCLocker::~VCLocker((VCLocker *)v21);
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

}

void sub_19B7CEE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  void *v19;
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  VCLocker::~VCLocker((VCLocker *)(v21 - 80));
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_96(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  v4 = (id)v3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19B7CEF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19notifyAlertFinishedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  id WeakRetained;
  AVVCAlertInformation *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = -[AVVCAlertInformation initWithAlertType:mode:endTime:]([AVVCAlertInformation alloc], "initWithAlertType:mode:endTime:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(WeakRetained, "alertPlaybackFinishedWithSettings:", v3);

  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 2601;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7CF040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void ControllerImpl::alertFinished(ControllerImpl *this, AVVoiceController *a2)
{
  AVVoiceController *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  id v15;
  int v16;
  const char *v17;
  id v18;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  int v23;
  int v24;
  NSObject *v25;
  id v26;
  const char *v27;
  id v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[4];
  id v34;
  id v35[3];
  _BYTE v36[16];
  _BYTE v37[8];
  void *v38;
  std::__shared_weak_count *v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v38, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  TraceMethod::TraceMethod((TraceMethod *)v37, "alertFinished");
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "ControllerImpl.mm";
    v42 = 1024;
    v43 = 2542;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alertFinished", buf, 0x12u);
  }

LABEL_8:
  ControllerImpl::setAlertState((uint64_t)this, 0);
  if (*((int *)this + 90) > 201)
  {
    ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "sessionState") != 4)
    {
LABEL_64:

      if (ControllerImpl::getAlertQueueFromImplQueue(this))
        v29 = 200;
      else
        v29 = 0;
      ControllerImpl::setAlertQueueState((uint64_t)this, v29);
      *((_DWORD *)this + 51) = 0;
      *((_QWORD *)this + 26) = 0;
      goto LABEL_68;
    }
    v8 = (uint64_t)v38;
    v9 = v39;
    v35[1] = v38;
    v35[2] = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    SessionLock::SessionLock(v36, v8, v9);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_32;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v41 = "ControllerImpl.mm";
      v42 = 1024;
      v43 = 2559;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alertFinished: deactivating session -- finishing the job", buf, 0x12u);
    }

LABEL_32:
    v19 = objc_msgSend(v7, "sessionState");
    v35[0] = 0;
    v20 = objc_msgSend(v7, "setActive:withOptions:error:", 0, objc_msgSend(v7, "getSessionActivationOptions"), v35);
    v21 = v35[0];
    v22 = v21;
    if ((v20 & 1) != 0)
    {
      objc_msgSend(v7, "setSessionState:", 1);
LABEL_63:
      objc_initWeak((id *)buf, v3);
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = ___ZN14ControllerImpl13alertFinishedEP17AVVoiceController_block_invoke;
      v33[3] = &unk_1E3BECC30;
      objc_copyWeak(&v34, (id *)buf);
      ControllerImpl::safeNotify((uint64_t)this, (uint64_t)"endAudioSessionActivate", v33);
      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

      VCLocker::~VCLocker((VCLocker *)v36);
      goto LABEL_64;
    }
    v23 = objc_msgSend(v21, "code");
    v24 = v23;
    if (v23)
    {
      if ((v23 + 199999) <= 0x61A7E)
      {
        if (kAVVCScope)
        {
          v25 = *(id *)kAVVCScope;
          if (!v25)
            goto LABEL_61;
        }
        else
        {
          v25 = MEMORY[0x1E0C81028];
          v26 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v41 = "ControllerImpl.mm";
          v42 = 1024;
          v43 = 2566;
          v44 = 1024;
          LODWORD(v45) = v24;
          v27 = "%25s:%-5d ERROR: alertFinished: setActive:FALSE withOptions: err %d";
LABEL_59:
          _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, v27, buf, 0x18u);
          goto LABEL_60;
        }
        goto LABEL_60;
      }
      if (kAVVCScope)
      {
        v25 = *(id *)kAVVCScope;
        if (!v25)
          goto LABEL_61;
      }
      else
      {
        v25 = MEMORY[0x1E0C81028];
        v28 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v41 = "ControllerImpl.mm";
        v42 = 1024;
        v43 = 2566;
        v44 = 1024;
        LODWORD(v45) = v24;
        v27 = "%25s:%-5d ERROR: alertFinished: setActive:FALSE withOptions: err %{audio:4CC}d";
        goto LABEL_59;
      }
LABEL_60:

    }
LABEL_61:
    if (v24 != 560030580)
      objc_msgSend(v7, "setSessionState:", v19);
    goto LABEL_63;
  }
  if (!kAVVCScope)
  {
    v6 = MEMORY[0x1E0C81028];
    v15 = MEMORY[0x1E0C81028];
    goto LABEL_25;
  }
  v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_25:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v16 = *((_DWORD *)this + 90);
      switch(v16)
      {
        case 200:
          v17 = "stopped";
          break;
        case 201:
          v17 = "primed";
          break;
        case 202:
          v17 = "stopping";
          break;
        case 203:
          v17 = "started";
          break;
        case 204:
          v17 = "running";
          break;
        default:
          if (v16)
            v17 = "ILLEGAL";
          else
            v17 = "uninit";
          break;
      }
      *(_DWORD *)buf = 136315650;
      v41 = "ControllerImpl.mm";
      v42 = 1024;
      v43 = 2547;
      v44 = 2080;
      v45 = v17;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertFinished: state = %s -- not priming alert", buf, 0x1Cu);
    }

  }
  if (*((_DWORD *)this + 90) != 201)
    ControllerImpl::setAlertQueueState((uint64_t)this, 200);
LABEL_68:
  TraceMethod::~TraceMethod((TraceMethod *)v37);
  v30 = v39;
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

}

void sub_19B7CF660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,id location)
{
  void *v26;
  void *v27;
  void *v28;

  VCLocker::~VCLocker((VCLocker *)&a18);
  TraceMethod::~TraceMethod((TraceMethod *)&a20);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a22);

  _Unwind_Resume(a1);
}

void ControllerImpl::setAlertState(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = off_1E3BEC720[a2];
    v7 = 136315650;
    v8 = "ControllerImpl.h";
    v9 = 1024;
    v10 = 545;
    v11 = 2080;
    v12 = v6;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alert state => %s", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_8:
  *(_DWORD *)(a1 + 364) = a2;
}

void ___ZN14ControllerImpl13alertFinishedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "endAudioSessionActivate:", 0);
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 2578;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7CF8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3BE5980;
  return result;
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3BE5980;
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFF1C0], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 == v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setClientRequestsRecording:", 0);

    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 288))(v3);
  }
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7CFA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 76);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_DWORD *)(a1 + 72);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke_2;
  v12[3] = &unk_1E3BEBE78;
  v10 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v13 = v3;
  v14 = v9;
  v11 = v3;
  ControllerImpl::deactivateSessionForListening(v4, v10, v5, v6, v7, v8, v12);

}

void sub_19B7CFB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
    LODWORD(v3) = objc_msgSend(v3, "code");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)v3;
  v4 = *(NSObject **)(a1 + 32);
  if (v4)
    dispatch_semaphore_signal(v4);

}

void sub_19B7CFBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::handlePluginDidPublishDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    v8 = (id)MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  v10 = v8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v7, "deviceIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 136316162;
    v13 = "ControllerImpl.mm";
    v14 = 1024;
    v15 = 723;
    v16 = 2048;
    v17 = v6;
    v18 = 2048;
    v19 = v7;
    v20 = 2112;
    v21 = v11;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handlePluginDidPublishDevice notification for plugin(%p), device(%p), deviceID(%@)", (uint8_t *)&v12, 0x30u);

  }
LABEL_8:

}

void sub_19B7CFD0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ControllerImpl::_removeEngineFromMap(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void (**v11)(_QWORD);
  NSString *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  id v34;
  id v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD v44[4];
  id v45;
  void (**v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  NSString *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  NSString *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE buf[18];
  __int16 v61;
  unint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a4;
  v11 = a5;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v58, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v12 = *(NSString **)(v58 + 576);
  v13 = *(std::__shared_weak_count **)(v58 + 584);
  v56 = v12;
  v57 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v12)
  {
    v54 = 0;
    v55 = 0;
    if (v10)
      AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, v12, v10);
    else
      AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, (uint64_t)v12, a3);
    v17 = *(_QWORD *)buf;
    v54 = *(_QWORD *)buf;
    v55 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)buf)
    {
      v44[0] = MEMORY[0x1E0C809B0];
      v44[1] = 3321888768;
      v44[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke;
      v44[3] = &unk_1E3BE9ED8;
      v47 = a1;
      v48 = *(_QWORD *)buf;
      v49 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v50 = v58;
      v51 = v59;
      if (v59)
      {
        v20 = (unint64_t *)&v59->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v52 = v12;
      v53 = v13;
      if (v13)
      {
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v45 = v9;
      v46 = v11;
      (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v17 + 360))(v17, v44, "_removeEngineFromMap");

      v24 = v53;
      if (v53)
      {
        v25 = (unint64_t *)&v53->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v51;
      if (v51)
      {
        v28 = (unint64_t *)&v51->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v49;
      if (v49)
      {
        v31 = (unint64_t *)&v49->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
LABEL_51:
      v36 = v55;
      if (v55)
      {
        v37 = (unint64_t *)&v55->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v13 = v57;
      goto LABEL_57;
    }
    if (kAVVCScope)
    {
      v33 = *(id *)kAVVCScope;
      if (!v33)
      {
LABEL_49:
        if (v11)
          v11[2](v11);
        goto LABEL_51;
      }
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
      v35 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4215;
      v61 = 2048;
      v62 = a3;
      _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine for streamID(%llu) not found.", buf, 0x1Cu);
    }

    goto LABEL_49;
  }
  if (!kAVVCScope)
  {
    v16 = MEMORY[0x1E0C81028];
    v34 = MEMORY[0x1E0C81028];
    goto LABEL_40;
  }
  v16 = *(id *)kAVVCScope;
  if (v16)
  {
LABEL_40:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4201;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }

  }
  if (v11)
    v11[2](v11);
LABEL_57:
  if (v13)
  {
    v39 = (unint64_t *)&v13->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v41 = v59;
  if (v59)
  {
    v42 = (unint64_t *)&v59->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

}

void sub_19B7D01BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[4];
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  __CFString *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 272);
  if (!kAVVCScope)
  {
    v4 = (id)MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
LABEL_5:
    v6 = v4;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_21:

      goto LABEL_22;
    }
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v50 = v7;
    v51 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      if (v7)
      {
        v11 = (void *)MEMORY[0x1E0CB3940];
        v12 = *(_QWORD *)(v7 + 272);
        v13 = *p_shared_owners + 1;
LABEL_13:
        objc_msgSend(v11, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v7, v12, v13);
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_15;
      }
    }
    else if (v7)
    {
      v13 = 0;
      v11 = (void *)MEMORY[0x1E0CB3940];
      v12 = *(_QWORD *)(v7 + 272);
      goto LABEL_13;
    }
    v14 = CFSTR("(0x0) use_count:0");
LABEL_15:
    *(_DWORD *)buf = 136315906;
    v53 = "ControllerImpl.mm";
    v54 = 1024;
    v55 = 4222;
    v56 = 2112;
    v57 = v14;
    v58 = 2048;
    v59 = v3;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d removeEngineFromMapWithStreamID: engine[%@] stream(%llu) ", buf, 0x26u);
    if (v8)
    {
      v15 = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    goto LABEL_21;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
    goto LABEL_5;
LABEL_22:
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
  if (v17 >= 4)
  {
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_30:
        AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), -11791, "_removeEngineFromMap_block_invoke");
        goto LABEL_31;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v53 = "ControllerImpl.mm";
      v54 = 1024;
      v55 = 4227;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping recording here, engine's remote device has been disconnected.", buf, 0x12u);
    }

    goto LABEL_30;
  }
LABEL_31:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v48, *(_QWORD *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
  RecordLock::RecordLock(buf, v48, v49);
  v20 = v49;
  if (v49)
  {
    v21 = &v49->__shared_owners_;
    do
      v22 = __ldaxr((unint64_t *)v21);
    while (__stlxr(v22 - 1, (unint64_t *)v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 56) + 112))(*(_QWORD *)(a1 + 56), v17 > 3);
  VCLocker::~VCLocker((VCLocker *)buf);
  AVVCRecordingEngine::resetCompletionBlocks(*(AVVCRecordingEngine **)(*(_QWORD *)(a1 + 56) + 8), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 16));
  v23 = *(_QWORD *)(a1 + 72);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3321888768;
  v39[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_276;
  v39[3] = &unk_1E3BEB198;
  v25 = *(_QWORD *)(a1 + 88);
  v24 = *(std::__shared_weak_count **)(a1 + 96);
  v42 = v2;
  v43 = v25;
  v44 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v45 = v3;
  v28 = *(id *)(a1 + 32);
  v30 = *(_QWORD *)(a1 + 72);
  v29 = *(std::__shared_weak_count **)(a1 + 80);
  v40 = v28;
  v46 = v30;
  v47 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v41 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v23, v39, (uint64_t)"_removeEngineFromMap_block_invoke");

  v33 = v47;
  if (v47)
  {
    v34 = (unint64_t *)&v47->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_19B7D066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[12];
  result[11] = a2[11];
  result[12] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 56;
  v2 = a1 + 72;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

_BYTE *RecordLock::RecordLock(_BYTE *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  VCLocker::VCLocker(a1, a2, 1u);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void sub_19B7D07F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_276(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7[2];
  id location;

  v2 = *(_QWORD *)(a1 + 48);
  AVVCRecordingEngineMap::removeEngine(*(AVVCRecordingEngineMap **)(a1 + 56), *(_QWORD *)(a1 + 72));
  v3 = *(_QWORD *)(a1 + 72);
  if (!v3 || *(_QWORD *)(v2 + 472) == v3)
    *(_QWORD *)(v2 + 472) = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 80);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_2;
  v6[3] = &unk_1E3BEC028;
  objc_copyWeak(v7, &location);
  v7[1] = *(id *)(a1 + 72);
  ControllerImpl::safeNotify(v4, (uint64_t)"notifyStreamInvalidated", v6);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(void))(v5 + 16))();
  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_19B7D08E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 80);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "notifyStreamInvalidated:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 4244;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7D0A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::configureAlerts(ControllerImpl *this, AVVoiceController *a2)
{
  AVVoiceController *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  int v9;
  _BYTE v10[8];
  _BYTE v11[160];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v10, "configureAlerts");
  ElapsedTime::ElapsedTime((ElapsedTime *)v11, "configureAlerts", 0, 0);
  v9 = 1;
  v4 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 1, &v9);
  v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 1, v4[5]);
  if (!(_DWORD)v5)
  {
    v9 = 2;
    v6 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 2, &v9);
    v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 2, v6[5]);
    if (!(_DWORD)v5)
    {
      v9 = 3;
      v7 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 3, &v9);
      v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 3, v7[5]);
    }
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)v11);
  TraceMethod::~TraceMethod((TraceMethod *)v10);

  return v5;
}

void sub_19B7D0BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::setupAlert(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v10;
  void *v11;
  int v12;
  int *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int SystemSoundIDWithOptions;
  NSObject *v22;
  id v23;
  int v24;
  NSObject *v25;
  id v26;
  id v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  id v32;
  __CFRunLoop *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  const char *v38;
  id v39;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  uint64_t v41;
  NSObject *v42;
  uint64_t Property;
  NSObject *v44;
  uint64_t v45;
  unsigned int v46;
  NSObject *v47;
  id v48;
  const char *v49;
  id v50;
  const __CFString *v51;
  id v52;
  id v53;
  const char *v54;
  NSObject *v55;
  os_log_type_t v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  unsigned int v61;
  NSObject *v62;
  NSObject *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  int v68;
  NSObject *v69;
  NSObject *v70;
  OpaqueAudioQueue *v71;
  OpaqueAudioQueue *v72;
  uint64_t **v73;
  uint64_t v74;
  int v75;
  OpaqueAudioQueue *v76;
  UInt32 v77;
  uint64_t v78;
  unsigned int v79;
  NSObject *v80;
  const char *v81;
  int v82;
  uint64_t v83;
  float v84;
  unsigned int v85;
  NSObject *v86;
  uint64_t v87;
  AudioQueueBufferRef v88;
  _BYTE v89[8];
  _OWORD outPropertyData[2];
  uint64_t v91;
  AudioQueueBufferRef inBuffer;
  uint64_t v93;
  UInt32 ioPropertyDataSize;
  ExtAudioFileRef outExtAudioFile;
  int v96;
  AudioQueueRef outAQ;
  uint8_t v98[4];
  _BYTE v99[14];
  __int16 v100;
  uint8_t *v101;
  uint8_t buf[4];
  const char *v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v96 = a3;
  outExtAudioFile = 0;
  ioPropertyDataSize = 0;
  inBuffer = 0;
  v93 = 0;
  v91 = 0;
  memset(outPropertyData, 0, sizeof(outPropertyData));
  TraceMethod::TraceMethod((TraceMethod *)v89, "setupAlert");
  if (isDarwinOSProduct(void)::onceToken != -1)
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_109);
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    v8 = 0;
    goto LABEL_5;
  }
  if (!a4)
  {
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_19:
        v8 = 4294967246;
        goto LABEL_5;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2155;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d setupAlert: NULL alert URL", buf, 0x12u);
    }

    goto LABEL_19;
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v98, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v10 = a4;
  objc_msgSend(v10, "absoluteString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf"));

  if (!v12)
    goto LABEL_41;
  v13 = (int *)(a1 + 384);
  if (!*(_DWORD *)(a1 + 384))
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "pathForResource:ofType:", CFSTR("siri_activation"), CFSTR("plist"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", v18);
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v10, *MEMORY[0x1E0C92500], v19, *MEMORY[0x1E0C92510], 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    SystemSoundIDWithOptions = AudioServicesCreateSystemSoundIDWithOptions();
    if (!SystemSoundIDWithOptions)
    {
      if (kAVVCScope)
      {
        v25 = *(id *)kAVVCScope;
        if (!v25)
          goto LABEL_40;
      }
      else
      {
        v25 = MEMORY[0x1E0C81028];
        v27 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *v13;
        *(_DWORD *)buf = 136315650;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 1601;
        WORD3(v104) = 1024;
        DWORD2(v104) = v28;
        _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d createSAESystemSound: mSAESystemSoundID(%u)", buf, 0x18u);
      }

      goto LABEL_40;
    }
    if (kAVVCScope)
    {
      v22 = *(id *)kAVVCScope;
      if (!v22)
      {
LABEL_35:
        *v13 = 0;
LABEL_40:

        goto LABEL_41;
      }
    }
    else
    {
      v22 = MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 1598;
      WORD3(v104) = 1024;
      DWORD2(v104) = SystemSoundIDWithOptions;
      _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d createSAESystemSound: AudioServicesCreateSystemSoundIDWithOptions: Failed to create SAE sonics+haptics system sound. err(%d)", buf, 0x18u);
    }

    goto LABEL_35;
  }
  if (kAVVCScope)
  {
    v14 = *(id *)kAVVCScope;
    if (!v14)
      goto LABEL_41;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *v13;
    *(_DWORD *)buf = 136315650;
    v103 = "ControllerImpl.mm";
    LOWORD(v104) = 1024;
    *(_DWORD *)((char *)&v104 + 2) = 1587;
    WORD3(v104) = 1024;
    DWORD2(v104) = v24;
    _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d createSAESystemSound: SystemSoundID was already created. mSAESystemSoundID(%u)", buf, 0x18u);
  }

LABEL_41:
  v29 = *(std::__shared_weak_count **)&v99[4];
  if (*(_QWORD *)&v99[4])
  {
    v30 = (unint64_t *)(*(_QWORD *)&v99[4] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v7;
  TraceMethod::TraceMethod((TraceMethod *)v98, "createAlertQueue");
  if (ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1))
  {
    v8 = 0;
    goto LABEL_72;
  }
  *(_QWORD *)(a1 + 216) = 0x40CF400000000000;
  *(_OWORD *)(a1 + 224) = xmmword_19B85A1C0;
  *(_QWORD *)(a1 + 240) = 0x100000002;
  *(_DWORD *)(a1 + 248) = 16;
  v33 = *(__CFRunLoop **)(*(_QWORD *)(a1 + 192) + 128);
  outAQ = 0;
  v34 = AudioQueueNewOutput((const AudioStreamBasicDescription *)(a1 + 216), (AudioQueueOutputCallback)ControllerImpl::AlertAQOutputCallback, v32, v33, 0, 0, &outAQ);
  v8 = v34;
  if ((_DWORD)v34)
  {
    if ((v34 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v35 = *(id *)kAVVCScope;
        if (!v35)
          goto LABEL_71;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
        v39 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_70;
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2038;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v38 = "%25s:%-5d ERROR: createAlertQueue: AudioQueueNewOutput err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v35 = *(id *)kAVVCScope;
        if (!v35)
          goto LABEL_71;
      }
      else
      {
        v35 = MEMORY[0x1E0C81028];
        v37 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
LABEL_70:

LABEL_71:
        ControllerImpl::setAlertQueueState(a1, 0);
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2038;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v38 = "%25s:%-5d ERROR: createAlertQueue: AudioQueueNewOutput err %d";
    }
    _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_ERROR, v38, buf, 0x18u);
    goto LABEL_70;
  }
  ControllerImpl::setAlertQueueFromImplQueue((ControllerImpl *)a1, outAQ);
  ControllerImpl::setAlertQueueState(a1, 200);
  if (AudioQueueSetProperty(outAQ, 0x63756964u, &AudioQueueProperty_AlertQueueClientName, 8u))
  {
    if (kAVVCScope)
    {
      v36 = *(id *)kAVVCScope;
      if (!v36)
        goto LABEL_123;
    }
    else
    {
      v36 = MEMORY[0x1E0C81028];
      v53 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2051;
      WORD3(v104) = 2112;
      *((_QWORD *)&v104 + 1) = CFSTR("AVVoiceController_AlertQueue");
      v54 = "%25s:%-5d FAILED createAlertQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      v55 = v36;
      v56 = OS_LOG_TYPE_ERROR;
LABEL_121:
      _os_log_impl(&dword_19B733000, v55, v56, v54, buf, 0x1Cu);
      goto LABEL_122;
    }
    goto LABEL_122;
  }
  if (!kAVVCScope)
  {
    v36 = MEMORY[0x1E0C81028];
    v57 = MEMORY[0x1E0C81028];
LABEL_119:
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2053;
      WORD3(v104) = 2112;
      *((_QWORD *)&v104 + 1) = CFSTR("AVVoiceController_AlertQueue");
      v54 = "%25s:%-5d createAlertQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      v55 = v36;
      v56 = OS_LOG_TYPE_DEBUG;
      goto LABEL_121;
    }
LABEL_122:

    goto LABEL_123;
  }
  v36 = *(id *)kAVVCScope;
  if (v36)
    goto LABEL_119;
LABEL_123:
  v58 = AudioQueueAddPropertyListener(outAQ, 0x6171726Eu, (AudioQueuePropertyListenerProc)ControllerImpl::AlertAQPropertyListenerProc, v32);
  v8 = v58;
  if (!(_DWORD)v58)
  {
    *(_DWORD *)(a1 + 204) = 0;
    goto LABEL_72;
  }
  if ((v58 + 199999) < 0x61A7F)
  {
    if (kAVVCScope)
    {
      v59 = *(id *)kAVVCScope;
      if (!v59)
        goto LABEL_72;
    }
    else
    {
      v59 = MEMORY[0x1E0C81028];
      v66 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2057;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      _os_log_impl(&dword_19B733000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAlertQueue: AudioQueueAddPropertyListener err %d", buf, 0x18u);
    }
LABEL_149:

    goto LABEL_72;
  }
  if (!kAVVCScope)
  {
    v59 = MEMORY[0x1E0C81028];
    v67 = MEMORY[0x1E0C81028];
LABEL_151:
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2057;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      _os_log_impl(&dword_19B733000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAlertQueue: AudioQueueAddPropertyListener err %{audio:4CC}d", buf, 0x18u);
    }
    goto LABEL_149;
  }
  v59 = *(id *)kAVVCScope;
  if (v59)
    goto LABEL_151;
LABEL_72:
  TraceMethod::~TraceMethod((TraceMethod *)v98);

  if ((_DWORD)v8)
  {
LABEL_73:
    if (inBuffer)
    {
      AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      AudioQueueFreeBuffer(AlertQueueFromImplQueue, inBuffer);
    }
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v96, &v96)[5] = 0;
    goto LABEL_110;
  }
  v41 = ExtAudioFileOpenURL((CFURLRef)v10, &outExtAudioFile);
  v8 = v41;
  if ((_DWORD)v41)
  {
    if ((v41 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v42 = *(id *)kAVVCScope;
        if (!v42)
          goto LABEL_103;
      }
      else
      {
        v42 = MEMORY[0x1E0C81028];
        v50 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_102;
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2171;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v49 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileOpenURL err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v42 = *(id *)kAVVCScope;
        if (!v42)
          goto LABEL_103;
      }
      else
      {
        v42 = MEMORY[0x1E0C81028];
        v48 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
LABEL_102:

LABEL_103:
        v51 = CFURLGetString((CFURLRef)v10);
        CFStringGetCString(v51, (char *)buf, 1024, 0x600u);
        if (kAVVCScope)
        {
          v44 = *(id *)kAVVCScope;
          if (!v44)
            goto LABEL_110;
        }
        else
        {
          v44 = MEMORY[0x1E0C81028];
          v52 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v98 = 136315650;
          *(_QWORD *)v99 = "ControllerImpl.mm";
          *(_WORD *)&v99[8] = 1024;
          *(_DWORD *)&v99[10] = 2175;
          v100 = 2080;
          v101 = buf;
          _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d setupAlert: Failed to load alert '%s'", v98, 0x1Cu);
        }
LABEL_109:

        goto LABEL_110;
      }
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2171;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v49 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileOpenURL err %d";
    }
    _os_log_impl(&dword_19B733000, v42, OS_LOG_TYPE_ERROR, v49, buf, 0x18u);
    goto LABEL_102;
  }
  ioPropertyDataSize = 40;
  Property = ExtAudioFileGetProperty(outExtAudioFile, 0x66666D74u, &ioPropertyDataSize, outPropertyData);
  v8 = Property;
  if ((_DWORD)Property)
  {
    if ((Property + 199999) < 0x61A7F)
    {
      if (kAVVCScope)
      {
        v44 = *(id *)kAVVCScope;
        if (!v44)
          goto LABEL_110;
      }
      else
      {
        v44 = MEMORY[0x1E0C81028];
        v64 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 2181;
        WORD3(v104) = 1024;
        DWORD2(v104) = v8;
        _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty(kExtAudioFileProperty_FileDataFormat) err %d", buf, 0x18u);
      }
      goto LABEL_109;
    }
    if (kAVVCScope)
    {
      v44 = *(id *)kAVVCScope;
      if (!v44)
        goto LABEL_110;
    }
    else
    {
      v44 = MEMORY[0x1E0C81028];
      v65 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2181;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty(kExtAudioFileProperty_FileDataFormat) err %{audio:4CC}d", buf, 0x18u);
    }
    goto LABEL_109;
  }
  v45 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, (const void *)(a1 + 216));
  v8 = v45;
  if ((_DWORD)v45)
  {
    v46 = v45 + 199999;
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v47 = objc_claimAutoreleasedReturnValue();
    v44 = v47;
    if (v46 >= 0x61A7F)
    {
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 2188;
        WORD3(v104) = 1024;
        DWORD2(v104) = v8;
        _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileSetProperty(kExtAudioFileProperty_ClientDataFormat) err %{audio:4CC}d", buf, 0x18u);
      }
    }
    else if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2188;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      _os_log_impl(&dword_19B733000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileSetProperty(kExtAudioFileProperty_ClientDataFormat) err %d", buf, 0x18u);
    }
    goto LABEL_109;
  }
  ioPropertyDataSize = 8;
  v60 = ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &v93);
  v8 = v60;
  if ((_DWORD)v60)
  {
    v61 = v60 + 199999;
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v62 = objc_claimAutoreleasedReturnValue();
    v63 = v62;
    if (v61 < 0x61A7F)
    {
      if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 2194;
        WORD3(v104) = 1024;
        DWORD2(v104) = v8;
        _os_log_impl(&dword_19B733000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty err %d", buf, 0x18u);
      }
LABEL_191:

      goto LABEL_192;
    }
    if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2194;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v81 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty err %{audio:4CC}d";
LABEL_183:
      _os_log_impl(&dword_19B733000, v63, OS_LOG_TYPE_ERROR, v81, buf, 0x18u);
      goto LABEL_184;
    }
    goto LABEL_184;
  }
  v68 = v96;
  if (std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v96, &v96)[5])
  {
    if (*(_DWORD *)(a1 + 204) == v68)
    {
      CALog::LogObjIfEnabled(6, kAVVCScope);
      v69 = objc_claimAutoreleasedReturnValue();
      v70 = v69;
      if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 2200;
        _os_log_impl(&dword_19B733000, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d setupAlert: resetting alert queue", buf, 0x12u);
      }

      ElapsedTime::ElapsedTime((ElapsedTime *)buf, "setupAlert", "AudioQueueReset : mAlertQueue", 0);
      v71 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      AudioQueueReset(v71);
      ControllerImpl::setAlertQueueState(a1, 200);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
    }
    v72 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    v73 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v68, &v96);
    AudioQueueFreeBuffer(v72, (AudioQueueBufferRef)v73[5]);
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v68, &v96)[5] = 0;
  }
  v74 = (uint64_t)(*(double *)(a1 + 216) * (double)v93 / *(double *)outPropertyData);
  v93 = v74;
  v75 = *(_DWORD *)(a1 + 240);
  v76 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
  v77 = v75 * v74;
  v78 = AudioQueueAllocateBuffer(v76, v77, &inBuffer);
  v8 = v78;
  if ((_DWORD)v78)
  {
    v79 = v78 + 199999;
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v80 = objc_claimAutoreleasedReturnValue();
    v63 = v80;
    if (v79 < 0x61A7F)
    {
      if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v103 = "ControllerImpl.mm";
        LOWORD(v104) = 1024;
        *(_DWORD *)((char *)&v104 + 2) = 2217;
        WORD3(v104) = 1024;
        DWORD2(v104) = v8;
        _os_log_impl(&dword_19B733000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: AudioQueueAllocateBuffer err %d", buf, 0x18u);
      }
      goto LABEL_191;
    }
    if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v103 = "ControllerImpl.mm";
      LOWORD(v104) = 1024;
      *(_DWORD *)((char *)&v104 + 2) = 2217;
      WORD3(v104) = 1024;
      DWORD2(v104) = v8;
      v81 = "%25s:%-5d ERROR: setupAlert: AudioQueueAllocateBuffer err %{audio:4CC}d";
      goto LABEL_183;
    }
LABEL_184:

    goto LABEL_73;
  }
  v82 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)buf = 1;
  HIDWORD(v103) = v82;
  LODWORD(v104) = v77;
  *(_QWORD *)((char *)&v104 + 4) = inBuffer->mAudioData;
  LODWORD(outAQ) = v93;
  v83 = ExtAudioFileRead(outExtAudioFile, (UInt32 *)&outAQ, (AudioBufferList *)buf);
  v8 = v83;
  if ((_DWORD)v83)
  {
    v85 = v83 + 199999;
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v86 = objc_claimAutoreleasedReturnValue();
    v63 = v86;
    if (v85 >= 0x61A7F)
    {
      if (v86 && os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v98 = 136315650;
        *(_QWORD *)v99 = "ControllerImpl.mm";
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = 2231;
        v100 = 1024;
        LODWORD(v101) = v8;
        _os_log_impl(&dword_19B733000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileRead err %{audio:4CC}d", v98, 0x18u);
      }
    }
    else if (v86 && os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v98 = 136315650;
      *(_QWORD *)v99 = "ControllerImpl.mm";
      *(_WORD *)&v99[8] = 1024;
      *(_DWORD *)&v99[10] = 2231;
      v100 = 1024;
      LODWORD(v101) = v8;
      _os_log_impl(&dword_19B733000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileRead err %d", v98, 0x18u);
    }
    goto LABEL_191;
  }
  v87 = outAQ;
  v88 = inBuffer;
  inBuffer->mAudioDataByteSize = *(_DWORD *)(a1 + 240) * (_DWORD)outAQ;
  if (v68 == 1)
  {
    *(_QWORD *)(a1 + 256) = v87;
    *(_QWORD *)(a1 + 264) = GetTrailingSilenceFromBuffer((__int16 *)v88->mAudioData, v87, v84);
    v88 = inBuffer;
  }
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v68, &v96)[5] = (uint64_t *)v88;
LABEL_192:
  if ((_DWORD)v8)
    goto LABEL_73;
LABEL_110:
  if (outExtAudioFile)
    ExtAudioFileDispose(outExtAudioFile);
LABEL_5:
  TraceMethod::~TraceMethod((TraceMethod *)v89);

  return v8;
}

void sub_19B7D1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint8_t buf,int a32,int a33,__int16 a34)
{
  void *v34;

  TraceMethod::~TraceMethod((TraceMethod *)&a14);

  _Unwind_Resume(a1);
}

void ControllerImpl::setAlertQueueFromImplQueue(ControllerImpl *this, OpaqueAudioQueue *a2)
{
  __CFRunLoop *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[5];
  std::__shared_weak_count *v14;
  OpaqueAudioQueue *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v16, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v4 = *(__CFRunLoop **)(*((_QWORD *)this + 24) + 128);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3321888768;
  v13[2] = ___ZN14ControllerImpl26setAlertQueueFromImplQueueEP16OpaqueAudioQueue_block_invoke;
  v13[3] = &__block_descriptor_56_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE_e5_v8__0l;
  v13[4] = v16;
  v14 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v15 = a2;
  ExecuteBlockOnRunLoop(v4, 0xFFFFFFFFFFFFFFFFLL, v13);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19B7D217C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void ControllerImpl::AlertAQPropertyListenerProc(ControllerImpl *this, void *a2, OpaqueAudioQueue *a3)
{
  int v3;
  ControllerImpl *v6;
  AVVoiceController *v7;
  uint64_t v8;
  unint64_t v9;
  pthread_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  AVVoiceController *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  char v35[8];
  _BYTE buf[18];
  uint64_t v37;

  v3 = (int)a3;
  v37 = *MEMORY[0x1E0C80C00];
  TraceMethod::TraceMethod((TraceMethod *)v35, "AlertAQPropertyListenerProc");
  v6 = this;
  v7 = (AVVoiceController *)v6;
  if (!v6)
  {
    v33 = 0;
    v34 = 0;
    goto LABEL_23;
  }
  -[ControllerImpl impl](v6, "impl");
  if (v33)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(_QWORD *)(v33 + 8), *(std::__shared_weak_count **)(v33 + 16));
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v8 = *(_QWORD *)(*(_QWORD *)buf + 192);
      v9 = atomic_load((unint64_t *)(v8 + 8));
      if (!v9 || (v10 = pthread_self(), v11 = atomic_load((unint64_t *)(v8 + 8)), v10 != (pthread_t)v11))
        __assert_rtn("getAlertQueueFromRunLoop", "ControllerImpl.h", 509, "implSP->getAudioQueueRunLoop()->IsCurrentThread() && \"This code must run only on the AQ runloop thread\"");
    }
    v12 = *(_QWORD *)(v33 + 616);
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_12;
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12)
        goto LABEL_23;
    }
    else
    {
LABEL_12:
      if (!v12)
        goto LABEL_23;
    }
    if (ObjectExists(v7))
    {
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3321888768;
      v27[2] = ___ZN14ControllerImpl27AlertAQPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke;
      v27[3] = &unk_1E3BEA7C8;
      v16 = v33;
      v29 = v33;
      v30 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v28 = v7;
      v31 = a2;
      v32 = v3;
      ControllerImpl::dispatchAndSafeWork(v16, v27, (uint64_t)"AlertAQPropertyListenerProc");

      v19 = v30;
      if (v30)
      {
        v20 = (unint64_t *)&v30->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_29;
    }
  }
LABEL_23:
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v22 = *(id *)kAVVCScope;
      if (v22)
      {
        v23 = v22;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2627;
          _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: impl or queue is NULL or object is being destroyed -- noop", buf, 0x12u);
        }

      }
    }
  }
LABEL_29:
  v24 = v34;
  if (v34)
  {
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  TraceMethod::~TraceMethod((TraceMethod *)v35);
}

void sub_19B7D2494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  TraceMethod::~TraceMethod((TraceMethod *)va1);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27AlertAQPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  AVVoiceController *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  id v16;
  id v17;
  int v18;
  const char *v19;
  void *v20;
  int v21;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  unsigned int v23;
  NSObject *v24;
  id v25;
  id v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  NSObject *v32;
  AVVoiceController *v33;
  NSObject *v34;
  NSObject *v35;
  AVVoiceController *v36;
  id v37;
  id v38;
  id v39;
  _BYTE v40[16];
  _BYTE v41[8];
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint8_t v44[16];
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint8_t *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_DWORD *)(a1 + 64);
  v3 = (AVVoiceController *)*(id *)(a1 + 32);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v42, *(_QWORD *)(v1 + 8), *(std::__shared_weak_count **)(v1 + 16));
  TraceMethod::TraceMethod((TraceMethod *)v41, "handleAlertAQPropertyChange");
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v4 = *(id *)kAVVCScope;
      if (v4)
      {
        v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          v6 = *(_DWORD *)(v1 + 360);
          switch(v6)
          {
            case 200:
              v7 = "stopped";
              break;
            case 201:
              v7 = "primed";
              break;
            case 202:
              v7 = "stopping";
              break;
            case 203:
              v7 = "started";
              break;
            case 204:
              v7 = "running";
              break;
            default:
              if (v6)
                v7 = "ILLEGAL";
              else
                v7 = "uninit";
              break;
          }
          *(_DWORD *)buf = 136315650;
          v46 = "ControllerImpl.mm";
          v47 = 1024;
          v48 = 2644;
          v49 = 2080;
          v50 = (uint8_t *)v7;
          _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: mAlertQueueState = %s", buf, 0x1Cu);
        }

      }
    }
  }
  if (!*(_BYTE *)(v1 + 408))
  {
    v9 = v42;
    v10 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    AlertLock::AlertLock(v40, v9, v10);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
        goto LABEL_48;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_DWORD *)(v1 + 360);
      switch(v18)
      {
        case 200:
          v19 = "stopped";
          break;
        case 201:
          v19 = "primed";
          break;
        case 202:
          v19 = "stopping";
          break;
        case 203:
          v19 = "started";
          break;
        case 204:
          v19 = "running";
          break;
        default:
          if (v18)
            v19 = "ILLEGAL";
          else
            v19 = "uninit";
          break;
      }
      *(_DWORD *)buf = 136315650;
      v46 = "ControllerImpl.mm";
      v47 = 1024;
      v48 = 2650;
      v49 = 2080;
      v50 = (uint8_t *)v19;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: mAlertQueueState = %s", buf, 0x1Cu);
    }

LABEL_48:
    ControllerImpl::sessionManagerForStreamID(v1, 0, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "sessionState");

    if (v2 != 1634824814)
    {
      if (kAVVCScope)
      {
        v25 = *(id *)kAVVCScope;
        if (!v25)
          goto LABEL_59;
      }
      else
      {
        v25 = (id)MEMORY[0x1E0C81028];
        v26 = MEMORY[0x1E0C81028];
      }
      v27 = v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v44, v2);
        *(_DWORD *)buf = 136315650;
        v46 = "ControllerImpl.mm";
        v47 = 1024;
        v48 = 2699;
        v49 = 2080;
        v50 = v44;
        _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: unhandled inID %s", buf, 0x1Cu);
      }

      goto LABEL_59;
    }
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v1);
    v23 = QueueIsRunning(AlertQueueFromImplQueue);
    if (kAVVCScope)
    {
      v24 = *(id *)kAVVCScope;
      if (!v24)
        goto LABEL_70;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
      v31 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v46 = "ControllerImpl.mm";
      v47 = 1024;
      v48 = 2660;
      v49 = 1024;
      LODWORD(v50) = v23;
      _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: RUNNING = %d", buf, 0x18u);
    }

LABEL_70:
    if (v23)
    {
      if (v21 == 2)
      {
        if (kAVVCScope)
        {
          v32 = *(id *)kAVVCScope;
          if (!v32)
            goto LABEL_59;
        }
        else
        {
          v32 = MEMORY[0x1E0C81028];
          v37 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v46 = "ControllerImpl.mm";
          v47 = 1024;
          v48 = 2665;
          _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: session was interrupted!  Doing nothing here", buf, 0x12u);
        }
        goto LABEL_100;
      }
      if (*(_DWORD *)(v1 + 360) == 204)
      {
        if (!kAVVCScope)
          goto LABEL_59;
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) == 0)
          goto LABEL_59;
        v35 = *(id *)kAVVCScope;
        if (!v35)
          goto LABEL_59;
        v32 = v35;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v46 = "ControllerImpl.mm";
          v47 = 1024;
          v48 = 2670;
          _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: state already kAlertQueueRunning.  Doing nothing here", buf, 0x12u);
        }
LABEL_100:

        goto LABEL_59;
      }
      ControllerImpl::setAlertQueueState(v1, 204);
      ControllerImpl::alertStarted((ControllerImpl *)v1, v36);
LABEL_59:
      VCLocker::~VCLocker((VCLocker *)v40);
      goto LABEL_60;
    }
    if ((int)ControllerImpl::getSessionState((ControllerImpl *)v1, 0) <= 4)
    {
      if (kAVVCScope)
      {
        v32 = *(id *)kAVVCScope;
        if (!v32)
          goto LABEL_59;
      }
      else
      {
        v32 = MEMORY[0x1E0C81028];
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v46 = "ControllerImpl.mm";
        v47 = 1024;
        v48 = 2679;
        _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: Session is inactive, alertFinishedPlayback already synthesized in deactivateSession.", buf, 0x12u);
      }
      goto LABEL_100;
    }
    if (*(_DWORD *)(v1 + 360) != 203 || v21 == 2)
    {
      *(_QWORD *)(v1 + 208) = 2;
      ControllerImpl::notifyAlertFinished((ControllerImpl *)v1, v3);
      goto LABEL_59;
    }
    if (kAVVCScope)
    {
      v34 = *(id *)kAVVCScope;
      if (!v34)
      {
LABEL_105:
        ControllerImpl::alertStarted((ControllerImpl *)v1, v33);
        ControllerImpl::setAlertQueueState(v1, 204);
        goto LABEL_59;
      }
    }
    else
    {
      v34 = MEMORY[0x1E0C81028];
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "ControllerImpl.mm";
      v47 = 1024;
      v48 = 2683;
      _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: queue reports stopped on first IsRunning prop notification -- treat this like a regular start", buf, 0x12u);
    }

    goto LABEL_105;
  }
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_60;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v46 = "ControllerImpl.mm";
    v47 = 1024;
    v48 = 2646;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: in the middle of priming alert queue:  Doing nothing.  [THIS IS NEW BEHAVIOR]", buf, 0x12u);
  }

LABEL_60:
  TraceMethod::~TraceMethod((TraceMethod *)v41);
  v28 = v43;
  if (v43)
  {
    v29 = (unint64_t *)&v43->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

}

void sub_19B7D2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14)
{
  void *v14;
  void *v15;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  VCLocker::~VCLocker((VCLocker *)&a10);
  TraceMethod::~TraceMethod((TraceMethod *)&a12);
  v17 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  _Unwind_Resume(a1);
}

void ControllerImpl::dispatchAndSafeWork(uint64_t a1, void *a2, uint64_t a3)
{
  void (**v5)(_QWORD);
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[4];
  void (**v17)(_QWORD);
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      v6 = v21;
      v7 = v22;
      if (v22)
      {
        p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
      }
      v10 = *(NSObject **)(v6 + 32);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3321888768;
      v16[2] = ___ZN14ControllerImpl19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke;
      v16[3] = &unk_1E3BE50D8;
      v18 = v6;
      v19 = v7;
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v20 = a3;
      v17 = v5;
      dispatch_async(v10, v16);

      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      v13 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v5[2](v5);
    }
  }

}

void sub_19B7D2F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::recursive_mutex *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = a1[5]) == 0)
  {
LABEL_10:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_17;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "ControllerImpl.mm";
      v16 = 1024;
      v17 = 4316;
      v18 = 2048;
      v19 = 0;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", buf, 0x1Cu);
    }

LABEL_17:
    if (!v3)
      return;
    goto LABEL_18;
  }
  v5 = (std::recursive_mutex *)(v4 + 104);
  std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 104));
  if (*(_BYTE *)(v4 + 520))
  {
    v7 = *(NSObject **)kAVVCScope;
    CALog::Scope::oslog(*(id *)kAVVCScope);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v13 = (const char *)a1[7];
      *(_DWORD *)buf = 136315138;
      v15 = v13;
      _os_log_fault_impl(&dword_19B733000, v7, OS_LOG_TYPE_FAULT, "Warning: Trying to do safeWork on impl work queue while in tearDown. Caller: %s", buf, 0xCu);
    }

  }
  (*(void (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], v6);
  std::recursive_mutex::unlock(v5);
LABEL_18:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B7D310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  std::recursive_mutex::unlock(v9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ControllerImpl::alertStarted(ControllerImpl *this, AVVoiceController *a2)
{
  NSObject *v3;
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  OSStatus CurrentTime;
  OSStatus v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  float v23;
  float v24;
  id v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  const char *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  id v43;
  double v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  const char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint32_t v55;
  id v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD v70[5];
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _BYTE v76[8];
  uint64_t v77;
  std::__shared_weak_count *v78;
  _BYTE v79[18];
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  double v83;
  AudioTimeStamp buf;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v77, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  TraceMethod::TraceMethod((TraceMethod *)v76, "alertStarted");
  ControllerImpl::setAlertState((uint64_t)this, 2);
  if (*((_DWORD *)this + 51) == 1 && !*((_BYTE *)this + 409))
  {
    ControllerImpl::_getCurrentRecordingEngine(&v74, (uint64_t)this, *((_QWORD *)this + 59), 0, (uint64_t)"alertStarted");
    v8 = v74;
    if (!v74 || *(_QWORD *)(v74 + 224) != 4)
    {
      if (kAVVCScope)
      {
        v13 = *(id *)kAVVCScope;
        if (!v13)
        {
LABEL_32:
          v15 = v75;
          if (v75)
          {
            p_shared_owners = (unint64_t *)&v75->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          goto LABEL_10;
        }
      }
      else
      {
        v13 = MEMORY[0x1E0C81028];
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 2528;
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertStarted: record state != kRecordStarting -- noop", (uint8_t *)&buf, 0x12u);
      }

      goto LABEL_32;
    }
    if (*((_DWORD *)this + 80) != 2)
    {
LABEL_115:
      v70[0] = MEMORY[0x1E0C809B0];
      v70[1] = 3321888768;
      v70[2] = ___ZN14ControllerImpl12alertStartedEP17AVVoiceController_block_invoke;
      v70[3] = &__block_descriptor_64_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
      v70[4] = v77;
      v71 = v78;
      if (v78)
      {
        v60 = (unint64_t *)&v78->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v72 = v8;
      v73 = v75;
      if (v75)
      {
        v62 = (unint64_t *)&v75->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v8 + 360))(v8, v70, "alertStarted");
      v64 = v73;
      if (v73)
      {
        v65 = (unint64_t *)&v73->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v71;
      if (v71)
      {
        v68 = (unint64_t *)&v71->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      goto LABEL_32;
    }
    if (*((_DWORD *)this + 90) != 204)
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v18 = *(id *)kAVVCScope;
          if (v18)
          {
            v12 = v18;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v79 = 136315394;
              *(_QWORD *)&v79[4] = "ControllerImpl.mm";
              *(_WORD *)&v79[12] = 1024;
              *(_DWORD *)&v79[14] = 2440;
              v19 = "%25s:%-5d calculateAlertTimes: alert queue already stopped -- using current time as end time";
              v20 = v12;
              v21 = OS_LOG_TYPE_DEBUG;
              v22 = 18;
LABEL_68:
              _os_log_impl(&dword_19B733000, v20, v21, v19, v79, v22);
              goto LABEL_69;
            }
            goto LABEL_69;
          }
        }
      }
LABEL_70:
      *((_QWORD *)this + 49) = mach_absolute_time();
      if (kAVVCScope)
      {
        v31 = *(id *)kAVVCScope;
        if (!v31)
        {
LABEL_78:
          v39 = *((_QWORD *)this + 49);
          ControllerImpl::_getCurrentRecordingEngine(v79, (uint64_t)this, *((_QWORD *)this + 59), 0, (uint64_t)"calculateRecordStartTime");
          v40 = *(_QWORD *)v79;
          if (!*(_QWORD *)v79)
          {
            if (kAVVCScope)
            {
              v42 = *(id *)kAVVCScope;
              if (!v42)
                goto LABEL_109;
            }
            else
            {
              v42 = MEMORY[0x1E0C81028];
              v56 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315394;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1003;
              v52 = "%25s:%-5d calculateRecordStartTime: Error, current recording engine is nil!";
              v53 = v42;
              v54 = OS_LOG_TYPE_ERROR;
              v55 = 18;
              goto LABEL_107;
            }
LABEL_108:

            goto LABEL_109;
          }
          if (!*(_QWORD *)(*(_QWORD *)v79 + 240))
          {
LABEL_91:
            v44 = (double)*((uint64_t *)this + 33) * 24000000.0 / *((double *)this + 27);
            *(_QWORD *)(v40 + 240) = (v39 - (uint64_t)v44) & ~((v39 - (uint64_t)v44) >> 63);
            if (kAVVCScope)
            {
              v45 = *(id *)kAVVCScope;
              if (!v45)
                goto LABEL_98;
            }
            else
            {
              v45 = MEMORY[0x1E0C81028];
              v46 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              v47 = __udivti3();
              LODWORD(buf.mSampleTime) = 136315650;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1015;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = (double)(unint64_t)v47 / 1000000000.0;
              _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calculateRecordStartTime: host time for start of record: %.3f seconds", (uint8_t *)&buf, 0x1Cu);
            }

LABEL_98:
            v48 = mach_absolute_time();
            v49 = *(_QWORD *)(*(_QWORD *)v79 + 240);
            if (kAVVCScope)
            {
              v42 = *(id *)kAVVCScope;
              if (!v42)
              {
LABEL_109:
                v57 = *(std::__shared_weak_count **)&v79[8];
                if (*(_QWORD *)&v79[8])
                {
                  v58 = (unint64_t *)(*(_QWORD *)&v79[8] + 8);
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                v8 = v74;
                goto LABEL_115;
              }
            }
            else
            {
              v42 = MEMORY[0x1E0C81028];
              v50 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              v51 = *(_QWORD *)(*(_QWORD *)v79 + 240) - *((_QWORD *)this + 49);
              LODWORD(buf.mSampleTime) = 136315906;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1019;
              WORD1(buf.mRateScalar) = 2048;
              *(_QWORD *)((char *)&buf.mRateScalar + 4) = v51;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = fmax((double)(uint64_t)(v49 - v48) * 0.0000000416666667, 0.0);
              v52 = "%25s:%-5d this is %lld ticks beyond alert end (%.6f seconds in the future)";
              v53 = v42;
              v54 = OS_LOG_TYPE_DEFAULT;
              v55 = 38;
LABEL_107:
              _os_log_impl(&dword_19B733000, v53, v54, v52, (uint8_t *)&buf, v55);
              goto LABEL_108;
            }
            goto LABEL_108;
          }
          if (kAVVCScope)
          {
            v41 = *(id *)kAVVCScope;
            if (!v41)
            {
LABEL_90:
              v40 = *(_QWORD *)v79;
              goto LABEL_91;
            }
          }
          else
          {
            v41 = MEMORY[0x1E0C81028];
            v43 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 1007;
            _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d WARNING: startRecordingAtTime:error was used without 'silent' start alert", (uint8_t *)&buf, 0x12u);
          }

          goto LABEL_90;
        }
      }
      else
      {
        v31 = MEMORY[0x1E0C81028];
        v37 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *((_QWORD *)this + 49);
        *(_DWORD *)v79 = 136315650;
        *(_QWORD *)&v79[4] = "ControllerImpl.mm";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 2474;
        v80 = 2048;
        v81 = v38;
        v34 = "%25s:%-5d calculateAlertTimes: host time for (already-passed) end of alert: %llu";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(this);
    CurrentTime = AudioQueueGetCurrentTime(AlertQueueFromImplQueue, 0, &buf, 0);
    v11 = CurrentTime;
    if (CurrentTime)
    {
      if ((CurrentTime + 199999) <= 0x61A7E)
      {
        if (kAVVCScope)
        {
          v12 = *(id *)kAVVCScope;
          if (!v12)
            goto LABEL_70;
        }
        else
        {
          v12 = MEMORY[0x1E0C81028];
          v35 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v79 = 136315650;
          *(_QWORD *)&v79[4] = "ControllerImpl.mm";
          *(_WORD *)&v79[12] = 1024;
          *(_DWORD *)&v79[14] = 2445;
          v80 = 1024;
          LODWORD(v81) = v11;
          v19 = "%25s:%-5d ERROR: calculateAlertTimes: AudioQueueGetCurrentTime err %d";
LABEL_67:
          v20 = v12;
          v21 = OS_LOG_TYPE_ERROR;
          v22 = 24;
          goto LABEL_68;
        }
        goto LABEL_69;
      }
      if (kAVVCScope)
      {
        v12 = *(id *)kAVVCScope;
        if (!v12)
          goto LABEL_70;
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v79 = 136315650;
        *(_QWORD *)&v79[4] = "ControllerImpl.mm";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 2445;
        v80 = 1024;
        LODWORD(v81) = v11;
        v19 = "%25s:%-5d ERROR: calculateAlertTimes: AudioQueueGetCurrentTime err %{audio:4CC}d";
        goto LABEL_67;
      }
LABEL_69:

      goto LABEL_70;
    }
    v23 = (double)*((uint64_t *)this + 32) - buf.mSampleTime;
    v24 = v23 / *((double *)this + 27);
    *((_QWORD *)this + 49) = buf.mHostTime + (unint64_t)(v24 * 24000000.0);
    if (kAVVCScope)
    {
      v25 = *(id *)kAVVCScope;
      if (!v25)
        goto LABEL_55;
    }
    else
    {
      v25 = (id)MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *((_QWORD *)this + 49);
      mach_absolute_time();
      v29 = __udivti3();
      if (v29 >= 0)
        v30 = v29;
      else
        v30 = -v29;
      *(_DWORD *)v79 = 136315906;
      *(_QWORD *)&v79[4] = "ControllerImpl.mm";
      *(_WORD *)&v79[12] = 1024;
      *(_DWORD *)&v79[14] = 2463;
      v80 = 2048;
      v81 = v28;
      v82 = 2048;
      v83 = (double)v30 * 0.000000001;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calculateAlertTimes: host time for end of alert: %llu (%.6f seconds in future)", v79, 0x26u);
    }

LABEL_55:
    *((_QWORD *)this + 47) = (unint64_t)((double)*((unint64_t *)this + 49)
                                              + (double)*((uint64_t *)this + 32) * -24000000.0 / *((double *)this + 27));
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
        goto LABEL_78;
    }
    else
    {
      v31 = MEMORY[0x1E0C81028];
      v32 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *((_QWORD *)this + 47);
      *(_DWORD *)v79 = 136315650;
      *(_QWORD *)&v79[4] = "ControllerImpl.mm";
      *(_WORD *)&v79[12] = 1024;
      *(_DWORD *)&v79[14] = 2469;
      v80 = 2048;
      v81 = v33;
      v34 = "%25s:%-5d calculateAlertTimes: host time for start of alert: %llu";
LABEL_76:
      _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_DEFAULT, v34, v79, 0x1Cu);
    }
LABEL_77:

    goto LABEL_78;
  }
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.mSampleTime) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 2532;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertStarted: not playing start alert -- noop", (uint8_t *)&buf, 0x12u);
  }

LABEL_10:
  TraceMethod::~TraceMethod((TraceMethod *)v76);
  v5 = v78;
  if (v78)
  {
    v6 = (unint64_t *)&v78->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19B7D3C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceMethod::~TraceMethod((TraceMethod *)va1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ControllerImpl::_getCurrentRecordingEngine(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  _BYTE v23[18];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  v7 = *(_QWORD *)(a2 + 576);
  v8 = *(std::__shared_weak_count **)(a2 + 584);
  v21 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v7)
  {
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_30;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v23 = "ControllerImpl.mm";
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 4079;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }
    goto LABEL_29;
  }
  if (a3)
  {
    ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)buf, *(_QWORD *)(a2 + 576), *(std::__shared_weak_count **)(a2 + 584), a3);
    std::shared_ptr<caulk::concurrent::messenger>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)buf);
    v11 = *(std::__shared_weak_count **)&v23[4];
    if (*(_QWORD *)&v23[4])
    {
      v12 = (unint64_t *)(*(_QWORD *)&v23[4] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = v21;
    goto LABEL_30;
  }
  if (a4)
  {
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_30;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v23 = "ControllerImpl.mm";
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 4088;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid streamID. Session is not active", buf, 0x12u);
    }
LABEL_29:

    goto LABEL_30;
  }
  v16 = *(NSObject **)kAVVCScope;
  CALog::Scope::oslog(*(id *)kAVVCScope);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v23 = "_getCurrentRecordingEngine";
    *(_WORD *)&v23[8] = 2080;
    *(_QWORD *)&v23[10] = a5;
    _os_log_fault_impl(&dword_19B733000, v16, OS_LOG_TYPE_FAULT, "%s Likely ambiguous AVVC V2 use case detected. Must pass streamID here: %s !", buf, 0x16u);
  }

LABEL_30:
  if (v8)
  {
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19B7D3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl12alertStartedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE v8[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  RecordLock::RecordLock(v8, v2, v3);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48)))
    AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 48));
  VCLocker::~VCLocker((VCLocker *)v8);
}

void sub_19B7D4080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ___ZN14ControllerImpl26setAlertQueueFromImplQueueEP16OpaqueAudioQueue_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 616) = *(_QWORD *)(result + 48);
  return result;
}

void ControllerImpl::cleanup(ControllerImpl *this, AVVoiceController *a2)
{
  AVVoiceController *v3;
  AVVoiceController *v4;
  ControllerImpl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  NSObject *v12;
  NSObject *v13;
  id v14;
  ControllerImpl *v15;
  int v16;
  void *v17;
  void *v18;
  ControllerImpl *v19;
  NSObject *v20;
  NSObject *v21;
  OSStatus v22;
  NSObject *v23;
  id v24;
  const char *v25;
  NSObject *v26;
  id v27;
  const char *v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  ControllerImpl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  OSStatus v44;
  OSStatus v45;
  NSObject *v46;
  id v47;
  const char *v48;
  id v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  id v54;
  int v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  ControllerImpl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  char v78[8];
  ControllerImpl *v79;
  std::__shared_weak_count *v80;
  _BYTE v81[16];
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  void *v85;
  id v86[3];
  int v87;
  ControllerImpl *v88;
  std::__shared_weak_count *v89;
  char v90[8];
  _QWORD v91[2];
  ControllerImpl *v92;
  std::__shared_weak_count *v93;
  _BYTE buf[136];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v78, "cleanup");
  v4 = v3;
  TraceMethod::TraceMethod((TraceMethod *)v90, "destroyAlertQueue");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v92, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v5 = v92;
  v6 = v93;
  v88 = v92;
  v89 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  AlertLock::AlertLock(v91, (uint64_t)v5, v6);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(this);
  ControllerImpl::setAlertQueueFromImplQueue(this, 0);
  *(_DWORD *)buf = 1;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 1, buf)[5] = 0;
  *(_DWORD *)buf = 2;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 2, buf)[5] = 0;
  *(_DWORD *)buf = 3;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 3, buf)[5] = 0;
  if (AlertQueueFromImplQueue)
  {
    if (*((int *)this + 91) < 1)
    {
      ControllerImpl::setAlertQueueState((uint64_t)this, 200);
      goto LABEL_26;
    }
    if (kAVVCScope)
    {
      v12 = *(id *)kAVVCScope;
      if (!v12)
      {
LABEL_23:
        v15 = v92;
        v16 = *((_DWORD *)v92 + 51);
        if (v16)
        {
          v17 = (void *)*((_QWORD *)v92 + 26);
          v18 = (void *)*((_QWORD *)v92 + 49);
          objc_initWeak((id *)buf, v4);
          v19 = v92;
          v82 = MEMORY[0x1E0C809B0];
          v83 = 3221225472;
          v84 = ___ZN14ControllerImpl17destroyAlertQueueEP17AVVoiceController_block_invoke;
          v85 = &unk_1E3BEC000;
          objc_copyWeak(v86, (id *)buf);
          v87 = v16;
          v86[1] = v17;
          v86[2] = v18;
          ControllerImpl::safeNotify((uint64_t)v19, (uint64_t)"destroyAlertQueue: alert finished", &v82);
          objc_destroyWeak(v86);
          objc_destroyWeak((id *)buf);
          v15 = v92;
        }
        ControllerImpl::alertFinished(v15, v4);
LABEL_26:
        if (kAVVCScope)
        {
          if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
          {
            v20 = *(id *)kAVVCScope;
            if (v20)
            {
              v21 = v20;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2401;
                _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: calling AudioQueueStop", buf, 0x12u);
              }

            }
          }
        }
        ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyAlertQueue", "destroyAlertQueue : AudioQueueStop", 0);
        v22 = AudioQueueStop(AlertQueueFromImplQueue, 1u);
        ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
        if (kAVVCScope)
        {
          v23 = *(id *)kAVVCScope;
          if (!v23)
            goto LABEL_41;
        }
        else
        {
          v23 = MEMORY[0x1E0C81028];
          v24 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v25 = " but failed";
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_DWORD *)&buf[14] = 2408;
          *(_WORD *)&buf[18] = 2080;
          *(_WORD *)&buf[12] = 1024;
          if (!v22)
            v25 = "";
          *(_QWORD *)&buf[20] = v25;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v22;
          _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
        }

LABEL_41:
        if (*((_BYTE *)this + 521) || !v22)
        {
LABEL_58:
          if (kAVVCScope)
          {
            if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
            {
              v30 = *(id *)kAVVCScope;
              if (v30)
              {
                v31 = v30;
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2414;
                  _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: removing queue listener", buf, 0x12u);
                }

              }
            }
          }
          AudioQueueRemovePropertyListener(AlertQueueFromImplQueue, 0x6171726Eu, (AudioQueuePropertyListenerProc)ControllerImpl::AlertAQPropertyListenerProc, v4);
          if (kAVVCScope)
          {
            if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
            {
              v32 = *(id *)kAVVCScope;
              if (v32)
              {
                v33 = v32;
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2419;
                  _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: calling AudioQueueDispose", buf, 0x12u);
                }

              }
            }
          }
          v34 = v92;
          v35 = v93;
          v79 = v92;
          v80 = v93;
          if (v93)
          {
            v36 = (unint64_t *)&v93->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
            *(_QWORD *)buf = v34;
            *(_QWORD *)&buf[8] = v35;
            do
              v38 = __ldxr(v36);
            while (__stxr(v38 + 1, v36));
          }
          else
          {
            *(_QWORD *)buf = v92;
            *(_QWORD *)&buf[8] = 0;
          }
          VCUnlocker::VCUnlocker(v81, (uint64_t)v34, 0);
          if (v35)
          {
            v39 = (unint64_t *)&v35->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v41 = v80;
          if (v80)
          {
            v42 = (unint64_t *)&v80->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = AudioQueueDispose(AlertQueueFromImplQueue, 0);
          v45 = v44;
          if (!v44)
            goto LABEL_103;
          if ((v44 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              v46 = *(id *)kAVVCScope;
              if (!v46)
                goto LABEL_103;
            }
            else
            {
              v46 = MEMORY[0x1E0C81028];
              v49 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              goto LABEL_102;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2422;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v45;
            v48 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueDispose err %{audio:4CC}d";
          }
          else
          {
            if (kAVVCScope)
            {
              v46 = *(id *)kAVVCScope;
              if (!v46)
                goto LABEL_103;
            }
            else
            {
              v46 = MEMORY[0x1E0C81028];
              v47 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
LABEL_102:

LABEL_103:
              VCUnlocker::~VCUnlocker((VCUnlocker *)v81);
              CallbackBarrier(*(__CFRunLoop **)(*((_QWORD *)this + 24) + 128));
              ControllerImpl::setAlertQueueState((uint64_t)this, 0);
              goto LABEL_104;
            }
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2422;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v45;
            v48 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueDispose err %d";
          }
          _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_ERROR, v48, buf, 0x18u);
          goto LABEL_102;
        }
        if ((v22 + 199999) >= 0x61A7F)
        {
          if (kAVVCScope)
          {
            v26 = *(id *)kAVVCScope;
            if (!v26)
              goto LABEL_58;
          }
          else
          {
            v26 = MEMORY[0x1E0C81028];
            v29 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            goto LABEL_57;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2411;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          v28 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueStop() err %{audio:4CC}d";
        }
        else
        {
          if (kAVVCScope)
          {
            v26 = *(id *)kAVVCScope;
            if (!v26)
              goto LABEL_58;
          }
          else
          {
            v26 = MEMORY[0x1E0C81028];
            v27 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            goto LABEL_57;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2411;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          v28 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueStop() err %d";
        }
        _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, v28, buf, 0x18u);
LABEL_57:

        goto LABEL_58;
      }
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2381;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d detected unfinished alert, queue up alertFinished", buf, 0x12u);
    }

    goto LABEL_23;
  }
  if (!*((_DWORD *)this + 90))
  {
    if (kAVVCScope)
    {
      v13 = *(id *)kAVVCScope;
      if (!v13)
        goto LABEL_104;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
      v75 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2376;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Alert queue NULL but state != Uninitialized", buf, 0x12u);
    }

  }
LABEL_104:
  VCLocker::~VCLocker((VCLocker *)v91);
  v50 = v93;
  if (v93)
  {
    v51 = (unint64_t *)&v93->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v90);

  if (*((_DWORD *)this + 96))
  {
    if (kAVVCScope)
    {
      v53 = *(id *)kAVVCScope;
      if (!v53)
      {
LABEL_117:
        AudioServicesDisposeSystemSoundID(*((_DWORD *)this + 96));
        *((_DWORD *)this + 96) = 0;
        goto LABEL_118;
      }
    }
    else
    {
      v53 = MEMORY[0x1E0C81028];
      v54 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *((_DWORD *)this + 96);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1613;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v55;
      _os_log_impl(&dword_19B733000, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d disposeSAESystemSound: mSAESystemSoundID(%u)", buf, 0x18u);
    }

    goto LABEL_117;
  }
LABEL_118:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v76, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  RecordLock::RecordLock(buf, v76, v77);
  v56 = v77;
  if (v77)
  {
    v57 = &v77->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "destroyWithCompletion:", 0);

  VCLocker::~VCLocker((VCLocker *)buf);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v82, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  v60 = v82;
  v61 = *(ControllerImpl **)(v82 + 576);
  v62 = *(std::__shared_weak_count **)(v82 + 584);
  v92 = v61;
  v93 = v62;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  if (v61)
  {
    v65 = v83;
    if (v83)
    {
      v66 = (unint64_t *)(v83 + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    *(_QWORD *)buf = &off_1E3BE5938;
    *(_QWORD *)&buf[8] = v60;
    v91[0] = 0;
    v91[1] = 0;
    *(_QWORD *)&buf[16] = v65;
    *(_QWORD *)&buf[24] = buf;
    AVVCRecordingEngineMap::for_each_engine(v61, (uint64_t)buf, (uint64_t)"cleanupRecordEngines");
    v68 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v69 = 4;
      v68 = buf;
      goto LABEL_134;
    }
    if (*(_QWORD *)&buf[24])
    {
      v69 = 5;
LABEL_134:
      (*(void (**)(void))(*v68 + 8 * v69))();
    }
  }
  if (v62)
  {
    v70 = (unint64_t *)&v62->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v72 = (std::__shared_weak_count *)v83;
  if (v83)
  {
    v73 = (unint64_t *)(v83 + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v78);

}

void sub_19B7D4CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,id location,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v40;
  id *v41;

  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  VCLocker::~VCLocker((VCLocker *)&a31);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  TraceMethod::~TraceMethod((TraceMethod *)&a29);

  TraceMethod::~TraceMethod((TraceMethod *)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E3BE5938;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E3BE5938;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3BE5938;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E3BE5938;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[16];

  v3 = *(_QWORD **)a2;
  v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RecordLock::RecordLock(v12, v4, v5);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(_QWORD *, BOOL))(*v3 + 112))(v3, v3[28] > 3);
  VCLocker::~VCLocker((VCLocker *)v12);
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7D4FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  VCLocker::~VCLocker((VCLocker *)&a9);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl17destroyAlertQueueEP17AVVoiceController_block_invoke(uint64_t a1)
{
  id WeakRetained;
  AVVCAlertInformation *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = -[AVVCAlertInformation initWithAlertType:mode:endTime:]([AVVCAlertInformation alloc], "initWithAlertType:mode:endTime:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(WeakRetained, "alertPlaybackFinishedWithSettings:", v3);

  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 2388;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7D519C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void VCUnlocker::~VCUnlocker(VCUnlocker *this)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    if (kAVVCScope)
    {
      v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_9:
        (*(void (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
        return;
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(*(_QWORD *)this + 8);
      v5 = 136315650;
      v6 = "ControllerImpl.h";
      v7 = 1024;
      v8 = 806;
      v9 = 2080;
      v10 = v4;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d unlocker about to relock %s", (uint8_t *)&v5, 0x1Cu);
    }

    goto LABEL_9;
  }
}

void sub_19B7D52D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void VCUnlocker::VCUnlocker(_BYTE *a1, uint64_t a2, unsigned int a3)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8 * a3 + 536);
  a1[8] = 0;
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (!IsSerializationEnabled(void)::enable)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_11:
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 48))(*(_QWORD *)a1) & 1) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1);
          a1[8] = 1;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LOWORD(v7) = 0;
            _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: Unlocker attempted to unlock a mutex not owned by the current thread!", (uint8_t *)&v7, 2u);
          }
          __break(1u);
        }
        return;
      }
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v7 = 136315650;
      v8 = "ControllerImpl.h";
      v9 = 1024;
      v10 = 798;
      v11 = 2080;
      v12 = v6;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d unlocker about to unlock %s", (uint8_t *)&v7, 0x1Cu);
    }

    goto LABEL_11;
  }
}

void ControllerImpl::getPlaybackRoute(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[4];
  id v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v5 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v24, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3032000000;
  v22[3] = __Block_byref_object_copy__4869;
  v22[4] = __Block_byref_object_dispose__4870;
  v23 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke;
  v16[3] = &unk_1E3BEA838;
  v6 = v24;
  v19 = v24;
  v20 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v21 = a2;
  v18 = v22;
  v9 = v5;
  v17 = v9;
  ControllerImpl::safeWork(v6, v16, (uint64_t)"getPlaybackRoute");

  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Block_object_dispose(v22, 8);

  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

}

void sub_19B7D5604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v26;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25);
  _Block_object_dispose(&a19, 8);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v26 - 48);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  ControllerImpl::sessionManagerForStreamID(a1[6], a1[8], 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "playbackRoute");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  if (kAVVCScope)
  {
    v7 = *(id *)kAVVCScope;
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
    *(_DWORD *)buf = 136315650;
    v19 = "ControllerImpl.mm";
    v20 = 1024;
    v21 = 828;
    v22 = 2112;
    v23 = v9;
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getPlaybackRoute: %@", buf, 0x1Cu);
  }

LABEL_8:
  v10 = a1[6];
  v11 = (void *)a1[4];
  v12 = v11 != 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke_105;
  v15[3] = &unk_1E3BEBEE8;
  v13 = v11;
  v14 = a1[5];
  v16 = v13;
  v17 = v14;
  ControllerImpl::safeNotifyAlwaysAsync(v10, v12, v15);

}

void sub_19B7D57E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke_105(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke_2;
  v8[3] = &unk_1E3BEBF10;
  v6 = a1[6];
  v9 = v3;
  v10 = v6;
  v7 = v3;
  ControllerImpl::getPlaybackRoute(v4, v5, v8);

}

void sub_19B7D58C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  NSObject *v8;
  id v9;

  v3 = a2;
  v4 = v3;
  v9 = v3;
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = objc_msgSend(v3, "copy");
    v6 = *(void ***)(a1 + 40);
    v7 = *v6;
    *v6 = (void *)v5;

    v4 = v9;
  }
  v8 = *(NSObject **)(a1 + 32);
  if (v8)
  {
    dispatch_semaphore_signal(v8);
    v4 = v9;
  }

}

void sub_19B7D593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::setEndpointerDelegate(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v7;
  id v8;
  id WeakRetained;
  AVVoiceController *v10;
  uint64_t v11;
  ControllerImpl *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  id v15;
  BOOL v16;
  ControllerImpl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  id v22;
  NSObject *v23;
  id v24;
  BOOL v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[2];
  void (*v34)(uint64_t);
  void *v35;
  ControllerImpl *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[4];
  id v39;
  ControllerImpl *v40;
  std::__shared_weak_count *v41;
  ControllerImpl *v42;
  std::__shared_weak_count *v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  const char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v42, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  WeakRetained = objc_loadWeakRetained((id *)v42 + 52);
  LOBYTE(a1) = WeakRetained == v8;

  if ((a1 & 1) != 0)
    goto LABEL_32;
  ControllerImpl::waitForAllStopRecordCompletion(v42, v10);
  v11 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3321888768;
  v38[2] = ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke;
  v38[3] = &unk_1E3BEA238;
  v12 = v42;
  v40 = v42;
  v41 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v39 = v8;
  ControllerImpl::safeNotifySync((uint64_t)v12, (uint64_t)"set endpointer delegate", v38);
  v15 = objc_loadWeakRetained((id *)v42 + 52);
  v16 = v15 == 0;

  if (!v16)
  {
    v17 = v42;
    v18 = v43;
    if (v43)
    {
      p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
      do
        v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
      v34 = ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke_114;
      v35 = &__block_descriptor_48_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE_e5_v8__0l;
      v36 = v17;
      v37 = v18;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
    }
    else
    {
      v34 = ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke_114;
      v35 = &__block_descriptor_48_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE_e5_v8__0l;
      v36 = v42;
      v37 = 0;
    }
    v33[0] = v11;
    v33[1] = 3321888768;
    ControllerImpl::safeNotify((uint64_t)v17, (uint64_t)"endpointer reset", v33);
    v22 = objc_loadWeakRetained((id *)v42 + 52);
    *((_BYTE *)v42 + 424) = objc_opt_respondsToSelector() & 1;

    if (kAVVCScope)
    {
      v23 = *(id *)kAVVCScope;
      if (!v23)
      {
LABEL_23:
        ControllerImpl::setupEndpointer(v42, a4);
        if (v37)
          std::__shared_weak_count::__release_weak(v37);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        goto LABEL_27;
      }
    }
    else
    {
      v23 = MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v25 = *((_BYTE *)v42 + 424) == 0;
      *(_DWORD *)buf = 136315650;
      v45 = "ControllerImpl.mm";
      if (v25)
        v26 = "external";
      else
        v26 = "internal Speex";
      v46 = 1024;
      v47 = 955;
      v48 = 2080;
      v49 = v26;
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### setEndpointerDelegate: using %s endpointer ####", buf, 0x1Cu);
    }

    goto LABEL_23;
  }
LABEL_27:

  v27 = v41;
  if (v41)
  {
    v28 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_32:
  v30 = v43;
  if (v43)
  {
    v31 = (unint64_t *)&v43->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

}

void sub_19B7D5C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a23);

  _Unwind_Resume(a1);
}

void ControllerImpl::waitForAllStopRecordCompletion(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_time_t v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 72);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  v30 = v3;
  v31 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_45;
    }
    else
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 24));
      v7 = *(_QWORD *)(v3 + 16);
      std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 24));
      if (!v7)
        goto LABEL_45;
    }
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
        goto LABEL_18;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v35 = (uint64_t)"ControllerImpl.mm";
      v36 = 1024;
      v37 = 1409;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d waitForAllStopRecordCompletion: wait for all didStops to be delivered to the client", buf, 0x12u);
    }

LABEL_18:
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v11 = v28;
    v10 = v29;
    if (v29)
    {
      v12 = (unint64_t *)&v29->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v32[0] = &off_1E3BE5A10;
    v32[1] = v11;
    v32[2] = v10;
    v33 = v32;
    AVVCRecordingEngineMap::for_each_engine((_QWORD *)v3, (uint64_t)v32, (uint64_t)"waitForAllStopRecordCompletion");
    v14 = v33;
    if (v33 == v32)
    {
      v15 = 4;
      v14 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_26;
      v15 = 5;
    }
    (*(void (**)(_QWORD *, AVVoiceController *))(*v14 + 8 * v15))(v14, a2);
LABEL_26:
    v16 = *((_QWORD *)this + 22);
    if (!v16)
      goto LABEL_39;
    v17 = dispatch_time(0, 3000000000);
    if (!dispatch_group_wait(v16, v17))
    {
LABEL_38:
      v22 = (void *)*((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = 0;

LABEL_39:
      v23 = v29;
      if (v29)
      {
        v24 = (unint64_t *)&v29->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v4 = v31;
      goto LABEL_45;
    }
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_35:
        v20 = *(NSObject **)kAVVCScope;
        CALog::Scope::oslog(*(id *)kAVVCScope);
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134217984;
          v35 = 0x4008000000000000;
          _os_log_fault_impl(&dword_19B733000, v20, OS_LOG_TYPE_FAULT, "DelegateDispatchGroup timed out after %f seconds", buf, 0xCu);
        }

        goto LABEL_38;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = (uint64_t)"ControllerImpl.mm";
      v36 = 1024;
      v37 = 4298;
      v38 = 2048;
      v39 = 0x4008000000000000;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d DelegateDispatchGroup timed out after %f seconds", buf, 0x1Cu);
    }

    goto LABEL_35;
  }
LABEL_45:
  if (v4)
  {
    v26 = (unint64_t *)&v4->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *, AVVoiceController *))v4->__on_zero_shared)(v4, a2);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19B7D6088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

id ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke(uint64_t a1)
{
  return objc_storeWeak((id *)(*(_QWORD *)(a1 + 40) + 416), *(id *)(a1 + 32));
}

void ControllerImpl::safeNotifySync(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  std::recursive_mutex *v6;
  NSObject *v7;
  id v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v6 = (std::recursive_mutex *)(a1 + 40);
      std::recursive_mutex::lock(v6);
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
      goto LABEL_14;
    }
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_13:
        v5[2](v5);
        goto LABEL_14;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315650;
      v10 = "ControllerImpl.mm";
      v11 = 1024;
      v12 = 4438;
      v13 = 2080;
      v14 = a2;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling %s synchronously", (uint8_t *)&v9, 0x1Cu);
    }

    goto LABEL_13;
  }
LABEL_14:

}

void sub_19B7D6260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke_114(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  id WeakRetained;
  NSObject *v6;
  id v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 32), (v10 = v4) == 0))
  {
LABEL_6:
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
        goto LABEL_13;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "ControllerImpl.mm";
      v13 = 1024;
      v14 = 950;
      v15 = 2048;
      v16 = 0;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", buf, 0x1Cu);
    }

LABEL_13:
    if (!v3)
      return;
    goto LABEL_14;
  }
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 416));
  objc_msgSend(WeakRetained, "reset", v10, v3);

LABEL_14:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B7D63EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ControllerImpl::setupEndpointer(ControllerImpl *this, unint64_t a2)
{
  int v4;
  uint64_t v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v35, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::_getCurrentRecordingEngine(&v33, (uint64_t)this, a2, 0, (uint64_t)"setupEndpointer");
  v4 = *((_DWORD *)this + 107);
  v25 = *((_OWORD *)this + 27);
  v5 = *((_QWORD *)this + 56);
  WeakRetained = objc_loadWeakRetained((id *)(v35 + 416));
  if (WeakRetained)
  {
    v7 = v33;

    if (v7)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3321888768;
      v26[2] = ___ZN14ControllerImpl15setupEndpointerEm_block_invoke;
      v26[3] = &__block_descriptor_92_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE_e5_v8__0l;
      v8 = v33;
      v26[4] = v33;
      v27 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v28 = v35;
      v29 = v36;
      if (v36)
      {
        v11 = (unint64_t *)&v36->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v32 = v4;
      v30 = v25;
      v31 = v5;
      (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v8 + 360))(v8, v26, "setupEndpointer");
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = v27;
      if (v27)
      {
        v17 = (unint64_t *)&v27->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  v19 = v34;
  if (v34)
  {
    v20 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19B7D6618(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v3 - 80);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl15setupEndpointerEm_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD v12[2];
  void (*v13)(uint64_t);
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 256);
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x5812000000;
  v22[3] = __Block_byref_object_copy__119;
  v22[4] = __Block_byref_object_dispose__120;
  v22[5] = 0;
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 40);
  v23 = *(_OWORD *)(v1 + 24);
  v24 = v4;
  v25 = v3;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = *(_QWORD *)(a1 + 48);
    v13 = ___ZN14ControllerImpl15setupEndpointerEm_block_invoke_122;
    v14 = &unk_1E3BE60A8;
    v16 = v5;
    v17 = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v5 = v9;
  }
  else
  {
    v13 = ___ZN14ControllerImpl15setupEndpointerEm_block_invoke_122;
    v14 = &unk_1E3BE60A8;
    v16 = v5;
    v17 = 0;
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v15 = v22;
  v11 = *(_DWORD *)(a1 + 88);
  v20 = v2;
  v21 = v11;
  v18 = *(_OWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 80);
  ControllerImpl::safeNotify(v5, (uint64_t)"setup endpointer", v12);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Block_object_dispose(v22, 8);
}

void sub_19B7D678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

__n128 __Block_byref_object_copy__119(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN14ControllerImpl15setupEndpointerEm_block_invoke_122(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  id WeakRetained;
  char v10;
  id v11;
  void *v12;
  double *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v22 = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v21 = v4;
      if (v4)
      {
        if (kAVVCScope)
        {
          v5 = *(id *)kAVVCScope;
          if (!v5)
          {
LABEL_19:
            if (*(_DWORD *)(a1 + 80))
            {
              WeakRetained = objc_loadWeakRetained((id *)(v4 + 416));
              v10 = objc_opt_respondsToSelector();

              v11 = objc_loadWeakRetained((id *)(v4 + 416));
              v12 = v11;
              v13 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
              if ((v10 & 1) != 0)
                objc_msgSend(v11, "configureWithASBD:andFrameRate:", v13, *(unsigned int *)(a1 + 80), v4);
              else
                objc_msgSend(v11, "configureWithSampleRate:andFrameRate:", *(unsigned int *)(a1 + 80), *v13, v4);

            }
            v14 = objc_loadWeakRetained((id *)(v4 + 416));
            v15 = v14;
            if (*(_DWORD *)(a1 + 84) == 1)
              v16 = 1;
            else
              v16 = 2;
            objc_msgSend(v14, "setEndpointMode:", v16, v21);

            v17 = objc_loadWeakRetained((id *)(v4 + 416));
            objc_msgSend(v17, "setStartWaitTime:", *(double *)(a1 + 56));

            v18 = objc_loadWeakRetained((id *)(v4 + 416));
            objc_msgSend(v18, "setInterspeechWaitTime:", *(double *)(a1 + 64));

            v6 = objc_loadWeakRetained((id *)(v4 + 416));
            -[NSObject setEndWaitTime:](v6, "setEndWaitTime:", *(double *)(a1 + 72));
            goto LABEL_28;
          }
        }
        else
        {
          v5 = MEMORY[0x1E0C81028];
          v8 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v24 = "ControllerImpl.mm";
          v25 = 1024;
          v26 = 980;
          _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d setupEndpointer: configuring SR and wait times", buf, 0x12u);
        }

        goto LABEL_19;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
    {
      if (!v3)
        return;
      goto LABEL_29;
    }
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v24 = "ControllerImpl.mm";
    v25 = 1024;
    v26 = 979;
    v27 = 2048;
    v28 = 0;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", buf, 0x1Cu);
  }
LABEL_28:

  v3 = v22;
  if (!v22)
    return;
LABEL_29:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19B7D6B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E3BE5A10;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E3BE5A10;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3BE5A10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E3BE5A10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _BYTE buf[40];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3321888768;
  *(_QWORD *)&buf[16] = ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  *(_QWORD *)&buf[32] = v4;
  v31 = v3;
  v32 = v2;
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = AVVCRecordingEngine::if_running_then(v3, buf);
  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v2)
    goto LABEL_16;
  v13 = (unint64_t *)&v2->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_16:
    if (!v9)
      goto LABEL_41;
LABEL_17:
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
        goto LABEL_40;
    }
    else
    {
      v15 = (id)MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    v17 = v15;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
LABEL_39:

LABEL_40:
      AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v3 + 152));
      goto LABEL_41;
    }
    if (v2)
    {
      v18 = (unint64_t *)&v2->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      if (v3)
      {
        v20 = (void *)MEMORY[0x1E0CB3940];
        v21 = *(_QWORD *)(v3 + 272);
        v22 = *v18 + 1;
LABEL_31:
        objc_msgSend(v20, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v3, v21, v22);
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_33;
      }
    }
    else if (v3)
    {
      v22 = 0;
      v20 = (void *)MEMORY[0x1E0CB3940];
      v21 = *(_QWORD *)(v3 + 272);
      goto LABEL_31;
    }
    v23 = CFSTR("(0x0) use_count:0");
LABEL_33:
    v24 = v23;
    v25 = *(_QWORD *)(v3 + 272);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1415;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v24;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v25;
    _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Interrupting recording on engine[%@] with streamID(%llu)", buf, 0x26u);

    if (v2)
    {
      v26 = (unint64_t *)&v2->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }

    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (v9)
    goto LABEL_17;
LABEL_41:
  if (v2)
  {
    v28 = (unint64_t *)&v2->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7D6F98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_group_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 176);
  if (!v3)
  {
    v4 = dispatch_group_create();
    v5 = *(void **)(v2 + 176);
    *(_QWORD *)(v2 + 176) = v4;

    v3 = *(NSObject **)(v2 + 176);
  }
  dispatch_group_enter(v3);
  v6 = *(_QWORD *)(a1 + 40);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v2;
  AVVCRecordingEngine::setDidStopDelegateCompletionBlock(v6, v7);
}

void ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 176);
  if (v1)
    dispatch_group_leave(v1);
}

void ControllerImpl::configureAlertModeFromModeAndEngine(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  void (**v7)(id, uint64_t);
  NSObject *v8;
  id v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void (**v16)(id, uint64_t);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  void (**v27)(id, uint64_t);
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  char v36[8];
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  TraceMethod::TraceMethod((TraceMethod *)v36, "configureAlertModeFromModeAndEngine");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v34, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  if (*a3)
    goto LABEL_11;
  if (!kAVVCScope)
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_6;
  }
  v8 = *(id *)kAVVCScope;
  if (v8)
  {
LABEL_6:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v38 = "ControllerImpl.mm";
      v39 = 1024;
      v40 = 1030;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d configureAlertModeFromModeAndEngine: Nil recording engine. Abandon ship!", buf, 0x12u);
    }

  }
  if (v7)
    v7[2](v7, 4294955515);
LABEL_11:
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke;
  v26[3] = &unk_1E3BEAF38;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v28 = a1;
  v29 = v11;
  v30 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v31 = v34;
  v32 = v35;
  if (v35)
  {
    v14 = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v33 = a2;
  v16 = v7;
  v27 = v16;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v11 + 360))(v11, v26, "configureAlertModeFromModeAndEngine");

  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v36);

}

void sub_19B7D7398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceMethod::~TraceMethod((TraceMethod *)(v13 - 88));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  _BOOL4 v14;
  NSObject *v15;
  id v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  id v20;
  uint64_t v21;
  char isOutputHandsFree;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (!AVVCRouteManager::isOutputWiredHeadset(*(id **)(*(_QWORD *)(a1 + 48) + 376)))
  {
    v4 = (id *)kAVVCScope;
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 240))
      goto LABEL_14;
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
        goto LABEL_26;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "ControllerImpl.mm";
      v34 = 1024;
      v35 = 1044;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: record start time was set -- check for ZLL", buf, 0x12u);
    }

LABEL_26:
    v31 = 0;
    +[AVVoiceTriggerClient sharedInstance](AVVoiceTriggerClient, "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      v13 = objc_msgSend(v11, "voiceTriggerPastDataFramesAvailable");
      v31 = v13;
    }
    else
    {
      v14 = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 48) + 296))(*(_QWORD *)(a1 + 48), &v31) == 0;
      v13 = v31;
      if (!v14)
        goto LABEL_33;
    }
    if (v13)
    {
      if (kAVVCScope)
      {
        v15 = *(id *)kAVVCScope;
        if (!v15)
          goto LABEL_46;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
        v16 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
LABEL_45:

LABEL_46:
        v9 = 1;
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136315650;
      v33 = "ControllerImpl.mm";
      v34 = 1024;
      v35 = 1060;
      v36 = 1024;
      LODWORD(v37) = v13;
      v17 = "%25s:%-5d configureAlertModeFromModeAndEngine: ZLL query - back frames: %u";
      v18 = v15;
      v19 = 24;
LABEL_44:
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_45;
    }
LABEL_33:
    if (!supportsCarPlayAuxStream())
    {
      v9 = 0;
LABEL_47:

      goto LABEL_48;
    }
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
        goto LABEL_46;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v20 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      goto LABEL_45;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 240);
    *(_DWORD *)buf = 136315650;
    v33 = "ControllerImpl.mm";
    v34 = 1024;
    v35 = 1066;
    v36 = 2048;
    v37 = v21;
    v17 = "%25s:%-5d configureAlertModeFromModeAndEngine: CarPlay supports ZLL. recordStartTime : %llu";
    v18 = v15;
    v19 = 28;
    goto LABEL_44;
  }
  if (!kAVVCScope)
  {
    v3 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
    goto LABEL_10;
  }
  v3 = *(id *)kAVVCScope;
  if (v3)
  {
LABEL_10:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "ControllerImpl.mm";
      v34 = 1024;
      v35 = 1039;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configureAlertModeFromModeAndEngine: Wired headset output - disable ZLL", buf, 0x12u);
    }

  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 240) = 0;
  v4 = (id *)kAVVCScope;
LABEL_14:
  if (!v4)
  {
    v7 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
    goto LABEL_18;
  }
  v7 = *v4;
  if (v7)
  {
LABEL_18:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "ControllerImpl.mm";
      v34 = 1024;
      v35 = 1078;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: record start time not set", buf, 0x12u);
    }

  }
  v9 = 0;
LABEL_48:
  isOutputHandsFree = AVVCRouteManager::isOutputHandsFree(*(id **)(*(_QWORD *)(a1 + 48) + 376));
  v23 = *(_QWORD *)(a1 + 64);
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke_128;
  v25[3] = &unk_1E3BEBF60;
  v24 = *(_QWORD *)(a1 + 80);
  v27 = v2;
  v28 = v24;
  v29 = isOutputHandsFree;
  v30 = v9;
  v26 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v23, v25, (uint64_t)"configureAlertModeFromModeAndEngine_block_invoke");

}

void sub_19B7D7828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  result[8] = a2[8];
  result[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 64);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke_128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  id v23;
  unsigned int v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  unsigned int v28;
  const char *v29;
  unint64_t v30;
  const char *v31;
  unsigned int v32;
  const char *v33;
  unint64_t v34;
  const char *v35;
  uint64_t result;
  id v37;
  char v38;
  NSObject *v39;
  id v40;
  const char *v41;
  int v42;
  int v43;
  id v44;
  id v45;
  id v46;
  id v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 <= 1768764004)
  {
    if (v2 <= 1684628339)
    {
      if (v2 <= 1651795059)
      {
        if (v2 != 1635087471)
        {
          v4 = 1651794544;
          goto LABEL_34;
        }
LABEL_41:
        if (kAVVCScope)
        {
          v10 = *(id *)kAVVCScope;
          if (!v10)
            goto LABEL_78;
        }
        else
        {
          v10 = MEMORY[0x1E0C81028];
          v19 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_QWORD *)(a1 + 48);
          v49 = "ControllerImpl.mm";
          v48 = 136315650;
          if (v20 == 1635087471)
            v21 = "Auto";
          else
            v21 = "Post-Voice";
          v50 = 1024;
          v51 = 1287;
          v52 = 2080;
          v53 = v21;
          _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
        }
        goto LABEL_77;
      }
      if (v2 == 1651795060)
        goto LABEL_59;
      v7 = 1668314723;
      goto LABEL_25;
    }
    if (v2 <= 1752132964)
    {
      if (v2 != 1684628340)
      {
        v7 = 1751414371;
LABEL_25:
        if (v2 != v7)
          goto LABEL_68;
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    if (v2 != 1752132965)
    {
      if (v2 != 1752396914)
        goto LABEL_68;
      if (kAVVCScope)
      {
        v9 = *(id *)kAVVCScope;
        if (!v9)
        {
LABEL_151:
          if (*(_QWORD *)(v3 + 336) == -1)
            LODWORD(v8) = 0;
          else
            LODWORD(v8) = *(_QWORD *)(v3 + 336);
          if (*(_QWORD *)(v3 + 344) == -1)
            LODWORD(v17) = 0;
          else
            LODWORD(v17) = *(_QWORD *)(v3 + 344);
          if (*(_QWORD *)(v3 + 352) == -1)
            LODWORD(v5) = 0;
          else
            LODWORD(v5) = *(_QWORD *)(v3 + 352);
          goto LABEL_87;
        }
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v48 = 136315394;
        v49 = "ControllerImpl.mm";
        v50 = 1024;
        v51 = 1307;
        _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: VoiceTriggerTraining", (uint8_t *)&v48, 0x12u);
      }

      goto LABEL_151;
    }
LABEL_44:
    if (kAVVCScope)
    {
      v12 = *(id *)kAVVCScope;
      if (!v12)
        goto LABEL_119;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v48 = 136315394;
      v49 = "ControllerImpl.mm";
      v50 = 1024;
      v51 = 1261;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: HomeButtonPress/UIButtonPress", (uint8_t *)&v48, 0x12u);
    }

LABEL_119:
    v38 = MGGetBoolAnswer();
    if (kAVVCScope)
    {
      v39 = *(id *)kAVVCScope;
      if (!v39)
        goto LABEL_128;
    }
    else
    {
      v39 = MEMORY[0x1E0C81028];
      v40 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      v41 = "handsFree";
      v42 = *(unsigned __int8 *)(a1 + 56);
      v49 = "ControllerImpl.mm";
      v48 = 136315650;
      if (!v42)
        v41 = "built-in speaker";
      v50 = 1024;
      v51 = 1266;
      v52 = 2080;
      v53 = v41;
      _os_log_impl(&dword_19B733000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
    }

LABEL_128:
    if ((v38 & 1) == 0 && !*(_BYTE *)(a1 + 57))
    {
      if (kAVVCScope)
      {
        v10 = *(id *)kAVVCScope;
        if (!v10)
          goto LABEL_78;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
        v47 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v48 = 136315394;
        v49 = "ControllerImpl.mm";
        v50 = 1024;
        v51 = 1268;
        _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: no vibrator support and no ZLL", (uint8_t *)&v48, 0x12u);
      }
      goto LABEL_77;
    }
    v8 = *(_QWORD *)(v3 + 336);
    if (v8 != -1)
      goto LABEL_169;
    v43 = *(unsigned __int8 *)(a1 + 57);
    if (*(_BYTE *)(a1 + 56))
    {
      if (!*(_BYTE *)(a1 + 57))
      {
        LODWORD(v8) = 2;
        goto LABEL_169;
      }
      v43 = 1;
    }
    LODWORD(v8) = v43 == 0;
LABEL_169:
    v17 = *(_QWORD *)(v3 + 344);
    if (v17 == -1)
    {
      if (*(_BYTE *)(a1 + 56))
        LODWORD(v17) = 2;
      else
        LODWORD(v17) = 1;
    }
    v5 = *(_QWORD *)(v3 + 352);
    if (v5 == -1)
    {
      if (*(_BYTE *)(a1 + 56))
        LODWORD(v5) = 2;
      else
        LODWORD(v5) = 1;
    }
    goto LABEL_87;
  }
  if (v2 <= 1969840751)
  {
    if (v2 > 1886352243)
    {
      if (v2 == 1886352244)
        goto LABEL_41;
      v7 = 1936750196;
      goto LABEL_25;
    }
    if (v2 == 1768764005)
    {
LABEL_35:
      if (kAVVCScope)
      {
        v10 = *(id *)kAVVCScope;
        if (!v10)
          goto LABEL_78;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
        v13 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v14 = "Wired/BT ButtonPress";
        v15 = *(_QWORD *)(a1 + 48);
        if (v15 == 1684628340)
          v14 = "Dictation";
        v49 = "ControllerImpl.mm";
        v48 = 136315650;
        if (v15 == 1768764005)
          v14 = "iMessageGestureToHead";
        v50 = 1024;
        v51 = 1331;
        v52 = 2080;
        v53 = v14;
        _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
      }
LABEL_77:

LABEL_78:
      if (*(_QWORD *)(v3 + 336) == -1)
        LODWORD(v8) = 2;
      else
        LODWORD(v8) = *(_QWORD *)(v3 + 336);
      if (*(_QWORD *)(v3 + 344) == -1)
        LODWORD(v17) = 2;
      else
        LODWORD(v17) = *(_QWORD *)(v3 + 344);
      if (*(_QWORD *)(v3 + 352) == -1)
        LODWORD(v5) = 2;
      else
        LODWORD(v5) = *(_QWORD *)(v3 + 352);
      goto LABEL_87;
    }
    if (v2 != 1768780647)
      goto LABEL_68;
    LODWORD(v5) = *(_DWORD *)(v3 + 328);
    if (kAVVCScope)
    {
      v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_139:
        LODWORD(v8) = 0;
        LODWORD(v17) = 2;
        goto LABEL_87;
      }
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v44 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v48 = 136315394;
      v49 = "ControllerImpl.mm";
      v50 = 1024;
      v51 = 1321;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: iMessage", (uint8_t *)&v48, 0x12u);
    }

    goto LABEL_139;
  }
  if (v2 > 1987012962)
  {
    if (v2 != 1987012963)
    {
      v4 = 2003329648;
LABEL_34:
      if (v2 == v4)
        goto LABEL_35;
LABEL_68:
      if (kAVVCScope)
      {
        v18 = *(id *)kAVVCScope;
        if (!v18)
        {
LABEL_167:
          LODWORD(v5) = 2;
          LODWORD(v17) = 2;
          LODWORD(v8) = 2;
          goto LABEL_87;
        }
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v48 = 136315394;
        v49 = "ControllerImpl.mm";
        v50 = 1024;
        v51 = 1339;
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: default", (uint8_t *)&v48, 0x12u);
      }

      goto LABEL_167;
    }
LABEL_38:
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
      {
LABEL_59:
        if (*(_QWORD *)(v3 + 336) == -1)
          LODWORD(v8) = 0;
        else
          LODWORD(v8) = *(_QWORD *)(v3 + 336);
        if (*(_QWORD *)(v3 + 344) == -1)
          LODWORD(v17) = 2;
        else
          LODWORD(v17) = *(_QWORD *)(v3 + 344);
        if (*(_QWORD *)(v3 + 352) == -1)
          LODWORD(v5) = 2;
        else
          LODWORD(v5) = *(_QWORD *)(v3 + 352);
        goto LABEL_87;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v48 = 136315394;
      v49 = "ControllerImpl.mm";
      v50 = 1024;
      v51 = 1301;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: Built-In/BT/CarPlay Voice Activation", (uint8_t *)&v48, 0x12u);
    }

    goto LABEL_59;
  }
  if (v2 == 1969840752)
    goto LABEL_44;
  if (v2 != 1986357346)
    goto LABEL_68;
  v8 = *(_QWORD *)(v3 + 336);
  if (v8 == -1)
    LODWORD(v8) = 2 * (*(_BYTE *)(a1 + 57) == 0);
  if (*(_QWORD *)(v3 + 344) == -1)
    LODWORD(v17) = 2;
  else
    LODWORD(v17) = *(_QWORD *)(v3 + 344);
  if (*(_QWORD *)(v3 + 352) == -1)
    LODWORD(v5) = 2;
  else
    LODWORD(v5) = *(_QWORD *)(v3 + 352);
LABEL_87:
  ControllerImpl::setStartAlertMode(v3, v8);
  ControllerImpl::setStopAlertMode(v3, v17);
  ControllerImpl::setStopWithErrorAlertMode(v3, v5);
  if (kAVVCScope)
  {
    v22 = *(id *)kAVVCScope;
    if (!v22)
      goto LABEL_112;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *(_DWORD *)(v3 + 320) - 1;
    if (v24 > 3)
      v25 = "Silent";
    else
      v25 = off_1E3BEC6E8[v24];
    v26 = *(_QWORD *)(v3 + 336);
    if (v26 > 4)
      v27 = "No Override";
    else
      v27 = off_1E3BEC6C0[v26];
    v28 = *(_DWORD *)(v3 + 324) - 1;
    if (v28 > 3)
      v29 = "Silent";
    else
      v29 = off_1E3BEC6E8[v28];
    v30 = *(_QWORD *)(v3 + 344);
    if (v30 > 4)
      v31 = "No Override";
    else
      v31 = off_1E3BEC6C0[v30];
    v32 = *(_DWORD *)(v3 + 328) - 1;
    if (v32 > 3)
      v33 = "Silent";
    else
      v33 = off_1E3BEC6E8[v32];
    v34 = *(_QWORD *)(v3 + 352);
    if (v34 > 4)
      v35 = "No Override";
    else
      v35 = off_1E3BEC6C0[v34];
    v48 = 136316930;
    v49 = "ControllerImpl.mm";
    v50 = 1024;
    v51 = 1349;
    v52 = 2080;
    v53 = v25;
    v54 = 2080;
    v55 = v27;
    v56 = 2080;
    v57 = v29;
    v58 = 2080;
    v59 = v31;
    v60 = 2080;
    v61 = v33;
    v62 = 2080;
    v63 = v35;
    _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configureAlertModeFromModeAndEngine: [final alert modes, overrides] : Start[%s, %s], Stop[%s, %s], StopWError[%s, %s])", (uint8_t *)&v48, 0x4Eu);
  }

LABEL_112:
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t v15[2];

  v3 = a2;
  v4 = a1[5];
  v5 = a1[6];
  v6 = (std::__shared_weak_count *)a1[8];
  v15[0] = a1[7];
  v15[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2;
  v12[3] = &unk_1E3BEBF88;
  v14 = a1[4];
  v9 = v3;
  v13 = v9;
  ControllerImpl::configureAlertModeFromModeAndEngine(v4, v5, v15, v12);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

}

void sub_19B7D83F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ControllerImpl::stopRunningEngines(ControllerImpl *this, AVVoiceController *a2, unsigned int a3)
{
  int v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v4 = (int)a2;
  v23 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)*((_QWORD *)this + 72);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  v19 = v5;
  v20 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v17, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    v9 = 0x100000000;
    if (!v4)
      v9 = 0;
    v21[0] = &off_1E3BE58F0;
    v21[1] = v9 | a3;
    v22 = v21;
    AVVCRecordingEngineMap::for_each_engine(v5, (uint64_t)v21, (uint64_t)"stopRunningEngines");
    v10 = v22;
    if (v22 == v21)
    {
      v11 = 4;
      v10 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_12;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_12:
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 = v20;
  }
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19B7D8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE58F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E3BE58F0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  id v5;
  id v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (*(uint64_t *)(v3 + 224) >= 4)
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
      {
LABEL_19:
        AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v3, *(_DWORD *)(a1 + 8), "operator()");
        AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v3 + 152));
        goto LABEL_20;
      }
    }
    else
    {
      v5 = (id)MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    v7 = v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = *(_QWORD *)(v3 + 272);
        v12 = *p_shared_owners + 1;
      }
      else
      {
        v12 = 0;
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = *(_QWORD *)(v3 + 272);
      }
      objc_msgSend(v10, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v3, v11, v12);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(v3 + 272);
      *(_DWORD *)buf = 136315906;
      v20 = "ControllerImpl.mm";
      v21 = 1024;
      v22 = 1378;
      v23 = 2112;
      v24 = v13;
      v25 = 2048;
      v26 = v14;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Interrupting recording on engine[%@] with streamID(%llu)", buf, 0x26u);

      if (v2)
      {
        v15 = (unint64_t *)&v2->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }

    }
    goto LABEL_19;
  }
LABEL_20:
  if (v2)
  {
    v17 = (unint64_t *)&v2->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7D8868(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE59C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE59C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v5;
  int v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSString *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3 && *(_QWORD *)(v3 + 224) == 5)
  {
    v13 = 0;
    (*(void (**)(uint64_t, NSString **))(*(_QWORD *)v3 + 328))(v3, &v13);
    if ((areNSStringsEqual(v13, **(NSString ***)(a1 + 8)) & 1) != 0)
      goto LABEL_13;
    AVVCRecordingEngine::getActivationContextSettings((AVVCRecordingEngine *)v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "announceCallsEnabled");

    if (!v6)
      goto LABEL_13;
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_12:
        AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v3 + 152));
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      v7 = (id)MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    v9 = v7;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(v3 + 272);
      *(_DWORD *)buf = 136315650;
      v15 = "ControllerImpl.mm";
      v16 = 1024;
      v17 = 1447;
      v18 = 2048;
      v19 = v10;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping the recording on stream(%lu) due to a category change", buf, 0x1Cu);
    }

    goto LABEL_12;
  }
LABEL_14:
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7D8B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t **v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16;
  _BOOL4 v17;
  _QWORD v18[4];
  id v19;
  int v20;
  _BYTE v21[8];

  TraceMethod::TraceMethod((TraceMethod *)v21, "setAlertURL");
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = v2;
    v4 = ControllerImpl::setupAlert(*(_QWORD *)(a1 + 56), *(void **)(a1 + 40), *(_DWORD *)(a1 + 72), v3);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 72) - 1;
    if (v5 > 2)
      v6 = 0;
    else
      v6 = *((_QWORD *)&off_1E3BEC708 + v5);
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v6);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v4 = ControllerImpl::setupAlert(*(_QWORD *)(a1 + 56), *(void **)(a1 + 40), *(_DWORD *)(a1 + 72), v3);
  }
  v7 = v4;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 280);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      while (1)
      {
        v11 = v9;
        v12 = *(_DWORD *)(v9 + 32);
        if (v10 >= v12)
          break;
        v9 = *(_QWORD *)v11;
        v13 = (uint64_t **)v11;
        if (!*(_QWORD *)v11)
          goto LABEL_16;
      }
      if (v12 >= v10)
        break;
      v9 = *(_QWORD *)(v11 + 8);
      if (!v9)
      {
        v13 = (uint64_t **)(v11 + 8);
        goto LABEL_16;
      }
    }
  }
  else
  {
    v13 = (uint64_t **)(v8 + 280);
    v11 = v8 + 280;
LABEL_16:
    v14 = operator new(0x30uLL);
    v14[8] = *(_DWORD *)(a1 + 72);
    *((_QWORD *)v14 + 5) = 0;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at((uint64_t **)(v8 + 272), v11, v13, (uint64_t *)v14);
    v11 = (uint64_t)v14;
  }
  objc_storeStrong((id *)(v11 + 40), v3);
  v15 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v15 + 360) == 201)
  {
    ControllerImpl::setAlertQueueState(*(_QWORD *)(a1 + 56), 200);
    v15 = *(_QWORD *)(a1 + 56);
  }
  v16 = *(void **)(a1 + 48);
  v17 = v16 != 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke_2;
  v18[3] = &unk_1E3BEBE50;
  v19 = v16;
  v20 = v7;
  ControllerImpl::safeNotifyAlwaysAsync(v15, v17, v18);

  TraceMethod::~TraceMethod((TraceMethod *)v21);
}

void sub_19B7D8D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ControllerImpl::setAlertURL(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  v7 = a2;
  v8 = a4;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke;
  v13[3] = &unk_1E3BEBFB0;
  v17 = a1;
  v9 = v7;
  v14 = v9;
  v18 = a3;
  v10 = v8;
  v15 = v10;
  v16 = &v19;
  makeSynchronous(v13);
  v11 = *((unsigned int *)v20 + 6);

  _Block_object_dispose(&v19, 8);
  return v11;
}

void sub_19B7D8E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke_2;
  v26[3] = &unk_1E3BEBF88;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v3;
  v28 = v8;
  v10 = v3;
  v11 = v5;
  v12 = v6;
  v13 = v26;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v36, *(_QWORD *)(v9 + 8), *(std::__shared_weak_count **)(v9 + 16));
  v14 = v36;
  v29[0] = v7;
  v29[1] = 3321888768;
  v29[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke;
  v29[3] = &unk_1E3BEAB10;
  v15 = v12;
  v35 = v4;
  v30 = v15;
  v33 = v36;
  v34 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = v11;
  v31 = v18;
  v19 = v13;
  v32 = v19;
  ControllerImpl::safeWork(v14, v29, (uint64_t)"setAlertURL");

  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

}

void sub_19B7D9080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v26 - 96);

  _Unwind_Resume(a1);
}

void ControllerImpl::VibeAlertCompletionProc(ControllerImpl *this, void *a2, AVVoiceController *a3)
{
  int v4;
  AVVoiceController *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  AVVoiceController *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  unint64_t v30;
  const char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t *v54;
  unint64_t v55;
  id v56;
  id v57;
  NSObject *v58;
  uint64_t SessionState;
  void *v60;
  unsigned int v61;
  char v62;
  id v63;
  void *v64;
  int v65;
  int v66;
  NSObject *v67;
  id v68;
  id v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  void *v74;
  void *v75;
  ControllerImpl *v76;
  id v77;
  const char *v78;
  id v79;
  int v80;
  void *v81;
  void *v82;
  ControllerImpl *v83;
  ControllerImpl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  AVVoiceController *v90;
  __CFString *v91;
  _QWORD v92[4];
  id v93[3];
  int v94;
  _QWORD v95[4];
  id v96[3];
  int v97;
  ControllerImpl *v98;
  std::__shared_weak_count *v99;
  char v100[8];
  int v101;
  char v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  id location;
  std::__shared_weak_count *v109;
  id v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  const char *v118;
  std::__shared_weak_count *v119;
  char v120[8];
  _BYTE buf[40];
  const char *v122;
  _QWORD v123[6];

  v4 = (int)this;
  v123[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v101 = 4129;
  v102 = 0;
  v103 = 0u;
  v104 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v100, "VibeAlertCompletionProc");
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v6 = *(id *)kAVVCScope;
      if (v6)
      {
        v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2775;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v4;
          _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc: SSID %u done", buf, 0x18u);
        }

      }
    }
  }
  if (v5)
  {
    -[AVVoiceController impl](v5, "impl");
    if (v98 && ObjectExists(v5))
    {
      ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_PlayAlertEnd"));
      ControllerImpl::setAlertState((uint64_t)v98, 0);
      if (v4 > 1403)
      {
        if ((v4 - 1405) >= 2)
        {
          if (v4 != 1404)
          {
LABEL_13:
            if (kAVVCScope)
            {
              v8 = *(id *)kAVVCScope;
              if (!v8)
              {
LABEL_152:
                v84 = v98;
                *((_DWORD *)v98 + 51) = 0;
                *((_QWORD *)v84 + 26) = 0;
                goto LABEL_153;
              }
            }
            else
            {
              v8 = MEMORY[0x1E0C81028];
              v68 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2836;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v4;
              _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc: notified for other ssID %d -- no-op", buf, 0x18u);
            }

            goto LABEL_152;
          }
LABEL_29:
          LODWORD(v105) = 4131;
          BYTE4(v105) = 0;
          v106 = 0u;
          v107 = 0u;
          kdebug_trace();
          TraceMethod::TraceMethod((TraceMethod *)&v116, "vibeStartAlertFinished");
          ControllerImpl::_getCurrentRecordingEngine(&v118, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStartAlertFinished");
          v13 = v118;
          v14 = MEMORY[0x1E0C809B0];
          if (v118)
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3321888768;
            *(_QWORD *)&buf[16] = ___ZN14ControllerImpl22vibeStartAlertFinishedEP17AVVoiceControllerm_block_invoke;
            *(_QWORD *)&buf[24] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
            *(_QWORD *)&buf[32] = v98;
            v122 = v118;
            v123[0] = v119;
            if (v119)
            {
              p_shared_owners = (unint64_t *)&v119->__shared_owners_;
              do
                v16 = __ldxr(p_shared_owners);
              while (__stxr(v16 + 1, p_shared_owners));
            }
            (*(void (**)(const char *, _BYTE *, const char *))(*(_QWORD *)v13 + 360))(v13, buf, "vibeStartAlertFinished");
            v17 = (std::__shared_weak_count *)v123[0];
            if (v123[0])
            {
              v18 = (unint64_t *)(v123[0] + 8);
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            goto LABEL_132;
          }
          if (kAVVCScope)
          {
            v24 = *(id *)kAVVCScope;
            if (!v24)
            {
LABEL_132:
              v70 = v119;
              if (v119)
              {
                v71 = (unint64_t *)&v119->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              TraceMethod::~TraceMethod((TraceMethod *)&v116);
              TraceWrapper::~TraceWrapper((TraceWrapper *)&v105);
              v73 = *((_DWORD *)v98 + 51);
              if (v73)
              {
                v74 = (void *)*((_QWORD *)v98 + 26);
                v75 = (void *)*((_QWORD *)v98 + 49);
                objc_initWeak((id *)buf, v5);
                v76 = v98;
                v95[0] = v14;
                v95[1] = 3221225472;
                v95[2] = ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke;
                v95[3] = &unk_1E3BEC000;
                objc_copyWeak(v96, (id *)buf);
                v97 = v73;
                v96[1] = v74;
                v96[2] = v75;
                ControllerImpl::safeNotify((uint64_t)v76, (uint64_t)"haptic alertPlaybackFinishedWithSettings", v95);
                objc_destroyWeak(v96);
                objc_destroyWeak((id *)buf);
              }
              goto LABEL_152;
            }
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
            v69 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2713;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = a3;
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d vibeStartAlertFinished: Could not find engine for streamID(%lu)", buf, 0x1Cu);
          }

          goto LABEL_132;
        }
      }
      else if ((v4 - 1111) >= 2)
      {
        if (v4 != 1110)
          goto LABEL_13;
        goto LABEL_29;
      }
      v11 = v5;
      TraceMethod::TraceMethod((TraceMethod *)v120, "vibeStopAlertFinished");
      if (kAVVCScope)
      {
        v12 = *(id *)kAVVCScope;
        if (!v12)
          goto LABEL_101;
      }
      else
      {
        v12 = (id)MEMORY[0x1E0C81028];
        v20 = MEMORY[0x1E0C81028];
      }
      v21 = v12;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        ControllerImpl::_getCurrentRecordingEngine(&v105, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        v22 = v105;
        if (v105)
        {
          ControllerImpl::_getCurrentRecordingEngine(&v118, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          (*(void (**)(const char *, _QWORD))(*(_QWORD *)v118 + 64))(v118, 0);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          switch(objc_msgSend(v88, "sessionState"))
          {
            case 0u:
              goto LABEL_46;
            case 1u:
              v23 = "Inactive";
              break;
            case 2u:
              v23 = "InteruptedWhileRecording";
              break;
            case 3u:
              v23 = "InteruptedWhilePlaying";
              break;
            case 4u:
              v23 = "Deactivating";
              break;
            case 5u:
              v23 = "Prewarming";
              break;
            case 6u:
              v23 = "Activating";
              break;
            case 7u:
              v23 = "Active";
              break;
            default:
              v23 = "ILLEGAL";
              break;
          }
        }
        else
        {
LABEL_46:
          v23 = "NotConfigured";
        }
        ControllerImpl::_getCurrentRecordingEngine(&v116, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        v89 = v22;
        if (v116)
        {
          v25 = (uint64_t)v117;
          if (v117)
            v25 = v117->__shared_owners_ + 1;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v116, *(unsigned int *)(v116 + 272), v25);
          v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v26 = CFSTR("(0x0) use_count:0");
        }
        v90 = v11;
        v91 = v26;
        ControllerImpl::_getCurrentRecordingEngine(&v114, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        v27 = v114;
        if (v114)
        {
          ControllerImpl::_getCurrentRecordingEngine(&v112, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 320))(v112);
          if (v28 > 4)
            v29 = "ILLEGAL";
          else
            v29 = off_1E3BEC7A8[v28];
        }
        else
        {
          v29 = "unconfigured";
        }
        ControllerImpl::_getCurrentRecordingEngine(&v110, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        if (v110)
        {
          ControllerImpl::_getCurrentRecordingEngine(&location, (uint64_t)v98, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          v30 = *((_QWORD *)location + 28);
          if (v30 > 6)
            v31 = "ILLEGAL";
          else
            v31 = off_1E3BEC7D0[v30];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2740;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v23;
          *(_WORD *)&buf[28] = 2112;
          *(_QWORD *)&buf[30] = v91;
          *(_WORD *)&buf[38] = 2080;
          v122 = v29;
          LOWORD(v123[0]) = 2080;
          *(_QWORD *)((char *)v123 + 2) = v31;
          _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          v32 = v109;
          v11 = v90;
          if (v109)
          {
            v33 = (unint64_t *)&v109->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        else
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2740;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v23;
          *(_WORD *)&buf[28] = 2112;
          *(_QWORD *)&buf[30] = v91;
          *(_WORD *)&buf[38] = 2080;
          v122 = v29;
          LOWORD(v123[0]) = 2080;
          *(_QWORD *)((char *)v123 + 2) = "unconfigured";
          _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          v11 = v90;
        }
        v35 = v111;
        if (v111)
        {
          v36 = (unint64_t *)&v111->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (v27)
        {
          v38 = v113;
          if (v113)
          {
            v39 = (unint64_t *)&v113->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        v41 = v115;
        if (v115)
        {
          v42 = &v115->__shared_owners_;
          do
            v43 = __ldaxr((unint64_t *)v42);
          while (__stlxr(v43 - 1, (unint64_t *)v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }

        v44 = v117;
        if (v117)
        {
          v45 = (unint64_t *)&v117->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v89)
        {

          v47 = v119;
          if (v119)
          {
            v48 = (unint64_t *)&v119->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
        v50 = (std::__shared_weak_count *)v106;
        if ((_QWORD)v106)
        {
          v51 = (unint64_t *)(v106 + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }

      }
LABEL_101:
      if (ControllerImpl::getSessionState(v98, (unint64_t)a3) != 4)
        goto LABEL_150;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v114, *((_QWORD *)v98 + 1), *((std::__shared_weak_count **)v98 + 2));
      SessionLock::SessionLock(&v105, v114, v115);
      v53 = v115;
      if (v115)
      {
        v54 = &v115->__shared_owners_;
        do
          v55 = __ldaxr((unint64_t *)v54);
        while (__stlxr(v55 - 1, (unint64_t *)v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (kAVVCScope)
      {
        v56 = *(id *)kAVVCScope;
        if (!v56)
          goto LABEL_114;
      }
      else
      {
        v56 = (id)MEMORY[0x1E0C81028];
        v57 = MEMORY[0x1E0C81028];
      }
      v58 = v56;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2745;
        _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d vibeStopAlertFinished: deactivating session -- finishing the job", buf, 0x12u);
      }

LABEL_114:
      SessionState = ControllerImpl::getSessionState(v98, (unint64_t)a3);
      ControllerImpl::sessionManagerForStreamID((uint64_t)v98, 0, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = objc_msgSend(v60, "getSessionActivationOptions");
      v110 = 0;
      v62 = objc_msgSend(v60, "setActive:withOptions:error:", 0, v61, &v110);
      v63 = v110;
      v64 = v63;
      if ((v62 & 1) != 0)
      {
        ControllerImpl::setSessionState((uint64_t)v98, 1, (unint64_t)a3);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((_QWORD *)v98 + 60);
LABEL_149:
        objc_initWeak(&location, v11);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZN14ControllerImpl21vibeStopAlertFinishedEP17AVVoiceControllerm_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E3BECC30;
        objc_copyWeak((id *)&buf[32], &location);
        ControllerImpl::safeNotify((uint64_t)v98, (uint64_t)"endAudioSessionActivate", buf);
        objc_destroyWeak((id *)&buf[32]);
        objc_destroyWeak(&location);

        VCLocker::~VCLocker((VCLocker *)&v105);
LABEL_150:
        TraceMethod::~TraceMethod((TraceMethod *)v120);

        v80 = *((_DWORD *)v98 + 51);
        if (v80)
        {
          v81 = (void *)*((_QWORD *)v98 + 26);
          v82 = (void *)*((_QWORD *)v98 + 49);
          objc_initWeak((id *)buf, v11);
          v83 = v98;
          v92[0] = MEMORY[0x1E0C809B0];
          v92[1] = 3221225472;
          v92[2] = ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke_197;
          v92[3] = &unk_1E3BEC000;
          objc_copyWeak(v93, (id *)buf);
          v94 = v80;
          v93[1] = v81;
          v93[2] = v82;
          ControllerImpl::safeNotify((uint64_t)v83, (uint64_t)"haptic alertPlaybackFinishedWithSettings", v92);
          objc_destroyWeak(v93);
          objc_destroyWeak((id *)buf);
        }
        goto LABEL_152;
      }
      v65 = objc_msgSend(v63, "code");
      v66 = v65;
      if (v65)
      {
        if ((v65 + 199999) <= 0x61A7E)
        {
          if (kAVVCScope)
          {
            v67 = *(id *)kAVVCScope;
            if (!v67)
              goto LABEL_147;
          }
          else
          {
            v67 = MEMORY[0x1E0C81028];
            v77 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2752;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v66;
            v78 = "%25s:%-5d ERROR: vibeStopAlertFinished: setActive:FALSE withOptions: err %d";
LABEL_145:
            _os_log_impl(&dword_19B733000, v67, OS_LOG_TYPE_ERROR, v78, buf, 0x18u);
            goto LABEL_146;
          }
          goto LABEL_146;
        }
        if (kAVVCScope)
        {
          v67 = *(id *)kAVVCScope;
          if (!v67)
            goto LABEL_147;
        }
        else
        {
          v67 = MEMORY[0x1E0C81028];
          v79 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2752;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v66;
          v78 = "%25s:%-5d ERROR: vibeStopAlertFinished: setActive:FALSE withOptions: err %{audio:4CC}d";
          goto LABEL_145;
        }
LABEL_146:

      }
LABEL_147:
      if (v66 != 560030580)
        ControllerImpl::setSessionState((uint64_t)v98, SessionState, (unint64_t)a3);
      goto LABEL_149;
    }
  }
  else
  {
    v98 = 0;
    v99 = 0;
  }
  if (kAVVCScope)
  {
    v9 = *(id *)kAVVCScope;
    if (!v9)
      goto LABEL_153;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2779;
    _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc -> called after object destroyed -- ignoring call", buf, 0x12u);
  }

LABEL_153:
  v85 = v99;
  if (v99)
  {
    v86 = (unint64_t *)&v99->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v100);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v101);

}

void sub_19B7D9FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location,uint64_t a50,char a51)
{
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  if (v53)
    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v54 - 248);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v54 - 232);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v54 - 216);
  if (a14)
  {

    std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v54 - 200);
  }
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a44);

  TraceMethod::~TraceMethod((TraceMethod *)(v54 - 184));
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  TraceMethod::~TraceMethod((TraceMethod *)&a35);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a37);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  id WeakRetained;
  AVVCAlertInformation *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = -[AVVCAlertInformation initWithAlertType:mode:endTime:]([AVVCAlertInformation alloc], "initWithAlertType:mode:endTime:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(WeakRetained, "alertPlaybackFinishedWithSettings:", v3);

  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 2802;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7DA2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke_197(uint64_t a1)
{
  id WeakRetained;
  AVVCAlertInformation *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = -[AVVCAlertInformation initWithAlertType:mode:endTime:]([AVVCAlertInformation alloc], "initWithAlertType:mode:endTime:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(WeakRetained, "alertPlaybackFinishedWithSettings:", v3);

  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 2827;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7DA40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21vibeStopAlertFinishedEP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "endAudioSessionActivate:", 0);
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 2763;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7DA53C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22vibeStartAlertFinishedEP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  __CFString *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!kAVVCScope)
  {
    v4 = (id)MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
LABEL_5:
    v6 = v4;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
LABEL_35:

      goto LABEL_36;
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 64))(*(_QWORD *)(a1 + 40), 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v1, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v8 = "Inactive";
          break;
        case 2u:
          v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v8 = "Deactivating";
          break;
        case 5u:
          v8 = "Prewarming";
          break;
        case 6u:
          v8 = "Activating";
          break;
        case 7u:
          v8 = "Active";
          break;
        default:
          v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v8 = "NotConfigured";
    }
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(std::__shared_weak_count **)(a1 + 48);
    v34 = v9;
    v35 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      if (v9)
      {
        v13 = (void *)MEMORY[0x1E0CB3940];
        v14 = *(_QWORD *)(v9 + 272);
        v15 = *p_shared_owners + 1;
LABEL_17:
        objc_msgSend(v13, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v9, v14, v15);
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
    }
    else if (v9)
    {
      v15 = 0;
      v13 = (void *)MEMORY[0x1E0CB3940];
      v14 = *(_QWORD *)(v9 + 272);
      goto LABEL_17;
    }
    v16 = CFSTR("(0x0) use_count:0");
LABEL_19:
    v17 = v16;
    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 320))(v18);
      if (v19 > 4)
        v20 = "ILLEGAL";
      else
        v20 = off_1E3BEC7A8[v19];
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
      {
        switch(*(_QWORD *)(v22 + 224))
        {
          case 0:
            v21 = "Invalid";
            break;
          case 1:
            v21 = "Uninitialized";
            break;
          case 2:
            v21 = "Prepared";
            break;
          case 3:
            v21 = "Stopped";
            break;
          case 4:
            v21 = "Starting";
            break;
          case 5:
            v21 = "Running";
            break;
          case 6:
            v21 = "Stopping";
            break;
          default:
            v21 = "ILLEGAL";
            break;
        }
      }
      else
      {
        v21 = "unconfigured";
      }
    }
    else
    {
      v20 = "unconfigured";
      v21 = "unconfigured";
    }
    *(_DWORD *)buf = 136316418;
    v37 = "ControllerImpl.mm";
    v38 = 1024;
    v39 = 2719;
    v40 = 2080;
    v41 = v8;
    v42 = 2112;
    v43 = v17;
    v44 = 2080;
    v45 = v20;
    v46 = 2080;
    v47 = v21;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

    if (!v10)
      goto LABEL_32;
    v23 = (unint64_t *)&v10->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v7)
        goto LABEL_34;
    }
    else
    {
LABEL_32:
      if (!v7)
      {
LABEL_34:

        goto LABEL_35;
      }
    }

    goto LABEL_34;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
    goto LABEL_5;
LABEL_36:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) == 4)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v32, *(_QWORD *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
    RecordLock::RecordLock(buf, v32, v33);
    v25 = v33;
    if (v33)
    {
      v26 = &v33->__shared_owners_;
      do
        v27 = __ldaxr((unint64_t *)v26);
      while (__stlxr(v27 - 1, (unint64_t *)v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *(_QWORD *)(a1 + 40);
    if (v28)
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 96))(v28);
      VCLocker::~VCLocker((VCLocker *)buf);
      if (v29)
        AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 40));
    }
    else
    {
      VCLocker::~VCLocker((VCLocker *)buf);
    }
  }
  else
  {
    if (kAVVCScope)
    {
      v30 = *(id *)kAVVCScope;
      if (!v30)
        return;
    }
    else
    {
      v30 = MEMORY[0x1E0C81028];
      v31 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "ControllerImpl.mm";
      v38 = 1024;
      v39 = 2732;
      _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d vibeStartAlertFinished: record state != kRecordStarting -- noop", buf, 0x12u);
    }

  }
}

void sub_19B7DAA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v9)

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke(uint64_t a1)
{
  id WeakRetained;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  id v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v24 = 0;
  v25 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3), (v25 = v4) != 0))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v24 = v5;
    if (WeakRetained && v5)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3321888768;
      v18[2] = ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_150;
      v18[3] = &unk_1E3BEA7C8;
      v20 = v5;
      v21 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23 = *(_DWORD *)(a1 + 64);
      v8 = WeakRetained;
      v9 = *(_QWORD *)(a1 + 56);
      v19 = v8;
      v22 = v9;
      ControllerImpl::dispatchAndSafeWork(v5, v18, (uint64_t)"playHapticAlertWithCompletion_block_invoke");

      v10 = v21;
      if (v21)
      {
        v11 = (unint64_t *)&v21->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    v5 = 0;
  }
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
      goto LABEL_20;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v27 = "ControllerImpl.mm";
    v28 = 1024;
    v29 = 1725;
    v30 = 2048;
    v31 = WeakRetained;
    v32 = 2048;
    v33 = v5;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_20:
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

}

void sub_19B7DACA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_150(uint64_t a1)
{
  ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)*(unsigned int *)(a1 + 64), *(void **)(a1 + 32), *(AVVoiceController **)(a1 + 56));
}

void ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke(uint64_t a1)
{
  id WeakRetained;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  id v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v24 = 0;
  v25 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3), (v25 = v4) != 0))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v24 = v5;
    if (WeakRetained && v5)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3321888768;
      v18[2] = ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_166;
      v18[3] = &unk_1E3BEA7C8;
      v20 = v5;
      v21 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23 = *(_DWORD *)(a1 + 64);
      v8 = WeakRetained;
      v9 = *(_QWORD *)(a1 + 56);
      v19 = v8;
      v22 = v9;
      ControllerImpl::dispatchAndSafeWork(v5, v18, (uint64_t)"playHapticWithBeepAlertWithCompletion_block_invoke");

      v10 = v21;
      if (v21)
      {
        v11 = (unint64_t *)&v21->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    v5 = 0;
  }
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
      goto LABEL_20;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v27 = "ControllerImpl.mm";
    v28 = 1024;
    v29 = 1836;
    v30 = 2048;
    v31 = WeakRetained;
    v32 = 2048;
    v33 = v5;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_20:
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

}

void sub_19B7DAF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_166(uint64_t a1)
{
  ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)*(unsigned int *)(a1 + 64), *(void **)(a1 + 32), *(AVVoiceController **)(a1 + 56));
}

void ControllerImpl::primeAlertQueue(uint64_t a1, int a2)
{
  NSObject *v2;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  NSObject *v17;
  NSObject *v18;
  OpaqueAudioQueue *v19;
  OSStatus v20;
  NSObject *v21;
  NSObject *v22;
  OpaqueAudioQueue *v23;
  OSStatus v24;
  OSStatus v25;
  NSObject *v26;
  id v27;
  id v28;
  const char *v29;
  NSObject *v30;
  id v31;
  const char *v32;
  id v33;
  id v34;
  OpaqueAudioQueue *v35;
  uint64_t **v36;
  OSStatus v37;
  OSStatus v38;
  NSObject *v39;
  NSObject *v40;
  id v41;
  const char *v42;
  id v43;
  NSObject *v44;
  int v45;
  id v46;
  _BYTE v47[12];
  int v48;
  uint8_t v49[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  OSStatus v54;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  _BYTE v60[10];
  OSStatus v61;
  uint64_t v62;

  LODWORD(v2) = a2;
  v62 = *MEMORY[0x1E0C80C00];
  v48 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v47, "primeAlertQueue");
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v4 = *(id *)kAVVCScope;
      if (v4)
      {
        v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          v6 = *(_DWORD *)(a1 + 204);
          *(_DWORD *)buf = 136315906;
          v56 = "ControllerImpl.mm";
          v57 = 1024;
          v58 = 2072;
          v59 = 1024;
          *(_DWORD *)v60 = (_DWORD)v2;
          *(_WORD *)&v60[4] = 1024;
          *(_DWORD *)&v60[6] = v6;
          _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: type %d (current is %d)", buf, 0x1Eu);
        }

      }
    }
  }
  if (!*(_BYTE *)(a1 + 408))
  {
    if (!ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1))
    {
      ControllerImpl::setAlertQueueState(a1, 0);
      if (kAVVCScope)
      {
        v22 = *(id *)kAVVCScope;
        if (!v22)
          goto LABEL_128;
      }
      else
      {
        v22 = MEMORY[0x1E0C81028];
        v27 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v56 = "ControllerImpl.mm";
        v57 = 1024;
        v58 = 2081;
        _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d primeAlertQueue: queue is NULL -- returning", buf, 0x12u);
      }

      goto LABEL_128;
    }
    if (*(_DWORD *)(a1 + 360) == 201 && *(_DWORD *)(a1 + 204) == (_DWORD)v2)
    {
      if (!kAVVCScope)
        goto LABEL_116;
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) == 0)
        goto LABEL_116;
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_116;
      v12 = v11;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v56 = "ControllerImpl.mm";
        v57 = 1024;
        v58 = 2130;
        _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: no-op", buf, 0x12u);
      }
LABEL_115:

LABEL_116:
      *(_BYTE *)(a1 + 408) = 0;
LABEL_128:
      TraceMethod::~TraceMethod((TraceMethod *)v47);
      return;
    }
    *(_BYTE *)(a1 + 408) = 1;
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
      {
        v13 = *(id *)kAVVCScope;
        if (v13)
        {
          v14 = v13;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v15 = *(_DWORD *)(a1 + 204);
            *(_DWORD *)buf = 136315906;
            v56 = "ControllerImpl.mm";
            v57 = 1024;
            v58 = 2087;
            v59 = 1024;
            *(_DWORD *)v60 = (_DWORD)v2;
            *(_WORD *)&v60[4] = 1024;
            *(_DWORD *)&v60[6] = v15;
            _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: type %d (current is %d)", buf, 0x1Eu);
          }

        }
      }
    }
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    if (QueueIsRunning(AlertQueueFromImplQueue))
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v17 = *(id *)kAVVCScope;
          if (v17)
          {
            v18 = v17;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v56 = "ControllerImpl.mm";
              v57 = 1024;
              v58 = 2092;
              _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: sync-stopping active alert queue", buf, 0x12u);
            }

          }
        }
      }
      ControllerImpl::setAlertQueueState(a1, 202);
      v19 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      v20 = AudioQueueStop(v19, 1u);
      if (kAVVCScope)
      {
        v21 = *(id *)kAVVCScope;
        if (!v21)
          goto LABEL_59;
      }
      else
      {
        v21 = MEMORY[0x1E0C81028];
        v28 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v29 = " but failed";
        *(_DWORD *)buf = 136315906;
        v56 = "ControllerImpl.mm";
        v58 = 2096;
        v59 = 2080;
        v57 = 1024;
        if (!v20)
          v29 = "";
        *(_QWORD *)v60 = v29;
        *(_WORD *)&v60[8] = 1024;
        v61 = v20;
        _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
      }

LABEL_59:
      if (v20)
      {
        if ((v20 + 199999) >= 0x61A7F)
        {
          if (kAVVCScope)
          {
            v30 = *(id *)kAVVCScope;
            if (!v30)
              goto LABEL_85;
          }
          else
          {
            v30 = MEMORY[0x1E0C81028];
            v46 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v56 = "ControllerImpl.mm";
            v57 = 1024;
            v58 = 2098;
            v59 = 1024;
            *(_DWORD *)v60 = v20;
            _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueStop err %{audio:4CC}d", buf, 0x18u);
          }
        }
        else
        {
          if (kAVVCScope)
          {
            v30 = *(id *)kAVVCScope;
            if (!v30)
              goto LABEL_85;
          }
          else
          {
            v30 = MEMORY[0x1E0C81028];
            v33 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v56 = "ControllerImpl.mm";
            v57 = 1024;
            v58 = 2098;
            v59 = 1024;
            *(_DWORD *)v60 = v20;
            _os_log_impl(&dword_19B733000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueStop err %d", buf, 0x18u);
          }
        }

      }
LABEL_85:
      if ((_DWORD)v2 == 1 && *(_DWORD *)(a1 + 320) != 2)
      {
        if (kAVVCScope)
        {
          if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
          {
            v39 = *(id *)kAVVCScope;
            if (v39)
            {
              v40 = v39;
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v56 = "ControllerImpl.mm";
                v57 = 1024;
                v58 = 2112;
                _os_log_impl(&dword_19B733000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: silent/haptic alert: not queueing a buffer", buf, 0x12u);
              }

            }
          }
        }
      }
      else
      {
        v35 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
        v36 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), (int)v2, &v48);
        v37 = AudioQueueEnqueueBuffer(v35, (AudioQueueBufferRef)v36[5], 0, 0);
        v38 = v37;
        if (v37)
        {
          if ((v37 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              v2 = *(id *)kAVVCScope;
              if (!v2)
              {
LABEL_110:
                *(_DWORD *)(a1 + 204) = (_DWORD)v2;
                if (!kAVVCScope)
                  goto LABEL_116;
                if ((*(_BYTE *)(kAVVCScope + 8) & 1) == 0)
                  goto LABEL_116;
                v44 = *(id *)kAVVCScope;
                if (!v44)
                  goto LABEL_116;
                v12 = v44;
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                {
                  v45 = *(_DWORD *)(a1 + 204);
                  *(_DWORD *)buf = 136315650;
                  v56 = "ControllerImpl.mm";
                  v57 = 1024;
                  v58 = 2127;
                  v59 = 1024;
                  *(_DWORD *)v60 = v45;
                  _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: done. current is now %d", buf, 0x18u);
                }
                goto LABEL_115;
              }
            }
            else
            {
              v2 = MEMORY[0x1E0C81028];
              v43 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v56 = "ControllerImpl.mm";
              v57 = 1024;
              v58 = 2118;
              v59 = 1024;
              *(_DWORD *)v60 = v38;
              v42 = "%25s:%-5d ERROR: primeAlertQueue: AudioQueueEnqueueBuffer err %{audio:4CC}d";
              goto LABEL_108;
            }
          }
          else
          {
            if (kAVVCScope)
            {
              v2 = *(id *)kAVVCScope;
              if (!v2)
                goto LABEL_110;
            }
            else
            {
              v2 = MEMORY[0x1E0C81028];
              v41 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v56 = "ControllerImpl.mm";
              v57 = 1024;
              v58 = 2118;
              v59 = 1024;
              *(_DWORD *)v60 = v38;
              v42 = "%25s:%-5d ERROR: primeAlertQueue: AudioQueueEnqueueBuffer err %d";
LABEL_108:
              _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_ERROR, v42, buf, 0x18u);
            }
          }

          LODWORD(v2) = 0;
          goto LABEL_110;
        }
      }
      ControllerImpl::setAlertQueueState(a1, 201);
      goto LABEL_110;
    }
    ControllerImpl::setAlertQueueState(a1, 200);
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "primeAlertQueue", "AudioQueueReset : mAlertQueue", 0);
    v23 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    v24 = AudioQueueReset(v23);
    v25 = v24;
    if (!v24)
    {
LABEL_84:
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      goto LABEL_85;
    }
    if ((v24 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        v26 = *(id *)kAVVCScope;
        if (!v26)
          goto LABEL_84;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
        v34 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_DWORD *)v49 = 136315650;
      v50 = "ControllerImpl.mm";
      v51 = 1024;
      v52 = 2106;
      v53 = 1024;
      v54 = v25;
      v32 = "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueReset err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        v26 = *(id *)kAVVCScope;
        if (!v26)
          goto LABEL_84;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
        v31 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_DWORD *)v49 = 136315650;
      v50 = "ControllerImpl.mm";
      v51 = 1024;
      v52 = 2106;
      v53 = 1024;
      v54 = v25;
      v32 = "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueReset err %d";
    }
    _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, v32, v49, 0x18u);
LABEL_83:

    LODWORD(v2) = v48;
    goto LABEL_84;
  }
  if (*(_DWORD *)(a1 + 204) == (_DWORD)v2)
  {
    if (kAVVCScope)
    {
      if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
      {
        v7 = *(id *)kAVVCScope;
        if (v7)
        {
          v8 = v7;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            v9 = *(_DWORD *)(a1 + 360);
            switch(v9)
            {
              case 200:
                v10 = "stopped";
                break;
              case 201:
                v10 = "primed";
                break;
              case 202:
                v10 = "stopping";
                break;
              case 203:
                v10 = "started";
                break;
              case 204:
                v10 = "running";
                break;
              default:
                if (v9)
                  v10 = "ILLEGAL";
                else
                  v10 = "uninit";
                break;
            }
            *(_DWORD *)buf = 136315650;
            v56 = "ControllerImpl.mm";
            v57 = 1024;
            v58 = 2076;
            v59 = 2080;
            *(_QWORD *)v60 = v10;
            _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: alert queue state '%s'.  reentrant or multi-threaded call -- returning", buf, 0x1Cu);
          }

        }
      }
    }
    goto LABEL_128;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: re-entrant request for different alert type", buf, 2u);
  }
  __break(1u);
}

void sub_19B7DBA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TraceMethod::~TraceMethod((TraceMethod *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke_2;
  v10[3] = &unk_1E3BEA758;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v15 = a2;
  v12 = v2;
  v13 = v3;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v11 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v3, v10, (uint64_t)"playAQBeepAlertWithCompletion_block_invoke");

  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19B7DBB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  __CFString *v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  __CFString *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!kAVVCScope)
  {
    v3 = (id)MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
LABEL_5:
    v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_35:

      return;
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v6 + 64))(*(_QWORD *)(a1 + 32), 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      switch(objc_msgSend(v1, "sessionState"))
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          v7 = "Inactive";
          break;
        case 2u:
          v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          v7 = "Deactivating";
          break;
        case 5u:
          v7 = "Prewarming";
          break;
        case 6u:
          v7 = "Activating";
          break;
        case 7u:
          v7 = "Active";
          break;
        default:
          v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      v7 = "NotConfigured";
    }
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      if (v8)
      {
        v12 = (void *)MEMORY[0x1E0CB3940];
        v13 = *(_QWORD *)(v8 + 272);
        v14 = *p_shared_owners + 1;
LABEL_17:
        objc_msgSend(v12, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v8, v13, v14);
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
    }
    else if (v8)
    {
      v14 = 0;
      v12 = (void *)MEMORY[0x1E0CB3940];
      v13 = *(_QWORD *)(v8 + 272);
      goto LABEL_17;
    }
    v15 = CFSTR("(0x0) use_count:0");
LABEL_19:
    v16 = v15;
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 320))(v17);
      if (v18 > 4)
        v19 = "ILLEGAL";
      else
        v19 = off_1E3BEC7A8[v18];
      v21 = *(_QWORD *)(a1 + 32);
      if (v21)
      {
        switch(*(_QWORD *)(v21 + 224))
        {
          case 0:
            v20 = "Invalid";
            break;
          case 1:
            v20 = "Uninitialized";
            break;
          case 2:
            v20 = "Prepared";
            break;
          case 3:
            v20 = "Stopped";
            break;
          case 4:
            v20 = "Starting";
            break;
          case 5:
            v20 = "Running";
            break;
          case 6:
            v20 = "Stopping";
            break;
          default:
            v20 = "ILLEGAL";
            break;
        }
      }
      else
      {
        v20 = "unconfigured";
      }
    }
    else
    {
      v19 = "unconfigured";
      v20 = "unconfigured";
    }
    *(_DWORD *)buf = 136316418;
    v25 = "ControllerImpl.mm";
    v26 = 1024;
    v27 = 2269;
    v28 = 2080;
    v29 = v7;
    v30 = 2112;
    v31 = v16;
    v32 = 2080;
    v33 = v19;
    v34 = 2080;
    v35 = v20;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

    if (!v9)
      goto LABEL_32;
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v6)
        goto LABEL_34;
    }
    else
    {
LABEL_32:
      if (!v6)
      {
LABEL_34:

        goto LABEL_35;
      }
    }

    goto LABEL_34;
  }
  v3 = *(id *)kAVVCScope;
  if (v3)
    goto LABEL_5;
}

void sub_19B7DBF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v7)

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke_178(_QWORD *a1)
{
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_DWORD *)(a1[6] + 232);
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1[4] + 16))(a1[4], *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
}

uint64_t __copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(a1 + 64);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_10:
        ControllerImpl::primeAlertQueue(*(_QWORD *)(a1 + 48), 1);
        ControllerImpl::setAlertState(*(_QWORD *)(a1 + 48), 0);
        return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v5 = 136315394;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 1886;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert playback failed -- attempting to re-prime", (uint8_t *)&v5, 0x12u);
    }

    goto LABEL_10;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ControllerImpl::playAlert(uint64_t a1, void *a2, int a3, AVVoiceController *a4, void *a5)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void (**v22)(id, _QWORD);
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(id, uint64_t);
  NSObject *v28;
  uint64_t v29;
  id v30;
  void (**v31)(id, _QWORD);
  NSObject *v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  NSObject *v39;
  uint64_t v40;
  ControllerImpl *v41;
  id v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  id v46;
  int v47;
  NSObject *v48;
  __CFDictionary *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  int v61;
  OpaqueAudioQueue *AlertQueueFromImplQueue;
  NSObject *v63;
  NSObject *v64;
  OpaqueAudioQueue *v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  id v79;
  id v80;
  id v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  id v85;
  const char *v86;
  NSObject *v87;
  OpaqueAudioQueue *v88;
  NSObject *v89;
  id v90;
  int v91;
  id v92;
  int v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  NSObject *v100;
  id v101;
  void *v102;
  int v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *p_shared_weak_owners;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  NSObject *v117;
  id v118;
  const char *v119;
  id v120;
  int v121;
  id v122;
  int v123;
  uint64_t v124;
  NSObject *v125;
  int v126;
  id v127;
  int v128;
  id v129;
  id v130;
  void *v131;
  _BOOL4 v132;
  const __CFString *v133;
  NSObject *v134;
  int v135;
  double v136;
  float v137;
  float v138;
  NSObject *v139;
  id v140;
  double v141;
  double v142;
  void *v143;
  double v144;
  void *v145;
  double v146;
  void *v147;
  void *v148;
  double v149;
  void *v150;
  double v151;
  void *v152;
  void *v153;
  void *v154;
  double v155;
  void *v156;
  double v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  id v169;
  int v170;
  id v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  id v178;
  const char *v179;
  id v180;
  id v181;
  id v182;
  id v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  NSObject *v190;
  void *v191;
  void *v192;
  unsigned int v193;
  ControllerImpl *v194;
  id val;
  id v197;
  id v198;
  _BYTE v199[16];
  uint64_t v200;
  std::__shared_weak_count *v201;
  char v202[8];
  int v203;
  char v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, int);
  void *v210;
  void (**v211)(id, _QWORD);
  uint64_t *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  int v220;
  id location[3];
  int v222;
  CFMutableDictionaryRef theDict;
  uint64_t v224;
  void (*v225)(uint64_t);
  void *v226;
  __int128 v227;
  __int128 v228;
  char v229[8];
  _BYTE buf[40];
  double v231;
  __int128 v232;
  int v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v197 = a2;
  v198 = a5;
  v203 = 4107;
  v204 = 0;
  v205 = 0u;
  v206 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v202, "playAlert");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v200, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v8 = v200;
  v9 = v201;
  if (v201)
  {
    p_shared_owners = (unint64_t *)&v201->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  AlertLock::AlertLock(v199, v8, v9);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v14 = *(id *)kAVVCScope;
      if (v14)
      {
        v15 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1981;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alertType = %d, primeFirst=true", buf, 0x18u);
        }

      }
    }
  }
  ProfileMetrics(CFSTR("AVVC_PROFILE_Prop_PlayAlertStart"));
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(_QWORD *)(v200 + 8), *(std::__shared_weak_count **)(v200 + 16));
  switch(a3)
  {
    case 3:
      v16 = *(_DWORD *)(*(_QWORD *)buf + 328);
      break;
    case 2:
      v16 = *(_DWORD *)(*(_QWORD *)buf + 324);
      break;
    case 1:
      v16 = *(_DWORD *)(*(_QWORD *)buf + 320);
      break;
    default:
      v16 = 0;
      break;
  }
  v17 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  switch(v16)
  {
    case 0:
      v20 = v200;
      v21 = v197;
      v22 = (void (**)(id, _QWORD))v198;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v207, *(_QWORD *)(v20 + 8), *(std::__shared_weak_count **)(v20 + 16));
      ControllerImpl::setAlertState(v207, 2);
      v23 = v207;
      *(_DWORD *)(v207 + 204) = a3;
      *(_QWORD *)(v23 + 208) = 0;
      switch(a3)
      {
        case 1:
          if (kAVVCScope)
          {
            v24 = *(id *)kAVVCScope;
            if (!v24)
            {
              v25 = 1404;
              goto LABEL_143;
            }
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
            v80 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1632;
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent start - fake a SS completion callback", buf, 0x12u);
          }
          v25 = 1404;
          break;
        case 2:
          if (kAVVCScope)
          {
            v24 = *(id *)kAVVCScope;
            if (!v24)
            {
              v25 = 1405;
              goto LABEL_143;
            }
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
            v79 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1636;
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent stop - fake a SS completion callback", buf, 0x12u);
          }
          v25 = 1405;
          break;
        case 3:
          if (kAVVCScope)
          {
            v24 = *(id *)kAVVCScope;
            if (!v24)
            {
              v25 = 1406;
LABEL_143:
              ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v25, v21, a4);
              v22[2](v22, 0);
              v82 = (std::__shared_weak_count *)v208;
              if (v208)
              {
                v83 = (unint64_t *)(v208 + 8);
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              goto LABEL_148;
            }
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
            v81 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1640;
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent stop - fake a SS completion callback", buf, 0x12u);
          }
          v25 = 1406;
          break;
        default:
          v25 = 0;
          goto LABEL_143;
      }

      goto LABEL_143;
    case 1:
      v36 = v200;
      v21 = v197;
      v22 = (void (**)(id, _QWORD))v198;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v207, *(_QWORD *)(v36 + 8), *(std::__shared_weak_count **)(v36 + 16));
      v37 = *(_DWORD *)(v36 + 204);
      if (v37)
        v38 = v37 == a3;
      else
        v38 = 1;
      if (v38)
        goto LABEL_178;
      if (v37 == 2)
      {
        if (kAVVCScope)
        {
          v39 = *(id *)kAVVCScope;
          if (!v39)
            goto LABEL_177;
        }
        else
        {
          v39 = MEMORY[0x1E0C81028];
          v92 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          v93 = *(_DWORD *)(v36 + 204);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1662;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v93;
          _os_log_impl(&dword_19B733000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }
      else
      {
        if (v37 != 3)
          goto LABEL_178;
        if (kAVVCScope)
        {
          v39 = *(id *)kAVVCScope;
          if (!v39)
            goto LABEL_177;
        }
        else
        {
          v39 = MEMORY[0x1E0C81028];
          v90 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          v91 = *(_DWORD *)(v36 + 204);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1666;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v91;
          _os_log_impl(&dword_19B733000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }

LABEL_177:
      AudioServicesStopSystemSound();
LABEL_178:
      ControllerImpl::setAlertState(v207, 2);
      v94 = v207;
      *(_DWORD *)(v207 + 204) = a3;
      *(_QWORD *)(v94 + 208) = 1;
      switch(a3)
      {
        case 3:
          if (kAVVCScope)
          {
            v95 = *(id *)kAVVCScope;
            if (!v95)
            {
              v96 = 1406;
              goto LABEL_204;
            }
          }
          else
          {
            v95 = MEMORY[0x1E0C81028];
            v98 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1689;
            _os_log_impl(&dword_19B733000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert stop", buf, 0x12u);
          }
          v96 = 1406;
          break;
        case 2:
          if (kAVVCScope)
          {
            v95 = *(id *)kAVVCScope;
            if (!v95)
            {
              v96 = 1405;
              goto LABEL_204;
            }
          }
          else
          {
            v95 = MEMORY[0x1E0C81028];
            v97 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1685;
            _os_log_impl(&dword_19B733000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert stop", buf, 0x12u);
          }
          v96 = 1405;
          break;
        case 1:
          if (kAVVCScope)
          {
            v95 = *(id *)kAVVCScope;
            if (!v95)
            {
              v96 = 1404;
              goto LABEL_204;
            }
          }
          else
          {
            v95 = MEMORY[0x1E0C81028];
            v99 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1681;
            _os_log_impl(&dword_19B733000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert start", buf, 0x12u);
          }
          v96 = 1404;
          break;
        default:
          v96 = 0;
          goto LABEL_204;
      }

LABEL_204:
      if (kAVVCScope)
      {
        v100 = *(id *)kAVVCScope;
        if (!v100)
          goto LABEL_211;
      }
      else
      {
        v100 = MEMORY[0x1E0C81028];
        v101 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1694;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v96;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = 1;
        _os_log_impl(&dword_19B733000, v100, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions with sound ID %u and flags %x", buf, 0x1Eu);
      }

LABEL_211:
      theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      LOWORD(v224) = 257;
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E0C92518], 0);
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E0C92520], 1);
      *(_DWORD *)buf = 1;
      objc_msgSend(std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(v207 + 272), 1, buf)[5], "absoluteString");
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = objc_msgSend(v102, "isEqualToString:", CFSTR("/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf"));

      if (v103)
      {
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "pathForResource:ofType:", CFSTR("siri_activation"), CFSTR("plist"));
        v105 = (void *)objc_claimAutoreleasedReturnValue();

        v106 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithContentsOfFile:", v105);
        v107 = v106;
        if (BYTE1(v224) && v106 && theDict)
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0C92548], v106);

      }
      if (a3 == 1)
      {
        AudioServicesPlaySystemSoundWithOptions();
        ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v96, v21, a4);
      }
      else
      {
        objc_initWeak(location, v21);
        v108 = v207;
        v109 = (std::__shared_weak_count *)v208;
        if (v208)
        {
          v110 = (unint64_t *)(v208 + 16);
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3321888768;
        *(_QWORD *)&buf[16] = ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E3BE6038;
        objc_copyWeak((id *)&buf[32], location);
        v231 = *(double *)&v108;
        *(_QWORD *)&v232 = v109;
        if (v109)
        {
          p_shared_weak_owners = (unint64_t *)&v109->__shared_weak_owners_;
          do
            v113 = __ldxr(p_shared_weak_owners);
          while (__stxr(v113 + 1, p_shared_weak_owners));
        }
        v233 = v96;
        *((_QWORD *)&v232 + 1) = a4;
        AudioServicesPlaySystemSoundWithOptions();
        if ((_QWORD)v232)
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v232);
        objc_destroyWeak((id *)&buf[32]);
        if (v109)
          std::__shared_weak_count::__release_weak(v109);
        objc_destroyWeak(location);
      }
      v22[2](v22, 0);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
      v114 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v115 = (unint64_t *)(v208 + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
LABEL_148:

      goto LABEL_336;
    case 2:
      v29 = v200;
      v30 = v197;
      v31 = (void (**)(id, _QWORD))v198;
      v217 = 0;
      v218 = &v217;
      v219 = 0x2020000000;
      v220 = 0;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v215, *(_QWORD *)(v29 + 8), *(std::__shared_weak_count **)(v29 + 16));
      *(_QWORD *)(v215 + 208) = 2;
      if (kAVVCScope)
      {
        v32 = *(id *)kAVVCScope;
        if (!v32)
          goto LABEL_72;
      }
      else
      {
        v32 = MEMORY[0x1E0C81028];
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1864;
        _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: using alert queue to play beep", buf, 0x12u);
      }

LABEL_72:
      ControllerImpl::setAlertState(v215, 1);
      ControllerImpl::primeAlertQueue(v215, a3);
      *((_DWORD *)v218 + 6) = v47;
      if (v47)
      {
        if (kAVVCScope)
        {
          v48 = *(id *)kAVVCScope;
          if (!v48)
          {
LABEL_111:
            v31[2](v31, *((unsigned int *)v218 + 6));
LABEL_112:
            v70 = v216;
            if (v216)
            {
              v71 = (unint64_t *)&v216->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            _Block_object_dispose(&v217, 8);

            goto LABEL_336;
          }
        }
        else
        {
          v48 = MEMORY[0x1E0C81028];
          v68 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v69 = *((_DWORD *)v218 + 6);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1896;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v69;
          _os_log_impl(&dword_19B733000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlert: Some Error occured! Not calling startAlertQueue() : %d", buf, 0x18u);
        }

        goto LABEL_111;
      }
      v49 = (__CFDictionary *)MEMORY[0x1E0C809B0];
      v207 = MEMORY[0x1E0C809B0];
      v208 = 3321888768;
      v209 = ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke;
      v210 = &unk_1E3BEA4F8;
      v50 = v215;
      v213 = v215;
      v214 = v216;
      if (v216)
      {
        v51 = (unint64_t *)&v216->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v212 = &v217;
      v211 = v31;
      v53 = &v207;
      TraceMethod::TraceMethod((TraceMethod *)v229, "startAlertQueue");
      ControllerImpl::_getCurrentRecordingEngine(&v228, v50, *(_QWORD *)(v50 + 472), 0, (uint64_t)"startAlertQueue");
      v54 = v228;
      if ((_QWORD)v228)
      {
        theDict = v49;
        v224 = 3321888768;
        v225 = ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke;
        v226 = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
        v227 = v228;
        if (*((_QWORD *)&v228 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        (*(void (**)(uint64_t, CFMutableDictionaryRef *, const char *))(*(_QWORD *)v54 + 360))(v54, &theDict, "startAlertQueue");
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
        if (*((_QWORD *)&v227 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      if (ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v50))
      {
        if (*(_DWORD *)(v50 + 204))
        {
          if (*(_DWORD *)(v50 + 360) == 201)
          {
            ControllerImpl::sessionManagerForStreamID(v50, 0, 0);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "deviceGain");
            *(_DWORD *)(v50 + 404) = v61;

            AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v50);
            AudioQueueSetParameter(AlertQueueFromImplQueue, 1u, *(float *)(v50 + 400) * *(float *)(v50 + 404));
            ControllerImpl::setAlertQueueState(v50, 203);
            if (kAVVCScope)
            {
              if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
              {
                v63 = *(id *)kAVVCScope;
                if (v63)
                {
                  v64 = v63;
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 2312;
                    _os_log_impl(&dword_19B733000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d startAlertQueue: calling AudioQueueStart", buf, 0x12u);
                  }

                }
              }
            }
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startAlertQueue", "mAlertQueue : AudioQueueStart", 0);
            v65 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v50);
            v66 = AudioQueueStart(v65, 0);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (kAVVCScope)
            {
              v67 = *(id *)kAVVCScope;
              if (!v67)
                goto LABEL_155;
            }
            else
            {
              v67 = MEMORY[0x1E0C81028];
              v85 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              v86 = " but failed";
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_DWORD *)&buf[14] = 2318;
              *(_WORD *)&buf[18] = 2080;
              *(_WORD *)&buf[12] = 1024;
              if (!(_DWORD)v66)
                v86 = "";
              *(_QWORD *)&buf[20] = v86;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v66;
              _os_log_impl(&dword_19B733000, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC started alert queue%s (%d)", buf, 0x22u);
            }

LABEL_155:
            if ((_DWORD)v66)
            {
              if ((v66 + 199999) >= 0x61A7F)
              {
                if (kAVVCScope)
                {
                  v87 = *(id *)kAVVCScope;
                  if (!v87)
                    goto LABEL_365;
                }
                else
                {
                  v87 = MEMORY[0x1E0C81028];
                  v180 = MEMORY[0x1E0C81028];
                }
                if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                  goto LABEL_364;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2319;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v66;
                v179 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStart err %{audio:4CC}d";
              }
              else
              {
                if (kAVVCScope)
                {
                  v87 = *(id *)kAVVCScope;
                  if (!v87)
                    goto LABEL_365;
                }
                else
                {
                  v87 = MEMORY[0x1E0C81028];
                  v178 = MEMORY[0x1E0C81028];
                }
                if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                  goto LABEL_364;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2319;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v66;
                v179 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStart err %d";
              }
              goto LABEL_363;
            }
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startAlertQueue", "mAlertQueue : AudioQueueStop", 0);
            v88 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v50);
            v66 = AudioQueueStop(v88, 0);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (kAVVCScope)
            {
              v89 = *(id *)kAVVCScope;
              if (!v89)
                goto LABEL_245;
            }
            else
            {
              v89 = MEMORY[0x1E0C81028];
              v118 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              v119 = " but failed";
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_DWORD *)&buf[14] = 2331;
              *(_WORD *)&buf[18] = 2080;
              *(_WORD *)&buf[12] = 1024;
              if (!(_DWORD)v66)
                v119 = "";
              *(_QWORD *)&buf[20] = v119;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v66;
              _os_log_impl(&dword_19B733000, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
            }

LABEL_245:
            if (!(_DWORD)v66)
            {
LABEL_365:
              v209((uint64_t)v53, v66);
LABEL_366:
              v184 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
              if (*((_QWORD *)&v228 + 1))
              {
                v185 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              TraceMethod::~TraceMethod((TraceMethod *)v229);

              v187 = v214;
              if (v214)
              {
                v188 = (unint64_t *)&v214->__shared_owners_;
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              goto LABEL_112;
            }
            if ((v66 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                v87 = *(id *)kAVVCScope;
                if (!v87)
                  goto LABEL_365;
              }
              else
              {
                v87 = MEMORY[0x1E0C81028];
                v183 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                goto LABEL_364;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2333;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v66;
              v179 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStop(async) err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                v87 = *(id *)kAVVCScope;
                if (!v87)
                  goto LABEL_365;
              }
              else
              {
                v87 = MEMORY[0x1E0C81028];
                v182 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                goto LABEL_364;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2333;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v66;
              v179 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStop(async) err %d";
            }
LABEL_363:
            _os_log_impl(&dword_19B733000, v87, OS_LOG_TYPE_ERROR, v179, buf, 0x18u);
LABEL_364:

            goto LABEL_365;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v190 = MEMORY[0x1E0C81028];
            goto LABEL_380;
          }
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v190 = MEMORY[0x1E0C81028];
LABEL_380:
          _os_log_error_impl(&dword_19B733000, v190, OS_LOG_TYPE_ERROR, " ASSERTION FAILED: no alert buffer is enqueued!", buf, 2u);
        }
        __break(1u);
        return;
      }
      location[0] = 0;
      location[1] = location;
      location[2] = (id)0x2020000000;
      v222 = 0;
      v73 = v228;
      if ((_QWORD)v228)
      {
        *(_QWORD *)buf = v49;
        *(_QWORD *)&buf[8] = 3321888768;
        *(_QWORD *)&buf[16] = ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke_178;
        *(_QWORD *)&buf[24] = &unk_1E3BEA530;
        v231 = COERCE_DOUBLE(location);
        v232 = v228;
        if (*((_QWORD *)&v228 + 1))
        {
          v74 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        *(_QWORD *)&buf[32] = v53;
        (*(void (**)(uint64_t, _BYTE *, const char *))(*(_QWORD *)v73 + 360))(v73, buf, "startAlertQueue");

        v76 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (*((_QWORD *)&v232 + 1))
        {
          v77 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        goto LABEL_356;
      }
      if (kAVVCScope)
      {
        v117 = *(id *)kAVVCScope;
        if (!v117)
        {
LABEL_355:
          v209((uint64_t)v53, -6789);
LABEL_356:
          _Block_object_dispose(location, 8);
          goto LABEL_366;
        }
      }
      else
      {
        v117 = MEMORY[0x1E0C81028];
        v181 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2276;
        _os_log_impl(&dword_19B733000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordErrorStatus: Current recording engine is nil!", buf, 0x12u);
      }

      goto LABEL_355;
    case 3:
      v33 = v200;
      val = v197;
      v194 = (ControllerImpl *)v198;
      if (!_os_feature_enabled_impl())
      {
        v40 = 4294955516;
        v41 = v194;
        goto LABEL_335;
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v207, *(_QWORD *)(v33 + 8), *(std::__shared_weak_count **)(v33 + 16));
      v34 = *(_DWORD *)(v33 + 204);
      if (!v34 || v34 == a3)
        goto LABEL_259;
      if (v34 == 2)
      {
        if (kAVVCScope)
        {
          v35 = *(id *)kAVVCScope;
          if (!v35)
            goto LABEL_258;
        }
        else
        {
          v35 = MEMORY[0x1E0C81028];
          v122 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          v123 = *(_DWORD *)(v33 + 204);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1753;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v123;
          _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }
      else
      {
        if (v34 != 3)
          goto LABEL_259;
        if (kAVVCScope)
        {
          v35 = *(id *)kAVVCScope;
          if (!v35)
            goto LABEL_258;
        }
        else
        {
          v35 = MEMORY[0x1E0C81028];
          v120 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          v121 = *(_DWORD *)(v33 + 204);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1757;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v121;
          _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }

LABEL_258:
      AudioServicesStopSystemSound();
LABEL_259:
      ControllerImpl::setAlertState(v207, 2);
      v124 = v207;
      *(_DWORD *)(v207 + 204) = a3;
      *(_QWORD *)(v124 + 208) = 3;
      switch(a3)
      {
        case 3:
          if (kAVVCScope)
          {
            v125 = *(id *)kAVVCScope;
            if (!v125)
            {
              v126 = 1112;
              goto LABEL_271;
            }
          }
          else
          {
            v125 = MEMORY[0x1E0C81028];
            v129 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1779;
            _os_log_impl(&dword_19B733000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert stop", buf, 0x12u);
          }
          v128 = 1112;
          break;
        case 2:
          if (kAVVCScope)
          {
            v125 = *(id *)kAVVCScope;
            if (!v125)
            {
              v126 = 1111;
              goto LABEL_271;
            }
          }
          else
          {
            v125 = MEMORY[0x1E0C81028];
            v127 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1775;
            _os_log_impl(&dword_19B733000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert stop", buf, 0x12u);
          }
          v128 = 1111;
          break;
        case 1:
          if (kAVVCScope)
          {
            v125 = *(id *)kAVVCScope;
            if (!v125)
            {
              v126 = 1110;
LABEL_271:
              v193 = v126;
              goto LABEL_286;
            }
          }
          else
          {
            v125 = MEMORY[0x1E0C81028];
            v130 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1771;
            _os_log_impl(&dword_19B733000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert start", buf, 0x12u);
          }
          v128 = 1110;
          break;
        default:
          v193 = 0;
          goto LABEL_286;
      }
      v193 = v128;

LABEL_286:
      *(_DWORD *)buf = 1;
      objc_msgSend(std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(v207 + 272), 1, buf)[5], "absoluteString");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v131, "isEqualToString:", CFSTR("/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf")))v132 = *(_DWORD *)(v33 + 384) != 0;
      else
        v132 = 0;

      theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      LOWORD(v224) = 257;
      v133 = (const __CFString *)*MEMORY[0x1E0C92518];
      if (v132)
      {
        CACFDictionary::AddUInt32(&theDict, v133, 1110);
        if (a3 == 1)
        {
          if (kAVVCScope)
          {
            v134 = *(id *)kAVVCScope;
            if (!v134)
              goto LABEL_328;
          }
          else
          {
            v134 = MEMORY[0x1E0C81028];
            v169 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
          {
            v170 = *(_DWORD *)(v33 + 384);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1824;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v170;
            _os_log_impl(&dword_19B733000, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions for SAE with sound ID %u", buf, 0x18u);
          }
LABEL_327:

LABEL_328:
          AudioServicesPlaySystemSoundWithOptions();
          ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v193, val, a4);
          goto LABEL_329;
        }
        goto LABEL_309;
      }
      CACFDictionary::AddUInt32(&theDict, v133, 0);
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E0C92520], 0);
      ControllerImpl::sessionManagerForStreamID(v33, (unint64_t)a4, 0);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v191, "deviceGain");
      *(_DWORD *)(v33 + 404) = v135;
      objc_msgSend(v191, "outputVolume");
      v137 = v136;
      v138 = (float)(*(float *)(v33 + 400) * *(float *)(v33 + 404)) * v137;
      if (kAVVCScope)
      {
        v139 = *(id *)kAVVCScope;
        if (!v139)
          goto LABEL_301;
      }
      else
      {
        v139 = MEMORY[0x1E0C81028];
        v140 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
      {
        v141 = *(float *)(v33 + 404);
        v142 = *(float *)(v33 + 400);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1808;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v141;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v142;
        *(_WORD *)&buf[38] = 2048;
        v231 = v137;
        LOWORD(v232) = 2048;
        *(double *)((char *)&v232 + 2) = v138;
        _os_log_impl(&dword_19B733000, v139, OS_LOG_TYPE_DEFAULT, "%25s:%-5d playAlert: volume is %f %f %f, %f", buf, 0x3Au);
      }

LABEL_301:
      CACFDictionary::AddFloat32(&theDict, (const __CFString *)*MEMORY[0x1E0C92550], v138);
      v143 = (void *)MEMORY[0x1E0C99D80];
      LODWORD(v144) = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v144);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v146) = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v146);
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v143, "dictionaryWithObjectsAndKeys:", v145, CFSTR("StartTime"), CFSTR("Tap"), CFSTR("Type"), v147, CFSTR("Amplitude"), 0);
      v192 = (void *)objc_claimAutoreleasedReturnValue();

      v148 = (void *)MEMORY[0x1E0C99D80];
      LODWORD(v149) = 1036831949;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v149);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v151) = 1.0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v151);
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v148, "dictionaryWithObjectsAndKeys:", v150, CFSTR("StartTime"), CFSTR("Tap"), CFSTR("Type"), v152, CFSTR("Amplitude"), 0);
      v153 = (void *)objc_claimAutoreleasedReturnValue();

      v154 = (void *)MEMORY[0x1E0C99D80];
      LODWORD(v155) = 1050253722;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v155);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v157) = 0;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v157);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v154, "dictionaryWithObjectsAndKeys:", v156, CFSTR("StartTime"), CFSTR("Tap"), CFSTR("Type"), v158, CFSTR("Amplitude"), 0);
      v159 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v192, v153, v159, 0);
      v160 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v160, CFSTR("Atoms"), 0);
      v161 = (void *)objc_claimAutoreleasedReturnValue();
      v162 = v161;
      if (BYTE1(v224) && v161 && theDict)
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0C92548], v161);

      if (a3 == 1)
      {
        if (kAVVCScope)
        {
          v134 = *(id *)kAVVCScope;
          if (!v134)
            goto LABEL_328;
        }
        else
        {
          v134 = MEMORY[0x1E0C81028];
          v171 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1828;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v193;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = 0;
          _os_log_impl(&dword_19B733000, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions with sound ID %u and flags %x", buf, 0x1Eu);
        }
        goto LABEL_327;
      }
LABEL_309:
      objc_initWeak(location, val);
      v163 = v207;
      v164 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v165 = (unint64_t *)(v208 + 16);
        do
          v166 = __ldxr(v165);
        while (__stxr(v166 + 1, v165));
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3321888768;
      *(_QWORD *)&buf[16] = ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E3BE6038;
      objc_copyWeak((id *)&buf[32], location);
      v231 = *(double *)&v163;
      *(_QWORD *)&v232 = v164;
      if (v164)
      {
        v167 = (unint64_t *)&v164->__shared_weak_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v233 = v193;
      *((_QWORD *)&v232 + 1) = a4;
      AudioServicesPlaySystemSoundWithOptions();
      if ((_QWORD)v232)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v232);
      objc_destroyWeak((id *)&buf[32]);
      if (v164)
        std::__shared_weak_count::__release_weak(v164);
      objc_destroyWeak(location);
LABEL_329:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
      v172 = (std::__shared_weak_count *)v208;
      v41 = v194;
      if (v208)
      {
        v173 = (unint64_t *)(v208 + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
          v41 = v194;
        }
      }
      v40 = 0;
LABEL_335:
      (*((void (**)(ControllerImpl *, uint64_t))v41 + 2))(v41, v40);

LABEL_336:
      VCLocker::~VCLocker((VCLocker *)v199);
      v175 = v201;
      if (v201)
      {
        v176 = (unint64_t *)&v201->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      TraceMethod::~TraceMethod((TraceMethod *)v202);
      TraceWrapper::~TraceWrapper((TraceWrapper *)&v203);

      return;
    case 4:
      v26 = v200;
      v27 = (void (**)(id, uint64_t))v198;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v207, *(_QWORD *)(v26 + 8), *(std::__shared_weak_count **)(v26 + 16));
      if (kAVVCScope)
      {
        v28 = *(id *)kAVVCScope;
        if (!v28)
          goto LABEL_62;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
        v42 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1969;
        _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlert: Cannot play Beep via System Sounds", buf, 0x12u);
      }

LABEL_62:
      v27[2](v27, 4294955516);
      v43 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v44 = (unint64_t *)(v208 + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      goto LABEL_336;
    default:
      goto LABEL_336;
  }
}

void sub_19B7DE2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,int a31,__int16 a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,id location,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v65;

  _Block_object_dispose(&location, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  TraceMethod::~TraceMethod((TraceMethod *)&a63);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Block_object_dispose(&a47, 8);

  VCLocker::~VCLocker((VCLocker *)&a26);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  TraceMethod::~TraceMethod((TraceMethod *)&a30);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a32);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  AVVoiceController *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(AVVoiceController **)(a1 + 56);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke_2;
  v10[3] = &unk_1E3BEBF88;
  v8 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v11 = v3;
  v12 = v7;
  v9 = v3;
  ControllerImpl::playAlert(v5, v8, v4, v6, v10);

}

void sub_19B7DE764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  NSObject *v3;
  id v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_12:
        objc_msgSend(WeakRetained, "startpointDetected");
        goto LABEL_17;
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 2862;
      _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling startpointDetected synchronously", (uint8_t *)&v6, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      goto LABEL_17;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "ControllerImpl.mm";
    v8 = 1024;
    v9 = 2861;
    v10 = 2048;
    v11 = 0;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
  }

LABEL_17:
}

void sub_19B7DE920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_200(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  NSObject *v4;
  id v5;
  id v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        objc_msgSend(WeakRetained, "interspeechPointDetectedAtTime:", *(double *)(a1 + 40));
        goto LABEL_17;
      }
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136315394;
      v8 = "ControllerImpl.mm";
      v9 = 1024;
      v10 = 2872;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling interspeechPointDetected synchronously ", (uint8_t *)&v7, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_17;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v7 = 136315650;
    v8 = "ControllerImpl.mm";
    v9 = 1024;
    v10 = 2871;
    v11 = 2048;
    v12 = 0;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
}

void sub_19B7DEAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_202(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  NSObject *v4;
  id v5;
  id v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        objc_msgSend(WeakRetained, "endpointDetectedAtTime:", *(double *)(a1 + 40));
        goto LABEL_17;
      }
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136315394;
      v8 = "ControllerImpl.mm";
      v9 = 1024;
      v10 = 2890;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling endpointDetected synchronously", (uint8_t *)&v7, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_17;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v7 = 136315650;
    v8 = "ControllerImpl.mm";
    v9 = 1024;
    v10 = 2889;
    v11 = 2048;
    v12 = 0;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
}

void sub_19B7DEC80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ControllerImpl::startKeepAliveQueue(uint64_t a1, std::__shared_weak_count *this, AVVCRecordingEngine **a3)
{
  void *v4;
  NSObject *v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v10, a1, this);
  if (AVVCRecordingEngine::canStartKeepAliveQueue(*a3))
  {
    +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "createWithCompletion:", 0);

    +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
    v5 = objc_claimAutoreleasedReturnValue();
    -[NSObject startWithCompletion:](v5, "startWithCompletion:", 0);
LABEL_9:

    goto LABEL_10;
  }
  if (!kAVVCScope)
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "ControllerImpl.mm";
      v14 = 1024;
      v15 = 2916;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d KeepAliveQueue will NOT be started since output is NOT hands free OR stream is NOT Running OR session is inactive", buf, 0x12u);
    }
    goto LABEL_9;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
    goto LABEL_7;
LABEL_10:
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19B7DEE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ControllerImpl::handleInterruptStart(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  AVAudioSession *v7;
  NSDictionary *v8;
  AVAudioSession *v9;
  NSObject *v10;
  id v11;
  const char *v12;
  NSObject *v13;
  unsigned int SessionState;
  void *v15;
  unsigned int v16;
  NSObject *v17;
  id v18;
  id v19;
  std::__shared_weak_count *v20;
  uint64_t *p_shared_owners;
  unint64_t v22;
  char v23;
  id v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  NSString *v31;
  void *v32;
  NSObject *v33;
  id v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  id v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  unint64_t v50;
  id *v51;
  uint64_t v52;
  NSDictionary *v53;
  void *v54;
  unsigned int v55;
  id v56;
  std::__shared_weak_count *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  AVVoiceController *val;
  _QWORD v70[4];
  AVVoiceController *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _QWORD v76[4];
  NSDictionary *v77;
  id v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  id v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _QWORD v86[2];
  int v87;
  _BYTE buf[18];
  __int16 v89;
  _BYTE v90[18];
  __int16 v91;
  NSDictionary *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  val = a2;
  v7 = a3;
  v8 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v84, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  v9 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_10;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    v12 = "aux";
    *(_DWORD *)&buf[14] = 2942;
    v89 = 2080;
    *(_DWORD *)buf = 136316162;
    if (v9 == v7)
      v12 = "primary";
    *(_QWORD *)v90 = v12;
    *(_WORD *)&v90[8] = 2048;
    *(_QWORD *)&v90[10] = v7;
    v91 = 2112;
    v92 = v8;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Interruption beginning for %s session (%p) info: %@", buf, 0x30u);
  }

LABEL_10:
  if (v9 == v7)
  {
    SessionState = ControllerImpl::getSessionState(this, 0);
    ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (SessionState >= 5)
      goto LABEL_44;
    ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "getSessionActivationOptions", val);

    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
        goto LABEL_25;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2964;
      v89 = 1024;
      *(_DWORD *)v90 = v16;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   We think our session was not active.  Make sure it isn't. deactivating session with options : %d", buf, 0x18u);
    }

LABEL_25:
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v82, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
    SessionLock::SessionLock(v86, v82, v83);
    v20 = v83;
    if (v83)
    {
      p_shared_owners = &v83->__shared_owners_;
      do
        v22 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v22 - 1, (unint64_t *)p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v81 = 0;
    v23 = -[NSObject setActive:withOptions:error:](v13, "setActive:withOptions:error:", 0, v16, &v81);
    v24 = v81;
    if (v24)
      v25 = v23;
    else
      v25 = 1;
    if ((v25 & 1) != 0)
      goto LABEL_41;
    if (kAVVCScope)
    {
      v26 = *(id *)kAVVCScope;
      if (!v26)
      {
LABEL_41:
        if (SessionState >= 3)
          ControllerImpl::setSessionState((uint64_t)this, 2, 0);

        VCLocker::~VCLocker((VCLocker *)v86);
LABEL_44:
        v30 = (void *)MEMORY[0x1A1AC6084]();
        -[NSDictionary objectForKey:](v8, "objectForKey:", *MEMORY[0x1E0CFF048]);
        v31 = (NSString *)objc_claimAutoreleasedReturnValue();
        ExtractProcessNameFromString(v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (v32 && objc_msgSend(v32, "length"))
        {
          +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
          v33 = objc_claimAutoreleasedReturnValue();
          -[NSObject logSessionMetric:value:category:type:reporterID:](v33, "logSessionMetric:value:category:type:reporterID:", CFSTR("avvcInterruptingProcessName"), v32, 1, 6, -[AVAudioSession reporterID](v7, "reporterID"));
        }
        else
        {
          if (kAVVCScope)
          {
            v33 = *(id *)kAVVCScope;
            if (!v33)
            {
LABEL_54:

              objc_autoreleasePoolPop(v30);
              ControllerImpl::stopKeepAliveQueue(*((ControllerImpl **)this + 1), *((std::__shared_weak_count **)this + 2));
              v87 = 0;
              v35 = (_QWORD *)*((_QWORD *)this + 72);
              v36 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
              v86[0] = v35;
              v86[1] = v36;
              if (v36)
              {
                v37 = (unint64_t *)&v36->__shared_owners_;
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              if (v35)
              {
                *(_QWORD *)buf = &off_1E3BE58A8;
                *(_QWORD *)&buf[8] = &v87;
                *(_QWORD *)&v90[4] = buf;
                AVVCRecordingEngineMap::for_each_engine(v35, (uint64_t)buf, (uint64_t)"isAnyEngineActive");
                v39 = *(_QWORD **)&v90[4];
                if (*(_BYTE **)&v90[4] == buf)
                {
                  v40 = 4;
                  v39 = buf;
                  goto LABEL_62;
                }
                if (*(_QWORD *)&v90[4])
                {
                  v40 = 5;
LABEL_62:
                  (*(void (**)(void))(*v39 + 8 * v40))();
                }
              }
              v41 = v87;
              if (v36)
              {
                v42 = (unint64_t *)&v36->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              v44 = MEMORY[0x1E0C809B0];
              if (v41)
              {
                if (kAVVCScope)
                {
                  v45 = *(id *)kAVVCScope;
                  if (!v45)
                  {
LABEL_79:
                    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v79, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
                    SessionLock::SessionLock(buf, v79, v80);
                    v48 = v80;
                    if (v80)
                    {
                      v49 = &v80->__shared_owners_;
                      do
                        v50 = __ldaxr((unint64_t *)v49);
                      while (__stlxr(v50 - 1, (unint64_t *)v49));
                      if (!v50)
                      {
                        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                        std::__shared_weak_count::__release_weak(v48);
                      }
                    }
                    ControllerImpl::setSessionState((uint64_t)this, 2, 0);
                    VCLocker::~VCLocker((VCLocker *)buf);
                    objc_initWeak(v51, val);
                    v52 = v84;
                    v76[0] = v44;
                    v76[1] = 3221225472;
                    v76[2] = ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke;
                    v76[3] = &unk_1E3BEC050;
                    objc_copyWeak(&v78, (id *)buf);
                    v53 = v8;
                    v77 = v53;
                    ControllerImpl::safeNotify(v52, (uint64_t)"beginRecordInterruptionWithContext", v76);
                    -[NSDictionary objectForKey:](v53, "objectForKey:", *MEMORY[0x1E0CFF020]);
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    LODWORD(v53) = objc_msgSend(v54, "unsignedIntValue");

                    if ((_DWORD)v53 == 6)
                      v55 = -11796;
                    else
                      v55 = -11786;
                    ControllerImpl::stopRunningEngines(this, 0, v55);

                    objc_destroyWeak(&v78);
                    objc_destroyWeak((id *)buf);
LABEL_98:
                    v70[0] = v44;
                    v70[1] = 3321888768;
                    v70[2] = ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke_206;
                    v70[3] = &unk_1E3BEA238;
                    v60 = v84;
                    v72 = v84;
                    v73 = v85;
                    if (v85)
                    {
                      v61 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v62 = __ldxr(v61);
                      while (__stxr(v62 + 1, v61));
                    }
                    v71 = val;
                    ControllerImpl::safeWork(v60, v70, (uint64_t)"handleInterruptStart");

                    v63 = v73;
                    if (v73)
                    {
                      v64 = (unint64_t *)&v73->__shared_owners_;
                      do
                        v65 = __ldaxr(v64);
                      while (__stlxr(v65 - 1, v64));
                      if (!v65)
                      {
                        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                        std::__shared_weak_count::__release_weak(v63);
                      }
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
                  v45 = MEMORY[0x1E0C81028];
                  v47 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3002;
                  _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Record was active", buf, 0x12u);
                }

                goto LABEL_79;
              }
              if (kAVVCScope)
              {
                v46 = *(id *)kAVVCScope;
                if (!v46)
                {
LABEL_92:
                  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v74, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
                  SessionLock::SessionLock(buf, v74, v75);
                  v57 = v75;
                  if (v75)
                  {
                    v58 = &v75->__shared_owners_;
                    do
                      v59 = __ldaxr((unint64_t *)v58);
                    while (__stlxr(v59 - 1, (unint64_t *)v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  ControllerImpl::setSessionState((uint64_t)this, 1, 0);
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((_QWORD *)this + 60);
                  VCLocker::~VCLocker((VCLocker *)buf);
                  goto LABEL_98;
                }
              }
              else
              {
                v46 = MEMORY[0x1E0C81028];
                v56 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3026;
                _os_log_impl(&dword_19B733000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Nothing active", buf, 0x12u);
              }

              goto LABEL_92;
            }
          }
          else
          {
            v33 = MEMORY[0x1E0C81028];
            v34 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2994;
            _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d handleInterruptStart: AVAudioSessionInterruptorNameKey nil or empty string. Please check !!", buf, 0x12u);
          }
        }

        goto LABEL_54;
      }
    }
    else
    {
      v26 = (id)MEMORY[0x1E0C81028];
      v27 = MEMORY[0x1E0C81028];
    }
    v28 = v26;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v24, "localizedDescription");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2972;
      v89 = 1024;
      *(_DWORD *)v90 = 0;
      *(_WORD *)&v90[4] = 2112;
      *(_QWORD *)&v90[6] = v29;
      _os_log_impl(&dword_19B733000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivating session returned  : %d - error - %@", buf, 0x22u);

    }
    goto LABEL_41;
  }
  if (kAVVCScope)
  {
    v13 = *(id *)kAVVCScope;
    if (!v13)
      goto LABEL_107;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v18 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2948;
    _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d   Interrupt for aux session unexpected", buf, 0x12u);
  }
LABEL_106:

LABEL_107:
  v66 = v85;
  if (v85)
  {
    v67 = (unint64_t *)&v85->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

}

void sub_19B7DF81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  VCLocker::~VCLocker((VCLocker *)&a32);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a30);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "beginRecordInterruptionWithContext:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 3011;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7DFA94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke_206(uint64_t a1)
{
  ControllerImpl::notifyAlertFinished(*(ControllerImpl **)(a1 + 40), *(AVVoiceController **)(a1 + 32));
}

void std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE58A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE58A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (*(uint64_t *)(v2 + 224) >= 4)
  {
    v4 = *(unsigned int **)(a1 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ControllerImpl::handleInterruptStop(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  AVVoiceController *v7;
  AVAudioSession *v8;
  NSDictionary *v9;
  AVAudioSession *v10;
  NSObject *v11;
  id v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  AVAudioSession *v31;
  __int16 v32;
  NSDictionary *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v22, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  v10 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_10;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v25 = "ControllerImpl.mm";
    v26 = 1024;
    v13 = "aux";
    v27 = 3050;
    v28 = 2080;
    *(_DWORD *)buf = 136316162;
    if (v10 == v8)
      v13 = "primary";
    v29 = v13;
    v30 = 2048;
    v31 = v8;
    v32 = 2112;
    v33 = v9;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Interruption ending for %s session (%p) info: %@", buf, 0x30u);
  }

LABEL_10:
  if (v10 == v8)
  {
    objc_initWeak((id *)buf, v7);
    v15 = v22;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___ZN14ControllerImpl19handleInterruptStopEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke;
    v20[3] = &unk_1E3BECC30;
    objc_copyWeak(&v21, (id *)buf);
    ControllerImpl::safeNotify(v15, (uint64_t)"endRecordInterruption", v20);
    objc_destroyWeak(&v21);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_19;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v25 = "ControllerImpl.mm";
      v26 = 1024;
      v27 = 3056;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d   Interrupt for aux session unexpected", buf, 0x12u);
    }

  }
LABEL_19:
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7DFE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, id location)
{
  void *v17;
  void *v18;
  void *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19handleInterruptStopEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "endRecordInterruption");
  }
  else
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "ControllerImpl.mm";
      v7 = 1024;
      v8 = 3063;
      v9 = 2048;
      v10 = 0;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7DFFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ControllerImpl::handleRouteChange(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  AVAudioSession *v7;
  NSObject *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  int SessionState;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  NSDictionary *v27;
  void *v28;
  int v29;
  NSString *v30;
  id v31;
  id v32;
  const char *v33;
  NSObject *v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  id v46;
  AVVoiceController *v47;
  id v48;
  void *v49;
  void *v50;
  NSObject *v51;
  id v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  id v62;
  void *v63;
  id v64;
  std::__shared_weak_count *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  VCLocker *v73;
  id v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  NSObject *v79;
  NSObject *v80;
  void *v81;
  int v82;
  NSObject *v83;
  NSObject *v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  NSObject *v88;
  NSObject *v89;
  int v90;
  const char *v91;
  NSObject *v92;
  NSObject *v93;
  NSObject *v94;
  id v95;
  NSObject *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  int v102;
  NSObject *v103;
  NSObject *v104;
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  NSObject *v109;
  NSObject *v110;
  int v111;
  int v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  AVVoiceController *v121;
  id v122;
  int v123;
  void *v124;
  void *v125;
  AVVoiceController *v126;
  NSDictionary *v127;
  AVAudioSession *v128;
  _QWORD v129[4];
  _QWORD v130[2];
  uint64_t v131[2];
  _QWORD v132[4];
  _QWORD v133[2];
  uint64_t v134[2];
  _QWORD v135[6];
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  NSString *v143;
  std::__shared_weak_count *v144;
  NSString *v145;
  _BYTE v146[18];
  _BYTE buf[40];
  AVVoiceController *v148;
  id v149;
  NSString *v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v126 = a2;
  v128 = a3;
  v127 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v141, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  v7 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_10;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = "aux";
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3075;
    *(_DWORD *)buf = 136315906;
    if (v7 == v128)
      v10 = "primary";
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v10;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v128;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Route Change for %s session (%p)", buf, 0x26u);
  }

LABEL_10:
  if (v7 == v128)
  {
    SessionState = ControllerImpl::getSessionState(this, 0);
    v13 = 0;
    v14 = 0;
    v139 = 0;
    v140 = 0;
    if (SessionState >= 7)
    {
      ControllerImpl::_getCurrentRecordingEngine(buf, (uint64_t)this, *((_QWORD *)this + 59), 1, (uint64_t)"handleRouteChange");
      v14 = *(_QWORD *)buf;
      v13 = *(_QWORD *)&buf[8];
      v139 = *(_QWORD *)buf;
      v140 = *(std::__shared_weak_count **)&buf[8];
    }
    v123 = SessionState;
    -[NSDictionary objectForKey:](v127, "objectForKey:", *MEMORY[0x1E0CFF198]);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKey:](v127, "objectForKey:", *MEMORY[0x1E0CFF190]);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    if (v125)
    {
      v15 = objc_msgSend(v125, "unsignedIntegerValue");
      switch(v15)
      {
        case 1uLL:
        case 2uLL:
        case 4uLL:
          goto LABEL_58;
        case 3uLL:
          v143 = 0;
          -[NSDictionary objectForKey:](v127, "objectForKey:", CFSTR("AVAudioSessionRouteChangeCurrentRouteKey"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          extractFirstInputPortTypeFromRouteDescription(v16, (void **)&v143);
          v17 = (_QWORD *)*((_QWORD *)this + 72);
          v18 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
          *(_QWORD *)v146 = v17;
          *(_QWORD *)&v146[8] = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          if (v17)
          {
            *(_QWORD *)buf = &off_1E3BE59C8;
            *(_QWORD *)&buf[8] = &v143;
            *(_QWORD *)&buf[24] = buf;
            AVVCRecordingEngineMap::for_each_engine(v17, (uint64_t)buf, (uint64_t)"stopRecordingOnCategoryChange");
            v21 = *(_QWORD **)&buf[24];
            if (*(_BYTE **)&buf[24] == buf)
            {
              v22 = 4;
              v21 = buf;
            }
            else
            {
              if (!*(_QWORD *)&buf[24])
                goto LABEL_124;
              v22 = 5;
            }
            (*(void (**)(void))(*v21 + 8 * v22))();
          }
          else
          {
            if (kAVVCScope)
            {
              v34 = *(id *)kAVVCScope;
              if (!v34)
                goto LABEL_124;
            }
            else
            {
              v34 = MEMORY[0x1E0C81028];
              v74 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1455;
              _os_log_impl(&dword_19B733000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
            }

          }
LABEL_124:
          if (v18)
          {
            v75 = (unint64_t *)&v18->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }

          if (v123 > 6)
          {
            ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v77, "category");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v78, "isEqualToString:", *MEMORY[0x1E0CFEFC0]) & 1) == 0)
            {
              CALog::LogObjIfEnabled(2, kAVVCScope);
              v79 = objc_claimAutoreleasedReturnValue();
              v80 = v79;
              if (v79 && os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3158;
                _os_log_impl(&dword_19B733000, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New route Category is not ours!", buf, 0x12u);
              }

            }
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v134, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            SessionLock::SessionLock(v146, v134[0], (std::__shared_weak_count *)v134[1]);
            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v134);
            if (v14)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 64))(v14, 0);
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              v82 = objc_msgSend(v81, "forceGetSessionProperties");

              if (v82)
              {
                CALog::LogObjIfEnabled(5, kAVVCScope);
                v83 = objc_claimAutoreleasedReturnValue();
                v84 = v83;
                if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3164;
                  _os_log_impl(&dword_19B733000, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d We were waiting for a route change -- Re-checking properties", buf, 0x12u);
                }

                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 64))(v14, 0);
                v85 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v85, "setForceGetSessionProperties:", 0);

                v132[0] = MEMORY[0x1E0C809B0];
                v132[1] = 3321888768;
                v132[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_210;
                v132[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
                v133[0] = v14;
                v133[1] = v13;
                if (v13)
                {
                  v86 = (unint64_t *)(v13 + 8);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 376))(v14, v132);
                std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v133);
                goto LABEL_159;
              }
              CALog::LogObjIfEnabled(6, kAVVCScope);
              v94 = objc_claimAutoreleasedReturnValue();
              v93 = v94;
              if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3172;
                _os_log_impl(&dword_19B733000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change reason: category change - ignoring", buf, 0x12u);
              }
            }
            else
            {
              CALog::LogObjIfEnabled(1, kAVVCScope);
              v92 = objc_claimAutoreleasedReturnValue();
              v93 = v92;
              if (v92 && os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3176;
                _os_log_impl(&dword_19B733000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil Engine! Could not get session properties", buf, 0x12u);
              }
            }

LABEL_159:
            VCLocker::~VCLocker((VCLocker *)v146);

            goto LABEL_191;
          }
          CALog::LogObjIfEnabled(6, kAVVCScope);
          v88 = objc_claimAutoreleasedReturnValue();
          v24 = v88;
          if (v88)
          {
            v89 = v88;
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            {
              v90 = ControllerImpl::getSessionState(this, 0);
              v91 = "not (yet) active";
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_DWORD *)buf = 136315650;
              if ((v90 & 0xFFFFFFFE) == 2)
                v91 = "interrupted";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3181;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v91;
              _os_log_impl(&dword_19B733000, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category change came in while we were %s -- ignoring", buf, 0x1Cu);
            }

          }
          goto LABEL_35;
        case 8uLL:
          v27 = v127;
          ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)v146, *((_QWORD *)this + 72), *((std::__shared_weak_count **)this + 73), 1uLL);
          if (!*(_QWORD *)v146 || *(_QWORD *)(*(_QWORD *)v146 + 224) != 5)
            goto LABEL_166;
          v143 = 0;
          (*(void (**)(_QWORD, NSString **))(**(_QWORD **)v146 + 328))(*(_QWORD *)v146, &v143);
          v145 = 0;
          -[NSDictionary objectForKey:](v27, "objectForKey:", CFSTR("AVAudioSessionRouteChangeCurrentRouteKey"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          extractFirstInputPortTypeFromRouteDescription(v28, (void **)&v145);
          v29 = areNSStringsEqual(v143, (NSString *)*MEMORY[0x1E0CFF148]);
          v30 = v145;
          if (!v29 || !areNSStringsEqual(v145, (NSString *)*MEMORY[0x1E0CFF118]))
            goto LABEL_165;
          if (kAVVCScope)
          {
            v31 = *(id *)kAVVCScope;
            if (!v31)
              goto LABEL_164;
          }
          else
          {
            v31 = (id)MEMORY[0x1E0C81028];
            v95 = MEMORY[0x1E0C81028];
          }
          v96 = v31;
          if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
          {
            v97 = *(_QWORD *)(*(_QWORD *)v146 + 272);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1483;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v97;
            _os_log_impl(&dword_19B733000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordingOnRouteConfigurationChange: Route has changed from CarAudio to MicrophoneBuiltIn while stream(%lu) engine is running! Stopping the recording.", buf, 0x1Cu);
          }

LABEL_164:
          AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(*(_QWORD *)v146 + 152));
LABEL_165:

LABEL_166:
          v98 = *(std::__shared_weak_count **)&v146[8];
          if (*(_QWORD *)&v146[8])
          {
            v99 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }

          if (v123 > 6)
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v131, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
            SessionLock::SessionLock(v146, v131[0], (std::__shared_weak_count *)v131[1]);
            std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v131);
            if (v14)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 64))(v14, 0);
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              v102 = objc_msgSend(v101, "forceGetSessionProperties");

              if (v102)
              {
                CALog::LogObjIfEnabled(5, kAVVCScope);
                v103 = objc_claimAutoreleasedReturnValue();
                v104 = v103;
                if (v103 && os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3199;
                  _os_log_impl(&dword_19B733000, v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d We were waiting for a route change -- Re-checking properties", buf, 0x12u);
                }

                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 64))(v14, 0);
                v105 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v105, "setForceGetSessionProperties:", 0);

                v129[0] = MEMORY[0x1E0C809B0];
                v129[1] = 3321888768;
                v129[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_213;
                v129[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
                v130[0] = v14;
                v130[1] = v13;
                if (v13)
                {
                  v106 = (unint64_t *)(v13 + 8);
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 376))(v14, v129);
                std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v130);
              }
            }
            else
            {
              CALog::LogObjIfEnabled(1, kAVVCScope);
              v109 = objc_claimAutoreleasedReturnValue();
              v110 = v109;
              if (v109 && os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3208;
                _os_log_impl(&dword_19B733000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil Engine! Could not get session properties", buf, 0x12u);
              }

            }
            v73 = (VCLocker *)v146;
            goto LABEL_190;
          }
          CALog::LogObjIfEnabled(6, kAVVCScope);
          v108 = objc_claimAutoreleasedReturnValue();
          v24 = v108;
          if (v108 && os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3212;
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change reason: route configuration change - ignoring", buf, 0x12u);
          }
          goto LABEL_35;
        default:
          if (kAVVCScope)
          {
            v26 = *(id *)kAVVCScope;
            if (!v26)
              goto LABEL_58;
          }
          else
          {
            v26 = MEMORY[0x1E0C81028];
            v32 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            if (v15 > 8)
              v33 = "Illegal";
            else
              v33 = off_1E3BEC740[v15];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3107;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v15;
            *(_WORD *)&buf[24] = 2080;
            *(_QWORD *)&buf[26] = v33;
            _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason : [%d] = %s", buf, 0x22u);
          }

LABEL_58:
          v121 = v126;
          v122 = v124;
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
          if (kAVVCScope)
          {
            v35 = *(id *)kAVVCScope;
            if (!v35)
              goto LABEL_65;
          }
          else
          {
            v35 = MEMORY[0x1E0C81028];
            v36 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4131;
            _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d _invalidateStreamWhenDeviceUnavailable()", buf, 0x12u);
          }

LABEL_65:
          ControllerImpl::sessionManagerForStreamID((uint64_t)v143, 0, 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "currentRoute");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "inputs");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "siriRemoteInputIdentifier");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend(v37, "isSessionOutputInWirelessSplitterMode");
          objc_msgSend(v122, "inputs");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v41, "count");

          v43 = objc_msgSend(v39, "count");
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3321888768;
          *(_QWORD *)&buf[16] = ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E3BEAD78;
          v150 = v143;
          v151 = v144;
          if (v144)
          {
            v44 = (unint64_t *)&v144->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = v122;
          v153 = v40;
          *(_QWORD *)&buf[32] = v46;
          v152 = v43;
          v47 = v121;
          v148 = v47;
          v48 = v120;
          v149 = v48;
          v49 = _Block_copy(buf);
          v50 = v49;
          if (v42 != 1 || v43)
          {
            (*((void (**)(void *))v49 + 2))(v49);
            goto LABEL_79;
          }
          if (kAVVCScope)
          {
            v51 = *(id *)kAVVCScope;
            if (!v51)
              goto LABEL_78;
          }
          else
          {
            v51 = MEMORY[0x1E0C81028];
            v52 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v146 = 136315394;
            *(_QWORD *)&v146[4] = "ControllerImpl.mm";
            *(_WORD *)&v146[12] = 1024;
            *(_DWORD *)&v146[14] = 4185;
            _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VSPD is not present, removing engine associated with BuiltInStream", v146, 0x12u);
          }

LABEL_78:
          ControllerImpl::_removeEngineFromMap((uint64_t)v143, v47, 1uLL, 0, v50);
LABEL_79:

          v53 = v151;
          if (v151)
          {
            v54 = (unint64_t *)&v151->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }

          v56 = v144;
          if (v144)
          {
            v57 = (unint64_t *)&v144->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }

          if (v123 > 6)
          {
            if (*((_QWORD *)this + 59))
            {
              v59 = v139;
              if (v139)
              {
                if (kAVVCScope)
                {
                  v60 = *(id *)kAVVCScope;
                  if (!v60)
                    goto LABEL_106;
                }
                else
                {
                  v60 = MEMORY[0x1E0C81028];
                  v64 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3118;
                  _os_log_impl(&dword_19B733000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route really changed -- Re-checking properties", buf, 0x12u);
                }
LABEL_106:

                std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v137, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
                SessionLock::SessionLock(buf, v137, v138);
                v65 = v138;
                if (v138)
                {
                  v66 = &v138->__shared_owners_;
                  do
                    v67 = __ldaxr((unint64_t *)v66);
                  while (__stlxr(v67 - 1, (unint64_t *)v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v135[0] = MEMORY[0x1E0C809B0];
                v135[1] = 3321888768;
                v135[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke;
                v135[3] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
                v135[4] = this;
                v135[5] = v59;
                v136 = v140;
                if (v140)
                {
                  v68 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
                }
                (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v59 + 376))(v59, v135);
                v70 = v136;
                if (v136)
                {
                  v71 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v73 = (VCLocker *)buf;
LABEL_190:
                VCLocker::~VCLocker(v73);
                goto LABEL_191;
              }
            }
          }
          if (kAVVCScope)
          {
            v61 = *(id *)kAVVCScope;
            if (!v61)
            {
LABEL_102:
              ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v63, "setForceGetSessionProperties:", 1);

              goto LABEL_191;
            }
          }
          else
          {
            v61 = MEMORY[0x1E0C81028];
            v62 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3141;
            _os_log_impl(&dword_19B733000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route really changed but session not-yet-active/interrupted -- set flag to check properties when we are active", buf, 0x12u);
          }

          goto LABEL_102;
      }
    }
    if (kAVVCScope)
    {
      v24 = *(id *)kAVVCScope;
      if (!v24)
        goto LABEL_191;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3218;
      _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason was NULL", buf, 0x12u);
    }
LABEL_35:

LABEL_191:
    v111 = MGGetSInt32Answer();
    v112 = MGGetBoolAnswer();
    if (v111 == 7)
      v113 = 1;
    else
      v113 = v112;
    if (v113 == 1)
      ControllerImpl::stopRunningEngines(this, (AVVoiceController *)1, 0xFFFFD1F5);

    v114 = v140;
    if (v140)
    {
      v115 = (unint64_t *)&v140->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    goto LABEL_201;
  }
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_201;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3080;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d   Route change for aux session unexpected", buf, 0x12u);
  }

LABEL_201:
  v117 = v142;
  if (v142)
  {
    v118 = (unint64_t *)&v142->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }

}

void sub_19B7E13F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v46);
  VCLocker::~VCLocker((VCLocker *)(v47 - 240));

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a46);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int SessionProperties;
  uint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  AVVCRecordingEngine *v13;
  _BOOL4 v14;
  NSObject *v15;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  id v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  float v28;
  int v29;
  void *v30;
  double v31;
  AVVCRecordingEngine *v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  NSObject *log;
  AVVCRecordingEngine *v38;
  std::__shared_weak_count *v39;
  char v40[8];
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  _BYTE v46[10];
  __int16 v47;
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  SessionProperties = AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 40));
  v4 = 2;
  if (SessionProperties > -11786)
  {
    if (SessionProperties != -11782)
    {
      if (SessionProperties != -11785)
        goto LABEL_11;
      v4 = 0;
    }
    goto LABEL_10;
  }
  if (SessionProperties == -11796 || SessionProperties == -11786)
LABEL_10:
    ControllerImpl::setSessionState(v2, v4, 0);
LABEL_11:
  v6 = *(_QWORD *)(a1 + 40);
  TraceMethod::TraceMethod((TraceMethod *)v40, "getSessionProperties_HWConfig");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v38, *(_QWORD *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16));
  if ((*(unsigned int (**)(AVVCRecordingEngine *))(*(_QWORD *)v38 + 72))(v38))
    goto LABEL_12;
  if (MGGetSInt32Answer() == 4 && (MGGetBoolAnswer() & 1) == 0)
  {
    v13 = v38;
    v14 = (*(double (**)(AVVCRecordingEngine *))(*(_QWORD *)v38 + 48))(v38) > 8000.0;
    (*(void (**)(AVVCRecordingEngine *, double))(*(_QWORD *)v13 + 40))(v13, *(double *)&qword_19B85A1D0[v14]);
    goto LABEL_12;
  }
  v10 = *((_QWORD *)v38 + 47);
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  v11 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)(v10 + 56));
  if ((objc_msgSend(*(id *)(v10 + 32), "isEqualToString:", *MEMORY[0x1E0CFF160]) & 1) != 0)
  {
    v12 = 4;
    goto LABEL_50;
  }
  if ((objc_msgSend(*(id *)(v10 + 32), "isEqualToString:", *MEMORY[0x1E0CFF110]) & 1) != 0)
  {
    v12 = 5;
    goto LABEL_50;
  }
  if (!objc_msgSend(*(id *)(v10 + 32), "isEqualToString:", *MEMORY[0x1E0CFF118]))
  {
    if (objc_msgSend(*(id *)(v10 + 32), "isEqualToString:", *MEMORY[0x1E0CFF148]))
    {
      if (kAVVCScope)
      {
        v15 = *(id *)kAVVCScope;
        if (!v15)
          goto LABEL_49;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
        v16 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v42 = "AVVCRouteManager.mm";
        v43 = 1024;
        v44 = 211;
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties_HWConfig: car audio route", buf, 0x12u);
      }
    }
    else
    {
      if (!objc_msgSend(*(id *)(v10 + 32), "isEqualToString:", CFSTR("No Record Route")))
      {
LABEL_49:
        v12 = 15;
        goto LABEL_50;
      }
      if (kAVVCScope)
      {
        v15 = *(id *)kAVVCScope;
        if (!v15)
          goto LABEL_49;
      }
      else
      {
        v15 = MEMORY[0x1E0C81028];
        v17 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v42 = "AVVCRouteManager.mm";
        v43 = 1024;
        v44 = 216;
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d getSessionProperties_HWConfig: unhandled audio route", buf, 0x12u);
      }
    }

    goto LABEL_49;
  }
  if (objc_msgSend(*(id *)(v10 + 40), "compare:", *MEMORY[0x1E0CFF140]))
    v12 = 3;
  else
    v12 = 2;
LABEL_50:
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v18 = *(id *)kAVVCScope;
      if (v18)
      {
        v19 = v18;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          if (v12 - 2 >= 3)
          {
            v20 = "Other";
            if (v12 == 5)
              v20 = "BT Headset/Headphones";
          }
          else
          {
            v20 = off_1E3BEBAA0[v12 - 2];
          }
          *(_DWORD *)buf = 136315650;
          v42 = "AVVCRouteManager.mm";
          v43 = 1024;
          v44 = 224;
          v45 = 2080;
          *(_QWORD *)v46 = v20;
          _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Hardware config: %s", buf, 0x1Cu);
        }

      }
    }
  }
  if (kAVVCScope)
  {
    v21 = *(id *)kAVVCScope;
    if (!v21)
      goto LABEL_67;
  }
  else
  {
    v21 = MEMORY[0x1E0C81028];
    v22 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)buf = 136316162;
    v42 = "AVVCRouteManager.mm";
    v43 = 1024;
    v44 = 226;
    v45 = 1024;
    *(_DWORD *)v46 = 0;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v23;
    v47 = 1024;
    v48 = v12;
    _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d forceUpdate: %d, old config: %d newConfig: %d", buf, 0x24u);
  }

LABEL_67:
  v24 = *(_DWORD *)(v10 + 24);
  if (v12 == v24)
  {
    v25 = 0;
    if (v11)
      goto LABEL_77;
    goto LABEL_76;
  }
  if (v12 >= 4 && v24 < (int)v12 || (v25 = 0, v12 <= 3) && v24 >= 4)
    v25 = 1;
  *(_DWORD *)(v10 + 24) = v12;
  if (!v11)
LABEL_76:
    std::mutex::unlock((std::mutex *)(v10 + 56));
LABEL_77:
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (IsSerializationEnabled(void)::enable)
  {
    v26 = *(unsigned int *)(v10 + 24);
  }
  else
  {
    std::mutex::lock((std::mutex *)(v10 + 56));
    v26 = *(unsigned int *)(v10 + 24);
    std::mutex::unlock((std::mutex *)(v10 + 56));
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  }
  v27 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
    std::mutex::lock((std::mutex *)(v10 + 56));
  if (v26 <= 0xF)
  {
    v28 = 1.0;
    if (((1 << v26) & 0x802E) != 0)
    {
LABEL_87:
      *(float *)(v10 + 48) = v28;
      goto LABEL_88;
    }
    if ((_DWORD)v26 == 4)
    {
      v28 = 0.717;
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v34 = *(id *)kAVVCScope;
          if (v34)
          {
            log = v34;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v42 = "AVVCRouteManager.mm";
              v43 = 1024;
              v44 = 260;
              _os_log_impl(&dword_19B733000, log, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetDeviceGainForHWConfig: using wired headset - reducing alert volume by 3dB", buf, 0x12u);
            }

          }
        }
      }
      goto LABEL_87;
    }
  }
LABEL_88:
  if (!v27)
    std::mutex::unlock((std::mutex *)(v10 + 56));
  if (IsSerializationEnabled(void)::onceToken != -1)
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
  if (IsSerializationEnabled(void)::enable)
  {
    v29 = *(_DWORD *)(v10 + 48);
  }
  else
  {
    std::mutex::lock((std::mutex *)(v10 + 56));
    v29 = *(_DWORD *)(v10 + 48);
    std::mutex::unlock((std::mutex *)(v10 + 56));
  }
  (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)v38 + 64))(v38, 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v31) = v29;
  objc_msgSend(v30, "setDeviceGain:", v31);

  if (!v25)
    goto LABEL_112;
  v32 = v38;
  if (*((_QWORD *)v38 + 42) != 1)
    goto LABEL_112;
  if (!kAVVCScope)
  {
    v33 = MEMORY[0x1E0C81028];
    v35 = MEMORY[0x1E0C81028];
    goto LABEL_108;
  }
  v33 = *(id *)kAVVCScope;
  if (v33)
  {
LABEL_108:
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v42 = "AVVCRecordingEngine.mm";
      v43 = 1024;
      v44 = 1429;
      _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties_HWConfig: HW config changed (not in response to client) -- stopping record", buf, 0x12u);
    }

    v32 = v38;
  }
  AVVCRecordingEngine::setRecordErrorStatus(v32, -11787, "getSessionProperties_HWConfig");
  AVVCRecordingEngine::stopRecordWithRecordLock(*((AVVCRecordingEngine **)v38 + 19));
LABEL_112:
  if (v12 != v24)
  {
    v36 = *(_QWORD *)(v6 + 176);
    if (v36)
      (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v36, v26);
  }
LABEL_12:
  v7 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v40);
}

void sub_19B7E1E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_210(uint64_t a1)
{
  return AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 32));
}

uint64_t ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_213(uint64_t a1)
{
  return AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 32));
}

void ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  char v19;

  v2 = *(_QWORD *)(a1 + 56);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke_2;
  v12[3] = &unk_1E3BEADB0;
  v3 = *(id *)(a1 + 32);
  v19 = *(_BYTE *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 72);
  v13 = v3;
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  v16 = v4;
  v17 = v6;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v14 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  ControllerImpl::safeWork(v2, v12, (uint64_t)"_invalidateStreamWhenDeviceUnavailable_block_invoke");

  v9 = v18;
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

}

void sub_19B7E204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  uint64_t v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  unint64_t v18[3];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "siriRemoteInputIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length") && !*(_BYTE *)(a1 + 80))
  {
    v10 = *(_QWORD *)(a1 + 56);

    if (v10 == 1)
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "siriRemoteInputIdentifier");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      ControllerImpl::_removeEngineFromMap(v11, v12, 0, v17, &__block_literal_global_272);

      return;
    }
  }
  else
  {

  }
  if (objc_msgSend(*(id *)(a1 + 48), "length") && *(_BYTE *)(a1 + 80))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(_QWORD **)(v3 + 576);
    v5 = *(std::__shared_weak_count **)(v3 + 584);
    v18[1] = (unint64_t)v4;
    v18[2] = (unint64_t)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v18[0] = 0;
    if (!v4)
    {
      if (kAVVCScope)
      {
        v13 = *(id *)kAVVCScope;
        if (!v13)
        {
LABEL_25:
          if (v5)
          {
            v15 = (unint64_t *)&v5->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return;
        }
      }
      else
      {
        v13 = MEMORY[0x1E0C81028];
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v20 = "ControllerImpl.mm";
        v21 = 1024;
        v22 = 4176;
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
      }

      goto LABEL_25;
    }
    v23[0] = &off_1E3BE5EF0;
    v23[1] = a1 + 48;
    v23[2] = v18;
    v24 = v23;
    AVVCRecordingEngineMap::for_each_engine(v4, (uint64_t)v23, (uint64_t)"_invalidateStreamWhenDeviceUnavailable_block_invoke");
    v8 = v24;
    if (v24 == v23)
    {
      v9 = 4;
      v8 = v23;
    }
    else
    {
      if (!v24)
      {
LABEL_20:
        ControllerImpl::_removeEngineFromMap(*(_QWORD *)(a1 + 64), *(void **)(a1 + 40), v18[0], 0, &__block_literal_global_274);
        goto LABEL_25;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_20;
  }
}

void sub_19B7E22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEED0Ev()
{
  JUMPOUT(0x1A1AC5BD4);
}

__n128 _ZNKSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3BE5EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3BE5EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v5;
  char v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
  {
    AVVCRouteManager::getRecordDeviceUID(*(id **)(v3 + 376));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqualToString:", **(_QWORD **)(a1 + 8));

    if ((v6 & 1) == 0)
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(v3 + 272);
  }
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19B7E2474(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::handleServerDeath(ControllerImpl *this, AVVoiceController *a2)
{
  AVVoiceController *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  id v9;
  std::__shared_weak_count *v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  unint64_t v23;
  int v24;
  char v25;
  char v26;
  void *v27;
  int v28;
  NSObject *v29;
  id v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _BYTE v42[16];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint8_t v45[128];
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v43, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (kAVVCScope)
  {
    v4 = *(id *)kAVVCScope;
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v47 = "ControllerImpl.mm";
    v48 = 1024;
    v49 = 3251;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Server died!", buf, 0x12u);
  }

LABEL_8:
  *((_BYTE *)this + 521) = 1;
  if (ControllerImpl::getSessionState(this, 0))
    goto LABEL_16;
  if (kAVVCScope)
  {
    v6 = *(id *)kAVVCScope;
    if (!v6)
      goto LABEL_16;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v47 = "ControllerImpl.mm";
    v48 = 1024;
    v49 = 3259;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::handleServerDeath: session is not configured", buf, 0x12u);
  }

LABEL_16:
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_23;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v47 = "ControllerImpl.mm";
    v48 = 1024;
    v49 = 3264;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ControllerImpl::handleServerDeath: Destroying internal state for later rebuild", buf, 0x12u);
  }

LABEL_23:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v40, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionLock::SessionLock(v42, v40, v41);
  v10 = v41;
  if (v41)
  {
    p_shared_owners = &v41->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setForceGetSessionProperties:", objc_msgSend(v13, "sessionState") != 7);
  objc_msgSend(v13, "setSessionState:", 0);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((_QWORD *)this + 60);
  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "auxSessionManagers");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v16 = v15;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v37 != v18)
          objc_enumerationMutation(v16);
        v20 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
        objc_msgSend(v20, "setForceGetSessionProperties:", objc_msgSend(v20, "sessionState") != 7);
        objc_msgSend(v20, "setSessionState:", 0);
      }
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
    }
    while (v17);
  }

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v34, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionUnlocker::SessionUnlocker(buf, v34, v35);
  v21 = v35;
  if (v35)
  {
    v22 = &v35->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  ControllerImpl::stopRunningEngines(this, 0, 0xFFFFD1F7);
  VCUnlocker::~VCUnlocker((VCUnlocker *)buf);
  ControllerImpl::cleanup(this, v3);
  v24 = MGGetSInt32Answer();
  v25 = MGGetBoolAnswer();
  if (v24 == 7)
    v26 = 1;
  else
    v26 = v25;
  if ((v26 & 1) == 0)
  {
    ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "isMiniDuckingEnabled");

    if (v28)
    {
      if (kAVVCScope)
      {
        v29 = *(id *)kAVVCScope;
        if (!v29)
        {
LABEL_52:
          ControllerImpl::enableMiniDucking(this, 0);
          goto LABEL_53;
        }
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
        v30 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v47 = "ControllerImpl.mm";
        v48 = 1024;
        v49 = 188;
        _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resetting miniducking", buf, 0x12u);
      }

      goto LABEL_52;
    }
  }
LABEL_53:

  VCLocker::~VCLocker((VCLocker *)v42);
  v31 = v44;
  if (v44)
  {
    v32 = (unint64_t *)&v44->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

}

void sub_19B7E2A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  VCLocker::~VCLocker((VCLocker *)va);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

_BYTE *SessionUnlocker::SessionUnlocker(_BYTE *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  VCUnlocker::VCUnlocker(a1, a2, 3u);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void sub_19B7E2B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ControllerImpl::handleServerReset(ControllerImpl *this, AVVoiceController *a2)
{
  NSObject *v3;
  id v4;
  NSObject *v5;
  id v6;
  std::__shared_weak_count *v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t v31[128];
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v29, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v33 = "ControllerImpl.mm";
    v34 = 1024;
    v35 = 3300;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Server reset after death", buf, 0x12u);
  }

LABEL_8:
  *((_BYTE *)this + 521) = 0;
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v33 = "ControllerImpl.mm";
    v34 = 1024;
    v35 = 3304;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ControllerImpl::handleServerReset: restoring activation context and resetting session properties", buf, 0x12u);
  }

LABEL_15:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v27, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionLock::SessionLock(buf, v27, v28);
  v7 = v28;
  if (v28)
  {
    p_shared_owners = &v28->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((_QWORD *)this + 66) = 0;
  ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setupOneTimeSessionSettingsForClient:", *((_QWORD *)this + 23));
  +[AVVCSessionFactory sharedInstance](AVVCSessionFactory, "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "auxSessionManagers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v13 = v12;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v24 != v15)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "setupOneTimeSessionSettingsForClient:", *((_QWORD *)this + 23), (_QWORD)v23);
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v14);
  }

  v17 = (void *)MEMORY[0x1A1AC6084]();
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "updateWithReporterID:", objc_msgSend(v19, "reporterID"));

  objc_autoreleasePoolPop(v17);
  VCLocker::~VCLocker((VCLocker *)buf);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19B7E2EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);

  VCLocker::~VCLocker((VCLocker *)(v14 - 96));
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ControllerImpl::setContext(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  id v14;
  id v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v29, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke;
  v22[3] = &unk_1E3BEACD0;
  v10 = v29;
  v26 = a1;
  v27 = v29;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v9;
  v25 = v13;
  v14 = v8;
  v23 = v14;
  v15 = v7;
  v24 = v15;
  ControllerImpl::safeWork(v10, v22, (uint64_t)"setContext");

  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_19B7E30C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _BOOL4 v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  int v8;
  void *v9;
  int v10;
  id v11;
  NSObject *v12;
  int v13;
  id v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  int v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  void *v39;
  id *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  NSObject *v49;
  void *v50;
  int v51;
  int v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  NSObject *v61;
  void *v62;
  char *v63;
  uint64_t *v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  int v69;
  void *v70;
  uint64_t v71;
  void *v72;
  _BOOL4 v73;
  id v74;
  NSObject *v75;
  char *v76;
  void *v77;
  int v78;
  uint64_t v79;
  AVVCRecordingEngineMap *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  int v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSString *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  NSObject *v105;
  id v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  NSObject *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  NSObject *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t *v135;
  _QWORD *v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  unint64_t *v164;
  unint64_t v165;
  NSObject *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  unint64_t *v192;
  __int128 v193;
  std::__shared_weak_count *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  NSObject *v208;
  int v209;
  id v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  id v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  id v226;
  void *v227;
  int v228[2];
  _QWORD v229[4];
  id v230;
  NSObject *v231;
  id v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  _QWORD v238[2];
  void (*v239)(uint64_t, uint64_t *);
  void *v240;
  id v241;
  id v242;
  id v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  _QWORD aBlock[4];
  id v251;
  uint64_t *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  AVVCRecordingEngineMap *v255;
  std::__shared_weak_count *v256;
  _QWORD v257[4];
  id v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  _QWORD v264[4];
  NSObject *v265;
  __int128 v266;
  int v267[2];
  int *v268;
  uint64_t v269;
  uint64_t v270;
  _BYTE buf[40];
  char *v272;
  _QWORD *v273;
  int *v274;
  _QWORD *v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  int v280;
  char v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  if (!*(_BYTE *)(v2 + 520))
  {
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)v228 = objc_msgSend(*(id *)(a1 + 32), "activationMode");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 464), "setParentVoiceController:", *(_QWORD *)(a1 + 40));
    v260 = 0;
    v261 = &v260;
    v262 = 0x2020000000;
    v263 = 0;
    v7 = *(id *)(a1 + 32);
    v8 = objc_msgSend(v7, "activationMode");
    if (objc_msgSend(v7, "activationMode") == 1987012963 || objc_msgSend(v7, "activationMode") == 1752396914)
    {
      if (objc_msgSend(v7, "announceCallsEnabled"))
      {
        ControllerImpl::sessionManagerForStreamID(v6, 0, 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "predictIfMicrophoneShouldBeUsedForActivationMode:", objc_msgSend(v7, "activationMode"));

        if (kAVVCScope)
        {
          v11 = *(id *)kAVVCScope;
          if (!v11)
            goto LABEL_18;
        }
        else
        {
          v11 = (id)MEMORY[0x1E0C81028];
          v14 = MEMORY[0x1E0C81028];
        }
        v15 = v11;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          Get4CCFromInt(v8);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3439;
          *(_WORD *)&buf[18] = 2112;
          *(_QWORD *)&buf[20] = v16;
          _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Announce Calls case for activation mode (%@)", buf, 0x1Cu);

        }
      }
      else
      {
        v10 = 1;
      }
LABEL_18:
      if ((v10 & isHACProduct()) == 1 && *(_QWORD *)(v6 + 184) == 1)
      {
        if (kAVVCScope)
        {
          v17 = *(id *)kAVVCScope;
          if (!v17)
          {
LABEL_48:
            v21 = 0;
            LODWORD(v20) = 0;
            v13 = 4;
            goto LABEL_130;
          }
        }
        else
        {
          v17 = MEMORY[0x1E0C81028];
          v28 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3444;
          _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: HAC engine selected", buf, 0x12u);
        }

        goto LABEL_48;
      }
      if (kAVVCScope)
      {
        v18 = *(id *)kAVVCScope;
        if (!v18)
          goto LABEL_30;
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3451;
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: AQ engine selected", buf, 0x12u);
      }

LABEL_30:
      if (kAVVCScope)
      {
        v20 = *(id *)kAVVCScope;
        if (!v20)
        {
          v21 = 0;
LABEL_37:
          v13 = 2;
LABEL_130:
          v12 = objc_retainAutorelease(v21);
LABEL_131:

          v5 = v12;
          v263 = (int)v20;
          v64 = v261;
          if (*((_DWORD *)v261 + 6))
          {
            if (kAVVCScope)
            {
              v65 = *(id *)kAVVCScope;
              if (!v65)
              {
LABEL_142:
                v71 = *(_QWORD *)(a1 + 64);
                v72 = *(void **)(a1 + 48);
                v73 = v72 != 0;
                v257[0] = MEMORY[0x1E0C809B0];
                v257[1] = 3221225472;
                v257[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_219;
                v257[3] = &unk_1E3BEBEE8;
                v258 = v72;
                v259 = &v260;
                ControllerImpl::safeNotifyAlwaysAsync(v71, v73, v257);

LABEL_143:
                _Block_object_dispose(&v260, 8);
                goto LABEL_144;
              }
            }
            else
            {
              v65 = (id)MEMORY[0x1E0C81028];
              v67 = MEMORY[0x1E0C81028];
            }
            v68 = v65;
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              v69 = *((_DWORD *)v64 + 6);
              Get4CCFromInt(v228[0]);
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3652;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v69;
              *(_WORD *)&buf[24] = 2112;
              *(_QWORD *)&buf[26] = v70;
              _os_log_impl(&dword_19B733000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: returned error - %d for activation mode(%@)", buf, 0x22u);

            }
            goto LABEL_142;
          }
          if (kAVVCScope)
          {
            v66 = *(id *)kAVVCScope;
            if (!v66)
              goto LABEL_149;
          }
          else
          {
            v66 = (id)MEMORY[0x1E0C81028];
            v74 = MEMORY[0x1E0C81028];
          }
          v75 = v66;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            v76 = off_1E3BEC7A8[v13];
            Get4CCFromInt(v228[0]);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = objc_msgSend(*(id *)(a1 + 32), "announceCallsEnabled");
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3658;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v76;
            *(_WORD *)&buf[28] = 2112;
            *(_QWORD *)&buf[30] = v77;
            *(_WORD *)&buf[38] = 1024;
            LODWORD(v272) = v78;
            _os_log_impl(&dword_19B733000, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Selected engine (%s) for activation mode (%@) with announceCallsEnabled(%d)", buf, 0x2Cu);

          }
LABEL_149:
          v79 = *(_QWORD *)(a1 + 64);
          v80 = *(AVVCRecordingEngineMap **)(v79 + 576);
          v81 = *(std::__shared_weak_count **)(v79 + 584);
          v255 = v80;
          v256 = v81;
          if (v81)
          {
            p_shared_owners = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldxr(p_shared_owners);
            while (__stxr(v83 + 1, p_shared_owners));
          }
          AVVCRecordingEngineMap::listEngines(v80);
          v84 = MEMORY[0x1E0C809B0];
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3321888768;
          aBlock[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_220;
          aBlock[3] = &unk_1E3BEA4C0;
          v85 = *(std::__shared_weak_count **)(a1 + 72);
          v253 = *(_QWORD *)(a1 + 64);
          v254 = v85;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v251 = *(id *)(a1 + 48);
          v252 = &v260;
          v227 = _Block_copy(aBlock);
          v248 = 0;
          v249 = 0;
          v88 = isHACProduct();
          if (v13 == 4)
            v89 = v88;
          else
            v89 = 0;
          if (v89 == 1)
          {
            ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)buf, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 64) + 584), 0x8001uLL);
            v91 = *(_QWORD *)buf;
            v90 = *(std::__shared_weak_count **)&buf[8];
            goto LABEL_188;
          }
          v92 = *(_QWORD *)(a1 + 64);
          v93 = v5;
          v94 = *(NSString **)(v92 + 576);
          v95 = *(std::__shared_weak_count **)(v92 + 584);
          *(_QWORD *)v267 = v94;
          v268 = (int *)v95;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          v266 = 0uLL;
          if (v94)
          {
            AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, v94, v93);
            v98 = *(_OWORD *)buf;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v99 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
            v266 = v98;
            if (v99)
            {
              v100 = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v102 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v103 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v95 = (std::__shared_weak_count *)v268;
            goto LABEL_182;
          }
          if (kAVVCScope)
          {
            v105 = *(id *)kAVVCScope;
            if (!v105)
            {
LABEL_182:
              if (v95)
              {
                v107 = (unint64_t *)&v95->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }

              v90 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
              v91 = v266;
LABEL_188:
              v248 = v91;
              v249 = v90;
              if (v91)
              {
                v229[0] = v84;
                v229[1] = 3321888768;
                v229[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_226;
                v229[3] = &unk_1E3BEB1D0;
                v233 = v91;
                v234 = v90;
                if (v90)
                {
                  v109 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                }
                v235 = *(_QWORD *)v228;
                v230 = *(id *)(a1 + 32);
                v111 = v5;
                v113 = *(_QWORD *)(a1 + 64);
                v112 = *(std::__shared_weak_count **)(a1 + 72);
                v231 = v111;
                v236 = v113;
                v237 = v112;
                if (v112)
                {
                  v114 = (unint64_t *)&v112->__shared_owners_;
                  do
                    v115 = __ldxr(v114);
                  while (__stxr(v115 + 1, v114));
                }
                v232 = v227;
                (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v91 + 360))(v91, v229, "setContext_block_invoke");

                v116 = v237;
                if (v237)
                {
                  v117 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }

                v119 = v234;
                if (!v234)
                  goto LABEL_277;
                v120 = (unint64_t *)&v234->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
LABEL_275:
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
LABEL_277:
                v181 = v249;
                if (v249)
                {
                  v182 = (unint64_t *)&v249->__shared_owners_;
                  do
                    v183 = __ldaxr(v182);
                  while (__stlxr(v183 - 1, v182));
                  if (!v183)
                  {
                    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                    std::__shared_weak_count::__release_weak(v181);
                  }
                }

                v184 = v254;
                if (v254)
                {
                  v185 = (unint64_t *)&v254->__shared_owners_;
                  do
                    v186 = __ldaxr(v185);
                  while (__stlxr(v186 - 1, v185));
                  if (!v186)
                  {
                    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                    std::__shared_weak_count::__release_weak(v184);
                  }
                }
                v187 = v256;
                if (v256)
                {
                  v188 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                goto LABEL_143;
              }
              v122 = *(_QWORD *)(a1 + 64);
              v123 = *(std::__shared_weak_count **)(a1 + 72);
              v246 = v122;
              v247 = v123;
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
                v127 = *(_QWORD *)(a1 + 64);
                v126 = *(std::__shared_weak_count **)(a1 + 72);
              }
              else
              {
                v126 = 0;
                v127 = v122;
              }
              v128 = *(void **)(a1 + 40);
              v238[0] = v84;
              v238[1] = 3321888768;
              v239 = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_223;
              v240 = &unk_1E3BE5E08;
              v244 = v127;
              v245 = v126;
              if (v126)
              {
                v129 = (unint64_t *)&v126->__shared_owners_;
                do
                  v130 = __ldxr(v129);
                while (__stxr(v130 + 1, v129));
              }
              v242 = *(id *)(a1 + 48);
              v241 = *(id *)(a1 + 32);
              v243 = v227;
              v226 = v128;
              v131 = v5;
              v132 = v238;
              *(_QWORD *)v267 = 0;
              v268 = v267;
              v269 = 0x2020000000;
              v270 = 0;
              v266 = 0uLL;
              if (v13 != 3)
              {
                if (v13 == 1)
                {
                  v133 = v246;
                  v134 = (unint64_t *)operator new(0x298uLL);
                  v134[1] = 0;
                  v135 = v134 + 1;
                  v134[2] = 0;
                  *v134 = (unint64_t)&off_1E3BE9D58;
                  v136 = v134 + 3;
                  AVVCPluginRecordingEngine::AVVCPluginRecordingEngine((uint64_t)(v134 + 3), *(_QWORD *)(v133 + 184), *(void **)(v133 + 464));
                  *(_QWORD *)&v137 = v134 + 3;
                  *((_QWORD *)&v137 + 1) = v134;
                  v138 = (std::__shared_weak_count *)v134[5];
                  if (v138)
                  {
                    if (v138->__shared_owners_ != -1)
                    {
LABEL_227:
                      v266 = v137;
                      v146 = v268;
                      v147 = (unint64_t *)(v246 + 608);
                      do
                      {
                        v148 = __ldxr(v147);
                        v149 = v148 + 1;
                      }
                      while (__stxr(v149, v147));
LABEL_245:
                      *((_QWORD *)v146 + 3) = v149;
LABEL_246:
                      v163 = v226;
                      goto LABEL_247;
                    }
                    do
                      v139 = __ldxr(v135);
                    while (__stxr(v139 + 1, v135));
                    v217 = v137;
                    v140 = v134 + 2;
                    do
                      v141 = __ldxr(v140);
                    while (__stxr(v141 + 1, v140));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                    std::__shared_weak_count::__release_weak(v138);
                    v137 = v217;
                  }
                  else
                  {
                    do
                      v142 = __ldxr(v135);
                    while (__stxr(v142 + 1, v135));
                    v143 = v134 + 2;
                    do
                      v144 = __ldxr(v143);
                    while (__stxr(v144 + 1, v143));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                  }
                  do
                    v145 = __ldaxr(v135);
                  while (__stlxr(v145 - 1, v135));
                  if (!v145)
                  {
                    v218 = v137;
                    (*(void (**)(unint64_t *))(*v134 + 16))(v134);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v134);
                    v137 = v218;
                  }
                  goto LABEL_227;
                }
                v190 = isHACProduct() ^ 1;
                if (v13 != 4)
                  LOBYTE(v190) = 1;
                if ((v190 & 1) == 0)
                {
                  v191 = v246;
                  v134 = (unint64_t *)operator new(0x298uLL);
                  v134[1] = 0;
                  v192 = v134 + 1;
                  v134[2] = 0;
                  *v134 = (unint64_t)&off_1E3BE5D70;
                  v136 = v134 + 3;
                  AVVCHACRecordingEngine::AVVCHACRecordingEngine((uint64_t)(v134 + 3), *(_QWORD *)(v191 + 184));
                  *(_QWORD *)&v193 = v134 + 3;
                  *((_QWORD *)&v193 + 1) = v134;
                  v194 = (std::__shared_weak_count *)v134[5];
                  if (v194)
                  {
                    if (v194->__shared_owners_ != -1)
                    {
LABEL_308:
                      v266 = v193;
                      *((_QWORD *)v268 + 3) = 32769;
                      goto LABEL_246;
                    }
                    do
                      v195 = __ldxr(v192);
                    while (__stxr(v195 + 1, v192));
                    v221 = v193;
                    v196 = v134 + 2;
                    do
                      v197 = __ldxr(v196);
                    while (__stxr(v197 + 1, v196));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                    std::__shared_weak_count::__release_weak(v194);
                    v193 = v221;
                  }
                  else
                  {
                    do
                      v198 = __ldxr(v192);
                    while (__stxr(v198 + 1, v192));
                    v199 = v134 + 2;
                    do
                      v200 = __ldxr(v199);
                    while (__stxr(v200 + 1, v199));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                  }
                  do
                    v201 = __ldaxr(v192);
                  while (__stlxr(v201 - 1, v192));
                  if (!v201)
                  {
                    v222 = v193;
                    (*(void (**)(unint64_t *))(*v134 + 16))(v134);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v134);
                    v193 = v222;
                  }
                  goto LABEL_308;
                }
                if (v13 == 2)
                {
                  *((_QWORD *)v268 + 3) = 1;
                  v134 = (unint64_t *)operator new(0x390uLL);
                  v134[1] = 0;
                  v202 = v134 + 1;
                  v134[2] = 0;
                  *v134 = (unint64_t)&off_1E3BE9D90;
                  v136 = v134 + 3;
                  v223 = *(_QWORD *)(v122 + 192);
                  AVVCRecordingEngine::AVVCRecordingEngine((uint64_t)(v134 + 3), *(_QWORD *)(v122 + 184));
                  v134[3] = (unint64_t)&off_1E3BE9508;
                  *(_OWORD *)(v134 + 79) = 0u;
                  *(_OWORD *)(v134 + 81) = 0u;
                  *(_OWORD *)(v134 + 83) = 0u;
                  *(_OWORD *)((char *)v134 + 676) = 0u;
                  *((_DWORD *)v134 + 173) = 0;
                  v134[87] = 0;
                  *((_DWORD *)v134 + 176) = 0;
                  *((_BYTE *)v134 + 708) = 0;
                  v134[89] = 0;
                  *((_BYTE *)v134 + 784) = 0;
                  *((_DWORD *)v134 + 210) = 0;
                  *(_OWORD *)(v134 + 99) = 0u;
                  *(_OWORD *)(v134 + 101) = 0u;
                  *(_OWORD *)(v134 + 103) = 0u;
                  *((_OWORD *)v134 + 53) = 0u;
                  *((_OWORD *)v134 + 54) = 0u;
                  *((_BYTE *)v134 + 880) = 0;
                  *((_DWORD *)v134 + 225) = 0;
                  *(_OWORD *)((char *)v134 + 884) = 0u;
                  *((_BYTE *)v134 + 904) = 1;
                  TraceMethod::TraceMethod((TraceMethod *)buf, "AVVCAudioQueueRecordingEngine");
                  v134[99] = v223;
                  *((_OWORD *)v134 + 45) = 0u;
                  *((_OWORD *)v134 + 46) = 0u;
                  *((_OWORD *)v134 + 47) = 0u;
                  *((_OWORD *)v134 + 48) = 0u;
                  AVVCRecordingEngine::setStreamState((uint64_t)(v134 + 3), 0);
                  TraceMethod::~TraceMethod((TraceMethod *)buf);
                  *(_QWORD *)&v203 = v134 + 3;
                  *((_QWORD *)&v203 + 1) = v134;
                  v204 = (std::__shared_weak_count *)v134[5];
                  if (v204)
                  {
                    v163 = v226;
                    if (v204->__shared_owners_ != -1)
                    {
LABEL_341:
                      v266 = v203;
LABEL_247:
                      *(_QWORD *)buf = v84;
                      *(_QWORD *)&buf[8] = 3321888768;
                      *(_QWORD *)&buf[16] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke;
                      *(_QWORD *)&buf[24] = &unk_1E3BE9F80;
                      v275 = v136;
                      v276 = (std::__shared_weak_count *)v134;
                      v164 = v134 + 1;
                      do
                        v165 = __ldxr(v164);
                      while (__stxr(v165 + 1, v164));
                      v166 = v131;
                      v277 = *(_QWORD *)v228;
                      v281 = 1;
                      *(_QWORD *)&buf[32] = v166;
                      v274 = v267;
                      v280 = v13;
                      v273 = v132;
                      v278 = v246;
                      v279 = v247;
                      if (v247)
                      {
                        v167 = (unint64_t *)&v247->__shared_owners_;
                        do
                          v168 = __ldxr(v167);
                        while (__stxr(v168 + 1, v167));
                      }
                      v272 = v163;
                      (*(void (**)(_QWORD *, _BYTE *, const char *))(*v136 + 360))(v136, buf, "_createRecordingEngineWithParameters");

                      v169 = v279;
                      if (v279)
                      {
                        v170 = (unint64_t *)&v279->__shared_owners_;
                        do
                          v171 = __ldaxr(v170);
                        while (__stlxr(v171 - 1, v170));
                        if (!v171)
                        {
                          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                          std::__shared_weak_count::__release_weak(v169);
                        }
                      }

                      v172 = v276;
                      if (!v276)
                        goto LABEL_262;
                      v173 = (unint64_t *)&v276->__shared_owners_;
                      do
                        v174 = __ldaxr(v173);
                      while (__stlxr(v174 - 1, v173));
                      goto LABEL_260;
                    }
                    do
                      v205 = __ldxr(v202);
                    while (__stxr(v205 + 1, v202));
                    v224 = v203;
                    v206 = v134 + 2;
                    do
                      v207 = __ldxr(v206);
                    while (__stxr(v207 + 1, v206));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                    std::__shared_weak_count::__release_weak(v204);
                    v203 = v224;
                  }
                  else
                  {
                    v163 = v226;
                    do
                      v212 = __ldxr(v202);
                    while (__stxr(v212 + 1, v202));
                    v213 = v134 + 2;
                    do
                      v214 = __ldxr(v213);
                    while (__stxr(v214 + 1, v213));
                    v134[4] = (unint64_t)v136;
                    v134[5] = (unint64_t)v134;
                  }
                  do
                    v215 = __ldaxr(v202);
                  while (__stlxr(v215 - 1, v202));
                  if (!v215)
                  {
                    v225 = v203;
                    (*(void (**)(unint64_t *))(*v134 + 16))(v134);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v134);
                    v203 = v225;
                  }
                  goto LABEL_341;
                }
                if (kAVVCScope)
                {
                  v208 = *(id *)kAVVCScope;
                  v163 = v226;
                  if (!v208)
                  {
LABEL_329:
                    *(_QWORD *)buf = 0;
                    *(_QWORD *)&buf[8] = 0;
                    v239((uint64_t)v132, (uint64_t *)buf);
                    v172 = *(std::__shared_weak_count **)&buf[8];
                    if (!*(_QWORD *)&buf[8])
                    {
LABEL_262:
                      v175 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
                      if (*((_QWORD *)&v266 + 1))
                      {
                        v176 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
                        do
                          v177 = __ldaxr(v176);
                        while (__stlxr(v177 - 1, v176));
                        if (!v177)
                        {
                          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                          std::__shared_weak_count::__release_weak(v175);
                        }
                      }
                      _Block_object_dispose(v267, 8);

                      if (v123)
                      {
                        v178 = (unint64_t *)&v123->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                          std::__shared_weak_count::__release_weak(v123);
                        }
                      }

                      v119 = v245;
                      if (!v245)
                        goto LABEL_277;
                      v180 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v121 = __ldaxr(v180);
                      while (__stlxr(v121 - 1, v180));
                      goto LABEL_275;
                    }
                    v211 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                    do
                      v174 = __ldaxr(v211);
                    while (__stlxr(v174 - 1, v211));
LABEL_260:
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                    }
                    goto LABEL_262;
                  }
                }
                else
                {
                  v208 = MEMORY[0x1E0C81028];
                  v210 = MEMORY[0x1E0C81028];
                  v163 = v226;
                }
                if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3813;
                  _os_log_impl(&dword_19B733000, v208, OS_LOG_TYPE_ERROR, "%25s:%-5d _createRecordingEngineWithParameters : Fatal Error! Invalid engine type!", buf, 0x12u);
                }

                goto LABEL_329;
              }
              v150 = v246;
              v134 = (unint64_t *)operator new(0x278uLL);
              v134[1] = 0;
              v151 = v134 + 1;
              v134[2] = 0;
              *v134 = (unint64_t)&off_1E3BE9DC8;
              v136 = v134 + 3;
              AVVCExternalDeviceRecordingEngine::AVVCExternalDeviceRecordingEngine((uint64_t)(v134 + 3), *(_QWORD *)(v150 + 184));
              *(_QWORD *)&v152 = v134 + 3;
              *((_QWORD *)&v152 + 1) = v134;
              v153 = (std::__shared_weak_count *)v134[5];
              if (v153)
              {
                if (v153->__shared_owners_ != -1)
                {
LABEL_243:
                  v266 = v152;
                  v146 = v268;
                  v161 = (unint64_t *)(v246 + 608);
                  do
                  {
                    v162 = __ldxr(v161);
                    v149 = v162 + 1;
                  }
                  while (__stxr(v149, v161));
                  goto LABEL_245;
                }
                do
                  v154 = __ldxr(v151);
                while (__stxr(v154 + 1, v151));
                v219 = v152;
                v155 = v134 + 2;
                do
                  v156 = __ldxr(v155);
                while (__stxr(v156 + 1, v155));
                v134[4] = (unint64_t)v136;
                v134[5] = (unint64_t)v134;
                std::__shared_weak_count::__release_weak(v153);
                v152 = v219;
              }
              else
              {
                do
                  v157 = __ldxr(v151);
                while (__stxr(v157 + 1, v151));
                v158 = v134 + 2;
                do
                  v159 = __ldxr(v158);
                while (__stxr(v159 + 1, v158));
                v134[4] = (unint64_t)v136;
                v134[5] = (unint64_t)v134;
              }
              do
                v160 = __ldaxr(v151);
              while (__stlxr(v160 - 1, v151));
              if (!v160)
              {
                v220 = v152;
                (*(void (**)(unint64_t *))(*v134 + 16))(v134);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v134);
                v152 = v220;
              }
              goto LABEL_243;
            }
          }
          else
          {
            v105 = MEMORY[0x1E0C81028];
            v106 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4119;
            _os_log_impl(&dword_19B733000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
          }

          goto LABEL_182;
        }
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
        v22 = MEMORY[0x1E0C81028];
      }
      v20 = v20;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        Get4CCFromInt(v8);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3468;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v23;
        *(_WORD *)&buf[28] = 2112;
        *(_QWORD *)&buf[30] = 0;
        _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: %@ requested. ignoring the device id and use built in device - %@. ", buf, 0x26u);

      }
      v21 = 0;
      LODWORD(v20) = 0;
      goto LABEL_37;
    }
    if (objc_msgSend(v7, "activationMode") == 1886352244)
    {
      if (kAVVCScope)
      {
        v12 = *(id *)kAVVCScope;
        if (!v12)
        {
          v13 = 0;
LABEL_59:
          LODWORD(v20) = -50;
          goto LABEL_131;
        }
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
        v33 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3473;
        _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext: ERROR! No recording engine associated with device for post/auto activation context", buf, 0x12u);
      }

      v13 = 0;
      v12 = 0;
      goto LABEL_59;
    }
    if (objc_msgSend(v7, "activationMode") == 1684108899)
    {
      objc_msgSend(v7, "activationDeviceUID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        objc_msgSend(v7, "activationDeviceUID");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "isEqualToString:", &stru_1E3BED4C0);

        if (!v26)
        {
          objc_msgSend(v7, "activationDeviceUID");
          v21 = (id)objc_claimAutoreleasedReturnValue();
          LODWORD(v20) = 0;
          v13 = 3;
          goto LABEL_130;
        }
      }
      if (kAVVCScope)
      {
        v27 = *(id *)kAVVCScope;
        if (!v27)
          goto LABEL_118;
      }
      else
      {
        v27 = (id)MEMORY[0x1E0C81028];
        v37 = MEMORY[0x1E0C81028];
      }
      v38 = v27;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        Get4CCFromInt(v8);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3482;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v39;
        _os_log_impl(&dword_19B733000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Darwin activation (%@) requested with nil deviceUUID", buf, 0x1Cu);

      }
      goto LABEL_118;
    }
    if (IsPluginActivationContext(objc_msgSend(v7, "activationMode")))
    {
      objc_msgSend(v7, "activationDeviceUID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (v29)
      {
        objc_msgSend(v7, "activationDeviceUID");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "isEqualToString:", &stru_1E3BED4C0);

        if (!v31)
        {
          objc_msgSend(v7, "activationDeviceUID");
          v21 = (id)objc_claimAutoreleasedReturnValue();
          CALog::LogObjIfEnabled(3, kAVVCScope);
          v42 = objc_claimAutoreleasedReturnValue();
          v20 = v42;
          if (v42)
          {
            v43 = v42;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              Get4CCFromInt(v8);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3502;
              *(_WORD *)&buf[18] = 2112;
              *(_QWORD *)&buf[20] = v44;
              *(_WORD *)&buf[28] = 2112;
              *(_QWORD *)&buf[30] = v21;
              _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Plugin activation (%@) requested with deviceUUID - %@. ", buf, 0x26u);

            }
          }

          LODWORD(v20) = 0;
          v13 = 1;
          goto LABEL_130;
        }
      }
      if (kAVVCScope)
      {
        v32 = *(id *)kAVVCScope;
        if (!v32)
        {
LABEL_117:

LABEL_118:
          v21 = 0;
          v13 = 0;
          LODWORD(v20) = -50;
          goto LABEL_130;
        }
      }
      else
      {
        v32 = MEMORY[0x1E0C81028];
        v57 = MEMORY[0x1E0C81028];
      }
      v32 = v32;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        Get4CCFromInt(v8);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3493;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v58;
        _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Plugin activation (%@) requested with nil deviceUUID", buf, 0x1Cu);

      }
      goto LABEL_117;
    }
    *(_QWORD *)v267 = 1936289391;
    LOBYTE(v255) = 0;
    v34 = objc_msgSend(v7, "activationMode");
    v35 = v34;
    *(_QWORD *)&v266 = 0;
    if (v34 <= 1969840751)
    {
      if (v34 != 1684628340)
      {
        v36 = 1752132965;
        goto LABEL_71;
      }
    }
    else if (v34 != 1969840752)
    {
      if (v34 == 1986357346)
      {
        v209 = supportsCarPlayAuxStream();
        v40 = (id *)kAVVCScope;
        if (v209)
        {
LABEL_73:
          if (v40)
          {
            v41 = *v40;
            if (!v41)
            {
LABEL_85:
              ControllerImpl::sessionManagerForStreamID(v6, 0, 0);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "getSiriInputSource:withIdentifier:withIsMicrophoneCheck:forActivationMode:", v267, &v266, &v255, v35);

              if (kAVVCScope)
              {
                v47 = *(id *)kAVVCScope;
                if (!v47)
                  goto LABEL_93;
              }
              else
              {
                v47 = (id)MEMORY[0x1E0C81028];
                v48 = MEMORY[0x1E0C81028];
              }
              v49 = v47;
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                Get4CCFromInt(v267[0]);
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "ControllerImpl.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 712;
                *(_WORD *)&buf[18] = 2112;
                *(_QWORD *)&buf[20] = v50;
                *(_WORD *)&buf[28] = 2112;
                *(_QWORD *)&buf[30] = v266;
                *(_WORD *)&buf[38] = 1024;
                LODWORD(v272) = v255;
                _os_log_impl(&dword_19B733000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: siriInputSource(%@), siriRemoteInputIdentifier(%@), isMicrophoneBuiltIn(%d)", buf, 0x2Cu);

              }
              goto LABEL_92;
            }
          }
          else
          {
            v41 = MEMORY[0x1E0C81028];
            v45 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 707;
            _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: Context is ambiguous", buf, 0x12u);
          }

          goto LABEL_85;
        }
        goto LABEL_322;
      }
      v36 = 2003329648;
LABEL_71:
      if (v34 == v36)
        goto LABEL_72;
      v40 = (id *)kAVVCScope;
LABEL_322:
      if (v40)
      {
        v49 = *v40;
        if (!v49)
        {
LABEL_93:
          v21 = (id)v266;
          if (*(uint64_t *)v267 > 1936290659)
          {
            if (*(_QWORD *)v267 != 1936290660)
            {
              if (*(_QWORD *)v267 == 1936679529)
              {
                v13 = 1;
                goto LABEL_122;
              }
              goto LABEL_112;
            }
          }
          else
          {
            if (*(_QWORD *)v267 == 1936024681)
            {
              if (*(_QWORD *)(v6 + 184) == 1)
                v13 = 3;
              else
                v13 = 2;
              goto LABEL_122;
            }
            if (*(_QWORD *)v267 != 1936286822)
            {
LABEL_112:
              v13 = 2;
              goto LABEL_122;
            }
          }
          v51 = v255;
          v52 = isHACProduct() ^ 1;
          if (!v51)
            LOBYTE(v52) = 1;
          if ((v52 & 1) != 0 || *(_QWORD *)(v6 + 184) != 1)
          {
            CALog::LogObjIfEnabled(3, kAVVCScope);
            v55 = objc_claimAutoreleasedReturnValue();
            v56 = v55;
            if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ControllerImpl.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3589;
              _os_log_impl(&dword_19B733000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: AQ engine selected", buf, 0x12u);
            }

            goto LABEL_112;
          }
          CALog::LogObjIfEnabled(3, kAVVCScope);
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = v53;
          if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3583;
            _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: HAC engine selected", buf, 0x12u);
          }

          v13 = 4;
LABEL_122:
          if (kAVVCScope)
          {
            v59 = *(id *)kAVVCScope;
            if (!v59)
            {
LABEL_129:
              LODWORD(v20) = 0;
              goto LABEL_130;
            }
          }
          else
          {
            v59 = (id)MEMORY[0x1E0C81028];
            v60 = MEMORY[0x1E0C81028];
          }
          v61 = v59;
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            Get4CCFromInt(v8);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v63 = off_1E3BEC788[v13 - 1];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "ControllerImpl.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3607;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v62;
            *(_WORD *)&buf[28] = 2112;
            *(_QWORD *)&buf[30] = v21;
            *(_WORD *)&buf[38] = 2080;
            v272 = v63;
            _os_log_impl(&dword_19B733000, v61, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: ActivationMode (%@) requested with deviceUUID (%@). Selected EngineType (%s)", buf, 0x30u);

          }
          goto LABEL_129;
        }
      }
      else
      {
        v49 = MEMORY[0x1E0C81028];
        v216 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 715;
        _os_log_impl(&dword_19B733000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: Context is not ambiguous", buf, 0x12u);
      }
LABEL_92:

      goto LABEL_93;
    }
LABEL_72:
    v40 = (id *)kAVVCScope;
    goto LABEL_73;
  }
  v3 = *(void **)(a1 + 48);
  v4 = v3 != 0;
  v264[0] = MEMORY[0x1E0C809B0];
  v264[1] = 3221225472;
  v264[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2;
  v264[3] = &unk_1E3BECB00;
  v265 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v2, v4, v264);
  v5 = v265;
LABEL_144:

}

void sub_19B7E4D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11780, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, 0, 0);

}

void sub_19B7E5018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_219(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, 0, 0);

}

void sub_19B7E509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_220(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v3;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL4 v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
    goto LABEL_10;
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v20 = "ControllerImpl.mm";
    v21 = 1024;
    v22 = 3666;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext: Engine lookup returned nil!", buf, 0x12u);
  }

LABEL_9:
  v3 = *a2;
  if (!*a2)
  {
    v7 = 0;
    v8 = 0;
    goto LABEL_11;
  }
LABEL_10:
  v7 = v3[34];
  v8 = (*(unsigned int (**)(_QWORD *))(*v3 + 320))(v3);
LABEL_11:
  v9 = a1[6];
  v10 = (void *)a1[4];
  v11 = v10 != 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_221;
  v14[3] = &unk_1E3BEC078;
  v12 = v10;
  v17 = v7;
  v18 = v8;
  v13 = a1[5];
  v15 = v12;
  v16 = v13;
  ControllerImpl::safeNotifyAlwaysAsync(v9, v11, v14);

}

void sub_19B7E5234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_223(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL4 v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD v28[4];
  id v29;

  v3 = *a2;
  if (*a2)
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3321888768;
    v21[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_3;
    v21[3] = &unk_1E3BEABF0;
    v4 = (std::__shared_weak_count *)a2[1];
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v22 = v7;
    v26 = v9;
    v27 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v23 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v3 + 360))(v3, v21, "setContext_block_invoke");

    v12 = v27;
    if (v27)
    {
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 56);
    v19 = *(void **)(a1 + 40);
    v20 = v19 != 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2_224;
    v28[3] = &unk_1E3BECB00;
    v29 = v19;
    ControllerImpl::safeNotifyAlwaysAsync(v18, v20, v28);

  }
}

void sub_19B7E5410(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_226(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  unsigned int v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  __CFString *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 280) = *(_QWORD *)(a1 + 72);
  AVVCRecordingEngine::setActivationContextSettings((AVVCRecordingEngine *)v2, *(AVVCContextSettings **)(a1 + 32));
  if (!kAVVCScope)
  {
    v3 = (id)MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
LABEL_5:
    v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
LABEL_24:

      goto LABEL_25;
    }
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(std::__shared_weak_count **)(a1 + 64);
    v35 = v6;
    v36 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      if (v6)
      {
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = *(_QWORD *)(v6 + 272);
        v12 = *p_shared_owners + 1;
LABEL_13:
        objc_msgSend(v10, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v6, v11, v12);
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_15:
        v14 = v13;
        v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 320))(*(_QWORD *)(a1 + 56));
        if (v15 > 4)
          v16 = "ILLEGAL";
        else
          v16 = off_1E3BEC7A8[v15];
        Get4CCFromInt(*(_DWORD *)(a1 + 72));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 272);
        v19 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136316674;
        v38 = "ControllerImpl.mm";
        v39 = 1024;
        v40 = 3735;
        v41 = 2112;
        v42 = v14;
        v43 = 2080;
        v44 = v16;
        v45 = 2112;
        v46 = v17;
        v47 = 2112;
        v48 = v19;
        v49 = 2048;
        v50 = v18;
        _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found matching engine[%@] of type(%s) for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

        if (v7)
        {
          v20 = (unint64_t *)&v7->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }

        goto LABEL_24;
      }
    }
    else if (v6)
    {
      v12 = 0;
      v10 = (void *)MEMORY[0x1E0CB3940];
      v11 = *(_QWORD *)(v6 + 272);
      goto LABEL_13;
    }
    v13 = CFSTR("(0x0) use_count:0");
    goto LABEL_15;
  }
  v3 = *(id *)kAVVCScope;
  if (v3)
    goto LABEL_5;
LABEL_25:
  v22 = *(_QWORD *)(a1 + 80);
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3321888768;
  v31[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_227;
  v31[3] = &unk_1E3BEA198;
  v23 = *(id *)(a1 + 48);
  v25 = *(_QWORD *)(a1 + 56);
  v24 = *(std::__shared_weak_count **)(a1 + 64);
  v32 = v23;
  v33 = v25;
  v34 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  ControllerImpl::safeWork(v22, v31, (uint64_t)"setContext_block_invoke");
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

}

void sub_19B7E5758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 80);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_227(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = a1[4];
  v4 = a1[5];
  v3 = (std::__shared_weak_count *)a1[6];
  v10 = v4;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19B7E5898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD v44[4];
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  __CFString *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  AVVCRecordingEngine::setRecordDeviceUID(*(AVVCRecordingEngine **)(*(_QWORD *)(a1 + 64) + 376), *(NSString **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 280) = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 108))
  {
    *(_QWORD *)(v2 + 272) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3321888768;
    v44[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_230;
    v44[3] = &unk_1E3BE9F48;
    v4 = *(_QWORD *)(a1 + 88);
    v3 = *(std::__shared_weak_count **)(a1 + 96);
    v49 = v4;
    v50 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v47 = *(id *)(a1 + 48);
    v7 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 64);
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    v45 = v7;
    v51 = v9;
    v52 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_QWORD *)(a1 + 56);
    v54 = *(_DWORD *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 80);
    v48 = v12;
    v53 = v13;
    v46 = *(id *)(a1 + 32);
    ControllerImpl::safeWork(v4, v44, (uint64_t)"_createRecordingEngineWithParameters_block_invoke");

    v14 = v52;
    if (v52)
    {
      v15 = (unint64_t *)&v52->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    v17 = v50;
    if (v50)
    {
      v18 = (unint64_t *)&v50->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_48:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      return;
    }
    return;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(v2 + 272);
  if (kAVVCScope)
  {
    v20 = *(id *)kAVVCScope;
    if (!v20)
      goto LABEL_41;
  }
  else
  {
    v20 = (id)MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  v22 = v20;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(unsigned int *)(a1 + 104);
    if (v23 > 4)
      v24 = "ILLEGAL";
    else
      v24 = off_1E3BEC7A8[v23];
    v25 = *(_QWORD *)(a1 + 64);
    v26 = *(std::__shared_weak_count **)(a1 + 72);
    v57 = v25;
    v58 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      if (v25)
      {
        v29 = (void *)MEMORY[0x1E0CB3940];
        v30 = *(_QWORD *)(v25 + 272);
        v31 = *v27 + 1;
LABEL_32:
        objc_msgSend(v29, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v25, v30, v31);
        v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_34;
      }
    }
    else if (v25)
    {
      v31 = 0;
      v29 = (void *)MEMORY[0x1E0CB3940];
      v30 = *(_QWORD *)(v25 + 272);
      goto LABEL_32;
    }
    v32 = CFSTR("(0x0) use_count:0");
LABEL_34:
    v33 = v32;
    Get4CCFromInt(*(_DWORD *)(a1 + 80));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = *(_QWORD *)(a1 + 32);
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    *(_DWORD *)buf = 136316674;
    v60 = "ControllerImpl.mm";
    v61 = 1024;
    v62 = 3827;
    v63 = 2080;
    v64 = v24;
    v65 = 2112;
    v66 = v33;
    v67 = 2112;
    v68 = v34;
    v69 = 2112;
    v70 = v35;
    v71 = 2048;
    v72 = v36;
    _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Reusing (%s) engine[%@] for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

    if (v26)
    {
      v37 = (unint64_t *)&v26->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

  }
LABEL_41:
  v39 = *(_QWORD *)(a1 + 48);
  if (v39)
  {
    v40 = *(std::__shared_weak_count **)(a1 + 72);
    v55 = *(_QWORD *)(a1 + 64);
    v56 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    (*(void (**)(uint64_t, uint64_t *))(v39 + 16))(v39, &v55);
    v17 = v56;
    if (v56)
    {
      v43 = (unint64_t *)&v56->__shared_owners_;
      do
        v19 = __ldaxr(v43);
      while (__stlxr(v19 - 1, v43));
      goto LABEL_48;
    }
  }
}

void sub_19B7E5CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a29);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 64;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 88);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  id v57;
  id v58;
  NSObject *v59;
  uint64_t *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  __CFString *v65;
  id v66;
  __CFString *v67;
  uint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  void *v102;
  void *v103;
  void *v104;
  std::__shared_weak_count *v105;
  _QWORD v106[4];
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  _QWORD v122[4];
  id v123[2];
  std::__shared_weak_count *v124;
  _QWORD v125[4];
  id v126[2];
  std::__shared_weak_count *v127;
  _QWORD v128[4];
  id v129[2];
  std::__shared_weak_count *v130;
  _QWORD v131[4];
  id v132[2];
  std::__shared_weak_count *v133;
  _QWORD v134[4];
  id v135[2];
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD v139[4];
  id v140[2];
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  _QWORD v144[4];
  id v145[2];
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  _QWORD v149[4];
  id v150[2];
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  id v156;
  void *v157;
  std::__shared_weak_count *v158;
  _QWORD v159[4];
  id v160[2];
  std::__shared_weak_count *v161;
  _QWORD v162[4];
  id v163[2];
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void *v167;
  uint64_t v168;
  void (*v169)(uint64_t);
  void *v170;
  id v171[2];
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  _QWORD aBlock[4];
  id v176[2];
  std::__shared_weak_count *v177;
  id location;
  uint8_t buf[4];
  const char *v180;
  __int16 v181;
  int v182;
  __int16 v183;
  __CFString *v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(v2 + 520))
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      v118 = 0;
      v119 = 0;
      (*(void (**)(uint64_t, uint64_t *))(v3 + 16))(v3, &v118);
      v4 = v119;
      if (v119)
      {
        p_shared_owners = (unint64_t *)&v119->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
LABEL_174:
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
    }
    return;
  }
  v7 = *(void **)(a1 + 32);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  v116 = *(_QWORD *)(a1 + 80);
  v117 = v8;
  v105 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = v7;
  objc_initWeak(&location, v11);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v167, *(_QWORD *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
  v12 = v167;
  v13 = (std::__shared_weak_count *)v168;
  if (v168)
  {
    v14 = (unint64_t *)(v168 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
  aBlock[3] = &unk_1E3BEA2A8;
  objc_copyWeak(v176, &location);
  v176[1] = v12;
  v177 = v13;
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v102 = _Block_copy(aBlock);
  v167 = (void *)MEMORY[0x1E0C809B0];
  v168 = 3321888768;
  v169 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_238;
  v170 = &unk_1E3BEAA30;
  objc_copyWeak(v171, &location);
  v171[1] = v12;
  v172 = v13;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = v116;
  v173 = v116;
  v174 = v117;
  if (v117)
  {
    v23 = &v117->__shared_owners_;
    do
      v24 = __ldxr((unint64_t *)v23);
    while (__stxr(v24 + 1, (unint64_t *)v23));
  }
  v103 = _Block_copy(&v167);
  v162[0] = MEMORY[0x1E0C809B0];
  v162[1] = 3321888768;
  v162[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_242;
  v162[3] = &unk_1E3BEAA30;
  objc_copyWeak(v163, &location);
  v163[1] = v12;
  v164 = v13;
  if (v13)
  {
    v25 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v165 = v116;
  v166 = v117;
  if (v117)
  {
    v27 = &v117->__shared_owners_;
    do
      v28 = __ldxr((unint64_t *)v27);
    while (__stxr(v28 + 1, (unint64_t *)v27));
  }
  v104 = _Block_copy(v162);
  AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks(v116, v103, v102);
  AVVCRecordingEngine::setStopRecordCompletionBlock(v116, v104);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v116 + 320))(v116) == 2)
  {
    v159[0] = MEMORY[0x1E0C809B0];
    v159[1] = 3321888768;
    v159[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_245;
    v159[3] = &unk_1E3BEA318;
    objc_copyWeak(v160, &location);
    v160[1] = v12;
    v161 = v13;
    if (v13)
    {
      v29 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    AVVCRecordingEngine::setEncoderErrorBlock(v116, v159);
    if (v161)
      std::__shared_weak_count::__release_weak(v161);
    objc_destroyWeak(v160);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v116 + 320))(v116) == 2)
  {
    v152 = MEMORY[0x1E0C809B0];
    v153 = 3321888768;
    v154 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_248;
    v155 = &unk_1E3BEA270;
    objc_copyWeak(&v156, &location);
    v157 = v12;
    v158 = v13;
    if (v13)
    {
      v31 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v116 + 320))(v116) != 1)
      goto LABEL_51;
    v152 = MEMORY[0x1E0C809B0];
    v153 = 3321888768;
    v154 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_251;
    v155 = &unk_1E3BEA270;
    objc_copyWeak(&v156, &location);
    v157 = v12;
    v158 = v13;
    if (v13)
    {
      v33 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
  }
  AVVCRecordingEngine::setSetupEndpointerBlock(v116, &v152);
  if (v158)
    std::__shared_weak_count::__release_weak(v158);
  objc_destroyWeak(&v156);
  v22 = v116;
LABEL_51:
  v149[0] = MEMORY[0x1E0C809B0];
  v149[1] = 3321888768;
  v149[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_252;
  v149[3] = &unk_1E3BE5F90;
  objc_copyWeak(v150, &location);
  v150[1] = v12;
  v151 = v13;
  if (v13)
  {
    v35 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  AVVCRecordingEngine::setCheckForEndpointBlock(v22, v149);
  v144[0] = MEMORY[0x1E0C809B0];
  v144[1] = 3321888768;
  v144[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_254;
  v144[3] = &unk_1E3BEAA68;
  objc_copyWeak(v145, &location);
  v145[1] = v12;
  v146 = v13;
  if (v13)
  {
    v37 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v147 = v22;
  v148 = v117;
  if (v117)
  {
    v39 = &v117->__shared_owners_;
    do
      v40 = __ldxr((unint64_t *)v39);
    while (__stxr(v40 + 1, (unint64_t *)v39));
  }
  AVVCRecordingEngine::setStopRecordWithRecordLockBlock(v22, v144);
  v139[0] = MEMORY[0x1E0C809B0];
  v139[1] = 3321888768;
  v139[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_256;
  v139[3] = &unk_1E3BEAA68;
  objc_copyWeak(v140, &location);
  v140[1] = v12;
  v141 = v13;
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v142 = v22;
  v143 = v117;
  if (v117)
  {
    v43 = &v117->__shared_owners_;
    do
      v44 = __ldxr((unint64_t *)v43);
    while (__stxr(v44 + 1, (unint64_t *)v43));
  }
  AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock(v22, v139);
  v134[0] = MEMORY[0x1E0C809B0];
  v134[1] = 3321888768;
  v134[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_257;
  v134[3] = &unk_1E3BEAA68;
  objc_copyWeak(v135, &location);
  v135[1] = v12;
  v136 = v13;
  if (v13)
  {
    v45 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v137 = v22;
  v138 = v117;
  if (v117)
  {
    v47 = &v117->__shared_owners_;
    do
      v48 = __ldxr((unint64_t *)v47);
    while (__stxr(v48 + 1, (unint64_t *)v47));
  }
  AVVCRecordingEngine::setReconfigureWithRecordLockBlock(v22, v134);
  v131[0] = MEMORY[0x1E0C809B0];
  v131[1] = 3321888768;
  v131[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_258;
  v131[3] = &unk_1E3BEA350;
  objc_copyWeak(v132, &location);
  v132[1] = v12;
  v133 = v13;
  if (v13)
  {
    v49 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  AVVCRecordingEngine::setStreamInvalidatedBlock(v22, v131);
  v128[0] = MEMORY[0x1E0C809B0];
  v128[1] = 3321888768;
  v128[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_262;
  v128[3] = &unk_1E3BEA318;
  objc_copyWeak(v129, &location);
  v129[1] = v12;
  v130 = v13;
  if (v13)
  {
    v51 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  AVVCRecordingEngine::setHardwareConfigChangedBlock(v22, v128);
  v125[0] = MEMORY[0x1E0C809B0];
  v125[1] = 3321888768;
  v125[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_265;
  v125[3] = &unk_1E3BEA2E0;
  objc_copyWeak(v126, &location);
  v126[1] = v12;
  v127 = v13;
  if (v13)
  {
    v53 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  AVVCRecordingEngine::setBeginSessionActivateBlock(v22, v125);
  v122[0] = MEMORY[0x1E0C809B0];
  v122[1] = 3321888768;
  v122[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_268;
  v122[3] = &unk_1E3BEA2E0;
  objc_copyWeak(v123, &location);
  v123[1] = v12;
  v124 = v13;
  if (v13)
  {
    v55 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  AVVCRecordingEngine::setEndSessionActivateBlock(v22, v122);
  if (!kAVVCScope)
  {
    v57 = (id)MEMORY[0x1E0C81028];
    v58 = MEMORY[0x1E0C81028];
LABEL_88:
    v59 = v57;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
LABEL_104:

      goto LABEL_105;
    }
    v120 = v22;
    v121 = v117;
    if (v117)
    {
      v60 = &v117->__shared_owners_;
      do
        v61 = __ldxr((unint64_t *)v60);
      while (__stxr(v61 + 1, (unint64_t *)v60));
      if (v22)
      {
        v62 = (void *)MEMORY[0x1E0CB3940];
        v63 = *(unsigned int *)(v22 + 272);
        v64 = v117->__shared_owners_ + 1;
LABEL_96:
        objc_msgSend(v62, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v22, v63, v64);
        v65 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v66 = v11;
        goto LABEL_98;
      }
    }
    else if (v22)
    {
      v64 = 0;
      v62 = (void *)MEMORY[0x1E0CB3940];
      v63 = *(unsigned int *)(v22 + 272);
      goto LABEL_96;
    }
    v66 = v11;
    v65 = CFSTR("(0x0) use_count:0");
LABEL_98:
    v67 = v65;
    *(_DWORD *)buf = 136315650;
    v180 = "ControllerImpl.mm";
    v181 = 1024;
    v182 = 4020;
    v183 = 2112;
    v184 = v67;
    _os_log_impl(&dword_19B733000, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configured completion blocks for engine[%@]", buf, 0x1Cu);

    v11 = v66;
    if (v117)
    {
      v68 = &v117->__shared_owners_;
      do
        v69 = __ldaxr((unint64_t *)v68);
      while (__stlxr(v69 - 1, (unint64_t *)v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }

    goto LABEL_104;
  }
  v57 = *(id *)kAVVCScope;
  if (v57)
    goto LABEL_88;
LABEL_105:
  if (v124)
    std::__shared_weak_count::__release_weak(v124);
  objc_destroyWeak(v123);
  if (v127)
    std::__shared_weak_count::__release_weak(v127);
  objc_destroyWeak(v126);
  if (v130)
    std::__shared_weak_count::__release_weak(v130);
  objc_destroyWeak(v129);
  if (v133)
    std::__shared_weak_count::__release_weak(v133);
  objc_destroyWeak(v132);
  v70 = v138;
  if (v138)
  {
    v71 = (unint64_t *)&v138->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v136)
    std::__shared_weak_count::__release_weak(v136);
  objc_destroyWeak(v135);
  v73 = v143;
  if (v143)
  {
    v74 = (unint64_t *)&v143->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v141)
    std::__shared_weak_count::__release_weak(v141);
  objc_destroyWeak(v140);
  v76 = v148;
  if (v148)
  {
    v77 = (unint64_t *)&v148->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v146)
    std::__shared_weak_count::__release_weak(v146);
  objc_destroyWeak(v145);
  if (v151)
    std::__shared_weak_count::__release_weak(v151);
  objc_destroyWeak(v150);

  v79 = v166;
  if (v166)
  {
    v80 = (unint64_t *)&v166->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v164)
    std::__shared_weak_count::__release_weak(v164);
  objc_destroyWeak(v163);

  v82 = v174;
  if (v174)
  {
    v83 = (unint64_t *)&v174->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v172)
    std::__shared_weak_count::__release_weak(v172);
  objc_destroyWeak(v171);

  if (v177)
    std::__shared_weak_count::__release_weak(v177);
  objc_destroyWeak(v176);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  objc_destroyWeak(&location);

  if (v105)
  {
    v85 = (unint64_t *)&v105->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v87 = *(void **)(a1 + 32);
  v88 = *(_QWORD *)(a1 + 56);
  v89 = *(_QWORD *)(a1 + 64);
  v90 = *(_QWORD *)(*(_QWORD *)(v88 + 8) + 24);
  v106[0] = MEMORY[0x1E0C809B0];
  v106[1] = 3321888768;
  v106[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_2;
  v106[3] = &unk_1E3BE9E68;
  v91 = *(std::__shared_weak_count **)(a1 + 72);
  v110 = v89;
  v111 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v88 = *(_QWORD *)(a1 + 56);
  }
  v95 = *(_QWORD *)(a1 + 80);
  v94 = *(std::__shared_weak_count **)(a1 + 88);
  v109 = v88;
  v112 = v95;
  v113 = v94;
  if (v94)
  {
    v96 = (unint64_t *)&v94->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v115 = *(_DWORD *)(a1 + 104);
  v114 = *(_QWORD *)(a1 + 96);
  v107 = *(id *)(a1 + 40);
  v108 = *(id *)(a1 + 48);
  ControllerImpl::_removeEngineFromMap(v89, v87, v90, 0, v106);

  v98 = v113;
  if (v113)
  {
    v99 = (unint64_t *)&v113->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v4 = v111;
  if (v111)
  {
    v101 = (unint64_t *)&v111->__shared_owners_;
    do
      v6 = __ldaxr(v101);
    while (__stlxr(v6 - 1, v101));
    goto LABEL_174;
  }
}

void sub_19B7E6B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17, id *a18, id *a19, id *a20,id *a21,id *a22,id *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a67;
  std::__shared_weak_count *v67;
  id *v68;
  id *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  std::__shared_weak_count *v74;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a45);

  if (a53)
    std::__shared_weak_count::__release_weak(a53);
  objc_destroyWeak(v69);
  if (a60)
    std::__shared_weak_count::__release_weak(a60);
  objc_destroyWeak(v68);
  if (a67)
    std::__shared_weak_count::__release_weak(a67);
  objc_destroyWeak(location);
  if (STACK[0x208])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x208]);
  objc_destroyWeak(a17);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a13);
  if (STACK[0x240])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x240]);
  objc_destroyWeak(a18);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a14);
  if (STACK[0x288])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x288]);
  objc_destroyWeak(a19);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a15);
  if (STACK[0x2D0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2D0]);
  objc_destroyWeak(a20);
  if (STACK[0x318])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x318]);
  objc_destroyWeak(a21);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C8]);
  if (STACK[0x3C0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3C0]);
  objc_destroyWeak(a23);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  if (STACK[0x408])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x408]);
  objc_destroyWeak(a22);

  v74 = *(std::__shared_weak_count **)(v72 - 176);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  objc_destroyWeak(a12);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  objc_destroyWeak((id *)(v72 - 168));

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE80c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

